
H563ZI_LwIP_wRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019df0  08000250  08000250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d80  0801a040  0801a040  0001b040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cdc0  0801cdc0  0001e090  2**0
                  CONTENTS
  4 .ARM          00000008  0801cdc0  0801cdc0  0001ddc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cdc8  0801cdc8  0001e090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cdc8  0801cdc8  0001ddc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cdcc  0801cdcc  0001ddcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20050000  0801cdd0  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010da8  20050090  0801ce60  0001e090  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20060e38  0801ce60  0001ee38  2**0
                  ALLOC
 11 .lwip_sec     00000200  20040000  20040000  0001f000  2**2
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0001e090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035b9e  00000000  00000000  0001e0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007bb8  00000000  00000000  00053c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002860  00000000  00000000  0005b820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001fd5  00000000  00000000  0005e080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000425a0  00000000  00000000  00060055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003eeca  00000000  00000000  000a25f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016681d  00000000  00000000  000e14bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00247cdc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b0a4  00000000  00000000  00247d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00252dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20050090 	.word	0x20050090
 800026c:	00000000 	.word	0x00000000
 8000270:	0801a028 	.word	0x0801a028

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20050094 	.word	0x20050094
 800028c:	0801a028 	.word	0x0801a028

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97e 	b.w	80005a4 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14d      	bne.n	8000368 <__udivmoddi4+0xa8>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	460f      	mov	r7, r1
 80002d0:	4684      	mov	ip, r0
 80002d2:	4696      	mov	lr, r2
 80002d4:	fab2 f382 	clz	r3, r2
 80002d8:	d960      	bls.n	800039c <__udivmoddi4+0xdc>
 80002da:	b14b      	cbz	r3, 80002f0 <__udivmoddi4+0x30>
 80002dc:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80002ea:	fa20 f202 	lsr.w	r2, r0, r2
 80002ee:	4317      	orrs	r7, r2
 80002f0:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f4:	fa1f f48e 	uxth.w	r4, lr
 80002f8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002fc:	fbb7 f1f6 	udiv	r1, r7, r6
 8000300:	fb06 7711 	mls	r7, r6, r1, r7
 8000304:	fb01 f004 	mul.w	r0, r1, r4
 8000308:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800030c:	4290      	cmp	r0, r2
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x62>
 8000310:	eb1e 0202 	adds.w	r2, lr, r2
 8000314:	f101 37ff 	add.w	r7, r1, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x60>
 800031a:	4290      	cmp	r0, r2
 800031c:	f200 812d 	bhi.w	800057a <__udivmoddi4+0x2ba>
 8000320:	4639      	mov	r1, r7
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	fa1f fc8c 	uxth.w	ip, ip
 8000328:	fbb2 f0f6 	udiv	r0, r2, r6
 800032c:	fb06 2210 	mls	r2, r6, r0, r2
 8000330:	fb00 f404 	mul.w	r4, r0, r4
 8000334:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000338:	4564      	cmp	r4, ip
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x8e>
 800033c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x8c>
 8000346:	4564      	cmp	r4, ip
 8000348:	f200 811a 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 800034c:	4610      	mov	r0, r2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	ebac 0c04 	sub.w	ip, ip, r4
 8000356:	2100      	movs	r1, #0
 8000358:	b125      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035a:	fa2c f303 	lsr.w	r3, ip, r3
 800035e:	2200      	movs	r2, #0
 8000360:	e9c5 3200 	strd	r3, r2, [r5]
 8000364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000368:	428b      	cmp	r3, r1
 800036a:	d905      	bls.n	8000378 <__udivmoddi4+0xb8>
 800036c:	b10d      	cbz	r5, 8000372 <__udivmoddi4+0xb2>
 800036e:	e9c5 0100 	strd	r0, r1, [r5]
 8000372:	2100      	movs	r1, #0
 8000374:	4608      	mov	r0, r1
 8000376:	e7f5      	b.n	8000364 <__udivmoddi4+0xa4>
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	d14d      	bne.n	800041c <__udivmoddi4+0x15c>
 8000380:	42a3      	cmp	r3, r4
 8000382:	f0c0 80f2 	bcc.w	800056a <__udivmoddi4+0x2aa>
 8000386:	4290      	cmp	r0, r2
 8000388:	f080 80ef 	bcs.w	800056a <__udivmoddi4+0x2aa>
 800038c:	4606      	mov	r6, r0
 800038e:	4623      	mov	r3, r4
 8000390:	4608      	mov	r0, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e6      	beq.n	8000364 <__udivmoddi4+0xa4>
 8000396:	e9c5 6300 	strd	r6, r3, [r5]
 800039a:	e7e3      	b.n	8000364 <__udivmoddi4+0xa4>
 800039c:	2b00      	cmp	r3, #0
 800039e:	f040 80a2 	bne.w	80004e6 <__udivmoddi4+0x226>
 80003a2:	1a8a      	subs	r2, r1, r2
 80003a4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a8:	fa1f f68e 	uxth.w	r6, lr
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb2 f4f7 	udiv	r4, r2, r7
 80003b2:	fb07 2014 	mls	r0, r7, r4, r2
 80003b6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb06 f004 	mul.w	r0, r6, r4
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d90f      	bls.n	80003e6 <__udivmoddi4+0x126>
 80003c6:	eb1e 0202 	adds.w	r2, lr, r2
 80003ca:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ce:	bf2c      	ite	cs
 80003d0:	f04f 0901 	movcs.w	r9, #1
 80003d4:	f04f 0900 	movcc.w	r9, #0
 80003d8:	4290      	cmp	r0, r2
 80003da:	d903      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003dc:	f1b9 0f00 	cmp.w	r9, #0
 80003e0:	f000 80c8 	beq.w	8000574 <__udivmoddi4+0x2b4>
 80003e4:	4644      	mov	r4, r8
 80003e6:	1a12      	subs	r2, r2, r0
 80003e8:	fa1f fc8c 	uxth.w	ip, ip
 80003ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f0:	fb07 2210 	mls	r2, r7, r0, r2
 80003f4:	fb00 f606 	mul.w	r6, r0, r6
 80003f8:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003fc:	4566      	cmp	r6, ip
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x152>
 8000400:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000404:	f100 32ff 	add.w	r2, r0, #4294967295
 8000408:	d202      	bcs.n	8000410 <__udivmoddi4+0x150>
 800040a:	4566      	cmp	r6, ip
 800040c:	f200 80bb 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000410:	4610      	mov	r0, r2
 8000412:	ebac 0c06 	sub.w	ip, ip, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	e79d      	b.n	8000358 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa04 fe01 	lsl.w	lr, r4, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	fa20 fc06 	lsr.w	ip, r0, r6
 800042e:	40f4      	lsrs	r4, r6
 8000430:	408a      	lsls	r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	ea4e 030c 	orr.w	r3, lr, ip
 8000438:	fa00 fe01 	lsl.w	lr, r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb4 f0f8 	udiv	r0, r4, r8
 800044c:	fb08 4410 	mls	r4, r8, r0, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb00 f90c 	mul.w	r9, r0, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	d90e      	bls.n	800047a <__udivmoddi4+0x1ba>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	bf2c      	ite	cs
 8000464:	f04f 0b01 	movcs.w	fp, #1
 8000468:	f04f 0b00 	movcc.w	fp, #0
 800046c:	45a1      	cmp	r9, r4
 800046e:	d903      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000470:	f1bb 0f00 	cmp.w	fp, #0
 8000474:	f000 8093 	beq.w	800059e <__udivmoddi4+0x2de>
 8000478:	4650      	mov	r0, sl
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f8 	udiv	r3, r4, r8
 8000486:	fb08 4413 	mls	r4, r8, r3, r4
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000492:	45a4      	cmp	ip, r4
 8000494:	d906      	bls.n	80004a4 <__udivmoddi4+0x1e4>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 38ff 	add.w	r8, r3, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x1e2>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d87a      	bhi.n	8000598 <__udivmoddi4+0x2d8>
 80004a2:	4643      	mov	r3, r8
 80004a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a8:	eba4 040c 	sub.w	r4, r4, ip
 80004ac:	fba0 9802 	umull	r9, r8, r0, r2
 80004b0:	4544      	cmp	r4, r8
 80004b2:	46cc      	mov	ip, r9
 80004b4:	4643      	mov	r3, r8
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0x1fe>
 80004b8:	d106      	bne.n	80004c8 <__udivmoddi4+0x208>
 80004ba:	45ce      	cmp	lr, r9
 80004bc:	d204      	bcs.n	80004c8 <__udivmoddi4+0x208>
 80004be:	3801      	subs	r0, #1
 80004c0:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c4:	eb68 0307 	sbc.w	r3, r8, r7
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x222>
 80004ca:	ebbe 020c 	subs.w	r2, lr, ip
 80004ce:	eb64 0403 	sbc.w	r4, r4, r3
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	fa22 f301 	lsr.w	r3, r2, r1
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	431e      	orrs	r6, r3
 80004de:	e9c5 6400 	strd	r6, r4, [r5]
 80004e2:	2100      	movs	r1, #0
 80004e4:	e73e      	b.n	8000364 <__udivmoddi4+0xa4>
 80004e6:	fa02 fe03 	lsl.w	lr, r2, r3
 80004ea:	f1c3 0120 	rsb	r1, r3, #32
 80004ee:	fa04 f203 	lsl.w	r2, r4, r3
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004fc:	fa20 f101 	lsr.w	r1, r0, r1
 8000500:	fa1f f68e 	uxth.w	r6, lr
 8000504:	fbb4 f0f7 	udiv	r0, r4, r7
 8000508:	430a      	orrs	r2, r1
 800050a:	fb07 4410 	mls	r4, r7, r0, r4
 800050e:	0c11      	lsrs	r1, r2, #16
 8000510:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000514:	fb00 f406 	mul.w	r4, r0, r6
 8000518:	428c      	cmp	r4, r1
 800051a:	d90e      	bls.n	800053a <__udivmoddi4+0x27a>
 800051c:	eb1e 0101 	adds.w	r1, lr, r1
 8000520:	f100 38ff 	add.w	r8, r0, #4294967295
 8000524:	bf2c      	ite	cs
 8000526:	f04f 0901 	movcs.w	r9, #1
 800052a:	f04f 0900 	movcc.w	r9, #0
 800052e:	428c      	cmp	r4, r1
 8000530:	d902      	bls.n	8000538 <__udivmoddi4+0x278>
 8000532:	f1b9 0f00 	cmp.w	r9, #0
 8000536:	d02c      	beq.n	8000592 <__udivmoddi4+0x2d2>
 8000538:	4640      	mov	r0, r8
 800053a:	1b09      	subs	r1, r1, r4
 800053c:	b292      	uxth	r2, r2
 800053e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000542:	fb07 1114 	mls	r1, r7, r4, r1
 8000546:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054a:	fb04 f106 	mul.w	r1, r4, r6
 800054e:	4291      	cmp	r1, r2
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x2a2>
 8000552:	eb1e 0202 	adds.w	r2, lr, r2
 8000556:	f104 38ff 	add.w	r8, r4, #4294967295
 800055a:	d201      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 800055c:	4291      	cmp	r1, r2
 800055e:	d815      	bhi.n	800058c <__udivmoddi4+0x2cc>
 8000560:	4644      	mov	r4, r8
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000568:	e721      	b.n	80003ae <__udivmoddi4+0xee>
 800056a:	1a86      	subs	r6, r0, r2
 800056c:	eb64 0303 	sbc.w	r3, r4, r3
 8000570:	2001      	movs	r0, #1
 8000572:	e70e      	b.n	8000392 <__udivmoddi4+0xd2>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e735      	b.n	80003e6 <__udivmoddi4+0x126>
 800057a:	3902      	subs	r1, #2
 800057c:	4472      	add	r2, lr
 800057e:	e6d0      	b.n	8000322 <__udivmoddi4+0x62>
 8000580:	44f4      	add	ip, lr
 8000582:	3802      	subs	r0, #2
 8000584:	e6e3      	b.n	800034e <__udivmoddi4+0x8e>
 8000586:	44f4      	add	ip, lr
 8000588:	3802      	subs	r0, #2
 800058a:	e742      	b.n	8000412 <__udivmoddi4+0x152>
 800058c:	3c02      	subs	r4, #2
 800058e:	4472      	add	r2, lr
 8000590:	e7e7      	b.n	8000562 <__udivmoddi4+0x2a2>
 8000592:	3802      	subs	r0, #2
 8000594:	4471      	add	r1, lr
 8000596:	e7d0      	b.n	800053a <__udivmoddi4+0x27a>
 8000598:	3b02      	subs	r3, #2
 800059a:	443c      	add	r4, r7
 800059c:	e782      	b.n	80004a4 <__udivmoddi4+0x1e4>
 800059e:	3802      	subs	r0, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	e76a      	b.n	800047a <__udivmoddi4+0x1ba>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ac:	4a04      	ldr	r2, [pc, #16]	@ (80005c0 <MX_FREERTOS_Init+0x18>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <MX_FREERTOS_Init+0x1c>)
 80005b2:	f00a ff6f 	bl	800b494 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <MX_FREERTOS_Init+0x20>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	0801cb50 	.word	0x0801cb50
 80005c4:	080005cd 	.word	0x080005cd
 80005c8:	200500ac 	.word	0x200500ac

080005cc <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */

	MX_LWIP_Init();
 80005d4:	f00a f864 	bl	800a6a0 <MX_LWIP_Init>

  /* Infinite loop */
  for(;;)
  {
  	HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 80005d8:	2101      	movs	r1, #1
 80005da:	4804      	ldr	r0, [pc, #16]	@ (80005ec <StartDefaultTask+0x20>)
 80005dc:	f002 fef2 	bl	80033c4 <HAL_GPIO_TogglePin>

    osDelay(1000);
 80005e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005e4:	f00a ffe8 	bl	800b5b8 <osDelay>
  	HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 80005e8:	bf00      	nop
 80005ea:	e7f5      	b.n	80005d8 <StartDefaultTask+0xc>
 80005ec:	42020400 	.word	0x42020400

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fece 	bl	8001394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f812 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f926 	bl	800084c <MX_GPIO_Init>
//  MX_ETH_Init();
  MX_ICACHE_Init();
 8000600:	f000 f874 	bl	80006ec <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 8000604:	f000 f87e 	bl	8000704 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000608:	f000 f8c6 	bl	8000798 <MX_USART3_UART_Init>
  MX_MEMORYMAP_Init();
 800060c:	f000 f916 	bl	800083c <MX_MEMORYMAP_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000610:	f00a fedc 	bl	800b3cc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000614:	f7ff ffc8 	bl	80005a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000618:	f00a fefe 	bl	800b418 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <main+0x2c>

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b09c      	sub	sp, #112	@ 0x70
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2250      	movs	r2, #80	@ 0x50
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f018 fe47 	bl	80192c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
 8000644:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000646:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <SystemClock_Config+0xc8>)
 8000648:	691b      	ldr	r3, [r3, #16]
 800064a:	4a27      	ldr	r2, [pc, #156]	@ (80006e8 <SystemClock_Config+0xc8>)
 800064c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000650:	6113      	str	r3, [r2, #16]
 8000652:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <SystemClock_Config+0xc8>)
 8000654:	691b      	ldr	r3, [r3, #16]
 8000656:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800065e:	bf00      	nop
 8000660:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <SystemClock_Config+0xc8>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	f003 0308 	and.w	r3, r3, #8
 8000668:	2b08      	cmp	r3, #8
 800066a:	d1f9      	bne.n	8000660 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000670:	f44f 13a8 	mov.w	r3, #1376256	@ 0x150000
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800067a:	2303      	movs	r3, #3
 800067c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800067e:	2304      	movs	r3, #4
 8000680:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000682:	23fa      	movs	r3, #250	@ 0xfa
 8000684:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000686:	2302      	movs	r3, #2
 8000688:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000692:	2304      	movs	r3, #4
 8000694:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000696:	2300      	movs	r3, #0
 8000698:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 feb8 	bl	8003418 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006ae:	f000 f9f1 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	231f      	movs	r3, #31
 80006b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2303      	movs	r3, #3
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	2105      	movs	r1, #5
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 fad9 	bl	8003c88 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006dc:	f000 f9da 	bl	8000a94 <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3770      	adds	r7, #112	@ 0x70
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	44020800 	.word	0x44020800

080006ec <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80006f0:	f002 fe82 	bl	80033f8 <HAL_ICACHE_Enable>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80006fa:	f000 f9cb 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000708:	4b20      	ldr	r3, [pc, #128]	@ (800078c <MX_LPUART1_UART_Init+0x88>)
 800070a:	4a21      	ldr	r2, [pc, #132]	@ (8000790 <MX_LPUART1_UART_Init+0x8c>)
 800070c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800070e:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <MX_LPUART1_UART_Init+0x88>)
 8000710:	4a20      	ldr	r2, [pc, #128]	@ (8000794 <MX_LPUART1_UART_Init+0x90>)
 8000712:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000714:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <MX_LPUART1_UART_Init+0x88>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <MX_LPUART1_UART_Init+0x88>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000720:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_LPUART1_UART_Init+0x88>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000726:	4b19      	ldr	r3, [pc, #100]	@ (800078c <MX_LPUART1_UART_Init+0x88>)
 8000728:	220c      	movs	r2, #12
 800072a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_LPUART1_UART_Init+0x88>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_LPUART1_UART_Init+0x88>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_LPUART1_UART_Init+0x88>)
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_LPUART1_UART_Init+0x88>)
 8000740:	2200      	movs	r2, #0
 8000742:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000744:	4811      	ldr	r0, [pc, #68]	@ (800078c <MX_LPUART1_UART_Init+0x88>)
 8000746:	f009 fa51 	bl	8009bec <HAL_UART_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000750:	f000 f9a0 	bl	8000a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000754:	2100      	movs	r1, #0
 8000756:	480d      	ldr	r0, [pc, #52]	@ (800078c <MX_LPUART1_UART_Init+0x88>)
 8000758:	f009 fed8 	bl	800a50c <HAL_UARTEx_SetTxFifoThreshold>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000762:	f000 f997 	bl	8000a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000766:	2100      	movs	r1, #0
 8000768:	4808      	ldr	r0, [pc, #32]	@ (800078c <MX_LPUART1_UART_Init+0x88>)
 800076a:	f009 ff0d 	bl	800a588 <HAL_UARTEx_SetRxFifoThreshold>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000774:	f000 f98e 	bl	8000a94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <MX_LPUART1_UART_Init+0x88>)
 800077a:	f009 fe8e 	bl	800a49a <HAL_UARTEx_DisableFifoMode>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000784:	f000 f986 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200500b0 	.word	0x200500b0
 8000790:	44002400 	.word	0x44002400
 8000794:	00033324 	.word	0x00033324

08000798 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800079c:	4b25      	ldr	r3, [pc, #148]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 800079e:	4a26      	ldr	r2, [pc, #152]	@ (8000838 <MX_USART3_UART_Init+0xa0>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007a2:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 80007ca:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007ce:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d0:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 80007dc:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 80007de:	2202      	movs	r2, #2
 80007e0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart3.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 80007e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007e8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ea:	4812      	ldr	r0, [pc, #72]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 80007ec:	f009 f9fe 	bl	8009bec <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 80007f6:	f000 f94d 	bl	8000a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fa:	2100      	movs	r1, #0
 80007fc:	480d      	ldr	r0, [pc, #52]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 80007fe:	f009 fe85 	bl	800a50c <HAL_UARTEx_SetTxFifoThreshold>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_USART3_UART_Init+0x74>
  {
    Error_Handler();
 8000808:	f000 f944 	bl	8000a94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080c:	2100      	movs	r1, #0
 800080e:	4809      	ldr	r0, [pc, #36]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 8000810:	f009 feba 	bl	800a588 <HAL_UARTEx_SetRxFifoThreshold>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART3_UART_Init+0x86>
  {
    Error_Handler();
 800081a:	f000 f93b 	bl	8000a94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_USART3_UART_Init+0x9c>)
 8000820:	f009 fe3b 	bl	800a49a <HAL_UARTEx_DisableFifoMode>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART3_UART_Init+0x96>
  {
    Error_Handler();
 800082a:	f000 f933 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20050144 	.word	0x20050144
 8000838:	40004800 	.word	0x40004800

0800083c <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
	...

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	@ 0x38
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000862:	4b7c      	ldr	r3, [pc, #496]	@ (8000a54 <MX_GPIO_Init+0x208>)
 8000864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000868:	4a7a      	ldr	r2, [pc, #488]	@ (8000a54 <MX_GPIO_Init+0x208>)
 800086a:	f043 0310 	orr.w	r3, r3, #16
 800086e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000872:	4b78      	ldr	r3, [pc, #480]	@ (8000a54 <MX_GPIO_Init+0x208>)
 8000874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000878:	f003 0310 	and.w	r3, r3, #16
 800087c:	623b      	str	r3, [r7, #32]
 800087e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000880:	4b74      	ldr	r3, [pc, #464]	@ (8000a54 <MX_GPIO_Init+0x208>)
 8000882:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000886:	4a73      	ldr	r2, [pc, #460]	@ (8000a54 <MX_GPIO_Init+0x208>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000890:	4b70      	ldr	r3, [pc, #448]	@ (8000a54 <MX_GPIO_Init+0x208>)
 8000892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	61fb      	str	r3, [r7, #28]
 800089c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089e:	4b6d      	ldr	r3, [pc, #436]	@ (8000a54 <MX_GPIO_Init+0x208>)
 80008a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008a4:	4a6b      	ldr	r2, [pc, #428]	@ (8000a54 <MX_GPIO_Init+0x208>)
 80008a6:	f043 0320 	orr.w	r3, r3, #32
 80008aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008ae:	4b69      	ldr	r3, [pc, #420]	@ (8000a54 <MX_GPIO_Init+0x208>)
 80008b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008b4:	f003 0320 	and.w	r3, r3, #32
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008bc:	4b65      	ldr	r3, [pc, #404]	@ (8000a54 <MX_GPIO_Init+0x208>)
 80008be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008c2:	4a64      	ldr	r2, [pc, #400]	@ (8000a54 <MX_GPIO_Init+0x208>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008cc:	4b61      	ldr	r3, [pc, #388]	@ (8000a54 <MX_GPIO_Init+0x208>)
 80008ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b5e      	ldr	r3, [pc, #376]	@ (8000a54 <MX_GPIO_Init+0x208>)
 80008dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008e0:	4a5c      	ldr	r2, [pc, #368]	@ (8000a54 <MX_GPIO_Init+0x208>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008ea:	4b5a      	ldr	r3, [pc, #360]	@ (8000a54 <MX_GPIO_Init+0x208>)
 80008ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b56      	ldr	r3, [pc, #344]	@ (8000a54 <MX_GPIO_Init+0x208>)
 80008fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008fe:	4a55      	ldr	r2, [pc, #340]	@ (8000a54 <MX_GPIO_Init+0x208>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000908:	4b52      	ldr	r3, [pc, #328]	@ (8000a54 <MX_GPIO_Init+0x208>)
 800090a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	4b4f      	ldr	r3, [pc, #316]	@ (8000a54 <MX_GPIO_Init+0x208>)
 8000918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800091c:	4a4d      	ldr	r2, [pc, #308]	@ (8000a54 <MX_GPIO_Init+0x208>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000926:	4b4b      	ldr	r3, [pc, #300]	@ (8000a54 <MX_GPIO_Init+0x208>)
 8000928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000934:	4b47      	ldr	r3, [pc, #284]	@ (8000a54 <MX_GPIO_Init+0x208>)
 8000936:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800093a:	4a46      	ldr	r2, [pc, #280]	@ (8000a54 <MX_GPIO_Init+0x208>)
 800093c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000940:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000944:	4b43      	ldr	r3, [pc, #268]	@ (8000a54 <MX_GPIO_Init+0x208>)
 8000946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800094a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2110      	movs	r1, #16
 8000956:	4840      	ldr	r0, [pc, #256]	@ (8000a58 <MX_GPIO_Init+0x20c>)
 8000958:	f002 fd1c 	bl	8003394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2101      	movs	r1, #1
 8000960:	483e      	ldr	r0, [pc, #248]	@ (8000a5c <MX_GPIO_Init+0x210>)
 8000962:	f002 fd17 	bl	8003394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2110      	movs	r1, #16
 800096a:	483d      	ldr	r0, [pc, #244]	@ (8000a60 <MX_GPIO_Init+0x214>)
 800096c:	f002 fd12 	bl	8003394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000976:	4b3b      	ldr	r3, [pc, #236]	@ (8000a64 <MX_GPIO_Init+0x218>)
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	4838      	ldr	r0, [pc, #224]	@ (8000a68 <MX_GPIO_Init+0x21c>)
 8000986:	f002 fbb3 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_YELLOW_Pin;
 800098a:	2310      	movs	r3, #16
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED2_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099e:	4619      	mov	r1, r3
 80009a0:	482d      	ldr	r0, [pc, #180]	@ (8000a58 <MX_GPIO_Init+0x20c>)
 80009a2:	f002 fba5 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80009a6:	2310      	movs	r3, #16
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009aa:	2303      	movs	r3, #3
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	482c      	ldr	r0, [pc, #176]	@ (8000a6c <MX_GPIO_Init+0x220>)
 80009ba:	f002 fb99 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 80009be:	2301      	movs	r3, #1
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4821      	ldr	r0, [pc, #132]	@ (8000a5c <MX_GPIO_Init+0x210>)
 80009d6:	f002 fb8b 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 80009da:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e0:	2303      	movs	r3, #3
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	481b      	ldr	r0, [pc, #108]	@ (8000a5c <MX_GPIO_Init+0x210>)
 80009f0:	f002 fb7e 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 80009f4:	2310      	movs	r3, #16
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4815      	ldr	r0, [pc, #84]	@ (8000a60 <MX_GPIO_Init+0x214>)
 8000a0c:	f002 fb70 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000a10:	2380      	movs	r3, #128	@ 0x80
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <MX_GPIO_Init+0x218>)
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	480f      	ldr	r0, [pc, #60]	@ (8000a60 <MX_GPIO_Init+0x214>)
 8000a24:	f002 fb64 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000a28:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	4809      	ldr	r0, [pc, #36]	@ (8000a6c <MX_GPIO_Init+0x220>)
 8000a46:	f002 fb53 	bl	80030f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3738      	adds	r7, #56	@ 0x38
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	44020c00 	.word	0x44020c00
 8000a58:	42021400 	.word	0x42021400
 8000a5c:	42020400 	.word	0x42020400
 8000a60:	42021800 	.word	0x42021800
 8000a64:	10110000 	.word	0x10110000
 8000a68:	42020800 	.word	0x42020800
 8000a6c:	42020000 	.word	0x42020000

08000a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d101      	bne.n	8000a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a82:	f000 fcad 	bl	80013e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40013400 	.word	0x40013400

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <Error_Handler+0x8>

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	f06f 0001 	mvn.w	r0, #1
 8000aac:	f000 fd86 	bl	80015bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0ce      	sub	sp, #312	@ 0x138
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000abe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ac2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ad8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000adc:	4618      	mov	r0, r3
 8000ade:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	f018 fbec 	bl	80192c2 <memset>
  if(huart->Instance==LPUART1)
 8000aea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000aee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a67      	ldr	r2, [pc, #412]	@ (8000c94 <HAL_UART_MspInit+0x1e0>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d15e      	bne.n	8000bba <HAL_UART_MspInit+0x106>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000afc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b00:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000b04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000b10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b14:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1e:	f107 0318 	add.w	r3, r7, #24
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 fc2a 	bl	800437c <HAL_RCCEx_PeriphCLKConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000b2e:	f7ff ffb1 	bl	8000a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b32:	4b59      	ldr	r3, [pc, #356]	@ (8000c98 <HAL_UART_MspInit+0x1e4>)
 8000b34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000b38:	4a57      	ldr	r2, [pc, #348]	@ (8000c98 <HAL_UART_MspInit+0x1e4>)
 8000b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b3e:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000b42:	4b55      	ldr	r3, [pc, #340]	@ (8000c98 <HAL_UART_MspInit+0x1e4>)
 8000b44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000b48:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8000b4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b50:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b5a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000b5e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b60:	4b4d      	ldr	r3, [pc, #308]	@ (8000c98 <HAL_UART_MspInit+0x1e4>)
 8000b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b66:	4a4c      	ldr	r2, [pc, #304]	@ (8000c98 <HAL_UART_MspInit+0x1e4>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b70:	4b49      	ldr	r3, [pc, #292]	@ (8000c98 <HAL_UART_MspInit+0x1e4>)
 8000b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b76:	f003 0202 	and.w	r2, r3, #2
 8000b7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b7e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b88:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000b8c:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000b8e:	23c0      	movs	r3, #192	@ 0xc0
 8000b90:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ba6:	2308      	movs	r3, #8
 8000ba8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	483a      	ldr	r0, [pc, #232]	@ (8000c9c <HAL_UART_MspInit+0x1e8>)
 8000bb4:	f002 fa9c 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bb8:	e066      	b.n	8000c88 <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART3)
 8000bba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bbe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a36      	ldr	r2, [pc, #216]	@ (8000ca0 <HAL_UART_MspInit+0x1ec>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d15d      	bne.n	8000c88 <HAL_UART_MspInit+0x1d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bcc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bd0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000bd4:	f04f 0204 	mov.w	r2, #4
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000be0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000be4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000be8:	2200      	movs	r2, #0
 8000bea:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bec:	f107 0318 	add.w	r3, r7, #24
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 fbc3 	bl	800437c <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8000bfc:	f7ff ff4a 	bl	8000a94 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c00:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <HAL_UART_MspInit+0x1e4>)
 8000c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c06:	4a24      	ldr	r2, [pc, #144]	@ (8000c98 <HAL_UART_MspInit+0x1e4>)
 8000c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c0c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000c10:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <HAL_UART_MspInit+0x1e4>)
 8000c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c16:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8000c1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c2c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <HAL_UART_MspInit+0x1e4>)
 8000c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c34:	4a18      	ldr	r2, [pc, #96]	@ (8000c98 <HAL_UART_MspInit+0x1e4>)
 8000c36:	f043 0308 	orr.w	r3, r3, #8
 8000c3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c3e:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <HAL_UART_MspInit+0x1e4>)
 8000c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c44:	f003 0208 	and.w	r2, r3, #8
 8000c48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c4c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c56:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000c5a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000c5c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c60:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c76:	2307      	movs	r3, #7
 8000c78:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7c:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000c80:	4619      	mov	r1, r3
 8000c82:	4808      	ldr	r0, [pc, #32]	@ (8000ca4 <HAL_UART_MspInit+0x1f0>)
 8000c84:	f002 fa34 	bl	80030f0 <HAL_GPIO_Init>
}
 8000c88:	bf00      	nop
 8000c8a:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	44002400 	.word	0x44002400
 8000c98:	44020c00 	.word	0x44020c00
 8000c9c:	42020400 	.word	0x42020400
 8000ca0:	40004800 	.word	0x40004800
 8000ca4:	42020c00 	.word	0x42020c00

08000ca8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	@ 0x38
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8000cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8000d6c <HAL_InitTick+0xc4>)
 8000cb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000cb6:	4a2d      	ldr	r2, [pc, #180]	@ (8000d6c <HAL_InitTick+0xc4>)
 8000cb8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cbc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d6c <HAL_InitTick+0xc4>)
 8000cc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cce:	f107 0210 	add.w	r2, r7, #16
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fb17 	bl	800430c <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cde:	f003 fae9 	bl	80042b4 <HAL_RCC_GetPCLK2Freq>
 8000ce2:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM8 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	4a21      	ldr	r2, [pc, #132]	@ (8000d70 <HAL_InitTick+0xc8>)
 8000cea:	fba2 2303 	umull	r2, r3, r2, r3
 8000cee:	09db      	lsrs	r3, r3, #7
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <HAL_InitTick+0xcc>)
 8000cf6:	4a20      	ldr	r2, [pc, #128]	@ (8000d78 <HAL_InitTick+0xd0>)
 8000cf8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (100000U / 1000U) - 1U;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d74 <HAL_InitTick+0xcc>)
 8000cfc:	2263      	movs	r2, #99	@ 0x63
 8000cfe:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8000d00:	4a1c      	ldr	r2, [pc, #112]	@ (8000d74 <HAL_InitTick+0xcc>)
 8000d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d04:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8000d06:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <HAL_InitTick+0xcc>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_InitTick+0xcc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim8);
 8000d12:	4818      	ldr	r0, [pc, #96]	@ (8000d74 <HAL_InitTick+0xcc>)
 8000d14:	f008 fb84 	bl	8009420 <HAL_TIM_Base_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8000d1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d118      	bne.n	8000d58 <HAL_InitTick+0xb0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 8000d26:	4813      	ldr	r0, [pc, #76]	@ (8000d74 <HAL_InitTick+0xcc>)
 8000d28:	f008 fbdc 	bl	80094e4 <HAL_TIM_Base_Start_IT>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8000d32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10e      	bne.n	8000d58 <HAL_InitTick+0xb0>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d808      	bhi.n	8000d52 <HAL_InitTick+0xaa>
      {
        /* Enable the TIM8 global Interrupt */
        HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	2042      	movs	r0, #66	@ 0x42
 8000d46:	f000 fc39 	bl	80015bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d7c <HAL_InitTick+0xd4>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	e002      	b.n	8000d58 <HAL_InitTick+0xb0>
      }
      else
      {
        status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
}

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8000d58:	2042      	movs	r0, #66	@ 0x42
 8000d5a:	f000 fc49 	bl	80015f0 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000d5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3738      	adds	r7, #56	@ 0x38
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	44020c00 	.word	0x44020c00
 8000d70:	0a7c5ac5 	.word	0x0a7c5ac5
 8000d74:	200501d8 	.word	0x200501d8
 8000d78:	40013400 	.word	0x40013400
 8000d7c:	20050004 	.word	0x20050004

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <NMI_Handler+0x4>

08000d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <MemManage_Handler+0x4>

08000d98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 Update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <TIM8_UP_IRQHandler+0x10>)
 8000dbe:	f008 fc3f 	bl	8009640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200501d8 	.word	0x200501d8

08000dcc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <ETH_IRQHandler+0x10>)
 8000dd2:	f000 ffe1 	bl	8001d98 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20054c30 	.word	0x20054c30

08000de0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet Wakeup global interrupt.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000de4:	4802      	ldr	r0, [pc, #8]	@ (8000df0 <ETH_WKUP_IRQHandler+0x10>)
 8000de6:	f000 ffd7 	bl	8001d98 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20054c30 	.word	0x20054c30

08000df4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return 1;
 8000df8:	2301      	movs	r3, #1
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_kill>:

int _kill(int pid, int sig)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e0e:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <_kill+0x20>)
 8000e10:	2216      	movs	r2, #22
 8000e12:	601a      	str	r2, [r3, #0]
  return -1;
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	20060e28 	.word	0x20060e28

08000e28 <_exit>:

void _exit (int status)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e30:	f04f 31ff 	mov.w	r1, #4294967295
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ffe5 	bl	8000e04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e3a:	bf00      	nop
 8000e3c:	e7fd      	b.n	8000e3a <_exit+0x12>

08000e3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	60f8      	str	r0, [r7, #12]
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e00a      	b.n	8000e66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e50:	f3af 8000 	nop.w
 8000e54:	4601      	mov	r1, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	60ba      	str	r2, [r7, #8]
 8000e5c:	b2ca      	uxtb	r2, r1
 8000e5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dbf0      	blt.n	8000e50 <_read+0x12>
  }

  return len;
 8000e6e:	687b      	ldr	r3, [r7, #4]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	e009      	b.n	8000e9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1c5a      	adds	r2, r3, #1
 8000e8e:	60ba      	str	r2, [r7, #8]
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	dbf1      	blt.n	8000e8a <_write+0x12>
  }
  return len;
 8000ea6:	687b      	ldr	r3, [r7, #4]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <_close>:

int _close(int file)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ed8:	605a      	str	r2, [r3, #4]
  return 0;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_isatty>:

int _isatty(int file)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ef0:	2301      	movs	r3, #1
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b085      	sub	sp, #20
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d205      	bcs.n	8000f54 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <_sbrk+0x6c>)
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	e009      	b.n	8000f68 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f54:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a06      	ldr	r2, [pc, #24]	@ (8000f7c <_sbrk+0x64>)
 8000f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	371c      	adds	r7, #28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	200a0000 	.word	0x200a0000
 8000f78:	00000800 	.word	0x00000800
 8000f7c:	20050224 	.word	0x20050224
 8000f80:	20060e38 	.word	0x20060e38
 8000f84:	20060e28 	.word	0x20060e28

08000f88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f8e:	4b35      	ldr	r3, [pc, #212]	@ (8001064 <SystemInit+0xdc>)
 8000f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f94:	4a33      	ldr	r2, [pc, #204]	@ (8001064 <SystemInit+0xdc>)
 8000f96:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f9a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000f9e:	4b32      	ldr	r3, [pc, #200]	@ (8001068 <SystemInit+0xe0>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000fa4:	4b30      	ldr	r3, [pc, #192]	@ (8001068 <SystemInit+0xe0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000faa:	4b2f      	ldr	r3, [pc, #188]	@ (8001068 <SystemInit+0xe0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001068 <SystemInit+0xe0>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	492c      	ldr	r1, [pc, #176]	@ (8001068 <SystemInit+0xe0>)
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800106c <SystemInit+0xe4>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001068 <SystemInit+0xe0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000fc2:	4b29      	ldr	r3, [pc, #164]	@ (8001068 <SystemInit+0xe0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000fc8:	4b27      	ldr	r3, [pc, #156]	@ (8001068 <SystemInit+0xe0>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000fce:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <SystemInit+0xe0>)
 8000fd0:	4a27      	ldr	r2, [pc, #156]	@ (8001070 <SystemInit+0xe8>)
 8000fd2:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000fd4:	4b24      	ldr	r3, [pc, #144]	@ (8001068 <SystemInit+0xe0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000fda:	4b23      	ldr	r3, [pc, #140]	@ (8001068 <SystemInit+0xe0>)
 8000fdc:	4a24      	ldr	r2, [pc, #144]	@ (8001070 <SystemInit+0xe8>)
 8000fde:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000fe0:	4b21      	ldr	r3, [pc, #132]	@ (8001068 <SystemInit+0xe0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000fe6:	4b20      	ldr	r3, [pc, #128]	@ (8001068 <SystemInit+0xe0>)
 8000fe8:	4a21      	ldr	r2, [pc, #132]	@ (8001070 <SystemInit+0xe8>)
 8000fea:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000fec:	4b1e      	ldr	r3, [pc, #120]	@ (8001068 <SystemInit+0xe0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8001068 <SystemInit+0xe0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8001068 <SystemInit+0xe0>)
 8000ff8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ffc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <SystemInit+0xe0>)
 8001000:	2200      	movs	r2, #0
 8001002:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001004:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <SystemInit+0xdc>)
 8001006:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800100a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800100c:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <SystemInit+0xec>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001014:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800101c:	d003      	beq.n	8001026 <SystemInit+0x9e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001024:	d117      	bne.n	8001056 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001026:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <SystemInit+0xec>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <SystemInit+0xec>)
 8001034:	4a10      	ldr	r2, [pc, #64]	@ (8001078 <SystemInit+0xf0>)
 8001036:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <SystemInit+0xec>)
 800103a:	4a10      	ldr	r2, [pc, #64]	@ (800107c <SystemInit+0xf4>)
 800103c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <SystemInit+0xec>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a0c      	ldr	r2, [pc, #48]	@ (8001074 <SystemInit+0xec>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <SystemInit+0xec>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a09      	ldr	r2, [pc, #36]	@ (8001074 <SystemInit+0xec>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	61d3      	str	r3, [r2, #28]
  }
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00
 8001068:	44020c00 	.word	0x44020c00
 800106c:	eae2eae3 	.word	0xeae2eae3
 8001070:	01010280 	.word	0x01010280
 8001074:	40022000 	.word	0x40022000
 8001078:	08192a3b 	.word	0x08192a3b
 800107c:	4c5d6e7f 	.word	0x4c5d6e7f

08001080 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001080:	480d      	ldr	r0, [pc, #52]	@ (80010b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001082:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001084:	f7ff ff80 	bl	8000f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480c      	ldr	r0, [pc, #48]	@ (80010bc <LoopForever+0x6>)
  ldr r1, =_edata
 800108a:	490d      	ldr	r1, [pc, #52]	@ (80010c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800108c:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <LoopForever+0xe>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a0:	4c0a      	ldr	r4, [pc, #40]	@ (80010cc <LoopForever+0x16>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ae:	f018 f957 	bl	8019360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b2:	f7ff fa9d 	bl	80005f0 <main>

080010b6 <LoopForever>:

LoopForever:
    b LoopForever
 80010b6:	e7fe      	b.n	80010b6 <LoopForever>
  ldr   r0, =_estack
 80010b8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80010bc:	20050000 	.word	0x20050000
  ldr r1, =_edata
 80010c0:	20050090 	.word	0x20050090
  ldr r2, =_sidata
 80010c4:	0801cdd0 	.word	0x0801cdd0
  ldr r2, =_sbss
 80010c8:	20050090 	.word	0x20050090
  ldr r4, =_ebss
 80010cc:	20060e38 	.word	0x20060e38

080010d0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC1_IRQHandler>

080010d2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00b      	beq.n	80010fa <LAN8742_RegisterBusIO+0x28>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <LAN8742_RegisterBusIO+0x28>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <LAN8742_RegisterBusIO+0x28>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	e014      	b.n	800112a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	691a      	ldr	r2, [r3, #16]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d17c      	bne.n	8001250 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2220      	movs	r2, #32
 8001168:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	e01c      	b.n	80011aa <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	f107 0208 	add.w	r2, r7, #8
 8001178:	2112      	movs	r1, #18
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	4798      	blx	r3
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	da03      	bge.n	800118c <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001184:	f06f 0304 	mvn.w	r3, #4
 8001188:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800118a:	e00b      	b.n	80011a4 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	429a      	cmp	r2, r3
 8001196:	d105      	bne.n	80011a4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
         break;
 80011a2:	e005      	b.n	80011b0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3301      	adds	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	2b1f      	cmp	r3, #31
 80011ae:	d9df      	bls.n	8001170 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b1f      	cmp	r3, #31
 80011b6:	d902      	bls.n	80011be <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011b8:	f06f 0302 	mvn.w	r3, #2
 80011bc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d145      	bne.n	8001250 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6810      	ldr	r0, [r2, #0]
 80011cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011d0:	2100      	movs	r1, #0
 80011d2:	4798      	blx	r3
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db37      	blt.n	800124a <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	6810      	ldr	r0, [r2, #0]
 80011e2:	f107 0208 	add.w	r2, r7, #8
 80011e6:	2100      	movs	r1, #0
 80011e8:	4798      	blx	r3
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db28      	blt.n	8001242 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4798      	blx	r3
 80011f6:	4603      	mov	r3, r0
 80011f8:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80011fa:	e01c      	b.n	8001236 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4798      	blx	r3
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800120e:	d80e      	bhi.n	800122e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6810      	ldr	r0, [r2, #0]
 8001218:	f107 0208 	add.w	r2, r7, #8
 800121c:	2100      	movs	r1, #0
 800121e:	4798      	blx	r3
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	da07      	bge.n	8001236 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8001226:	f06f 0304 	mvn.w	r3, #4
 800122a:	613b      	str	r3, [r7, #16]
                 break;
 800122c:	e010      	b.n	8001250 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800122e:	f06f 0301 	mvn.w	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
               break;
 8001234:	e00c      	b.n	8001250 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1dd      	bne.n	80011fc <LAN8742_Init+0xc6>
 8001240:	e006      	b.n	8001250 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001242:	f06f 0304 	mvn.w	r3, #4
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	e002      	b.n	8001250 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800124a:	f06f 0303 	mvn.w	r3, #3
 800124e:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d112      	bne.n	800127c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4798      	blx	r3
 800125c:	4603      	mov	r3, r0
 800125e:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001260:	bf00      	nop
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4798      	blx	r3
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001274:	d9f5      	bls.n	8001262 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	605a      	str	r2, [r3, #4]
   }

   return status;
 800127c:	693b      	ldr	r3, [r7, #16]
 }
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6810      	ldr	r0, [r2, #0]
 800129a:	f107 020c 	add.w	r2, r7, #12
 800129e:	2101      	movs	r1, #1
 80012a0:	4798      	blx	r3
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	da02      	bge.n	80012ae <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012a8:	f06f 0304 	mvn.w	r3, #4
 80012ac:	e06e      	b.n	800138c <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6810      	ldr	r0, [r2, #0]
 80012b6:	f107 020c 	add.w	r2, r7, #12
 80012ba:	2101      	movs	r1, #1
 80012bc:	4798      	blx	r3
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	da02      	bge.n	80012ca <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012c4:	f06f 0304 	mvn.w	r3, #4
 80012c8:	e060      	b.n	800138c <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e059      	b.n	800138c <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6810      	ldr	r0, [r2, #0]
 80012e0:	f107 020c 	add.w	r2, r7, #12
 80012e4:	2100      	movs	r1, #0
 80012e6:	4798      	blx	r3
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	da02      	bge.n	80012f4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012ee:	f06f 0304 	mvn.w	r3, #4
 80012f2:	e04b      	b.n	800138c <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d11b      	bne.n	8001336 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <LAN8742_GetLinkState+0x90>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001312:	2302      	movs	r3, #2
 8001314:	e03a      	b.n	800138c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001320:	2303      	movs	r3, #3
 8001322:	e033      	b.n	800138c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800132e:	2304      	movs	r3, #4
 8001330:	e02c      	b.n	800138c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001332:	2305      	movs	r3, #5
 8001334:	e02a      	b.n	800138c <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6810      	ldr	r0, [r2, #0]
 800133e:	f107 020c 	add.w	r2, r7, #12
 8001342:	211f      	movs	r1, #31
 8001344:	4798      	blx	r3
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	da02      	bge.n	8001352 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800134c:	f06f 0304 	mvn.w	r3, #4
 8001350:	e01c      	b.n	800138c <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800135c:	2306      	movs	r3, #6
 800135e:	e015      	b.n	800138c <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 031c 	and.w	r3, r3, #28
 8001366:	2b18      	cmp	r3, #24
 8001368:	d101      	bne.n	800136e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800136a:	2302      	movs	r3, #2
 800136c:	e00e      	b.n	800138c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f003 031c 	and.w	r3, r3, #28
 8001374:	2b08      	cmp	r3, #8
 8001376:	d101      	bne.n	800137c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001378:	2303      	movs	r3, #3
 800137a:	e007      	b.n	800138c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 031c 	and.w	r3, r3, #28
 8001382:	2b14      	cmp	r3, #20
 8001384:	d101      	bne.n	800138a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001386:	2304      	movs	r3, #4
 8001388:	e000      	b.n	800138c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800138a:	2305      	movs	r3, #5
    }
  }
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001398:	2003      	movs	r0, #3
 800139a:	f000 f904 	bl	80015a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800139e:	f002 fe2b 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 80013a2:	4602      	mov	r2, r0
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <HAL_Init+0x40>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	f003 030f 	and.w	r3, r3, #15
 80013ac:	490a      	ldr	r1, [pc, #40]	@ (80013d8 <HAL_Init+0x44>)
 80013ae:	5ccb      	ldrb	r3, [r1, r3]
 80013b0:	fa22 f303 	lsr.w	r3, r2, r3
 80013b4:	4a09      	ldr	r2, [pc, #36]	@ (80013dc <HAL_Init+0x48>)
 80013b6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013b8:	200f      	movs	r0, #15
 80013ba:	f7ff fc75 	bl	8000ca8 <HAL_InitTick>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e002      	b.n	80013ce <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013c8:	f7ff fb6a 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	44020c00 	.word	0x44020c00
 80013d8:	0801cb74 	.word	0x0801cb74
 80013dc:	20050000 	.word	0x20050000

080013e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_IncTick+0x20>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_IncTick+0x24>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a04      	ldr	r2, [pc, #16]	@ (8001404 <HAL_IncTick+0x24>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20050008 	.word	0x20050008
 8001404:	20050228 	.word	0x20050228

08001408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b03      	ldr	r3, [pc, #12]	@ (800141c <HAL_GetTick+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20050228 	.word	0x20050228

08001420 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8001428:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <HAL_SBS_ETHInterfaceSelect+0x28>)
 800142a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800142e:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001432:	4905      	ldr	r1, [pc, #20]	@ (8001448 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4313      	orrs	r3, r2
 8001438:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	44000400 	.word	0x44000400

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db0b      	blt.n	80014da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	4907      	ldr	r1, [pc, #28]	@ (80014e8 <__NVIC_EnableIRQ+0x38>)
 80014ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	@ (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	@ (800153c <__NVIC_SetPriority+0x50>)
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	@ 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	@ 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff4c 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ca:	f7ff ff63 	bl	8001494 <__NVIC_GetPriorityGrouping>
 80015ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	6978      	ldr	r0, [r7, #20]
 80015d6:	f7ff ffb3 	bl	8001540 <NVIC_EncodePriority>
 80015da:	4602      	mov	r2, r0
 80015dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff82 	bl	80014ec <__NVIC_SetPriority>
}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff56 	bl	80014b0 <__NVIC_EnableIRQ>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0d2      	b.n	80017c4 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001624:	2b00      	cmp	r3, #0
 8001626:	d106      	bne.n	8001636 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2223      	movs	r2, #35	@ 0x23
 800162c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f009 fc2b 	bl	800ae8c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 8001636:	4b65      	ldr	r3, [pc, #404]	@ (80017cc <HAL_ETH_Init+0x1c0>)
 8001638:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800163c:	4a63      	ldr	r2, [pc, #396]	@ (80017cc <HAL_ETH_Init+0x1c0>)
 800163e:	f043 0302 	orr.w	r3, r3, #2
 8001642:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001646:	4b61      	ldr	r3, [pc, #388]	@ (80017cc <HAL_ETH_Init+0x1c0>)
 8001648:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7a1b      	ldrb	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d103      	bne.n	8001664 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fedf 	bl	8001420 <HAL_SBS_ETHInterfaceSelect>
 8001662:	e003      	b.n	800166c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8001664:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001668:	f7ff feda 	bl	8001420 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 800166c:	4b58      	ldr	r3, [pc, #352]	@ (80017d0 <HAL_ETH_Init+0x1c4>)
 800166e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001688:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800168a:	f7ff febd 	bl	8001408 <HAL_GetTick>
 800168e:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001690:	e011      	b.n	80016b6 <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001692:	f7ff feb9 	bl	8001408 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016a0:	d909      	bls.n	80016b6 <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2204      	movs	r2, #4
 80016a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	22e0      	movs	r2, #224	@ 0xe0
 80016ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e086      	b.n	80017c4 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1e4      	bne.n	8001692 <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 ff29 	bl	8002520 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80016ce:	f002 fdbf 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a3f      	ldr	r2, [pc, #252]	@ (80017d4 <HAL_ETH_Init+0x1c8>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0c9a      	lsrs	r2, r3, #18
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	3a01      	subs	r2, #1
 80016e2:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f001 f932 	bl	8002950 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80016f8:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001704:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001708:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d009      	beq.n	800172c <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	22e0      	movs	r2, #224	@ 0xe0
 8001724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e04b      	b.n	80017c4 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001734:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001738:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800173c:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6952      	ldr	r2, [r2, #20]
 8001744:	0051      	lsls	r1, r2, #1
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	430b      	orrs	r3, r1
 800174c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001750:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f001 f998 	bl	8002a8a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f001 f9de 	bl	8002b1c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	3305      	adds	r3, #5
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	021a      	lsls	r2, r3, #8
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	3304      	adds	r3, #4
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	3303      	adds	r3, #3
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	061a      	lsls	r2, r3, #24
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	3302      	adds	r3, #2
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	3301      	adds	r3, #1
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800179e:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017ac:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017ae:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2210      	movs	r2, #16
 80017be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	44020c00 	.word	0x44020c00
 80017d0:	44000400 	.word	0x44000400
 80017d4:	431bde83 	.word	0x431bde83

080017d8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017e6:	2b10      	cmp	r3, #16
 80017e8:	d17c      	bne.n	80018e4 <HAL_ETH_Start_IT+0x10c>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2223      	movs	r2, #35	@ 0x23
 80017ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b3a      	ldr	r3, [pc, #232]	@ (80018f0 <HAL_ETH_Start_IT+0x118>)
 8001806:	430b      	orrs	r3, r1
 8001808:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 800181c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001820:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2204      	movs	r2, #4
 8001828:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f9eb 	bl	8001c06 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0202 	orr.w	r2, r2, #2
 800183e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800186c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800187c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001888:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001898:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018a4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 80018b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018b4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	f443 4350 	orr.w	r3, r3, #53248	@ 0xd000
 80018cc:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80018d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018d4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2223      	movs	r2, #35	@ 0x23
 80018dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e000      	b.n	80018e6 <HAL_ETH_Start_IT+0x10e>
  }
  else
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
  }
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	0c020060 	.word	0x0c020060

080018f4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001902:	2b23      	cmp	r3, #35	@ 0x23
 8001904:	d167      	bne.n	80019d6 <HAL_ETH_Stop_IT+0xe2>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2223      	movs	r2, #35	@ 0x23
 800190a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001916:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8001922:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001926:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800192a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001936:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001946:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001952:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	f023 0301 	bic.w	r3, r3, #1
 800195e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001962:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0201 	bic.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0201 	orr.w	r2, r2, #1
 8001986:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0202 	bic.w	r2, r2, #2
 8001998:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	e00e      	b.n	80019be <HAL_ETH_Stop_IT+0xca>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	3212      	adds	r2, #18
 80019a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019aa:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3301      	adds	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d9ed      	bls.n	80019a0 <HAL_ETH_Stop_IT+0xac>
    }

    heth->RxDescList.ItMode = 0U;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2210      	movs	r2, #16
 80019ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_ETH_Stop_IT+0xe4>
  }
  else
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
  }
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019fa:	f043 0201 	orr.w	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e03a      	b.n	8001a7e <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a0e:	2b23      	cmp	r3, #35	@ 0x23
 8001a10:	d134      	bne.n	8001a7c <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	6839      	ldr	r1, [r7, #0]
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f001 f8d9 	bl	8002bd6 <ETH_Prepare_Tx_Descriptors>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a30:	f043 0202 	orr.w	r2, r3, #2
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e01f      	b.n	8001a7e <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001a3e:	f3bf 8f4f 	dsb	sy
}
 8001a42:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d904      	bls.n	8001a60 <HAL_ETH_Transmit_IT+0x7c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5a:	1f1a      	subs	r2, r3, #4
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3106      	adds	r1, #6
 8001a6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a74:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e000      	b.n	8001a7e <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
  }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b088      	sub	sp, #32
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aa4:	f043 0201 	orr.w	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0a5      	b.n	8001bfe <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ab8:	2b23      	cmp	r3, #35	@ 0x23
 8001aba:	d001      	beq.n	8001ac0 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e09e      	b.n	8001bfe <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69fa      	ldr	r2, [r7, #28]
 8001aca:	3212      	adds	r2, #18
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ad6:	f1c3 0304 	rsb	r3, r3, #4
 8001ada:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001adc:	e067      	b.n	8001bae <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d103      	bne.n	8001b0e <HAL_ETH_ReadData+0x88>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d03d      	beq.n	8001b8a <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00d      	beq.n	8001b54 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b64:	461a      	mov	r2, r3
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	f009 fb79 	bl	800b260 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	441a      	add	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d902      	bls.n	8001b9c <HAL_ETH_ReadData+0x116>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b04      	subs	r3, #4
 8001b9a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	3212      	adds	r2, #18
 8001ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db06      	blt.n	8001bc4 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d202      	bcs.n	8001bc4 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d08c      	beq.n	8001ade <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	441a      	add	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f814 	bl	8001c06 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d108      	bne.n	8001bfc <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e000      	b.n	8001bfe <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b088      	sub	sp, #32
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001c12:	2301      	movs	r3, #1
 8001c14:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c1a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	3212      	adds	r2, #18
 8001c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c26:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c2c:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001c2e:	e03b      	b.n	8001ca8 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d112      	bne.n	8001c5e <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f009 fadf 	bl	800b200 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	74fb      	strb	r3, [r7, #19]
 8001c4c:	e007      	b.n	8001c5e <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	461a      	mov	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001c5e:	7cfb      	ldrb	r3, [r7, #19]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d021      	beq.n	8001ca8 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001c64:	f3bf 8f5f 	dmb	sy
}
 8001c68:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d004      	beq.n	8001c7c <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	e003      	b.n	8001c84 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8001c82:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	3301      	adds	r3, #1
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d902      	bls.n	8001c96 <ETH_UpdateDescriptor+0x90>
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	3b04      	subs	r3, #4
 8001c94:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	3212      	adds	r2, #18
 8001c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca0:	617b      	str	r3, [r7, #20]
      desccount--;
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <ETH_UpdateDescriptor+0xae>
 8001cae:	7cfb      	ldrb	r3, [r7, #19]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1bd      	bne.n	8001c30 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d00d      	beq.n	8001cda <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0U);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3318      	adds	r3, #24
 8001cee:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf4:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfa:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d00:	e03f      	b.n	8001d82 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	3304      	adds	r3, #4
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d106      	bne.n	8001d2a <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001d2a:	7bbb      	ldrb	r3, [r7, #14]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d028      	beq.n	8001d82 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68d9      	ldr	r1, [r3, #12]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db1b      	blt.n	8001d7e <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f009 fac4 	bl	800b2e0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	2200      	movs	r2, #0
 8001d64:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d7c:	e001      	b.n	8001d82 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <HAL_ETH_ReleaseTxPacket+0xac>
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1b9      	bne.n	8001d02 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;

  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001da8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db0:	2b40      	cmp	r3, #64	@ 0x40
 8001db2:	d115      	bne.n	8001de0 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dbc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc4:	2b40      	cmp	r3, #64	@ 0x40
 8001dc6:	d10b      	bne.n	8001de0 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f248 0340 	movw	r3, #32832	@ 0x8040
 8001dd6:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f008 fdb8 	bl	800a950 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001de8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d115      	bne.n	8001e20 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dfc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d10b      	bne.n	8001e20 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e10:	461a      	mov	r2, r3
 8001e12:	f248 0301 	movw	r3, #32769	@ 0x8001
 8001e16:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f008 fda8 	bl	800a970 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e28:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e34:	d153      	bne.n	8001ede <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e3e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e4a:	d148      	bne.n	8001ede <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e52:	f043 0208 	orr.w	r2, r3, #8
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e64:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001e68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e70:	d11e      	bne.n	8001eb0 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e7a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001e7e:	f241 1302 	movw	r3, #4354	@ 0x1102
 8001e82:	4013      	ands	r3, r2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e92:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ea2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	22e0      	movs	r2, #224	@ 0xe0
 8001eaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001eae:	e013      	b.n	8001ed8 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001ebc:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8001ed4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f008 fd59 	bl	800a990 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001ee6:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d104      	bne.n	8001efc <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d019      	beq.n	8001f30 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f02:	f043 0210 	orr.w	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	22e0      	movs	r2, #224	@ 0xe0
 8001f1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f008 fd34 	bl	800a990 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	2b10      	cmp	r3, #16
 8001f3e:	d10f      	bne.n	8001f60 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f48:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f830 	bl	8001fb8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d10f      	bne.n	8001f90 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f78:	f003 020f 	and.w	r2, r3, #15
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f822 	bl	8001fcc <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001f90:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <HAL_ETH_IRQHandler+0x21c>)
 8001f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001f9c:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_ETH_IRQHandler+0x21c>)
 8001f9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f81b 	bl	8001fe0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	44022000 	.word	0x44022000

08001fb8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e03e      	b.n	8002094 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800201e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	055b      	lsls	r3, r3, #21
 800202a:	4313      	orrs	r3, r2
 800202c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	041b      	lsls	r3, r3, #16
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f043 030c 	orr.w	r3, r3, #12
 8002042:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002056:	f7ff f9d7 	bl	8001408 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800205c:	e009      	b.n	8002072 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800205e:	f7ff f9d3 	bl	8001408 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800206c:	d901      	bls.n	8002072 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e010      	b.n	8002094 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1ed      	bne.n	800205e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800208a:	b29b      	uxth	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e03c      	b.n	8002138 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020c6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	055b      	lsls	r3, r3, #21
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	041b      	lsls	r3, r3, #16
 80020e0:	4313      	orrs	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f023 030c 	bic.w	r3, r3, #12
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <HAL_ETH_WritePHYRegister+0xa4>)
 80020fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002102:	4a0f      	ldr	r2, [pc, #60]	@ (8002140 <HAL_ETH_WritePHYRegister+0xa4>)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800210a:	f7ff f97d 	bl	8001408 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002110:	e009      	b.n	8002126 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002112:	f7ff f979 	bl	8001408 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002120:	d901      	bls.n	8002126 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e008      	b.n	8002138 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1ed      	bne.n	8002112 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40028000 	.word	0x40028000

08002144 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e1c3      	b.n	80024e0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 020c 	and.w	r2, r3, #12
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf14      	ite	ne
 8002174:	2301      	movne	r3, #1
 8002176:	2300      	moveq	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf0c      	ite	eq
 800219e:	2301      	moveq	r3, #1
 80021a0:	2300      	movne	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf14      	ite	ne
 80021ba:	2301      	movne	r3, #1
 80021bc:	2300      	moveq	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80021e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf14      	ite	ne
 80021ee:	2301      	movne	r3, #1
 80021f0:	2300      	moveq	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223a:	2b00      	cmp	r3, #0
 800223c:	bf14      	ite	ne
 800223e:	2301      	movne	r3, #1
 8002240:	2300      	moveq	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800226e:	2b00      	cmp	r3, #0
 8002270:	bf0c      	ite	eq
 8002272:	2301      	moveq	r3, #1
 8002274:	2300      	movne	r3, #0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf14      	ite	ne
 800228c:	2301      	movne	r3, #1
 800228e:	2300      	moveq	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	bf14      	ite	ne
 80022a6:	2301      	movne	r3, #1
 80022a8:	2300      	moveq	r3, #0
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf14      	ite	ne
 80022c0:	2301      	movne	r3, #1
 80022c2:	2300      	moveq	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80022d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	bf14      	ite	ne
 80022da:	2301      	movne	r3, #1
 80022dc:	2300      	moveq	r3, #0
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bf14      	ite	ne
 8002302:	2301      	movne	r3, #1
 8002304:	2300      	moveq	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002368:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf14      	ite	ne
 800238c:	2301      	movne	r3, #1
 800238e:	2300      	moveq	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	0e5b      	lsrs	r3, r3, #25
 80023a2:	f003 021f 	and.w	r2, r3, #31
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf14      	ite	ne
 80023b8:	2301      	movne	r3, #1
 80023ba:	2300      	moveq	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 020f 	and.w	r2, r3, #15
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	bf0c      	ite	eq
 80023fe:	2301      	moveq	r3, #1
 8002400:	2300      	movne	r3, #0
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002412:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	b29a      	uxth	r2, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf14      	ite	ne
 8002438:	2301      	movne	r3, #1
 800243a:	2300      	moveq	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002452:	2b00      	cmp	r3, #0
 8002454:	bf14      	ite	ne
 8002456:	2301      	movne	r3, #1
 8002458:	2300      	moveq	r3, #0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800246c:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800247c:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf14      	ite	ne
 8002494:	2301      	movne	r3, #1
 8002496:	2300      	moveq	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	bf14      	ite	ne
 80024b2:	2301      	movne	r3, #1
 80024b4:	2300      	moveq	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80024c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e00b      	b.n	8002518 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002506:	2b10      	cmp	r3, #16
 8002508:	d105      	bne.n	8002516 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800250a:	6839      	ldr	r1, [r7, #0]
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f87d 	bl	800260c <ETH_SetMACConfig>

    return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
  }
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002530:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002538:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800253a:	f001 fe89 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 800253e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4a25      	ldr	r2, [pc, #148]	@ (80025d8 <HAL_ETH_SetMDIOClockRange+0xb8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d908      	bls.n	800255a <HAL_ETH_SetMDIOClockRange+0x3a>
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4a24      	ldr	r2, [pc, #144]	@ (80025dc <HAL_ETH_SetMDIOClockRange+0xbc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d804      	bhi.n	800255a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	e034      	b.n	80025c4 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	4a1f      	ldr	r2, [pc, #124]	@ (80025dc <HAL_ETH_SetMDIOClockRange+0xbc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d908      	bls.n	8002574 <HAL_ETH_SetMDIOClockRange+0x54>
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	4a1e      	ldr	r2, [pc, #120]	@ (80025e0 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d204      	bcs.n	8002574 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	e027      	b.n	80025c4 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4a1a      	ldr	r2, [pc, #104]	@ (80025e0 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d303      	bcc.n	8002584 <HAL_ETH_SetMDIOClockRange+0x64>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4a19      	ldr	r2, [pc, #100]	@ (80025e4 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d91e      	bls.n	80025c2 <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4a17      	ldr	r2, [pc, #92]	@ (80025e4 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d908      	bls.n	800259e <HAL_ETH_SetMDIOClockRange+0x7e>
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4a16      	ldr	r2, [pc, #88]	@ (80025e8 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d804      	bhi.n	800259e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e012      	b.n	80025c4 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	4a11      	ldr	r2, [pc, #68]	@ (80025e8 <HAL_ETH_SetMDIOClockRange+0xc8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d908      	bls.n	80025b8 <HAL_ETH_SetMDIOClockRange+0x98>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	4a10      	ldr	r2, [pc, #64]	@ (80025ec <HAL_ETH_SetMDIOClockRange+0xcc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d804      	bhi.n	80025b8 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	e005      	b.n	80025c4 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	e000      	b.n	80025c4 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80025c2:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	01312cff 	.word	0x01312cff
 80025dc:	02160ebf 	.word	0x02160ebf
 80025e0:	03938700 	.word	0x03938700
 80025e4:	05f5e0ff 	.word	0x05f5e0ff
 80025e8:	08f0d17f 	.word	0x08f0d17f
 80025ec:	0ee6b280 	.word	0x0ee6b280

080025f0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800261e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	791b      	ldrb	r3, [r3, #4]
 8002624:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002626:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	7b1b      	ldrb	r3, [r3, #12]
 800262c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800262e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	7b5b      	ldrb	r3, [r3, #13]
 8002634:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002636:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	7b9b      	ldrb	r3, [r3, #14]
 800263c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800263e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	7bdb      	ldrb	r3, [r3, #15]
 8002644:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002646:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	7c12      	ldrb	r2, [r2, #16]
 800264c:	2a00      	cmp	r2, #0
 800264e:	d102      	bne.n	8002656 <ETH_SetMACConfig+0x4a>
 8002650:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002654:	e000      	b.n	8002658 <ETH_SetMACConfig+0x4c>
 8002656:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002658:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	7c52      	ldrb	r2, [r2, #17]
 800265e:	2a00      	cmp	r2, #0
 8002660:	d102      	bne.n	8002668 <ETH_SetMACConfig+0x5c>
 8002662:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002666:	e000      	b.n	800266a <ETH_SetMACConfig+0x5e>
 8002668:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800266a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	7c9b      	ldrb	r3, [r3, #18]
 8002670:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002672:	431a      	orrs	r2, r3
               macconf->Speed |
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002678:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800267e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	7f1b      	ldrb	r3, [r3, #28]
 8002684:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002686:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	7f5b      	ldrb	r3, [r3, #29]
 800268c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800268e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	7f92      	ldrb	r2, [r2, #30]
 8002694:	2a00      	cmp	r2, #0
 8002696:	d102      	bne.n	800269e <ETH_SetMACConfig+0x92>
 8002698:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800269c:	e000      	b.n	80026a0 <ETH_SetMACConfig+0x94>
 800269e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80026a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	7fdb      	ldrb	r3, [r3, #31]
 80026a6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80026a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026b0:	2a00      	cmp	r2, #0
 80026b2:	d102      	bne.n	80026ba <ETH_SetMACConfig+0xae>
 80026b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026b8:	e000      	b.n	80026bc <ETH_SetMACConfig+0xb0>
 80026ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80026bc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80026c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026ca:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80026cc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b57      	ldr	r3, [pc, #348]	@ (800283c <ETH_SetMACConfig+0x230>)
 80026de:	4013      	ands	r3, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	68f9      	ldr	r1, [r7, #12]
 80026e6:	430b      	orrs	r3, r1
 80026e8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ee:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026f6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80026f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002700:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002702:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800270a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800270c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002714:	2a00      	cmp	r2, #0
 8002716:	d102      	bne.n	800271e <ETH_SetMACConfig+0x112>
 8002718:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800271c:	e000      	b.n	8002720 <ETH_SetMACConfig+0x114>
 800271e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002720:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	4b43      	ldr	r3, [pc, #268]	@ (8002840 <ETH_SetMACConfig+0x234>)
 8002732:	4013      	ands	r3, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	68f9      	ldr	r1, [r7, #12]
 800273a:	430b      	orrs	r3, r1
 800273c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002744:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	68f9      	ldr	r1, [r7, #12]
 8002762:	430b      	orrs	r3, r1
 8002764:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800276c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002772:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800277a:	2a00      	cmp	r2, #0
 800277c:	d101      	bne.n	8002782 <ETH_SetMACConfig+0x176>
 800277e:	2280      	movs	r2, #128	@ 0x80
 8002780:	e000      	b.n	8002784 <ETH_SetMACConfig+0x178>
 8002782:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002784:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800278a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002796:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800279a:	4013      	ands	r3, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	68f9      	ldr	r1, [r7, #12]
 80027a2:	430b      	orrs	r3, r1
 80027a4:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80027ac:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80027b4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c2:	f023 0103 	bic.w	r1, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80027da:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80027f6:	2a00      	cmp	r2, #0
 80027f8:	d101      	bne.n	80027fe <ETH_SetMACConfig+0x1f2>
 80027fa:	2240      	movs	r2, #64	@ 0x40
 80027fc:	e000      	b.n	8002800 <ETH_SetMACConfig+0x1f4>
 80027fe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002800:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002808:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800280a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002812:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002820:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	430a      	orrs	r2, r1
 800282c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	00048083 	.word	0x00048083
 8002840:	c0f88000 	.word	0xc0f88000

08002844 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 800285c:	f023 0302 	bic.w	r3, r3, #2
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	6811      	ldr	r1, [r2, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	430b      	orrs	r3, r1
 800286a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800286e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	791b      	ldrb	r3, [r3, #4]
 8002874:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800287a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	7b1b      	ldrb	r3, [r3, #12]
 8002880:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	68f9      	ldr	r1, [r7, #12]
 800289e:	430b      	orrs	r3, r1
 80028a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028a4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	7b5b      	ldrb	r3, [r3, #13]
 80028aa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028bc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80028c0:	4b21      	ldr	r3, [pc, #132]	@ (8002948 <ETH_SetDMAConfig+0x104>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	68f9      	ldr	r1, [r7, #12]
 80028ca:	430b      	orrs	r3, r1
 80028cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028d0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	7d1b      	ldrb	r3, [r3, #20]
 80028dc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80028de:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	7f5b      	ldrb	r3, [r3, #29]
 80028e4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028f2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80028f6:	4b15      	ldr	r3, [pc, #84]	@ (800294c <ETH_SetDMAConfig+0x108>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	68f9      	ldr	r1, [r7, #12]
 8002900:	430b      	orrs	r3, r1
 8002902:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002906:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	7f1b      	ldrb	r3, [r3, #28]
 800290e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002920:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002924:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002928:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	68f9      	ldr	r1, [r7, #12]
 8002932:	430b      	orrs	r3, r1
 8002934:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002938:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	fffec000 	.word	0xfffec000
 800294c:	ffc0efef 	.word	0xffc0efef

08002950 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b0a4      	sub	sp, #144	@ 0x90
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002958:	2301      	movs	r3, #1
 800295a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800295e:	2300      	movs	r3, #0
 8002960:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002968:	2300      	movs	r3, #0
 800296a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800296e:	2301      	movs	r3, #1
 8002970:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002974:	2301      	movs	r3, #1
 8002976:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800297a:	2301      	movs	r3, #1
 800297c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800298c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002990:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002992:	2300      	movs	r3, #0
 8002994:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002998:	2300      	movs	r3, #0
 800299a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80029a8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80029ac:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80029b4:	2300      	movs	r3, #0
 80029b6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80029ca:	2300      	movs	r3, #0
 80029cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80029d2:	2300      	movs	r3, #0
 80029d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80029e2:	2301      	movs	r3, #1
 80029e4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80029e8:	2320      	movs	r3, #32
 80029ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80029fa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80029fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a04:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff fde6 	bl	800260c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a40:	2301      	movs	r3, #1
 8002a42:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a44:	2301      	movs	r3, #1
 8002a46:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a5a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a5e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a68:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002a70:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002a74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a76:	f107 0308 	add.w	r3, r7, #8
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff fee1 	bl	8002844 <ETH_SetDMAConfig>
}
 8002a82:	bf00      	nop
 8002a84:	3790      	adds	r7, #144	@ 0x90
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b085      	sub	sp, #20
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	e01d      	b.n	8002ad4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68d9      	ldr	r1, [r3, #12]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	440b      	add	r3, r1
 8002aa8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ac2:	68b9      	ldr	r1, [r7, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	3206      	adds	r2, #6
 8002aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d9de      	bls.n	8002a98 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2303      	movs	r3, #3
 8002aec:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002afc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b0c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	e023      	b.n	8002b72 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6919      	ldr	r1, [r3, #16]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2200      	movs	r2, #0
 8002b46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2200      	movs	r2, #0
 8002b52:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2200      	movs	r2, #0
 8002b58:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	3212      	adds	r2, #18
 8002b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d9d8      	bls.n	8002b2a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bb2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bc6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b08d      	sub	sp, #52	@ 0x34
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3318      	adds	r3, #24
 8002be6:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c00:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c18:	d007      	beq.n	8002c2a <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1e:	3304      	adds	r3, #4
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e25a      	b.n	80030e4 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d044      	beq.n	8002cc4 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c46:	431a      	orrs	r2, r3
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002c66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d027      	beq.n	8002cc4 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7e:	041b      	lsls	r3, r3, #16
 8002c80:	431a      	orrs	r2, r3
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002cb2:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002cc2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d010      	beq.n	8002cf2 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002cd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	6992      	ldr	r2, [r2, #24]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d105      	bne.n	8002d0a <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d036      	beq.n	8002d78 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d16:	f3bf 8f5f 	dmb	sy
}
 8002d1a:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d902      	bls.n	8002d3a <ETH_Prepare_Tx_Descriptors+0x164>
 8002d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d36:	3b04      	subs	r3, #4
 8002d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d42:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d46:	3301      	adds	r3, #1
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d56:	d10f      	bne.n	8002d78 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d62:	f3bf 8f5f 	dmb	sy
}
 8002d66:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002d74:	2302      	movs	r3, #2
 8002d76:	e1b5      	b.n	80030e4 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	6852      	ldr	r2, [r2, #4]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d014      	beq.n	8002dd0 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8002dbe:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	6852      	ldr	r2, [r2, #4]
 8002dc6:	0412      	lsls	r2, r2, #16
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	e00a      	b.n	8002de6 <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8002dde:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8002de2:	6a3a      	ldr	r2, [r7, #32]
 8002de4:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d019      	beq.n	8002e26 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	04db      	lsls	r3, r3, #19
 8002e00:	431a      	orrs	r2, r3
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	0c9b      	lsrs	r3, r3, #18
 8002e0c:	049b      	lsls	r3, r3, #18
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	69d2      	ldr	r2, [r2, #28]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	60da      	str	r2, [r3, #12]
 8002e24:	e028      	b.n	8002e78 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002e2e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	6852      	ldr	r2, [r2, #4]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e90:	431a      	orrs	r2, r3
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002eae:	f3bf 8f5f 	dmb	sy
}
 8002eb2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80d9 	beq.w	8003080 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002ee0:	e0ce      	b.n	8003080 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d902      	bls.n	8002f00 <ETH_Prepare_Tx_Descriptors+0x32a>
 8002efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002efc:	3b04      	subs	r3, #4
 8002efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f08:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f22:	d007      	beq.n	8002f34 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f28:	3304      	adds	r3, #4
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d029      	beq.n	8002f88 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f40:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f46:	e019      	b.n	8002f7c <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8002f48:	f3bf 8f5f 	dmb	sy
}
 8002f4c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d902      	bls.n	8002f6c <ETH_Prepare_Tx_Descriptors+0x396>
 8002f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f68:	3b04      	subs	r3, #4
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f74:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f78:	3301      	adds	r3, #1
 8002f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d3e1      	bcc.n	8002f48 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8002f84:	2302      	movs	r3, #2
 8002f86:	e0ad      	b.n	80030e4 <ETH_Prepare_Tx_Descriptors+0x50e>
    }

    descnbr += 1U;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fa6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	6852      	ldr	r2, [r2, #4]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d014      	beq.n	8002fe6 <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8002fd4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	6852      	ldr	r2, [r2, #4]
 8002fdc:	0412      	lsls	r2, r2, #16
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	e00a      	b.n	8002ffc <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8002ff4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8002ff8:	6a3a      	ldr	r2, [r7, #32]
 8002ffa:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00f      	beq.n	8003028 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	0c9b      	lsrs	r3, r3, #18
 800300e:	049b      	lsls	r3, r3, #18
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	69d2      	ldr	r2, [r2, #28]
 8003014:	431a      	orrs	r2, r3
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	60da      	str	r2, [r3, #12]
 8003026:	e019      	b.n	800305c <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003030:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	6852      	ldr	r2, [r2, #4]
 8003038:	431a      	orrs	r2, r3
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	431a      	orrs	r2, r3
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	3301      	adds	r3, #1
 8003060:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003062:	f3bf 8f5f 	dmb	sy
}
 8003066:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	f47f af2c 	bne.w	8002ee2 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	e005      	b.n	80030aa <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030ba:	6979      	ldr	r1, [r7, #20]
 80030bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030be:	3304      	adds	r3, #4
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030ca:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80030cc:	b672      	cpsid	i
}
 80030ce:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	4413      	add	r3, r2
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80030de:	b662      	cpsie	i
}
 80030e0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3734      	adds	r7, #52	@ 0x34
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80030fe:	e136      	b.n	800336e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2101      	movs	r1, #1
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	4013      	ands	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 8128 	beq.w	8003368 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0x38>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b12      	cmp	r3, #18
 8003126:	d125      	bne.n	8003174 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	08da      	lsrs	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3208      	adds	r2, #8
 8003130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003134:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	220f      	movs	r2, #15
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4013      	ands	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f003 020f 	and.w	r2, r3, #15
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	08da      	lsrs	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3208      	adds	r2, #8
 800316e:	6979      	ldr	r1, [r7, #20]
 8003170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4013      	ands	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0203 	and.w	r2, r3, #3
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d00b      	beq.n	80031c8 <HAL_GPIO_Init+0xd8>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d007      	beq.n	80031c8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031bc:	2b11      	cmp	r3, #17
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b12      	cmp	r3, #18
 80031c6:	d130      	bne.n	800322a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	2203      	movs	r2, #3
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4013      	ands	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031fe:	2201      	movs	r2, #1
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4013      	ands	r3, r2
 800320c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	091b      	lsrs	r3, r3, #4
 8003214:	f003 0201 	and.w	r2, r3, #1
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b03      	cmp	r3, #3
 8003230:	d017      	beq.n	8003262 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	2203      	movs	r2, #3
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4013      	ands	r3, r2
 8003248:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d07c      	beq.n	8003368 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800326e:	4a47      	ldr	r2, [pc, #284]	@ (800338c <HAL_GPIO_Init+0x29c>)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	3318      	adds	r3, #24
 8003276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	220f      	movs	r2, #15
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4013      	ands	r3, r2
 8003290:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	0a9a      	lsrs	r2, r3, #10
 8003296:	4b3e      	ldr	r3, [pc, #248]	@ (8003390 <HAL_GPIO_Init+0x2a0>)
 8003298:	4013      	ands	r3, r2
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	f002 0203 	and.w	r2, r2, #3
 80032a0:	00d2      	lsls	r2, r2, #3
 80032a2:	4093      	lsls	r3, r2
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80032aa:	4938      	ldr	r1, [pc, #224]	@ (800338c <HAL_GPIO_Init+0x29c>)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	3318      	adds	r3, #24
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80032b8:	4b34      	ldr	r3, [pc, #208]	@ (800338c <HAL_GPIO_Init+0x29c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4013      	ands	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80032dc:	4a2b      	ldr	r2, [pc, #172]	@ (800338c <HAL_GPIO_Init+0x29c>)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80032e2:	4b2a      	ldr	r3, [pc, #168]	@ (800338c <HAL_GPIO_Init+0x29c>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4013      	ands	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003306:	4a21      	ldr	r2, [pc, #132]	@ (800338c <HAL_GPIO_Init+0x29c>)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800330c:	4b1f      	ldr	r3, [pc, #124]	@ (800338c <HAL_GPIO_Init+0x29c>)
 800330e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003312:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	43db      	mvns	r3, r3
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4013      	ands	r3, r2
 800331c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003332:	4a16      	ldr	r2, [pc, #88]	@ (800338c <HAL_GPIO_Init+0x29c>)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800333a:	4b14      	ldr	r3, [pc, #80]	@ (800338c <HAL_GPIO_Init+0x29c>)
 800333c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003340:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43db      	mvns	r3, r3
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4013      	ands	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003360:	4a0a      	ldr	r2, [pc, #40]	@ (800338c <HAL_GPIO_Init+0x29c>)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	3301      	adds	r3, #1
 800336c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	f47f aec1 	bne.w	8003100 <HAL_GPIO_Init+0x10>
  }
}
 800337e:	bf00      	nop
 8003380:	bf00      	nop
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	44022000 	.word	0x44022000
 8003390:	002f7f7f 	.word	0x002f7f7f

08003394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
 80033a0:	4613      	mov	r3, r2
 80033a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033a4:	787b      	ldrb	r3, [r7, #1]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033aa:	887a      	ldrh	r2, [r7, #2]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033b0:	e002      	b.n	80033b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033b2:	887a      	ldrh	r2, [r7, #2]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033d6:	887a      	ldrh	r2, [r7, #2]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4013      	ands	r3, r2
 80033dc:	041a      	lsls	r2, r3, #16
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	43d9      	mvns	r1, r3
 80033e2:	887b      	ldrh	r3, [r7, #2]
 80033e4:	400b      	ands	r3, r1
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	619a      	str	r2, [r3, #24]
}
 80033ec:	bf00      	nop
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80033fc:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <HAL_ICACHE_Enable+0x1c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a04      	ldr	r2, [pc, #16]	@ (8003414 <HAL_ICACHE_Enable+0x1c>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40030400 	.word	0x40030400

08003418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d102      	bne.n	800342c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	f000 bc28 	b.w	8003c7c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800342c:	4b94      	ldr	r3, [pc, #592]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	f003 0318 	and.w	r3, r3, #24
 8003434:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003436:	4b92      	ldr	r3, [pc, #584]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 8003438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	d05b      	beq.n	8003504 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	2b08      	cmp	r3, #8
 8003450:	d005      	beq.n	800345e <HAL_RCC_OscConfig+0x46>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	2b18      	cmp	r3, #24
 8003456:	d114      	bne.n	8003482 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d111      	bne.n	8003482 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f000 bc08 	b.w	8003c7c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800346c:	4b84      	ldr	r3, [pc, #528]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	041b      	lsls	r3, r3, #16
 800347a:	4981      	ldr	r1, [pc, #516]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 800347c:	4313      	orrs	r3, r2
 800347e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003480:	e040      	b.n	8003504 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d023      	beq.n	80034d2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800348a:	4b7d      	ldr	r3, [pc, #500]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7c      	ldr	r2, [pc, #496]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 8003490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fd ffb7 	bl	8001408 <HAL_GetTick>
 800349a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800349e:	f7fd ffb3 	bl	8001408 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e3e5      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80034b0:	4b73      	ldr	r3, [pc, #460]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80034bc:	4b70      	ldr	r3, [pc, #448]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	041b      	lsls	r3, r3, #16
 80034ca:	496d      	ldr	r1, [pc, #436]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	618b      	str	r3, [r1, #24]
 80034d0:	e018      	b.n	8003504 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034d2:	4b6b      	ldr	r3, [pc, #428]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a6a      	ldr	r2, [pc, #424]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80034d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034de:	f7fd ff93 	bl	8001408 <HAL_GetTick>
 80034e2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80034e6:	f7fd ff8f 	bl	8001408 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e3c1      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80034f8:	4b61      	ldr	r3, [pc, #388]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f0      	bne.n	80034e6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80a0 	beq.w	8003652 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	2b10      	cmp	r3, #16
 8003516:	d005      	beq.n	8003524 <HAL_RCC_OscConfig+0x10c>
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b18      	cmp	r3, #24
 800351c:	d109      	bne.n	8003532 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	f040 8092 	bne.w	8003652 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e3a4      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800353a:	d106      	bne.n	800354a <HAL_RCC_OscConfig+0x132>
 800353c:	4b50      	ldr	r3, [pc, #320]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a4f      	ldr	r2, [pc, #316]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 8003542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	e058      	b.n	80035fc <HAL_RCC_OscConfig+0x1e4>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d112      	bne.n	8003578 <HAL_RCC_OscConfig+0x160>
 8003552:	4b4b      	ldr	r3, [pc, #300]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a4a      	ldr	r2, [pc, #296]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 8003558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4b48      	ldr	r3, [pc, #288]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a47      	ldr	r2, [pc, #284]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 8003564:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4b45      	ldr	r3, [pc, #276]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a44      	ldr	r2, [pc, #272]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 8003570:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e041      	b.n	80035fc <HAL_RCC_OscConfig+0x1e4>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003580:	d112      	bne.n	80035a8 <HAL_RCC_OscConfig+0x190>
 8003582:	4b3f      	ldr	r3, [pc, #252]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a3e      	ldr	r2, [pc, #248]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 8003588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b3c      	ldr	r3, [pc, #240]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a3b      	ldr	r2, [pc, #236]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 8003594:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b39      	ldr	r3, [pc, #228]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a38      	ldr	r2, [pc, #224]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e029      	b.n	80035fc <HAL_RCC_OscConfig+0x1e4>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80035b0:	d112      	bne.n	80035d8 <HAL_RCC_OscConfig+0x1c0>
 80035b2:	4b33      	ldr	r3, [pc, #204]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a32      	ldr	r2, [pc, #200]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80035b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b30      	ldr	r3, [pc, #192]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80035c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e011      	b.n	80035fc <HAL_RCC_OscConfig+0x1e4>
 80035d8:	4b29      	ldr	r3, [pc, #164]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a28      	ldr	r2, [pc, #160]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80035de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b26      	ldr	r3, [pc, #152]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a25      	ldr	r2, [pc, #148]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80035ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	4b23      	ldr	r3, [pc, #140]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a22      	ldr	r2, [pc, #136]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 80035f6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80035fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d013      	beq.n	800362c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fd ff00 	bl	8001408 <HAL_GetTick>
 8003608:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800360c:	f7fd fefc 	bl	8001408 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	@ 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e32e      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800361e:	4b18      	ldr	r3, [pc, #96]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0x1f4>
 800362a:	e012      	b.n	8003652 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fd feec 	bl	8001408 <HAL_GetTick>
 8003630:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003634:	f7fd fee8 	bl	8001408 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	@ 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e31a      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003646:	4b0e      	ldr	r3, [pc, #56]	@ (8003680 <HAL_RCC_OscConfig+0x268>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 809a 	beq.w	8003794 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_RCC_OscConfig+0x25a>
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	2b18      	cmp	r3, #24
 800366a:	d149      	bne.n	8003700 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d146      	bne.n	8003700 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e2fe      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
 800367e:	bf00      	nop
 8003680:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d11c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800368a:	4b9a      	ldr	r3, [pc, #616]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0218 	and.w	r2, r3, #24
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	429a      	cmp	r2, r3
 8003698:	d014      	beq.n	80036c4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800369a:	4b96      	ldr	r3, [pc, #600]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 0218 	bic.w	r2, r3, #24
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	4993      	ldr	r1, [pc, #588]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80036ac:	f000 fdd0 	bl	8004250 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036b0:	4b91      	ldr	r3, [pc, #580]	@ (80038f8 <HAL_RCC_OscConfig+0x4e0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fd faf7 	bl	8000ca8 <HAL_InitTick>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e2db      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fd fea0 	bl	8001408 <HAL_GetTick>
 80036c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80036cc:	f7fd fe9c 	bl	8001408 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e2ce      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036de:	4b85      	ldr	r3, [pc, #532]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80036ea:	4b82      	ldr	r3, [pc, #520]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	041b      	lsls	r3, r3, #16
 80036f8:	497e      	ldr	r1, [pc, #504]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80036fe:	e049      	b.n	8003794 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d02c      	beq.n	8003762 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003708:	4b7a      	ldr	r3, [pc, #488]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 0218 	bic.w	r2, r3, #24
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	4977      	ldr	r1, [pc, #476]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800371a:	4b76      	ldr	r3, [pc, #472]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a75      	ldr	r2, [pc, #468]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003726:	f7fd fe6f 	bl	8001408 <HAL_GetTick>
 800372a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800372e:	f7fd fe6b 	bl	8001408 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e29d      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003740:	4b6c      	ldr	r3, [pc, #432]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800374c:	4b69      	ldr	r3, [pc, #420]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	041b      	lsls	r3, r3, #16
 800375a:	4966      	ldr	r1, [pc, #408]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 800375c:	4313      	orrs	r3, r2
 800375e:	610b      	str	r3, [r1, #16]
 8003760:	e018      	b.n	8003794 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003762:	4b64      	ldr	r3, [pc, #400]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a63      	ldr	r2, [pc, #396]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fd fe4b 	bl	8001408 <HAL_GetTick>
 8003772:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003776:	f7fd fe47 	bl	8001408 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e279      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003788:	4b5a      	ldr	r3, [pc, #360]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f0      	bne.n	8003776 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d03c      	beq.n	800381a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01c      	beq.n	80037e2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a8:	4b52      	ldr	r3, [pc, #328]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80037aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037ae:	4a51      	ldr	r2, [pc, #324]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80037b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b8:	f7fd fe26 	bl	8001408 <HAL_GetTick>
 80037bc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80037c0:	f7fd fe22 	bl	8001408 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e254      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80037d2:	4b48      	ldr	r3, [pc, #288]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80037d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0ef      	beq.n	80037c0 <HAL_RCC_OscConfig+0x3a8>
 80037e0:	e01b      	b.n	800381a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e2:	4b44      	ldr	r3, [pc, #272]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80037e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037e8:	4a42      	ldr	r2, [pc, #264]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80037ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7fd fe09 	bl	8001408 <HAL_GetTick>
 80037f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80037fa:	f7fd fe05 	bl	8001408 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e237      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800380c:	4b39      	ldr	r3, [pc, #228]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 800380e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003812:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1ef      	bne.n	80037fa <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80d2 	beq.w	80039cc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003828:	4b34      	ldr	r3, [pc, #208]	@ (80038fc <HAL_RCC_OscConfig+0x4e4>)
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d118      	bne.n	8003866 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003834:	4b31      	ldr	r3, [pc, #196]	@ (80038fc <HAL_RCC_OscConfig+0x4e4>)
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	4a30      	ldr	r2, [pc, #192]	@ (80038fc <HAL_RCC_OscConfig+0x4e4>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003840:	f7fd fde2 	bl	8001408 <HAL_GetTick>
 8003844:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003848:	f7fd fdde 	bl	8001408 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e210      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800385a:	4b28      	ldr	r3, [pc, #160]	@ (80038fc <HAL_RCC_OscConfig+0x4e4>)
 800385c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d108      	bne.n	8003880 <HAL_RCC_OscConfig+0x468>
 800386e:	4b21      	ldr	r3, [pc, #132]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 8003870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003874:	4a1f      	ldr	r2, [pc, #124]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800387e:	e074      	b.n	800396a <HAL_RCC_OscConfig+0x552>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d118      	bne.n	80038ba <HAL_RCC_OscConfig+0x4a2>
 8003888:	4b1a      	ldr	r3, [pc, #104]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 800388a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800388e:	4a19      	ldr	r2, [pc, #100]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003898:	4b16      	ldr	r3, [pc, #88]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 800389a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800389e:	4a15      	ldr	r2, [pc, #84]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80038a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038a8:	4b12      	ldr	r3, [pc, #72]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80038aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038ae:	4a11      	ldr	r2, [pc, #68]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80038b0:	f023 0304 	bic.w	r3, r3, #4
 80038b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038b8:	e057      	b.n	800396a <HAL_RCC_OscConfig+0x552>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d11e      	bne.n	8003900 <HAL_RCC_OscConfig+0x4e8>
 80038c2:	4b0c      	ldr	r3, [pc, #48]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80038c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038c8:	4a0a      	ldr	r2, [pc, #40]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80038ca:	f043 0304 	orr.w	r3, r3, #4
 80038ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038d2:	4b08      	ldr	r3, [pc, #32]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80038d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038d8:	4a06      	ldr	r2, [pc, #24]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80038da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038e2:	4b04      	ldr	r3, [pc, #16]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80038e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038e8:	4a02      	ldr	r2, [pc, #8]	@ (80038f4 <HAL_RCC_OscConfig+0x4dc>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80038f2:	e03a      	b.n	800396a <HAL_RCC_OscConfig+0x552>
 80038f4:	44020c00 	.word	0x44020c00
 80038f8:	20050004 	.word	0x20050004
 80038fc:	44020800 	.word	0x44020800
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b85      	cmp	r3, #133	@ 0x85
 8003906:	d118      	bne.n	800393a <HAL_RCC_OscConfig+0x522>
 8003908:	4ba2      	ldr	r3, [pc, #648]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 800390a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800390e:	4aa1      	ldr	r2, [pc, #644]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003910:	f043 0304 	orr.w	r3, r3, #4
 8003914:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003918:	4b9e      	ldr	r3, [pc, #632]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 800391a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800391e:	4a9d      	ldr	r2, [pc, #628]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003924:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003928:	4b9a      	ldr	r3, [pc, #616]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 800392a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800392e:	4a99      	ldr	r2, [pc, #612]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003938:	e017      	b.n	800396a <HAL_RCC_OscConfig+0x552>
 800393a:	4b96      	ldr	r3, [pc, #600]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 800393c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003940:	4a94      	ldr	r2, [pc, #592]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800394a:	4b92      	ldr	r3, [pc, #584]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 800394c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003950:	4a90      	ldr	r2, [pc, #576]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003952:	f023 0304 	bic.w	r3, r3, #4
 8003956:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800395a:	4b8e      	ldr	r3, [pc, #568]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 800395c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003960:	4a8c      	ldr	r2, [pc, #560]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003962:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003966:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003972:	f7fd fd49 	bl	8001408 <HAL_GetTick>
 8003976:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003978:	e00a      	b.n	8003990 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397a:	f7fd fd45 	bl	8001408 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003988:	4293      	cmp	r3, r2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e175      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003990:	4b80      	ldr	r3, [pc, #512]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003992:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0ed      	beq.n	800397a <HAL_RCC_OscConfig+0x562>
 800399e:	e015      	b.n	80039cc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fd fd32 	bl	8001408 <HAL_GetTick>
 80039a4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039a6:	e00a      	b.n	80039be <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a8:	f7fd fd2e 	bl	8001408 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e15e      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039be:	4b75      	ldr	r3, [pc, #468]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 80039c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ed      	bne.n	80039a8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d036      	beq.n	8003a46 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d019      	beq.n	8003a14 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a6b      	ldr	r2, [pc, #428]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 80039e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ec:	f7fd fd0c 	bl	8001408 <HAL_GetTick>
 80039f0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80039f4:	f7fd fd08 	bl	8001408 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e13a      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003a06:	4b63      	ldr	r3, [pc, #396]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x5dc>
 8003a12:	e018      	b.n	8003a46 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a14:	4b5f      	ldr	r3, [pc, #380]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a5e      	ldr	r2, [pc, #376]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003a1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fd fcf2 	bl	8001408 <HAL_GetTick>
 8003a24:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003a28:	f7fd fcee 	bl	8001408 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e120      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003a3a:	4b56      	ldr	r3, [pc, #344]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 8115 	beq.w	8003c7a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2b18      	cmp	r3, #24
 8003a54:	f000 80af 	beq.w	8003bb6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	f040 8086 	bne.w	8003b6e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003a62:	4b4c      	ldr	r3, [pc, #304]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a4b      	ldr	r2, [pc, #300]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003a68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7fd fccb 	bl	8001408 <HAL_GetTick>
 8003a72:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003a76:	f7fd fcc7 	bl	8001408 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e0f9      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a88:	4b42      	ldr	r3, [pc, #264]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003a94:	4b3f      	ldr	r3, [pc, #252]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a98:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a9c:	f023 0303 	bic.w	r3, r3, #3
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003aa8:	0212      	lsls	r2, r2, #8
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	4939      	ldr	r1, [pc, #228]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	025b      	lsls	r3, r3, #9
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003acc:	3b01      	subs	r3, #1
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	3b01      	subs	r3, #1
 8003adc:	061b      	lsls	r3, r3, #24
 8003ade:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ae2:	492c      	ldr	r1, [pc, #176]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aec:	4a29      	ldr	r2, [pc, #164]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003aee:	f023 0310 	bic.w	r3, r3, #16
 8003af2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af8:	4a26      	ldr	r2, [pc, #152]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003afe:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b02:	4a24      	ldr	r2, [pc, #144]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003b04:	f043 0310 	orr.w	r3, r3, #16
 8003b08:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003b0a:	4b22      	ldr	r3, [pc, #136]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0e:	f023 020c 	bic.w	r2, r3, #12
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b16:	491f      	ldr	r1, [pc, #124]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b20:	f023 0220 	bic.w	r2, r3, #32
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b28:	491a      	ldr	r1, [pc, #104]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b2e:	4b19      	ldr	r3, [pc, #100]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b32:	4a18      	ldr	r2, [pc, #96]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b38:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003b3a:	4b16      	ldr	r3, [pc, #88]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a15      	ldr	r2, [pc, #84]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003b40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b46:	f7fd fc5f 	bl	8001408 <HAL_GetTick>
 8003b4a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003b4e:	f7fd fc5b 	bl	8001408 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e08d      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b60:	4b0c      	ldr	r3, [pc, #48]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCC_OscConfig+0x736>
 8003b6c:	e085      	b.n	8003c7a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003b6e:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a08      	ldr	r2, [pc, #32]	@ (8003b94 <HAL_RCC_OscConfig+0x77c>)
 8003b74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fd fc45 	bl	8001408 <HAL_GetTick>
 8003b7e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b80:	e00a      	b.n	8003b98 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003b82:	f7fd fc41 	bl	8001408 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d903      	bls.n	8003b98 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e073      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
 8003b94:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b98:	4b3a      	ldr	r3, [pc, #232]	@ (8003c84 <HAL_RCC_OscConfig+0x86c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1ee      	bne.n	8003b82 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003ba4:	4b37      	ldr	r3, [pc, #220]	@ (8003c84 <HAL_RCC_OscConfig+0x86c>)
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba8:	4a36      	ldr	r2, [pc, #216]	@ (8003c84 <HAL_RCC_OscConfig+0x86c>)
 8003baa:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003bae:	f023 0303 	bic.w	r3, r3, #3
 8003bb2:	6293      	str	r3, [r2, #40]	@ 0x28
 8003bb4:	e061      	b.n	8003c7a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003bb6:	4b33      	ldr	r3, [pc, #204]	@ (8003c84 <HAL_RCC_OscConfig+0x86c>)
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003bbc:	4b31      	ldr	r3, [pc, #196]	@ (8003c84 <HAL_RCC_OscConfig+0x86c>)
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d031      	beq.n	8003c2e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f003 0203 	and.w	r2, r3, #3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d12a      	bne.n	8003c2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d122      	bne.n	8003c2e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d11a      	bne.n	8003c2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	0a5b      	lsrs	r3, r3, #9
 8003bfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d111      	bne.n	8003c2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c16:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d108      	bne.n	8003c2e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	0e1b      	lsrs	r3, r3, #24
 8003c20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c28:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e024      	b.n	8003c7c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003c32:	4b14      	ldr	r3, [pc, #80]	@ (8003c84 <HAL_RCC_OscConfig+0x86c>)
 8003c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c36:	08db      	lsrs	r3, r3, #3
 8003c38:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d01a      	beq.n	8003c7a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003c44:	4b0f      	ldr	r3, [pc, #60]	@ (8003c84 <HAL_RCC_OscConfig+0x86c>)
 8003c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c48:	4a0e      	ldr	r2, [pc, #56]	@ (8003c84 <HAL_RCC_OscConfig+0x86c>)
 8003c4a:	f023 0310 	bic.w	r3, r3, #16
 8003c4e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fd fbda 	bl	8001408 <HAL_GetTick>
 8003c54:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003c56:	bf00      	nop
 8003c58:	f7fd fbd6 	bl	8001408 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d0f9      	beq.n	8003c58 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c68:	4a06      	ldr	r2, [pc, #24]	@ (8003c84 <HAL_RCC_OscConfig+0x86c>)
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003c6e:	4b05      	ldr	r3, [pc, #20]	@ (8003c84 <HAL_RCC_OscConfig+0x86c>)
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	4a04      	ldr	r2, [pc, #16]	@ (8003c84 <HAL_RCC_OscConfig+0x86c>)
 8003c74:	f043 0310 	orr.w	r3, r3, #16
 8003c78:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	44020c00 	.word	0x44020c00

08003c88 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e19e      	b.n	8003fda <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c9c:	4b83      	ldr	r3, [pc, #524]	@ (8003eac <HAL_RCC_ClockConfig+0x224>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d910      	bls.n	8003ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003caa:	4b80      	ldr	r3, [pc, #512]	@ (8003eac <HAL_RCC_ClockConfig+0x224>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 020f 	bic.w	r2, r3, #15
 8003cb2:	497e      	ldr	r1, [pc, #504]	@ (8003eac <HAL_RCC_ClockConfig+0x224>)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	4b7c      	ldr	r3, [pc, #496]	@ (8003eac <HAL_RCC_ClockConfig+0x224>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e186      	b.n	8003fda <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d012      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	4b74      	ldr	r3, [pc, #464]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d909      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003cea:	4b71      	ldr	r3, [pc, #452]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	496d      	ldr	r1, [pc, #436]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d012      	beq.n	8003d30 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	4b68      	ldr	r3, [pc, #416]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	091b      	lsrs	r3, r3, #4
 8003d14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d909      	bls.n	8003d30 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003d1c:	4b64      	ldr	r3, [pc, #400]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	4961      	ldr	r1, [pc, #388]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d010      	beq.n	8003d5e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	4b5b      	ldr	r3, [pc, #364]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d908      	bls.n	8003d5e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003d4c:	4b58      	ldr	r3, [pc, #352]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4955      	ldr	r1, [pc, #340]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d010      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	4b50      	ldr	r3, [pc, #320]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d908      	bls.n	8003d8c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003d7a:	4b4d      	ldr	r3, [pc, #308]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 020f 	bic.w	r2, r3, #15
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	494a      	ldr	r1, [pc, #296]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8093 	beq.w	8003ec0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003da2:	4b43      	ldr	r3, [pc, #268]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d121      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e113      	b.n	8003fda <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dba:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d115      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e107      	b.n	8003fda <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003dd2:	4b37      	ldr	r3, [pc, #220]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0fb      	b.n	8003fda <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de2:	4b33      	ldr	r3, [pc, #204]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e0f3      	b.n	8003fda <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003df2:	4b2f      	ldr	r3, [pc, #188]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f023 0203 	bic.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	492c      	ldr	r1, [pc, #176]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e04:	f7fd fb00 	bl	8001408 <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d112      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e14:	f7fd faf8 	bl	8001408 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e0d7      	b.n	8003fda <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e2a:	4b21      	ldr	r3, [pc, #132]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f003 0318 	and.w	r3, r3, #24
 8003e32:	2b18      	cmp	r3, #24
 8003e34:	d1ee      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x18c>
 8003e36:	e043      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d112      	bne.n	8003e66 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e42:	f7fd fae1 	bl	8001408 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e0c0      	b.n	8003fda <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e58:	4b15      	ldr	r3, [pc, #84]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	f003 0318 	and.w	r3, r3, #24
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d1ee      	bne.n	8003e42 <HAL_RCC_ClockConfig+0x1ba>
 8003e64:	e02c      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d122      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e70:	f7fd faca 	bl	8001408 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e0a9      	b.n	8003fda <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e86:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb0 <HAL_RCC_ClockConfig+0x228>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f003 0318 	and.w	r3, r3, #24
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d1ee      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x1e8>
 8003e92:	e015      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e94:	f7fd fab8 	bl	8001408 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d906      	bls.n	8003eb4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e097      	b.n	8003fda <HAL_RCC_ClockConfig+0x352>
 8003eaa:	bf00      	nop
 8003eac:	40022000 	.word	0x40022000
 8003eb0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eb4:	4b4b      	ldr	r3, [pc, #300]	@ (8003fe4 <HAL_RCC_ClockConfig+0x35c>)
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	f003 0318 	and.w	r3, r3, #24
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1e9      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d010      	beq.n	8003eee <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	4b44      	ldr	r3, [pc, #272]	@ (8003fe4 <HAL_RCC_ClockConfig+0x35c>)
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d208      	bcs.n	8003eee <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003edc:	4b41      	ldr	r3, [pc, #260]	@ (8003fe4 <HAL_RCC_ClockConfig+0x35c>)
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f023 020f 	bic.w	r2, r3, #15
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	493e      	ldr	r1, [pc, #248]	@ (8003fe4 <HAL_RCC_ClockConfig+0x35c>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eee:	4b3e      	ldr	r3, [pc, #248]	@ (8003fe8 <HAL_RCC_ClockConfig+0x360>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d210      	bcs.n	8003f1e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efc:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe8 <HAL_RCC_ClockConfig+0x360>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f023 020f 	bic.w	r2, r3, #15
 8003f04:	4938      	ldr	r1, [pc, #224]	@ (8003fe8 <HAL_RCC_ClockConfig+0x360>)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0c:	4b36      	ldr	r3, [pc, #216]	@ (8003fe8 <HAL_RCC_ClockConfig+0x360>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d001      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e05d      	b.n	8003fda <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d010      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8003fe4 <HAL_RCC_ClockConfig+0x35c>)
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d208      	bcs.n	8003f4c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003fe4 <HAL_RCC_ClockConfig+0x35c>)
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	4927      	ldr	r1, [pc, #156]	@ (8003fe4 <HAL_RCC_ClockConfig+0x35c>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d012      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	4b21      	ldr	r3, [pc, #132]	@ (8003fe4 <HAL_RCC_ClockConfig+0x35c>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d209      	bcs.n	8003f7e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe4 <HAL_RCC_ClockConfig+0x35c>)
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	491a      	ldr	r1, [pc, #104]	@ (8003fe4 <HAL_RCC_ClockConfig+0x35c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d012      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	4b15      	ldr	r3, [pc, #84]	@ (8003fe4 <HAL_RCC_ClockConfig+0x35c>)
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	0a1b      	lsrs	r3, r3, #8
 8003f94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d209      	bcs.n	8003fb0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003f9c:	4b11      	ldr	r3, [pc, #68]	@ (8003fe4 <HAL_RCC_ClockConfig+0x35c>)
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	490e      	ldr	r1, [pc, #56]	@ (8003fe4 <HAL_RCC_ClockConfig+0x35c>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003fb0:	f000 f822 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe4 <HAL_RCC_ClockConfig+0x35c>)
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	490b      	ldr	r1, [pc, #44]	@ (8003fec <HAL_RCC_ClockConfig+0x364>)
 8003fc0:	5ccb      	ldrb	r3, [r1, r3]
 8003fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff0 <HAL_RCC_ClockConfig+0x368>)
 8003fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003fca:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff4 <HAL_RCC_ClockConfig+0x36c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc fe6a 	bl	8000ca8 <HAL_InitTick>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003fd8:	7afb      	ldrb	r3, [r7, #11]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	44020c00 	.word	0x44020c00
 8003fe8:	40022000 	.word	0x40022000
 8003fec:	0801cb74 	.word	0x0801cb74
 8003ff0:	20050000 	.word	0x20050000
 8003ff4:	20050004 	.word	0x20050004

08003ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	@ 0x24
 8003ffc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003ffe:	4b8c      	ldr	r3, [pc, #560]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f003 0318 	and.w	r3, r3, #24
 8004006:	2b08      	cmp	r3, #8
 8004008:	d102      	bne.n	8004010 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800400a:	4b8a      	ldr	r3, [pc, #552]	@ (8004234 <HAL_RCC_GetSysClockFreq+0x23c>)
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	e107      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004010:	4b87      	ldr	r3, [pc, #540]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	f003 0318 	and.w	r3, r3, #24
 8004018:	2b00      	cmp	r3, #0
 800401a:	d112      	bne.n	8004042 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800401c:	4b84      	ldr	r3, [pc, #528]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0320 	and.w	r3, r3, #32
 8004024:	2b00      	cmp	r3, #0
 8004026:	d009      	beq.n	800403c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004028:	4b81      	ldr	r3, [pc, #516]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	08db      	lsrs	r3, r3, #3
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	4a81      	ldr	r2, [pc, #516]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x240>)
 8004034:	fa22 f303 	lsr.w	r3, r2, r3
 8004038:	61fb      	str	r3, [r7, #28]
 800403a:	e0f1      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800403c:	4b7e      	ldr	r3, [pc, #504]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x240>)
 800403e:	61fb      	str	r3, [r7, #28]
 8004040:	e0ee      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004042:	4b7b      	ldr	r3, [pc, #492]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f003 0318 	and.w	r3, r3, #24
 800404a:	2b10      	cmp	r3, #16
 800404c:	d102      	bne.n	8004054 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800404e:	4b7b      	ldr	r3, [pc, #492]	@ (800423c <HAL_RCC_GetSysClockFreq+0x244>)
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e0e5      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004054:	4b76      	ldr	r3, [pc, #472]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	f003 0318 	and.w	r3, r3, #24
 800405c:	2b18      	cmp	r3, #24
 800405e:	f040 80dd 	bne.w	800421c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004062:	4b73      	ldr	r3, [pc, #460]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 8004064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800406c:	4b70      	ldr	r3, [pc, #448]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	0a1b      	lsrs	r3, r3, #8
 8004072:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004076:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004078:	4b6d      	ldr	r3, [pc, #436]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 800407a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004084:	4b6a      	ldr	r3, [pc, #424]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 8004086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004088:	08db      	lsrs	r3, r3, #3
 800408a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	fb02 f303 	mul.w	r3, r2, r3
 8004094:	ee07 3a90 	vmov	s15, r3
 8004098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 80b7 	beq.w	8004216 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d003      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0xbe>
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d056      	beq.n	8004162 <HAL_RCC_GetSysClockFreq+0x16a>
 80040b4:	e077      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80040b6:	4b5e      	ldr	r3, [pc, #376]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d02d      	beq.n	800411e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80040c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	08db      	lsrs	r3, r3, #3
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	4a5a      	ldr	r2, [pc, #360]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x240>)
 80040ce:	fa22 f303 	lsr.w	r3, r2, r3
 80040d2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	ee07 3a90 	vmov	s15, r3
 80040e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ec:	4b50      	ldr	r3, [pc, #320]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 80040ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80040fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004100:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004240 <HAL_RCC_GetSysClockFreq+0x248>
 8004104:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004108:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800410c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004110:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004118:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800411c:	e065      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	ee07 3a90 	vmov	s15, r3
 8004124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004128:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004244 <HAL_RCC_GetSysClockFreq+0x24c>
 800412c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004130:	4b3f      	ldr	r3, [pc, #252]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 8004132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004138:	ee07 3a90 	vmov	s15, r3
 800413c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004140:	ed97 6a02 	vldr	s12, [r7, #8]
 8004144:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004240 <HAL_RCC_GetSysClockFreq+0x248>
 8004148:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800414c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004150:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004154:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004160:	e043      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	ee07 3a90 	vmov	s15, r3
 8004168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004248 <HAL_RCC_GetSysClockFreq+0x250>
 8004170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004174:	4b2e      	ldr	r3, [pc, #184]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 8004176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417c:	ee07 3a90 	vmov	s15, r3
 8004180:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004184:	ed97 6a02 	vldr	s12, [r7, #8]
 8004188:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004240 <HAL_RCC_GetSysClockFreq+0x248>
 800418c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004190:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004194:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004198:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800419c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80041a4:	e021      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	ee07 3a90 	vmov	s15, r3
 80041ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800424c <HAL_RCC_GetSysClockFreq+0x254>
 80041b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 80041ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c0:	ee07 3a90 	vmov	s15, r3
 80041c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80041c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80041cc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004240 <HAL_RCC_GetSysClockFreq+0x248>
 80041d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80041d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80041e8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80041ea:	4b11      	ldr	r3, [pc, #68]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x238>)
 80041ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ee:	0a5b      	lsrs	r3, r3, #9
 80041f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041f4:	3301      	adds	r3, #1
 80041f6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004202:	edd7 6a06 	vldr	s13, [r7, #24]
 8004206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800420a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800420e:	ee17 3a90 	vmov	r3, s15
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	e004      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	e001      	b.n	8004220 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800421c:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <HAL_RCC_GetSysClockFreq+0x240>)
 800421e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004220:	69fb      	ldr	r3, [r7, #28]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3724      	adds	r7, #36	@ 0x24
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	44020c00 	.word	0x44020c00
 8004234:	003d0900 	.word	0x003d0900
 8004238:	03d09000 	.word	0x03d09000
 800423c:	007a1200 	.word	0x007a1200
 8004240:	46000000 	.word	0x46000000
 8004244:	4c742400 	.word	0x4c742400
 8004248:	4af42400 	.word	0x4af42400
 800424c:	4a742400 	.word	0x4a742400

08004250 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004254:	f7ff fed0 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8004258:	4602      	mov	r2, r0
 800425a:	4b08      	ldr	r3, [pc, #32]	@ (800427c <HAL_RCC_GetHCLKFreq+0x2c>)
 800425c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800425e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004262:	4907      	ldr	r1, [pc, #28]	@ (8004280 <HAL_RCC_GetHCLKFreq+0x30>)
 8004264:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004266:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800426a:	fa22 f303 	lsr.w	r3, r2, r3
 800426e:	4a05      	ldr	r2, [pc, #20]	@ (8004284 <HAL_RCC_GetHCLKFreq+0x34>)
 8004270:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004272:	4b04      	ldr	r3, [pc, #16]	@ (8004284 <HAL_RCC_GetHCLKFreq+0x34>)
 8004274:	681b      	ldr	r3, [r3, #0]
}
 8004276:	4618      	mov	r0, r3
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	44020c00 	.word	0x44020c00
 8004280:	0801cb74 	.word	0x0801cb74
 8004284:	20050000 	.word	0x20050000

08004288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800428c:	f7ff ffe0 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 8004290:	4602      	mov	r2, r0
 8004292:	4b06      	ldr	r3, [pc, #24]	@ (80042ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	4904      	ldr	r1, [pc, #16]	@ (80042b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800429e:	5ccb      	ldrb	r3, [r1, r3]
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	44020c00 	.word	0x44020c00
 80042b0:	0801cb84 	.word	0x0801cb84

080042b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80042b8:	f7ff ffca 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b06      	ldr	r3, [pc, #24]	@ (80042d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	0a1b      	lsrs	r3, r3, #8
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	4904      	ldr	r1, [pc, #16]	@ (80042dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	44020c00 	.word	0x44020c00
 80042dc:	0801cb84 	.word	0x0801cb84

080042e0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80042e4:	f7ff ffb4 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b06      	ldr	r3, [pc, #24]	@ (8004304 <HAL_RCC_GetPCLK3Freq+0x24>)
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	0b1b      	lsrs	r3, r3, #12
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4904      	ldr	r1, [pc, #16]	@ (8004308 <HAL_RCC_GetPCLK3Freq+0x28>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004300:	4618      	mov	r0, r3
 8004302:	bd80      	pop	{r7, pc}
 8004304:	44020c00 	.word	0x44020c00
 8004308:	0801cb84 	.word	0x0801cb84

0800430c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	221f      	movs	r2, #31
 800431a:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800431c:	4b15      	ldr	r3, [pc, #84]	@ (8004374 <HAL_RCC_GetClockConfig+0x68>)
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	f003 0203 	and.w	r2, r3, #3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8004328:	4b12      	ldr	r3, [pc, #72]	@ (8004374 <HAL_RCC_GetClockConfig+0x68>)
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f003 020f 	and.w	r2, r3, #15
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800435a:	4b07      	ldr	r3, [pc, #28]	@ (8004378 <HAL_RCC_GetClockConfig+0x6c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 020f 	and.w	r2, r3, #15
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	601a      	str	r2, [r3, #0]
}
 8004366:	bf00      	nop
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	44020c00 	.word	0x44020c00
 8004378:	40022000 	.word	0x40022000

0800437c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800437c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004380:	b0d8      	sub	sp, #352	@ 0x160
 8004382:	af00      	add	r7, sp, #0
 8004384:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004388:	2300      	movs	r3, #0
 800438a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800438e:	2300      	movs	r3, #0
 8004390:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004394:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80043a0:	2500      	movs	r5, #0
 80043a2:	ea54 0305 	orrs.w	r3, r4, r5
 80043a6:	d00b      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80043a8:	4bcd      	ldr	r3, [pc, #820]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80043aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043ae:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80043b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b8:	4ac9      	ldr	r2, [pc, #804]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80043ba:	430b      	orrs	r3, r1
 80043bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f002 0801 	and.w	r8, r2, #1
 80043cc:	f04f 0900 	mov.w	r9, #0
 80043d0:	ea58 0309 	orrs.w	r3, r8, r9
 80043d4:	d042      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80043d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043dc:	2b05      	cmp	r3, #5
 80043de:	d823      	bhi.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80043e0:	a201      	add	r2, pc, #4	@ (adr r2, 80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	08004431 	.word	0x08004431
 80043ec:	08004401 	.word	0x08004401
 80043f0:	08004415 	.word	0x08004415
 80043f4:	08004431 	.word	0x08004431
 80043f8:	08004431 	.word	0x08004431
 80043fc:	08004431 	.word	0x08004431
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004400:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004404:	3308      	adds	r3, #8
 8004406:	4618      	mov	r0, r3
 8004408:	f004 feda 	bl	80091c0 <RCCEx_PLL2_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004412:	e00e      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004414:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004418:	3330      	adds	r3, #48	@ 0x30
 800441a:	4618      	mov	r0, r3
 800441c:	f004 ff68 	bl	80092f0 <RCCEx_PLL3_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004426:	e004      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800442e:	e000      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004432:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10c      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800443a:	4ba9      	ldr	r3, [pc, #676]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800443c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004440:	f023 0107 	bic.w	r1, r3, #7
 8004444:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444a:	4aa5      	ldr	r2, [pc, #660]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800444c:	430b      	orrs	r3, r1
 800444e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004452:	e003      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004454:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004458:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800445c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f002 0a02 	and.w	sl, r2, #2
 8004468:	f04f 0b00 	mov.w	fp, #0
 800446c:	ea5a 030b 	orrs.w	r3, sl, fp
 8004470:	f000 8088 	beq.w	8004584 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004474:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800447a:	2b28      	cmp	r3, #40	@ 0x28
 800447c:	d868      	bhi.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800447e:	a201      	add	r2, pc, #4	@ (adr r2, 8004484 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004484:	08004559 	.word	0x08004559
 8004488:	08004551 	.word	0x08004551
 800448c:	08004551 	.word	0x08004551
 8004490:	08004551 	.word	0x08004551
 8004494:	08004551 	.word	0x08004551
 8004498:	08004551 	.word	0x08004551
 800449c:	08004551 	.word	0x08004551
 80044a0:	08004551 	.word	0x08004551
 80044a4:	08004529 	.word	0x08004529
 80044a8:	08004551 	.word	0x08004551
 80044ac:	08004551 	.word	0x08004551
 80044b0:	08004551 	.word	0x08004551
 80044b4:	08004551 	.word	0x08004551
 80044b8:	08004551 	.word	0x08004551
 80044bc:	08004551 	.word	0x08004551
 80044c0:	08004551 	.word	0x08004551
 80044c4:	0800453d 	.word	0x0800453d
 80044c8:	08004551 	.word	0x08004551
 80044cc:	08004551 	.word	0x08004551
 80044d0:	08004551 	.word	0x08004551
 80044d4:	08004551 	.word	0x08004551
 80044d8:	08004551 	.word	0x08004551
 80044dc:	08004551 	.word	0x08004551
 80044e0:	08004551 	.word	0x08004551
 80044e4:	08004559 	.word	0x08004559
 80044e8:	08004551 	.word	0x08004551
 80044ec:	08004551 	.word	0x08004551
 80044f0:	08004551 	.word	0x08004551
 80044f4:	08004551 	.word	0x08004551
 80044f8:	08004551 	.word	0x08004551
 80044fc:	08004551 	.word	0x08004551
 8004500:	08004551 	.word	0x08004551
 8004504:	08004559 	.word	0x08004559
 8004508:	08004551 	.word	0x08004551
 800450c:	08004551 	.word	0x08004551
 8004510:	08004551 	.word	0x08004551
 8004514:	08004551 	.word	0x08004551
 8004518:	08004551 	.word	0x08004551
 800451c:	08004551 	.word	0x08004551
 8004520:	08004551 	.word	0x08004551
 8004524:	08004559 	.word	0x08004559
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004528:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800452c:	3308      	adds	r3, #8
 800452e:	4618      	mov	r0, r3
 8004530:	f004 fe46 	bl	80091c0 <RCCEx_PLL2_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800453a:	e00e      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800453c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004540:	3330      	adds	r3, #48	@ 0x30
 8004542:	4618      	mov	r0, r3
 8004544:	f004 fed4 	bl	80092f0 <RCCEx_PLL3_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800454e:	e004      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004556:	e000      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800455a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10c      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004562:	4b5f      	ldr	r3, [pc, #380]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004564:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004568:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800456c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004572:	4a5b      	ldr	r2, [pc, #364]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004574:	430b      	orrs	r3, r1
 8004576:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800457a:	e003      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004580:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004584:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458c:	f002 0304 	and.w	r3, r2, #4
 8004590:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004594:	2300      	movs	r3, #0
 8004596:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800459a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800459e:	460b      	mov	r3, r1
 80045a0:	4313      	orrs	r3, r2
 80045a2:	d04e      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80045a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045aa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80045ae:	d02c      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80045b0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80045b4:	d825      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80045b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ba:	d028      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80045bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045c0:	d81f      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80045c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80045c4:	d025      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80045c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80045c8:	d81b      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80045ca:	2b80      	cmp	r3, #128	@ 0x80
 80045cc:	d00f      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x272>
 80045ce:	2b80      	cmp	r3, #128	@ 0x80
 80045d0:	d817      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01f      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80045d6:	2b40      	cmp	r3, #64	@ 0x40
 80045d8:	d113      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045de:	3308      	adds	r3, #8
 80045e0:	4618      	mov	r0, r3
 80045e2:	f004 fded 	bl	80091c0 <RCCEx_PLL2_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80045ec:	e014      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045f2:	3330      	adds	r3, #48	@ 0x30
 80045f4:	4618      	mov	r0, r3
 80045f6:	f004 fe7b 	bl	80092f0 <RCCEx_PLL3_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004600:	e00a      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004608:	e006      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800460a:	bf00      	nop
 800460c:	e004      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800460e:	bf00      	nop
 8004610:	e002      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004612:	bf00      	nop
 8004614:	e000      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004618:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10c      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004620:	4b2f      	ldr	r3, [pc, #188]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004622:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004626:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800462a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800462e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004630:	4a2b      	ldr	r2, [pc, #172]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004632:	430b      	orrs	r3, r1
 8004634:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004638:	e003      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800463e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004642:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	f002 0308 	and.w	r3, r2, #8
 800464e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004652:	2300      	movs	r3, #0
 8004654:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8004658:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800465c:	460b      	mov	r3, r1
 800465e:	4313      	orrs	r3, r2
 8004660:	d056      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004662:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004666:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004668:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800466c:	d031      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800466e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004672:	d82a      	bhi.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004678:	d02d      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800467a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800467e:	d824      	bhi.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004680:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004684:	d029      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004686:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800468a:	d81e      	bhi.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800468c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004690:	d011      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004696:	d818      	bhi.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d023      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800469c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a0:	d113      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046a6:	3308      	adds	r3, #8
 80046a8:	4618      	mov	r0, r3
 80046aa:	f004 fd89 	bl	80091c0 <RCCEx_PLL2_Config>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80046b4:	e017      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046ba:	3330      	adds	r3, #48	@ 0x30
 80046bc:	4618      	mov	r0, r3
 80046be:	f004 fe17 	bl	80092f0 <RCCEx_PLL3_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80046c8:	e00d      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80046d0:	e009      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80046d2:	bf00      	nop
 80046d4:	e007      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80046d6:	bf00      	nop
 80046d8:	e005      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80046da:	bf00      	nop
 80046dc:	e003      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80046de:	bf00      	nop
 80046e0:	44020c00 	.word	0x44020c00
        break;
 80046e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10c      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80046ee:	4bbb      	ldr	r3, [pc, #748]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80046f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046f4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80046f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046fe:	4ab7      	ldr	r2, [pc, #732]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004700:	430b      	orrs	r3, r1
 8004702:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004706:	e003      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004708:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800470c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004710:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	f002 0310 	and.w	r3, r2, #16
 800471c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004720:	2300      	movs	r3, #0
 8004722:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004726:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800472a:	460b      	mov	r3, r1
 800472c:	4313      	orrs	r3, r2
 800472e:	d053      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004730:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004736:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800473a:	d031      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800473c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004740:	d82a      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004742:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004746:	d02d      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004748:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800474c:	d824      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800474e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004752:	d029      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004754:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004758:	d81e      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800475a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800475e:	d011      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004764:	d818      	bhi.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d020      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x430>
 800476a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800476e:	d113      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004770:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004774:	3308      	adds	r3, #8
 8004776:	4618      	mov	r0, r3
 8004778:	f004 fd22 	bl	80091c0 <RCCEx_PLL2_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004782:	e014      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004784:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004788:	3330      	adds	r3, #48	@ 0x30
 800478a:	4618      	mov	r0, r3
 800478c:	f004 fdb0 	bl	80092f0 <RCCEx_PLL3_Config>
 8004790:	4603      	mov	r3, r0
 8004792:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004796:	e00a      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800479e:	e006      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80047a0:	bf00      	nop
 80047a2:	e004      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80047a4:	bf00      	nop
 80047a6:	e002      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80047a8:	bf00      	nop
 80047aa:	e000      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80047ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80047b6:	4b89      	ldr	r3, [pc, #548]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80047b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80047bc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80047c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047c6:	4a85      	ldr	r2, [pc, #532]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80047c8:	430b      	orrs	r3, r1
 80047ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80047ce:	e003      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	f002 0320 	and.w	r3, r2, #32
 80047e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80047e8:	2300      	movs	r3, #0
 80047ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80047ee:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80047f2:	460b      	mov	r3, r1
 80047f4:	4313      	orrs	r3, r2
 80047f6:	d053      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80047f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fe:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004802:	d031      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004804:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004808:	d82a      	bhi.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800480a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800480e:	d02d      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004810:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004814:	d824      	bhi.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004816:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800481a:	d029      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800481c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004820:	d81e      	bhi.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004826:	d011      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800482c:	d818      	bhi.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d020      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004836:	d113      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004838:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800483c:	3308      	adds	r3, #8
 800483e:	4618      	mov	r0, r3
 8004840:	f004 fcbe 	bl	80091c0 <RCCEx_PLL2_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800484a:	e014      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800484c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004850:	3330      	adds	r3, #48	@ 0x30
 8004852:	4618      	mov	r0, r3
 8004854:	f004 fd4c 	bl	80092f0 <RCCEx_PLL3_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800485e:	e00a      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004866:	e006      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004868:	bf00      	nop
 800486a:	e004      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800486c:	bf00      	nop
 800486e:	e002      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004870:	bf00      	nop
 8004872:	e000      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004876:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10c      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800487e:	4b57      	ldr	r3, [pc, #348]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004880:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004884:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004888:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800488c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488e:	4a53      	ldr	r2, [pc, #332]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004890:	430b      	orrs	r3, r1
 8004892:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004896:	e003      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004898:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800489c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80048ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80048b0:	2300      	movs	r3, #0
 80048b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80048b6:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80048ba:	460b      	mov	r3, r1
 80048bc:	4313      	orrs	r3, r2
 80048be:	d053      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80048c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048c6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80048ca:	d031      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80048cc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80048d0:	d82a      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80048d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048d6:	d02d      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80048d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048dc:	d824      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80048de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80048e2:	d029      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80048e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80048e8:	d81e      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80048ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80048ee:	d011      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80048f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80048f4:	d818      	bhi.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d020      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80048fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048fe:	d113      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004900:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004904:	3308      	adds	r3, #8
 8004906:	4618      	mov	r0, r3
 8004908:	f004 fc5a 	bl	80091c0 <RCCEx_PLL2_Config>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004912:	e014      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004914:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004918:	3330      	adds	r3, #48	@ 0x30
 800491a:	4618      	mov	r0, r3
 800491c:	f004 fce8 	bl	80092f0 <RCCEx_PLL3_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004926:	e00a      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800492e:	e006      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004930:	bf00      	nop
 8004932:	e004      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004934:	bf00      	nop
 8004936:	e002      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004938:	bf00      	nop
 800493a:	e000      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800493c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800493e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10c      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8004946:	4b25      	ldr	r3, [pc, #148]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004948:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800494c:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8004950:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004956:	4a21      	ldr	r2, [pc, #132]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004958:	430b      	orrs	r3, r1
 800495a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800495e:	e003      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004960:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004964:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004968:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004974:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004978:	2300      	movs	r3, #0
 800497a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800497e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8004982:	460b      	mov	r3, r1
 8004984:	4313      	orrs	r3, r2
 8004986:	d055      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8004988:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800498c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800498e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004992:	d033      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x680>
 8004994:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004998:	d82c      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800499a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800499e:	d02f      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80049a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049a4:	d826      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80049a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049aa:	d02b      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80049ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049b0:	d820      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80049b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049b6:	d013      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80049b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049bc:	d81a      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d022      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80049c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049c6:	d115      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049cc:	3308      	adds	r3, #8
 80049ce:	4618      	mov	r0, r3
 80049d0:	f004 fbf6 	bl	80091c0 <RCCEx_PLL2_Config>
 80049d4:	4603      	mov	r3, r0
 80049d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80049da:	e016      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80049dc:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80049e4:	3330      	adds	r3, #48	@ 0x30
 80049e6:	4618      	mov	r0, r3
 80049e8:	f004 fc82 	bl	80092f0 <RCCEx_PLL3_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80049f2:	e00a      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80049fa:	e006      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80049fc:	bf00      	nop
 80049fe:	e004      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004a00:	bf00      	nop
 8004a02:	e002      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004a04:	bf00      	nop
 8004a06:	e000      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10c      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8004a12:	4bbb      	ldr	r3, [pc, #748]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004a14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a18:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004a1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a22:	4ab7      	ldr	r2, [pc, #732]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004a24:	430b      	orrs	r3, r1
 8004a26:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004a2a:	e003      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a30:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004a34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004a40:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004a44:	2300      	movs	r3, #0
 8004a46:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004a4a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4313      	orrs	r3, r2
 8004a52:	d053      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8004a54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a5a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004a5e:	d031      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8004a60:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004a64:	d82a      	bhi.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004a66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a6a:	d02d      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8004a6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a70:	d824      	bhi.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004a72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a76:	d029      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x750>
 8004a78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a7c:	d81e      	bhi.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004a7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a82:	d011      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8004a84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a88:	d818      	bhi.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d020      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8004a8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a92:	d113      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a98:	3308      	adds	r3, #8
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f004 fb90 	bl	80091c0 <RCCEx_PLL2_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004aa6:	e014      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004aac:	3330      	adds	r3, #48	@ 0x30
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f004 fc1e 	bl	80092f0 <RCCEx_PLL3_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ac2:	e006      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004ac4:	bf00      	nop
 8004ac6:	e004      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004ac8:	bf00      	nop
 8004aca:	e002      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004acc:	bf00      	nop
 8004ace:	e000      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8004ada:	4b89      	ldr	r3, [pc, #548]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ae0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aea:	4a85      	ldr	r2, [pc, #532]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004aec:	430b      	orrs	r3, r1
 8004aee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004af2:	e003      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004af8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b04:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004b08:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004b12:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004b16:	460b      	mov	r3, r1
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	d055      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004b1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b24:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8004b28:	d031      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x812>
 8004b2a:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8004b2e:	d82a      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004b30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b34:	d02d      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004b36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b3a:	d824      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004b3c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004b40:	d029      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004b42:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004b46:	d81e      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004b48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b4c:	d011      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8004b4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b52:	d818      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d020      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8004b58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b5c:	d113      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b62:	3308      	adds	r3, #8
 8004b64:	4618      	mov	r0, r3
 8004b66:	f004 fb2b 	bl	80091c0 <RCCEx_PLL2_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004b70:	e014      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b76:	3330      	adds	r3, #48	@ 0x30
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f004 fbb9 	bl	80092f0 <RCCEx_PLL3_Config>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8004b84:	e00a      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b8c:	e006      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004b8e:	bf00      	nop
 8004b90:	e004      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004b92:	bf00      	nop
 8004b94:	e002      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004b96:	bf00      	nop
 8004b98:	e000      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8004b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b9c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10d      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8004ba4:	4b56      	ldr	r3, [pc, #344]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004ba6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004baa:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8004bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bb6:	4a52      	ldr	r2, [pc, #328]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004bbe:	e003      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bc4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8004bc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004bd4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004bde:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004be2:	460b      	mov	r3, r1
 8004be4:	4313      	orrs	r3, r2
 8004be6:	d044      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8004be8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	d823      	bhi.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c45 	.word	0x08004c45
 8004c00:	08004c15 	.word	0x08004c15
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004c45 	.word	0x08004c45
 8004c0c:	08004c45 	.word	0x08004c45
 8004c10:	08004c45 	.word	0x08004c45
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c18:	3308      	adds	r3, #8
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f004 fad0 	bl	80091c0 <RCCEx_PLL2_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004c26:	e00e      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c2c:	3330      	adds	r3, #48	@ 0x30
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f004 fb5e 	bl	80092f0 <RCCEx_PLL3_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8004c3a:	e004      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004c42:	e000      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8004c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10d      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8004c4e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004c50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004c54:	f023 0107 	bic.w	r1, r3, #7
 8004c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c60:	4a27      	ldr	r2, [pc, #156]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004c62:	430b      	orrs	r3, r1
 8004c64:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004c68:	e003      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c6e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8004c72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004c7e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004c82:	2300      	movs	r3, #0
 8004c84:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c88:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	d04f      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8004c92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9a:	2b50      	cmp	r3, #80	@ 0x50
 8004c9c:	d029      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004c9e:	2b50      	cmp	r3, #80	@ 0x50
 8004ca0:	d823      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004ca2:	2b40      	cmp	r3, #64	@ 0x40
 8004ca4:	d027      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8004ca6:	2b40      	cmp	r3, #64	@ 0x40
 8004ca8:	d81f      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004caa:	2b30      	cmp	r3, #48	@ 0x30
 8004cac:	d025      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8004cae:	2b30      	cmp	r3, #48	@ 0x30
 8004cb0:	d81b      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004cb2:	2b20      	cmp	r3, #32
 8004cb4:	d00f      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	d817      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d022      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004cbe:	2b10      	cmp	r3, #16
 8004cc0:	d113      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f004 fa79 	bl	80091c0 <RCCEx_PLL2_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004cd4:	e017      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cda:	3330      	adds	r3, #48	@ 0x30
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f004 fb07 	bl	80092f0 <RCCEx_PLL3_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004ce8:	e00d      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004cf0:	e009      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004cf2:	bf00      	nop
 8004cf4:	e007      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004cf6:	bf00      	nop
 8004cf8:	e005      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004cfa:	bf00      	nop
 8004cfc:	e003      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8004cfe:	bf00      	nop
 8004d00:	44020c00 	.word	0x44020c00
        break;
 8004d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10d      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8004d0e:	4baf      	ldr	r3, [pc, #700]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004d10:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d14:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8004d18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d20:	4aaa      	ldr	r2, [pc, #680]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004d22:	430b      	orrs	r3, r1
 8004d24:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004d28:	e003      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d2e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004d3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004d42:	2300      	movs	r3, #0
 8004d44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004d48:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	d055      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004d52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d5a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d5e:	d031      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8004d60:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004d64:	d82a      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004d66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d6a:	d02d      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004d6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d70:	d824      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004d72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d76:	d029      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8004d78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d7c:	d81e      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004d7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d82:	d011      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8004d84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d88:	d818      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d020      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8004d8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d92:	d113      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d98:	3308      	adds	r3, #8
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f004 fa10 	bl	80091c0 <RCCEx_PLL2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004da6:	e014      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004da8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dac:	3330      	adds	r3, #48	@ 0x30
 8004dae:	4618      	mov	r0, r3
 8004db0:	f004 fa9e 	bl	80092f0 <RCCEx_PLL3_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004dba:	e00a      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004dc2:	e006      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004dc4:	bf00      	nop
 8004dc6:	e004      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004dc8:	bf00      	nop
 8004dca:	e002      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004dcc:	bf00      	nop
 8004dce:	e000      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dd2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10d      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004dda:	4b7c      	ldr	r3, [pc, #496]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004de0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004de4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dec:	4a77      	ldr	r2, [pc, #476]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004dee:	430b      	orrs	r3, r1
 8004df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004df4:	e003      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004dfa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e06:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004e14:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	d03d      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004e1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e2a:	d01b      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004e2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e30:	d814      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004e32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e36:	d017      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8004e38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e3c:	d80e      	bhi.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d014      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e46:	d109      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e4c:	3330      	adds	r3, #48	@ 0x30
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f004 fa4e 	bl	80092f0 <RCCEx_PLL3_Config>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004e5a:	e008      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e62:	e004      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004e64:	bf00      	nop
 8004e66:	e002      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004e68:	bf00      	nop
 8004e6a:	e000      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10d      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004e76:	4b55      	ldr	r3, [pc, #340]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004e78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e7c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004e80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e88:	4a50      	ldr	r2, [pc, #320]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004e90:	e003      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e96:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004ea6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004eb0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	d03d      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004eba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ec2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ec6:	d01b      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8004ec8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ecc:	d814      	bhi.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004ece:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ed2:	d017      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004ed4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ed8:	d80e      	bhi.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d014      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004ede:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ee2:	d109      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ee8:	3330      	adds	r3, #48	@ 0x30
 8004eea:	4618      	mov	r0, r3
 8004eec:	f004 fa00 	bl	80092f0 <RCCEx_PLL3_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004ef6:	e008      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004efe:	e004      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004f00:	bf00      	nop
 8004f02:	e002      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004f04:	bf00      	nop
 8004f06:	e000      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10d      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004f12:	4b2e      	ldr	r3, [pc, #184]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004f14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f18:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004f1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f24:	4a29      	ldr	r2, [pc, #164]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004f26:	430b      	orrs	r3, r1
 8004f28:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f2c:	e003      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f32:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004f42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f46:	2300      	movs	r3, #0
 8004f48:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004f4c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f50:	460b      	mov	r3, r1
 8004f52:	4313      	orrs	r3, r2
 8004f54:	d040      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004f56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f62:	d01b      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8004f64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f68:	d814      	bhi.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004f6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f6e:	d017      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004f70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f74:	d80e      	bhi.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d014      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f7e:	d109      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f84:	3330      	adds	r3, #48	@ 0x30
 8004f86:	4618      	mov	r0, r3
 8004f88:	f004 f9b2 	bl	80092f0 <RCCEx_PLL3_Config>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004f92:	e008      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f9a:	e004      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004f9c:	bf00      	nop
 8004f9e:	e002      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004fa0:	bf00      	nop
 8004fa2:	e000      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fa6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d110      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004fae:	4b07      	ldr	r3, [pc, #28]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004fb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fb4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fc0:	4a02      	ldr	r2, [pc, #8]	@ (8004fcc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004fc2:	430b      	orrs	r3, r1
 8004fc4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004fc8:	e006      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004fca:	bf00      	nop
 8004fcc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fd4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8004fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004fee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	d03d      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8004ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005000:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005004:	d01b      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005006:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800500a:	d814      	bhi.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800500c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005010:	d017      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8005012:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005016:	d80e      	bhi.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d014      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 800501c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005020:	d109      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005022:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005026:	3330      	adds	r3, #48	@ 0x30
 8005028:	4618      	mov	r0, r3
 800502a:	f004 f961 	bl	80092f0 <RCCEx_PLL3_Config>
 800502e:	4603      	mov	r3, r0
 8005030:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8005034:	e008      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800503c:	e004      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800503e:	bf00      	nop
 8005040:	e002      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005042:	bf00      	nop
 8005044:	e000      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005046:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005048:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10d      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005050:	4bbe      	ldr	r3, [pc, #760]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005052:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005056:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800505a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800505e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005062:	4aba      	ldr	r2, [pc, #744]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005064:	430b      	orrs	r3, r1
 8005066:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800506a:	e003      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005070:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005074:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005080:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005084:	2300      	movs	r3, #0
 8005086:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800508a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800508e:	460b      	mov	r3, r1
 8005090:	4313      	orrs	r3, r2
 8005092:	d035      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005094:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005098:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800509c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050a0:	d015      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80050a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050a6:	d80e      	bhi.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d012      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80050ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050b0:	d109      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050b6:	3330      	adds	r3, #48	@ 0x30
 80050b8:	4618      	mov	r0, r3
 80050ba:	f004 f919 	bl	80092f0 <RCCEx_PLL3_Config>
 80050be:	4603      	mov	r3, r0
 80050c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80050c4:	e006      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80050cc:	e002      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80050ce:	bf00      	nop
 80050d0:	e000      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80050d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10d      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80050dc:	4b9b      	ldr	r3, [pc, #620]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80050de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050e2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80050e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80050ee:	4a97      	ldr	r2, [pc, #604]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80050f0:	430b      	orrs	r3, r1
 80050f2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80050f6:	e003      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050fc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005100:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	2100      	movs	r1, #0
 800510a:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800510e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005112:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005116:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800511a:	460b      	mov	r3, r1
 800511c:	4313      	orrs	r3, r2
 800511e:	d00e      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005120:	4b8a      	ldr	r3, [pc, #552]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	4a89      	ldr	r2, [pc, #548]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005126:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800512a:	61d3      	str	r3, [r2, #28]
 800512c:	4b87      	ldr	r3, [pc, #540]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800512e:	69d9      	ldr	r1, [r3, #28]
 8005130:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005134:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005138:	4a84      	ldr	r2, [pc, #528]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800513a:	430b      	orrs	r3, r1
 800513c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800513e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005146:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800514a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800514e:	2300      	movs	r3, #0
 8005150:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005154:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005158:	460b      	mov	r3, r1
 800515a:	4313      	orrs	r3, r2
 800515c:	d055      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800515e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005162:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005166:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800516a:	d031      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800516c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005170:	d82a      	bhi.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005176:	d02d      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800517c:	d824      	bhi.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800517e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005182:	d029      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005184:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005188:	d81e      	bhi.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800518a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800518e:	d011      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005194:	d818      	bhi.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005196:	2b00      	cmp	r3, #0
 8005198:	d020      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800519a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800519e:	d113      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051a4:	3308      	adds	r3, #8
 80051a6:	4618      	mov	r0, r3
 80051a8:	f004 f80a 	bl	80091c0 <RCCEx_PLL2_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80051b2:	e014      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051b8:	3330      	adds	r3, #48	@ 0x30
 80051ba:	4618      	mov	r0, r3
 80051bc:	f004 f898 	bl	80092f0 <RCCEx_PLL3_Config>
 80051c0:	4603      	mov	r3, r0
 80051c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80051c6:	e00a      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80051ce:	e006      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80051d0:	bf00      	nop
 80051d2:	e004      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80051d4:	bf00      	nop
 80051d6:	e002      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80051d8:	bf00      	nop
 80051da:	e000      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80051dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10d      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80051e6:	4b59      	ldr	r3, [pc, #356]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80051e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80051ec:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80051f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80051f8:	4a54      	ldr	r2, [pc, #336]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80051fa:	430b      	orrs	r3, r1
 80051fc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005200:	e003      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005202:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005206:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800520a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005216:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800521a:	2300      	movs	r3, #0
 800521c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005220:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005224:	460b      	mov	r3, r1
 8005226:	4313      	orrs	r3, r2
 8005228:	d055      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800522a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800522e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005232:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005236:	d031      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8005238:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800523c:	d82a      	bhi.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800523e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005242:	d02d      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8005244:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005248:	d824      	bhi.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800524a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800524e:	d029      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8005250:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005254:	d81e      	bhi.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800525a:	d011      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800525c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005260:	d818      	bhi.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d020      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800526a:	d113      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800526c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005270:	3308      	adds	r3, #8
 8005272:	4618      	mov	r0, r3
 8005274:	f003 ffa4 	bl	80091c0 <RCCEx_PLL2_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800527e:	e014      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005280:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005284:	3330      	adds	r3, #48	@ 0x30
 8005286:	4618      	mov	r0, r3
 8005288:	f004 f832 	bl	80092f0 <RCCEx_PLL3_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005292:	e00a      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800529a:	e006      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800529c:	bf00      	nop
 800529e:	e004      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80052a0:	bf00      	nop
 80052a2:	e002      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80052a4:	bf00      	nop
 80052a6:	e000      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80052a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10d      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80052b2:	4b26      	ldr	r3, [pc, #152]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80052b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80052b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80052bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80052c4:	4a21      	ldr	r2, [pc, #132]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80052c6:	430b      	orrs	r3, r1
 80052c8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80052cc:	e003      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80052d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	2100      	movs	r1, #0
 80052e0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052f0:	460b      	mov	r3, r1
 80052f2:	4313      	orrs	r3, r2
 80052f4:	d057      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80052f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80052fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005302:	d033      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005308:	d82c      	bhi.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800530a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800530e:	d02f      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005310:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005314:	d826      	bhi.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005316:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800531a:	d02b      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800531c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005320:	d820      	bhi.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005322:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005326:	d013      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005328:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800532c:	d81a      	bhi.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d022      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8005332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005336:	d115      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005338:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800533c:	3308      	adds	r3, #8
 800533e:	4618      	mov	r0, r3
 8005340:	f003 ff3e 	bl	80091c0 <RCCEx_PLL2_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800534a:	e016      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800534c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005350:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005354:	3330      	adds	r3, #48	@ 0x30
 8005356:	4618      	mov	r0, r3
 8005358:	f003 ffca 	bl	80092f0 <RCCEx_PLL3_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005362:	e00a      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800536a:	e006      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800536c:	bf00      	nop
 800536e:	e004      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005370:	bf00      	nop
 8005372:	e002      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005374:	bf00      	nop
 8005376:	e000      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800537a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10d      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8005382:	4bbb      	ldr	r3, [pc, #748]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005384:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005388:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800538c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005390:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005394:	4ab6      	ldr	r2, [pc, #728]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005396:	430b      	orrs	r3, r1
 8005398:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800539c:	e003      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053a2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80053a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	2100      	movs	r1, #0
 80053b0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80053b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4313      	orrs	r3, r2
 80053c4:	d055      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80053c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053ce:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80053d2:	d031      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80053d4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80053d8:	d82a      	bhi.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80053da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053de:	d02d      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80053e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053e4:	d824      	bhi.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80053e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053ea:	d029      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80053ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053f0:	d81e      	bhi.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80053f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053f6:	d011      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80053f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053fc:	d818      	bhi.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d020      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8005402:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005406:	d113      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005408:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800540c:	3308      	adds	r3, #8
 800540e:	4618      	mov	r0, r3
 8005410:	f003 fed6 	bl	80091c0 <RCCEx_PLL2_Config>
 8005414:	4603      	mov	r3, r0
 8005416:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800541a:	e014      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800541c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005420:	3330      	adds	r3, #48	@ 0x30
 8005422:	4618      	mov	r0, r3
 8005424:	f003 ff64 	bl	80092f0 <RCCEx_PLL3_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800542e:	e00a      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005436:	e006      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005438:	bf00      	nop
 800543a:	e004      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800543c:	bf00      	nop
 800543e:	e002      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005440:	bf00      	nop
 8005442:	e000      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005446:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10d      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800544e:	4b88      	ldr	r3, [pc, #544]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005450:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005454:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8005458:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800545c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005460:	4a83      	ldr	r2, [pc, #524]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005462:	430b      	orrs	r3, r1
 8005464:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005468:	e003      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800546e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8005472:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	2100      	movs	r1, #0
 800547c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8005480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005484:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005488:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800548c:	460b      	mov	r3, r1
 800548e:	4313      	orrs	r3, r2
 8005490:	d055      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8005492:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005496:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800549a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800549e:	d031      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80054a0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80054a4:	d82a      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80054a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054aa:	d02d      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80054ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054b0:	d824      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80054b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054b6:	d029      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80054b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054bc:	d81e      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80054be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054c2:	d011      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80054c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054c8:	d818      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d020      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80054ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054d2:	d113      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054d8:	3308      	adds	r3, #8
 80054da:	4618      	mov	r0, r3
 80054dc:	f003 fe70 	bl	80091c0 <RCCEx_PLL2_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80054e6:	e014      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054ec:	3330      	adds	r3, #48	@ 0x30
 80054ee:	4618      	mov	r0, r3
 80054f0:	f003 fefe 	bl	80092f0 <RCCEx_PLL3_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80054fa:	e00a      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005502:	e006      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005504:	bf00      	nop
 8005506:	e004      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005508:	bf00      	nop
 800550a:	e002      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800550c:	bf00      	nop
 800550e:	e000      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005512:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10d      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800551a:	4b55      	ldr	r3, [pc, #340]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800551c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005520:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005524:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005528:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800552c:	4a50      	ldr	r2, [pc, #320]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800552e:	430b      	orrs	r3, r1
 8005530:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005534:	e003      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005536:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800553a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800553e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	2100      	movs	r1, #0
 8005548:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800554c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005550:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005554:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005558:	460b      	mov	r3, r1
 800555a:	4313      	orrs	r3, r2
 800555c:	d055      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800555e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005562:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005566:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800556a:	d031      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800556c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005570:	d82a      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005576:	d02d      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8005578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800557c:	d824      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800557e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005582:	d029      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005584:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005588:	d81e      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800558a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800558e:	d011      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8005590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005594:	d818      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d020      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800559a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800559e:	d113      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055a4:	3308      	adds	r3, #8
 80055a6:	4618      	mov	r0, r3
 80055a8:	f003 fe0a 	bl	80091c0 <RCCEx_PLL2_Config>
 80055ac:	4603      	mov	r3, r0
 80055ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80055b2:	e014      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055b8:	3330      	adds	r3, #48	@ 0x30
 80055ba:	4618      	mov	r0, r3
 80055bc:	f003 fe98 	bl	80092f0 <RCCEx_PLL3_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80055c6:	e00a      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80055ce:	e006      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80055d0:	bf00      	nop
 80055d2:	e004      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80055d4:	bf00      	nop
 80055d6:	e002      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80055d8:	bf00      	nop
 80055da:	e000      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80055dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10d      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80055e6:	4b22      	ldr	r3, [pc, #136]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80055e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80055ec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80055f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80055f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80055fa:	430b      	orrs	r3, r1
 80055fc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005600:	e003      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005602:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005606:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800560a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005616:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800561a:	2300      	movs	r3, #0
 800561c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005620:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005624:	460b      	mov	r3, r1
 8005626:	4313      	orrs	r3, r2
 8005628:	d055      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800562a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800562e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005632:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005636:	d035      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8005638:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800563c:	d82e      	bhi.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800563e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005642:	d031      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8005644:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005648:	d828      	bhi.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800564a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800564e:	d01b      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8005650:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005654:	d822      	bhi.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800565a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800565e:	d009      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8005660:	e01c      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005662:	4b03      	ldr	r3, [pc, #12]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005666:	4a02      	ldr	r2, [pc, #8]	@ (8005670 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800566c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800566e:	e01c      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8005670:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005674:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005678:	3308      	adds	r3, #8
 800567a:	4618      	mov	r0, r3
 800567c:	f003 fda0 	bl	80091c0 <RCCEx_PLL2_Config>
 8005680:	4603      	mov	r3, r0
 8005682:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005686:	e010      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005688:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800568c:	3330      	adds	r3, #48	@ 0x30
 800568e:	4618      	mov	r0, r3
 8005690:	f003 fe2e 	bl	80092f0 <RCCEx_PLL3_Config>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800569a:	e006      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80056a2:	e002      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80056a4:	bf00      	nop
 80056a6:	e000      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80056a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10d      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80056b2:	4bc3      	ldr	r3, [pc, #780]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80056b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80056bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80056c4:	4abe      	ldr	r2, [pc, #760]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80056c6:	430b      	orrs	r3, r1
 80056c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80056cc:	e003      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80056d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80056e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056e6:	2300      	movs	r3, #0
 80056e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056ec:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80056f0:	460b      	mov	r3, r1
 80056f2:	4313      	orrs	r3, r2
 80056f4:	d051      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80056f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80056fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005702:	d033      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005704:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005708:	d82c      	bhi.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800570a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800570e:	d02d      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005710:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005714:	d826      	bhi.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800571a:	d019      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800571c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005720:	d820      	bhi.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005726:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800572a:	d007      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800572c:	e01a      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800572e:	4ba4      	ldr	r3, [pc, #656]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005732:	4aa3      	ldr	r2, [pc, #652]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005738:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800573a:	e018      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800573c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005740:	3308      	adds	r3, #8
 8005742:	4618      	mov	r0, r3
 8005744:	f003 fd3c 	bl	80091c0 <RCCEx_PLL2_Config>
 8005748:	4603      	mov	r3, r0
 800574a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800574e:	e00e      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005750:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005754:	3330      	adds	r3, #48	@ 0x30
 8005756:	4618      	mov	r0, r3
 8005758:	f003 fdca 	bl	80092f0 <RCCEx_PLL3_Config>
 800575c:	4603      	mov	r3, r0
 800575e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005762:	e004      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800576a:	e000      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800576c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800576e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10d      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005776:	4b92      	ldr	r3, [pc, #584]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005778:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800577c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8005780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005784:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005788:	4a8d      	ldr	r2, [pc, #564]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800578a:	430b      	orrs	r3, r1
 800578c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005790:	e003      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005792:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005796:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800579a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80057a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057a8:	2300      	movs	r3, #0
 80057aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80057b0:	460b      	mov	r3, r1
 80057b2:	4313      	orrs	r3, r2
 80057b4:	d032      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80057b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80057be:	2b05      	cmp	r3, #5
 80057c0:	d80f      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d211      	bcs.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d911      	bls.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d109      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057d2:	3308      	adds	r3, #8
 80057d4:	4618      	mov	r0, r3
 80057d6:	f003 fcf3 	bl	80091c0 <RCCEx_PLL2_Config>
 80057da:	4603      	mov	r3, r0
 80057dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80057e0:	e006      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80057e8:	e002      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80057ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10d      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80057f8:	4b71      	ldr	r3, [pc, #452]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80057fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057fe:	f023 0107 	bic.w	r1, r3, #7
 8005802:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005806:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800580a:	4a6d      	ldr	r2, [pc, #436]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800580c:	430b      	orrs	r3, r1
 800580e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005812:	e003      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005814:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005818:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800581c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	2100      	movs	r1, #0
 8005826:	6739      	str	r1, [r7, #112]	@ 0x70
 8005828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800582c:	677b      	str	r3, [r7, #116]	@ 0x74
 800582e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005832:	460b      	mov	r3, r1
 8005834:	4313      	orrs	r3, r2
 8005836:	d024      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005838:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800583c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8005844:	2b08      	cmp	r3, #8
 8005846:	d005      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800584e:	e002      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005850:	bf00      	nop
 8005852:	e000      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005856:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10d      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800585e:	4b58      	ldr	r3, [pc, #352]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005864:	f023 0108 	bic.w	r1, r3, #8
 8005868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800586c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005870:	4a53      	ldr	r2, [pc, #332]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005872:	430b      	orrs	r3, r1
 8005874:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005878:	e003      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800587e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005882:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800588e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005890:	2300      	movs	r3, #0
 8005892:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005894:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005898:	460b      	mov	r3, r1
 800589a:	4313      	orrs	r3, r2
 800589c:	f000 80b9 	beq.w	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80058a0:	4b48      	ldr	r3, [pc, #288]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80058a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a4:	4a47      	ldr	r2, [pc, #284]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80058a6:	f043 0301 	orr.w	r3, r3, #1
 80058aa:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058ac:	f7fb fdac 	bl	8001408 <HAL_GetTick>
 80058b0:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80058b4:	e00b      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b6:	f7fb fda7 	bl	8001408 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d903      	bls.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80058cc:	e005      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80058ce:	4b3d      	ldr	r3, [pc, #244]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0ed      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80058da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f040 8093 	bne.w	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058e4:	4b36      	ldr	r3, [pc, #216]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80058e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ee:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80058f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d023      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80058fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058fe:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8005902:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005906:	4293      	cmp	r3, r2
 8005908:	d01b      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800590a:	4b2d      	ldr	r3, [pc, #180]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800590c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005914:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005918:	4b29      	ldr	r3, [pc, #164]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800591a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800591e:	4a28      	ldr	r2, [pc, #160]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005924:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005928:	4b25      	ldr	r3, [pc, #148]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800592a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800592e:	4a24      	ldr	r2, [pc, #144]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005934:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005938:	4a21      	ldr	r2, [pc, #132]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800593a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800593e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005942:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d019      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594e:	f7fb fd5b 	bl	8001408 <HAL_GetTick>
 8005952:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005956:	e00d      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005958:	f7fb fd56 	bl	8001408 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8005962:	1ad2      	subs	r2, r2, r3
 8005964:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005968:	429a      	cmp	r2, r3
 800596a:	d903      	bls.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8005972:	e006      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005974:	4b12      	ldr	r3, [pc, #72]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0ea      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8005982:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005986:	2b00      	cmp	r3, #0
 8005988:	d13a      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800598a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800598e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8005992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005996:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800599a:	d115      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800599c:	4b08      	ldr	r3, [pc, #32]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80059a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059a8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80059ac:	091b      	lsrs	r3, r3, #4
 80059ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80059b2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80059b6:	4a02      	ldr	r2, [pc, #8]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80059b8:	430b      	orrs	r3, r1
 80059ba:	61d3      	str	r3, [r2, #28]
 80059bc:	e00a      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80059be:	bf00      	nop
 80059c0:	44020c00 	.word	0x44020c00
 80059c4:	44020800 	.word	0x44020800
 80059c8:	4b9f      	ldr	r3, [pc, #636]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	4a9e      	ldr	r2, [pc, #632]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80059ce:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80059d2:	61d3      	str	r3, [r2, #28]
 80059d4:	4b9c      	ldr	r3, [pc, #624]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80059d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059da:	4a9b      	ldr	r2, [pc, #620]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80059dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80059e4:	4b98      	ldr	r3, [pc, #608]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80059e6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80059ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059ee:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80059f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f6:	4a94      	ldr	r2, [pc, #592]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80059f8:	430b      	orrs	r3, r1
 80059fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80059fe:	e008      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a00:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a04:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8005a08:	e003      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a0e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005a1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a20:	2300      	movs	r3, #0
 8005a22:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a24:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	d035      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005a2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a32:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005a36:	2b30      	cmp	r3, #48	@ 0x30
 8005a38:	d014      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8005a3a:	2b30      	cmp	r3, #48	@ 0x30
 8005a3c:	d80e      	bhi.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005a3e:	2b20      	cmp	r3, #32
 8005a40:	d012      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d80a      	bhi.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d010      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8005a4a:	2b10      	cmp	r3, #16
 8005a4c:	d106      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a4e:	4b7e      	ldr	r3, [pc, #504]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a52:	4a7d      	ldr	r2, [pc, #500]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a58:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005a5a:	e008      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a62:	e004      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005a64:	bf00      	nop
 8005a66:	e002      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005a68:	bf00      	nop
 8005a6a:	e000      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8005a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10d      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005a76:	4b74      	ldr	r3, [pc, #464]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005a78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a7c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a84:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005a88:	4a6f      	ldr	r2, [pc, #444]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005a90:	e003      	b.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a96:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005a9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005aac:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	d033      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005ab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aba:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8005ac2:	2b40      	cmp	r3, #64	@ 0x40
 8005ac4:	d007      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8005ac6:	e010      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac8:	4b5f      	ldr	r3, [pc, #380]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005acc:	4a5e      	ldr	r2, [pc, #376]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ad2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005ad4:	e00d      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ad6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ada:	3308      	adds	r3, #8
 8005adc:	4618      	mov	r0, r3
 8005ade:	f003 fb6f 	bl	80091c0 <RCCEx_PLL2_Config>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005ae8:	e003      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005af2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10d      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005afa:	4b53      	ldr	r3, [pc, #332]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005afc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b00:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005b04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b08:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005b0c:	4a4e      	ldr	r2, [pc, #312]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b0e:	430b      	orrs	r3, r1
 8005b10:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b14:	e003      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b1a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005b1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b30:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005b34:	460b      	mov	r3, r1
 8005b36:	4313      	orrs	r3, r2
 8005b38:	d033      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8005b3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b3e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8005b46:	2b80      	cmp	r3, #128	@ 0x80
 8005b48:	d007      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8005b4a:	e010      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b4c:	4b3e      	ldr	r3, [pc, #248]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b50:	4a3d      	ldr	r2, [pc, #244]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b56:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005b58:	e00d      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b5e:	3308      	adds	r3, #8
 8005b60:	4618      	mov	r0, r3
 8005b62:	f003 fb2d 	bl	80091c0 <RCCEx_PLL2_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8005b6c:	e003      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10d      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8005b7e:	4b32      	ldr	r3, [pc, #200]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b84:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005b88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b8c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005b90:	4a2d      	ldr	r2, [pc, #180]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005b92:	430b      	orrs	r3, r1
 8005b94:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b98:	e003      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b9e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005ba2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005bae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bb4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	d04a      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005bbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d827      	bhi.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8005bca:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8005bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd0:	08005be5 	.word	0x08005be5
 8005bd4:	08005bf3 	.word	0x08005bf3
 8005bd8:	08005c07 	.word	0x08005c07
 8005bdc:	08005c23 	.word	0x08005c23
 8005be0:	08005c23 	.word	0x08005c23
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be4:	4b18      	ldr	r3, [pc, #96]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be8:	4a17      	ldr	r2, [pc, #92]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005bea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005bf0:	e018      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f003 fae1 	bl	80091c0 <RCCEx_PLL2_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005c04:	e00e      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c0a:	3330      	adds	r3, #48	@ 0x30
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f003 fb6f 	bl	80092f0 <RCCEx_PLL3_Config>
 8005c12:	4603      	mov	r3, r0
 8005c14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005c18:	e004      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c20:	e000      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8005c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c24:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10f      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005c2c:	4b06      	ldr	r3, [pc, #24]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c32:	f023 0107 	bic.w	r1, r3, #7
 8005c36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c3e:	4a02      	ldr	r2, [pc, #8]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005c40:	430b      	orrs	r3, r1
 8005c42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005c46:	e005      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8005c48:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c50:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005c54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005c60:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c62:	2300      	movs	r3, #0
 8005c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c66:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f000 8081 	beq.w	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005c72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	d85f      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8005c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8005c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c84:	08005d09 	.word	0x08005d09
 8005c88:	08005d3f 	.word	0x08005d3f
 8005c8c:	08005d3f 	.word	0x08005d3f
 8005c90:	08005d3f 	.word	0x08005d3f
 8005c94:	08005d3f 	.word	0x08005d3f
 8005c98:	08005d3f 	.word	0x08005d3f
 8005c9c:	08005d3f 	.word	0x08005d3f
 8005ca0:	08005d3f 	.word	0x08005d3f
 8005ca4:	08005d17 	.word	0x08005d17
 8005ca8:	08005d3f 	.word	0x08005d3f
 8005cac:	08005d3f 	.word	0x08005d3f
 8005cb0:	08005d3f 	.word	0x08005d3f
 8005cb4:	08005d3f 	.word	0x08005d3f
 8005cb8:	08005d3f 	.word	0x08005d3f
 8005cbc:	08005d3f 	.word	0x08005d3f
 8005cc0:	08005d3f 	.word	0x08005d3f
 8005cc4:	08005d2b 	.word	0x08005d2b
 8005cc8:	08005d3f 	.word	0x08005d3f
 8005ccc:	08005d3f 	.word	0x08005d3f
 8005cd0:	08005d3f 	.word	0x08005d3f
 8005cd4:	08005d3f 	.word	0x08005d3f
 8005cd8:	08005d3f 	.word	0x08005d3f
 8005cdc:	08005d3f 	.word	0x08005d3f
 8005ce0:	08005d3f 	.word	0x08005d3f
 8005ce4:	08005d47 	.word	0x08005d47
 8005ce8:	08005d3f 	.word	0x08005d3f
 8005cec:	08005d3f 	.word	0x08005d3f
 8005cf0:	08005d3f 	.word	0x08005d3f
 8005cf4:	08005d3f 	.word	0x08005d3f
 8005cf8:	08005d3f 	.word	0x08005d3f
 8005cfc:	08005d3f 	.word	0x08005d3f
 8005d00:	08005d3f 	.word	0x08005d3f
 8005d04:	08005d47 	.word	0x08005d47
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d08:	4bab      	ldr	r3, [pc, #684]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0c:	4aaa      	ldr	r2, [pc, #680]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d12:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005d14:	e018      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f003 fa4f 	bl	80091c0 <RCCEx_PLL2_Config>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005d28:	e00e      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d2e:	3330      	adds	r3, #48	@ 0x30
 8005d30:	4618      	mov	r0, r3
 8005d32:	f003 fadd 	bl	80092f0 <RCCEx_PLL3_Config>
 8005d36:	4603      	mov	r3, r0
 8005d38:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005d3c:	e004      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d44:	e000      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8005d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d48:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10d      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005d50:	4b99      	ldr	r3, [pc, #612]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d56:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005d5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d62:	4a95      	ldr	r2, [pc, #596]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005d64:	430b      	orrs	r3, r1
 8005d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005d6a:	e003      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d70:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005d74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005d80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d82:	2300      	movs	r3, #0
 8005d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d86:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	d04e      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005d90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d9c:	d02e      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8005d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005da2:	d827      	bhi.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005da4:	2bc0      	cmp	r3, #192	@ 0xc0
 8005da6:	d02b      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8005da8:	2bc0      	cmp	r3, #192	@ 0xc0
 8005daa:	d823      	bhi.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005dac:	2b80      	cmp	r3, #128	@ 0x80
 8005dae:	d017      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8005db0:	2b80      	cmp	r3, #128	@ 0x80
 8005db2:	d81f      	bhi.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8005db8:	2b40      	cmp	r3, #64	@ 0x40
 8005dba:	d007      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8005dbc:	e01a      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dbe:	4b7e      	ldr	r3, [pc, #504]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc2:	4a7d      	ldr	r2, [pc, #500]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dc8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005dca:	e01a      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005dcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f003 f9f4 	bl	80091c0 <RCCEx_PLL2_Config>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005dde:	e010      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005de0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005de4:	3330      	adds	r3, #48	@ 0x30
 8005de6:	4618      	mov	r0, r3
 8005de8:	f003 fa82 	bl	80092f0 <RCCEx_PLL3_Config>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005df2:	e006      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005dfa:	e002      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005dfc:	bf00      	nop
 8005dfe:	e000      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e02:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10d      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005e0a:	4b6b      	ldr	r3, [pc, #428]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e10:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005e14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e1c:	4a66      	ldr	r2, [pc, #408]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005e1e:	430b      	orrs	r3, r1
 8005e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005e24:	e003      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e2a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005e2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005e3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e40:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005e44:	460b      	mov	r3, r1
 8005e46:	4313      	orrs	r3, r2
 8005e48:	d055      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e4e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005e52:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005e56:	d031      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8005e58:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005e5c:	d82a      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005e5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e62:	d02d      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8005e64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e68:	d824      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005e6a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005e6e:	d029      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005e70:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005e74:	d81e      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e7a:	d011      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8005e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e80:	d818      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d020      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8005e86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e8a:	d113      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e90:	3308      	adds	r3, #8
 8005e92:	4618      	mov	r0, r3
 8005e94:	f003 f994 	bl	80091c0 <RCCEx_PLL2_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005e9e:	e014      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ea0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ea4:	3330      	adds	r3, #48	@ 0x30
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f003 fa22 	bl	80092f0 <RCCEx_PLL3_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005eb2:	e00a      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005eba:	e006      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005ebc:	bf00      	nop
 8005ebe:	e004      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005ec0:	bf00      	nop
 8005ec2:	e002      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005ec4:	bf00      	nop
 8005ec6:	e000      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10d      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005ed2:	4b39      	ldr	r3, [pc, #228]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ed8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005edc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ee0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005ee4:	4a34      	ldr	r2, [pc, #208]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005eec:	e003      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ef2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8005ef6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005f02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f04:	2300      	movs	r3, #0
 8005f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f08:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	d058      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8005f12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f1a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005f1e:	d031      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8005f20:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005f24:	d82a      	bhi.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005f26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f2a:	d02d      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8005f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f30:	d824      	bhi.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005f32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f36:	d029      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8005f38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f3c:	d81e      	bhi.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f42:	d011      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8005f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f48:	d818      	bhi.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d020      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8005f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f52:	d113      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f58:	3308      	adds	r3, #8
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f003 f930 	bl	80091c0 <RCCEx_PLL2_Config>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005f66:	e014      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f6c:	3330      	adds	r3, #48	@ 0x30
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f003 f9be 	bl	80092f0 <RCCEx_PLL3_Config>
 8005f74:	4603      	mov	r3, r0
 8005f76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005f7a:	e00a      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f82:	e006      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005f84:	bf00      	nop
 8005f86:	e004      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005f88:	bf00      	nop
 8005f8a:	e002      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005f8c:	bf00      	nop
 8005f8e:	e000      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d110      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8005f9a:	4b07      	ldr	r3, [pc, #28]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fa0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fac:	4902      	ldr	r1, [pc, #8]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005fb4:	e006      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8005fb6:	bf00      	nop
 8005fb8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fbc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fc0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fcc:	2100      	movs	r1, #0
 8005fce:	6239      	str	r1, [r7, #32]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fd6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	d055      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8005fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005fe8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005fec:	d031      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8005fee:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005ff2:	d82a      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005ff4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ff8:	d02d      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8005ffa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ffe:	d824      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006000:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006004:	d029      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8006006:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800600a:	d81e      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800600c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006010:	d011      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8006012:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006016:	d818      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d020      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800601c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006020:	d113      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006022:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006026:	3308      	adds	r3, #8
 8006028:	4618      	mov	r0, r3
 800602a:	f003 f8c9 	bl	80091c0 <RCCEx_PLL2_Config>
 800602e:	4603      	mov	r3, r0
 8006030:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006034:	e014      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006036:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800603a:	3330      	adds	r3, #48	@ 0x30
 800603c:	4618      	mov	r0, r3
 800603e:	f003 f957 	bl	80092f0 <RCCEx_PLL3_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006048:	e00a      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006050:	e006      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006052:	bf00      	nop
 8006054:	e004      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006056:	bf00      	nop
 8006058:	e002      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800605a:	bf00      	nop
 800605c:	e000      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800605e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006060:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10d      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8006068:	4b88      	ldr	r3, [pc, #544]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800606a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800606e:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8006072:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800607a:	4984      	ldr	r1, [pc, #528]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800607c:	4313      	orrs	r3, r2
 800607e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006082:	e003      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006084:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006088:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800608c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	2100      	movs	r1, #0
 8006096:	61b9      	str	r1, [r7, #24]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80060a2:	460b      	mov	r3, r1
 80060a4:	4313      	orrs	r3, r2
 80060a6:	d03d      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80060a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d81c      	bhi.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80060b4:	a201      	add	r2, pc, #4	@ (adr r2, 80060bc <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	080060f7 	.word	0x080060f7
 80060c0:	080060cd 	.word	0x080060cd
 80060c4:	080060db 	.word	0x080060db
 80060c8:	080060f7 	.word	0x080060f7
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060cc:	4b6f      	ldr	r3, [pc, #444]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80060ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d0:	4a6e      	ldr	r2, [pc, #440]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80060d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80060d8:	e00e      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060de:	3308      	adds	r3, #8
 80060e0:	4618      	mov	r0, r3
 80060e2:	f003 f86d 	bl	80091c0 <RCCEx_PLL2_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80060ec:	e004      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80060f4:	e000      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80060f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10d      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006100:	4b62      	ldr	r3, [pc, #392]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006102:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006106:	f023 0203 	bic.w	r2, r3, #3
 800610a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800610e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006112:	495e      	ldr	r1, [pc, #376]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800611a:	e003      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006120:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006124:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	2100      	movs	r1, #0
 800612e:	6139      	str	r1, [r7, #16]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800613a:	460b      	mov	r3, r1
 800613c:	4313      	orrs	r3, r2
 800613e:	d03a      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006140:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006144:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800614c:	d00e      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800614e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006152:	d815      	bhi.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d017      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006158:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800615c:	d110      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800615e:	4b4b      	ldr	r3, [pc, #300]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006162:	4a4a      	ldr	r2, [pc, #296]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006168:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800616a:	e00e      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800616c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006170:	3308      	adds	r3, #8
 8006172:	4618      	mov	r0, r3
 8006174:	f003 f824 	bl	80091c0 <RCCEx_PLL2_Config>
 8006178:	4603      	mov	r3, r0
 800617a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800617e:	e004      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006186:	e000      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8006188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800618a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10d      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006192:	4b3e      	ldr	r3, [pc, #248]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006198:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800619c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80061a4:	4939      	ldr	r1, [pc, #228]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80061ac:	e003      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	2100      	movs	r1, #0
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	f003 0310 	and.w	r3, r3, #16
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80061cc:	460b      	mov	r3, r1
 80061ce:	4313      	orrs	r3, r2
 80061d0:	d038      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80061d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80061da:	2b30      	cmp	r3, #48	@ 0x30
 80061dc:	d01b      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80061de:	2b30      	cmp	r3, #48	@ 0x30
 80061e0:	d815      	bhi.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80061e2:	2b10      	cmp	r3, #16
 80061e4:	d002      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d007      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80061ea:	e010      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ec:	4b27      	ldr	r3, [pc, #156]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80061ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f0:	4a26      	ldr	r2, [pc, #152]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80061f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061f6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80061f8:	e00e      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061fe:	3330      	adds	r3, #48	@ 0x30
 8006200:	4618      	mov	r0, r3
 8006202:	f003 f875 	bl	80092f0 <RCCEx_PLL3_Config>
 8006206:	4603      	mov	r3, r0
 8006208:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800620c:	e004      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006214:	e000      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8006216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006218:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10d      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006220:	4b1a      	ldr	r3, [pc, #104]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006222:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006226:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800622a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800622e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006232:	4916      	ldr	r1, [pc, #88]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006234:	4313      	orrs	r3, r2
 8006236:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800623a:	e003      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006240:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006244:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624c:	2100      	movs	r1, #0
 800624e:	6039      	str	r1, [r7, #0]
 8006250:	f003 0308 	and.w	r3, r3, #8
 8006254:	607b      	str	r3, [r7, #4]
 8006256:	e9d7 1200 	ldrd	r1, r2, [r7]
 800625a:	460b      	mov	r3, r1
 800625c:	4313      	orrs	r3, r2
 800625e:	d00c      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006260:	4b0a      	ldr	r3, [pc, #40]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006262:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006266:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800626a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800626e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006272:	4906      	ldr	r1, [pc, #24]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006274:	4313      	orrs	r3, r2
 8006276:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800627a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800627e:	4618      	mov	r0, r3
 8006280:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8006284:	46bd      	mov	sp, r7
 8006286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800628a:	bf00      	nop
 800628c:	44020c00 	.word	0x44020c00

08006290 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006290:	b480      	push	{r7}
 8006292:	b08b      	sub	sp, #44	@ 0x2c
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006298:	4bad      	ldr	r3, [pc, #692]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800629a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800629c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80062a2:	4bab      	ldr	r3, [pc, #684]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80062a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80062ac:	4ba8      	ldr	r3, [pc, #672]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80062ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b0:	0a1b      	lsrs	r3, r3, #8
 80062b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062b6:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80062b8:	4ba5      	ldr	r3, [pc, #660]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80062ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062bc:	f003 0310 	and.w	r3, r3, #16
 80062c0:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80062c2:	4ba3      	ldr	r3, [pc, #652]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80062c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c6:	08db      	lsrs	r3, r3, #3
 80062c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	fb02 f303 	mul.w	r3, r2, r3
 80062d2:	ee07 3a90 	vmov	s15, r3
 80062d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062da:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8126 	beq.w	8006532 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d053      	beq.n	8006394 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d86f      	bhi.n	80063d2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d003      	beq.n	8006300 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d02b      	beq.n	8006356 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80062fe:	e068      	b.n	80063d2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006300:	4b93      	ldr	r3, [pc, #588]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	08db      	lsrs	r3, r3, #3
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	4a92      	ldr	r2, [pc, #584]	@ (8006554 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800630c:	fa22 f303 	lsr.w	r3, r2, r3
 8006310:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	ee07 3a90 	vmov	s15, r3
 8006318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	ee07 3a90 	vmov	s15, r3
 8006330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006334:	ed97 6a04 	vldr	s12, [r7, #16]
 8006338:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006558 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800633c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006340:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006344:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800634c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006350:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006354:	e068      	b.n	8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	ee07 3a90 	vmov	s15, r3
 800635c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006360:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 800655c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006372:	ed97 6a04 	vldr	s12, [r7, #16]
 8006376:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006558 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800637a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800638a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006392:	e049      	b.n	8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006560 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80063a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	ee07 3a90 	vmov	s15, r3
 80063ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b0:	ed97 6a04 	vldr	s12, [r7, #16]
 80063b4:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006558 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80063b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063cc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80063d0:	e02a      	b.n	8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063d2:	4b5f      	ldr	r3, [pc, #380]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	08db      	lsrs	r3, r3, #3
 80063d8:	f003 0303 	and.w	r3, r3, #3
 80063dc:	4a5d      	ldr	r2, [pc, #372]	@ (8006554 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80063de:	fa22 f303 	lsr.w	r3, r2, r3
 80063e2:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	ee07 3a90 	vmov	s15, r3
 80063ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	ee07 3a90 	vmov	s15, r3
 80063f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006406:	ed97 6a04 	vldr	s12, [r7, #16]
 800640a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006558 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800640e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800641a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800641e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006422:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006426:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006428:	4b49      	ldr	r3, [pc, #292]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006430:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006434:	d121      	bne.n	800647a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006436:	4b46      	ldr	r3, [pc, #280]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d017      	beq.n	8006472 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006442:	4b43      	ldr	r3, [pc, #268]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006446:	0a5b      	lsrs	r3, r3, #9
 8006448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800644c:	ee07 3a90 	vmov	s15, r3
 8006450:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006454:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006458:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800645c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006468:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	e006      	b.n	8006480 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	e002      	b.n	8006480 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006480:	4b33      	ldr	r3, [pc, #204]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006488:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800648c:	d121      	bne.n	80064d2 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800648e:	4b30      	ldr	r3, [pc, #192]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d017      	beq.n	80064ca <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800649a:	4b2d      	ldr	r3, [pc, #180]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800649c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800649e:	0c1b      	lsrs	r3, r3, #16
 80064a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064a4:	ee07 3a90 	vmov	s15, r3
 80064a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80064ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064b0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80064b4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80064b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064c0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	605a      	str	r2, [r3, #4]
 80064c8:	e006      	b.n	80064d8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	605a      	str	r2, [r3, #4]
 80064d0:	e002      	b.n	80064d8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064e4:	d121      	bne.n	800652a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80064e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80064e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d017      	beq.n	8006522 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80064f2:	4b17      	ldr	r3, [pc, #92]	@ (8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80064f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064f6:	0e1b      	lsrs	r3, r3, #24
 80064f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064fc:	ee07 3a90 	vmov	s15, r3
 8006500:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006504:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006508:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800650c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006518:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006520:	e010      	b.n	8006544 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	609a      	str	r2, [r3, #8]
}
 8006528:	e00c      	b.n	8006544 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	609a      	str	r2, [r3, #8]
}
 8006530:	e008      	b.n	8006544 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	609a      	str	r2, [r3, #8]
}
 8006544:	bf00      	nop
 8006546:	372c      	adds	r7, #44	@ 0x2c
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	44020c00 	.word	0x44020c00
 8006554:	03d09000 	.word	0x03d09000
 8006558:	46000000 	.word	0x46000000
 800655c:	4a742400 	.word	0x4a742400
 8006560:	4af42400 	.word	0x4af42400

08006564 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006564:	b480      	push	{r7}
 8006566:	b08b      	sub	sp, #44	@ 0x2c
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800656c:	4bad      	ldr	r3, [pc, #692]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800656e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006574:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006576:	4bab      	ldr	r3, [pc, #684]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8006580:	4ba8      	ldr	r3, [pc, #672]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006584:	0a1b      	lsrs	r3, r3, #8
 8006586:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800658a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800658c:	4ba5      	ldr	r3, [pc, #660]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800658e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006596:	4ba3      	ldr	r3, [pc, #652]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659a:	08db      	lsrs	r3, r3, #3
 800659c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	fb02 f303 	mul.w	r3, r2, r3
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ae:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 8126 	beq.w	8006806 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d053      	beq.n	8006668 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d86f      	bhi.n	80066a6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d003      	beq.n	80065d4 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d02b      	beq.n	800662a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80065d2:	e068      	b.n	80066a6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065d4:	4b93      	ldr	r3, [pc, #588]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	08db      	lsrs	r3, r3, #3
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	4a92      	ldr	r2, [pc, #584]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80065e0:	fa22 f303 	lsr.w	r3, r2, r3
 80065e4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	ee07 3a90 	vmov	s15, r3
 80065ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	ee07 3a90 	vmov	s15, r3
 8006604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006608:	ed97 6a04 	vldr	s12, [r7, #16]
 800660c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 800682c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006610:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006618:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800661c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006624:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006628:	e068      	b.n	80066fc <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	ee07 3a90 	vmov	s15, r3
 8006630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006634:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006830 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	ee07 3a90 	vmov	s15, r3
 8006642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006646:	ed97 6a04 	vldr	s12, [r7, #16]
 800664a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800682c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800664e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800665a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800665e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006662:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006666:	e049      	b.n	80066fc <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006672:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006834 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	ee07 3a90 	vmov	s15, r3
 8006680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006684:	ed97 6a04 	vldr	s12, [r7, #16]
 8006688:	eddf 5a68 	vldr	s11, [pc, #416]	@ 800682c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800668c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006694:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800669c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80066a4:	e02a      	b.n	80066fc <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066a6:	4b5f      	ldr	r3, [pc, #380]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	08db      	lsrs	r3, r3, #3
 80066ac:	f003 0303 	and.w	r3, r3, #3
 80066b0:	4a5d      	ldr	r2, [pc, #372]	@ (8006828 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80066b2:	fa22 f303 	lsr.w	r3, r2, r3
 80066b6:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	ee07 3a90 	vmov	s15, r3
 80066be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	ee07 3a90 	vmov	s15, r3
 80066c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	ee07 3a90 	vmov	s15, r3
 80066d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066da:	ed97 6a04 	vldr	s12, [r7, #16]
 80066de:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800682c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80066e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80066fa:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066fc:	4b49      	ldr	r3, [pc, #292]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006704:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006708:	d121      	bne.n	800674e <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800670a:	4b46      	ldr	r3, [pc, #280]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800670c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d017      	beq.n	8006746 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006716:	4b43      	ldr	r3, [pc, #268]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800671a:	0a5b      	lsrs	r3, r3, #9
 800671c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006720:	ee07 3a90 	vmov	s15, r3
 8006724:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006728:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800672c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006730:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800673c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	e006      	b.n	8006754 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	e002      	b.n	8006754 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006754:	4b33      	ldr	r3, [pc, #204]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800675c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006760:	d121      	bne.n	80067a6 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006762:	4b30      	ldr	r3, [pc, #192]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d017      	beq.n	800679e <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800676e:	4b2d      	ldr	r3, [pc, #180]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006772:	0c1b      	lsrs	r3, r3, #16
 8006774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006778:	ee07 3a90 	vmov	s15, r3
 800677c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006780:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006784:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006788:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800678c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006794:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	605a      	str	r2, [r3, #4]
 800679c:	e006      	b.n	80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	605a      	str	r2, [r3, #4]
 80067a4:	e002      	b.n	80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067b8:	d121      	bne.n	80067fe <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80067ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80067bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d017      	beq.n	80067f6 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80067c6:	4b17      	ldr	r3, [pc, #92]	@ (8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80067c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ca:	0e1b      	lsrs	r3, r3, #24
 80067cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80067d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067dc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80067e0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80067e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ec:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80067f4:	e010      	b.n	8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	609a      	str	r2, [r3, #8]
}
 80067fc:	e00c      	b.n	8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	609a      	str	r2, [r3, #8]
}
 8006804:	e008      	b.n	8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	609a      	str	r2, [r3, #8]
}
 8006818:	bf00      	nop
 800681a:	372c      	adds	r7, #44	@ 0x2c
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	44020c00 	.word	0x44020c00
 8006828:	03d09000 	.word	0x03d09000
 800682c:	46000000 	.word	0x46000000
 8006830:	4a742400 	.word	0x4a742400
 8006834:	4af42400 	.word	0x4af42400

08006838 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006838:	b480      	push	{r7}
 800683a:	b08b      	sub	sp, #44	@ 0x2c
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006840:	4bad      	ldr	r3, [pc, #692]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006848:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800684a:	4bab      	ldr	r3, [pc, #684]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800684c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006854:	4ba8      	ldr	r3, [pc, #672]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006858:	0a1b      	lsrs	r3, r3, #8
 800685a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800685e:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006860:	4ba5      	ldr	r3, [pc, #660]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800686a:	4ba3      	ldr	r3, [pc, #652]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800686c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800686e:	08db      	lsrs	r3, r3, #3
 8006870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	fb02 f303 	mul.w	r3, r2, r3
 800687a:	ee07 3a90 	vmov	s15, r3
 800687e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006882:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 8126 	beq.w	8006ada <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	2b03      	cmp	r3, #3
 8006892:	d053      	beq.n	800693c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	2b03      	cmp	r3, #3
 8006898:	d86f      	bhi.n	800697a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d003      	beq.n	80068a8 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d02b      	beq.n	80068fe <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80068a6:	e068      	b.n	800697a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068a8:	4b93      	ldr	r3, [pc, #588]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	08db      	lsrs	r3, r3, #3
 80068ae:	f003 0303 	and.w	r3, r3, #3
 80068b2:	4a92      	ldr	r2, [pc, #584]	@ (8006afc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80068b4:	fa22 f303 	lsr.w	r3, r2, r3
 80068b8:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	ee07 3a90 	vmov	s15, r3
 80068c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	ee07 3a90 	vmov	s15, r3
 80068d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068dc:	ed97 6a04 	vldr	s12, [r7, #16]
 80068e0:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8006b00 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80068e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80068fc:	e068      	b.n	80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	ee07 3a90 	vmov	s15, r3
 8006904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006908:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8006b04 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800690c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	ee07 3a90 	vmov	s15, r3
 8006916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800691a:	ed97 6a04 	vldr	s12, [r7, #16]
 800691e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006b00 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800692a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800692e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006936:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800693a:	e049      	b.n	80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006946:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800694a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	ee07 3a90 	vmov	s15, r3
 8006954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006958:	ed97 6a04 	vldr	s12, [r7, #16]
 800695c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8006b00 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006960:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006968:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800696c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006974:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006978:	e02a      	b.n	80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800697a:	4b5f      	ldr	r3, [pc, #380]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	08db      	lsrs	r3, r3, #3
 8006980:	f003 0303 	and.w	r3, r3, #3
 8006984:	4a5d      	ldr	r2, [pc, #372]	@ (8006afc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006986:	fa22 f303 	lsr.w	r3, r2, r3
 800698a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	ee07 3a90 	vmov	s15, r3
 8006992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	ee07 3a90 	vmov	s15, r3
 800699c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ae:	ed97 6a04 	vldr	s12, [r7, #16]
 80069b2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006b00 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80069b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80069ce:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069d0:	4b49      	ldr	r3, [pc, #292]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069dc:	d121      	bne.n	8006a22 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80069de:	4b46      	ldr	r3, [pc, #280]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80069e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d017      	beq.n	8006a1a <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80069ea:	4b43      	ldr	r3, [pc, #268]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80069ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ee:	0a5b      	lsrs	r3, r3, #9
 80069f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069f4:	ee07 3a90 	vmov	s15, r3
 80069f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80069fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a00:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006a04:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a10:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	e006      	b.n	8006a28 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	e002      	b.n	8006a28 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a28:	4b33      	ldr	r3, [pc, #204]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a34:	d121      	bne.n	8006a7a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006a36:	4b30      	ldr	r3, [pc, #192]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d017      	beq.n	8006a72 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006a42:	4b2d      	ldr	r3, [pc, #180]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a46:	0c1b      	lsrs	r3, r3, #16
 8006a48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a4c:	ee07 3a90 	vmov	s15, r3
 8006a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006a54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a58:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006a5c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a68:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	605a      	str	r2, [r3, #4]
 8006a70:	e006      	b.n	8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	605a      	str	r2, [r3, #4]
 8006a78:	e002      	b.n	8006a80 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a80:	4b1d      	ldr	r3, [pc, #116]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a8c:	d121      	bne.n	8006ad2 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d017      	beq.n	8006aca <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006a9a:	4b17      	ldr	r3, [pc, #92]	@ (8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9e:	0e1b      	lsrs	r3, r3, #24
 8006aa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006aa4:	ee07 3a90 	vmov	s15, r3
 8006aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006aac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ab0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006ab4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ac0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8006ac8:	e010      	b.n	8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	609a      	str	r2, [r3, #8]
}
 8006ad0:	e00c      	b.n	8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	609a      	str	r2, [r3, #8]
}
 8006ad8:	e008      	b.n	8006aec <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	609a      	str	r2, [r3, #8]
}
 8006aec:	bf00      	nop
 8006aee:	372c      	adds	r7, #44	@ 0x2c
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	44020c00 	.word	0x44020c00
 8006afc:	03d09000 	.word	0x03d09000
 8006b00:	46000000 	.word	0x46000000
 8006b04:	4a742400 	.word	0x4a742400
 8006b08:	4af42400 	.word	0x4af42400

08006b0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006b0c:	b590      	push	{r4, r7, lr}
 8006b0e:	b08f      	sub	sp, #60	@ 0x3c
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006b16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b1a:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8006b1e:	4321      	orrs	r1, r4
 8006b20:	d150      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006b22:	4b26      	ldr	r3, [pc, #152]	@ (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b2c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006b2e:	4b23      	ldr	r3, [pc, #140]	@ (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d108      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b42:	d104      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006b44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b4a:	f002 bb2a 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b5c:	d108      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b64:	d104      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8006b66:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b6c:	f002 bb19 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006b70:	4b12      	ldr	r3, [pc, #72]	@ (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b7c:	d119      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b84:	d115      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006b86:	4b0d      	ldr	r3, [pc, #52]	@ (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8006b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b92:	d30a      	bcc.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8006b94:	4b09      	ldr	r3, [pc, #36]	@ (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	0a1b      	lsrs	r3, r3, #8
 8006b9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b9e:	4a08      	ldr	r2, [pc, #32]	@ (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006ba6:	f002 bafc 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006bae:	f002 baf8 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb6:	f002 baf4 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006bba:	bf00      	nop
 8006bbc:	44020c00 	.word	0x44020c00
 8006bc0:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bc8:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8006bcc:	ea50 0104 	orrs.w	r1, r0, r4
 8006bd0:	f001 8275 	beq.w	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8006bd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bd8:	2801      	cmp	r0, #1
 8006bda:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8006bde:	f082 82dd 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006be6:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8006bea:	ea50 0104 	orrs.w	r1, r0, r4
 8006bee:	f001 816c 	beq.w	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8006bf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bf6:	2801      	cmp	r0, #1
 8006bf8:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8006bfc:	f082 82ce 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c04:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8006c08:	ea50 0104 	orrs.w	r1, r0, r4
 8006c0c:	f001 8602 	beq.w	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8006c10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c14:	2801      	cmp	r0, #1
 8006c16:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8006c1a:	f082 82bf 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c22:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8006c26:	ea50 0104 	orrs.w	r1, r0, r4
 8006c2a:	f001 854c 	beq.w	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8006c2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c32:	2801      	cmp	r0, #1
 8006c34:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8006c38:	f082 82b0 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c40:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8006c44:	ea50 0104 	orrs.w	r1, r0, r4
 8006c48:	f001 849e 	beq.w	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8006c4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c50:	2801      	cmp	r0, #1
 8006c52:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8006c56:	f082 82a1 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c5e:	f1a1 0420 	sub.w	r4, r1, #32
 8006c62:	ea50 0104 	orrs.w	r1, r0, r4
 8006c66:	f001 83e8 	beq.w	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8006c6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c6e:	2801      	cmp	r0, #1
 8006c70:	f171 0120 	sbcs.w	r1, r1, #32
 8006c74:	f082 8292 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c7c:	f1a1 0410 	sub.w	r4, r1, #16
 8006c80:	ea50 0104 	orrs.w	r1, r0, r4
 8006c84:	f002 8256 	beq.w	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8006c88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c8c:	2801      	cmp	r0, #1
 8006c8e:	f171 0110 	sbcs.w	r1, r1, #16
 8006c92:	f082 8283 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c9a:	f1a1 0408 	sub.w	r4, r1, #8
 8006c9e:	ea50 0104 	orrs.w	r1, r0, r4
 8006ca2:	f002 81cc 	beq.w	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8006ca6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006caa:	2801      	cmp	r0, #1
 8006cac:	f171 0108 	sbcs.w	r1, r1, #8
 8006cb0:	f082 8274 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cb8:	1f0c      	subs	r4, r1, #4
 8006cba:	ea50 0104 	orrs.w	r1, r0, r4
 8006cbe:	f001 8648 	beq.w	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8006cc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cc6:	2801      	cmp	r0, #1
 8006cc8:	f171 0104 	sbcs.w	r1, r1, #4
 8006ccc:	f082 8266 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cd4:	1e8c      	subs	r4, r1, #2
 8006cd6:	ea50 0104 	orrs.w	r1, r0, r4
 8006cda:	f002 8143 	beq.w	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8006cde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ce2:	2801      	cmp	r0, #1
 8006ce4:	f171 0102 	sbcs.w	r1, r1, #2
 8006ce8:	f082 8258 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006cec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cf0:	1e4c      	subs	r4, r1, #1
 8006cf2:	ea50 0104 	orrs.w	r1, r0, r4
 8006cf6:	f002 80ce 	beq.w	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8006cfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cfe:	2801      	cmp	r0, #1
 8006d00:	f171 0101 	sbcs.w	r1, r1, #1
 8006d04:	f082 824a 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d0c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8006d10:	4321      	orrs	r1, r4
 8006d12:	f002 8059 	beq.w	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8006d16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d1a:	4cd9      	ldr	r4, [pc, #868]	@ (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006d1c:	42a0      	cmp	r0, r4
 8006d1e:	f171 0100 	sbcs.w	r1, r1, #0
 8006d22:	f082 823b 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d2a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8006d2e:	4321      	orrs	r1, r4
 8006d30:	f001 87d9 	beq.w	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8006d34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d38:	4cd2      	ldr	r4, [pc, #840]	@ (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006d3a:	42a0      	cmp	r0, r4
 8006d3c:	f171 0100 	sbcs.w	r1, r1, #0
 8006d40:	f082 822c 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d48:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8006d4c:	4321      	orrs	r1, r4
 8006d4e:	f001 8751 	beq.w	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8006d52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d56:	4ccc      	ldr	r4, [pc, #816]	@ (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006d58:	42a0      	cmp	r0, r4
 8006d5a:	f171 0100 	sbcs.w	r1, r1, #0
 8006d5e:	f082 821d 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d66:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8006d6a:	4321      	orrs	r1, r4
 8006d6c:	f001 869a 	beq.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8006d70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d74:	4cc5      	ldr	r4, [pc, #788]	@ (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8006d76:	42a0      	cmp	r0, r4
 8006d78:	f171 0100 	sbcs.w	r1, r1, #0
 8006d7c:	f082 820e 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d84:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8006d88:	4321      	orrs	r1, r4
 8006d8a:	f001 8612 	beq.w	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8006d8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d92:	4cbf      	ldr	r4, [pc, #764]	@ (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8006d94:	42a0      	cmp	r0, r4
 8006d96:	f171 0100 	sbcs.w	r1, r1, #0
 8006d9a:	f082 81ff 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006d9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006da2:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8006da6:	4321      	orrs	r1, r4
 8006da8:	f002 817e 	beq.w	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8006dac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006db0:	4cb8      	ldr	r4, [pc, #736]	@ (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006db2:	42a0      	cmp	r0, r4
 8006db4:	f171 0100 	sbcs.w	r1, r1, #0
 8006db8:	f082 81f0 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dc0:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8006dc4:	4321      	orrs	r1, r4
 8006dc6:	f000 829e 	beq.w	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8006dca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dce:	4cb2      	ldr	r4, [pc, #712]	@ (8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006dd0:	42a0      	cmp	r0, r4
 8006dd2:	f171 0100 	sbcs.w	r1, r1, #0
 8006dd6:	f082 81e1 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006dda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dde:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8006de2:	4321      	orrs	r1, r4
 8006de4:	f000 826d 	beq.w	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8006de8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dec:	4cab      	ldr	r4, [pc, #684]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006dee:	42a0      	cmp	r0, r4
 8006df0:	f171 0100 	sbcs.w	r1, r1, #0
 8006df4:	f082 81d2 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dfc:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8006e00:	4321      	orrs	r1, r4
 8006e02:	f001 800d 	beq.w	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8006e06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e0a:	4ca5      	ldr	r4, [pc, #660]	@ (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006e0c:	42a0      	cmp	r0, r4
 8006e0e:	f171 0100 	sbcs.w	r1, r1, #0
 8006e12:	f082 81c3 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e1a:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8006e1e:	4321      	orrs	r1, r4
 8006e20:	f000 81d0 	beq.w	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006e24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e28:	4c9e      	ldr	r4, [pc, #632]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006e2a:	42a0      	cmp	r0, r4
 8006e2c:	f171 0100 	sbcs.w	r1, r1, #0
 8006e30:	f082 81b4 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e38:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8006e3c:	4321      	orrs	r1, r4
 8006e3e:	f000 8142 	beq.w	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8006e42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e46:	4c98      	ldr	r4, [pc, #608]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006e48:	42a0      	cmp	r0, r4
 8006e4a:	f171 0100 	sbcs.w	r1, r1, #0
 8006e4e:	f082 81a5 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e56:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8006e5a:	4321      	orrs	r1, r4
 8006e5c:	f001 824e 	beq.w	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8006e60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e64:	4c91      	ldr	r4, [pc, #580]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006e66:	42a0      	cmp	r0, r4
 8006e68:	f171 0100 	sbcs.w	r1, r1, #0
 8006e6c:	f082 8196 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e74:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8006e78:	4321      	orrs	r1, r4
 8006e7a:	f001 8197 	beq.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8006e7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e82:	4c8b      	ldr	r4, [pc, #556]	@ (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006e84:	42a0      	cmp	r0, r4
 8006e86:	f171 0100 	sbcs.w	r1, r1, #0
 8006e8a:	f082 8187 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e92:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8006e96:	4321      	orrs	r1, r4
 8006e98:	f001 8154 	beq.w	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8006e9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ea0:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8006ea4:	f171 0100 	sbcs.w	r1, r1, #0
 8006ea8:	f082 8178 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006eac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006eb0:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8006eb4:	4321      	orrs	r1, r4
 8006eb6:	f001 80b7 	beq.w	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006eba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ebe:	f248 0401 	movw	r4, #32769	@ 0x8001
 8006ec2:	42a0      	cmp	r0, r4
 8006ec4:	f171 0100 	sbcs.w	r1, r1, #0
 8006ec8:	f082 8168 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ecc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ed0:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8006ed4:	4321      	orrs	r1, r4
 8006ed6:	f001 8064 	beq.w	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8006eda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ede:	f244 0401 	movw	r4, #16385	@ 0x4001
 8006ee2:	42a0      	cmp	r0, r4
 8006ee4:	f171 0100 	sbcs.w	r1, r1, #0
 8006ee8:	f082 8158 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006eec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ef0:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8006ef4:	4321      	orrs	r1, r4
 8006ef6:	f001 8011 	beq.w	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8006efa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006efe:	f242 0401 	movw	r4, #8193	@ 0x2001
 8006f02:	42a0      	cmp	r0, r4
 8006f04:	f171 0100 	sbcs.w	r1, r1, #0
 8006f08:	f082 8148 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f10:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8006f14:	4321      	orrs	r1, r4
 8006f16:	f000 871e 	beq.w	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8006f1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f1e:	f241 0401 	movw	r4, #4097	@ 0x1001
 8006f22:	42a0      	cmp	r0, r4
 8006f24:	f171 0100 	sbcs.w	r1, r1, #0
 8006f28:	f082 8138 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f30:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8006f34:	4321      	orrs	r1, r4
 8006f36:	f000 86a8 	beq.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8006f3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f3e:	f640 0401 	movw	r4, #2049	@ 0x801
 8006f42:	42a0      	cmp	r0, r4
 8006f44:	f171 0100 	sbcs.w	r1, r1, #0
 8006f48:	f082 8128 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f50:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8006f54:	4321      	orrs	r1, r4
 8006f56:	f000 8632 	beq.w	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8006f5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f5e:	f240 4401 	movw	r4, #1025	@ 0x401
 8006f62:	42a0      	cmp	r0, r4
 8006f64:	f171 0100 	sbcs.w	r1, r1, #0
 8006f68:	f082 8118 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f70:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8006f74:	4321      	orrs	r1, r4
 8006f76:	f000 85b0 	beq.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8006f7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f7e:	f240 2401 	movw	r4, #513	@ 0x201
 8006f82:	42a0      	cmp	r0, r4
 8006f84:	f171 0100 	sbcs.w	r1, r1, #0
 8006f88:	f082 8108 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006f8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f90:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8006f94:	4321      	orrs	r1, r4
 8006f96:	f000 8535 	beq.w	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006f9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f9e:	f240 1401 	movw	r4, #257	@ 0x101
 8006fa2:	42a0      	cmp	r0, r4
 8006fa4:	f171 0100 	sbcs.w	r1, r1, #0
 8006fa8:	f082 80f8 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006fac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fb0:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8006fb4:	4321      	orrs	r1, r4
 8006fb6:	f000 84ba 	beq.w	800792e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8006fba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fbe:	2881      	cmp	r0, #129	@ 0x81
 8006fc0:	f171 0100 	sbcs.w	r1, r1, #0
 8006fc4:	f082 80ea 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fcc:	2821      	cmp	r0, #33	@ 0x21
 8006fce:	f171 0100 	sbcs.w	r1, r1, #0
 8006fd2:	d26f      	bcs.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006fd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fd8:	4301      	orrs	r1, r0
 8006fda:	f002 80df 	beq.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006fde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fe2:	1e42      	subs	r2, r0, #1
 8006fe4:	f141 33ff 	adc.w	r3, r1, #4294967295
 8006fe8:	2a20      	cmp	r2, #32
 8006fea:	f173 0100 	sbcs.w	r1, r3, #0
 8006fee:	f082 80d5 	bcs.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ff2:	2a1f      	cmp	r2, #31
 8006ff4:	f202 80d2 	bhi.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ff8:	a101      	add	r1, pc, #4	@ (adr r1, 8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8006ffa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ffe:	bf00      	nop
 8007000:	08007361 	.word	0x08007361
 8007004:	0800742d 	.word	0x0800742d
 8007008:	0800919d 	.word	0x0800919d
 800700c:	080074ed 	.word	0x080074ed
 8007010:	0800919d 	.word	0x0800919d
 8007014:	0800919d 	.word	0x0800919d
 8007018:	0800919d 	.word	0x0800919d
 800701c:	080075bd 	.word	0x080075bd
 8007020:	0800919d 	.word	0x0800919d
 8007024:	0800919d 	.word	0x0800919d
 8007028:	0800919d 	.word	0x0800919d
 800702c:	0800919d 	.word	0x0800919d
 8007030:	0800919d 	.word	0x0800919d
 8007034:	0800919d 	.word	0x0800919d
 8007038:	0800919d 	.word	0x0800919d
 800703c:	0800769f 	.word	0x0800769f
 8007040:	0800919d 	.word	0x0800919d
 8007044:	0800919d 	.word	0x0800919d
 8007048:	0800919d 	.word	0x0800919d
 800704c:	0800919d 	.word	0x0800919d
 8007050:	0800919d 	.word	0x0800919d
 8007054:	0800919d 	.word	0x0800919d
 8007058:	0800919d 	.word	0x0800919d
 800705c:	0800919d 	.word	0x0800919d
 8007060:	0800919d 	.word	0x0800919d
 8007064:	0800919d 	.word	0x0800919d
 8007068:	0800919d 	.word	0x0800919d
 800706c:	0800919d 	.word	0x0800919d
 8007070:	0800919d 	.word	0x0800919d
 8007074:	0800919d 	.word	0x0800919d
 8007078:	0800919d 	.word	0x0800919d
 800707c:	08007775 	.word	0x08007775
 8007080:	80000001 	.word	0x80000001
 8007084:	40000001 	.word	0x40000001
 8007088:	20000001 	.word	0x20000001
 800708c:	10000001 	.word	0x10000001
 8007090:	08000001 	.word	0x08000001
 8007094:	04000001 	.word	0x04000001
 8007098:	00800001 	.word	0x00800001
 800709c:	00400001 	.word	0x00400001
 80070a0:	00200001 	.word	0x00200001
 80070a4:	00100001 	.word	0x00100001
 80070a8:	00080001 	.word	0x00080001
 80070ac:	00040001 	.word	0x00040001
 80070b0:	00020001 	.word	0x00020001
 80070b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b8:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80070bc:	430b      	orrs	r3, r1
 80070be:	f000 83c4 	beq.w	800784a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80070c2:	f002 b86b 	b.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80070c6:	4ba1      	ldr	r3, [pc, #644]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80070c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070cc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80070d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070d8:	d036      	beq.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070e0:	d86b      	bhi.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80070e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070e8:	d02b      	beq.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070f0:	d863      	bhi.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80070f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070f8:	d01b      	beq.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007100:	d85b      	bhi.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007104:	2b00      	cmp	r3, #0
 8007106:	d004      	beq.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800710e:	d008      	beq.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007110:	e053      	b.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007112:	f107 0320 	add.w	r3, r7, #32
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff f8ba 	bl	8006290 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007120:	e04e      	b.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007122:	f107 0314 	add.w	r3, r7, #20
 8007126:	4618      	mov	r0, r3
 8007128:	f7ff fa1c 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007130:	e046      	b.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007132:	f107 0308 	add.w	r3, r7, #8
 8007136:	4618      	mov	r0, r3
 8007138:	f7ff fb7e 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007140:	e03e      	b.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007142:	4b83      	ldr	r3, [pc, #524]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007144:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007146:	e03b      	b.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007148:	4b80      	ldr	r3, [pc, #512]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800714a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800714e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007152:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007154:	4b7d      	ldr	r3, [pc, #500]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b02      	cmp	r3, #2
 800715e:	d10c      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8007160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007162:	2b00      	cmp	r3, #0
 8007164:	d109      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007166:	4b79      	ldr	r3, [pc, #484]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	08db      	lsrs	r3, r3, #3
 800716c:	f003 0303 	and.w	r3, r3, #3
 8007170:	4a78      	ldr	r2, [pc, #480]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007172:	fa22 f303 	lsr.w	r3, r2, r3
 8007176:	637b      	str	r3, [r7, #52]	@ 0x34
 8007178:	e01e      	b.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800717a:	4b74      	ldr	r3, [pc, #464]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007186:	d106      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800718a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800718e:	d102      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007190:	4b71      	ldr	r3, [pc, #452]	@ (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007192:	637b      	str	r3, [r7, #52]	@ 0x34
 8007194:	e010      	b.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007196:	4b6d      	ldr	r3, [pc, #436]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800719e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071a2:	d106      	bne.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80071a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071aa:	d102      	bne.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80071ac:	4b6b      	ldr	r3, [pc, #428]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80071ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80071b0:	e002      	b.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80071b6:	e003      	b.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80071b8:	e002      	b.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071be:	bf00      	nop
          }
        }
        break;
 80071c0:	f001 bfef 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80071c4:	4b61      	ldr	r3, [pc, #388]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80071c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071ca:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80071ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071d6:	d036      	beq.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80071d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071de:	d86b      	bhi.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80071e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80071e6:	d02b      	beq.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80071e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ea:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80071ee:	d863      	bhi.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071f6:	d01b      	beq.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80071f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071fe:	d85b      	bhi.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	2b00      	cmp	r3, #0
 8007204:	d004      	beq.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007208:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800720c:	d008      	beq.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800720e:	e053      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007210:	f107 0320 	add.w	r3, r7, #32
 8007214:	4618      	mov	r0, r3
 8007216:	f7ff f83b 	bl	8006290 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800721e:	e04e      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007220:	f107 0314 	add.w	r3, r7, #20
 8007224:	4618      	mov	r0, r3
 8007226:	f7ff f99d 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800722e:	e046      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007230:	f107 0308 	add.w	r3, r7, #8
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff faff 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800723e:	e03e      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007240:	4b43      	ldr	r3, [pc, #268]	@ (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007242:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007244:	e03b      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007246:	4b41      	ldr	r3, [pc, #260]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800724c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007250:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007252:	4b3e      	ldr	r3, [pc, #248]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b02      	cmp	r3, #2
 800725c:	d10c      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800725e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d109      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007264:	4b39      	ldr	r3, [pc, #228]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	08db      	lsrs	r3, r3, #3
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	4a39      	ldr	r2, [pc, #228]	@ (8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007270:	fa22 f303 	lsr.w	r3, r2, r3
 8007274:	637b      	str	r3, [r7, #52]	@ 0x34
 8007276:	e01e      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007278:	4b34      	ldr	r3, [pc, #208]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007284:	d106      	bne.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800728c:	d102      	bne.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800728e:	4b32      	ldr	r3, [pc, #200]	@ (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007290:	637b      	str	r3, [r7, #52]	@ 0x34
 8007292:	e010      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007294:	4b2d      	ldr	r3, [pc, #180]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800729c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072a0:	d106      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80072a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072a8:	d102      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80072aa:	4b2c      	ldr	r3, [pc, #176]	@ (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80072ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ae:	e002      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80072b4:	e003      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80072b6:	e002      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072bc:	bf00      	nop
          }
        }
        break;
 80072be:	f001 bf70 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80072c2:	4b22      	ldr	r3, [pc, #136]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80072c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80072c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072cc:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d108      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072d4:	f107 0320 	add.w	r3, r7, #32
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fe ffd9 	bl	8006290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072e2:	f001 bf5e 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80072e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e8:	2b40      	cmp	r3, #64	@ 0x40
 80072ea:	d108      	bne.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072ec:	f107 0314 	add.w	r3, r7, #20
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff f937 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072fa:	f001 bf52 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007302:	f001 bf4e 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007306:	4b11      	ldr	r3, [pc, #68]	@ (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007308:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800730c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007310:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007314:	2b00      	cmp	r3, #0
 8007316:	d108      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007318:	f107 0320 	add.w	r3, r7, #32
 800731c:	4618      	mov	r0, r3
 800731e:	f7fe ffb7 	bl	8006290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007324:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007326:	f001 bf3c 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	2b80      	cmp	r3, #128	@ 0x80
 800732e:	d108      	bne.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007330:	f107 0314 	add.w	r3, r7, #20
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff f915 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800733e:	f001 bf30 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007346:	f001 bf2c 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800734a:	bf00      	nop
 800734c:	44020c00 	.word	0x44020c00
 8007350:	00bb8000 	.word	0x00bb8000
 8007354:	03d09000 	.word	0x03d09000
 8007358:	003d0900 	.word	0x003d0900
 800735c:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007360:	4b9d      	ldr	r3, [pc, #628]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007362:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800736c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736e:	2b00      	cmp	r3, #0
 8007370:	d104      	bne.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007372:	f7fc ff9f 	bl	80042b4 <HAL_RCC_GetPCLK2Freq>
 8007376:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007378:	f001 bf13 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800737c:	4b96      	ldr	r3, [pc, #600]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007388:	d10a      	bne.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800738a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738c:	2b01      	cmp	r3, #1
 800738e:	d107      	bne.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007390:	f107 0314 	add.w	r3, r7, #20
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff f8e5 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	637b      	str	r3, [r7, #52]	@ 0x34
 800739e:	e043      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80073a0:	4b8d      	ldr	r3, [pc, #564]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073ac:	d10a      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80073ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d107      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073b4:	f107 0308 	add.w	r3, r7, #8
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff fa3d 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c2:	e031      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80073c4:	4b84      	ldr	r3, [pc, #528]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d10c      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80073d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d109      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073d6:	4b80      	ldr	r3, [pc, #512]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	08db      	lsrs	r3, r3, #3
 80073dc:	f003 0303 	and.w	r3, r3, #3
 80073e0:	4a7e      	ldr	r2, [pc, #504]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80073e2:	fa22 f303 	lsr.w	r3, r2, r3
 80073e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e8:	e01e      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80073ea:	4b7b      	ldr	r3, [pc, #492]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073f6:	d105      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80073f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	d102      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80073fe:	4b78      	ldr	r3, [pc, #480]	@ (80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007400:	637b      	str	r3, [r7, #52]	@ 0x34
 8007402:	e011      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007404:	4b74      	ldr	r3, [pc, #464]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b02      	cmp	r3, #2
 8007410:	d106      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007414:	2b05      	cmp	r3, #5
 8007416:	d103      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007418:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800741c:	637b      	str	r3, [r7, #52]	@ 0x34
 800741e:	e003      	b.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007424:	f001 bebd 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007428:	f001 bebb 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800742c:	4b6a      	ldr	r3, [pc, #424]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800742e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007432:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007436:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743a:	2b00      	cmp	r3, #0
 800743c:	d104      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800743e:	f7fc ff23 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8007442:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007444:	f001 bead 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007448:	4b63      	ldr	r3, [pc, #396]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007450:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007454:	d10a      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8007456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007458:	2b08      	cmp	r3, #8
 800745a:	d107      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800745c:	f107 0314 	add.w	r3, r7, #20
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff f87f 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	637b      	str	r3, [r7, #52]	@ 0x34
 800746a:	e03d      	b.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800746c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746e:	2b10      	cmp	r3, #16
 8007470:	d108      	bne.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007472:	f107 0308 	add.w	r3, r7, #8
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff f9de 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007480:	f001 be8f 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007484:	4b54      	ldr	r3, [pc, #336]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b02      	cmp	r3, #2
 800748e:	d10c      	bne.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007492:	2b18      	cmp	r3, #24
 8007494:	d109      	bne.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007496:	4b50      	ldr	r3, [pc, #320]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	08db      	lsrs	r3, r3, #3
 800749c:	f003 0303 	and.w	r3, r3, #3
 80074a0:	4a4e      	ldr	r2, [pc, #312]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80074a2:	fa22 f303 	lsr.w	r3, r2, r3
 80074a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80074a8:	e01e      	b.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80074aa:	4b4b      	ldr	r3, [pc, #300]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074b6:	d105      	bne.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80074b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ba:	2b20      	cmp	r3, #32
 80074bc:	d102      	bne.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80074be:	4b48      	ldr	r3, [pc, #288]	@ (80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80074c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c2:	e011      	b.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80074c4:	4b44      	ldr	r3, [pc, #272]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80074c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d106      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80074d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d4:	2b28      	cmp	r3, #40	@ 0x28
 80074d6:	d103      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80074d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80074de:	e003      	b.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074e4:	f001 be5d 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80074e8:	f001 be5b 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80074ec:	4b3a      	ldr	r3, [pc, #232]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80074ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80074f2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80074f6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80074f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d104      	bne.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80074fe:	f7fc fec3 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8007502:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007504:	f001 be4d 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007508:	4b33      	ldr	r3, [pc, #204]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007510:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007514:	d10a      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007518:	2b40      	cmp	r3, #64	@ 0x40
 800751a:	d107      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800751c:	f107 0314 	add.w	r3, r7, #20
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff f81f 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	637b      	str	r3, [r7, #52]	@ 0x34
 800752a:	e045      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800752c:	4b2a      	ldr	r3, [pc, #168]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007538:	d10a      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800753a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753c:	2b80      	cmp	r3, #128	@ 0x80
 800753e:	d107      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007540:	f107 0308 	add.w	r3, r7, #8
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff f977 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	637b      	str	r3, [r7, #52]	@ 0x34
 800754e:	e033      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007550:	4b21      	ldr	r3, [pc, #132]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b02      	cmp	r3, #2
 800755a:	d10c      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800755c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007560:	d109      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007562:	4b1d      	ldr	r3, [pc, #116]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	08db      	lsrs	r3, r3, #3
 8007568:	f003 0303 	and.w	r3, r3, #3
 800756c:	4a1b      	ldr	r2, [pc, #108]	@ (80075dc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800756e:	fa22 f303 	lsr.w	r3, r2, r3
 8007572:	637b      	str	r3, [r7, #52]	@ 0x34
 8007574:	e020      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8007576:	4b18      	ldr	r3, [pc, #96]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800757e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007582:	d106      	bne.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8007584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800758a:	d102      	bne.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800758c:	4b14      	ldr	r3, [pc, #80]	@ (80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800758e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007590:	e012      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007592:	4b11      	ldr	r3, [pc, #68]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b02      	cmp	r3, #2
 800759e:	d107      	bne.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80075a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80075a6:	d103      	bne.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80075a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ae:	e003      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075b4:	f001 bdf5 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80075b8:	f001 bdf3 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80075bc:	4b06      	ldr	r3, [pc, #24]	@ (80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80075be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80075c2:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80075c6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80075c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10a      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80075ce:	f7fc fe5b 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 80075d2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80075d4:	f001 bde5 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80075d8:	44020c00 	.word	0x44020c00
 80075dc:	03d09000 	.word	0x03d09000
 80075e0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80075e4:	4ba0      	ldr	r3, [pc, #640]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075f0:	d10b      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80075f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075f8:	d107      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075fa:	f107 0314 	add.w	r3, r7, #20
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe ffb0 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	637b      	str	r3, [r7, #52]	@ 0x34
 8007608:	e047      	b.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800760a:	4b97      	ldr	r3, [pc, #604]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007616:	d10b      	bne.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800761e:	d107      	bne.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007620:	f107 0308 	add.w	r3, r7, #8
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff f907 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	637b      	str	r3, [r7, #52]	@ 0x34
 800762e:	e034      	b.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007630:	4b8d      	ldr	r3, [pc, #564]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b02      	cmp	r3, #2
 800763a:	d10d      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800763c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007642:	d109      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007644:	4b88      	ldr	r3, [pc, #544]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	08db      	lsrs	r3, r3, #3
 800764a:	f003 0303 	and.w	r3, r3, #3
 800764e:	4a87      	ldr	r2, [pc, #540]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007650:	fa22 f303 	lsr.w	r3, r2, r3
 8007654:	637b      	str	r3, [r7, #52]	@ 0x34
 8007656:	e020      	b.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007658:	4b83      	ldr	r3, [pc, #524]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007664:	d106      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800766c:	d102      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800766e:	4b80      	ldr	r3, [pc, #512]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007670:	637b      	str	r3, [r7, #52]	@ 0x34
 8007672:	e012      	b.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007674:	4b7c      	ldr	r3, [pc, #496]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b02      	cmp	r3, #2
 8007680:	d107      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007684:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007688:	d103      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800768a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800768e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007690:	e003      	b.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007696:	f001 bd84 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800769a:	f001 bd82 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800769e:	4b72      	ldr	r3, [pc, #456]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80076a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80076a4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80076a8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80076aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d104      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80076b0:	f7fc fdea 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 80076b4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80076b6:	f001 bd74 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80076ba:	4b6b      	ldr	r3, [pc, #428]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076c6:	d10b      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80076c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076ce:	d107      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076d0:	f107 0314 	add.w	r3, r7, #20
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe ff45 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80076de:	e047      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80076e0:	4b61      	ldr	r3, [pc, #388]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076ec:	d10b      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80076ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076f4:	d107      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076f6:	f107 0308 	add.w	r3, r7, #8
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff f89c 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	637b      	str	r3, [r7, #52]	@ 0x34
 8007704:	e034      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007706:	4b58      	ldr	r3, [pc, #352]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b02      	cmp	r3, #2
 8007710:	d10d      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007714:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007718:	d109      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800771a:	4b53      	ldr	r3, [pc, #332]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	08db      	lsrs	r3, r3, #3
 8007720:	f003 0303 	and.w	r3, r3, #3
 8007724:	4a51      	ldr	r2, [pc, #324]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007726:	fa22 f303 	lsr.w	r3, r2, r3
 800772a:	637b      	str	r3, [r7, #52]	@ 0x34
 800772c:	e020      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800772e:	4b4e      	ldr	r3, [pc, #312]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800773a:	d106      	bne.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007742:	d102      	bne.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8007744:	4b4a      	ldr	r3, [pc, #296]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007746:	637b      	str	r3, [r7, #52]	@ 0x34
 8007748:	e012      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800774a:	4b47      	ldr	r3, [pc, #284]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800774c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b02      	cmp	r3, #2
 8007756:	d107      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800775e:	d103      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8007760:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007764:	637b      	str	r3, [r7, #52]	@ 0x34
 8007766:	e003      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800776c:	f001 bd19 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007770:	f001 bd17 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007774:	4b3c      	ldr	r3, [pc, #240]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007776:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800777a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800777e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007786:	f7fc fd7f 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 800778a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800778c:	f001 bd09 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007790:	4b35      	ldr	r3, [pc, #212]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007798:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800779c:	d10b      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800779e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077a4:	d107      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077a6:	f107 0314 	add.w	r3, r7, #20
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe feda 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077b4:	e047      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80077b6:	4b2c      	ldr	r3, [pc, #176]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077c2:	d10b      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80077c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077ca:	d107      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077cc:	f107 0308 	add.w	r3, r7, #8
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff f831 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077da:	e034      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80077dc:	4b22      	ldr	r3, [pc, #136]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d10d      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80077e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ea:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80077ee:	d109      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	08db      	lsrs	r3, r3, #3
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	4a1c      	ldr	r2, [pc, #112]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80077fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007800:	637b      	str	r3, [r7, #52]	@ 0x34
 8007802:	e020      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007804:	4b18      	ldr	r3, [pc, #96]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800780c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007810:	d106      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007814:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007818:	d102      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800781a:	4b15      	ldr	r3, [pc, #84]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800781c:	637b      	str	r3, [r7, #52]	@ 0x34
 800781e:	e012      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007820:	4b11      	ldr	r3, [pc, #68]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b02      	cmp	r3, #2
 800782c:	d107      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007830:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007834:	d103      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8007836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800783a:	637b      	str	r3, [r7, #52]	@ 0x34
 800783c:	e003      	b.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007842:	f001 bcae 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007846:	f001 bcac 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800784a:	4b07      	ldr	r3, [pc, #28]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800784c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007850:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8007854:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8007856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10b      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800785c:	f7fc fd14 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8007860:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8007862:	f001 bc9e 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007866:	bf00      	nop
 8007868:	44020c00 	.word	0x44020c00
 800786c:	03d09000 	.word	0x03d09000
 8007870:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8007874:	4ba0      	ldr	r3, [pc, #640]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800787c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007880:	d10b      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007888:	d107      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800788a:	f107 0314 	add.w	r3, r7, #20
 800788e:	4618      	mov	r0, r3
 8007890:	f7fe fe68 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	637b      	str	r3, [r7, #52]	@ 0x34
 8007898:	e047      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800789a:	4b97      	ldr	r3, [pc, #604]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078a6:	d10b      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80078a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80078ae:	d107      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078b0:	f107 0308 	add.w	r3, r7, #8
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fe ffbf 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078be:	e034      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80078c0:	4b8d      	ldr	r3, [pc, #564]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d10d      	bne.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80078cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80078d2:	d109      	bne.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078d4:	4b88      	ldr	r3, [pc, #544]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	08db      	lsrs	r3, r3, #3
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	4a87      	ldr	r2, [pc, #540]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80078e0:	fa22 f303 	lsr.w	r3, r2, r3
 80078e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078e6:	e020      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80078e8:	4b83      	ldr	r3, [pc, #524]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078f4:	d106      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80078f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078fc:	d102      	bne.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80078fe:	4b80      	ldr	r3, [pc, #512]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007900:	637b      	str	r3, [r7, #52]	@ 0x34
 8007902:	e012      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8007904:	4b7c      	ldr	r3, [pc, #496]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b02      	cmp	r3, #2
 8007910:	d107      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8007912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007914:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007918:	d103      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800791a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800791e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007920:	e003      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007926:	f001 bc3c 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800792a:	f001 bc3a 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800792e:	4b72      	ldr	r3, [pc, #456]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007930:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007934:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007938:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800793a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793c:	2b00      	cmp	r3, #0
 800793e:	d104      	bne.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007940:	f7fc fca2 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8007944:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8007946:	f001 bc2c 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800794a:	4b6b      	ldr	r3, [pc, #428]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007952:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007956:	d10b      	bne.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800795e:	d107      	bne.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007960:	f107 0314 	add.w	r3, r7, #20
 8007964:	4618      	mov	r0, r3
 8007966:	f7fe fdfd 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	637b      	str	r3, [r7, #52]	@ 0x34
 800796e:	e047      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8007970:	4b61      	ldr	r3, [pc, #388]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800797c:	d10b      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800797e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007980:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007984:	d107      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007986:	f107 0308 	add.w	r3, r7, #8
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe ff54 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	637b      	str	r3, [r7, #52]	@ 0x34
 8007994:	e034      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8007996:	4b58      	ldr	r3, [pc, #352]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d10d      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 80079a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80079a8:	d109      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079aa:	4b53      	ldr	r3, [pc, #332]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	08db      	lsrs	r3, r3, #3
 80079b0:	f003 0303 	and.w	r3, r3, #3
 80079b4:	4a51      	ldr	r2, [pc, #324]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80079b6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80079bc:	e020      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80079be:	4b4e      	ldr	r3, [pc, #312]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079ca:	d106      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80079cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80079d2:	d102      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80079d4:	4b4a      	ldr	r3, [pc, #296]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80079d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079d8:	e012      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80079da:	4b47      	ldr	r3, [pc, #284]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80079dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d107      	bne.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80079e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ea:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80079ee:	d103      	bne.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80079f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f6:	e003      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079fc:	f001 bbd1 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a00:	f001 bbcf 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8007a04:	4b3c      	ldr	r3, [pc, #240]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007a0a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007a0e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8007a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d104      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a16:	f7fc fc37 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8007a1a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8007a1c:	f001 bbc1 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8007a20:	4b35      	ldr	r3, [pc, #212]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a2c:	d10b      	bne.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a34:	d107      	bne.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a36:	f107 0314 	add.w	r3, r7, #20
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fe fd92 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a44:	e047      	b.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8007a46:	4b2c      	ldr	r3, [pc, #176]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a52:	d10b      	bne.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8007a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a5a:	d107      	bne.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a5c:	f107 0308 	add.w	r3, r7, #8
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7fe fee9 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a6a:	e034      	b.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8007a6c:	4b22      	ldr	r3, [pc, #136]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d10d      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8007a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007a7e:	d109      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a80:	4b1d      	ldr	r3, [pc, #116]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	08db      	lsrs	r3, r3, #3
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a92:	e020      	b.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8007a94:	4b18      	ldr	r3, [pc, #96]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aa0:	d106      	bne.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007aa8:	d102      	bne.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8007aaa:	4b15      	ldr	r3, [pc, #84]	@ (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aae:	e012      	b.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8007ab0:	4b11      	ldr	r3, [pc, #68]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d107      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007ac4:	d103      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8007ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007acc:	e003      	b.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ad2:	f001 bb66 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ad6:	f001 bb64 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8007ada:	4b07      	ldr	r3, [pc, #28]	@ (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007ae0:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8007ae4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10b      	bne.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007aec:	f7fc fbcc 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8007af0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8007af2:	f001 bb56 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007af6:	bf00      	nop
 8007af8:	44020c00 	.word	0x44020c00
 8007afc:	03d09000 	.word	0x03d09000
 8007b00:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007b04:	4ba1      	ldr	r3, [pc, #644]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b10:	d10b      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8007b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b18:	d107      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b1a:	f107 0314 	add.w	r3, r7, #20
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe fd20 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b28:	e047      	b.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8007b2a:	4b98      	ldr	r3, [pc, #608]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b36:	d10b      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b3e:	d107      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b40:	f107 0308 	add.w	r3, r7, #8
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fe fe77 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b4e:	e034      	b.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8007b50:	4b8e      	ldr	r3, [pc, #568]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d10d      	bne.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007b62:	d109      	bne.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b64:	4b89      	ldr	r3, [pc, #548]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	08db      	lsrs	r3, r3, #3
 8007b6a:	f003 0303 	and.w	r3, r3, #3
 8007b6e:	4a88      	ldr	r2, [pc, #544]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007b70:	fa22 f303 	lsr.w	r3, r2, r3
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b76:	e020      	b.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8007b78:	4b84      	ldr	r3, [pc, #528]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b84:	d106      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b8c:	d102      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8007b8e:	4b81      	ldr	r3, [pc, #516]	@ (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b92:	e012      	b.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8007b94:	4b7d      	ldr	r3, [pc, #500]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d107      	bne.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba4:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007ba8:	d103      	bne.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8007baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb0:	e003      	b.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bb6:	f001 baf4 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bba:	f001 baf2 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8007bbe:	4b73      	ldr	r3, [pc, #460]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007bc0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007bc4:	f003 0307 	and.w	r3, r3, #7
 8007bc8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8007bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d104      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007bd0:	f7fc fb5a 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8007bd4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8007bd6:	f001 bae4 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8007bda:	4b6c      	ldr	r3, [pc, #432]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007be2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007be6:	d10a      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8007be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d107      	bne.n	8007bfe <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bee:	f107 0314 	add.w	r3, r7, #20
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe fcb6 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bfc:	e043      	b.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8007bfe:	4b63      	ldr	r3, [pc, #396]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c0a:	d10a      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d107      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c12:	f107 0308 	add.w	r3, r7, #8
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fe fe0e 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c20:	e031      	b.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8007c22:	4b5a      	ldr	r3, [pc, #360]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d10c      	bne.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d109      	bne.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c34:	4b55      	ldr	r3, [pc, #340]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	08db      	lsrs	r3, r3, #3
 8007c3a:	f003 0303 	and.w	r3, r3, #3
 8007c3e:	4a54      	ldr	r2, [pc, #336]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007c40:	fa22 f303 	lsr.w	r3, r2, r3
 8007c44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c46:	e01e      	b.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8007c48:	4b50      	ldr	r3, [pc, #320]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c54:	d105      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8007c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c58:	2b04      	cmp	r3, #4
 8007c5a:	d102      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8007c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c60:	e011      	b.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8007c62:	4b4a      	ldr	r3, [pc, #296]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d106      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8007c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c72:	2b05      	cmp	r3, #5
 8007c74:	d103      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8007c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c7c:	e003      	b.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c82:	f001 ba8e 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c86:	f001 ba8c 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8007c8a:	4b40      	ldr	r3, [pc, #256]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007c8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007c90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c94:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8007c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d104      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c9c:	f7fc faf4 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8007ca0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8007ca2:	f001 ba7e 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8007ca6:	4b39      	ldr	r3, [pc, #228]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cb2:	d10a      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb6:	2b10      	cmp	r3, #16
 8007cb8:	d107      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cba:	f107 0314 	add.w	r3, r7, #20
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fe fc50 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cc8:	e043      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8007cca:	4b30      	ldr	r3, [pc, #192]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cd6:	d10a      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	d107      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cde:	f107 0308 	add.w	r3, r7, #8
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe fda8 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cec:	e031      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8007cee:	4b27      	ldr	r3, [pc, #156]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0302 	and.w	r3, r3, #2
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d10c      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfc:	2b30      	cmp	r3, #48	@ 0x30
 8007cfe:	d109      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d00:	4b22      	ldr	r3, [pc, #136]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	08db      	lsrs	r3, r3, #3
 8007d06:	f003 0303 	and.w	r3, r3, #3
 8007d0a:	4a21      	ldr	r2, [pc, #132]	@ (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d12:	e01e      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8007d14:	4b1d      	ldr	r3, [pc, #116]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d20:	d105      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8007d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d24:	2b40      	cmp	r3, #64	@ 0x40
 8007d26:	d102      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8007d28:	4b1a      	ldr	r3, [pc, #104]	@ (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d2c:	e011      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8007d2e:	4b17      	ldr	r3, [pc, #92]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d34:	f003 0302 	and.w	r3, r3, #2
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d106      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3e:	2b50      	cmp	r3, #80	@ 0x50
 8007d40:	d103      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8007d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d48:	e003      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d4e:	f001 ba28 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d52:	f001 ba26 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007d56:	4b0d      	ldr	r3, [pc, #52]	@ (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d5c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007d60:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d104      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007d68:	f7fc faba 	bl	80042e0 <HAL_RCC_GetPCLK3Freq>
 8007d6c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d6e:	f001 ba18 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8007d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d78:	d10e      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d7a:	f107 0314 	add.w	r3, r7, #20
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fe fbf0 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d88:	f001 ba0b 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d8c:	44020c00 	.word	0x44020c00
 8007d90:	03d09000 	.word	0x03d09000
 8007d94:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8007d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d9e:	d108      	bne.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007da0:	f107 0308 	add.w	r3, r7, #8
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fe fd47 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007dae:	f001 b9f8 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007db2:	4ba4      	ldr	r3, [pc, #656]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d10d      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007dc4:	d109      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007dc6:	4b9f      	ldr	r3, [pc, #636]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	08db      	lsrs	r3, r3, #3
 8007dcc:	f003 0303 	and.w	r3, r3, #3
 8007dd0:	4a9d      	ldr	r2, [pc, #628]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dd8:	e020      	b.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007dda:	4b9a      	ldr	r3, [pc, #616]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007de2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de6:	d106      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8007de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007dee:	d102      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8007df0:	4b96      	ldr	r3, [pc, #600]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007df4:	e012      	b.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007df6:	4b93      	ldr	r3, [pc, #588]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d107      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8007e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e06:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007e0a:	d103      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8007e0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e12:	e003      	b.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e18:	f001 b9c3 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e1c:	f001 b9c1 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007e20:	4b88      	ldr	r3, [pc, #544]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007e22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e26:	f003 0307 	and.w	r3, r3, #7
 8007e2a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d104      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007e32:	f7fc fa0d 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 8007e36:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8007e38:	f001 b9b3 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d104      	bne.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8007e42:	f7fc f8d9 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8007e46:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007e48:	f001 b9ab 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d108      	bne.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e52:	f107 0314 	add.w	r3, r7, #20
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe fb84 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e60:	f001 b99f 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007e64:	4b77      	ldr	r3, [pc, #476]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e70:	d105      	bne.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8007e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d102      	bne.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8007e78:	4b75      	ldr	r3, [pc, #468]	@ (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8007e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e7c:	e023      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007e7e:	4b71      	ldr	r3, [pc, #452]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0302 	and.w	r3, r3, #2
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d10c      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	d109      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e90:	4b6c      	ldr	r3, [pc, #432]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	08db      	lsrs	r3, r3, #3
 8007e96:	f003 0303 	and.w	r3, r3, #3
 8007e9a:	4a6b      	ldr	r2, [pc, #428]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea2:	e010      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007ea4:	4b67      	ldr	r3, [pc, #412]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eb0:	d105      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	2b05      	cmp	r3, #5
 8007eb6:	d102      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8007eb8:	4b64      	ldr	r3, [pc, #400]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ebc:	e003      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ec2:	f001 b96e 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ec6:	f001 b96c 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007eca:	4b5e      	ldr	r3, [pc, #376]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ed0:	f003 0308 	and.w	r3, r3, #8
 8007ed4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8007ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007edc:	f003 0302 	and.w	r3, r3, #2
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d106      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d103      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8007eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef0:	e012      	b.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8007ef2:	4b54      	ldr	r3, [pc, #336]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ef8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007efc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f00:	d106      	bne.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8007f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f04:	2b08      	cmp	r3, #8
 8007f06:	d103      	bne.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8007f08:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f0e:	e003      	b.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007f14:	f001 b945 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f18:	f001 b943 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007f1c:	4b49      	ldr	r3, [pc, #292]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007f26:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d104      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f2e:	f7fc f9ab 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8007f32:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f34:	f001 b935 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8007f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f3e:	d108      	bne.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f40:	f107 0308 	add.w	r3, r7, #8
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7fe fc77 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f4e:	f001 b928 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007f52:	4b3c      	ldr	r3, [pc, #240]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d10d      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f64:	d109      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f66:	4b37      	ldr	r3, [pc, #220]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	08db      	lsrs	r3, r3, #3
 8007f6c:	f003 0303 	and.w	r3, r3, #3
 8007f70:	4a35      	ldr	r2, [pc, #212]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007f72:	fa22 f303 	lsr.w	r3, r2, r3
 8007f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f78:	e011      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8007f7a:	4b32      	ldr	r3, [pc, #200]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f86:	d106      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8007f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f8e:	d102      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8007f90:	4b2e      	ldr	r3, [pc, #184]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f94:	e003      	b.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8007f96:	2300      	movs	r3, #0
 8007f98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f9a:	f001 b902 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f9e:	f001 b900 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007fa2:	4b28      	ldr	r3, [pc, #160]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007fa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fa8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007fac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d104      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007fb4:	f7fc f968 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8007fb8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007fba:	f001 b8f2 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007fc4:	d108      	bne.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fc6:	f107 0308 	add.w	r3, r7, #8
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe fc34 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fd4:	f001 b8e5 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0302 	and.w	r3, r3, #2
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d10d      	bne.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007fea:	d109      	bne.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fec:	4b15      	ldr	r3, [pc, #84]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	08db      	lsrs	r3, r3, #3
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	4a14      	ldr	r2, [pc, #80]	@ (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ffe:	e011      	b.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008000:	4b10      	ldr	r3, [pc, #64]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800800c:	d106      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800800e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008010:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008014:	d102      	bne.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8008016:	4b0d      	ldr	r3, [pc, #52]	@ (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008018:	637b      	str	r3, [r7, #52]	@ 0x34
 800801a:	e003      	b.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008020:	f001 b8bf 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008024:	f001 b8bd 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008028:	4b06      	ldr	r3, [pc, #24]	@ (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800802a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800802e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008032:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10c      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800803a:	f7fc f951 	bl	80042e0 <HAL_RCC_GetPCLK3Freq>
 800803e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008040:	f001 b8af 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008044:	44020c00 	.word	0x44020c00
 8008048:	03d09000 	.word	0x03d09000
 800804c:	003d0900 	.word	0x003d0900
 8008050:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008056:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800805a:	d108      	bne.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800805c:	f107 0308 	add.w	r3, r7, #8
 8008060:	4618      	mov	r0, r3
 8008062:	f7fe fbe9 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800806a:	f001 b89a 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800806e:	4b9f      	ldr	r3, [pc, #636]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	2b02      	cmp	r3, #2
 8008078:	d10d      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800807a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008080:	d109      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008082:	4b9a      	ldr	r3, [pc, #616]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	08db      	lsrs	r3, r3, #3
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	4a98      	ldr	r2, [pc, #608]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800808e:	fa22 f303 	lsr.w	r3, r2, r3
 8008092:	637b      	str	r3, [r7, #52]	@ 0x34
 8008094:	e011      	b.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008096:	4b95      	ldr	r3, [pc, #596]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800809e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080a2:	d106      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80080a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080aa:	d102      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 80080ac:	4b91      	ldr	r3, [pc, #580]	@ (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80080ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80080b0:	e003      	b.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080b6:	f001 b874 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080ba:	f001 b872 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80080be:	4b8b      	ldr	r3, [pc, #556]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80080c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080c4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80080c8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d104      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80080d0:	f7fc f906 	bl	80042e0 <HAL_RCC_GetPCLK3Freq>
 80080d4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80080d6:	f001 b864 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80080da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080e0:	d108      	bne.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080e2:	f107 0308 	add.w	r3, r7, #8
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fe fba6 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080f0:	f001 b857 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80080f4:	4b7d      	ldr	r3, [pc, #500]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d10d      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008102:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008106:	d109      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008108:	4b78      	ldr	r3, [pc, #480]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	08db      	lsrs	r3, r3, #3
 800810e:	f003 0303 	and.w	r3, r3, #3
 8008112:	4a77      	ldr	r2, [pc, #476]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008114:	fa22 f303 	lsr.w	r3, r2, r3
 8008118:	637b      	str	r3, [r7, #52]	@ 0x34
 800811a:	e011      	b.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800811c:	4b73      	ldr	r3, [pc, #460]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008128:	d106      	bne.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008130:	d102      	bne.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8008132:	4b70      	ldr	r3, [pc, #448]	@ (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008134:	637b      	str	r3, [r7, #52]	@ 0x34
 8008136:	e003      	b.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008138:	2300      	movs	r3, #0
 800813a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800813c:	f001 b831 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008140:	f001 b82f 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008144:	4b69      	ldr	r3, [pc, #420]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008146:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800814a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800814e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008152:	2b00      	cmp	r3, #0
 8008154:	d104      	bne.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008156:	f7fc f897 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 800815a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800815c:	f001 b821 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008162:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008166:	d108      	bne.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008168:	f107 0308 	add.w	r3, r7, #8
 800816c:	4618      	mov	r0, r3
 800816e:	f7fe fb63 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008176:	f001 b814 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800817a:	4b5c      	ldr	r3, [pc, #368]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b02      	cmp	r3, #2
 8008184:	d10e      	bne.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8008186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008188:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800818c:	d10a      	bne.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800818e:	4b57      	ldr	r3, [pc, #348]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	08db      	lsrs	r3, r3, #3
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	4a55      	ldr	r2, [pc, #340]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800819a:	fa22 f303 	lsr.w	r3, r2, r3
 800819e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081a0:	f000 bfff 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081a8:	f000 bffb 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80081ac:	4b4f      	ldr	r3, [pc, #316]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80081ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80081b2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80081b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80081b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ba:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80081be:	d056      	beq.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80081c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80081c6:	f200 808b 	bhi.w	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80081ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081d0:	d03e      	beq.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80081d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081d8:	f200 8082 	bhi.w	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80081dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081e2:	d027      	beq.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80081e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081ea:	d879      	bhi.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80081ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081f2:	d017      	beq.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80081f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081fa:	d871      	bhi.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80081fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d004      	beq.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8008202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008208:	d004      	beq.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800820a:	e069      	b.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800820c:	f7fc f868 	bl	80042e0 <HAL_RCC_GetPCLK3Freq>
 8008210:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008212:	e068      	b.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008214:	f107 0314 	add.w	r3, r7, #20
 8008218:	4618      	mov	r0, r3
 800821a:	f7fe f9a3 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008222:	e060      	b.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008224:	f107 0308 	add.w	r3, r7, #8
 8008228:	4618      	mov	r0, r3
 800822a:	f7fe fb05 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008232:	e058      	b.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008234:	4b2d      	ldr	r3, [pc, #180]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008236:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	2b02      	cmp	r3, #2
 8008240:	d103      	bne.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8008242:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008246:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008248:	e04d      	b.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800824e:	e04a      	b.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008250:	4b26      	ldr	r3, [pc, #152]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008256:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800825a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800825e:	d103      	bne.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8008260:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008264:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008266:	e03e      	b.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800826c:	e03b      	b.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800826e:	4b1f      	ldr	r3, [pc, #124]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008274:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008278:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800827a:	4b1c      	ldr	r3, [pc, #112]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	2b02      	cmp	r3, #2
 8008284:	d10c      	bne.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8008286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008288:	2b00      	cmp	r3, #0
 800828a:	d109      	bne.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800828c:	4b17      	ldr	r3, [pc, #92]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	08db      	lsrs	r3, r3, #3
 8008292:	f003 0303 	and.w	r3, r3, #3
 8008296:	4a16      	ldr	r2, [pc, #88]	@ (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008298:	fa22 f303 	lsr.w	r3, r2, r3
 800829c:	637b      	str	r3, [r7, #52]	@ 0x34
 800829e:	e01e      	b.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082a0:	4b12      	ldr	r3, [pc, #72]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082ac:	d106      	bne.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 80082ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082b4:	d102      	bne.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80082b6:	4b0f      	ldr	r3, [pc, #60]	@ (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80082b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ba:	e010      	b.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082bc:	4b0b      	ldr	r3, [pc, #44]	@ (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082c8:	d106      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80082ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082d0:	d102      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80082d2:	4b09      	ldr	r3, [pc, #36]	@ (80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80082d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d6:	e002      	b.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80082dc:	e003      	b.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80082de:	e002      	b.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082e4:	bf00      	nop
          }
        }
        break;
 80082e6:	f000 bf5c 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082ea:	bf00      	nop
 80082ec:	44020c00 	.word	0x44020c00
 80082f0:	03d09000 	.word	0x03d09000
 80082f4:	003d0900 	.word	0x003d0900
 80082f8:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80082fc:	4b9e      	ldr	r3, [pc, #632]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80082fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008302:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008306:	633b      	str	r3, [r7, #48]	@ 0x30
 8008308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800830e:	d056      	beq.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008312:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008316:	f200 808b 	bhi.w	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800831a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008320:	d03e      	beq.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8008322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008324:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008328:	f200 8082 	bhi.w	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800832c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008332:	d027      	beq.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8008334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008336:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800833a:	d879      	bhi.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800833c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008342:	d017      	beq.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8008344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800834a:	d871      	bhi.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800834c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834e:	2b00      	cmp	r3, #0
 8008350:	d004      	beq.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8008352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008358:	d004      	beq.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800835a:	e069      	b.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800835c:	f7fb ff94 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 8008360:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008362:	e068      	b.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008364:	f107 0314 	add.w	r3, r7, #20
 8008368:	4618      	mov	r0, r3
 800836a:	f7fe f8fb 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008372:	e060      	b.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008374:	f107 0308 	add.w	r3, r7, #8
 8008378:	4618      	mov	r0, r3
 800837a:	f7fe fa5d 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008382:	e058      	b.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008384:	4b7c      	ldr	r3, [pc, #496]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008386:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b02      	cmp	r3, #2
 8008390:	d103      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8008392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008396:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008398:	e04d      	b.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800839e:	e04a      	b.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80083a0:	4b75      	ldr	r3, [pc, #468]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80083a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083ae:	d103      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80083b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80083b4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80083b6:	e03e      	b.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083bc:	e03b      	b.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083be:	4b6e      	ldr	r3, [pc, #440]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80083c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083c4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80083c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083ca:	4b6b      	ldr	r3, [pc, #428]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d10c      	bne.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80083d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d109      	bne.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083dc:	4b66      	ldr	r3, [pc, #408]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	08db      	lsrs	r3, r3, #3
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	4a65      	ldr	r2, [pc, #404]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80083e8:	fa22 f303 	lsr.w	r3, r2, r3
 80083ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ee:	e01e      	b.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083f0:	4b61      	ldr	r3, [pc, #388]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083fc:	d106      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80083fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008404:	d102      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008406:	4b5e      	ldr	r3, [pc, #376]	@ (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008408:	637b      	str	r3, [r7, #52]	@ 0x34
 800840a:	e010      	b.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800840c:	4b5a      	ldr	r3, [pc, #360]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008414:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008418:	d106      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800841a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008420:	d102      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008422:	4b58      	ldr	r3, [pc, #352]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008424:	637b      	str	r3, [r7, #52]	@ 0x34
 8008426:	e002      	b.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800842c:	e003      	b.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800842e:	e002      	b.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8008430:	2300      	movs	r3, #0
 8008432:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008434:	bf00      	nop
          }
        }
        break;
 8008436:	f000 beb4 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800843a:	4b4f      	ldr	r3, [pc, #316]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800843c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008440:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008444:	633b      	str	r3, [r7, #48]	@ 0x30
 8008446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800844c:	d056      	beq.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008454:	f200 808b 	bhi.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800845e:	d03e      	beq.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8008460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008462:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008466:	f200 8082 	bhi.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008470:	d027      	beq.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8008472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008474:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008478:	d879      	bhi.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800847a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008480:	d017      	beq.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8008482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008484:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008488:	d871      	bhi.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800848a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8008490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008496:	d004      	beq.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8008498:	e069      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800849a:	f7fb ff21 	bl	80042e0 <HAL_RCC_GetPCLK3Freq>
 800849e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80084a0:	e068      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084a2:	f107 0314 	add.w	r3, r7, #20
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe f85c 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80084b0:	e060      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084b2:	f107 0308 	add.w	r3, r7, #8
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fe f9be 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80084c0:	e058      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80084c2:	4b2d      	ldr	r3, [pc, #180]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80084c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d103      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80084d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084d4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80084d6:	e04d      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80084d8:	2300      	movs	r3, #0
 80084da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80084dc:	e04a      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80084de:	4b26      	ldr	r3, [pc, #152]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80084e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084ec:	d103      	bne.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80084ee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80084f2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80084f4:	e03e      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80084fa:	e03b      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084fc:	4b1e      	ldr	r3, [pc, #120]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80084fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008502:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008506:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008508:	4b1b      	ldr	r3, [pc, #108]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0302 	and.w	r3, r3, #2
 8008510:	2b02      	cmp	r3, #2
 8008512:	d10c      	bne.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d109      	bne.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800851a:	4b17      	ldr	r3, [pc, #92]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	08db      	lsrs	r3, r3, #3
 8008520:	f003 0303 	and.w	r3, r3, #3
 8008524:	4a15      	ldr	r2, [pc, #84]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008526:	fa22 f303 	lsr.w	r3, r2, r3
 800852a:	637b      	str	r3, [r7, #52]	@ 0x34
 800852c:	e01e      	b.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800852e:	4b12      	ldr	r3, [pc, #72]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008536:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800853a:	d106      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800853c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008542:	d102      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008544:	4b0e      	ldr	r3, [pc, #56]	@ (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008546:	637b      	str	r3, [r7, #52]	@ 0x34
 8008548:	e010      	b.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800854a:	4b0b      	ldr	r3, [pc, #44]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008556:	d106      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8008558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800855e:	d102      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008560:	4b08      	ldr	r3, [pc, #32]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008562:	637b      	str	r3, [r7, #52]	@ 0x34
 8008564:	e002      	b.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800856a:	e003      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800856c:	e002      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800856e:	2300      	movs	r3, #0
 8008570:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008572:	bf00      	nop
          }
        }
        break;
 8008574:	f000 be15 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008578:	44020c00 	.word	0x44020c00
 800857c:	03d09000 	.word	0x03d09000
 8008580:	003d0900 	.word	0x003d0900
 8008584:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008588:	4b9e      	ldr	r3, [pc, #632]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800858a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800858e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8008592:	633b      	str	r3, [r7, #48]	@ 0x30
 8008594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008596:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800859a:	d056      	beq.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800859c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80085a2:	f200 808b 	bhi.w	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80085a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085ac:	d03e      	beq.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80085ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085b4:	f200 8082 	bhi.w	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80085be:	d027      	beq.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80085c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80085c6:	d879      	bhi.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80085c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085ce:	d017      	beq.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80085d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085d6:	d871      	bhi.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80085d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d004      	beq.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80085de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085e4:	d004      	beq.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80085e6:	e069      	b.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80085e8:	f7fb fe7a 	bl	80042e0 <HAL_RCC_GetPCLK3Freq>
 80085ec:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80085ee:	e068      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085f0:	f107 0314 	add.w	r3, r7, #20
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fd ffb5 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80085fe:	e060      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008600:	f107 0308 	add.w	r3, r7, #8
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe f917 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800860e:	e058      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008610:	4b7c      	ldr	r3, [pc, #496]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008616:	f003 0302 	and.w	r3, r3, #2
 800861a:	2b02      	cmp	r3, #2
 800861c:	d103      	bne.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800861e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008622:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008624:	e04d      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008626:	2300      	movs	r3, #0
 8008628:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800862a:	e04a      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800862c:	4b75      	ldr	r3, [pc, #468]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800862e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008632:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008636:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800863a:	d103      	bne.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800863c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008640:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008642:	e03e      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008644:	2300      	movs	r3, #0
 8008646:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008648:	e03b      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800864a:	4b6e      	ldr	r3, [pc, #440]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800864c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008650:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008654:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008656:	4b6b      	ldr	r3, [pc, #428]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0302 	and.w	r3, r3, #2
 800865e:	2b02      	cmp	r3, #2
 8008660:	d10c      	bne.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8008662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008664:	2b00      	cmp	r3, #0
 8008666:	d109      	bne.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008668:	4b66      	ldr	r3, [pc, #408]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	08db      	lsrs	r3, r3, #3
 800866e:	f003 0303 	and.w	r3, r3, #3
 8008672:	4a65      	ldr	r2, [pc, #404]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008674:	fa22 f303 	lsr.w	r3, r2, r3
 8008678:	637b      	str	r3, [r7, #52]	@ 0x34
 800867a:	e01e      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800867c:	4b61      	ldr	r3, [pc, #388]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008688:	d106      	bne.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800868a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008690:	d102      	bne.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008692:	4b5e      	ldr	r3, [pc, #376]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008694:	637b      	str	r3, [r7, #52]	@ 0x34
 8008696:	e010      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008698:	4b5a      	ldr	r3, [pc, #360]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086a4:	d106      	bne.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80086a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086ac:	d102      	bne.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80086ae:	4b58      	ldr	r3, [pc, #352]	@ (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80086b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b2:	e002      	b.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80086b4:	2300      	movs	r3, #0
 80086b6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80086b8:	e003      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80086ba:	e002      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80086bc:	2300      	movs	r3, #0
 80086be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086c0:	bf00      	nop
          }
        }
        break;
 80086c2:	f000 bd6e 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80086c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80086c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80086cc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80086d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80086d8:	d056      	beq.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80086da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086dc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80086e0:	f200 808b 	bhi.w	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80086e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086ea:	d03e      	beq.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80086ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086f2:	f200 8082 	bhi.w	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80086f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80086fc:	d027      	beq.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80086fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008700:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008704:	d879      	bhi.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800870c:	d017      	beq.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800870e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008710:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008714:	d871      	bhi.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	2b00      	cmp	r3, #0
 800871a:	d004      	beq.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800871c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008722:	d004      	beq.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008724:	e069      	b.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008726:	f7fb fddb 	bl	80042e0 <HAL_RCC_GetPCLK3Freq>
 800872a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800872c:	e068      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800872e:	f107 0314 	add.w	r3, r7, #20
 8008732:	4618      	mov	r0, r3
 8008734:	f7fd ff16 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800873c:	e060      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800873e:	f107 0308 	add.w	r3, r7, #8
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe f878 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800874c:	e058      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800874e:	4b2d      	ldr	r3, [pc, #180]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008754:	f003 0302 	and.w	r3, r3, #2
 8008758:	2b02      	cmp	r3, #2
 800875a:	d103      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800875c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008760:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008762:	e04d      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008764:	2300      	movs	r3, #0
 8008766:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008768:	e04a      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800876a:	4b26      	ldr	r3, [pc, #152]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800876c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008770:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008774:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008778:	d103      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800877a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800877e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008780:	e03e      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008782:	2300      	movs	r3, #0
 8008784:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008786:	e03b      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008788:	4b1e      	ldr	r3, [pc, #120]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800878a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800878e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008792:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008794:	4b1b      	ldr	r3, [pc, #108]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0302 	and.w	r3, r3, #2
 800879c:	2b02      	cmp	r3, #2
 800879e:	d10c      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 80087a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d109      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087a6:	4b17      	ldr	r3, [pc, #92]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	08db      	lsrs	r3, r3, #3
 80087ac:	f003 0303 	and.w	r3, r3, #3
 80087b0:	4a15      	ldr	r2, [pc, #84]	@ (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80087b2:	fa22 f303 	lsr.w	r3, r2, r3
 80087b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80087b8:	e01e      	b.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087ba:	4b12      	ldr	r3, [pc, #72]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087c6:	d106      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80087c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087ce:	d102      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80087d0:	4b0e      	ldr	r3, [pc, #56]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80087d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087d4:	e010      	b.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087e2:	d106      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80087e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087ea:	d102      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80087ec:	4b08      	ldr	r3, [pc, #32]	@ (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80087ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f0:	e002      	b.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80087f6:	e003      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80087f8:	e002      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80087fa:	2300      	movs	r3, #0
 80087fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80087fe:	bf00      	nop
          }
        }
        break;
 8008800:	f000 bccf 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008804:	44020c00 	.word	0x44020c00
 8008808:	03d09000 	.word	0x03d09000
 800880c:	003d0900 	.word	0x003d0900
 8008810:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008814:	4b9e      	ldr	r3, [pc, #632]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008816:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800881a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800881e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008822:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008826:	d056      	beq.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8008828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800882e:	f200 808b 	bhi.w	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008838:	d03e      	beq.n	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800883a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008840:	f200 8082 	bhi.w	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008846:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800884a:	d027      	beq.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800884c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008852:	d879      	bhi.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800885a:	d017      	beq.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800885c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008862:	d871      	bhi.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	2b00      	cmp	r3, #0
 8008868:	d004      	beq.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008870:	d004      	beq.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8008872:	e069      	b.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008874:	f7fb fd34 	bl	80042e0 <HAL_RCC_GetPCLK3Freq>
 8008878:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800887a:	e068      	b.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800887c:	f107 0314 	add.w	r3, r7, #20
 8008880:	4618      	mov	r0, r3
 8008882:	f7fd fe6f 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800888a:	e060      	b.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800888c:	f107 0308 	add.w	r3, r7, #8
 8008890:	4618      	mov	r0, r3
 8008892:	f7fd ffd1 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800889a:	e058      	b.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800889c:	4b7c      	ldr	r3, [pc, #496]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800889e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088a2:	f003 0302 	and.w	r3, r3, #2
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d103      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80088aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088ae:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80088b0:	e04d      	b.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80088b6:	e04a      	b.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80088b8:	4b75      	ldr	r3, [pc, #468]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80088ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088c6:	d103      	bne.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80088c8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80088cc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80088ce:	e03e      	b.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80088d4:	e03b      	b.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088d6:	4b6e      	ldr	r3, [pc, #440]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80088d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088dc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80088e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088e2:	4b6b      	ldr	r3, [pc, #428]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0302 	and.w	r3, r3, #2
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d10c      	bne.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80088ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d109      	bne.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088f4:	4b66      	ldr	r3, [pc, #408]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	08db      	lsrs	r3, r3, #3
 80088fa:	f003 0303 	and.w	r3, r3, #3
 80088fe:	4a65      	ldr	r2, [pc, #404]	@ (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008900:	fa22 f303 	lsr.w	r3, r2, r3
 8008904:	637b      	str	r3, [r7, #52]	@ 0x34
 8008906:	e01e      	b.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008908:	4b61      	ldr	r3, [pc, #388]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008914:	d106      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8008916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800891c:	d102      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800891e:	4b5e      	ldr	r3, [pc, #376]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008920:	637b      	str	r3, [r7, #52]	@ 0x34
 8008922:	e010      	b.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008924:	4b5a      	ldr	r3, [pc, #360]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800892c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008930:	d106      	bne.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8008932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008934:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008938:	d102      	bne.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800893a:	4b58      	ldr	r3, [pc, #352]	@ (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800893c:	637b      	str	r3, [r7, #52]	@ 0x34
 800893e:	e002      	b.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008940:	2300      	movs	r3, #0
 8008942:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008944:	e003      	b.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8008946:	e002      	b.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8008948:	2300      	movs	r3, #0
 800894a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800894c:	bf00      	nop
          }
        }
        break;
 800894e:	f000 bc28 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008952:	4b4f      	ldr	r3, [pc, #316]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008958:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800895c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800895e:	4b4c      	ldr	r3, [pc, #304]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800896a:	d106      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800896c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896e:	2b00      	cmp	r3, #0
 8008970:	d103      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8008972:	4b4a      	ldr	r3, [pc, #296]	@ (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008974:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8008976:	f000 bc14 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800897a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008980:	d108      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008982:	f107 0320 	add.w	r3, r7, #32
 8008986:	4618      	mov	r0, r3
 8008988:	f7fd fc82 	bl	8006290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800898c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008990:	f000 bc07 	b.w	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800899a:	d107      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800899c:	f107 0314 	add.w	r3, r7, #20
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fd fddf 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089aa:	e3fa      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089b0:	e3f7      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80089b2:	4b37      	ldr	r3, [pc, #220]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80089b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80089be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c0:	2b04      	cmp	r3, #4
 80089c2:	d861      	bhi.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80089c4:	a201      	add	r2, pc, #4	@ (adr r2, 80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80089c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ca:	bf00      	nop
 80089cc:	080089e1 	.word	0x080089e1
 80089d0:	080089f1 	.word	0x080089f1
 80089d4:	08008a01 	.word	0x08008a01
 80089d8:	08008a11 	.word	0x08008a11
 80089dc:	08008a17 	.word	0x08008a17
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089e0:	f107 0320 	add.w	r3, r7, #32
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7fd fc53 	bl	8006290 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80089ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80089ee:	e04e      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089f0:	f107 0314 	add.w	r3, r7, #20
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fd fdb5 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80089fe:	e046      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a00:	f107 0308 	add.w	r3, r7, #8
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7fd ff17 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a0e:	e03e      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008a10:	4b23      	ldr	r3, [pc, #140]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8008a12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a14:	e03b      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a16:	4b1e      	ldr	r3, [pc, #120]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a1c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008a20:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a22:	4b1b      	ldr	r3, [pc, #108]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d10c      	bne.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8008a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d109      	bne.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a34:	4b16      	ldr	r3, [pc, #88]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	08db      	lsrs	r3, r3, #3
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	4a15      	ldr	r2, [pc, #84]	@ (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008a40:	fa22 f303 	lsr.w	r3, r2, r3
 8008a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a46:	e01e      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a48:	4b11      	ldr	r3, [pc, #68]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a54:	d106      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8008a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a5c:	d102      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a62:	e010      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a64:	4b0a      	ldr	r3, [pc, #40]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a70:	d106      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8008a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a78:	d102      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008a7a:	4b08      	ldr	r3, [pc, #32]	@ (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a7e:	e002      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008a84:	e003      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8008a86:	e002      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a8c:	bf00      	nop
          }
        }
        break;
 8008a8e:	e388      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a90:	44020c00 	.word	0x44020c00
 8008a94:	03d09000 	.word	0x03d09000
 8008a98:	003d0900 	.word	0x003d0900
 8008a9c:	007a1200 	.word	0x007a1200
 8008aa0:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008aa4:	4ba9      	ldr	r3, [pc, #676]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008aaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008aae:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab2:	2b20      	cmp	r3, #32
 8008ab4:	f200 809a 	bhi.w	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8008ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8008aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abe:	bf00      	nop
 8008ac0:	08008b45 	.word	0x08008b45
 8008ac4:	08008bed 	.word	0x08008bed
 8008ac8:	08008bed 	.word	0x08008bed
 8008acc:	08008bed 	.word	0x08008bed
 8008ad0:	08008bed 	.word	0x08008bed
 8008ad4:	08008bed 	.word	0x08008bed
 8008ad8:	08008bed 	.word	0x08008bed
 8008adc:	08008bed 	.word	0x08008bed
 8008ae0:	08008b55 	.word	0x08008b55
 8008ae4:	08008bed 	.word	0x08008bed
 8008ae8:	08008bed 	.word	0x08008bed
 8008aec:	08008bed 	.word	0x08008bed
 8008af0:	08008bed 	.word	0x08008bed
 8008af4:	08008bed 	.word	0x08008bed
 8008af8:	08008bed 	.word	0x08008bed
 8008afc:	08008bed 	.word	0x08008bed
 8008b00:	08008b65 	.word	0x08008b65
 8008b04:	08008bed 	.word	0x08008bed
 8008b08:	08008bed 	.word	0x08008bed
 8008b0c:	08008bed 	.word	0x08008bed
 8008b10:	08008bed 	.word	0x08008bed
 8008b14:	08008bed 	.word	0x08008bed
 8008b18:	08008bed 	.word	0x08008bed
 8008b1c:	08008bed 	.word	0x08008bed
 8008b20:	08008b75 	.word	0x08008b75
 8008b24:	08008bed 	.word	0x08008bed
 8008b28:	08008bed 	.word	0x08008bed
 8008b2c:	08008bed 	.word	0x08008bed
 8008b30:	08008bed 	.word	0x08008bed
 8008b34:	08008bed 	.word	0x08008bed
 8008b38:	08008bed 	.word	0x08008bed
 8008b3c:	08008bed 	.word	0x08008bed
 8008b40:	08008b7b 	.word	0x08008b7b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b44:	f107 0320 	add.w	r3, r7, #32
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fd fba1 	bl	8006290 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b52:	e04e      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b54:	f107 0314 	add.w	r3, r7, #20
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fd fd03 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b62:	e046      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b64:	f107 0308 	add.w	r3, r7, #8
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7fd fe65 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b72:	e03e      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008b74:	4b76      	ldr	r3, [pc, #472]	@ (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008b76:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b78:	e03b      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b7a:	4b74      	ldr	r3, [pc, #464]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008b7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b80:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008b84:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b86:	4b71      	ldr	r3, [pc, #452]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d10c      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8008b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b98:	4b6c      	ldr	r3, [pc, #432]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	08db      	lsrs	r3, r3, #3
 8008b9e:	f003 0303 	and.w	r3, r3, #3
 8008ba2:	4a6c      	ldr	r2, [pc, #432]	@ (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008baa:	e01e      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bac:	4b67      	ldr	r3, [pc, #412]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bb8:	d106      	bne.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8008bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bc0:	d102      	bne.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008bc2:	4b65      	ldr	r3, [pc, #404]	@ (8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bc6:	e010      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bc8:	4b60      	ldr	r3, [pc, #384]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bd4:	d106      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8008bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bdc:	d102      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008bde:	4b5f      	ldr	r3, [pc, #380]	@ (8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008be2:	e002      	b.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008be8:	e003      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8008bea:	e002      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008bf0:	bf00      	nop
          }
        }
        break;
 8008bf2:	e2d6      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008bf4:	4b55      	ldr	r3, [pc, #340]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008bfa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008bfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c06:	d031      	beq.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8008c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c0e:	d866      	bhi.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c12:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c14:	d027      	beq.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8008c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c18:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c1a:	d860      	bhi.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1e:	2b80      	cmp	r3, #128	@ 0x80
 8008c20:	d019      	beq.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8008c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c24:	2b80      	cmp	r3, #128	@ 0x80
 8008c26:	d85a      	bhi.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c30:	2b40      	cmp	r3, #64	@ 0x40
 8008c32:	d008      	beq.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8008c34:	e053      	b.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c36:	f107 0320 	add.w	r3, r7, #32
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fd fb28 	bl	8006290 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c42:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c44:	e04e      	b.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c46:	f107 0314 	add.w	r3, r7, #20
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fd fc8a 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c54:	e046      	b.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c56:	f107 0308 	add.w	r3, r7, #8
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fd fdec 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c64:	e03e      	b.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008c66:	4b3a      	ldr	r3, [pc, #232]	@ (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8008c68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c6a:	e03b      	b.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c6c:	4b37      	ldr	r3, [pc, #220]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c72:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008c76:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c78:	4b34      	ldr	r3, [pc, #208]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0302 	and.w	r3, r3, #2
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d10c      	bne.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8008c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d109      	bne.n	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c8a:	4b30      	ldr	r3, [pc, #192]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	08db      	lsrs	r3, r3, #3
 8008c90:	f003 0303 	and.w	r3, r3, #3
 8008c94:	4a2f      	ldr	r2, [pc, #188]	@ (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8008c96:	fa22 f303 	lsr.w	r3, r2, r3
 8008c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c9c:	e01e      	b.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ca6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008caa:	d106      	bne.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8008cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cb2:	d102      	bne.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008cb4:	4b28      	ldr	r3, [pc, #160]	@ (8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cb8:	e010      	b.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cba:	4b24      	ldr	r3, [pc, #144]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cc6:	d106      	bne.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8008cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cce:	d102      	bne.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008cd0:	4b22      	ldr	r3, [pc, #136]	@ (8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cd4:	e002      	b.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008cda:	e003      	b.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8008cdc:	e002      	b.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ce2:	bf00      	nop
          }
        }
        break;
 8008ce4:	e25d      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8008ce6:	4b19      	ldr	r3, [pc, #100]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008cec:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008cf0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d103      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008cf8:	f7fb fadc 	bl	80042b4 <HAL_RCC_GetPCLK2Freq>
 8008cfc:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008cfe:	e250      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8008d00:	4b12      	ldr	r3, [pc, #72]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d0c:	d10b      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d14:	d107      	bne.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d16:	f107 0314 	add.w	r3, r7, #20
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fd fc22 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d24:	e04f      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8008d26:	4b09      	ldr	r3, [pc, #36]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d32:	d115      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8008d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d3a:	d111      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d3c:	f107 0308 	add.w	r3, r7, #8
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fd fd79 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d4a:	e03c      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8008d4c:	44020c00 	.word	0x44020c00
 8008d50:	00bb8000 	.word	0x00bb8000
 8008d54:	03d09000 	.word	0x03d09000
 8008d58:	003d0900 	.word	0x003d0900
 8008d5c:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8008d60:	4b94      	ldr	r3, [pc, #592]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0302 	and.w	r3, r3, #2
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d10d      	bne.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008d72:	d109      	bne.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d74:	4b8f      	ldr	r3, [pc, #572]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	08db      	lsrs	r3, r3, #3
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	4a8e      	ldr	r2, [pc, #568]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008d80:	fa22 f303 	lsr.w	r3, r2, r3
 8008d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d86:	e01e      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8008d88:	4b8a      	ldr	r3, [pc, #552]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d94:	d106      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8008d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d9c:	d102      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8008d9e:	4b87      	ldr	r3, [pc, #540]	@ (8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008da2:	e010      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8008da4:	4b83      	ldr	r3, [pc, #524]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008db0:	d106      	bne.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8008db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008db8:	d102      	bne.n	8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8008dba:	4b81      	ldr	r3, [pc, #516]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dbe:	e002      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dc4:	e1ed      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008dc6:	e1ec      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8008dc8:	4b7a      	ldr	r3, [pc, #488]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008dce:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008dd2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d103      	bne.n	8008de2 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008dda:	f7fb fa81 	bl	80042e0 <HAL_RCC_GetPCLK3Freq>
 8008dde:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008de0:	e1df      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8008de2:	4b74      	ldr	r3, [pc, #464]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dee:	d10b      	bne.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8008df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008df6:	d107      	bne.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008df8:	f107 0314 	add.w	r3, r7, #20
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fd fbb1 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e06:	e045      	b.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8008e08:	4b6a      	ldr	r3, [pc, #424]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e14:	d10b      	bne.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8008e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e1c:	d107      	bne.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e1e:	f107 0308 	add.w	r3, r7, #8
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fd fd08 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e2c:	e032      	b.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8008e2e:	4b61      	ldr	r3, [pc, #388]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d10d      	bne.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e40:	d109      	bne.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e42:	4b5c      	ldr	r3, [pc, #368]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	08db      	lsrs	r3, r3, #3
 8008e48:	f003 0303 	and.w	r3, r3, #3
 8008e4c:	4a5a      	ldr	r2, [pc, #360]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e54:	e01e      	b.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8008e56:	4b57      	ldr	r3, [pc, #348]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e62:	d106      	bne.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8008e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e6a:	d102      	bne.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8008e6c:	4b53      	ldr	r3, [pc, #332]	@ (8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e70:	e010      	b.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8008e72:	4b50      	ldr	r3, [pc, #320]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e7e:	d106      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8008e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e82:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008e86:	d102      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8008e88:	4b4d      	ldr	r3, [pc, #308]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e8c:	e002      	b.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e92:	e186      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e94:	e185      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008e96:	4b47      	ldr	r3, [pc, #284]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e9c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8008ea0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d103      	bne.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008ea8:	f7fb fa04 	bl	80042b4 <HAL_RCC_GetPCLK2Freq>
 8008eac:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008eae:	e178      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8008eb0:	4b40      	ldr	r3, [pc, #256]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008eb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ebc:	d10b      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ec4:	d107      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ec6:	f107 0314 	add.w	r3, r7, #20
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fd fb4a 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ed4:	e045      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8008ed6:	4b37      	ldr	r3, [pc, #220]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ede:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ee2:	d10b      	bne.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eea:	d107      	bne.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eec:	f107 0308 	add.w	r3, r7, #8
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fd fca1 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008efa:	e032      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8008efc:	4b2d      	ldr	r3, [pc, #180]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d10d      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8008f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008f0e:	d109      	bne.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f10:	4b28      	ldr	r3, [pc, #160]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	08db      	lsrs	r3, r3, #3
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	4a27      	ldr	r2, [pc, #156]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f22:	e01e      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8008f24:	4b23      	ldr	r3, [pc, #140]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f30:	d106      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8008f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f38:	d102      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8008f3a:	4b20      	ldr	r3, [pc, #128]	@ (8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f3e:	e010      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8008f40:	4b1c      	ldr	r3, [pc, #112]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f4c:	d106      	bne.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f50:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008f54:	d102      	bne.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8008f56:	4b1a      	ldr	r3, [pc, #104]	@ (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f5a:	e002      	b.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f60:	e11f      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f62:	e11e      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008f64:	4b13      	ldr	r3, [pc, #76]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008f66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f72:	2b03      	cmp	r3, #3
 8008f74:	d85f      	bhi.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8008f76:	a201      	add	r2, pc, #4	@ (adr r2, 8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8008f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7c:	08008f8d 	.word	0x08008f8d
 8008f80:	08008f95 	.word	0x08008f95
 8008f84:	08008fa5 	.word	0x08008fa5
 8008f88:	08008fc5 	.word	0x08008fc5

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8008f8c:	f7fb f960 	bl	8004250 <HAL_RCC_GetHCLKFreq>
 8008f90:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008f92:	e053      	b.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f94:	f107 0320 	add.w	r3, r7, #32
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7fd f979 	bl	8006290 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fa2:	e04b      	b.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fa4:	f107 0314 	add.w	r3, r7, #20
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fd fadb 	bl	8006564 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fb2:	e043      	b.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008fb4:	44020c00 	.word	0x44020c00
 8008fb8:	03d09000 	.word	0x03d09000
 8008fbc:	003d0900 	.word	0x003d0900
 8008fc0:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008fc4:	4b79      	ldr	r3, [pc, #484]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fca:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008fce:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fd0:	4b76      	ldr	r3, [pc, #472]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 0302 	and.w	r3, r3, #2
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d10c      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8008fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d109      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fe2:	4b72      	ldr	r3, [pc, #456]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	08db      	lsrs	r3, r3, #3
 8008fe8:	f003 0303 	and.w	r3, r3, #3
 8008fec:	4a70      	ldr	r2, [pc, #448]	@ (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8008fee:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff4:	e01e      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ff6:	4b6d      	ldr	r3, [pc, #436]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ffe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009002:	d106      	bne.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8009004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800900a:	d102      	bne.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800900c:	4b69      	ldr	r3, [pc, #420]	@ (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800900e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009010:	e010      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009012:	4b66      	ldr	r3, [pc, #408]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800901a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800901e:	d106      	bne.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009022:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009026:	d102      	bne.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009028:	4b63      	ldr	r3, [pc, #396]	@ (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800902a:	637b      	str	r3, [r7, #52]	@ 0x34
 800902c:	e002      	b.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800902e:	2300      	movs	r3, #0
 8009030:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009032:	e003      	b.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009034:	e002      	b.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8009036:	2300      	movs	r3, #0
 8009038:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800903a:	bf00      	nop
          }
        }
        break;
 800903c:	e0b1      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800903e:	4b5b      	ldr	r3, [pc, #364]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009044:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009048:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800904a:	4b58      	ldr	r3, [pc, #352]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800904c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b02      	cmp	r3, #2
 8009056:	d106      	bne.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8009058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905a:	2b00      	cmp	r3, #0
 800905c:	d103      	bne.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800905e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009062:	637b      	str	r3, [r7, #52]	@ 0x34
 8009064:	e01f      	b.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009066:	4b51      	ldr	r3, [pc, #324]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009068:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800906c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009070:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009074:	d106      	bne.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8009076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009078:	2b40      	cmp	r3, #64	@ 0x40
 800907a:	d103      	bne.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800907c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009080:	637b      	str	r3, [r7, #52]	@ 0x34
 8009082:	e010      	b.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009084:	4b49      	ldr	r3, [pc, #292]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800908c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009090:	d106      	bne.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8009092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009094:	2b80      	cmp	r3, #128	@ 0x80
 8009096:	d103      	bne.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009098:	f248 0312 	movw	r3, #32786	@ 0x8012
 800909c:	637b      	str	r3, [r7, #52]	@ 0x34
 800909e:	e002      	b.n	80090a6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80090a0:	2300      	movs	r3, #0
 80090a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80090a4:	e07d      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80090a6:	e07c      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80090a8:	4b40      	ldr	r3, [pc, #256]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80090aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090ae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80090b2:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80090b4:	4b3d      	ldr	r3, [pc, #244]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80090bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090c0:	d105      	bne.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d102      	bne.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 80090c8:	4b3c      	ldr	r3, [pc, #240]	@ (80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80090ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80090cc:	e031      	b.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80090ce:	4b37      	ldr	r3, [pc, #220]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090da:	d10a      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 80090dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090de:	2b10      	cmp	r3, #16
 80090e0:	d107      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090e2:	f107 0320 	add.w	r3, r7, #32
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fd f8d2 	bl	8006290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f0:	e01f      	b.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80090f2:	4b2e      	ldr	r3, [pc, #184]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80090f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090f8:	f003 0302 	and.w	r3, r3, #2
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d106      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009102:	2b20      	cmp	r3, #32
 8009104:	d103      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8009106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800910a:	637b      	str	r3, [r7, #52]	@ 0x34
 800910c:	e011      	b.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800910e:	4b27      	ldr	r3, [pc, #156]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009118:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800911c:	d106      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	2b30      	cmp	r3, #48	@ 0x30
 8009122:	d103      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009124:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009128:	637b      	str	r3, [r7, #52]	@ 0x34
 800912a:	e002      	b.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009130:	e037      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009132:	e036      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009134:	4b1d      	ldr	r3, [pc, #116]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009136:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800913a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800913e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009142:	2b10      	cmp	r3, #16
 8009144:	d107      	bne.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009146:	f107 0320 	add.w	r3, r7, #32
 800914a:	4618      	mov	r0, r3
 800914c:	f7fd f8a0 	bl	8006290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009152:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009154:	e025      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009156:	4b15      	ldr	r3, [pc, #84]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800915e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009162:	d10a      	bne.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009166:	2b20      	cmp	r3, #32
 8009168:	d107      	bne.n	800917a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800916a:	f107 0308 	add.w	r3, r7, #8
 800916e:	4618      	mov	r0, r3
 8009170:	f7fd fb62 	bl	8006838 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	637b      	str	r3, [r7, #52]	@ 0x34
 8009178:	e00f      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800917a:	4b0c      	ldr	r3, [pc, #48]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009182:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009186:	d105      	bne.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8009188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918a:	2b30      	cmp	r3, #48	@ 0x30
 800918c:	d102      	bne.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800918e:	4b0b      	ldr	r3, [pc, #44]	@ (80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009190:	637b      	str	r3, [r7, #52]	@ 0x34
 8009192:	e002      	b.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009194:	2300      	movs	r3, #0
 8009196:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009198:	e003      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800919a:	e002      	b.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800919c:	2300      	movs	r3, #0
 800919e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091a0:	bf00      	nop
    }
  }

  return (frequency);
 80091a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	373c      	adds	r7, #60	@ 0x3c
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd90      	pop	{r4, r7, pc}
 80091ac:	44020c00 	.word	0x44020c00
 80091b0:	03d09000 	.word	0x03d09000
 80091b4:	003d0900 	.word	0x003d0900
 80091b8:	007a1200 	.word	0x007a1200
 80091bc:	02dc6c00 	.word	0x02dc6c00

080091c0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80091c8:	4b48      	ldr	r3, [pc, #288]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a47      	ldr	r2, [pc, #284]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 80091ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80091d2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80091d4:	f7f8 f918 	bl	8001408 <HAL_GetTick>
 80091d8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091da:	e008      	b.n	80091ee <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80091dc:	f7f8 f914 	bl	8001408 <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d901      	bls.n	80091ee <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e07a      	b.n	80092e4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80091ee:	4b3f      	ldr	r3, [pc, #252]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1f0      	bne.n	80091dc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80091fa:	4b3c      	ldr	r3, [pc, #240]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 80091fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009202:	f023 0303 	bic.w	r3, r3, #3
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	6811      	ldr	r1, [r2, #0]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	6852      	ldr	r2, [r2, #4]
 800920e:	0212      	lsls	r2, r2, #8
 8009210:	430a      	orrs	r2, r1
 8009212:	4936      	ldr	r1, [pc, #216]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 8009214:	4313      	orrs	r3, r2
 8009216:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	3b01      	subs	r3, #1
 800921e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	3b01      	subs	r3, #1
 8009228:	025b      	lsls	r3, r3, #9
 800922a:	b29b      	uxth	r3, r3
 800922c:	431a      	orrs	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	3b01      	subs	r3, #1
 8009234:	041b      	lsls	r3, r3, #16
 8009236:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800923a:	431a      	orrs	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	695b      	ldr	r3, [r3, #20]
 8009240:	3b01      	subs	r3, #1
 8009242:	061b      	lsls	r3, r3, #24
 8009244:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009248:	4928      	ldr	r1, [pc, #160]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 800924a:	4313      	orrs	r3, r2
 800924c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800924e:	4b27      	ldr	r3, [pc, #156]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 8009250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009252:	f023 020c 	bic.w	r2, r3, #12
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	4924      	ldr	r1, [pc, #144]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 800925c:	4313      	orrs	r3, r2
 800925e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009260:	4b22      	ldr	r3, [pc, #136]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 8009262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009264:	f023 0220 	bic.w	r2, r3, #32
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	69db      	ldr	r3, [r3, #28]
 800926c:	491f      	ldr	r1, [pc, #124]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 800926e:	4313      	orrs	r3, r2
 8009270:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009272:	4b1e      	ldr	r3, [pc, #120]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 8009274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800927a:	491c      	ldr	r1, [pc, #112]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 800927c:	4313      	orrs	r3, r2
 800927e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8009280:	4b1a      	ldr	r3, [pc, #104]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 8009282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009284:	4a19      	ldr	r2, [pc, #100]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 8009286:	f023 0310 	bic.w	r3, r3, #16
 800928a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800928c:	4b17      	ldr	r3, [pc, #92]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 800928e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009290:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009294:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	6a12      	ldr	r2, [r2, #32]
 800929c:	00d2      	lsls	r2, r2, #3
 800929e:	4913      	ldr	r1, [pc, #76]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 80092a0:	4313      	orrs	r3, r2
 80092a2:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80092a4:	4b11      	ldr	r3, [pc, #68]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 80092a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a8:	4a10      	ldr	r2, [pc, #64]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 80092aa:	f043 0310 	orr.w	r3, r3, #16
 80092ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80092b0:	4b0e      	ldr	r3, [pc, #56]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a0d      	ldr	r2, [pc, #52]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 80092b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80092ba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80092bc:	f7f8 f8a4 	bl	8001408 <HAL_GetTick>
 80092c0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092c2:	e008      	b.n	80092d6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80092c4:	f7f8 f8a0 	bl	8001408 <HAL_GetTick>
 80092c8:	4602      	mov	r2, r0
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d901      	bls.n	80092d6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e006      	b.n	80092e4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80092d6:	4b05      	ldr	r3, [pc, #20]	@ (80092ec <RCCEx_PLL2_Config+0x12c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d0f0      	beq.n	80092c4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80092e2:	2300      	movs	r3, #0

}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	44020c00 	.word	0x44020c00

080092f0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80092f8:	4b48      	ldr	r3, [pc, #288]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a47      	ldr	r2, [pc, #284]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 80092fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009302:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009304:	f7f8 f880 	bl	8001408 <HAL_GetTick>
 8009308:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800930a:	e008      	b.n	800931e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800930c:	f7f8 f87c 	bl	8001408 <HAL_GetTick>
 8009310:	4602      	mov	r2, r0
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	1ad3      	subs	r3, r2, r3
 8009316:	2b02      	cmp	r3, #2
 8009318:	d901      	bls.n	800931e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800931a:	2303      	movs	r3, #3
 800931c:	e07a      	b.n	8009414 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800931e:	4b3f      	ldr	r3, [pc, #252]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1f0      	bne.n	800930c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800932a:	4b3c      	ldr	r3, [pc, #240]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 800932c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800932e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009332:	f023 0303 	bic.w	r3, r3, #3
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	6811      	ldr	r1, [r2, #0]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6852      	ldr	r2, [r2, #4]
 800933e:	0212      	lsls	r2, r2, #8
 8009340:	430a      	orrs	r2, r1
 8009342:	4936      	ldr	r1, [pc, #216]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 8009344:	4313      	orrs	r3, r2
 8009346:	630b      	str	r3, [r1, #48]	@ 0x30
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	3b01      	subs	r3, #1
 800934e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	3b01      	subs	r3, #1
 8009358:	025b      	lsls	r3, r3, #9
 800935a:	b29b      	uxth	r3, r3
 800935c:	431a      	orrs	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	3b01      	subs	r3, #1
 8009364:	041b      	lsls	r3, r3, #16
 8009366:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800936a:	431a      	orrs	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	3b01      	subs	r3, #1
 8009372:	061b      	lsls	r3, r3, #24
 8009374:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009378:	4928      	ldr	r1, [pc, #160]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 800937a:	4313      	orrs	r3, r2
 800937c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800937e:	4b27      	ldr	r3, [pc, #156]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 8009380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009382:	f023 020c 	bic.w	r2, r3, #12
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	4924      	ldr	r1, [pc, #144]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 800938c:	4313      	orrs	r3, r2
 800938e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009390:	4b22      	ldr	r3, [pc, #136]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 8009392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009394:	f023 0220 	bic.w	r2, r3, #32
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	69db      	ldr	r3, [r3, #28]
 800939c:	491f      	ldr	r1, [pc, #124]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80093a2:	4b1e      	ldr	r3, [pc, #120]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 80093a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093aa:	491c      	ldr	r1, [pc, #112]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80093b0:	4b1a      	ldr	r3, [pc, #104]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 80093b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b4:	4a19      	ldr	r2, [pc, #100]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 80093b6:	f023 0310 	bic.w	r3, r3, #16
 80093ba:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80093bc:	4b17      	ldr	r3, [pc, #92]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 80093be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093c0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80093c4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	6a12      	ldr	r2, [r2, #32]
 80093cc:	00d2      	lsls	r2, r2, #3
 80093ce:	4913      	ldr	r1, [pc, #76]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 80093d0:	4313      	orrs	r3, r2
 80093d2:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80093d4:	4b11      	ldr	r3, [pc, #68]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 80093d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093d8:	4a10      	ldr	r2, [pc, #64]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 80093da:	f043 0310 	orr.w	r3, r3, #16
 80093de:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80093e0:	4b0e      	ldr	r3, [pc, #56]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a0d      	ldr	r2, [pc, #52]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 80093e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093ea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80093ec:	f7f8 f80c 	bl	8001408 <HAL_GetTick>
 80093f0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80093f2:	e008      	b.n	8009406 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80093f4:	f7f8 f808 	bl	8001408 <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d901      	bls.n	8009406 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e006      	b.n	8009414 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009406:	4b05      	ldr	r3, [pc, #20]	@ (800941c <RCCEx_PLL3_Config+0x12c>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0f0      	beq.n	80093f4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	44020c00 	.word	0x44020c00

08009420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e049      	b.n	80094c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d106      	bne.n	800944c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f841 	bl	80094ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2202      	movs	r2, #2
 8009450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3304      	adds	r3, #4
 800945c:	4619      	mov	r1, r3
 800945e:	4610      	mov	r0, r2
 8009460:	f000 fa60 	bl	8009924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80094d6:	bf00      	nop
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
	...

080094e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d001      	beq.n	80094fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e07c      	b.n	80095f6 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2202      	movs	r2, #2
 8009500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68da      	ldr	r2, [r3, #12]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f042 0201 	orr.w	r2, r2, #1
 8009512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a3a      	ldr	r2, [pc, #232]	@ (8009604 <HAL_TIM_Base_Start_IT+0x120>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d04a      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0xd0>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a39      	ldr	r2, [pc, #228]	@ (8009608 <HAL_TIM_Base_Start_IT+0x124>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d045      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0xd0>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009530:	d040      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0xd0>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800953a:	d03b      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0xd0>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a32      	ldr	r2, [pc, #200]	@ (800960c <HAL_TIM_Base_Start_IT+0x128>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d036      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0xd0>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a31      	ldr	r2, [pc, #196]	@ (8009610 <HAL_TIM_Base_Start_IT+0x12c>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d031      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0xd0>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a2f      	ldr	r2, [pc, #188]	@ (8009614 <HAL_TIM_Base_Start_IT+0x130>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d02c      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0xd0>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a2e      	ldr	r2, [pc, #184]	@ (8009618 <HAL_TIM_Base_Start_IT+0x134>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d027      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0xd0>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a2c      	ldr	r2, [pc, #176]	@ (800961c <HAL_TIM_Base_Start_IT+0x138>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d022      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0xd0>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a2b      	ldr	r2, [pc, #172]	@ (8009620 <HAL_TIM_Base_Start_IT+0x13c>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d01d      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0xd0>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a29      	ldr	r2, [pc, #164]	@ (8009624 <HAL_TIM_Base_Start_IT+0x140>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d018      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0xd0>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a28      	ldr	r2, [pc, #160]	@ (8009628 <HAL_TIM_Base_Start_IT+0x144>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d013      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0xd0>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a26      	ldr	r2, [pc, #152]	@ (800962c <HAL_TIM_Base_Start_IT+0x148>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d00e      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0xd0>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a25      	ldr	r2, [pc, #148]	@ (8009630 <HAL_TIM_Base_Start_IT+0x14c>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d009      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0xd0>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a23      	ldr	r2, [pc, #140]	@ (8009634 <HAL_TIM_Base_Start_IT+0x150>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d004      	beq.n	80095b4 <HAL_TIM_Base_Start_IT+0xd0>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a22      	ldr	r2, [pc, #136]	@ (8009638 <HAL_TIM_Base_Start_IT+0x154>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d115      	bne.n	80095e0 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	689a      	ldr	r2, [r3, #8]
 80095ba:	4b20      	ldr	r3, [pc, #128]	@ (800963c <HAL_TIM_Base_Start_IT+0x158>)
 80095bc:	4013      	ands	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b06      	cmp	r3, #6
 80095c4:	d015      	beq.n	80095f2 <HAL_TIM_Base_Start_IT+0x10e>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095cc:	d011      	beq.n	80095f2 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f042 0201 	orr.w	r2, r2, #1
 80095dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095de:	e008      	b.n	80095f2 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f042 0201 	orr.w	r2, r2, #1
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	e000      	b.n	80095f4 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	40012c00 	.word	0x40012c00
 8009608:	50012c00 	.word	0x50012c00
 800960c:	40000400 	.word	0x40000400
 8009610:	50000400 	.word	0x50000400
 8009614:	40000800 	.word	0x40000800
 8009618:	50000800 	.word	0x50000800
 800961c:	40000c00 	.word	0x40000c00
 8009620:	50000c00 	.word	0x50000c00
 8009624:	40013400 	.word	0x40013400
 8009628:	50013400 	.word	0x50013400
 800962c:	40001800 	.word	0x40001800
 8009630:	50001800 	.word	0x50001800
 8009634:	40014000 	.word	0x40014000
 8009638:	50014000 	.word	0x50014000
 800963c:	00010007 	.word	0x00010007

08009640 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	f003 0302 	and.w	r3, r3, #2
 800965e:	2b00      	cmp	r3, #0
 8009660:	d020      	beq.n	80096a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f003 0302 	and.w	r3, r3, #2
 8009668:	2b00      	cmp	r3, #0
 800966a:	d01b      	beq.n	80096a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f06f 0202 	mvn.w	r2, #2
 8009674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	f003 0303 	and.w	r3, r3, #3
 8009686:	2b00      	cmp	r3, #0
 8009688:	d003      	beq.n	8009692 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f92c 	bl	80098e8 <HAL_TIM_IC_CaptureCallback>
 8009690:	e005      	b.n	800969e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f91e 	bl	80098d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f92f 	bl	80098fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	f003 0304 	and.w	r3, r3, #4
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d020      	beq.n	80096f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f003 0304 	and.w	r3, r3, #4
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d01b      	beq.n	80096f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f06f 0204 	mvn.w	r2, #4
 80096c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2202      	movs	r2, #2
 80096c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	699b      	ldr	r3, [r3, #24]
 80096ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d003      	beq.n	80096de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f906 	bl	80098e8 <HAL_TIM_IC_CaptureCallback>
 80096dc:	e005      	b.n	80096ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f8f8 	bl	80098d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f909 	bl	80098fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	f003 0308 	and.w	r3, r3, #8
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d020      	beq.n	800973c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f003 0308 	and.w	r3, r3, #8
 8009700:	2b00      	cmp	r3, #0
 8009702:	d01b      	beq.n	800973c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f06f 0208 	mvn.w	r2, #8
 800970c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2204      	movs	r2, #4
 8009712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	f003 0303 	and.w	r3, r3, #3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f8e0 	bl	80098e8 <HAL_TIM_IC_CaptureCallback>
 8009728:	e005      	b.n	8009736 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f8d2 	bl	80098d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f8e3 	bl	80098fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f003 0310 	and.w	r3, r3, #16
 8009742:	2b00      	cmp	r3, #0
 8009744:	d020      	beq.n	8009788 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f003 0310 	and.w	r3, r3, #16
 800974c:	2b00      	cmp	r3, #0
 800974e:	d01b      	beq.n	8009788 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f06f 0210 	mvn.w	r2, #16
 8009758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2208      	movs	r2, #8
 800975e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f8ba 	bl	80098e8 <HAL_TIM_IC_CaptureCallback>
 8009774:	e005      	b.n	8009782 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f8ac 	bl	80098d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f8bd 	bl	80098fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00c      	beq.n	80097ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	2b00      	cmp	r3, #0
 800979a:	d007      	beq.n	80097ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f06f 0201 	mvn.w	r2, #1
 80097a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7f7 f962 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00c      	beq.n	80097d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d007      	beq.n	80097d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80097c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f9d2 	bl	8009b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00c      	beq.n	80097f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d007      	beq.n	80097f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80097ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f9ca 	bl	8009b88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00c      	beq.n	8009818 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009804:	2b00      	cmp	r3, #0
 8009806:	d007      	beq.n	8009818 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f87c 	bl	8009910 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00c      	beq.n	800983c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f003 0320 	and.w	r3, r3, #32
 8009828:	2b00      	cmp	r3, #0
 800982a:	d007      	beq.n	800983c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f06f 0220 	mvn.w	r2, #32
 8009834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f992 	bl	8009b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00c      	beq.n	8009860 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d007      	beq.n	8009860 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f99e 	bl	8009b9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00c      	beq.n	8009884 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d007      	beq.n	8009884 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800987c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f996 	bl	8009bb0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00c      	beq.n	80098a8 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d007      	beq.n	80098a8 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80098a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f98e 	bl	8009bc4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00c      	beq.n	80098cc <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d007      	beq.n	80098cc <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80098c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f986 	bl	8009bd8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098cc:	bf00      	nop
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a74      	ldr	r2, [pc, #464]	@ (8009b08 <TIM_Base_SetConfig+0x1e4>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d02b      	beq.n	8009994 <TIM_Base_SetConfig+0x70>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a73      	ldr	r2, [pc, #460]	@ (8009b0c <TIM_Base_SetConfig+0x1e8>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d027      	beq.n	8009994 <TIM_Base_SetConfig+0x70>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800994a:	d023      	beq.n	8009994 <TIM_Base_SetConfig+0x70>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009952:	d01f      	beq.n	8009994 <TIM_Base_SetConfig+0x70>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a6e      	ldr	r2, [pc, #440]	@ (8009b10 <TIM_Base_SetConfig+0x1ec>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d01b      	beq.n	8009994 <TIM_Base_SetConfig+0x70>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a6d      	ldr	r2, [pc, #436]	@ (8009b14 <TIM_Base_SetConfig+0x1f0>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d017      	beq.n	8009994 <TIM_Base_SetConfig+0x70>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a6c      	ldr	r2, [pc, #432]	@ (8009b18 <TIM_Base_SetConfig+0x1f4>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d013      	beq.n	8009994 <TIM_Base_SetConfig+0x70>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a6b      	ldr	r2, [pc, #428]	@ (8009b1c <TIM_Base_SetConfig+0x1f8>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d00f      	beq.n	8009994 <TIM_Base_SetConfig+0x70>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a6a      	ldr	r2, [pc, #424]	@ (8009b20 <TIM_Base_SetConfig+0x1fc>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d00b      	beq.n	8009994 <TIM_Base_SetConfig+0x70>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a69      	ldr	r2, [pc, #420]	@ (8009b24 <TIM_Base_SetConfig+0x200>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d007      	beq.n	8009994 <TIM_Base_SetConfig+0x70>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a68      	ldr	r2, [pc, #416]	@ (8009b28 <TIM_Base_SetConfig+0x204>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d003      	beq.n	8009994 <TIM_Base_SetConfig+0x70>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a67      	ldr	r2, [pc, #412]	@ (8009b2c <TIM_Base_SetConfig+0x208>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d108      	bne.n	80099a6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800999a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a57      	ldr	r2, [pc, #348]	@ (8009b08 <TIM_Base_SetConfig+0x1e4>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d05b      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a56      	ldr	r2, [pc, #344]	@ (8009b0c <TIM_Base_SetConfig+0x1e8>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d057      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099bc:	d053      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099c4:	d04f      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a51      	ldr	r2, [pc, #324]	@ (8009b10 <TIM_Base_SetConfig+0x1ec>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d04b      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a50      	ldr	r2, [pc, #320]	@ (8009b14 <TIM_Base_SetConfig+0x1f0>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d047      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a4f      	ldr	r2, [pc, #316]	@ (8009b18 <TIM_Base_SetConfig+0x1f4>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d043      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a4e      	ldr	r2, [pc, #312]	@ (8009b1c <TIM_Base_SetConfig+0x1f8>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d03f      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a4d      	ldr	r2, [pc, #308]	@ (8009b20 <TIM_Base_SetConfig+0x1fc>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d03b      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a4c      	ldr	r2, [pc, #304]	@ (8009b24 <TIM_Base_SetConfig+0x200>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d037      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a4b      	ldr	r2, [pc, #300]	@ (8009b28 <TIM_Base_SetConfig+0x204>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d033      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a4a      	ldr	r2, [pc, #296]	@ (8009b2c <TIM_Base_SetConfig+0x208>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d02f      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a49      	ldr	r2, [pc, #292]	@ (8009b30 <TIM_Base_SetConfig+0x20c>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d02b      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a48      	ldr	r2, [pc, #288]	@ (8009b34 <TIM_Base_SetConfig+0x210>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d027      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a47      	ldr	r2, [pc, #284]	@ (8009b38 <TIM_Base_SetConfig+0x214>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d023      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4a46      	ldr	r2, [pc, #280]	@ (8009b3c <TIM_Base_SetConfig+0x218>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d01f      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a45      	ldr	r2, [pc, #276]	@ (8009b40 <TIM_Base_SetConfig+0x21c>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d01b      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a44      	ldr	r2, [pc, #272]	@ (8009b44 <TIM_Base_SetConfig+0x220>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d017      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a43      	ldr	r2, [pc, #268]	@ (8009b48 <TIM_Base_SetConfig+0x224>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d013      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a42      	ldr	r2, [pc, #264]	@ (8009b4c <TIM_Base_SetConfig+0x228>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d00f      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a41      	ldr	r2, [pc, #260]	@ (8009b50 <TIM_Base_SetConfig+0x22c>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d00b      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a40      	ldr	r2, [pc, #256]	@ (8009b54 <TIM_Base_SetConfig+0x230>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d007      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a3f      	ldr	r2, [pc, #252]	@ (8009b58 <TIM_Base_SetConfig+0x234>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d003      	beq.n	8009a66 <TIM_Base_SetConfig+0x142>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4a3e      	ldr	r2, [pc, #248]	@ (8009b5c <TIM_Base_SetConfig+0x238>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d108      	bne.n	8009a78 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	4313      	orrs	r3, r2
 8009a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	689a      	ldr	r2, [r3, #8]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8009b08 <TIM_Base_SetConfig+0x1e4>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d023      	beq.n	8009aec <TIM_Base_SetConfig+0x1c8>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a19      	ldr	r2, [pc, #100]	@ (8009b0c <TIM_Base_SetConfig+0x1e8>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d01f      	beq.n	8009aec <TIM_Base_SetConfig+0x1c8>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a1e      	ldr	r2, [pc, #120]	@ (8009b28 <TIM_Base_SetConfig+0x204>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d01b      	beq.n	8009aec <TIM_Base_SetConfig+0x1c8>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8009b2c <TIM_Base_SetConfig+0x208>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d017      	beq.n	8009aec <TIM_Base_SetConfig+0x1c8>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a22      	ldr	r2, [pc, #136]	@ (8009b48 <TIM_Base_SetConfig+0x224>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d013      	beq.n	8009aec <TIM_Base_SetConfig+0x1c8>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a21      	ldr	r2, [pc, #132]	@ (8009b4c <TIM_Base_SetConfig+0x228>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d00f      	beq.n	8009aec <TIM_Base_SetConfig+0x1c8>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a20      	ldr	r2, [pc, #128]	@ (8009b50 <TIM_Base_SetConfig+0x22c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d00b      	beq.n	8009aec <TIM_Base_SetConfig+0x1c8>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8009b54 <TIM_Base_SetConfig+0x230>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d007      	beq.n	8009aec <TIM_Base_SetConfig+0x1c8>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a1e      	ldr	r2, [pc, #120]	@ (8009b58 <TIM_Base_SetConfig+0x234>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d003      	beq.n	8009aec <TIM_Base_SetConfig+0x1c8>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8009b5c <TIM_Base_SetConfig+0x238>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d103      	bne.n	8009af4 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	691a      	ldr	r2, [r3, #16]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	615a      	str	r2, [r3, #20]
}
 8009afa:	bf00      	nop
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	40012c00 	.word	0x40012c00
 8009b0c:	50012c00 	.word	0x50012c00
 8009b10:	40000400 	.word	0x40000400
 8009b14:	50000400 	.word	0x50000400
 8009b18:	40000800 	.word	0x40000800
 8009b1c:	50000800 	.word	0x50000800
 8009b20:	40000c00 	.word	0x40000c00
 8009b24:	50000c00 	.word	0x50000c00
 8009b28:	40013400 	.word	0x40013400
 8009b2c:	50013400 	.word	0x50013400
 8009b30:	40001800 	.word	0x40001800
 8009b34:	50001800 	.word	0x50001800
 8009b38:	40001c00 	.word	0x40001c00
 8009b3c:	50001c00 	.word	0x50001c00
 8009b40:	40002000 	.word	0x40002000
 8009b44:	50002000 	.word	0x50002000
 8009b48:	40014000 	.word	0x40014000
 8009b4c:	50014000 	.word	0x50014000
 8009b50:	40014400 	.word	0x40014400
 8009b54:	50014400 	.word	0x50014400
 8009b58:	40014800 	.word	0x40014800
 8009b5c:	50014800 	.word	0x50014800

08009b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009ba4:	bf00      	nop
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e042      	b.n	8009c84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d106      	bne.n	8009c16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7f6 ff4f 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2224      	movs	r2, #36	@ 0x24
 8009c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f022 0201 	bic.w	r2, r2, #1
 8009c2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fa16 	bl	800a068 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f825 	bl	8009c8c <UART_SetConfig>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d101      	bne.n	8009c4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e01b      	b.n	8009c84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685a      	ldr	r2, [r3, #4]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	689a      	ldr	r2, [r3, #8]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f042 0201 	orr.w	r2, r2, #1
 8009c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fa95 	bl	800a1ac <UART_CheckIdleState>
 8009c82:	4603      	mov	r3, r0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c90:	b094      	sub	sp, #80	@ 0x50
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	4b78      	ldr	r3, [pc, #480]	@ (8009e84 <UART_SetConfig+0x1f8>)
 8009ca2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	431a      	orrs	r2, r3
 8009cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4971      	ldr	r1, [pc, #452]	@ (8009e88 <UART_SetConfig+0x1fc>)
 8009cc4:	4019      	ands	r1, r3
 8009cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ccc:	430b      	orrs	r3, r1
 8009cce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cdc:	68d9      	ldr	r1, [r3, #12]
 8009cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	ea40 0301 	orr.w	r3, r0, r1
 8009ce6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	4b64      	ldr	r3, [pc, #400]	@ (8009e84 <UART_SetConfig+0x1f8>)
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d009      	beq.n	8009d0c <UART_SetConfig+0x80>
 8009cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	4b63      	ldr	r3, [pc, #396]	@ (8009e8c <UART_SetConfig+0x200>)
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d004      	beq.n	8009d0c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d04:	6a1a      	ldr	r2, [r3, #32]
 8009d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009d16:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d20:	430b      	orrs	r3, r1
 8009d22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d2a:	f023 000f 	bic.w	r0, r3, #15
 8009d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	ea40 0301 	orr.w	r3, r0, r1
 8009d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	4b53      	ldr	r3, [pc, #332]	@ (8009e90 <UART_SetConfig+0x204>)
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d102      	bne.n	8009d4c <UART_SetConfig+0xc0>
 8009d46:	2301      	movs	r3, #1
 8009d48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d4a:	e066      	b.n	8009e1a <UART_SetConfig+0x18e>
 8009d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	4b50      	ldr	r3, [pc, #320]	@ (8009e94 <UART_SetConfig+0x208>)
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d102      	bne.n	8009d5c <UART_SetConfig+0xd0>
 8009d56:	2302      	movs	r3, #2
 8009d58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d5a:	e05e      	b.n	8009e1a <UART_SetConfig+0x18e>
 8009d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	4b4d      	ldr	r3, [pc, #308]	@ (8009e98 <UART_SetConfig+0x20c>)
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d102      	bne.n	8009d6c <UART_SetConfig+0xe0>
 8009d66:	2304      	movs	r3, #4
 8009d68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d6a:	e056      	b.n	8009e1a <UART_SetConfig+0x18e>
 8009d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	4b4a      	ldr	r3, [pc, #296]	@ (8009e9c <UART_SetConfig+0x210>)
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d102      	bne.n	8009d7c <UART_SetConfig+0xf0>
 8009d76:	2308      	movs	r3, #8
 8009d78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d7a:	e04e      	b.n	8009e1a <UART_SetConfig+0x18e>
 8009d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	4b47      	ldr	r3, [pc, #284]	@ (8009ea0 <UART_SetConfig+0x214>)
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d102      	bne.n	8009d8c <UART_SetConfig+0x100>
 8009d86:	2310      	movs	r3, #16
 8009d88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d8a:	e046      	b.n	8009e1a <UART_SetConfig+0x18e>
 8009d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	4b44      	ldr	r3, [pc, #272]	@ (8009ea4 <UART_SetConfig+0x218>)
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d102      	bne.n	8009d9c <UART_SetConfig+0x110>
 8009d96:	2320      	movs	r3, #32
 8009d98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d9a:	e03e      	b.n	8009e1a <UART_SetConfig+0x18e>
 8009d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	4b41      	ldr	r3, [pc, #260]	@ (8009ea8 <UART_SetConfig+0x21c>)
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d102      	bne.n	8009dac <UART_SetConfig+0x120>
 8009da6:	2340      	movs	r3, #64	@ 0x40
 8009da8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009daa:	e036      	b.n	8009e1a <UART_SetConfig+0x18e>
 8009dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	4b3e      	ldr	r3, [pc, #248]	@ (8009eac <UART_SetConfig+0x220>)
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d102      	bne.n	8009dbc <UART_SetConfig+0x130>
 8009db6:	2380      	movs	r3, #128	@ 0x80
 8009db8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dba:	e02e      	b.n	8009e1a <UART_SetConfig+0x18e>
 8009dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8009eb0 <UART_SetConfig+0x224>)
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d103      	bne.n	8009dce <UART_SetConfig+0x142>
 8009dc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dcc:	e025      	b.n	8009e1a <UART_SetConfig+0x18e>
 8009dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	4b38      	ldr	r3, [pc, #224]	@ (8009eb4 <UART_SetConfig+0x228>)
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d103      	bne.n	8009de0 <UART_SetConfig+0x154>
 8009dd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dde:	e01c      	b.n	8009e1a <UART_SetConfig+0x18e>
 8009de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	4b34      	ldr	r3, [pc, #208]	@ (8009eb8 <UART_SetConfig+0x22c>)
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d103      	bne.n	8009df2 <UART_SetConfig+0x166>
 8009dea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009df0:	e013      	b.n	8009e1a <UART_SetConfig+0x18e>
 8009df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	4b31      	ldr	r3, [pc, #196]	@ (8009ebc <UART_SetConfig+0x230>)
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d103      	bne.n	8009e04 <UART_SetConfig+0x178>
 8009dfc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009e00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e02:	e00a      	b.n	8009e1a <UART_SetConfig+0x18e>
 8009e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	4b1e      	ldr	r3, [pc, #120]	@ (8009e84 <UART_SetConfig+0x1f8>)
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d103      	bne.n	8009e16 <UART_SetConfig+0x18a>
 8009e0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e14:	e001      	b.n	8009e1a <UART_SetConfig+0x18e>
 8009e16:	2300      	movs	r3, #0
 8009e18:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	4b19      	ldr	r3, [pc, #100]	@ (8009e84 <UART_SetConfig+0x1f8>)
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d005      	beq.n	8009e30 <UART_SetConfig+0x1a4>
 8009e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	4b18      	ldr	r3, [pc, #96]	@ (8009e8c <UART_SetConfig+0x200>)
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	f040 8094 	bne.w	8009f58 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009e30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e32:	2200      	movs	r2, #0
 8009e34:	623b      	str	r3, [r7, #32]
 8009e36:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e38:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009e3c:	f7fc fe66 	bl	8006b0c <HAL_RCCEx_GetPeriphCLKFreq>
 8009e40:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f000 80f7 	beq.w	800a038 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8009ec0 <UART_SetConfig+0x234>)
 8009e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e54:	461a      	mov	r2, r3
 8009e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e5c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	4613      	mov	r3, r2
 8009e64:	005b      	lsls	r3, r3, #1
 8009e66:	4413      	add	r3, r2
 8009e68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d305      	bcc.n	8009e7a <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d924      	bls.n	8009ec4 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009e80:	e069      	b.n	8009f56 <UART_SetConfig+0x2ca>
 8009e82:	bf00      	nop
 8009e84:	44002400 	.word	0x44002400
 8009e88:	cfff69f3 	.word	0xcfff69f3
 8009e8c:	54002400 	.word	0x54002400
 8009e90:	40013800 	.word	0x40013800
 8009e94:	40004400 	.word	0x40004400
 8009e98:	40004800 	.word	0x40004800
 8009e9c:	40004c00 	.word	0x40004c00
 8009ea0:	40005000 	.word	0x40005000
 8009ea4:	40006400 	.word	0x40006400
 8009ea8:	40007800 	.word	0x40007800
 8009eac:	40007c00 	.word	0x40007c00
 8009eb0:	40008000 	.word	0x40008000
 8009eb4:	40006800 	.word	0x40006800
 8009eb8:	40006c00 	.word	0x40006c00
 8009ebc:	40008400 	.word	0x40008400
 8009ec0:	0801cb8c 	.word	0x0801cb8c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	61bb      	str	r3, [r7, #24]
 8009eca:	61fa      	str	r2, [r7, #28]
 8009ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed0:	4a64      	ldr	r2, [pc, #400]	@ (800a064 <UART_SetConfig+0x3d8>)
 8009ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	2200      	movs	r2, #0
 8009eda:	613b      	str	r3, [r7, #16]
 8009edc:	617a      	str	r2, [r7, #20]
 8009ede:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009ee2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009ee6:	f7f6 f9d3 	bl	8000290 <__aeabi_uldivmod>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	4610      	mov	r0, r2
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	f04f 0200 	mov.w	r2, #0
 8009ef6:	f04f 0300 	mov.w	r3, #0
 8009efa:	020b      	lsls	r3, r1, #8
 8009efc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f00:	0202      	lsls	r2, r0, #8
 8009f02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f04:	6849      	ldr	r1, [r1, #4]
 8009f06:	0849      	lsrs	r1, r1, #1
 8009f08:	2000      	movs	r0, #0
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	eb12 0804 	adds.w	r8, r2, r4
 8009f12:	eb43 0905 	adc.w	r9, r3, r5
 8009f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	60bb      	str	r3, [r7, #8]
 8009f1e:	60fa      	str	r2, [r7, #12]
 8009f20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f24:	4640      	mov	r0, r8
 8009f26:	4649      	mov	r1, r9
 8009f28:	f7f6 f9b2 	bl	8000290 <__aeabi_uldivmod>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4613      	mov	r3, r2
 8009f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f3a:	d308      	bcc.n	8009f4e <UART_SetConfig+0x2c2>
 8009f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f42:	d204      	bcs.n	8009f4e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8009f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f4a:	60da      	str	r2, [r3, #12]
 8009f4c:	e003      	b.n	8009f56 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009f54:	e070      	b.n	800a038 <UART_SetConfig+0x3ac>
 8009f56:	e06f      	b.n	800a038 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f5a:	69db      	ldr	r3, [r3, #28]
 8009f5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f60:	d13c      	bne.n	8009fdc <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f64:	2200      	movs	r2, #0
 8009f66:	603b      	str	r3, [r7, #0]
 8009f68:	607a      	str	r2, [r7, #4]
 8009f6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f6e:	f7fc fdcd 	bl	8006b0c <HAL_RCCEx_GetPeriphCLKFreq>
 8009f72:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d05e      	beq.n	800a038 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7e:	4a39      	ldr	r2, [pc, #228]	@ (800a064 <UART_SetConfig+0x3d8>)
 8009f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f84:	461a      	mov	r2, r3
 8009f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f8c:	005a      	lsls	r2, r3, #1
 8009f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	085b      	lsrs	r3, r3, #1
 8009f94:	441a      	add	r2, r3
 8009f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa2:	2b0f      	cmp	r3, #15
 8009fa4:	d916      	bls.n	8009fd4 <UART_SetConfig+0x348>
 8009fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fac:	d212      	bcs.n	8009fd4 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	f023 030f 	bic.w	r3, r3, #15
 8009fb6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fba:	085b      	lsrs	r3, r3, #1
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	f003 0307 	and.w	r3, r3, #7
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009fd0:	60da      	str	r2, [r3, #12]
 8009fd2:	e031      	b.n	800a038 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009fda:	e02d      	b.n	800a038 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fde:	2200      	movs	r2, #0
 8009fe0:	469a      	mov	sl, r3
 8009fe2:	4693      	mov	fp, r2
 8009fe4:	4650      	mov	r0, sl
 8009fe6:	4659      	mov	r1, fp
 8009fe8:	f7fc fd90 	bl	8006b0c <HAL_RCCEx_GetPeriphCLKFreq>
 8009fec:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d021      	beq.n	800a038 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff8:	4a1a      	ldr	r2, [pc, #104]	@ (800a064 <UART_SetConfig+0x3d8>)
 8009ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ffe:	461a      	mov	r2, r3
 800a000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a002:	fbb3 f2f2 	udiv	r2, r3, r2
 800a006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	085b      	lsrs	r3, r3, #1
 800a00c:	441a      	add	r2, r3
 800a00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	fbb2 f3f3 	udiv	r3, r2, r3
 800a016:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a01a:	2b0f      	cmp	r3, #15
 800a01c:	d909      	bls.n	800a032 <UART_SetConfig+0x3a6>
 800a01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a024:	d205      	bcs.n	800a032 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a028:	b29a      	uxth	r2, r3
 800a02a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	60da      	str	r2, [r3, #12]
 800a030:	e002      	b.n	800a038 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a03a:	2201      	movs	r2, #1
 800a03c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a042:	2201      	movs	r2, #1
 800a044:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a04a:	2200      	movs	r2, #0
 800a04c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a050:	2200      	movs	r2, #0
 800a052:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a054:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3750      	adds	r7, #80	@ 0x50
 800a05c:	46bd      	mov	sp, r7
 800a05e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a062:	bf00      	nop
 800a064:	0801cb8c 	.word	0x0801cb8c

0800a068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a074:	f003 0308 	and.w	r3, r3, #8
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00a      	beq.n	800a092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	430a      	orrs	r2, r1
 800a090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a096:	f003 0301 	and.w	r3, r3, #1
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00a      	beq.n	800a0b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	430a      	orrs	r2, r1
 800a0b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b8:	f003 0302 	and.w	r3, r3, #2
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00a      	beq.n	800a0d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0da:	f003 0304 	and.w	r3, r3, #4
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00a      	beq.n	800a0f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0fc:	f003 0310 	and.w	r3, r3, #16
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00a      	beq.n	800a11a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	430a      	orrs	r2, r1
 800a118:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a11e:	f003 0320 	and.w	r3, r3, #32
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00a      	beq.n	800a13c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	430a      	orrs	r2, r1
 800a13a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a144:	2b00      	cmp	r3, #0
 800a146:	d01a      	beq.n	800a17e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a166:	d10a      	bne.n	800a17e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	430a      	orrs	r2, r1
 800a17c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00a      	beq.n	800a1a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	430a      	orrs	r2, r1
 800a19e:	605a      	str	r2, [r3, #4]
  }
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b098      	sub	sp, #96	@ 0x60
 800a1b0:	af02      	add	r7, sp, #8
 800a1b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1bc:	f7f7 f924 	bl	8001408 <HAL_GetTick>
 800a1c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0308 	and.w	r3, r3, #8
 800a1cc:	2b08      	cmp	r3, #8
 800a1ce:	d12f      	bne.n	800a230 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f88e 	bl	800a300 <UART_WaitOnFlagUntilTimeout>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d022      	beq.n	800a230 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f2:	e853 3f00 	ldrex	r3, [r3]
 800a1f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1fe:	653b      	str	r3, [r7, #80]	@ 0x50
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a208:	647b      	str	r3, [r7, #68]	@ 0x44
 800a20a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a20e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a210:	e841 2300 	strex	r3, r2, [r1]
 800a214:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1e6      	bne.n	800a1ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2220      	movs	r2, #32
 800a220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e063      	b.n	800a2f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0304 	and.w	r3, r3, #4
 800a23a:	2b04      	cmp	r3, #4
 800a23c:	d149      	bne.n	800a2d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a23e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a246:	2200      	movs	r2, #0
 800a248:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f857 	bl	800a300 <UART_WaitOnFlagUntilTimeout>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d03c      	beq.n	800a2d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a260:	e853 3f00 	ldrex	r3, [r3]
 800a264:	623b      	str	r3, [r7, #32]
   return(result);
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a26c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	461a      	mov	r2, r3
 800a274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a276:	633b      	str	r3, [r7, #48]	@ 0x30
 800a278:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a27c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a27e:	e841 2300 	strex	r3, r2, [r1]
 800a282:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1e6      	bne.n	800a258 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	3308      	adds	r3, #8
 800a290:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	e853 3f00 	ldrex	r3, [r3]
 800a298:	60fb      	str	r3, [r7, #12]
   return(result);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f023 0301 	bic.w	r3, r3, #1
 800a2a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2aa:	61fa      	str	r2, [r7, #28]
 800a2ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ae:	69b9      	ldr	r1, [r7, #24]
 800a2b0:	69fa      	ldr	r2, [r7, #28]
 800a2b2:	e841 2300 	strex	r3, r2, [r1]
 800a2b6:	617b      	str	r3, [r7, #20]
   return(result);
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1e5      	bne.n	800a28a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2220      	movs	r2, #32
 800a2c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	e012      	b.n	800a2f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2220      	movs	r2, #32
 800a2d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2220      	movs	r2, #32
 800a2de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3758      	adds	r7, #88	@ 0x58
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	603b      	str	r3, [r7, #0]
 800a30c:	4613      	mov	r3, r2
 800a30e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a310:	e049      	b.n	800a3a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a318:	d045      	beq.n	800a3a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a31a:	f7f7 f875 	bl	8001408 <HAL_GetTick>
 800a31e:	4602      	mov	r2, r0
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	1ad3      	subs	r3, r2, r3
 800a324:	69ba      	ldr	r2, [r7, #24]
 800a326:	429a      	cmp	r2, r3
 800a328:	d302      	bcc.n	800a330 <UART_WaitOnFlagUntilTimeout+0x30>
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d101      	bne.n	800a334 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a330:	2303      	movs	r3, #3
 800a332:	e048      	b.n	800a3c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f003 0304 	and.w	r3, r3, #4
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d031      	beq.n	800a3a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	69db      	ldr	r3, [r3, #28]
 800a348:	f003 0308 	and.w	r3, r3, #8
 800a34c:	2b08      	cmp	r3, #8
 800a34e:	d110      	bne.n	800a372 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2208      	movs	r2, #8
 800a356:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f000 f838 	bl	800a3ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2208      	movs	r2, #8
 800a362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	e029      	b.n	800a3c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	69db      	ldr	r3, [r3, #28]
 800a378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a37c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a380:	d111      	bne.n	800a3a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a38a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f000 f81e 	bl	800a3ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2220      	movs	r2, #32
 800a396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e00f      	b.n	800a3c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	69da      	ldr	r2, [r3, #28]
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	68ba      	ldr	r2, [r7, #8]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	bf0c      	ite	eq
 800a3b6:	2301      	moveq	r3, #1
 800a3b8:	2300      	movne	r3, #0
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	461a      	mov	r2, r3
 800a3be:	79fb      	ldrb	r3, [r7, #7]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d0a6      	beq.n	800a312 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b095      	sub	sp, #84	@ 0x54
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3de:	e853 3f00 	ldrex	r3, [r3]
 800a3e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a3fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3fc:	e841 2300 	strex	r3, r2, [r1]
 800a400:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1e6      	bne.n	800a3d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3308      	adds	r3, #8
 800a40e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a410:	6a3b      	ldr	r3, [r7, #32]
 800a412:	e853 3f00 	ldrex	r3, [r3]
 800a416:	61fb      	str	r3, [r7, #28]
   return(result);
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a41e:	f023 0301 	bic.w	r3, r3, #1
 800a422:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3308      	adds	r3, #8
 800a42a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a42c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a42e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a434:	e841 2300 	strex	r3, r2, [r1]
 800a438:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1e3      	bne.n	800a408 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a444:	2b01      	cmp	r3, #1
 800a446:	d118      	bne.n	800a47a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	e853 3f00 	ldrex	r3, [r3]
 800a454:	60bb      	str	r3, [r7, #8]
   return(result);
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	f023 0310 	bic.w	r3, r3, #16
 800a45c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a466:	61bb      	str	r3, [r7, #24]
 800a468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46a:	6979      	ldr	r1, [r7, #20]
 800a46c:	69ba      	ldr	r2, [r7, #24]
 800a46e:	e841 2300 	strex	r3, r2, [r1]
 800a472:	613b      	str	r3, [r7, #16]
   return(result);
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1e6      	bne.n	800a448 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2220      	movs	r2, #32
 800a47e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a48e:	bf00      	nop
 800a490:	3754      	adds	r7, #84	@ 0x54
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b085      	sub	sp, #20
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d101      	bne.n	800a4b0 <HAL_UARTEx_DisableFifoMode+0x16>
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	e027      	b.n	800a500 <HAL_UARTEx_DisableFifoMode+0x66>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2224      	movs	r2, #36	@ 0x24
 800a4bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f022 0201 	bic.w	r2, r2, #1
 800a4d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a4de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2220      	movs	r2, #32
 800a4f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d101      	bne.n	800a524 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a520:	2302      	movs	r3, #2
 800a522:	e02d      	b.n	800a580 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2224      	movs	r2, #36	@ 0x24
 800a530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f022 0201 	bic.w	r2, r2, #1
 800a54a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	430a      	orrs	r2, r1
 800a55e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f84f 	bl	800a604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2220      	movs	r2, #32
 800a572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d101      	bne.n	800a5a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a59c:	2302      	movs	r3, #2
 800a59e:	e02d      	b.n	800a5fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2224      	movs	r2, #36	@ 0x24
 800a5ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f022 0201 	bic.w	r2, r2, #1
 800a5c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 f811 	bl	800a604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a610:	2b00      	cmp	r3, #0
 800a612:	d108      	bne.n	800a626 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a624:	e031      	b.n	800a68a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a626:	2308      	movs	r3, #8
 800a628:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a62a:	2308      	movs	r3, #8
 800a62c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	0e5b      	lsrs	r3, r3, #25
 800a636:	b2db      	uxtb	r3, r3
 800a638:	f003 0307 	and.w	r3, r3, #7
 800a63c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	0f5b      	lsrs	r3, r3, #29
 800a646:	b2db      	uxtb	r3, r3
 800a648:	f003 0307 	and.w	r3, r3, #7
 800a64c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a64e:	7bbb      	ldrb	r3, [r7, #14]
 800a650:	7b3a      	ldrb	r2, [r7, #12]
 800a652:	4911      	ldr	r1, [pc, #68]	@ (800a698 <UARTEx_SetNbDataToProcess+0x94>)
 800a654:	5c8a      	ldrb	r2, [r1, r2]
 800a656:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a65a:	7b3a      	ldrb	r2, [r7, #12]
 800a65c:	490f      	ldr	r1, [pc, #60]	@ (800a69c <UARTEx_SetNbDataToProcess+0x98>)
 800a65e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a660:	fb93 f3f2 	sdiv	r3, r3, r2
 800a664:	b29a      	uxth	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
 800a66e:	7b7a      	ldrb	r2, [r7, #13]
 800a670:	4909      	ldr	r1, [pc, #36]	@ (800a698 <UARTEx_SetNbDataToProcess+0x94>)
 800a672:	5c8a      	ldrb	r2, [r1, r2]
 800a674:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a678:	7b7a      	ldrb	r2, [r7, #13]
 800a67a:	4908      	ldr	r1, [pc, #32]	@ (800a69c <UARTEx_SetNbDataToProcess+0x98>)
 800a67c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a67e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a682:	b29a      	uxth	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a68a:	bf00      	nop
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	0801cba4 	.word	0x0801cba4
 800a69c:	0801cbac 	.word	0x0801cbac

0800a6a0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a6a6:	4b98      	ldr	r3, [pc, #608]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a6a8:	22c0      	movs	r2, #192	@ 0xc0
 800a6aa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a6ac:	4b96      	ldr	r3, [pc, #600]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a6ae:	22a8      	movs	r2, #168	@ 0xa8
 800a6b0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 800a6b2:	4b95      	ldr	r3, [pc, #596]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a6b4:	220a      	movs	r2, #10
 800a6b6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800a6b8:	4b93      	ldr	r3, [pc, #588]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a6ba:	2264      	movs	r2, #100	@ 0x64
 800a6bc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a6be:	4b93      	ldr	r3, [pc, #588]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a6c0:	22ff      	movs	r2, #255	@ 0xff
 800a6c2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a6c4:	4b91      	ldr	r3, [pc, #580]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a6c6:	22ff      	movs	r2, #255	@ 0xff
 800a6c8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a6ca:	4b90      	ldr	r3, [pc, #576]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a6cc:	22ff      	movs	r2, #255	@ 0xff
 800a6ce:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a6d0:	4b8e      	ldr	r3, [pc, #568]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800a6d6:	4b8e      	ldr	r3, [pc, #568]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a6d8:	2200      	movs	r2, #0
 800a6da:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800a6dc:	4b8c      	ldr	r3, [pc, #560]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a6de:	2200      	movs	r2, #0
 800a6e0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800a6e2:	4b8b      	ldr	r3, [pc, #556]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800a6e8:	4b89      	ldr	r3, [pc, #548]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	f004 fc89 	bl	800f008 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a6f6:	4b84      	ldr	r3, [pc, #528]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	061a      	lsls	r2, r3, #24
 800a6fc:	4b82      	ldr	r3, [pc, #520]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a6fe:	785b      	ldrb	r3, [r3, #1]
 800a700:	041b      	lsls	r3, r3, #16
 800a702:	431a      	orrs	r2, r3
 800a704:	4b80      	ldr	r3, [pc, #512]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a706:	789b      	ldrb	r3, [r3, #2]
 800a708:	021b      	lsls	r3, r3, #8
 800a70a:	4313      	orrs	r3, r2
 800a70c:	4a7e      	ldr	r2, [pc, #504]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a70e:	78d2      	ldrb	r2, [r2, #3]
 800a710:	4313      	orrs	r3, r2
 800a712:	061a      	lsls	r2, r3, #24
 800a714:	4b7c      	ldr	r3, [pc, #496]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	0619      	lsls	r1, r3, #24
 800a71a:	4b7b      	ldr	r3, [pc, #492]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a71c:	785b      	ldrb	r3, [r3, #1]
 800a71e:	041b      	lsls	r3, r3, #16
 800a720:	4319      	orrs	r1, r3
 800a722:	4b79      	ldr	r3, [pc, #484]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a724:	789b      	ldrb	r3, [r3, #2]
 800a726:	021b      	lsls	r3, r3, #8
 800a728:	430b      	orrs	r3, r1
 800a72a:	4977      	ldr	r1, [pc, #476]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a72c:	78c9      	ldrb	r1, [r1, #3]
 800a72e:	430b      	orrs	r3, r1
 800a730:	021b      	lsls	r3, r3, #8
 800a732:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a736:	431a      	orrs	r2, r3
 800a738:	4b73      	ldr	r3, [pc, #460]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	0619      	lsls	r1, r3, #24
 800a73e:	4b72      	ldr	r3, [pc, #456]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a740:	785b      	ldrb	r3, [r3, #1]
 800a742:	041b      	lsls	r3, r3, #16
 800a744:	4319      	orrs	r1, r3
 800a746:	4b70      	ldr	r3, [pc, #448]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a748:	789b      	ldrb	r3, [r3, #2]
 800a74a:	021b      	lsls	r3, r3, #8
 800a74c:	430b      	orrs	r3, r1
 800a74e:	496e      	ldr	r1, [pc, #440]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a750:	78c9      	ldrb	r1, [r1, #3]
 800a752:	430b      	orrs	r3, r1
 800a754:	0a1b      	lsrs	r3, r3, #8
 800a756:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a75a:	431a      	orrs	r2, r3
 800a75c:	4b6a      	ldr	r3, [pc, #424]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	0619      	lsls	r1, r3, #24
 800a762:	4b69      	ldr	r3, [pc, #420]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a764:	785b      	ldrb	r3, [r3, #1]
 800a766:	041b      	lsls	r3, r3, #16
 800a768:	4319      	orrs	r1, r3
 800a76a:	4b67      	ldr	r3, [pc, #412]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a76c:	789b      	ldrb	r3, [r3, #2]
 800a76e:	021b      	lsls	r3, r3, #8
 800a770:	430b      	orrs	r3, r1
 800a772:	4965      	ldr	r1, [pc, #404]	@ (800a908 <MX_LWIP_Init+0x268>)
 800a774:	78c9      	ldrb	r1, [r1, #3]
 800a776:	430b      	orrs	r3, r1
 800a778:	0e1b      	lsrs	r3, r3, #24
 800a77a:	4313      	orrs	r3, r2
 800a77c:	4a65      	ldr	r2, [pc, #404]	@ (800a914 <MX_LWIP_Init+0x274>)
 800a77e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a780:	4b62      	ldr	r3, [pc, #392]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	061a      	lsls	r2, r3, #24
 800a786:	4b61      	ldr	r3, [pc, #388]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a788:	785b      	ldrb	r3, [r3, #1]
 800a78a:	041b      	lsls	r3, r3, #16
 800a78c:	431a      	orrs	r2, r3
 800a78e:	4b5f      	ldr	r3, [pc, #380]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a790:	789b      	ldrb	r3, [r3, #2]
 800a792:	021b      	lsls	r3, r3, #8
 800a794:	4313      	orrs	r3, r2
 800a796:	4a5d      	ldr	r2, [pc, #372]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a798:	78d2      	ldrb	r2, [r2, #3]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	061a      	lsls	r2, r3, #24
 800a79e:	4b5b      	ldr	r3, [pc, #364]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	0619      	lsls	r1, r3, #24
 800a7a4:	4b59      	ldr	r3, [pc, #356]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a7a6:	785b      	ldrb	r3, [r3, #1]
 800a7a8:	041b      	lsls	r3, r3, #16
 800a7aa:	4319      	orrs	r1, r3
 800a7ac:	4b57      	ldr	r3, [pc, #348]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a7ae:	789b      	ldrb	r3, [r3, #2]
 800a7b0:	021b      	lsls	r3, r3, #8
 800a7b2:	430b      	orrs	r3, r1
 800a7b4:	4955      	ldr	r1, [pc, #340]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a7b6:	78c9      	ldrb	r1, [r1, #3]
 800a7b8:	430b      	orrs	r3, r1
 800a7ba:	021b      	lsls	r3, r3, #8
 800a7bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a7c0:	431a      	orrs	r2, r3
 800a7c2:	4b52      	ldr	r3, [pc, #328]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	0619      	lsls	r1, r3, #24
 800a7c8:	4b50      	ldr	r3, [pc, #320]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a7ca:	785b      	ldrb	r3, [r3, #1]
 800a7cc:	041b      	lsls	r3, r3, #16
 800a7ce:	4319      	orrs	r1, r3
 800a7d0:	4b4e      	ldr	r3, [pc, #312]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a7d2:	789b      	ldrb	r3, [r3, #2]
 800a7d4:	021b      	lsls	r3, r3, #8
 800a7d6:	430b      	orrs	r3, r1
 800a7d8:	494c      	ldr	r1, [pc, #304]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a7da:	78c9      	ldrb	r1, [r1, #3]
 800a7dc:	430b      	orrs	r3, r1
 800a7de:	0a1b      	lsrs	r3, r3, #8
 800a7e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a7e4:	431a      	orrs	r2, r3
 800a7e6:	4b49      	ldr	r3, [pc, #292]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	0619      	lsls	r1, r3, #24
 800a7ec:	4b47      	ldr	r3, [pc, #284]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a7ee:	785b      	ldrb	r3, [r3, #1]
 800a7f0:	041b      	lsls	r3, r3, #16
 800a7f2:	4319      	orrs	r1, r3
 800a7f4:	4b45      	ldr	r3, [pc, #276]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a7f6:	789b      	ldrb	r3, [r3, #2]
 800a7f8:	021b      	lsls	r3, r3, #8
 800a7fa:	430b      	orrs	r3, r1
 800a7fc:	4943      	ldr	r1, [pc, #268]	@ (800a90c <MX_LWIP_Init+0x26c>)
 800a7fe:	78c9      	ldrb	r1, [r1, #3]
 800a800:	430b      	orrs	r3, r1
 800a802:	0e1b      	lsrs	r3, r3, #24
 800a804:	4313      	orrs	r3, r2
 800a806:	4a44      	ldr	r2, [pc, #272]	@ (800a918 <MX_LWIP_Init+0x278>)
 800a808:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a80a:	4b41      	ldr	r3, [pc, #260]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	061a      	lsls	r2, r3, #24
 800a810:	4b3f      	ldr	r3, [pc, #252]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a812:	785b      	ldrb	r3, [r3, #1]
 800a814:	041b      	lsls	r3, r3, #16
 800a816:	431a      	orrs	r2, r3
 800a818:	4b3d      	ldr	r3, [pc, #244]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a81a:	789b      	ldrb	r3, [r3, #2]
 800a81c:	021b      	lsls	r3, r3, #8
 800a81e:	4313      	orrs	r3, r2
 800a820:	4a3b      	ldr	r2, [pc, #236]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a822:	78d2      	ldrb	r2, [r2, #3]
 800a824:	4313      	orrs	r3, r2
 800a826:	061a      	lsls	r2, r3, #24
 800a828:	4b39      	ldr	r3, [pc, #228]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	0619      	lsls	r1, r3, #24
 800a82e:	4b38      	ldr	r3, [pc, #224]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a830:	785b      	ldrb	r3, [r3, #1]
 800a832:	041b      	lsls	r3, r3, #16
 800a834:	4319      	orrs	r1, r3
 800a836:	4b36      	ldr	r3, [pc, #216]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a838:	789b      	ldrb	r3, [r3, #2]
 800a83a:	021b      	lsls	r3, r3, #8
 800a83c:	430b      	orrs	r3, r1
 800a83e:	4934      	ldr	r1, [pc, #208]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a840:	78c9      	ldrb	r1, [r1, #3]
 800a842:	430b      	orrs	r3, r1
 800a844:	021b      	lsls	r3, r3, #8
 800a846:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a84a:	431a      	orrs	r2, r3
 800a84c:	4b30      	ldr	r3, [pc, #192]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	0619      	lsls	r1, r3, #24
 800a852:	4b2f      	ldr	r3, [pc, #188]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a854:	785b      	ldrb	r3, [r3, #1]
 800a856:	041b      	lsls	r3, r3, #16
 800a858:	4319      	orrs	r1, r3
 800a85a:	4b2d      	ldr	r3, [pc, #180]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a85c:	789b      	ldrb	r3, [r3, #2]
 800a85e:	021b      	lsls	r3, r3, #8
 800a860:	430b      	orrs	r3, r1
 800a862:	492b      	ldr	r1, [pc, #172]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a864:	78c9      	ldrb	r1, [r1, #3]
 800a866:	430b      	orrs	r3, r1
 800a868:	0a1b      	lsrs	r3, r3, #8
 800a86a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a86e:	431a      	orrs	r2, r3
 800a870:	4b27      	ldr	r3, [pc, #156]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	0619      	lsls	r1, r3, #24
 800a876:	4b26      	ldr	r3, [pc, #152]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a878:	785b      	ldrb	r3, [r3, #1]
 800a87a:	041b      	lsls	r3, r3, #16
 800a87c:	4319      	orrs	r1, r3
 800a87e:	4b24      	ldr	r3, [pc, #144]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a880:	789b      	ldrb	r3, [r3, #2]
 800a882:	021b      	lsls	r3, r3, #8
 800a884:	430b      	orrs	r3, r1
 800a886:	4922      	ldr	r1, [pc, #136]	@ (800a910 <MX_LWIP_Init+0x270>)
 800a888:	78c9      	ldrb	r1, [r1, #3]
 800a88a:	430b      	orrs	r3, r1
 800a88c:	0e1b      	lsrs	r3, r3, #24
 800a88e:	4313      	orrs	r3, r2
 800a890:	4a22      	ldr	r2, [pc, #136]	@ (800a91c <MX_LWIP_Init+0x27c>)
 800a892:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a894:	4b22      	ldr	r3, [pc, #136]	@ (800a920 <MX_LWIP_Init+0x280>)
 800a896:	9302      	str	r3, [sp, #8]
 800a898:	4b22      	ldr	r3, [pc, #136]	@ (800a924 <MX_LWIP_Init+0x284>)
 800a89a:	9301      	str	r3, [sp, #4]
 800a89c:	2300      	movs	r3, #0
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	4b1e      	ldr	r3, [pc, #120]	@ (800a91c <MX_LWIP_Init+0x27c>)
 800a8a2:	4a1d      	ldr	r2, [pc, #116]	@ (800a918 <MX_LWIP_Init+0x278>)
 800a8a4:	491b      	ldr	r1, [pc, #108]	@ (800a914 <MX_LWIP_Init+0x274>)
 800a8a6:	4820      	ldr	r0, [pc, #128]	@ (800a928 <MX_LWIP_Init+0x288>)
 800a8a8:	f005 fa30 	bl	800fd0c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a8ac:	481e      	ldr	r0, [pc, #120]	@ (800a928 <MX_LWIP_Init+0x288>)
 800a8ae:	f005 fbdf 	bl	8010070 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a8b2:	4b1d      	ldr	r3, [pc, #116]	@ (800a928 <MX_LWIP_Init+0x288>)
 800a8b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a8b8:	089b      	lsrs	r3, r3, #2
 800a8ba:	f003 0301 	and.w	r3, r3, #1
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d003      	beq.n	800a8cc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a8c4:	4818      	ldr	r0, [pc, #96]	@ (800a928 <MX_LWIP_Init+0x288>)
 800a8c6:	f005 fbe3 	bl	8010090 <netif_set_up>
 800a8ca:	e002      	b.n	800a8d2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a8cc:	4816      	ldr	r0, [pc, #88]	@ (800a928 <MX_LWIP_Init+0x288>)
 800a8ce:	f005 fc4b 	bl	8010168 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a8d2:	4916      	ldr	r1, [pc, #88]	@ (800a92c <MX_LWIP_Init+0x28c>)
 800a8d4:	4814      	ldr	r0, [pc, #80]	@ (800a928 <MX_LWIP_Init+0x288>)
 800a8d6:	f005 fcdd 	bl	8010294 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
  /* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
    memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800a8da:	2224      	movs	r2, #36	@ 0x24
 800a8dc:	2100      	movs	r1, #0
 800a8de:	4814      	ldr	r0, [pc, #80]	@ (800a930 <MX_LWIP_Init+0x290>)
 800a8e0:	f00e fcef 	bl	80192c2 <memset>
    attributes.name = "EthLink";
 800a8e4:	4b12      	ldr	r3, [pc, #72]	@ (800a930 <MX_LWIP_Init+0x290>)
 800a8e6:	4a13      	ldr	r2, [pc, #76]	@ (800a934 <MX_LWIP_Init+0x294>)
 800a8e8:	601a      	str	r2, [r3, #0]
    attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800a8ea:	4b11      	ldr	r3, [pc, #68]	@ (800a930 <MX_LWIP_Init+0x290>)
 800a8ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a8f0:	615a      	str	r2, [r3, #20]
    attributes.priority = osPriorityBelowNormal;
 800a8f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a930 <MX_LWIP_Init+0x290>)
 800a8f4:	2210      	movs	r2, #16
 800a8f6:	619a      	str	r2, [r3, #24]
    osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800a8f8:	4a0d      	ldr	r2, [pc, #52]	@ (800a930 <MX_LWIP_Init+0x290>)
 800a8fa:	490b      	ldr	r1, [pc, #44]	@ (800a928 <MX_LWIP_Init+0x288>)
 800a8fc:	480e      	ldr	r0, [pc, #56]	@ (800a938 <MX_LWIP_Init+0x298>)
 800a8fe:	f000 fdc9 	bl	800b494 <osThreadNew>
  /* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a902:	bf00      	nop
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	2005026c 	.word	0x2005026c
 800a90c:	20050270 	.word	0x20050270
 800a910:	20050274 	.word	0x20050274
 800a914:	20050260 	.word	0x20050260
 800a918:	20050264 	.word	0x20050264
 800a91c:	20050268 	.word	0x20050268
 800a920:	0800ef45 	.word	0x0800ef45
 800a924:	0800ade1 	.word	0x0800ade1
 800a928:	2005022c 	.word	0x2005022c
 800a92c:	0800a93d 	.word	0x0800a93d
 800a930:	20050278 	.word	0x20050278
 800a934:	0801a04c 	.word	0x0801a04c
 800a938:	0800b0e5 	.word	0x0800b0e5

0800a93c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a958:	4b04      	ldr	r3, [pc, #16]	@ (800a96c <HAL_ETH_RxCpltCallback+0x1c>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f001 f825 	bl	800b9ac <osSemaphoreRelease>
}
 800a962:	bf00      	nop
 800a964:	3708      	adds	r7, #8
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	20054c28 	.word	0x20054c28

0800a970 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800a978:	4b04      	ldr	r3, [pc, #16]	@ (800a98c <HAL_ETH_TxCpltCallback+0x1c>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f001 f815 	bl	800b9ac <osSemaphoreRelease>
}
 800a982:	bf00      	nop
 800a984:	3708      	adds	r7, #8
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	20054c2c 	.word	0x20054c2c

0800a990 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f7f7 fe29 	bl	80025f0 <HAL_ETH_GetDMAError>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9a4:	2b80      	cmp	r3, #128	@ 0x80
 800a9a6:	d104      	bne.n	800a9b2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800a9a8:	4b04      	ldr	r3, [pc, #16]	@ (800a9bc <HAL_ETH_ErrorCallback+0x2c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f000 fffd 	bl	800b9ac <osSemaphoreRelease>
  }
}
 800a9b2:	bf00      	nop
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	20054c28 	.word	0x20054c28

0800a9c0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b0aa      	sub	sp, #168	@ 0xa8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800a9da:	f107 0310 	add.w	r3, r7, #16
 800a9de:	2264      	movs	r2, #100	@ 0x64
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f00e fc6d 	bl	80192c2 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a9e8:	4b85      	ldr	r3, [pc, #532]	@ (800ac00 <low_level_init+0x240>)
 800a9ea:	4a86      	ldr	r2, [pc, #536]	@ (800ac04 <low_level_init+0x244>)
 800a9ec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a9f2:	2380      	movs	r3, #128	@ 0x80
 800a9f4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a9f6:	23e1      	movs	r3, #225	@ 0xe1
 800a9f8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800aa02:	2300      	movs	r3, #0
 800aa04:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800aa06:	4a7e      	ldr	r2, [pc, #504]	@ (800ac00 <low_level_init+0x240>)
 800aa08:	f107 0308 	add.w	r3, r7, #8
 800aa0c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800aa0e:	4b7c      	ldr	r3, [pc, #496]	@ (800ac00 <low_level_init+0x240>)
 800aa10:	2201      	movs	r2, #1
 800aa12:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800aa14:	4b7a      	ldr	r3, [pc, #488]	@ (800ac00 <low_level_init+0x240>)
 800aa16:	4a7c      	ldr	r2, [pc, #496]	@ (800ac08 <low_level_init+0x248>)
 800aa18:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800aa1a:	4b79      	ldr	r3, [pc, #484]	@ (800ac00 <low_level_init+0x240>)
 800aa1c:	4a7b      	ldr	r2, [pc, #492]	@ (800ac0c <low_level_init+0x24c>)
 800aa1e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800aa20:	4b77      	ldr	r3, [pc, #476]	@ (800ac00 <low_level_init+0x240>)
 800aa22:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800aa26:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800aa28:	4875      	ldr	r0, [pc, #468]	@ (800ac00 <low_level_init+0x240>)
 800aa2a:	f7f6 fdef 	bl	800160c <HAL_ETH_Init>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800aa34:	2238      	movs	r2, #56	@ 0x38
 800aa36:	2100      	movs	r1, #0
 800aa38:	4875      	ldr	r0, [pc, #468]	@ (800ac10 <low_level_init+0x250>)
 800aa3a:	f00e fc42 	bl	80192c2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800aa3e:	4b74      	ldr	r3, [pc, #464]	@ (800ac10 <low_level_init+0x250>)
 800aa40:	2221      	movs	r2, #33	@ 0x21
 800aa42:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800aa44:	4b72      	ldr	r3, [pc, #456]	@ (800ac10 <low_level_init+0x250>)
 800aa46:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800aa4a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800aa4c:	4b70      	ldr	r3, [pc, #448]	@ (800ac10 <low_level_init+0x250>)
 800aa4e:	2200      	movs	r2, #0
 800aa50:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800aa52:	4870      	ldr	r0, [pc, #448]	@ (800ac14 <low_level_init+0x254>)
 800aa54:	f005 f814 	bl	800fa80 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2206      	movs	r2, #6
 800aa5c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800aa60:	4b67      	ldr	r3, [pc, #412]	@ (800ac00 <low_level_init+0x240>)
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	781a      	ldrb	r2, [r3, #0]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800aa6c:	4b64      	ldr	r3, [pc, #400]	@ (800ac00 <low_level_init+0x240>)
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	785a      	ldrb	r2, [r3, #1]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800aa78:	4b61      	ldr	r3, [pc, #388]	@ (800ac00 <low_level_init+0x240>)
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	789a      	ldrb	r2, [r3, #2]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800aa84:	4b5e      	ldr	r3, [pc, #376]	@ (800ac00 <low_level_init+0x240>)
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	78da      	ldrb	r2, [r3, #3]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800aa90:	4b5b      	ldr	r3, [pc, #364]	@ (800ac00 <low_level_init+0x240>)
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	791a      	ldrb	r2, [r3, #4]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800aa9c:	4b58      	ldr	r3, [pc, #352]	@ (800ac00 <low_level_init+0x240>)
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	795a      	ldrb	r2, [r3, #5]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800aaae:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aab6:	f043 030a 	orr.w	r3, r3, #10
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800aac2:	2200      	movs	r2, #0
 800aac4:	2101      	movs	r1, #1
 800aac6:	2001      	movs	r0, #1
 800aac8:	f000 fe9b 	bl	800b802 <osSemaphoreNew>
 800aacc:	4603      	mov	r3, r0
 800aace:	4a52      	ldr	r2, [pc, #328]	@ (800ac18 <low_level_init+0x258>)
 800aad0:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800aad2:	2200      	movs	r2, #0
 800aad4:	2101      	movs	r1, #1
 800aad6:	2001      	movs	r0, #1
 800aad8:	f000 fe93 	bl	800b802 <osSemaphoreNew>
 800aadc:	4603      	mov	r3, r0
 800aade:	4a4f      	ldr	r2, [pc, #316]	@ (800ac1c <low_level_init+0x25c>)
 800aae0:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800aae2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800aae6:	2224      	movs	r2, #36	@ 0x24
 800aae8:	2100      	movs	r1, #0
 800aaea:	4618      	mov	r0, r3
 800aaec:	f00e fbe9 	bl	80192c2 <memset>
  attributes.name = "EthIf";
 800aaf0:	4b4b      	ldr	r3, [pc, #300]	@ (800ac20 <low_level_init+0x260>)
 800aaf2:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800aaf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aaf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800aafc:	2330      	movs	r3, #48	@ 0x30
 800aafe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800ab02:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800ab06:	461a      	mov	r2, r3
 800ab08:	6879      	ldr	r1, [r7, #4]
 800ab0a:	4846      	ldr	r0, [pc, #280]	@ (800ac24 <low_level_init+0x264>)
 800ab0c:	f000 fcc2 	bl	800b494 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800ab10:	4945      	ldr	r1, [pc, #276]	@ (800ac28 <low_level_init+0x268>)
 800ab12:	4846      	ldr	r0, [pc, #280]	@ (800ac2c <low_level_init+0x26c>)
 800ab14:	f7f6 fadd 	bl	80010d2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800ab18:	4844      	ldr	r0, [pc, #272]	@ (800ac2c <low_level_init+0x26c>)
 800ab1a:	f7f6 fb0c 	bl	8001136 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800ab1e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d165      	bne.n	800abf2 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ab26:	4841      	ldr	r0, [pc, #260]	@ (800ac2c <low_level_init+0x26c>)
 800ab28:	f7f6 fbad 	bl	8001286 <LAN8742_GetLinkState>
 800ab2c:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800ab30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	dc06      	bgt.n	800ab46 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f005 fb7b 	bl	8010234 <netif_set_link_down>
      netif_set_down(netif);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f005 fb12 	bl	8010168 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800ab44:	e057      	b.n	800abf6 <low_level_init+0x236>
      switch (PHYLinkState)
 800ab46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab4a:	3b02      	subs	r3, #2
 800ab4c:	2b03      	cmp	r3, #3
 800ab4e:	d82b      	bhi.n	800aba8 <low_level_init+0x1e8>
 800ab50:	a201      	add	r2, pc, #4	@ (adr r2, 800ab58 <low_level_init+0x198>)
 800ab52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab56:	bf00      	nop
 800ab58:	0800ab69 	.word	0x0800ab69
 800ab5c:	0800ab7b 	.word	0x0800ab7b
 800ab60:	0800ab8b 	.word	0x0800ab8b
 800ab64:	0800ab9b 	.word	0x0800ab9b
        duplex = ETH_FULLDUPLEX_MODE;
 800ab68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800ab70:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ab74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800ab78:	e01f      	b.n	800abba <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800ab80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ab84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800ab88:	e017      	b.n	800abba <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800ab8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800ab92:	2300      	movs	r3, #0
 800ab94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800ab98:	e00f      	b.n	800abba <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800aba0:	2300      	movs	r3, #0
 800aba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800aba6:	e008      	b.n	800abba <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800aba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800abac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800abb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800abb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800abb8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800abba:	f107 0310 	add.w	r3, r7, #16
 800abbe:	4619      	mov	r1, r3
 800abc0:	480f      	ldr	r0, [pc, #60]	@ (800ac00 <low_level_init+0x240>)
 800abc2:	f7f7 fabf 	bl	8002144 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800abc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800abca:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800abcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800abd2:	f107 0310 	add.w	r3, r7, #16
 800abd6:	4619      	mov	r1, r3
 800abd8:	4809      	ldr	r0, [pc, #36]	@ (800ac00 <low_level_init+0x240>)
 800abda:	f7f7 fc87 	bl	80024ec <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800abde:	4808      	ldr	r0, [pc, #32]	@ (800ac00 <low_level_init+0x240>)
 800abe0:	f7f6 fdfa 	bl	80017d8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f005 fa53 	bl	8010090 <netif_set_up>
    netif_set_link_up(netif);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f005 faee 	bl	80101cc <netif_set_link_up>
}
 800abf0:	e001      	b.n	800abf6 <low_level_init+0x236>
    Error_Handler();
 800abf2:	f7f5 ff4f 	bl	8000a94 <Error_Handler>
}
 800abf6:	bf00      	nop
 800abf8:	37a8      	adds	r7, #168	@ 0xa8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	20054c30 	.word	0x20054c30
 800ac04:	40028000 	.word	0x40028000
 800ac08:	20040060 	.word	0x20040060
 800ac0c:	20040000 	.word	0x20040000
 800ac10:	20054ce0 	.word	0x20054ce0
 800ac14:	0801cbb4 	.word	0x0801cbb4
 800ac18:	20054c28 	.word	0x20054c28
 800ac1c:	20054c2c 	.word	0x20054c2c
 800ac20:	0801a054 	.word	0x0801a054
 800ac24:	0800ad8d 	.word	0x0800ad8d
 800ac28:	2005000c 	.word	0x2005000c
 800ac2c:	20054d18 	.word	0x20054d18

0800ac30 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b092      	sub	sp, #72	@ 0x48
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800ac48:	f107 030c 	add.w	r3, r7, #12
 800ac4c:	2230      	movs	r2, #48	@ 0x30
 800ac4e:	2100      	movs	r1, #0
 800ac50:	4618      	mov	r0, r3
 800ac52:	f00e fb36 	bl	80192c2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ac56:	f107 030c 	add.w	r3, r7, #12
 800ac5a:	2230      	movs	r2, #48	@ 0x30
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f00e fb2f 	bl	80192c2 <memset>

  for(q = p; q != NULL; q = q->next)
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac68:	e045      	b.n	800acf6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800ac6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac6c:	2b03      	cmp	r3, #3
 800ac6e:	d902      	bls.n	800ac76 <low_level_output+0x46>
      return ERR_IF;
 800ac70:	f06f 030b 	mvn.w	r3, #11
 800ac74:	e065      	b.n	800ad42 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800ac76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac78:	6859      	ldr	r1, [r3, #4]
 800ac7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	005b      	lsls	r3, r3, #1
 800ac80:	4413      	add	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	3348      	adds	r3, #72	@ 0x48
 800ac86:	443b      	add	r3, r7
 800ac88:	3b3c      	subs	r3, #60	@ 0x3c
 800ac8a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ac8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac8e:	895b      	ldrh	r3, [r3, #10]
 800ac90:	4619      	mov	r1, r3
 800ac92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac94:	4613      	mov	r3, r2
 800ac96:	005b      	lsls	r3, r3, #1
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	3348      	adds	r3, #72	@ 0x48
 800ac9e:	443b      	add	r3, r7
 800aca0:	3b38      	subs	r3, #56	@ 0x38
 800aca2:	6019      	str	r1, [r3, #0]

    if(i>0)
 800aca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d011      	beq.n	800acce <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800acaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acac:	1e5a      	subs	r2, r3, #1
 800acae:	f107 000c 	add.w	r0, r7, #12
 800acb2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800acb4:	460b      	mov	r3, r1
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	440b      	add	r3, r1
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	18c1      	adds	r1, r0, r3
 800acbe:	4613      	mov	r3, r2
 800acc0:	005b      	lsls	r3, r3, #1
 800acc2:	4413      	add	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	3348      	adds	r3, #72	@ 0x48
 800acc8:	443b      	add	r3, r7
 800acca:	3b34      	subs	r3, #52	@ 0x34
 800accc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800acce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d109      	bne.n	800acea <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800acd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acd8:	4613      	mov	r3, r2
 800acda:	005b      	lsls	r3, r3, #1
 800acdc:	4413      	add	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	3348      	adds	r3, #72	@ 0x48
 800ace2:	443b      	add	r3, r7
 800ace4:	3b34      	subs	r3, #52	@ 0x34
 800ace6:	2200      	movs	r2, #0
 800ace8:	601a      	str	r2, [r3, #0]
    }

    i++;
 800acea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acec:	3301      	adds	r3, #1
 800acee:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800acf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	643b      	str	r3, [r7, #64]	@ 0x40
 800acf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1b6      	bne.n	800ac6a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	891b      	ldrh	r3, [r3, #8]
 800ad00:	461a      	mov	r2, r3
 800ad02:	4b12      	ldr	r3, [pc, #72]	@ (800ad4c <low_level_output+0x11c>)
 800ad04:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800ad06:	4a11      	ldr	r2, [pc, #68]	@ (800ad4c <low_level_output+0x11c>)
 800ad08:	f107 030c 	add.w	r3, r7, #12
 800ad0c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800ad0e:	4a0f      	ldr	r2, [pc, #60]	@ (800ad4c <low_level_output+0x11c>)
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800ad14:	6838      	ldr	r0, [r7, #0]
 800ad16:	f005 ff11 	bl	8010b3c <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800ad1a:	490c      	ldr	r1, [pc, #48]	@ (800ad4c <low_level_output+0x11c>)
 800ad1c:	480c      	ldr	r0, [pc, #48]	@ (800ad50 <low_level_output+0x120>)
 800ad1e:	f7f6 fe61 	bl	80019e4 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800ad22:	bf00      	nop
 800ad24:	4b0b      	ldr	r3, [pc, #44]	@ (800ad54 <low_level_output+0x124>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f04f 31ff 	mov.w	r1, #4294967295
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f000 fdf1 	bl	800b914 <osSemaphoreAcquire>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d1f5      	bne.n	800ad24 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800ad38:	4805      	ldr	r0, [pc, #20]	@ (800ad50 <low_level_output+0x120>)
 800ad3a:	f7f6 ffd2 	bl	8001ce2 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800ad3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3748      	adds	r7, #72	@ 0x48
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20054ce0 	.word	0x20054ce0
 800ad50:	20054c30 	.word	0x20054c30
 800ad54:	20054c2c 	.word	0x20054c2c

0800ad58 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ad60:	2300      	movs	r3, #0
 800ad62:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800ad64:	4b07      	ldr	r3, [pc, #28]	@ (800ad84 <low_level_input+0x2c>)
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d105      	bne.n	800ad78 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800ad6c:	f107 030c 	add.w	r3, r7, #12
 800ad70:	4619      	mov	r1, r3
 800ad72:	4805      	ldr	r0, [pc, #20]	@ (800ad88 <low_level_input+0x30>)
 800ad74:	f7f6 fe87 	bl	8001a86 <HAL_ETH_ReadData>
  }

  return p;
 800ad78:	68fb      	ldr	r3, [r7, #12]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	20054c24 	.word	0x20054c24
 800ad88:	20054c30 	.word	0x20054c30

0800ad8c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ad94:	2300      	movs	r3, #0
 800ad96:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ad9c:	4b0f      	ldr	r3, [pc, #60]	@ (800addc <ethernetif_input+0x50>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f04f 31ff 	mov.w	r1, #4294967295
 800ada4:	4618      	mov	r0, r3
 800ada6:	f000 fdb5 	bl	800b914 <osSemaphoreAcquire>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1f5      	bne.n	800ad9c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800adb0:	68b8      	ldr	r0, [r7, #8]
 800adb2:	f7ff ffd1 	bl	800ad58 <low_level_input>
 800adb6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00a      	beq.n	800add4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	68b9      	ldr	r1, [r7, #8]
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	4798      	blx	r3
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d002      	beq.n	800add4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f005 fe0e 	bl	80109f0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1ea      	bne.n	800adb0 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800adda:	e7df      	b.n	800ad9c <ethernetif_input+0x10>
 800addc:	20054c28 	.word	0x20054c28

0800ade0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d106      	bne.n	800adfc <ethernetif_init+0x1c>
 800adee:	4b0e      	ldr	r3, [pc, #56]	@ (800ae28 <ethernetif_init+0x48>)
 800adf0:	f240 12f5 	movw	r2, #501	@ 0x1f5
 800adf4:	490d      	ldr	r1, [pc, #52]	@ (800ae2c <ethernetif_init+0x4c>)
 800adf6:	480e      	ldr	r0, [pc, #56]	@ (800ae30 <ethernetif_init+0x50>)
 800adf8:	f00e f9fe 	bl	80191f8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2273      	movs	r2, #115	@ 0x73
 800ae00:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2274      	movs	r2, #116	@ 0x74
 800ae08:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a09      	ldr	r2, [pc, #36]	@ (800ae34 <ethernetif_init+0x54>)
 800ae10:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4a08      	ldr	r2, [pc, #32]	@ (800ae38 <ethernetif_init+0x58>)
 800ae16:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7ff fdd1 	bl	800a9c0 <low_level_init>

  return ERR_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	0801a05c 	.word	0x0801a05c
 800ae2c:	0801a078 	.word	0x0801a078
 800ae30:	0801a088 	.word	0x0801a088
 800ae34:	080170d5 	.word	0x080170d5
 800ae38:	0800ac31 	.word	0x0800ac31

0800ae3c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ae48:	68f9      	ldr	r1, [r7, #12]
 800ae4a:	4809      	ldr	r0, [pc, #36]	@ (800ae70 <pbuf_free_custom+0x34>)
 800ae4c:	f004 ff08 	bl	800fc60 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800ae50:	4b08      	ldr	r3, [pc, #32]	@ (800ae74 <pbuf_free_custom+0x38>)
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d107      	bne.n	800ae68 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800ae58:	4b06      	ldr	r3, [pc, #24]	@ (800ae74 <pbuf_free_custom+0x38>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800ae5e:	4b06      	ldr	r3, [pc, #24]	@ (800ae78 <pbuf_free_custom+0x3c>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 fda2 	bl	800b9ac <osSemaphoreRelease>
  }
}
 800ae68:	bf00      	nop
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	0801cbb4 	.word	0x0801cbb4
 800ae74:	20054c24 	.word	0x20054c24
 800ae78:	20054c28 	.word	0x20054c28

0800ae7c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ae80:	f7f6 fac2 	bl	8001408 <HAL_GetTick>
 800ae84:	4603      	mov	r3, r0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	bd80      	pop	{r7, pc}
	...

0800ae8c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b08e      	sub	sp, #56	@ 0x38
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]
 800ae9c:	605a      	str	r2, [r3, #4]
 800ae9e:	609a      	str	r2, [r3, #8]
 800aea0:	60da      	str	r2, [r3, #12]
 800aea2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a61      	ldr	r2, [pc, #388]	@ (800b030 <HAL_ETH_MspInit+0x1a4>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	f040 80bb 	bne.w	800b026 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
  	__HAL_RCC_ETH_CLK_ENABLE();
 800aeb0:	4b60      	ldr	r3, [pc, #384]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800aeb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeb6:	4a5f      	ldr	r2, [pc, #380]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800aeb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aebc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800aec0:	4b5c      	ldr	r3, [pc, #368]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800aec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aec6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aeca:	623b      	str	r3, [r7, #32]
 800aecc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 800aece:	4b59      	ldr	r3, [pc, #356]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800aed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aed4:	4a57      	ldr	r2, [pc, #348]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800aed6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aeda:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800aede:	4b55      	ldr	r3, [pc, #340]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800aee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aee4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aee8:	61fb      	str	r3, [r7, #28]
 800aeea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 800aeec:	4b51      	ldr	r3, [pc, #324]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800aeee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aef2:	4a50      	ldr	r2, [pc, #320]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800aef4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800aefc:	4b4d      	ldr	r3, [pc, #308]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800aefe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800af06:	61bb      	str	r3, [r7, #24]
 800af08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800af0a:	4b4a      	ldr	r3, [pc, #296]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800af0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af10:	4a48      	ldr	r2, [pc, #288]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800af12:	f043 0304 	orr.w	r3, r3, #4
 800af16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800af1a:	4b46      	ldr	r3, [pc, #280]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800af1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af20:	f003 0304 	and.w	r3, r3, #4
 800af24:	617b      	str	r3, [r7, #20]
 800af26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af28:	4b42      	ldr	r3, [pc, #264]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800af2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af2e:	4a41      	ldr	r2, [pc, #260]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800af30:	f043 0301 	orr.w	r3, r3, #1
 800af34:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800af38:	4b3e      	ldr	r3, [pc, #248]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800af3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	613b      	str	r3, [r7, #16]
 800af44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af46:	4b3b      	ldr	r3, [pc, #236]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800af48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af4c:	4a39      	ldr	r2, [pc, #228]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800af4e:	f043 0302 	orr.w	r3, r3, #2
 800af52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800af56:	4b37      	ldr	r3, [pc, #220]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800af58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af5c:	f003 0302 	and.w	r3, r3, #2
 800af60:	60fb      	str	r3, [r7, #12]
 800af62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800af64:	4b33      	ldr	r3, [pc, #204]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800af66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af6a:	4a32      	ldr	r2, [pc, #200]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800af6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af70:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800af74:	4b2f      	ldr	r3, [pc, #188]	@ (800b034 <HAL_ETH_MspInit+0x1a8>)
 800af76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af7e:	60bb      	str	r3, [r7, #8]
 800af80:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800af82:	2332      	movs	r3, #50	@ 0x32
 800af84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af86:	2302      	movs	r3, #2
 800af88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af8a:	2300      	movs	r3, #0
 800af8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af8e:	2300      	movs	r3, #0
 800af90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800af92:	230b      	movs	r3, #11
 800af94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800af96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af9a:	4619      	mov	r1, r3
 800af9c:	4826      	ldr	r0, [pc, #152]	@ (800b038 <HAL_ETH_MspInit+0x1ac>)
 800af9e:	f7f8 f8a7 	bl	80030f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800afa2:	2386      	movs	r3, #134	@ 0x86
 800afa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afa6:	2302      	movs	r3, #2
 800afa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afaa:	2300      	movs	r3, #0
 800afac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afae:	2300      	movs	r3, #0
 800afb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800afb2:	230b      	movs	r3, #11
 800afb4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800afb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afba:	4619      	mov	r1, r3
 800afbc:	481f      	ldr	r0, [pc, #124]	@ (800b03c <HAL_ETH_MspInit+0x1b0>)
 800afbe:	f7f8 f897 	bl	80030f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800afc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afc8:	2302      	movs	r3, #2
 800afca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afcc:	2300      	movs	r3, #0
 800afce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afd0:	2300      	movs	r3, #0
 800afd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800afd4:	230b      	movs	r3, #11
 800afd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800afd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afdc:	4619      	mov	r1, r3
 800afde:	4818      	ldr	r0, [pc, #96]	@ (800b040 <HAL_ETH_MspInit+0x1b4>)
 800afe0:	f7f8 f886 	bl	80030f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800afe4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800afe8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afea:	2302      	movs	r3, #2
 800afec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afee:	2300      	movs	r3, #0
 800aff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aff2:	2300      	movs	r3, #0
 800aff4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aff6:	230b      	movs	r3, #11
 800aff8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800affa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800affe:	4619      	mov	r1, r3
 800b000:	4810      	ldr	r0, [pc, #64]	@ (800b044 <HAL_ETH_MspInit+0x1b8>)
 800b002:	f7f8 f875 	bl	80030f0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b006:	2200      	movs	r2, #0
 800b008:	2105      	movs	r1, #5
 800b00a:	206a      	movs	r0, #106	@ 0x6a
 800b00c:	f7f6 fad6 	bl	80015bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b010:	206a      	movs	r0, #106	@ 0x6a
 800b012:	f7f6 faed 	bl	80015f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800b016:	2200      	movs	r2, #0
 800b018:	2105      	movs	r1, #5
 800b01a:	206b      	movs	r0, #107	@ 0x6b
 800b01c:	f7f6 face 	bl	80015bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800b020:	206b      	movs	r0, #107	@ 0x6b
 800b022:	f7f6 fae5 	bl	80015f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b026:	bf00      	nop
 800b028:	3738      	adds	r7, #56	@ 0x38
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	40028000 	.word	0x40028000
 800b034:	44020c00 	.word	0x44020c00
 800b038:	42020800 	.word	0x42020800
 800b03c:	42020000 	.word	0x42020000
 800b040:	42020400 	.word	0x42020400
 800b044:	42021800 	.word	0x42021800

0800b048 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b04c:	4802      	ldr	r0, [pc, #8]	@ (800b058 <ETH_PHY_IO_Init+0x10>)
 800b04e:	f7f7 fa67 	bl	8002520 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	bd80      	pop	{r7, pc}
 800b058:	20054c30 	.word	0x20054c30

0800b05c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b05c:	b480      	push	{r7}
 800b05e:	af00      	add	r7, sp, #0
  return 0;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	68f9      	ldr	r1, [r7, #12]
 800b07e:	4807      	ldr	r0, [pc, #28]	@ (800b09c <ETH_PHY_IO_ReadReg+0x30>)
 800b080:	f7f6 ffb8 	bl	8001ff4 <HAL_ETH_ReadPHYRegister>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d002      	beq.n	800b090 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b08a:	f04f 33ff 	mov.w	r3, #4294967295
 800b08e:	e000      	b.n	800b092 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	20054c30 	.word	0x20054c30

0800b0a0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	68f9      	ldr	r1, [r7, #12]
 800b0b2:	4807      	ldr	r0, [pc, #28]	@ (800b0d0 <ETH_PHY_IO_WriteReg+0x30>)
 800b0b4:	f7f6 fff2 	bl	800209c <HAL_ETH_WritePHYRegister>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d002      	beq.n	800b0c4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b0be:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c2:	e000      	b.n	800b0c6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20054c30 	.word	0x20054c30

0800b0d4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b0d8:	f7f6 f996 	bl	8001408 <HAL_GetTick>
 800b0dc:	4603      	mov	r3, r0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	bd80      	pop	{r7, pc}
	...

0800b0e4 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b0a0      	sub	sp, #128	@ 0x80
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800b0ec:	f107 0308 	add.w	r3, r7, #8
 800b0f0:	2264      	movs	r2, #100	@ 0x64
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f00e f8e4 	bl	80192c2 <memset>
  int32_t PHYLinkState = 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b0fe:	2300      	movs	r3, #0
 800b100:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b102:	2300      	movs	r3, #0
 800b104:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b106:	2300      	movs	r3, #0
 800b108:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b10e:	483a      	ldr	r0, [pc, #232]	@ (800b1f8 <ethernet_link_thread+0x114>)
 800b110:	f7f6 f8b9 	bl	8001286 <LAN8742_GetLinkState>
 800b114:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b118:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b11c:	089b      	lsrs	r3, r3, #2
 800b11e:	f003 0301 	and.w	r3, r3, #1
 800b122:	b2db      	uxtb	r3, r3
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00c      	beq.n	800b142 <ethernet_link_thread+0x5e>
 800b128:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	dc09      	bgt.n	800b142 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800b12e:	4833      	ldr	r0, [pc, #204]	@ (800b1fc <ethernet_link_thread+0x118>)
 800b130:	f7f6 fbe0 	bl	80018f4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800b134:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b136:	f005 f817 	bl	8010168 <netif_set_down>
    netif_set_link_down(netif);
 800b13a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b13c:	f005 f87a 	bl	8010234 <netif_set_link_down>
 800b140:	e055      	b.n	800b1ee <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b144:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b148:	f003 0304 	and.w	r3, r3, #4
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d14e      	bne.n	800b1ee <ethernet_link_thread+0x10a>
 800b150:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b152:	2b01      	cmp	r3, #1
 800b154:	dd4b      	ble.n	800b1ee <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800b156:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b158:	3b02      	subs	r3, #2
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	d82a      	bhi.n	800b1b4 <ethernet_link_thread+0xd0>
 800b15e:	a201      	add	r2, pc, #4	@ (adr r2, 800b164 <ethernet_link_thread+0x80>)
 800b160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b164:	0800b175 	.word	0x0800b175
 800b168:	0800b187 	.word	0x0800b187
 800b16c:	0800b197 	.word	0x0800b197
 800b170:	0800b1a7 	.word	0x0800b1a7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b174:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b178:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800b17a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b17e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b180:	2301      	movs	r3, #1
 800b182:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b184:	e017      	b.n	800b1b6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b186:	2300      	movs	r3, #0
 800b188:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800b18a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b18e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b190:	2301      	movs	r3, #1
 800b192:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b194:	e00f      	b.n	800b1b6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b196:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b19a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800b19c:	2300      	movs	r3, #0
 800b19e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b1a4:	e007      	b.n	800b1b6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b1b2:	e000      	b.n	800b1b6 <ethernet_link_thread+0xd2>
    default:
      break;
 800b1b4:	bf00      	nop
    }

    if(linkchanged)
 800b1b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d018      	beq.n	800b1ee <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b1bc:	f107 0308 	add.w	r3, r7, #8
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	480e      	ldr	r0, [pc, #56]	@ (800b1fc <ethernet_link_thread+0x118>)
 800b1c4:	f7f6 ffbe 	bl	8002144 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b1c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b1ca:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800b1cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1ce:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b1d0:	f107 0308 	add.w	r3, r7, #8
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	4809      	ldr	r0, [pc, #36]	@ (800b1fc <ethernet_link_thread+0x118>)
 800b1d8:	f7f7 f988 	bl	80024ec <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800b1dc:	4807      	ldr	r0, [pc, #28]	@ (800b1fc <ethernet_link_thread+0x118>)
 800b1de:	f7f6 fafb 	bl	80017d8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800b1e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b1e4:	f004 ff54 	bl	8010090 <netif_set_up>
      netif_set_link_up(netif);
 800b1e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b1ea:	f004 ffef 	bl	80101cc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800b1ee:	2064      	movs	r0, #100	@ 0x64
 800b1f0:	f000 f9e2 	bl	800b5b8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b1f4:	e78b      	b.n	800b10e <ethernet_link_thread+0x2a>
 800b1f6:	bf00      	nop
 800b1f8:	20054d18 	.word	0x20054d18
 800b1fc:	20054c30 	.word	0x20054c30

0800b200 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af02      	add	r7, sp, #8
 800b206:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b208:	4812      	ldr	r0, [pc, #72]	@ (800b254 <HAL_ETH_RxAllocateCallback+0x54>)
 800b20a:	f004 fcb5 	bl	800fb78 <memp_malloc_pool>
 800b20e:	60f8      	str	r0, [r7, #12]
  if (p)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d014      	beq.n	800b240 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f103 0220 	add.w	r2, r3, #32
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4a0d      	ldr	r2, [pc, #52]	@ (800b258 <HAL_ETH_RxAllocateCallback+0x58>)
 800b224:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b22e:	9201      	str	r2, [sp, #4]
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2241      	movs	r2, #65	@ 0x41
 800b236:	2100      	movs	r1, #0
 800b238:	2000      	movs	r0, #0
 800b23a:	f005 fa1f 	bl	801067c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800b23e:	e005      	b.n	800b24c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800b240:	4b06      	ldr	r3, [pc, #24]	@ (800b25c <HAL_ETH_RxAllocateCallback+0x5c>)
 800b242:	2201      	movs	r2, #1
 800b244:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	601a      	str	r2, [r3, #0]
}
 800b24c:	bf00      	nop
 800b24e:	3710      	adds	r7, #16
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	0801cbb4 	.word	0x0801cbb4
 800b258:	0800ae3d 	.word	0x0800ae3d
 800b25c:	20054c24 	.word	0x20054c24

0800b260 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800b260:	b480      	push	{r7}
 800b262:	b089      	sub	sp, #36	@ 0x24
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
 800b26c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b276:	2300      	movs	r3, #0
 800b278:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	3b20      	subs	r3, #32
 800b27e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	2200      	movs	r2, #0
 800b284:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	2200      	movs	r2, #0
 800b28a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	887a      	ldrh	r2, [r7, #2]
 800b290:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d103      	bne.n	800b2a2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	69fa      	ldr	r2, [r7, #28]
 800b29e:	601a      	str	r2, [r3, #0]
 800b2a0:	e003      	b.n	800b2aa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	69fa      	ldr	r2, [r7, #28]
 800b2a8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	69fa      	ldr	r2, [r7, #28]
 800b2ae:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	61fb      	str	r3, [r7, #28]
 800b2b6:	e009      	b.n	800b2cc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	891a      	ldrh	r2, [r3, #8]
 800b2bc:	887b      	ldrh	r3, [r7, #2]
 800b2be:	4413      	add	r3, r2
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	61fb      	str	r3, [r7, #28]
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d1f2      	bne.n	800b2b8 <HAL_ETH_RxLinkCallback+0x58>

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
//  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 800b2d2:	bf00      	nop
 800b2d4:	bf00      	nop
 800b2d6:	3724      	adds	r7, #36	@ 0x24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f005 fb81 	bl	80109f0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800b2ee:	bf00      	nop
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
	...

0800b2f8 <__NVIC_SetPriority>:
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	4603      	mov	r3, r0
 800b300:	6039      	str	r1, [r7, #0]
 800b302:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b304:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	db0a      	blt.n	800b322 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	b2da      	uxtb	r2, r3
 800b310:	490c      	ldr	r1, [pc, #48]	@ (800b344 <__NVIC_SetPriority+0x4c>)
 800b312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b316:	0112      	lsls	r2, r2, #4
 800b318:	b2d2      	uxtb	r2, r2
 800b31a:	440b      	add	r3, r1
 800b31c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b320:	e00a      	b.n	800b338 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	b2da      	uxtb	r2, r3
 800b326:	4908      	ldr	r1, [pc, #32]	@ (800b348 <__NVIC_SetPriority+0x50>)
 800b328:	88fb      	ldrh	r3, [r7, #6]
 800b32a:	f003 030f 	and.w	r3, r3, #15
 800b32e:	3b04      	subs	r3, #4
 800b330:	0112      	lsls	r2, r2, #4
 800b332:	b2d2      	uxtb	r2, r2
 800b334:	440b      	add	r3, r1
 800b336:	761a      	strb	r2, [r3, #24]
}
 800b338:	bf00      	nop
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	e000e100 	.word	0xe000e100
 800b348:	e000ed00 	.word	0xe000ed00

0800b34c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b34c:	b580      	push	{r7, lr}
 800b34e:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800b350:	4b05      	ldr	r3, [pc, #20]	@ (800b368 <SysTick_Handler+0x1c>)
 800b352:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b354:	f002 fc66 	bl	800dc24 <xTaskGetSchedulerState>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d001      	beq.n	800b362 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b35e:	f003 f9d9 	bl	800e714 <xPortSysTickHandler>
  }
}
 800b362:	bf00      	nop
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	e000e010 	.word	0xe000e010

0800b36c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b36c:	b580      	push	{r7, lr}
 800b36e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800b370:	2100      	movs	r1, #0
 800b372:	f06f 0004 	mvn.w	r0, #4
 800b376:	f7ff ffbf 	bl	800b2f8 <__NVIC_SetPriority>
#endif
}
 800b37a:	bf00      	nop
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800b37e:	b580      	push	{r7, lr}
 800b380:	b086      	sub	sp, #24
 800b382:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800b384:	2300      	movs	r3, #0
 800b386:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b388:	f3ef 8305 	mrs	r3, IPSR
 800b38c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b38e:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800b394:	2301      	movs	r3, #1
 800b396:	617b      	str	r3, [r7, #20]
 800b398:	e013      	b.n	800b3c2 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800b39a:	f002 fc43 	bl	800dc24 <xTaskGetSchedulerState>
 800b39e:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d00d      	beq.n	800b3c2 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b3a6:	f3ef 8310 	mrs	r3, PRIMASK
 800b3aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3ac:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d105      	bne.n	800b3be <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b3b2:	f3ef 8311 	mrs	r3, BASEPRI
 800b3b6:	607b      	str	r3, [r7, #4]
  return(result);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800b3c2:	697b      	ldr	r3, [r7, #20]
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3718      	adds	r7, #24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800b3d2:	f7ff ffd4 	bl	800b37e <IRQ_Context>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d003      	beq.n	800b3e4 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800b3dc:	f06f 0305 	mvn.w	r3, #5
 800b3e0:	607b      	str	r3, [r7, #4]
 800b3e2:	e012      	b.n	800b40a <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800b3e4:	f002 fc1e 	bl	800dc24 <xTaskGetSchedulerState>
 800b3e8:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d109      	bne.n	800b404 <osKernelInitialize+0x38>
 800b3f0:	4b08      	ldr	r3, [pc, #32]	@ (800b414 <osKernelInitialize+0x48>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d105      	bne.n	800b404 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b3f8:	4b06      	ldr	r3, [pc, #24]	@ (800b414 <osKernelInitialize+0x48>)
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b3fe:	2300      	movs	r3, #0
 800b400:	607b      	str	r3, [r7, #4]
 800b402:	e002      	b.n	800b40a <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800b404:	f04f 33ff 	mov.w	r3, #4294967295
 800b408:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800b40a:	687b      	ldr	r3, [r7, #4]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	20054d38 	.word	0x20054d38

0800b418 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800b41e:	f7ff ffae 	bl	800b37e <IRQ_Context>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d003      	beq.n	800b430 <osKernelStart+0x18>
    stat = osErrorISR;
 800b428:	f06f 0305 	mvn.w	r3, #5
 800b42c:	607b      	str	r3, [r7, #4]
 800b42e:	e016      	b.n	800b45e <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800b430:	f002 fbf8 	bl	800dc24 <xTaskGetSchedulerState>
 800b434:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d10d      	bne.n	800b458 <osKernelStart+0x40>
 800b43c:	4b0a      	ldr	r3, [pc, #40]	@ (800b468 <osKernelStart+0x50>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d109      	bne.n	800b458 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b444:	f7ff ff92 	bl	800b36c <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800b448:	4b07      	ldr	r3, [pc, #28]	@ (800b468 <osKernelStart+0x50>)
 800b44a:	2202      	movs	r2, #2
 800b44c:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b44e:	f001 fe89 	bl	800d164 <vTaskStartScheduler>
      stat = osOK;
 800b452:	2300      	movs	r3, #0
 800b454:	607b      	str	r3, [r7, #4]
 800b456:	e002      	b.n	800b45e <osKernelStart+0x46>
    } else {
      stat = osError;
 800b458:	f04f 33ff 	mov.w	r3, #4294967295
 800b45c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800b45e:	687b      	ldr	r3, [r7, #4]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	20054d38 	.word	0x20054d38

0800b46c <osKernelGetTickCount>:
}

/*
  Get the RTOS kernel tick count.
*/
uint32_t osKernelGetTickCount (void) {
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af00      	add	r7, sp, #0
  TickType_t ticks;

  if (IRQ_Context() != 0U) {
 800b472:	f7ff ff84 	bl	800b37e <IRQ_Context>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d003      	beq.n	800b484 <osKernelGetTickCount+0x18>
    ticks = xTaskGetTickCountFromISR();
 800b47c:	f001 ffda 	bl	800d434 <xTaskGetTickCountFromISR>
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	e002      	b.n	800b48a <osKernelGetTickCount+0x1e>
  } else {
    ticks = xTaskGetTickCount();
 800b484:	f001 ffc6 	bl	800d414 <xTaskGetTickCount>
 800b488:	6078      	str	r0, [r7, #4]
  }

  /* Return kernel tick count */
  return (ticks);
 800b48a:	687b      	ldr	r3, [r7, #4]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3708      	adds	r7, #8
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b494:	b580      	push	{r7, lr}
 800b496:	b08e      	sub	sp, #56	@ 0x38
 800b498:	af04      	add	r7, sp, #16
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800b4a4:	f7ff ff6b 	bl	800b37e <IRQ_Context>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d17f      	bne.n	800b5ae <osThreadNew+0x11a>
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d07c      	beq.n	800b5ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b4b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b4ba:	2318      	movs	r3, #24
 800b4bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b4c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d045      	beq.n	800b55a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d002      	beq.n	800b4dc <osThreadNew+0x48>
        name = attr->name;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	699b      	ldr	r3, [r3, #24]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d002      	beq.n	800b4ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	699b      	ldr	r3, [r3, #24]
 800b4e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d008      	beq.n	800b502 <osThreadNew+0x6e>
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	2b38      	cmp	r3, #56	@ 0x38
 800b4f4:	d805      	bhi.n	800b502 <osThreadNew+0x6e>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	f003 0301 	and.w	r3, r3, #1
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d001      	beq.n	800b506 <osThreadNew+0x72>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800b502:	2300      	movs	r3, #0
 800b504:	e054      	b.n	800b5b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	695b      	ldr	r3, [r3, #20]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d003      	beq.n	800b516 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	089b      	lsrs	r3, r3, #2
 800b514:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00e      	beq.n	800b53c <osThreadNew+0xa8>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	2b5b      	cmp	r3, #91	@ 0x5b
 800b524:	d90a      	bls.n	800b53c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d006      	beq.n	800b53c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	695b      	ldr	r3, [r3, #20]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d002      	beq.n	800b53c <osThreadNew+0xa8>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800b536:	2301      	movs	r3, #1
 800b538:	61bb      	str	r3, [r7, #24]
 800b53a:	e010      	b.n	800b55e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10c      	bne.n	800b55e <osThreadNew+0xca>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d108      	bne.n	800b55e <osThreadNew+0xca>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d104      	bne.n	800b55e <osThreadNew+0xca>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800b554:	2300      	movs	r3, #0
 800b556:	61bb      	str	r3, [r7, #24]
 800b558:	e001      	b.n	800b55e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d110      	bne.n	800b586 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b56c:	9202      	str	r2, [sp, #8]
 800b56e:	9301      	str	r3, [sp, #4]
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	9300      	str	r3, [sp, #0]
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	6a3a      	ldr	r2, [r7, #32]
 800b578:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f001 fc22 	bl	800cdc4 <xTaskCreateStatic>
 800b580:	4603      	mov	r3, r0
 800b582:	617b      	str	r3, [r7, #20]
 800b584:	e013      	b.n	800b5ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d110      	bne.n	800b5ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800b58c:	6a3b      	ldr	r3, [r7, #32]
 800b58e:	b29a      	uxth	r2, r3
 800b590:	f107 0314 	add.w	r3, r7, #20
 800b594:	9301      	str	r3, [sp, #4]
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f001 fc5d 	bl	800ce5e <xTaskCreate>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	d001      	beq.n	800b5ae <osThreadNew+0x11a>
            hTask = NULL;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800b5ae:	697b      	ldr	r3, [r7, #20]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3728      	adds	r7, #40	@ 0x28
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800b5c0:	f7ff fedd 	bl	800b37e <IRQ_Context>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d003      	beq.n	800b5d2 <osDelay+0x1a>
    stat = osErrorISR;
 800b5ca:	f06f 0305 	mvn.w	r3, #5
 800b5ce:	60fb      	str	r3, [r7, #12]
 800b5d0:	e007      	b.n	800b5e2 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d002      	beq.n	800b5e2 <osDelay+0x2a>
      vTaskDelay(ticks);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f001 fd9b 	bl	800d118 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <osMutexNew>:

  Limitations:
  - Priority inherit protocol is used by default, osMutexPrioInherit attribute is ignored.
  - Robust mutex is not supported, NULL is returned if used.
*/
osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  uint32_t type;
  uint32_t rmtx;
  int32_t  mem;

  hMutex = NULL;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() == 0U) {
 800b5f8:	f7ff fec1 	bl	800b37e <IRQ_Context>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d174      	bne.n	800b6ec <osMutexNew+0x100>
    if (attr != NULL) {
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d003      	beq.n	800b610 <osMutexNew+0x24>
      type = attr->attr_bits;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	613b      	str	r3, [r7, #16]
 800b60e:	e001      	b.n	800b614 <osMutexNew+0x28>
    } else {
      type = 0U;
 800b610:	2300      	movs	r3, #0
 800b612:	613b      	str	r3, [r7, #16]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f003 0301 	and.w	r3, r3, #1
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <osMutexNew+0x38>
      rmtx = 1U;
 800b61e:	2301      	movs	r3, #1
 800b620:	60fb      	str	r3, [r7, #12]
 800b622:	e001      	b.n	800b628 <osMutexNew+0x3c>
    } else {
      rmtx = 0U;
 800b624:	2300      	movs	r3, #0
 800b626:	60fb      	str	r3, [r7, #12]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	f003 0308 	and.w	r3, r3, #8
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d15c      	bne.n	800b6ec <osMutexNew+0x100>
      mem = -1;
 800b632:	f04f 33ff 	mov.w	r3, #4294967295
 800b636:	60bb      	str	r3, [r7, #8]

      if (attr != NULL) {
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d015      	beq.n	800b66a <osMutexNew+0x7e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d006      	beq.n	800b654 <osMutexNew+0x68>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	2b4f      	cmp	r3, #79	@ 0x4f
 800b64c:	d902      	bls.n	800b654 <osMutexNew+0x68>
          /* The memory for control block is provided, use static object */
          mem = 1;
 800b64e:	2301      	movs	r3, #1
 800b650:	60bb      	str	r3, [r7, #8]
 800b652:	e00c      	b.n	800b66e <osMutexNew+0x82>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d108      	bne.n	800b66e <osMutexNew+0x82>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d104      	bne.n	800b66e <osMutexNew+0x82>
            /* Control block will be allocated from the dynamic pool */
            mem = 0;
 800b664:	2300      	movs	r3, #0
 800b666:	60bb      	str	r3, [r7, #8]
 800b668:	e001      	b.n	800b66e <osMutexNew+0x82>
          }
        }
      }
      else {
        mem = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	60bb      	str	r3, [r7, #8]
      }

      if (mem == 1) {
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	2b01      	cmp	r3, #1
 800b672:	d112      	bne.n	800b69a <osMutexNew+0xae>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d007      	beq.n	800b68a <osMutexNew+0x9e>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	4619      	mov	r1, r3
 800b680:	2004      	movs	r0, #4
 800b682:	f000 fd1b 	bl	800c0bc <xQueueCreateMutexStatic>
 800b686:	6178      	str	r0, [r7, #20]
 800b688:	e016      	b.n	800b6b8 <osMutexNew+0xcc>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	4619      	mov	r1, r3
 800b690:	2001      	movs	r0, #1
 800b692:	f000 fd13 	bl	800c0bc <xQueueCreateMutexStatic>
 800b696:	6178      	str	r0, [r7, #20]
 800b698:	e00e      	b.n	800b6b8 <osMutexNew+0xcc>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10b      	bne.n	800b6b8 <osMutexNew+0xcc>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d004      	beq.n	800b6b0 <osMutexNew+0xc4>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b6a6:	2004      	movs	r0, #4
 800b6a8:	f000 fcf0 	bl	800c08c <xQueueCreateMutex>
 800b6ac:	6178      	str	r0, [r7, #20]
 800b6ae:	e003      	b.n	800b6b8 <osMutexNew+0xcc>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b6b0:	2001      	movs	r0, #1
 800b6b2:	f000 fceb 	bl	800c08c <xQueueCreateMutex>
 800b6b6:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00c      	beq.n	800b6d8 <osMutexNew+0xec>
        if ((attr != NULL) && (attr->name != NULL)) {
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d009      	beq.n	800b6d8 <osMutexNew+0xec>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d005      	beq.n	800b6d8 <osMutexNew+0xec>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hMutex, attr->name);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6978      	ldr	r0, [r7, #20]
 800b6d4:	f001 facc 	bl	800cc70 <vQueueAddToRegistry>
        }
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d006      	beq.n	800b6ec <osMutexNew+0x100>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d003      	beq.n	800b6ec <osMutexNew+0x100>
        /* Set LSB as 'recursive mutex flag' */
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	f043 0301 	orr.w	r3, r3, #1
 800b6ea:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return mutex ID */
  return ((osMutexId_t)hMutex);
 800b6ec:	697b      	ldr	r3, [r7, #20]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <osMutexAcquire>:

/*
  Acquire a Mutex or timeout if it is locked.
*/
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b086      	sub	sp, #24
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f023 0301 	bic.w	r3, r3, #1
 800b706:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f003 0301 	and.w	r3, r3, #1
 800b70e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b710:	2300      	movs	r3, #0
 800b712:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
 800b714:	f7ff fe33 	bl	800b37e <IRQ_Context>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d003      	beq.n	800b726 <osMutexAcquire+0x30>
    stat = osErrorISR;
 800b71e:	f06f 0305 	mvn.w	r3, #5
 800b722:	617b      	str	r3, [r7, #20]
 800b724:	e02c      	b.n	800b780 <osMutexAcquire+0x8a>
  }
  else if (hMutex == NULL) {
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d103      	bne.n	800b734 <osMutexAcquire+0x3e>
    stat = osErrorParameter;
 800b72c:	f06f 0303 	mvn.w	r3, #3
 800b730:	617b      	str	r3, [r7, #20]
 800b732:	e025      	b.n	800b780 <osMutexAcquire+0x8a>
  }
  else {
    if (rmtx != 0U) {
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d011      	beq.n	800b75e <osMutexAcquire+0x68>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6938      	ldr	r0, [r7, #16]
 800b73e:	f000 fd05 	bl	800c14c <xQueueTakeMutexRecursive>
 800b742:	4603      	mov	r3, r0
 800b744:	2b01      	cmp	r3, #1
 800b746:	d01b      	beq.n	800b780 <osMutexAcquire+0x8a>
        if (timeout != 0U) {
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <osMutexAcquire+0x60>
          stat = osErrorTimeout;
 800b74e:	f06f 0301 	mvn.w	r3, #1
 800b752:	617b      	str	r3, [r7, #20]
 800b754:	e014      	b.n	800b780 <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
 800b756:	f06f 0302 	mvn.w	r3, #2
 800b75a:	617b      	str	r3, [r7, #20]
 800b75c:	e010      	b.n	800b780 <osMutexAcquire+0x8a>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b75e:	6839      	ldr	r1, [r7, #0]
 800b760:	6938      	ldr	r0, [r7, #16]
 800b762:	f000 fff7 	bl	800c754 <xQueueSemaphoreTake>
 800b766:	4603      	mov	r3, r0
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d009      	beq.n	800b780 <osMutexAcquire+0x8a>
        if (timeout != 0U) {
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d003      	beq.n	800b77a <osMutexAcquire+0x84>
          stat = osErrorTimeout;
 800b772:	f06f 0301 	mvn.w	r3, #1
 800b776:	617b      	str	r3, [r7, #20]
 800b778:	e002      	b.n	800b780 <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
 800b77a:	f06f 0302 	mvn.w	r3, #2
 800b77e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800b780:	697b      	ldr	r3, [r7, #20]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3718      	adds	r7, #24
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <osMutexRelease>:

/*
  Release a Mutex that was acquired by osMutexAcquire.
*/
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b086      	sub	sp, #24
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f023 0301 	bic.w	r3, r3, #1
 800b798:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f003 0301 	and.w	r3, r3, #1
 800b7a0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
 800b7a6:	f7ff fdea 	bl	800b37e <IRQ_Context>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d003      	beq.n	800b7b8 <osMutexRelease+0x2e>
    stat = osErrorISR;
 800b7b0:	f06f 0305 	mvn.w	r3, #5
 800b7b4:	617b      	str	r3, [r7, #20]
 800b7b6:	e01f      	b.n	800b7f8 <osMutexRelease+0x6e>
  }
  else if (hMutex == NULL) {
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d103      	bne.n	800b7c6 <osMutexRelease+0x3c>
    stat = osErrorParameter;
 800b7be:	f06f 0303 	mvn.w	r3, #3
 800b7c2:	617b      	str	r3, [r7, #20]
 800b7c4:	e018      	b.n	800b7f8 <osMutexRelease+0x6e>
  }
  else {
    if (rmtx != 0U) {
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d009      	beq.n	800b7e0 <osMutexRelease+0x56>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b7cc:	6938      	ldr	r0, [r7, #16]
 800b7ce:	f000 fc90 	bl	800c0f2 <xQueueGiveMutexRecursive>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d00f      	beq.n	800b7f8 <osMutexRelease+0x6e>
        stat = osErrorResource;
 800b7d8:	f06f 0302 	mvn.w	r3, #2
 800b7dc:	617b      	str	r3, [r7, #20]
 800b7de:	e00b      	b.n	800b7f8 <osMutexRelease+0x6e>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	6938      	ldr	r0, [r7, #16]
 800b7e8:	f000 fd31 	bl	800c24e <xQueueGenericSend>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d002      	beq.n	800b7f8 <osMutexRelease+0x6e>
        stat = osErrorResource;
 800b7f2:	f06f 0302 	mvn.w	r3, #2
 800b7f6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800b7f8:	697b      	ldr	r3, [r7, #20]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3718      	adds	r7, #24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b802:	b580      	push	{r7, lr}
 800b804:	b088      	sub	sp, #32
 800b806:	af02      	add	r7, sp, #8
 800b808:	60f8      	str	r0, [r7, #12]
 800b80a:	60b9      	str	r1, [r7, #8]
 800b80c:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
 800b80e:	2300      	movs	r3, #0
 800b810:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
 800b812:	f7ff fdb4 	bl	800b37e <IRQ_Context>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d175      	bne.n	800b908 <osSemaphoreNew+0x106>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d072      	beq.n	800b908 <osSemaphoreNew+0x106>
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	429a      	cmp	r2, r3
 800b828:	d86e      	bhi.n	800b908 <osSemaphoreNew+0x106>
    mem = -1;
 800b82a:	f04f 33ff 	mov.w	r3, #4294967295
 800b82e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d015      	beq.n	800b862 <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d006      	beq.n	800b84c <osSemaphoreNew+0x4a>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	2b4f      	cmp	r3, #79	@ 0x4f
 800b844:	d902      	bls.n	800b84c <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
 800b846:	2301      	movs	r3, #1
 800b848:	613b      	str	r3, [r7, #16]
 800b84a:	e00c      	b.n	800b866 <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d108      	bne.n	800b866 <osSemaphoreNew+0x64>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d104      	bne.n	800b866 <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800b85c:	2300      	movs	r3, #0
 800b85e:	613b      	str	r3, [r7, #16]
 800b860:	e001      	b.n	800b866 <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
 800b862:	2300      	movs	r3, #0
 800b864:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b86c:	d04c      	beq.n	800b908 <osSemaphoreNew+0x106>
      if (max_count == 1U) {
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d128      	bne.n	800b8c6 <osSemaphoreNew+0xc4>
        if (mem == 1) {
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d10a      	bne.n	800b890 <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	2203      	movs	r2, #3
 800b880:	9200      	str	r2, [sp, #0]
 800b882:	2200      	movs	r2, #0
 800b884:	2100      	movs	r1, #0
 800b886:	2001      	movs	r0, #1
 800b888:	f000 fb2f 	bl	800beea <xQueueGenericCreateStatic>
 800b88c:	6178      	str	r0, [r7, #20]
 800b88e:	e005      	b.n	800b89c <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b890:	2203      	movs	r2, #3
 800b892:	2100      	movs	r1, #0
 800b894:	2001      	movs	r0, #1
 800b896:	f000 fb71 	bl	800bf7c <xQueueGenericCreate>
 800b89a:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d022      	beq.n	800b8e8 <osSemaphoreNew+0xe6>
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d01f      	beq.n	800b8e8 <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	6978      	ldr	r0, [r7, #20]
 800b8b0:	f000 fccd 	bl	800c24e <xQueueGenericSend>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d016      	beq.n	800b8e8 <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
 800b8ba:	6978      	ldr	r0, [r7, #20]
 800b8bc:	f001 f894 	bl	800c9e8 <vQueueDelete>
            hSemaphore = NULL;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	617b      	str	r3, [r7, #20]
 800b8c4:	e010      	b.n	800b8e8 <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d108      	bne.n	800b8de <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	68b9      	ldr	r1, [r7, #8]
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f000 fc68 	bl	800c1aa <xQueueCreateCountingSemaphoreStatic>
 800b8da:	6178      	str	r0, [r7, #20]
 800b8dc:	e004      	b.n	800b8e8 <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b8de:	68b9      	ldr	r1, [r7, #8]
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f000 fc8d 	bl	800c200 <xQueueCreateCountingSemaphore>
 800b8e6:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00c      	beq.n	800b908 <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d009      	beq.n	800b908 <osSemaphoreNew+0x106>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d005      	beq.n	800b908 <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4619      	mov	r1, r3
 800b902:	6978      	ldr	r0, [r7, #20]
 800b904:	f001 f9b4 	bl	800cc70 <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
 800b908:	697b      	ldr	r3, [r7, #20]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3718      	adds	r7, #24
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
	...

0800b914 <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b922:	2300      	movs	r3, #0
 800b924:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d103      	bne.n	800b934 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b92c:	f06f 0303 	mvn.w	r3, #3
 800b930:	617b      	str	r3, [r7, #20]
 800b932:	e034      	b.n	800b99e <osSemaphoreAcquire+0x8a>
  }
  else if (IRQ_Context() != 0U) {
 800b934:	f7ff fd23 	bl	800b37e <IRQ_Context>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d01e      	beq.n	800b97c <osSemaphoreAcquire+0x68>
    if (timeout != 0U) {
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d003      	beq.n	800b94c <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
 800b944:	f06f 0303 	mvn.w	r3, #3
 800b948:	617b      	str	r3, [r7, #20]
 800b94a:	e028      	b.n	800b99e <osSemaphoreAcquire+0x8a>
    }
    else {
      yield = pdFALSE;
 800b94c:	2300      	movs	r3, #0
 800b94e:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b950:	f107 030c 	add.w	r3, r7, #12
 800b954:	461a      	mov	r2, r3
 800b956:	2100      	movs	r1, #0
 800b958:	6938      	ldr	r0, [r7, #16]
 800b95a:	f000 ffd5 	bl	800c908 <xQueueReceiveFromISR>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b01      	cmp	r3, #1
 800b962:	d003      	beq.n	800b96c <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
 800b964:	f06f 0302 	mvn.w	r3, #2
 800b968:	617b      	str	r3, [r7, #20]
 800b96a:	e018      	b.n	800b99e <osSemaphoreAcquire+0x8a>
      } else {
        portYIELD_FROM_ISR (yield);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d015      	beq.n	800b99e <osSemaphoreAcquire+0x8a>
 800b972:	4b0d      	ldr	r3, [pc, #52]	@ (800b9a8 <osSemaphoreAcquire+0x94>)
 800b974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b978:	601a      	str	r2, [r3, #0]
 800b97a:	e010      	b.n	800b99e <osSemaphoreAcquire+0x8a>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	6938      	ldr	r0, [r7, #16]
 800b980:	f000 fee8 	bl	800c754 <xQueueSemaphoreTake>
 800b984:	4603      	mov	r3, r0
 800b986:	2b01      	cmp	r3, #1
 800b988:	d009      	beq.n	800b99e <osSemaphoreAcquire+0x8a>
      if (timeout != 0U) {
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d003      	beq.n	800b998 <osSemaphoreAcquire+0x84>
        stat = osErrorTimeout;
 800b990:	f06f 0301 	mvn.w	r3, #1
 800b994:	617b      	str	r3, [r7, #20]
 800b996:	e002      	b.n	800b99e <osSemaphoreAcquire+0x8a>
      } else {
        stat = osErrorResource;
 800b998:	f06f 0302 	mvn.w	r3, #2
 800b99c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800b99e:	697b      	ldr	r3, [r7, #20]
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	e000ed04 	.word	0xe000ed04

0800b9ac <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d103      	bne.n	800b9ca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b9c2:	f06f 0303 	mvn.w	r3, #3
 800b9c6:	617b      	str	r3, [r7, #20]
 800b9c8:	e027      	b.n	800ba1a <osSemaphoreRelease+0x6e>
  }
  else if (IRQ_Context() != 0U) {
 800b9ca:	f7ff fcd8 	bl	800b37e <IRQ_Context>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d016      	beq.n	800ba02 <osSemaphoreRelease+0x56>
    yield = pdFALSE;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b9d8:	f107 030c 	add.w	r3, r7, #12
 800b9dc:	4619      	mov	r1, r3
 800b9de:	6938      	ldr	r0, [r7, #16]
 800b9e0:	f000 fd86 	bl	800c4f0 <xQueueGiveFromISR>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d003      	beq.n	800b9f2 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800b9ea:	f06f 0302 	mvn.w	r3, #2
 800b9ee:	617b      	str	r3, [r7, #20]
 800b9f0:	e013      	b.n	800ba1a <osSemaphoreRelease+0x6e>
    } else {
      portYIELD_FROM_ISR (yield);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d010      	beq.n	800ba1a <osSemaphoreRelease+0x6e>
 800b9f8:	4b0a      	ldr	r3, [pc, #40]	@ (800ba24 <osSemaphoreRelease+0x78>)
 800b9fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9fe:	601a      	str	r2, [r3, #0]
 800ba00:	e00b      	b.n	800ba1a <osSemaphoreRelease+0x6e>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ba02:	2300      	movs	r3, #0
 800ba04:	2200      	movs	r2, #0
 800ba06:	2100      	movs	r1, #0
 800ba08:	6938      	ldr	r0, [r7, #16]
 800ba0a:	f000 fc20 	bl	800c24e <xQueueGenericSend>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d002      	beq.n	800ba1a <osSemaphoreRelease+0x6e>
      stat = osErrorResource;
 800ba14:	f06f 0302 	mvn.w	r3, #2
 800ba18:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
 800ba1a:	697b      	ldr	r3, [r7, #20]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3718      	adds	r7, #24
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	e000ed04 	.word	0xe000ed04

0800ba28 <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b088      	sub	sp, #32
 800ba2c:	af02      	add	r7, sp, #8
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 800ba34:	2300      	movs	r3, #0
 800ba36:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 800ba38:	f7ff fca1 	bl	800b37e <IRQ_Context>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d15f      	bne.n	800bb02 <osMessageQueueNew+0xda>
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d05c      	beq.n	800bb02 <osMessageQueueNew+0xda>
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d059      	beq.n	800bb02 <osMessageQueueNew+0xda>
    mem = -1;
 800ba4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba52:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d029      	beq.n	800baae <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d012      	beq.n	800ba88 <osMessageQueueNew+0x60>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	2b4f      	cmp	r3, #79	@ 0x4f
 800ba68:	d90e      	bls.n	800ba88 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00a      	beq.n	800ba88 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	695a      	ldr	r2, [r3, #20]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	68b9      	ldr	r1, [r7, #8]
 800ba7a:	fb01 f303 	mul.w	r3, r1, r3
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d302      	bcc.n	800ba88 <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 800ba82:	2301      	movs	r3, #1
 800ba84:	613b      	str	r3, [r7, #16]
 800ba86:	e014      	b.n	800bab2 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d110      	bne.n	800bab2 <osMessageQueueNew+0x8a>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10c      	bne.n	800bab2 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d108      	bne.n	800bab2 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	695b      	ldr	r3, [r3, #20]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d104      	bne.n	800bab2 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800baa8:	2300      	movs	r3, #0
 800baaa:	613b      	str	r3, [r7, #16]
 800baac:	e001      	b.n	800bab2 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800baae:	2300      	movs	r3, #0
 800bab0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d10b      	bne.n	800bad0 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	691a      	ldr	r2, [r3, #16]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	2100      	movs	r1, #0
 800bac2:	9100      	str	r1, [sp, #0]
 800bac4:	68b9      	ldr	r1, [r7, #8]
 800bac6:	68f8      	ldr	r0, [r7, #12]
 800bac8:	f000 fa0f 	bl	800beea <xQueueGenericCreateStatic>
 800bacc:	6178      	str	r0, [r7, #20]
 800bace:	e008      	b.n	800bae2 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d105      	bne.n	800bae2 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bad6:	2200      	movs	r2, #0
 800bad8:	68b9      	ldr	r1, [r7, #8]
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f000 fa4e 	bl	800bf7c <xQueueGenericCreate>
 800bae0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00c      	beq.n	800bb02 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d009      	beq.n	800bb02 <osMessageQueueNew+0xda>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d005      	beq.n	800bb02 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4619      	mov	r1, r3
 800bafc:	6978      	ldr	r0, [r7, #20]
 800bafe:	f001 f8b7 	bl	800cc70 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 800bb02:	697b      	ldr	r3, [r7, #20]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3718      	adds	r7, #24
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b088      	sub	sp, #32
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	603b      	str	r3, [r7, #0]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800bb24:	f7ff fc2b 	bl	800b37e <IRQ_Context>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d024      	beq.n	800bb78 <osMessageQueuePut+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d005      	beq.n	800bb40 <osMessageQueuePut+0x34>
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d002      	beq.n	800bb40 <osMessageQueuePut+0x34>
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d003      	beq.n	800bb48 <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
 800bb40:	f06f 0303 	mvn.w	r3, #3
 800bb44:	61fb      	str	r3, [r7, #28]
 800bb46:	e034      	b.n	800bbb2 <osMessageQueuePut+0xa6>
    }
    else {
      yield = pdFALSE;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bb4c:	f107 0214 	add.w	r2, r7, #20
 800bb50:	2300      	movs	r3, #0
 800bb52:	68b9      	ldr	r1, [r7, #8]
 800bb54:	69b8      	ldr	r0, [r7, #24]
 800bb56:	f000 fc47 	bl	800c3e8 <xQueueGenericSendFromISR>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d003      	beq.n	800bb68 <osMessageQueuePut+0x5c>
        stat = osErrorResource;
 800bb60:	f06f 0302 	mvn.w	r3, #2
 800bb64:	61fb      	str	r3, [r7, #28]
 800bb66:	e024      	b.n	800bbb2 <osMessageQueuePut+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d021      	beq.n	800bbb2 <osMessageQueuePut+0xa6>
 800bb6e:	4b13      	ldr	r3, [pc, #76]	@ (800bbbc <osMessageQueuePut+0xb0>)
 800bb70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb74:	601a      	str	r2, [r3, #0]
 800bb76:	e01c      	b.n	800bbb2 <osMessageQueuePut+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d002      	beq.n	800bb84 <osMessageQueuePut+0x78>
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d103      	bne.n	800bb8c <osMessageQueuePut+0x80>
      stat = osErrorParameter;
 800bb84:	f06f 0303 	mvn.w	r3, #3
 800bb88:	61fb      	str	r3, [r7, #28]
 800bb8a:	e012      	b.n	800bbb2 <osMessageQueuePut+0xa6>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	683a      	ldr	r2, [r7, #0]
 800bb90:	68b9      	ldr	r1, [r7, #8]
 800bb92:	69b8      	ldr	r0, [r7, #24]
 800bb94:	f000 fb5b 	bl	800c24e <xQueueGenericSend>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d009      	beq.n	800bbb2 <osMessageQueuePut+0xa6>
        if (timeout != 0U) {
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d003      	beq.n	800bbac <osMessageQueuePut+0xa0>
          stat = osErrorTimeout;
 800bba4:	f06f 0301 	mvn.w	r3, #1
 800bba8:	61fb      	str	r3, [r7, #28]
 800bbaa:	e002      	b.n	800bbb2 <osMessageQueuePut+0xa6>
        } else {
          stat = osErrorResource;
 800bbac:	f06f 0302 	mvn.w	r3, #2
 800bbb0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800bbb2:	69fb      	ldr	r3, [r7, #28]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3720      	adds	r7, #32
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	e000ed04 	.word	0xe000ed04

0800bbc0 <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b088      	sub	sp, #32
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
 800bbcc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800bbd6:	f7ff fbd2 	bl	800b37e <IRQ_Context>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d024      	beq.n	800bc2a <osMessageQueueGet+0x6a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d005      	beq.n	800bbf2 <osMessageQueueGet+0x32>
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <osMessageQueueGet+0x32>
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d003      	beq.n	800bbfa <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800bbf2:	f06f 0303 	mvn.w	r3, #3
 800bbf6:	61fb      	str	r3, [r7, #28]
 800bbf8:	e033      	b.n	800bc62 <osMessageQueueGet+0xa2>
    }
    else {
      yield = pdFALSE;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bbfe:	f107 0314 	add.w	r3, r7, #20
 800bc02:	461a      	mov	r2, r3
 800bc04:	68b9      	ldr	r1, [r7, #8]
 800bc06:	69b8      	ldr	r0, [r7, #24]
 800bc08:	f000 fe7e 	bl	800c908 <xQueueReceiveFromISR>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d003      	beq.n	800bc1a <osMessageQueueGet+0x5a>
        stat = osErrorResource;
 800bc12:	f06f 0302 	mvn.w	r3, #2
 800bc16:	61fb      	str	r3, [r7, #28]
 800bc18:	e023      	b.n	800bc62 <osMessageQueueGet+0xa2>
      } else {
        portYIELD_FROM_ISR (yield);
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d020      	beq.n	800bc62 <osMessageQueueGet+0xa2>
 800bc20:	4b12      	ldr	r3, [pc, #72]	@ (800bc6c <osMessageQueueGet+0xac>)
 800bc22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc26:	601a      	str	r2, [r3, #0]
 800bc28:	e01b      	b.n	800bc62 <osMessageQueueGet+0xa2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <osMessageQueueGet+0x76>
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d103      	bne.n	800bc3e <osMessageQueueGet+0x7e>
      stat = osErrorParameter;
 800bc36:	f06f 0303 	mvn.w	r3, #3
 800bc3a:	61fb      	str	r3, [r7, #28]
 800bc3c:	e011      	b.n	800bc62 <osMessageQueueGet+0xa2>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	68b9      	ldr	r1, [r7, #8]
 800bc42:	69b8      	ldr	r0, [r7, #24]
 800bc44:	f000 fcca 	bl	800c5dc <xQueueReceive>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d009      	beq.n	800bc62 <osMessageQueueGet+0xa2>
        if (timeout != 0U) {
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d003      	beq.n	800bc5c <osMessageQueueGet+0x9c>
          stat = osErrorTimeout;
 800bc54:	f06f 0301 	mvn.w	r3, #1
 800bc58:	61fb      	str	r3, [r7, #28]
 800bc5a:	e002      	b.n	800bc62 <osMessageQueueGet+0xa2>
        } else {
          stat = osErrorResource;
 800bc5c:	f06f 0302 	mvn.w	r3, #2
 800bc60:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800bc62:	69fb      	ldr	r3, [r7, #28]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3720      	adds	r7, #32
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	e000ed04 	.word	0xe000ed04

0800bc70 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	4a07      	ldr	r2, [pc, #28]	@ (800bc9c <vApplicationGetIdleTaskMemory+0x2c>)
 800bc80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	4a06      	ldr	r2, [pc, #24]	@ (800bca0 <vApplicationGetIdleTaskMemory+0x30>)
 800bc86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bc8e:	601a      	str	r2, [r3, #0]
}
 800bc90:	bf00      	nop
 800bc92:	3714      	adds	r7, #20
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr
 800bc9c:	20054d3c 	.word	0x20054d3c
 800bca0:	20054d98 	.word	0x20054d98

0800bca4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	4a07      	ldr	r2, [pc, #28]	@ (800bcd0 <vApplicationGetTimerTaskMemory+0x2c>)
 800bcb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	4a06      	ldr	r2, [pc, #24]	@ (800bcd4 <vApplicationGetTimerTaskMemory+0x30>)
 800bcba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2280      	movs	r2, #128	@ 0x80
 800bcc0:	601a      	str	r2, [r3, #0]
}
 800bcc2:	bf00      	nop
 800bcc4:	3714      	adds	r7, #20
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	20055198 	.word	0x20055198
 800bcd4:	200551f4 	.word	0x200551f4

0800bcd8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f103 0208 	add.w	r2, r3, #8
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f103 0208 	add.w	r2, r3, #8
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f103 0208 	add.w	r2, r3, #8
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bd26:	bf00      	nop
 800bd28:	370c      	adds	r7, #12
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800bd32:	b480      	push	{r7}
 800bd34:	b085      	sub	sp, #20
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd48:	d103      	bne.n	800bd52 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	691b      	ldr	r3, [r3, #16]
 800bd4e:	60fb      	str	r3, [r7, #12]
 800bd50:	e00c      	b.n	800bd6c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	3308      	adds	r3, #8
 800bd56:	60fb      	str	r3, [r7, #12]
 800bd58:	e002      	b.n	800bd60 <vListInsert+0x2e>
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	60fb      	str	r3, [r7, #12]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68ba      	ldr	r2, [r7, #8]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d2f6      	bcs.n	800bd5a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	685a      	ldr	r2, [r3, #4]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	683a      	ldr	r2, [r7, #0]
 800bd7a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	683a      	ldr	r2, [r7, #0]
 800bd86:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	1c5a      	adds	r2, r3, #1
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	601a      	str	r2, [r3, #0]
}
 800bd98:	bf00      	nop
 800bd9a:	3714      	adds	r7, #20
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	6892      	ldr	r2, [r2, #8]
 800bdba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	6852      	ldr	r2, [r2, #4]
 800bdc4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d103      	bne.n	800bdd8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	689a      	ldr	r2, [r3, #8]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	1e5a      	subs	r2, r3, #1
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3714      	adds	r7, #20
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800be02:	2301      	movs	r3, #1
 800be04:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d103      	bne.n	800be18 <xQueueGenericReset+0x20>
 800be10:	f002 fd92 	bl	800e938 <ulSetInterruptMask>
 800be14:	bf00      	nop
 800be16:	e7fd      	b.n	800be14 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d057      	beq.n	800bece <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800be22:	2b00      	cmp	r3, #0
 800be24:	d053      	beq.n	800bece <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be2e:	2100      	movs	r1, #0
 800be30:	fba3 2302 	umull	r2, r3, r3, r2
 800be34:	2b00      	cmp	r3, #0
 800be36:	d000      	beq.n	800be3a <xQueueGenericReset+0x42>
 800be38:	2101      	movs	r1, #1
 800be3a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d146      	bne.n	800bece <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 800be40:	f002 fc3c 	bl	800e6bc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be4c:	68b9      	ldr	r1, [r7, #8]
 800be4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800be50:	fb01 f303 	mul.w	r3, r1, r3
 800be54:	441a      	add	r2, r3
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	2200      	movs	r2, #0
 800be5e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be70:	3b01      	subs	r3, #1
 800be72:	68b9      	ldr	r1, [r7, #8]
 800be74:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800be76:	fb01 f303 	mul.w	r3, r1, r3
 800be7a:	441a      	add	r2, r3
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	22ff      	movs	r2, #255	@ 0xff
 800be84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	22ff      	movs	r2, #255	@ 0xff
 800be8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d10e      	bne.n	800beb4 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d014      	beq.n	800bec8 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	3310      	adds	r3, #16
 800bea2:	4618      	mov	r0, r3
 800bea4:	f001 fca4 	bl	800d7f0 <xTaskRemoveFromEventList>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00c      	beq.n	800bec8 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800beae:	f002 fbf3 	bl	800e698 <vPortYield>
 800beb2:	e009      	b.n	800bec8 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	3310      	adds	r3, #16
 800beb8:	4618      	mov	r0, r3
 800beba:	f7ff ff0d 	bl	800bcd8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	3324      	adds	r3, #36	@ 0x24
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7ff ff08 	bl	800bcd8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800bec8:	f002 fc0a 	bl	800e6e0 <vPortExitCritical>
 800becc:	e001      	b.n	800bed2 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 800bece:	2300      	movs	r3, #0
 800bed0:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d103      	bne.n	800bee0 <xQueueGenericReset+0xe8>
 800bed8:	f002 fd2e 	bl	800e938 <ulSetInterruptMask>
 800bedc:	bf00      	nop
 800bede:	e7fd      	b.n	800bedc <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800bee0:	68fb      	ldr	r3, [r7, #12]
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800beea:	b580      	push	{r7, lr}
 800beec:	b088      	sub	sp, #32
 800beee:	af02      	add	r7, sp, #8
 800bef0:	60f8      	str	r0, [r7, #12]
 800bef2:	60b9      	str	r1, [r7, #8]
 800bef4:	607a      	str	r2, [r7, #4]
 800bef6:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800bef8:	2300      	movs	r3, #0
 800befa:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d103      	bne.n	800bf0a <xQueueGenericCreateStatic+0x20>
 800bf02:	f002 fd19 	bl	800e938 <ulSetInterruptMask>
 800bf06:	bf00      	nop
 800bf08:	e7fd      	b.n	800bf06 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d029      	beq.n	800bf64 <xQueueGenericCreateStatic+0x7a>
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d026      	beq.n	800bf64 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d020      	beq.n	800bf64 <xQueueGenericCreateStatic+0x7a>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d102      	bne.n	800bf2e <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d11a      	bne.n	800bf64 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800bf2e:	2350      	movs	r3, #80	@ 0x50
 800bf30:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	2b50      	cmp	r3, #80	@ 0x50
 800bf36:	d003      	beq.n	800bf40 <xQueueGenericCreateStatic+0x56>
 800bf38:	f002 fcfe 	bl	800e938 <ulSetInterruptMask>
 800bf3c:	bf00      	nop
 800bf3e:	e7fd      	b.n	800bf3c <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800bf40:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf4e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	9300      	str	r3, [sp, #0]
 800bf56:	4613      	mov	r3, r2
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	68b9      	ldr	r1, [r7, #8]
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 f858 	bl	800c012 <prvInitialiseNewQueue>
 800bf62:	e006      	b.n	800bf72 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d103      	bne.n	800bf72 <xQueueGenericCreateStatic+0x88>
 800bf6a:	f002 fce5 	bl	800e938 <ulSetInterruptMask>
 800bf6e:	bf00      	nop
 800bf70:	e7fd      	b.n	800bf6e <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800bf72:	697b      	ldr	r3, [r7, #20]
    }
 800bf74:	4618      	mov	r0, r3
 800bf76:	3718      	adds	r7, #24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b08a      	sub	sp, #40	@ 0x28
 800bf80:	af02      	add	r7, sp, #8
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	4613      	mov	r3, r2
 800bf88:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d032      	beq.n	800bffa <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800bf94:	2100      	movs	r1, #0
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	fba3 2302 	umull	r2, r3, r3, r2
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d000      	beq.n	800bfa4 <xQueueGenericCreate+0x28>
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d127      	bne.n	800bffa <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	68ba      	ldr	r2, [r7, #8]
 800bfae:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800bfb2:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800bfb6:	d820      	bhi.n	800bffa <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	fb02 f303 	mul.w	r3, r2, r3
 800bfc0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	3350      	adds	r3, #80	@ 0x50
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f002 fd16 	bl	800e9f8 <pvPortMalloc>
 800bfcc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d019      	beq.n	800c008 <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	3350      	adds	r3, #80	@ 0x50
 800bfdc:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bfe6:	79fa      	ldrb	r2, [r7, #7]
 800bfe8:	69fb      	ldr	r3, [r7, #28]
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	4613      	mov	r3, r2
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	68b9      	ldr	r1, [r7, #8]
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f000 f80d 	bl	800c012 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800bff8:	e006      	b.n	800c008 <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d103      	bne.n	800c008 <xQueueGenericCreate+0x8c>
 800c000:	f002 fc9a 	bl	800e938 <ulSetInterruptMask>
 800c004:	bf00      	nop
 800c006:	e7fd      	b.n	800c004 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800c008:	69fb      	ldr	r3, [r7, #28]
    }
 800c00a:	4618      	mov	r0, r3
 800c00c:	3720      	adds	r7, #32
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b084      	sub	sp, #16
 800c016:	af00      	add	r7, sp, #0
 800c018:	60f8      	str	r0, [r7, #12]
 800c01a:	60b9      	str	r1, [r7, #8]
 800c01c:	607a      	str	r2, [r7, #4]
 800c01e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d103      	bne.n	800c02e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	69ba      	ldr	r2, [r7, #24]
 800c02a:	601a      	str	r2, [r3, #0]
 800c02c:	e002      	b.n	800c034 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	68ba      	ldr	r2, [r7, #8]
 800c03e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c040:	2101      	movs	r1, #1
 800c042:	69b8      	ldr	r0, [r7, #24]
 800c044:	f7ff fed8 	bl	800bdf8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	78fa      	ldrb	r2, [r7, #3]
 800c04c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800c050:	bf00      	nop
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00e      	beq.n	800c084 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c078:	2300      	movs	r3, #0
 800c07a:	2200      	movs	r2, #0
 800c07c:	2100      	movs	r1, #0
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 f8e5 	bl	800c24e <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800c084:	bf00      	nop
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b086      	sub	sp, #24
 800c090:	af00      	add	r7, sp, #0
 800c092:	4603      	mov	r3, r0
 800c094:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c096:	2301      	movs	r3, #1
 800c098:	617b      	str	r3, [r7, #20]
 800c09a:	2300      	movs	r3, #0
 800c09c:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c09e:	79fb      	ldrb	r3, [r7, #7]
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	6939      	ldr	r1, [r7, #16]
 800c0a4:	6978      	ldr	r0, [r7, #20]
 800c0a6:	f7ff ff69 	bl	800bf7c <xQueueGenericCreate>
 800c0aa:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f7ff ffd3 	bl	800c058 <prvInitialiseMutex>

        return xNewQueue;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
    }
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3718      	adds	r7, #24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b088      	sub	sp, #32
 800c0c0:	af02      	add	r7, sp, #8
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	6039      	str	r1, [r7, #0]
 800c0c6:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	617b      	str	r3, [r7, #20]
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c0d0:	79fb      	ldrb	r3, [r7, #7]
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	6939      	ldr	r1, [r7, #16]
 800c0da:	6978      	ldr	r0, [r7, #20]
 800c0dc:	f7ff ff05 	bl	800beea <xQueueGenericCreateStatic>
 800c0e0:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f7ff ffb8 	bl	800c058 <prvInitialiseMutex>

        return xNewQueue;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
    }
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3718      	adds	r7, #24
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 800c0f2:	b590      	push	{r4, r7, lr}
 800c0f4:	b085      	sub	sp, #20
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	60bb      	str	r3, [r7, #8]

        configASSERT( pxMutex );
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d103      	bne.n	800c10c <xQueueGiveMutexRecursive+0x1a>
 800c104:	f002 fc18 	bl	800e938 <ulSetInterruptMask>
 800c108:	bf00      	nop
 800c10a:	e7fd      	b.n	800c108 <xQueueGiveMutexRecursive+0x16>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	689c      	ldr	r4, [r3, #8]
 800c110:	f001 fd78 	bl	800dc04 <xTaskGetCurrentTaskHandle>
 800c114:	4603      	mov	r3, r0
 800c116:	429c      	cmp	r4, r3
 800c118:	d111      	bne.n	800c13e <xQueueGiveMutexRecursive+0x4c>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	1e5a      	subs	r2, r3, #1
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d105      	bne.n	800c138 <xQueueGiveMutexRecursive+0x46>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c12c:	2300      	movs	r3, #0
 800c12e:	2200      	movs	r2, #0
 800c130:	2100      	movs	r1, #0
 800c132:	68b8      	ldr	r0, [r7, #8]
 800c134:	f000 f88b 	bl	800c24e <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 800c138:	2301      	movs	r3, #1
 800c13a:	60fb      	str	r3, [r7, #12]
 800c13c:	e001      	b.n	800c142 <xQueueGiveMutexRecursive+0x50>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 800c13e:	2300      	movs	r3, #0
 800c140:	60fb      	str	r3, [r7, #12]

            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        return xReturn;
 800c142:	68fb      	ldr	r3, [r7, #12]
    }
 800c144:	4618      	mov	r0, r3
 800c146:	3714      	adds	r7, #20
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd90      	pop	{r4, r7, pc}

0800c14c <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 800c14c:	b590      	push	{r4, r7, lr}
 800c14e:	b085      	sub	sp, #20
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	60bb      	str	r3, [r7, #8]

        configASSERT( pxMutex );
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d103      	bne.n	800c168 <xQueueTakeMutexRecursive+0x1c>
 800c160:	f002 fbea 	bl	800e938 <ulSetInterruptMask>
 800c164:	bf00      	nop
 800c166:	e7fd      	b.n	800c164 <xQueueTakeMutexRecursive+0x18>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	689c      	ldr	r4, [r3, #8]
 800c16c:	f001 fd4a 	bl	800dc04 <xTaskGetCurrentTaskHandle>
 800c170:	4603      	mov	r3, r0
 800c172:	429c      	cmp	r4, r3
 800c174:	d107      	bne.n	800c186 <xQueueTakeMutexRecursive+0x3a>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	1c5a      	adds	r2, r3, #1
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 800c180:	2301      	movs	r3, #1
 800c182:	60fb      	str	r3, [r7, #12]
 800c184:	e00c      	b.n	800c1a0 <xQueueTakeMutexRecursive+0x54>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	68b8      	ldr	r0, [r7, #8]
 800c18a:	f000 fae3 	bl	800c754 <xQueueSemaphoreTake>
 800c18e:	60f8      	str	r0, [r7, #12]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d004      	beq.n	800c1a0 <xQueueTakeMutexRecursive+0x54>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	1c5a      	adds	r2, r3, #1
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	60da      	str	r2, [r3, #12]
            {
                traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
            }
        }

        return xReturn;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
    }
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3714      	adds	r7, #20
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd90      	pop	{r4, r7, pc}

0800c1aa <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b088      	sub	sp, #32
 800c1ae:	af02      	add	r7, sp, #8
 800c1b0:	60f8      	str	r0, [r7, #12]
 800c1b2:	60b9      	str	r1, [r7, #8]
 800c1b4:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d013      	beq.n	800c1e8 <xQueueCreateCountingSemaphoreStatic+0x3e>
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d80f      	bhi.n	800c1e8 <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c1c8:	2302      	movs	r3, #2
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	f7ff fe89 	bl	800beea <xQueueGenericCreateStatic>
 800c1d8:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00a      	beq.n	800c1f6 <xQueueCreateCountingSemaphoreStatic+0x4c>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	68ba      	ldr	r2, [r7, #8]
 800c1e4:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800c1e6:	e006      	b.n	800c1f6 <xQueueCreateCountingSemaphoreStatic+0x4c>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d103      	bne.n	800c1f6 <xQueueCreateCountingSemaphoreStatic+0x4c>
 800c1ee:	f002 fba3 	bl	800e938 <ulSetInterruptMask>
 800c1f2:	bf00      	nop
 800c1f4:	e7fd      	b.n	800c1f2 <xQueueCreateCountingSemaphoreStatic+0x48>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800c1f6:	697b      	ldr	r3, [r7, #20]
    }
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3718      	adds	r7, #24
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 800c20a:	2300      	movs	r3, #0
 800c20c:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d010      	beq.n	800c236 <xQueueCreateCountingSemaphore+0x36>
 800c214:	683a      	ldr	r2, [r7, #0]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d80c      	bhi.n	800c236 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c21c:	2202      	movs	r2, #2
 800c21e:	2100      	movs	r1, #0
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f7ff feab 	bl	800bf7c <xQueueGenericCreate>
 800c226:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00a      	beq.n	800c244 <xQueueCreateCountingSemaphore+0x44>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	683a      	ldr	r2, [r7, #0]
 800c232:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800c234:	e006      	b.n	800c244 <xQueueCreateCountingSemaphore+0x44>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d103      	bne.n	800c244 <xQueueCreateCountingSemaphore+0x44>
 800c23c:	f002 fb7c 	bl	800e938 <ulSetInterruptMask>
 800c240:	bf00      	nop
 800c242:	e7fd      	b.n	800c240 <xQueueCreateCountingSemaphore+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800c244:	68fb      	ldr	r3, [r7, #12]
    }
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b08a      	sub	sp, #40	@ 0x28
 800c252:	af00      	add	r7, sp, #0
 800c254:	60f8      	str	r0, [r7, #12]
 800c256:	60b9      	str	r1, [r7, #8]
 800c258:	607a      	str	r2, [r7, #4]
 800c25a:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c25c:	2300      	movs	r3, #0
 800c25e:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800c264:	6a3b      	ldr	r3, [r7, #32]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d103      	bne.n	800c272 <xQueueGenericSend+0x24>
 800c26a:	f002 fb65 	bl	800e938 <ulSetInterruptMask>
 800c26e:	bf00      	nop
 800c270:	e7fd      	b.n	800c26e <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d103      	bne.n	800c280 <xQueueGenericSend+0x32>
 800c278:	6a3b      	ldr	r3, [r7, #32]
 800c27a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d101      	bne.n	800c284 <xQueueGenericSend+0x36>
 800c280:	2301      	movs	r3, #1
 800c282:	e000      	b.n	800c286 <xQueueGenericSend+0x38>
 800c284:	2300      	movs	r3, #0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d103      	bne.n	800c292 <xQueueGenericSend+0x44>
 800c28a:	f002 fb55 	bl	800e938 <ulSetInterruptMask>
 800c28e:	bf00      	nop
 800c290:	e7fd      	b.n	800c28e <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	2b02      	cmp	r3, #2
 800c296:	d103      	bne.n	800c2a0 <xQueueGenericSend+0x52>
 800c298:	6a3b      	ldr	r3, [r7, #32]
 800c29a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d101      	bne.n	800c2a4 <xQueueGenericSend+0x56>
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e000      	b.n	800c2a6 <xQueueGenericSend+0x58>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d103      	bne.n	800c2b2 <xQueueGenericSend+0x64>
 800c2aa:	f002 fb45 	bl	800e938 <ulSetInterruptMask>
 800c2ae:	bf00      	nop
 800c2b0:	e7fd      	b.n	800c2ae <xQueueGenericSend+0x60>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2b2:	f001 fcb7 	bl	800dc24 <xTaskGetSchedulerState>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d102      	bne.n	800c2c2 <xQueueGenericSend+0x74>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d101      	bne.n	800c2c6 <xQueueGenericSend+0x78>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e000      	b.n	800c2c8 <xQueueGenericSend+0x7a>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d103      	bne.n	800c2d4 <xQueueGenericSend+0x86>
 800c2cc:	f002 fb34 	bl	800e938 <ulSetInterruptMask>
 800c2d0:	bf00      	nop
 800c2d2:	e7fd      	b.n	800c2d0 <xQueueGenericSend+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c2d4:	f002 f9f2 	bl	800e6bc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c2d8:	6a3b      	ldr	r3, [r7, #32]
 800c2da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2dc:	6a3b      	ldr	r3, [r7, #32]
 800c2de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d302      	bcc.n	800c2ea <xQueueGenericSend+0x9c>
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	2b02      	cmp	r3, #2
 800c2e8:	d11d      	bne.n	800c326 <xQueueGenericSend+0xd8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	68b9      	ldr	r1, [r7, #8]
 800c2ee:	6a38      	ldr	r0, [r7, #32]
 800c2f0:	f000 fbae 	bl	800ca50 <prvCopyDataToQueue>
 800c2f4:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2f6:	6a3b      	ldr	r3, [r7, #32]
 800c2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00a      	beq.n	800c314 <xQueueGenericSend+0xc6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2fe:	6a3b      	ldr	r3, [r7, #32]
 800c300:	3324      	adds	r3, #36	@ 0x24
 800c302:	4618      	mov	r0, r3
 800c304:	f001 fa74 	bl	800d7f0 <xTaskRemoveFromEventList>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d007      	beq.n	800c31e <xQueueGenericSend+0xd0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800c30e:	f002 f9c3 	bl	800e698 <vPortYield>
 800c312:	e004      	b.n	800c31e <xQueueGenericSend+0xd0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d001      	beq.n	800c31e <xQueueGenericSend+0xd0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800c31a:	f002 f9bd 	bl	800e698 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800c31e:	f002 f9df 	bl	800e6e0 <vPortExitCritical>
                return pdPASS;
 800c322:	2301      	movs	r3, #1
 800c324:	e05c      	b.n	800c3e0 <xQueueGenericSend+0x192>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d103      	bne.n	800c334 <xQueueGenericSend+0xe6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c32c:	f002 f9d8 	bl	800e6e0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800c330:	2300      	movs	r3, #0
 800c332:	e055      	b.n	800c3e0 <xQueueGenericSend+0x192>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c336:	2b00      	cmp	r3, #0
 800c338:	d106      	bne.n	800c348 <xQueueGenericSend+0xfa>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c33a:	f107 0314 	add.w	r3, r7, #20
 800c33e:	4618      	mov	r0, r3
 800c340:	f001 fb24 	bl	800d98c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c344:	2301      	movs	r3, #1
 800c346:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c348:	f002 f9ca 	bl	800e6e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c34c:	f000 ff66 	bl	800d21c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c350:	f002 f9b4 	bl	800e6bc <vPortEnterCritical>
 800c354:	6a3b      	ldr	r3, [r7, #32]
 800c356:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c35a:	b25b      	sxtb	r3, r3
 800c35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c360:	d103      	bne.n	800c36a <xQueueGenericSend+0x11c>
 800c362:	6a3b      	ldr	r3, [r7, #32]
 800c364:	2200      	movs	r2, #0
 800c366:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c36a:	6a3b      	ldr	r3, [r7, #32]
 800c36c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c370:	b25b      	sxtb	r3, r3
 800c372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c376:	d103      	bne.n	800c380 <xQueueGenericSend+0x132>
 800c378:	6a3b      	ldr	r3, [r7, #32]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c380:	f002 f9ae 	bl	800e6e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c384:	1d3a      	adds	r2, r7, #4
 800c386:	f107 0314 	add.w	r3, r7, #20
 800c38a:	4611      	mov	r1, r2
 800c38c:	4618      	mov	r0, r3
 800c38e:	f001 fb13 	bl	800d9b8 <xTaskCheckForTimeOut>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d11d      	bne.n	800c3d4 <xQueueGenericSend+0x186>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c398:	6a38      	ldr	r0, [r7, #32]
 800c39a:	f000 fc51 	bl	800cc40 <prvIsQueueFull>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d011      	beq.n	800c3c8 <xQueueGenericSend+0x17a>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c3a4:	6a3b      	ldr	r3, [r7, #32]
 800c3a6:	3310      	adds	r3, #16
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f001 f9c3 	bl	800d738 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800c3b2:	6a38      	ldr	r0, [r7, #32]
 800c3b4:	f000 fbdc 	bl	800cb70 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800c3b8:	f000 ff3e 	bl	800d238 <xTaskResumeAll>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d188      	bne.n	800c2d4 <xQueueGenericSend+0x86>
                {
                    portYIELD_WITHIN_API();
 800c3c2:	f002 f969 	bl	800e698 <vPortYield>
 800c3c6:	e785      	b.n	800c2d4 <xQueueGenericSend+0x86>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800c3c8:	6a38      	ldr	r0, [r7, #32]
 800c3ca:	f000 fbd1 	bl	800cb70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c3ce:	f000 ff33 	bl	800d238 <xTaskResumeAll>
 800c3d2:	e77f      	b.n	800c2d4 <xQueueGenericSend+0x86>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800c3d4:	6a38      	ldr	r0, [r7, #32]
 800c3d6:	f000 fbcb 	bl	800cb70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c3da:	f000 ff2d 	bl	800d238 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800c3de:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3728      	adds	r7, #40	@ 0x28
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b08a      	sub	sp, #40	@ 0x28
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800c3fa:	6a3b      	ldr	r3, [r7, #32]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d103      	bne.n	800c408 <xQueueGenericSendFromISR+0x20>
 800c400:	f002 fa9a 	bl	800e938 <ulSetInterruptMask>
 800c404:	bf00      	nop
 800c406:	e7fd      	b.n	800c404 <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d103      	bne.n	800c416 <xQueueGenericSendFromISR+0x2e>
 800c40e:	6a3b      	ldr	r3, [r7, #32]
 800c410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <xQueueGenericSendFromISR+0x32>
 800c416:	2301      	movs	r3, #1
 800c418:	e000      	b.n	800c41c <xQueueGenericSendFromISR+0x34>
 800c41a:	2300      	movs	r3, #0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d103      	bne.n	800c428 <xQueueGenericSendFromISR+0x40>
 800c420:	f002 fa8a 	bl	800e938 <ulSetInterruptMask>
 800c424:	bf00      	nop
 800c426:	e7fd      	b.n	800c424 <xQueueGenericSendFromISR+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d103      	bne.n	800c436 <xQueueGenericSendFromISR+0x4e>
 800c42e:	6a3b      	ldr	r3, [r7, #32]
 800c430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c432:	2b01      	cmp	r3, #1
 800c434:	d101      	bne.n	800c43a <xQueueGenericSendFromISR+0x52>
 800c436:	2301      	movs	r3, #1
 800c438:	e000      	b.n	800c43c <xQueueGenericSendFromISR+0x54>
 800c43a:	2300      	movs	r3, #0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d103      	bne.n	800c448 <xQueueGenericSendFromISR+0x60>
 800c440:	f002 fa7a 	bl	800e938 <ulSetInterruptMask>
 800c444:	bf00      	nop
 800c446:	e7fd      	b.n	800c444 <xQueueGenericSendFromISR+0x5c>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c448:	f002 fa76 	bl	800e938 <ulSetInterruptMask>
 800c44c:	61f8      	str	r0, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c452:	6a3b      	ldr	r3, [r7, #32]
 800c454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c456:	429a      	cmp	r2, r3
 800c458:	d302      	bcc.n	800c460 <xQueueGenericSendFromISR+0x78>
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d13d      	bne.n	800c4dc <xQueueGenericSendFromISR+0xf4>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800c460:	6a3b      	ldr	r3, [r7, #32]
 800c462:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c466:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c468:	6a3b      	ldr	r3, [r7, #32]
 800c46a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c46c:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c46e:	683a      	ldr	r2, [r7, #0]
 800c470:	68b9      	ldr	r1, [r7, #8]
 800c472:	6a38      	ldr	r0, [r7, #32]
 800c474:	f000 faec 	bl	800ca50 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800c478:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c480:	d112      	bne.n	800c4a8 <xQueueGenericSendFromISR+0xc0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c482:	6a3b      	ldr	r3, [r7, #32]
 800c484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c486:	2b00      	cmp	r3, #0
 800c488:	d025      	beq.n	800c4d6 <xQueueGenericSendFromISR+0xee>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c48a:	6a3b      	ldr	r3, [r7, #32]
 800c48c:	3324      	adds	r3, #36	@ 0x24
 800c48e:	4618      	mov	r0, r3
 800c490:	f001 f9ae 	bl	800d7f0 <xTaskRemoveFromEventList>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d01d      	beq.n	800c4d6 <xQueueGenericSendFromISR+0xee>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d01a      	beq.n	800c4d6 <xQueueGenericSendFromISR+0xee>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	601a      	str	r2, [r3, #0]
 800c4a6:	e016      	b.n	800c4d6 <xQueueGenericSendFromISR+0xee>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800c4a8:	f000 ffd6 	bl	800d458 <uxTaskGetNumberOfTasks>
 800c4ac:	6138      	str	r0, [r7, #16]
 800c4ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c4b2:	693a      	ldr	r2, [r7, #16]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d90e      	bls.n	800c4d6 <xQueueGenericSendFromISR+0xee>
 800c4b8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c4bc:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4be:	d103      	bne.n	800c4c8 <xQueueGenericSendFromISR+0xe0>
 800c4c0:	f002 fa3a 	bl	800e938 <ulSetInterruptMask>
 800c4c4:	bf00      	nop
 800c4c6:	e7fd      	b.n	800c4c4 <xQueueGenericSendFromISR+0xdc>
 800c4c8:	7efb      	ldrb	r3, [r7, #27]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	b25a      	sxtb	r2, r3
 800c4d0:	6a3b      	ldr	r3, [r7, #32]
 800c4d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	627b      	str	r3, [r7, #36]	@ 0x24
        {
 800c4da:	e001      	b.n	800c4e0 <xQueueGenericSendFromISR+0xf8>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c4e0:	69f8      	ldr	r0, [r7, #28]
 800c4e2:	f002 fa36 	bl	800e952 <vClearInterruptMask>

    return xReturn;
 800c4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3728      	adds	r7, #40	@ 0x28
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b088      	sub	sp, #32
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	61bb      	str	r3, [r7, #24]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800c4fe:	69bb      	ldr	r3, [r7, #24]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d103      	bne.n	800c50c <xQueueGiveFromISR+0x1c>
 800c504:	f002 fa18 	bl	800e938 <ulSetInterruptMask>
 800c508:	bf00      	nop
 800c50a:	e7fd      	b.n	800c508 <xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800c50c:	69bb      	ldr	r3, [r7, #24]
 800c50e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c510:	2b00      	cmp	r3, #0
 800c512:	d003      	beq.n	800c51c <xQueueGiveFromISR+0x2c>
 800c514:	f002 fa10 	bl	800e938 <ulSetInterruptMask>
 800c518:	bf00      	nop
 800c51a:	e7fd      	b.n	800c518 <xQueueGiveFromISR+0x28>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d103      	bne.n	800c52c <xQueueGiveFromISR+0x3c>
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d101      	bne.n	800c530 <xQueueGiveFromISR+0x40>
 800c52c:	2301      	movs	r3, #1
 800c52e:	e000      	b.n	800c532 <xQueueGiveFromISR+0x42>
 800c530:	2300      	movs	r3, #0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d103      	bne.n	800c53e <xQueueGiveFromISR+0x4e>
 800c536:	f002 f9ff 	bl	800e938 <ulSetInterruptMask>
 800c53a:	bf00      	nop
 800c53c:	e7fd      	b.n	800c53a <xQueueGiveFromISR+0x4a>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c53e:	f002 f9fb 	bl	800e938 <ulSetInterruptMask>
 800c542:	6178      	str	r0, [r7, #20]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c548:	613b      	str	r3, [r7, #16]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c54e:	693a      	ldr	r2, [r7, #16]
 800c550:	429a      	cmp	r2, r3
 800c552:	d239      	bcs.n	800c5c8 <xQueueGiveFromISR+0xd8>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c55a:	73fb      	strb	r3, [r7, #15]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	1c5a      	adds	r2, r3, #1
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800c564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c56c:	d112      	bne.n	800c594 <xQueueGiveFromISR+0xa4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c572:	2b00      	cmp	r3, #0
 800c574:	d025      	beq.n	800c5c2 <xQueueGiveFromISR+0xd2>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	3324      	adds	r3, #36	@ 0x24
 800c57a:	4618      	mov	r0, r3
 800c57c:	f001 f938 	bl	800d7f0 <xTaskRemoveFromEventList>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d01d      	beq.n	800c5c2 <xQueueGiveFromISR+0xd2>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d01a      	beq.n	800c5c2 <xQueueGiveFromISR+0xd2>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	2201      	movs	r2, #1
 800c590:	601a      	str	r2, [r3, #0]
 800c592:	e016      	b.n	800c5c2 <xQueueGiveFromISR+0xd2>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800c594:	f000 ff60 	bl	800d458 <uxTaskGetNumberOfTasks>
 800c598:	60b8      	str	r0, [r7, #8]
 800c59a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d90e      	bls.n	800c5c2 <xQueueGiveFromISR+0xd2>
 800c5a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5a8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5aa:	d103      	bne.n	800c5b4 <xQueueGiveFromISR+0xc4>
 800c5ac:	f002 f9c4 	bl	800e938 <ulSetInterruptMask>
 800c5b0:	bf00      	nop
 800c5b2:	e7fd      	b.n	800c5b0 <xQueueGiveFromISR+0xc0>
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	b25a      	sxtb	r2, r3
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	61fb      	str	r3, [r7, #28]
 800c5c6:	e001      	b.n	800c5cc <xQueueGiveFromISR+0xdc>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	61fb      	str	r3, [r7, #28]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c5cc:	6978      	ldr	r0, [r7, #20]
 800c5ce:	f002 f9c0 	bl	800e952 <vClearInterruptMask>

    return xReturn;
 800c5d2:	69fb      	ldr	r3, [r7, #28]
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3720      	adds	r7, #32
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b08a      	sub	sp, #40	@ 0x28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800c5f0:	6a3b      	ldr	r3, [r7, #32]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d103      	bne.n	800c5fe <xQueueReceive+0x22>
 800c5f6:	f002 f99f 	bl	800e938 <ulSetInterruptMask>
 800c5fa:	bf00      	nop
 800c5fc:	e7fd      	b.n	800c5fa <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d103      	bne.n	800c60c <xQueueReceive+0x30>
 800c604:	6a3b      	ldr	r3, [r7, #32]
 800c606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d101      	bne.n	800c610 <xQueueReceive+0x34>
 800c60c:	2301      	movs	r3, #1
 800c60e:	e000      	b.n	800c612 <xQueueReceive+0x36>
 800c610:	2300      	movs	r3, #0
 800c612:	2b00      	cmp	r3, #0
 800c614:	d103      	bne.n	800c61e <xQueueReceive+0x42>
 800c616:	f002 f98f 	bl	800e938 <ulSetInterruptMask>
 800c61a:	bf00      	nop
 800c61c:	e7fd      	b.n	800c61a <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c61e:	f001 fb01 	bl	800dc24 <xTaskGetSchedulerState>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d102      	bne.n	800c62e <xQueueReceive+0x52>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <xQueueReceive+0x56>
 800c62e:	2301      	movs	r3, #1
 800c630:	e000      	b.n	800c634 <xQueueReceive+0x58>
 800c632:	2300      	movs	r3, #0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d103      	bne.n	800c640 <xQueueReceive+0x64>
 800c638:	f002 f97e 	bl	800e938 <ulSetInterruptMask>
 800c63c:	bf00      	nop
 800c63e:	e7fd      	b.n	800c63c <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c640:	f002 f83c 	bl	800e6bc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c644:	6a3b      	ldr	r3, [r7, #32]
 800c646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c648:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d019      	beq.n	800c684 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c650:	68b9      	ldr	r1, [r7, #8]
 800c652:	6a38      	ldr	r0, [r7, #32]
 800c654:	f000 fa66 	bl	800cb24 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	1e5a      	subs	r2, r3, #1
 800c65c:	6a3b      	ldr	r3, [r7, #32]
 800c65e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c660:	6a3b      	ldr	r3, [r7, #32]
 800c662:	691b      	ldr	r3, [r3, #16]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d009      	beq.n	800c67c <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c668:	6a3b      	ldr	r3, [r7, #32]
 800c66a:	3310      	adds	r3, #16
 800c66c:	4618      	mov	r0, r3
 800c66e:	f001 f8bf 	bl	800d7f0 <xTaskRemoveFromEventList>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d001      	beq.n	800c67c <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c678:	f002 f80e 	bl	800e698 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800c67c:	f002 f830 	bl	800e6e0 <vPortExitCritical>
                return pdPASS;
 800c680:	2301      	movs	r3, #1
 800c682:	e063      	b.n	800c74c <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d103      	bne.n	800c692 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800c68a:	f002 f829 	bl	800e6e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800c68e:	2300      	movs	r3, #0
 800c690:	e05c      	b.n	800c74c <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c694:	2b00      	cmp	r3, #0
 800c696:	d106      	bne.n	800c6a6 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c698:	f107 0314 	add.w	r3, r7, #20
 800c69c:	4618      	mov	r0, r3
 800c69e:	f001 f975 	bl	800d98c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c6a6:	f002 f81b 	bl	800e6e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c6aa:	f000 fdb7 	bl	800d21c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c6ae:	f002 f805 	bl	800e6bc <vPortEnterCritical>
 800c6b2:	6a3b      	ldr	r3, [r7, #32]
 800c6b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c6b8:	b25b      	sxtb	r3, r3
 800c6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6be:	d103      	bne.n	800c6c8 <xQueueReceive+0xec>
 800c6c0:	6a3b      	ldr	r3, [r7, #32]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c6c8:	6a3b      	ldr	r3, [r7, #32]
 800c6ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c6ce:	b25b      	sxtb	r3, r3
 800c6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d4:	d103      	bne.n	800c6de <xQueueReceive+0x102>
 800c6d6:	6a3b      	ldr	r3, [r7, #32]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c6de:	f001 ffff 	bl	800e6e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6e2:	1d3a      	adds	r2, r7, #4
 800c6e4:	f107 0314 	add.w	r3, r7, #20
 800c6e8:	4611      	mov	r1, r2
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f001 f964 	bl	800d9b8 <xTaskCheckForTimeOut>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d11d      	bne.n	800c732 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6f6:	6a38      	ldr	r0, [r7, #32]
 800c6f8:	f000 fa8c 	bl	800cc14 <prvIsQueueEmpty>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d011      	beq.n	800c726 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c702:	6a3b      	ldr	r3, [r7, #32]
 800c704:	3324      	adds	r3, #36	@ 0x24
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	4611      	mov	r1, r2
 800c70a:	4618      	mov	r0, r3
 800c70c:	f001 f814 	bl	800d738 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800c710:	6a38      	ldr	r0, [r7, #32]
 800c712:	f000 fa2d 	bl	800cb70 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800c716:	f000 fd8f 	bl	800d238 <xTaskResumeAll>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d18f      	bne.n	800c640 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 800c720:	f001 ffba 	bl	800e698 <vPortYield>
 800c724:	e78c      	b.n	800c640 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800c726:	6a38      	ldr	r0, [r7, #32]
 800c728:	f000 fa22 	bl	800cb70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c72c:	f000 fd84 	bl	800d238 <xTaskResumeAll>
 800c730:	e786      	b.n	800c640 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800c732:	6a38      	ldr	r0, [r7, #32]
 800c734:	f000 fa1c 	bl	800cb70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c738:	f000 fd7e 	bl	800d238 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c73c:	6a38      	ldr	r0, [r7, #32]
 800c73e:	f000 fa69 	bl	800cc14 <prvIsQueueEmpty>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	f43f af7b 	beq.w	800c640 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800c74a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3728      	adds	r7, #40	@ 0x28
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b08a      	sub	sp, #40	@ 0x28
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800c75e:	2300      	movs	r3, #0
 800c760:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800c766:	2300      	movs	r3, #0
 800c768:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d103      	bne.n	800c778 <xQueueSemaphoreTake+0x24>
 800c770:	f002 f8e2 	bl	800e938 <ulSetInterruptMask>
 800c774:	bf00      	nop
 800c776:	e7fd      	b.n	800c774 <xQueueSemaphoreTake+0x20>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d003      	beq.n	800c788 <xQueueSemaphoreTake+0x34>
 800c780:	f002 f8da 	bl	800e938 <ulSetInterruptMask>
 800c784:	bf00      	nop
 800c786:	e7fd      	b.n	800c784 <xQueueSemaphoreTake+0x30>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c788:	f001 fa4c 	bl	800dc24 <xTaskGetSchedulerState>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d102      	bne.n	800c798 <xQueueSemaphoreTake+0x44>
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d101      	bne.n	800c79c <xQueueSemaphoreTake+0x48>
 800c798:	2301      	movs	r3, #1
 800c79a:	e000      	b.n	800c79e <xQueueSemaphoreTake+0x4a>
 800c79c:	2300      	movs	r3, #0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d103      	bne.n	800c7aa <xQueueSemaphoreTake+0x56>
 800c7a2:	f002 f8c9 	bl	800e938 <ulSetInterruptMask>
 800c7a6:	bf00      	nop
 800c7a8:	e7fd      	b.n	800c7a6 <xQueueSemaphoreTake+0x52>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800c7aa:	f001 ff87 	bl	800e6bc <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7b2:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d01e      	beq.n	800c7f8 <xQueueSemaphoreTake+0xa4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	1e5a      	subs	r2, r3, #1
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d104      	bne.n	800c7d4 <xQueueSemaphoreTake+0x80>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c7ca:	f001 fbfd 	bl	800dfc8 <pvTaskIncrementMutexHeldCount>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d009      	beq.n	800c7f0 <xQueueSemaphoreTake+0x9c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	3310      	adds	r3, #16
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f001 f805 	bl	800d7f0 <xTaskRemoveFromEventList>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d001      	beq.n	800c7f0 <xQueueSemaphoreTake+0x9c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800c7ec:	f001 ff54 	bl	800e698 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800c7f0:	f001 ff76 	bl	800e6e0 <vPortExitCritical>
                return pdPASS;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	e083      	b.n	800c900 <xQueueSemaphoreTake+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d103      	bne.n	800c806 <xQueueSemaphoreTake+0xb2>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800c7fe:	f001 ff6f 	bl	800e6e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800c802:	2300      	movs	r3, #0
 800c804:	e07c      	b.n	800c900 <xQueueSemaphoreTake+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800c806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d106      	bne.n	800c81a <xQueueSemaphoreTake+0xc6>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800c80c:	f107 030c 	add.w	r3, r7, #12
 800c810:	4618      	mov	r0, r3
 800c812:	f001 f8bb 	bl	800d98c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800c816:	2301      	movs	r3, #1
 800c818:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800c81a:	f001 ff61 	bl	800e6e0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800c81e:	f000 fcfd 	bl	800d21c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800c822:	f001 ff4b 	bl	800e6bc <vPortEnterCritical>
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c82c:	b25b      	sxtb	r3, r3
 800c82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c832:	d103      	bne.n	800c83c <xQueueSemaphoreTake+0xe8>
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	2200      	movs	r2, #0
 800c838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c842:	b25b      	sxtb	r3, r3
 800c844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c848:	d103      	bne.n	800c852 <xQueueSemaphoreTake+0xfe>
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c852:	f001 ff45 	bl	800e6e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c856:	463a      	mov	r2, r7
 800c858:	f107 030c 	add.w	r3, r7, #12
 800c85c:	4611      	mov	r1, r2
 800c85e:	4618      	mov	r0, r3
 800c860:	f001 f8aa 	bl	800d9b8 <xTaskCheckForTimeOut>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d12c      	bne.n	800c8c4 <xQueueSemaphoreTake+0x170>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c86a:	69f8      	ldr	r0, [r7, #28]
 800c86c:	f000 f9d2 	bl	800cc14 <prvIsQueueEmpty>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d020      	beq.n	800c8b8 <xQueueSemaphoreTake+0x164>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d109      	bne.n	800c892 <xQueueSemaphoreTake+0x13e>
                    {
                        taskENTER_CRITICAL();
 800c87e:	f001 ff1d 	bl	800e6bc <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	4618      	mov	r0, r3
 800c888:	f001 f9ea 	bl	800dc60 <xTaskPriorityInherit>
 800c88c:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800c88e:	f001 ff27 	bl	800e6e0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	3324      	adds	r3, #36	@ 0x24
 800c896:	683a      	ldr	r2, [r7, #0]
 800c898:	4611      	mov	r1, r2
 800c89a:	4618      	mov	r0, r3
 800c89c:	f000 ff4c 	bl	800d738 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800c8a0:	69f8      	ldr	r0, [r7, #28]
 800c8a2:	f000 f965 	bl	800cb70 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800c8a6:	f000 fcc7 	bl	800d238 <xTaskResumeAll>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f47f af7c 	bne.w	800c7aa <xQueueSemaphoreTake+0x56>
                {
                    portYIELD_WITHIN_API();
 800c8b2:	f001 fef1 	bl	800e698 <vPortYield>
 800c8b6:	e778      	b.n	800c7aa <xQueueSemaphoreTake+0x56>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800c8b8:	69f8      	ldr	r0, [r7, #28]
 800c8ba:	f000 f959 	bl	800cb70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800c8be:	f000 fcbb 	bl	800d238 <xTaskResumeAll>
 800c8c2:	e772      	b.n	800c7aa <xQueueSemaphoreTake+0x56>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800c8c4:	69f8      	ldr	r0, [r7, #28]
 800c8c6:	f000 f953 	bl	800cb70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800c8ca:	f000 fcb5 	bl	800d238 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8ce:	69f8      	ldr	r0, [r7, #28]
 800c8d0:	f000 f9a0 	bl	800cc14 <prvIsQueueEmpty>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f43f af67 	beq.w	800c7aa <xQueueSemaphoreTake+0x56>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800c8dc:	6a3b      	ldr	r3, [r7, #32]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00d      	beq.n	800c8fe <xQueueSemaphoreTake+0x1aa>
                    {
                        taskENTER_CRITICAL();
 800c8e2:	f001 feeb 	bl	800e6bc <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c8e6:	69f8      	ldr	r0, [r7, #28]
 800c8e8:	f000 f89a 	bl	800ca20 <prvGetDisinheritPriorityAfterTimeout>
 800c8ec:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c8ee:	69fb      	ldr	r3, [r7, #28]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	6979      	ldr	r1, [r7, #20]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f001 facb 	bl	800de90 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800c8fa:	f001 fef1 	bl	800e6e0 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800c8fe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800c900:	4618      	mov	r0, r3
 800c902:	3728      	adds	r7, #40	@ 0x28
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b08a      	sub	sp, #40	@ 0x28
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800c918:	6a3b      	ldr	r3, [r7, #32]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d103      	bne.n	800c926 <xQueueReceiveFromISR+0x1e>
 800c91e:	f002 f80b 	bl	800e938 <ulSetInterruptMask>
 800c922:	bf00      	nop
 800c924:	e7fd      	b.n	800c922 <xQueueReceiveFromISR+0x1a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d103      	bne.n	800c934 <xQueueReceiveFromISR+0x2c>
 800c92c:	6a3b      	ldr	r3, [r7, #32]
 800c92e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c930:	2b00      	cmp	r3, #0
 800c932:	d101      	bne.n	800c938 <xQueueReceiveFromISR+0x30>
 800c934:	2301      	movs	r3, #1
 800c936:	e000      	b.n	800c93a <xQueueReceiveFromISR+0x32>
 800c938:	2300      	movs	r3, #0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d103      	bne.n	800c946 <xQueueReceiveFromISR+0x3e>
 800c93e:	f001 fffb 	bl	800e938 <ulSetInterruptMask>
 800c942:	bf00      	nop
 800c944:	e7fd      	b.n	800c942 <xQueueReceiveFromISR+0x3a>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c946:	f001 fff7 	bl	800e938 <ulSetInterruptMask>
 800c94a:	61f8      	str	r0, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c94c:	6a3b      	ldr	r3, [r7, #32]
 800c94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c950:	61bb      	str	r3, [r7, #24]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c952:	69bb      	ldr	r3, [r7, #24]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d03d      	beq.n	800c9d4 <xQueueReceiveFromISR+0xcc>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800c958:	6a3b      	ldr	r3, [r7, #32]
 800c95a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c95e:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c960:	68b9      	ldr	r1, [r7, #8]
 800c962:	6a38      	ldr	r0, [r7, #32]
 800c964:	f000 f8de 	bl	800cb24 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	1e5a      	subs	r2, r3, #1
 800c96c:	6a3b      	ldr	r3, [r7, #32]
 800c96e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800c970:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c978:	d112      	bne.n	800c9a0 <xQueueReceiveFromISR+0x98>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c97a:	6a3b      	ldr	r3, [r7, #32]
 800c97c:	691b      	ldr	r3, [r3, #16]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d025      	beq.n	800c9ce <xQueueReceiveFromISR+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c982:	6a3b      	ldr	r3, [r7, #32]
 800c984:	3310      	adds	r3, #16
 800c986:	4618      	mov	r0, r3
 800c988:	f000 ff32 	bl	800d7f0 <xTaskRemoveFromEventList>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d01d      	beq.n	800c9ce <xQueueReceiveFromISR+0xc6>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d01a      	beq.n	800c9ce <xQueueReceiveFromISR+0xc6>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	601a      	str	r2, [r3, #0]
 800c99e:	e016      	b.n	800c9ce <xQueueReceiveFromISR+0xc6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800c9a0:	f000 fd5a 	bl	800d458 <uxTaskGetNumberOfTasks>
 800c9a4:	6138      	str	r0, [r7, #16]
 800c9a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9aa:	693a      	ldr	r2, [r7, #16]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d90e      	bls.n	800c9ce <xQueueReceiveFromISR+0xc6>
 800c9b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9b4:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9b6:	d103      	bne.n	800c9c0 <xQueueReceiveFromISR+0xb8>
 800c9b8:	f001 ffbe 	bl	800e938 <ulSetInterruptMask>
 800c9bc:	bf00      	nop
 800c9be:	e7fd      	b.n	800c9bc <xQueueReceiveFromISR+0xb4>
 800c9c0:	7dfb      	ldrb	r3, [r7, #23]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	b25a      	sxtb	r2, r3
 800c9c8:	6a3b      	ldr	r3, [r7, #32]
 800c9ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9d2:	e001      	b.n	800c9d8 <xQueueReceiveFromISR+0xd0>
        }
        else
        {
            xReturn = pdFAIL;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	627b      	str	r3, [r7, #36]	@ 0x24
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800c9d8:	69f8      	ldr	r0, [r7, #28]
 800c9da:	f001 ffba 	bl	800e952 <vClearInterruptMask>

    return xReturn;
 800c9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3728      	adds	r7, #40	@ 0x28
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d103      	bne.n	800ca02 <vQueueDelete+0x1a>
 800c9fa:	f001 ff9d 	bl	800e938 <ulSetInterruptMask>
 800c9fe:	bf00      	nop
 800ca00:	e7fd      	b.n	800c9fe <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f000 f97a 	bl	800ccfc <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d102      	bne.n	800ca18 <vQueueDelete+0x30>
        {
            vPortFree( pxQueue );
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f002 f89c 	bl	800eb50 <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ca18:	bf00      	nop
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d006      	beq.n	800ca3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ca3a:	60fb      	str	r3, [r7, #12]
 800ca3c:	e001      	b.n	800ca42 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800ca42:	68fb      	ldr	r3, [r7, #12]
    }
 800ca44:	4618      	mov	r0, r3
 800ca46:	3714      	adds	r7, #20
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b086      	sub	sp, #24
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca64:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d10d      	bne.n	800ca8a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d14d      	bne.n	800cb12 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f001 f980 	bl	800dd80 <xTaskPriorityDisinherit>
 800ca80:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2200      	movs	r2, #0
 800ca86:	609a      	str	r2, [r3, #8]
 800ca88:	e043      	b.n	800cb12 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d119      	bne.n	800cac4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6858      	ldr	r0, [r3, #4]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca98:	461a      	mov	r2, r3
 800ca9a:	68b9      	ldr	r1, [r7, #8]
 800ca9c:	f00c fc87 	bl	80193ae <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	685a      	ldr	r2, [r3, #4]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caa8:	441a      	add	r2, r3
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	685a      	ldr	r2, [r3, #4]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d32b      	bcc.n	800cb12 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	605a      	str	r2, [r3, #4]
 800cac2:	e026      	b.n	800cb12 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	68d8      	ldr	r0, [r3, #12]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cacc:	461a      	mov	r2, r3
 800cace:	68b9      	ldr	r1, [r7, #8]
 800cad0:	f00c fc6d 	bl	80193ae <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	68da      	ldr	r2, [r3, #12]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cadc:	425b      	negs	r3, r3
 800cade:	441a      	add	r2, r3
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	68da      	ldr	r2, [r3, #12]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	429a      	cmp	r2, r3
 800caee:	d207      	bcs.n	800cb00 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	689a      	ldr	r2, [r3, #8]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caf8:	425b      	negs	r3, r3
 800cafa:	441a      	add	r2, r3
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2b02      	cmp	r3, #2
 800cb04:	d105      	bne.n	800cb12 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d002      	beq.n	800cb12 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	1c5a      	adds	r2, r3, #1
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800cb1a:	697b      	ldr	r3, [r7, #20]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3718      	adds	r7, #24
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d018      	beq.n	800cb68 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	68da      	ldr	r2, [r3, #12]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb3e:	441a      	add	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	68da      	ldr	r2, [r3, #12]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d303      	bcc.n	800cb58 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	68d9      	ldr	r1, [r3, #12]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb60:	461a      	mov	r2, r3
 800cb62:	6838      	ldr	r0, [r7, #0]
 800cb64:	f00c fc23 	bl	80193ae <memcpy>
    }
}
 800cb68:	bf00      	nop
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800cb78:	f001 fda0 	bl	800e6bc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb82:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb84:	e011      	b.n	800cbaa <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d012      	beq.n	800cbb4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	3324      	adds	r3, #36	@ 0x24
 800cb92:	4618      	mov	r0, r3
 800cb94:	f000 fe2c 	bl	800d7f0 <xTaskRemoveFromEventList>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d001      	beq.n	800cba2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800cb9e:	f000 ff63 	bl	800da68 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800cba2:	7bfb      	ldrb	r3, [r7, #15]
 800cba4:	3b01      	subs	r3, #1
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800cbaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	dce9      	bgt.n	800cb86 <prvUnlockQueue+0x16>
 800cbb2:	e000      	b.n	800cbb6 <prvUnlockQueue+0x46>
                    break;
 800cbb4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	22ff      	movs	r2, #255	@ 0xff
 800cbba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800cbbe:	f001 fd8f 	bl	800e6e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800cbc2:	f001 fd7b 	bl	800e6bc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cbcc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbce:	e011      	b.n	800cbf4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	691b      	ldr	r3, [r3, #16]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d012      	beq.n	800cbfe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	3310      	adds	r3, #16
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f000 fe07 	bl	800d7f0 <xTaskRemoveFromEventList>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800cbe8:	f000 ff3e 	bl	800da68 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800cbec:	7bbb      	ldrb	r3, [r7, #14]
 800cbee:	3b01      	subs	r3, #1
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	dce9      	bgt.n	800cbd0 <prvUnlockQueue+0x60>
 800cbfc:	e000      	b.n	800cc00 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800cbfe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	22ff      	movs	r2, #255	@ 0xff
 800cc04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800cc08:	f001 fd6a 	bl	800e6e0 <vPortExitCritical>
}
 800cc0c:	bf00      	nop
 800cc0e:	3710      	adds	r7, #16
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800cc1c:	f001 fd4e 	bl	800e6bc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d102      	bne.n	800cc2e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	60fb      	str	r3, [r7, #12]
 800cc2c:	e001      	b.n	800cc32 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cc32:	f001 fd55 	bl	800e6e0 <vPortExitCritical>

    return xReturn;
 800cc36:	68fb      	ldr	r3, [r7, #12]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800cc48:	f001 fd38 	bl	800e6bc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d102      	bne.n	800cc5e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	60fb      	str	r3, [r7, #12]
 800cc5c:	e001      	b.n	800cc62 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800cc62:	f001 fd3d 	bl	800e6e0 <vPortExitCritical>

    return xReturn;
 800cc66:	68fb      	ldr	r3, [r7, #12]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d103      	bne.n	800cc8c <vQueueAddToRegistry+0x1c>
 800cc84:	f001 fe58 	bl	800e938 <ulSetInterruptMask>
 800cc88:	bf00      	nop
 800cc8a:	e7fd      	b.n	800cc88 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d024      	beq.n	800ccdc <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc92:	2300      	movs	r3, #0
 800cc94:	60fb      	str	r3, [r7, #12]
 800cc96:	e01e      	b.n	800ccd6 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800cc98:	4a17      	ldr	r2, [pc, #92]	@ (800ccf8 <vQueueAddToRegistry+0x88>)
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	00db      	lsls	r3, r3, #3
 800cc9e:	4413      	add	r3, r2
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d105      	bne.n	800ccb4 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	00db      	lsls	r3, r3, #3
 800ccac:	4a12      	ldr	r2, [pc, #72]	@ (800ccf8 <vQueueAddToRegistry+0x88>)
 800ccae:	4413      	add	r3, r2
 800ccb0:	60bb      	str	r3, [r7, #8]
                    break;
 800ccb2:	e013      	b.n	800ccdc <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10a      	bne.n	800ccd0 <vQueueAddToRegistry+0x60>
 800ccba:	4a0f      	ldr	r2, [pc, #60]	@ (800ccf8 <vQueueAddToRegistry+0x88>)
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d104      	bne.n	800ccd0 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	00db      	lsls	r3, r3, #3
 800ccca:	4a0b      	ldr	r2, [pc, #44]	@ (800ccf8 <vQueueAddToRegistry+0x88>)
 800cccc:	4413      	add	r3, r2
 800ccce:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	60fb      	str	r3, [r7, #12]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2b07      	cmp	r3, #7
 800ccda:	d9dd      	bls.n	800cc98 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d005      	beq.n	800ccee <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	683a      	ldr	r2, [r7, #0]
 800cce6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800ccee:	bf00      	nop
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	200553f4 	.word	0x200553f4

0800ccfc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d103      	bne.n	800cd12 <vQueueUnregisterQueue+0x16>
 800cd0a:	f001 fe15 	bl	800e938 <ulSetInterruptMask>
 800cd0e:	bf00      	nop
 800cd10:	e7fd      	b.n	800cd0e <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd12:	2300      	movs	r3, #0
 800cd14:	60fb      	str	r3, [r7, #12]
 800cd16:	e016      	b.n	800cd46 <vQueueUnregisterQueue+0x4a>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cd18:	4a0f      	ldr	r2, [pc, #60]	@ (800cd58 <vQueueUnregisterQueue+0x5c>)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	00db      	lsls	r3, r3, #3
 800cd1e:	4413      	add	r3, r2
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d10b      	bne.n	800cd40 <vQueueUnregisterQueue+0x44>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800cd28:	4a0b      	ldr	r2, [pc, #44]	@ (800cd58 <vQueueUnregisterQueue+0x5c>)
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cd32:	4a09      	ldr	r2, [pc, #36]	@ (800cd58 <vQueueUnregisterQueue+0x5c>)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	00db      	lsls	r3, r3, #3
 800cd38:	4413      	add	r3, r2
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	605a      	str	r2, [r3, #4]
                break;
 800cd3e:	e006      	b.n	800cd4e <vQueueUnregisterQueue+0x52>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	3301      	adds	r3, #1
 800cd44:	60fb      	str	r3, [r7, #12]
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2b07      	cmp	r3, #7
 800cd4a:	d9e5      	bls.n	800cd18 <vQueueUnregisterQueue+0x1c>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cd4c:	bf00      	nop
 800cd4e:	bf00      	nop
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	200553f4 	.word	0x200553f4

0800cd5c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b086      	sub	sp, #24
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800cd6c:	f001 fca6 	bl	800e6bc <vPortEnterCritical>
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cd76:	b25b      	sxtb	r3, r3
 800cd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd7c:	d103      	bne.n	800cd86 <vQueueWaitForMessageRestricted+0x2a>
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd8c:	b25b      	sxtb	r3, r3
 800cd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd92:	d103      	bne.n	800cd9c <vQueueWaitForMessageRestricted+0x40>
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	2200      	movs	r2, #0
 800cd98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cd9c:	f001 fca0 	bl	800e6e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d106      	bne.n	800cdb6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	3324      	adds	r3, #36	@ 0x24
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	68b9      	ldr	r1, [r7, #8]
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f000 fcdf 	bl	800d774 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800cdb6:	6978      	ldr	r0, [r7, #20]
 800cdb8:	f7ff feda 	bl	800cb70 <prvUnlockQueue>
    }
 800cdbc:	bf00      	nop
 800cdbe:	3718      	adds	r7, #24
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b08c      	sub	sp, #48	@ 0x30
 800cdc8:	af04      	add	r7, sp, #16
 800cdca:	60f8      	str	r0, [r7, #12]
 800cdcc:	60b9      	str	r1, [r7, #8]
 800cdce:	607a      	str	r2, [r7, #4]
 800cdd0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800cdd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d103      	bne.n	800cde0 <xTaskCreateStatic+0x1c>
 800cdd8:	f001 fdae 	bl	800e938 <ulSetInterruptMask>
 800cddc:	bf00      	nop
 800cdde:	e7fd      	b.n	800cddc <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800cde0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d103      	bne.n	800cdee <xTaskCreateStatic+0x2a>
 800cde6:	f001 fda7 	bl	800e938 <ulSetInterruptMask>
 800cdea:	bf00      	nop
 800cdec:	e7fd      	b.n	800cdea <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800cdee:	235c      	movs	r3, #92	@ 0x5c
 800cdf0:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	2b5c      	cmp	r3, #92	@ 0x5c
 800cdf6:	d003      	beq.n	800ce00 <xTaskCreateStatic+0x3c>
 800cdf8:	f001 fd9e 	bl	800e938 <ulSetInterruptMask>
 800cdfc:	bf00      	nop
 800cdfe:	e7fd      	b.n	800cdfc <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ce00:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ce02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d023      	beq.n	800ce50 <xTaskCreateStatic+0x8c>
 800ce08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d020      	beq.n	800ce50 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce10:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800ce12:	225c      	movs	r2, #92	@ 0x5c
 800ce14:	2100      	movs	r1, #0
 800ce16:	69f8      	ldr	r0, [r7, #28]
 800ce18:	f00c fa53 	bl	80192c2 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce20:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	2202      	movs	r2, #2
 800ce26:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	9303      	str	r3, [sp, #12]
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	9302      	str	r3, [sp, #8]
 800ce32:	f107 0318 	add.w	r3, r7, #24
 800ce36:	9301      	str	r3, [sp, #4]
 800ce38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	68b9      	ldr	r1, [r7, #8]
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f000 f855 	bl	800cef2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800ce48:	69f8      	ldr	r0, [r7, #28]
 800ce4a:	f000 f8d5 	bl	800cff8 <prvAddNewTaskToReadyList>
 800ce4e:	e001      	b.n	800ce54 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 800ce50:	2300      	movs	r3, #0
 800ce52:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800ce54:	69bb      	ldr	r3, [r7, #24]
    }
 800ce56:	4618      	mov	r0, r3
 800ce58:	3720      	adds	r7, #32
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b08c      	sub	sp, #48	@ 0x30
 800ce62:	af04      	add	r7, sp, #16
 800ce64:	60f8      	str	r0, [r7, #12]
 800ce66:	60b9      	str	r1, [r7, #8]
 800ce68:	603b      	str	r3, [r7, #0]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ce6e:	88fb      	ldrh	r3, [r7, #6]
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	4618      	mov	r0, r3
 800ce74:	f001 fdc0 	bl	800e9f8 <pvPortMalloc>
 800ce78:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d013      	beq.n	800cea8 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ce80:	205c      	movs	r0, #92	@ 0x5c
 800ce82:	f001 fdb9 	bl	800e9f8 <pvPortMalloc>
 800ce86:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d008      	beq.n	800cea0 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800ce8e:	225c      	movs	r2, #92	@ 0x5c
 800ce90:	2100      	movs	r1, #0
 800ce92:	69f8      	ldr	r0, [r7, #28]
 800ce94:	f00c fa15 	bl	80192c2 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	697a      	ldr	r2, [r7, #20]
 800ce9c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ce9e:	e005      	b.n	800ceac <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800cea0:	6978      	ldr	r0, [r7, #20]
 800cea2:	f001 fe55 	bl	800eb50 <vPortFree>
 800cea6:	e001      	b.n	800ceac <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d017      	beq.n	800cee2 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ceb2:	69fb      	ldr	r3, [r7, #28]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ceba:	88fa      	ldrh	r2, [r7, #6]
 800cebc:	2300      	movs	r3, #0
 800cebe:	9303      	str	r3, [sp, #12]
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	9302      	str	r3, [sp, #8]
 800cec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cec6:	9301      	str	r3, [sp, #4]
 800cec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	68b9      	ldr	r1, [r7, #8]
 800ced0:	68f8      	ldr	r0, [r7, #12]
 800ced2:	f000 f80e 	bl	800cef2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800ced6:	69f8      	ldr	r0, [r7, #28]
 800ced8:	f000 f88e 	bl	800cff8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800cedc:	2301      	movs	r3, #1
 800cede:	61bb      	str	r3, [r7, #24]
 800cee0:	e002      	b.n	800cee8 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cee2:	f04f 33ff 	mov.w	r3, #4294967295
 800cee6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800cee8:	69bb      	ldr	r3, [r7, #24]
    }
 800ceea:	4618      	mov	r0, r3
 800ceec:	3720      	adds	r7, #32
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b086      	sub	sp, #24
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	60f8      	str	r0, [r7, #12]
 800cefa:	60b9      	str	r1, [r7, #8]
 800cefc:	607a      	str	r2, [r7, #4]
 800cefe:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cf00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf02:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	461a      	mov	r2, r3
 800cf0a:	21a5      	movs	r1, #165	@ 0xa5
 800cf0c:	f00c f9d9 	bl	80192c2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cf10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf1a:	3b01      	subs	r3, #1
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	4413      	add	r3, r2
 800cf20:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	f023 0307 	bic.w	r3, r3, #7
 800cf28:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	f003 0307 	and.w	r3, r3, #7
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d003      	beq.n	800cf3c <prvInitialiseNewTask+0x4a>
 800cf34:	f001 fd00 	bl	800e938 <ulSetInterruptMask>
 800cf38:	bf00      	nop
 800cf3a:	e7fd      	b.n	800cf38 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d01e      	beq.n	800cf80 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf42:	2300      	movs	r3, #0
 800cf44:	617b      	str	r3, [r7, #20]
 800cf46:	e012      	b.n	800cf6e <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cf48:	68ba      	ldr	r2, [r7, #8]
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	7819      	ldrb	r1, [r3, #0]
 800cf50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	4413      	add	r3, r2
 800cf56:	3334      	adds	r3, #52	@ 0x34
 800cf58:	460a      	mov	r2, r1
 800cf5a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800cf5c:	68ba      	ldr	r2, [r7, #8]
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	4413      	add	r3, r2
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d006      	beq.n	800cf76 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	617b      	str	r3, [r7, #20]
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	2b0f      	cmp	r3, #15
 800cf72:	d9e9      	bls.n	800cf48 <prvInitialiseNewTask+0x56>
 800cf74:	e000      	b.n	800cf78 <prvInitialiseNewTask+0x86>
            {
                break;
 800cf76:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cf78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800cf80:	6a3b      	ldr	r3, [r7, #32]
 800cf82:	2b37      	cmp	r3, #55	@ 0x37
 800cf84:	d903      	bls.n	800cf8e <prvInitialiseNewTask+0x9c>
 800cf86:	f001 fcd7 	bl	800e938 <ulSetInterruptMask>
 800cf8a:	bf00      	nop
 800cf8c:	e7fd      	b.n	800cf8a <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cf8e:	6a3b      	ldr	r3, [r7, #32]
 800cf90:	2b37      	cmp	r3, #55	@ 0x37
 800cf92:	d901      	bls.n	800cf98 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cf94:	2337      	movs	r3, #55	@ 0x37
 800cf96:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800cf98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf9a:	6a3a      	ldr	r2, [r7, #32]
 800cf9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800cf9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa0:	6a3a      	ldr	r2, [r7, #32]
 800cfa2:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cfa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa6:	3304      	adds	r3, #4
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7fe feb5 	bl	800bd18 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb0:	3318      	adds	r3, #24
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fe feb0 	bl	800bd18 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cfbc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfbe:	6a3b      	ldr	r3, [r7, #32]
 800cfc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cfc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cfc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cfcc:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800cfce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	6938      	ldr	r0, [r7, #16]
 800cfd8:	f001 fbce 	bl	800e778 <pxPortInitialiseStack>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe0:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cfe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cfec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800cfee:	bf00      	nop
 800cff0:	3718      	adds	r7, #24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
	...

0800cff8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800d000:	f001 fb5c 	bl	800e6bc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800d004:	4b3e      	ldr	r3, [pc, #248]	@ (800d100 <prvAddNewTaskToReadyList+0x108>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	3301      	adds	r3, #1
 800d00a:	4a3d      	ldr	r2, [pc, #244]	@ (800d100 <prvAddNewTaskToReadyList+0x108>)
 800d00c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800d00e:	4b3d      	ldr	r3, [pc, #244]	@ (800d104 <prvAddNewTaskToReadyList+0x10c>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d109      	bne.n	800d02a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800d016:	4a3b      	ldr	r2, [pc, #236]	@ (800d104 <prvAddNewTaskToReadyList+0x10c>)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d01c:	4b38      	ldr	r3, [pc, #224]	@ (800d100 <prvAddNewTaskToReadyList+0x108>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2b01      	cmp	r3, #1
 800d022:	d110      	bne.n	800d046 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800d024:	f000 fd3c 	bl	800daa0 <prvInitialiseTaskLists>
 800d028:	e00d      	b.n	800d046 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800d02a:	4b37      	ldr	r3, [pc, #220]	@ (800d108 <prvAddNewTaskToReadyList+0x110>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d109      	bne.n	800d046 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d032:	4b34      	ldr	r3, [pc, #208]	@ (800d104 <prvAddNewTaskToReadyList+0x10c>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d802      	bhi.n	800d046 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800d040:	4a30      	ldr	r2, [pc, #192]	@ (800d104 <prvAddNewTaskToReadyList+0x10c>)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800d046:	4b31      	ldr	r3, [pc, #196]	@ (800d10c <prvAddNewTaskToReadyList+0x114>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3301      	adds	r3, #1
 800d04c:	4a2f      	ldr	r2, [pc, #188]	@ (800d10c <prvAddNewTaskToReadyList+0x114>)
 800d04e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d050:	4b2e      	ldr	r3, [pc, #184]	@ (800d10c <prvAddNewTaskToReadyList+0x114>)
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d05c:	4b2c      	ldr	r3, [pc, #176]	@ (800d110 <prvAddNewTaskToReadyList+0x118>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	429a      	cmp	r2, r3
 800d062:	d903      	bls.n	800d06c <prvAddNewTaskToReadyList+0x74>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d068:	4a29      	ldr	r2, [pc, #164]	@ (800d110 <prvAddNewTaskToReadyList+0x118>)
 800d06a:	6013      	str	r3, [r2, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d070:	4928      	ldr	r1, [pc, #160]	@ (800d114 <prvAddNewTaskToReadyList+0x11c>)
 800d072:	4613      	mov	r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4413      	add	r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	440b      	add	r3, r1
 800d07c:	3304      	adds	r3, #4
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	60fb      	str	r3, [r7, #12]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	609a      	str	r2, [r3, #8]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	689a      	ldr	r2, [r3, #8]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	60da      	str	r2, [r3, #12]
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	3204      	adds	r2, #4
 800d098:	605a      	str	r2, [r3, #4]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	1d1a      	adds	r2, r3, #4
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	609a      	str	r2, [r3, #8]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	4413      	add	r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	4a19      	ldr	r2, [pc, #100]	@ (800d114 <prvAddNewTaskToReadyList+0x11c>)
 800d0b0:	441a      	add	r2, r3
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	615a      	str	r2, [r3, #20]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0ba:	4916      	ldr	r1, [pc, #88]	@ (800d114 <prvAddNewTaskToReadyList+0x11c>)
 800d0bc:	4613      	mov	r3, r2
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	4413      	add	r3, r2
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	440b      	add	r3, r1
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	1c59      	adds	r1, r3, #1
 800d0ca:	4812      	ldr	r0, [pc, #72]	@ (800d114 <prvAddNewTaskToReadyList+0x11c>)
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	4403      	add	r3, r0
 800d0d6:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800d0d8:	f001 fb02 	bl	800e6e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800d0dc:	4b0a      	ldr	r3, [pc, #40]	@ (800d108 <prvAddNewTaskToReadyList+0x110>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d008      	beq.n	800d0f6 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d0e4:	4b07      	ldr	r3, [pc, #28]	@ (800d104 <prvAddNewTaskToReadyList+0x10c>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d201      	bcs.n	800d0f6 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800d0f2:	f001 fad1 	bl	800e698 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d0f6:	bf00      	nop
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	20055908 	.word	0x20055908
 800d104:	20055434 	.word	0x20055434
 800d108:	20055914 	.word	0x20055914
 800d10c:	20055924 	.word	0x20055924
 800d110:	20055910 	.word	0x20055910
 800d114:	20055438 	.word	0x20055438

0800d118 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800d120:	2300      	movs	r3, #0
 800d122:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d010      	beq.n	800d14c <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800d12a:	4b0d      	ldr	r3, [pc, #52]	@ (800d160 <vTaskDelay+0x48>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d003      	beq.n	800d13a <vTaskDelay+0x22>
 800d132:	f001 fc01 	bl	800e938 <ulSetInterruptMask>
 800d136:	bf00      	nop
 800d138:	e7fd      	b.n	800d136 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800d13a:	f000 f86f 	bl	800d21c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d13e:	2100      	movs	r1, #0
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f000 ff55 	bl	800dff0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800d146:	f000 f877 	bl	800d238 <xTaskResumeAll>
 800d14a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d101      	bne.n	800d156 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800d152:	f001 faa1 	bl	800e698 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800d156:	bf00      	nop
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	20055930 	.word	0x20055930

0800d164 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b088      	sub	sp, #32
 800d168:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800d16a:	2300      	movs	r3, #0
 800d16c:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800d16e:	2300      	movs	r3, #0
 800d170:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d172:	463a      	mov	r2, r7
 800d174:	1d39      	adds	r1, r7, #4
 800d176:	f107 0308 	add.w	r3, r7, #8
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7fe fd78 	bl	800bc70 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800d180:	6839      	ldr	r1, [r7, #0]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	68ba      	ldr	r2, [r7, #8]
 800d186:	9202      	str	r2, [sp, #8]
 800d188:	9301      	str	r3, [sp, #4]
 800d18a:	2300      	movs	r3, #0
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	2300      	movs	r3, #0
 800d190:	460a      	mov	r2, r1
 800d192:	491b      	ldr	r1, [pc, #108]	@ (800d200 <vTaskStartScheduler+0x9c>)
 800d194:	481b      	ldr	r0, [pc, #108]	@ (800d204 <vTaskStartScheduler+0xa0>)
 800d196:	f7ff fe15 	bl	800cdc4 <xTaskCreateStatic>
 800d19a:	4603      	mov	r3, r0
 800d19c:	4a1a      	ldr	r2, [pc, #104]	@ (800d208 <vTaskStartScheduler+0xa4>)
 800d19e:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800d1a0:	4b19      	ldr	r3, [pc, #100]	@ (800d208 <vTaskStartScheduler+0xa4>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d002      	beq.n	800d1ae <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	60fb      	str	r3, [r7, #12]
 800d1ac:	e001      	b.n	800d1b2 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d102      	bne.n	800d1be <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800d1b8:	f000 ff88 	bl	800e0cc <xTimerCreateTimerTask>
 800d1bc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d10e      	bne.n	800d1e2 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800d1c4:	f001 fbb8 	bl	800e938 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800d1c8:	4b10      	ldr	r3, [pc, #64]	@ (800d20c <vTaskStartScheduler+0xa8>)
 800d1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ce:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d1d0:	4b0f      	ldr	r3, [pc, #60]	@ (800d210 <vTaskStartScheduler+0xac>)
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d1d6:	4b0f      	ldr	r3, [pc, #60]	@ (800d214 <vTaskStartScheduler+0xb0>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800d1dc:	f001 fb56 	bl	800e88c <xPortStartScheduler>
 800d1e0:	e007      	b.n	800d1f2 <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e8:	d103      	bne.n	800d1f2 <vTaskStartScheduler+0x8e>
 800d1ea:	f001 fba5 	bl	800e938 <ulSetInterruptMask>
 800d1ee:	bf00      	nop
 800d1f0:	e7fd      	b.n	800d1ee <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800d1f2:	4b09      	ldr	r3, [pc, #36]	@ (800d218 <vTaskStartScheduler+0xb4>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
}
 800d1f6:	bf00      	nop
 800d1f8:	3710      	adds	r7, #16
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	0801a0b0 	.word	0x0801a0b0
 800d204:	0800da81 	.word	0x0800da81
 800d208:	2005592c 	.word	0x2005592c
 800d20c:	20055928 	.word	0x20055928
 800d210:	20055914 	.word	0x20055914
 800d214:	2005590c 	.word	0x2005590c
 800d218:	20050020 	.word	0x20050020

0800d21c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d21c:	b480      	push	{r7}
 800d21e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d220:	4b04      	ldr	r3, [pc, #16]	@ (800d234 <vTaskSuspendAll+0x18>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	3301      	adds	r3, #1
 800d226:	4a03      	ldr	r2, [pc, #12]	@ (800d234 <vTaskSuspendAll+0x18>)
 800d228:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d22a:	bf00      	nop
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr
 800d234:	20055930 	.word	0x20055930

0800d238 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b086      	sub	sp, #24
 800d23c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d23e:	2300      	movs	r3, #0
 800d240:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d242:	2300      	movs	r3, #0
 800d244:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800d246:	4b6b      	ldr	r3, [pc, #428]	@ (800d3f4 <xTaskResumeAll+0x1bc>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d103      	bne.n	800d256 <xTaskResumeAll+0x1e>
 800d24e:	f001 fb73 	bl	800e938 <ulSetInterruptMask>
 800d252:	bf00      	nop
 800d254:	e7fd      	b.n	800d252 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d256:	f001 fa31 	bl	800e6bc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d25a:	4b66      	ldr	r3, [pc, #408]	@ (800d3f4 <xTaskResumeAll+0x1bc>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	3b01      	subs	r3, #1
 800d260:	4a64      	ldr	r2, [pc, #400]	@ (800d3f4 <xTaskResumeAll+0x1bc>)
 800d262:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d264:	4b63      	ldr	r3, [pc, #396]	@ (800d3f4 <xTaskResumeAll+0x1bc>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f040 80bb 	bne.w	800d3e4 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d26e:	4b62      	ldr	r3, [pc, #392]	@ (800d3f8 <xTaskResumeAll+0x1c0>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	f000 80b6 	beq.w	800d3e4 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d278:	e08b      	b.n	800d392 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d27a:	4b60      	ldr	r3, [pc, #384]	@ (800d3fc <xTaskResumeAll+0x1c4>)
 800d27c:	68db      	ldr	r3, [r3, #12]
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d286:	60bb      	str	r3, [r7, #8]
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	69db      	ldr	r3, [r3, #28]
 800d28c:	697a      	ldr	r2, [r7, #20]
 800d28e:	6a12      	ldr	r2, [r2, #32]
 800d290:	609a      	str	r2, [r3, #8]
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	6a1b      	ldr	r3, [r3, #32]
 800d296:	697a      	ldr	r2, [r7, #20]
 800d298:	69d2      	ldr	r2, [r2, #28]
 800d29a:	605a      	str	r2, [r3, #4]
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	685a      	ldr	r2, [r3, #4]
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	3318      	adds	r3, #24
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d103      	bne.n	800d2b0 <xTaskResumeAll+0x78>
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	6a1a      	ldr	r2, [r3, #32]
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	605a      	str	r2, [r3, #4]
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	629a      	str	r2, [r3, #40]	@ 0x28
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	1e5a      	subs	r2, r3, #1
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	695b      	ldr	r3, [r3, #20]
 800d2c4:	607b      	str	r3, [r7, #4]
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	697a      	ldr	r2, [r7, #20]
 800d2cc:	68d2      	ldr	r2, [r2, #12]
 800d2ce:	609a      	str	r2, [r3, #8]
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	68db      	ldr	r3, [r3, #12]
 800d2d4:	697a      	ldr	r2, [r7, #20]
 800d2d6:	6892      	ldr	r2, [r2, #8]
 800d2d8:	605a      	str	r2, [r3, #4]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	685a      	ldr	r2, [r3, #4]
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	3304      	adds	r3, #4
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d103      	bne.n	800d2ee <xTaskResumeAll+0xb6>
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	68da      	ldr	r2, [r3, #12]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	605a      	str	r2, [r3, #4]
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	615a      	str	r2, [r3, #20]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	1e5a      	subs	r2, r3, #1
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d302:	4b3f      	ldr	r3, [pc, #252]	@ (800d400 <xTaskResumeAll+0x1c8>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	429a      	cmp	r2, r3
 800d308:	d903      	bls.n	800d312 <xTaskResumeAll+0xda>
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d30e:	4a3c      	ldr	r2, [pc, #240]	@ (800d400 <xTaskResumeAll+0x1c8>)
 800d310:	6013      	str	r3, [r2, #0]
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d316:	493b      	ldr	r1, [pc, #236]	@ (800d404 <xTaskResumeAll+0x1cc>)
 800d318:	4613      	mov	r3, r2
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	4413      	add	r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	440b      	add	r3, r1
 800d322:	3304      	adds	r3, #4
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	603b      	str	r3, [r7, #0]
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	683a      	ldr	r2, [r7, #0]
 800d32c:	609a      	str	r2, [r3, #8]
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	689a      	ldr	r2, [r3, #8]
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	60da      	str	r2, [r3, #12]
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	697a      	ldr	r2, [r7, #20]
 800d33c:	3204      	adds	r2, #4
 800d33e:	605a      	str	r2, [r3, #4]
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	1d1a      	adds	r2, r3, #4
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	609a      	str	r2, [r3, #8]
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d34c:	4613      	mov	r3, r2
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	4413      	add	r3, r2
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	4a2b      	ldr	r2, [pc, #172]	@ (800d404 <xTaskResumeAll+0x1cc>)
 800d356:	441a      	add	r2, r3
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	615a      	str	r2, [r3, #20]
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d360:	4928      	ldr	r1, [pc, #160]	@ (800d404 <xTaskResumeAll+0x1cc>)
 800d362:	4613      	mov	r3, r2
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4413      	add	r3, r2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	440b      	add	r3, r1
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	1c59      	adds	r1, r3, #1
 800d370:	4824      	ldr	r0, [pc, #144]	@ (800d404 <xTaskResumeAll+0x1cc>)
 800d372:	4613      	mov	r3, r2
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	4413      	add	r3, r2
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	4403      	add	r3, r0
 800d37c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d382:	4b21      	ldr	r3, [pc, #132]	@ (800d408 <xTaskResumeAll+0x1d0>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d388:	429a      	cmp	r2, r3
 800d38a:	d302      	bcc.n	800d392 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800d38c:	4b1f      	ldr	r3, [pc, #124]	@ (800d40c <xTaskResumeAll+0x1d4>)
 800d38e:	2201      	movs	r2, #1
 800d390:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d392:	4b1a      	ldr	r3, [pc, #104]	@ (800d3fc <xTaskResumeAll+0x1c4>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	f47f af6f 	bne.w	800d27a <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d001      	beq.n	800d3a6 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800d3a2:	f000 fc13 	bl	800dbcc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d3a6:	4b1a      	ldr	r3, [pc, #104]	@ (800d410 <xTaskResumeAll+0x1d8>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d010      	beq.n	800d3d4 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800d3b2:	f000 f85d 	bl	800d470 <xTaskIncrementTick>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d002      	beq.n	800d3c2 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800d3bc:	4b13      	ldr	r3, [pc, #76]	@ (800d40c <xTaskResumeAll+0x1d4>)
 800d3be:	2201      	movs	r2, #1
 800d3c0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	3b01      	subs	r3, #1
 800d3c6:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d1f1      	bne.n	800d3b2 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800d3ce:	4b10      	ldr	r3, [pc, #64]	@ (800d410 <xTaskResumeAll+0x1d8>)
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800d3d4:	4b0d      	ldr	r3, [pc, #52]	@ (800d40c <xTaskResumeAll+0x1d4>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d003      	beq.n	800d3e4 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800d3e0:	f001 f95a 	bl	800e698 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800d3e4:	f001 f97c 	bl	800e6e0 <vPortExitCritical>

    return xAlreadyYielded;
 800d3e8:	693b      	ldr	r3, [r7, #16]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3718      	adds	r7, #24
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	20055930 	.word	0x20055930
 800d3f8:	20055908 	.word	0x20055908
 800d3fc:	200558c8 	.word	0x200558c8
 800d400:	20055910 	.word	0x20055910
 800d404:	20055438 	.word	0x20055438
 800d408:	20055434 	.word	0x20055434
 800d40c:	2005591c 	.word	0x2005591c
 800d410:	20055918 	.word	0x20055918

0800d414 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800d41a:	4b05      	ldr	r3, [pc, #20]	@ (800d430 <xTaskGetTickCount+0x1c>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800d420:	687b      	ldr	r3, [r7, #4]
}
 800d422:	4618      	mov	r0, r3
 800d424:	370c      	adds	r7, #12
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	2005590c 	.word	0x2005590c

0800d434 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d43a:	2300      	movs	r3, #0
 800d43c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800d43e:	4b05      	ldr	r3, [pc, #20]	@ (800d454 <xTaskGetTickCountFromISR+0x20>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800d444:	683b      	ldr	r3, [r7, #0]
}
 800d446:	4618      	mov	r0, r3
 800d448:	370c      	adds	r7, #12
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop
 800d454:	2005590c 	.word	0x2005590c

0800d458 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800d458:	b480      	push	{r7}
 800d45a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800d45c:	4b03      	ldr	r3, [pc, #12]	@ (800d46c <uxTaskGetNumberOfTasks+0x14>)
 800d45e:	681b      	ldr	r3, [r3, #0]
}
 800d460:	4618      	mov	r0, r3
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr
 800d46a:	bf00      	nop
 800d46c:	20055908 	.word	0x20055908

0800d470 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b088      	sub	sp, #32
 800d474:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d476:	2300      	movs	r3, #0
 800d478:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d47a:	4b7a      	ldr	r3, [pc, #488]	@ (800d664 <xTaskIncrementTick+0x1f4>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	f040 80e6 	bne.w	800d650 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d484:	4b78      	ldr	r3, [pc, #480]	@ (800d668 <xTaskIncrementTick+0x1f8>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	3301      	adds	r3, #1
 800d48a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d48c:	4a76      	ldr	r2, [pc, #472]	@ (800d668 <xTaskIncrementTick+0x1f8>)
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d119      	bne.n	800d4cc <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 800d498:	4b74      	ldr	r3, [pc, #464]	@ (800d66c <xTaskIncrementTick+0x1fc>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d003      	beq.n	800d4aa <xTaskIncrementTick+0x3a>
 800d4a2:	f001 fa49 	bl	800e938 <ulSetInterruptMask>
 800d4a6:	bf00      	nop
 800d4a8:	e7fd      	b.n	800d4a6 <xTaskIncrementTick+0x36>
 800d4aa:	4b70      	ldr	r3, [pc, #448]	@ (800d66c <xTaskIncrementTick+0x1fc>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	617b      	str	r3, [r7, #20]
 800d4b0:	4b6f      	ldr	r3, [pc, #444]	@ (800d670 <xTaskIncrementTick+0x200>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a6d      	ldr	r2, [pc, #436]	@ (800d66c <xTaskIncrementTick+0x1fc>)
 800d4b6:	6013      	str	r3, [r2, #0]
 800d4b8:	4a6d      	ldr	r2, [pc, #436]	@ (800d670 <xTaskIncrementTick+0x200>)
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	6013      	str	r3, [r2, #0]
 800d4be:	4b6d      	ldr	r3, [pc, #436]	@ (800d674 <xTaskIncrementTick+0x204>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	4a6b      	ldr	r2, [pc, #428]	@ (800d674 <xTaskIncrementTick+0x204>)
 800d4c6:	6013      	str	r3, [r2, #0]
 800d4c8:	f000 fb80 	bl	800dbcc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800d4cc:	4b6a      	ldr	r3, [pc, #424]	@ (800d678 <xTaskIncrementTick+0x208>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	69ba      	ldr	r2, [r7, #24]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	f0c0 80a7 	bcc.w	800d626 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4d8:	4b64      	ldr	r3, [pc, #400]	@ (800d66c <xTaskIncrementTick+0x1fc>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d104      	bne.n	800d4ec <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4e2:	4b65      	ldr	r3, [pc, #404]	@ (800d678 <xTaskIncrementTick+0x208>)
 800d4e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e8:	601a      	str	r2, [r3, #0]
                    break;
 800d4ea:	e09c      	b.n	800d626 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4ec:	4b5f      	ldr	r3, [pc, #380]	@ (800d66c <xTaskIncrementTick+0x1fc>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800d4fc:	69ba      	ldr	r2, [r7, #24]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	429a      	cmp	r2, r3
 800d502:	d203      	bcs.n	800d50c <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800d504:	4a5c      	ldr	r2, [pc, #368]	@ (800d678 <xTaskIncrementTick+0x208>)
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800d50a:	e08c      	b.n	800d626 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	695b      	ldr	r3, [r3, #20]
 800d510:	60bb      	str	r3, [r7, #8]
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	693a      	ldr	r2, [r7, #16]
 800d518:	68d2      	ldr	r2, [r2, #12]
 800d51a:	609a      	str	r2, [r3, #8]
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	693a      	ldr	r2, [r7, #16]
 800d522:	6892      	ldr	r2, [r2, #8]
 800d524:	605a      	str	r2, [r3, #4]
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	685a      	ldr	r2, [r3, #4]
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	3304      	adds	r3, #4
 800d52e:	429a      	cmp	r2, r3
 800d530:	d103      	bne.n	800d53a <xTaskIncrementTick+0xca>
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	68da      	ldr	r2, [r3, #12]
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	605a      	str	r2, [r3, #4]
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	2200      	movs	r2, #0
 800d53e:	615a      	str	r2, [r3, #20]
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	1e5a      	subs	r2, r3, #1
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d01e      	beq.n	800d590 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d556:	607b      	str	r3, [r7, #4]
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	69db      	ldr	r3, [r3, #28]
 800d55c:	693a      	ldr	r2, [r7, #16]
 800d55e:	6a12      	ldr	r2, [r2, #32]
 800d560:	609a      	str	r2, [r3, #8]
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	6a1b      	ldr	r3, [r3, #32]
 800d566:	693a      	ldr	r2, [r7, #16]
 800d568:	69d2      	ldr	r2, [r2, #28]
 800d56a:	605a      	str	r2, [r3, #4]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	685a      	ldr	r2, [r3, #4]
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	3318      	adds	r3, #24
 800d574:	429a      	cmp	r2, r3
 800d576:	d103      	bne.n	800d580 <xTaskIncrementTick+0x110>
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	6a1a      	ldr	r2, [r3, #32]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	605a      	str	r2, [r3, #4]
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	2200      	movs	r2, #0
 800d584:	629a      	str	r2, [r3, #40]	@ 0x28
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	1e5a      	subs	r2, r3, #1
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d594:	4b39      	ldr	r3, [pc, #228]	@ (800d67c <xTaskIncrementTick+0x20c>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d903      	bls.n	800d5a4 <xTaskIncrementTick+0x134>
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5a0:	4a36      	ldr	r2, [pc, #216]	@ (800d67c <xTaskIncrementTick+0x20c>)
 800d5a2:	6013      	str	r3, [r2, #0]
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5a8:	4935      	ldr	r1, [pc, #212]	@ (800d680 <xTaskIncrementTick+0x210>)
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	4413      	add	r3, r2
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	440b      	add	r3, r1
 800d5b4:	3304      	adds	r3, #4
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	603b      	str	r3, [r7, #0]
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	683a      	ldr	r2, [r7, #0]
 800d5be:	609a      	str	r2, [r3, #8]
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	689a      	ldr	r2, [r3, #8]
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	60da      	str	r2, [r3, #12]
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	689b      	ldr	r3, [r3, #8]
 800d5cc:	693a      	ldr	r2, [r7, #16]
 800d5ce:	3204      	adds	r2, #4
 800d5d0:	605a      	str	r2, [r3, #4]
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	1d1a      	adds	r2, r3, #4
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	609a      	str	r2, [r3, #8]
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5de:	4613      	mov	r3, r2
 800d5e0:	009b      	lsls	r3, r3, #2
 800d5e2:	4413      	add	r3, r2
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	4a26      	ldr	r2, [pc, #152]	@ (800d680 <xTaskIncrementTick+0x210>)
 800d5e8:	441a      	add	r2, r3
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	615a      	str	r2, [r3, #20]
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5f2:	4923      	ldr	r1, [pc, #140]	@ (800d680 <xTaskIncrementTick+0x210>)
 800d5f4:	4613      	mov	r3, r2
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	4413      	add	r3, r2
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	440b      	add	r3, r1
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	1c59      	adds	r1, r3, #1
 800d602:	481f      	ldr	r0, [pc, #124]	@ (800d680 <xTaskIncrementTick+0x210>)
 800d604:	4613      	mov	r3, r2
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	4413      	add	r3, r2
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	4403      	add	r3, r0
 800d60e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d614:	4b1b      	ldr	r3, [pc, #108]	@ (800d684 <xTaskIncrementTick+0x214>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d61a:	429a      	cmp	r2, r3
 800d61c:	f67f af5c 	bls.w	800d4d8 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800d620:	2301      	movs	r3, #1
 800d622:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d624:	e758      	b.n	800d4d8 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d626:	4b17      	ldr	r3, [pc, #92]	@ (800d684 <xTaskIncrementTick+0x214>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d62c:	4914      	ldr	r1, [pc, #80]	@ (800d680 <xTaskIncrementTick+0x210>)
 800d62e:	4613      	mov	r3, r2
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	4413      	add	r3, r2
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	440b      	add	r3, r1
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d901      	bls.n	800d642 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800d63e:	2301      	movs	r3, #1
 800d640:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800d642:	4b11      	ldr	r3, [pc, #68]	@ (800d688 <xTaskIncrementTick+0x218>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d007      	beq.n	800d65a <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800d64a:	2301      	movs	r3, #1
 800d64c:	61fb      	str	r3, [r7, #28]
 800d64e:	e004      	b.n	800d65a <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800d650:	4b0e      	ldr	r3, [pc, #56]	@ (800d68c <xTaskIncrementTick+0x21c>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	3301      	adds	r3, #1
 800d656:	4a0d      	ldr	r2, [pc, #52]	@ (800d68c <xTaskIncrementTick+0x21c>)
 800d658:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800d65a:	69fb      	ldr	r3, [r7, #28]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3720      	adds	r7, #32
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	20055930 	.word	0x20055930
 800d668:	2005590c 	.word	0x2005590c
 800d66c:	200558c0 	.word	0x200558c0
 800d670:	200558c4 	.word	0x200558c4
 800d674:	20055920 	.word	0x20055920
 800d678:	20055928 	.word	0x20055928
 800d67c:	20055910 	.word	0x20055910
 800d680:	20055438 	.word	0x20055438
 800d684:	20055434 	.word	0x20055434
 800d688:	2005591c 	.word	0x2005591c
 800d68c:	20055918 	.word	0x20055918

0800d690 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d696:	4b23      	ldr	r3, [pc, #140]	@ (800d724 <vTaskSwitchContext+0x94>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d003      	beq.n	800d6a6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800d69e:	4b22      	ldr	r3, [pc, #136]	@ (800d728 <vTaskSwitchContext+0x98>)
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800d6a4:	e03a      	b.n	800d71c <vTaskSwitchContext+0x8c>
        xYieldPending = pdFALSE;
 800d6a6:	4b20      	ldr	r3, [pc, #128]	@ (800d728 <vTaskSwitchContext+0x98>)
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ac:	4b1f      	ldr	r3, [pc, #124]	@ (800d72c <vTaskSwitchContext+0x9c>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	607b      	str	r3, [r7, #4]
 800d6b2:	e009      	b.n	800d6c8 <vTaskSwitchContext+0x38>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d103      	bne.n	800d6c2 <vTaskSwitchContext+0x32>
 800d6ba:	f001 f93d 	bl	800e938 <ulSetInterruptMask>
 800d6be:	bf00      	nop
 800d6c0:	e7fd      	b.n	800d6be <vTaskSwitchContext+0x2e>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	3b01      	subs	r3, #1
 800d6c6:	607b      	str	r3, [r7, #4]
 800d6c8:	4919      	ldr	r1, [pc, #100]	@ (800d730 <vTaskSwitchContext+0xa0>)
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	4413      	add	r3, r2
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	440b      	add	r3, r1
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d0eb      	beq.n	800d6b4 <vTaskSwitchContext+0x24>
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	4413      	add	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	4a12      	ldr	r2, [pc, #72]	@ (800d730 <vTaskSwitchContext+0xa0>)
 800d6e8:	4413      	add	r3, r2
 800d6ea:	603b      	str	r3, [r7, #0]
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	685a      	ldr	r2, [r3, #4]
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	605a      	str	r2, [r3, #4]
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	685a      	ldr	r2, [r3, #4]
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	3308      	adds	r3, #8
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d104      	bne.n	800d70c <vTaskSwitchContext+0x7c>
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	685a      	ldr	r2, [r3, #4]
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	605a      	str	r2, [r3, #4]
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	68db      	ldr	r3, [r3, #12]
 800d712:	4a08      	ldr	r2, [pc, #32]	@ (800d734 <vTaskSwitchContext+0xa4>)
 800d714:	6013      	str	r3, [r2, #0]
 800d716:	4a05      	ldr	r2, [pc, #20]	@ (800d72c <vTaskSwitchContext+0x9c>)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6013      	str	r3, [r2, #0]
}
 800d71c:	bf00      	nop
 800d71e:	3708      	adds	r7, #8
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	20055930 	.word	0x20055930
 800d728:	2005591c 	.word	0x2005591c
 800d72c:	20055910 	.word	0x20055910
 800d730:	20055438 	.word	0x20055438
 800d734:	20055434 	.word	0x20055434

0800d738 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d103      	bne.n	800d750 <vTaskPlaceOnEventList+0x18>
 800d748:	f001 f8f6 	bl	800e938 <ulSetInterruptMask>
 800d74c:	bf00      	nop
 800d74e:	e7fd      	b.n	800d74c <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d750:	4b07      	ldr	r3, [pc, #28]	@ (800d770 <vTaskPlaceOnEventList+0x38>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	3318      	adds	r3, #24
 800d756:	4619      	mov	r1, r3
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f7fe faea 	bl	800bd32 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d75e:	2101      	movs	r1, #1
 800d760:	6838      	ldr	r0, [r7, #0]
 800d762:	f000 fc45 	bl	800dff0 <prvAddCurrentTaskToDelayedList>
}
 800d766:	bf00      	nop
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	20055434 	.word	0x20055434

0800d774 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800d774:	b580      	push	{r7, lr}
 800d776:	b086      	sub	sp, #24
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d103      	bne.n	800d78e <vTaskPlaceOnEventListRestricted+0x1a>
 800d786:	f001 f8d7 	bl	800e938 <ulSetInterruptMask>
 800d78a:	bf00      	nop
 800d78c:	e7fd      	b.n	800d78a <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	617b      	str	r3, [r7, #20]
 800d794:	4b15      	ldr	r3, [pc, #84]	@ (800d7ec <vTaskPlaceOnEventListRestricted+0x78>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	697a      	ldr	r2, [r7, #20]
 800d79a:	61da      	str	r2, [r3, #28]
 800d79c:	4b13      	ldr	r3, [pc, #76]	@ (800d7ec <vTaskPlaceOnEventListRestricted+0x78>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	697a      	ldr	r2, [r7, #20]
 800d7a2:	6892      	ldr	r2, [r2, #8]
 800d7a4:	621a      	str	r2, [r3, #32]
 800d7a6:	4b11      	ldr	r3, [pc, #68]	@ (800d7ec <vTaskPlaceOnEventListRestricted+0x78>)
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	3218      	adds	r2, #24
 800d7b0:	605a      	str	r2, [r3, #4]
 800d7b2:	4b0e      	ldr	r3, [pc, #56]	@ (800d7ec <vTaskPlaceOnEventListRestricted+0x78>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f103 0218 	add.w	r2, r3, #24
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	609a      	str	r2, [r3, #8]
 800d7be:	4b0b      	ldr	r3, [pc, #44]	@ (800d7ec <vTaskPlaceOnEventListRestricted+0x78>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	629a      	str	r2, [r3, #40]	@ 0x28
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	1c5a      	adds	r2, r3, #1
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d002      	beq.n	800d7dc <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800d7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d7da:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d7dc:	6879      	ldr	r1, [r7, #4]
 800d7de:	68b8      	ldr	r0, [r7, #8]
 800d7e0:	f000 fc06 	bl	800dff0 <prvAddCurrentTaskToDelayedList>
    }
 800d7e4:	bf00      	nop
 800d7e6:	3718      	adds	r7, #24
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	20055434 	.word	0x20055434

0800d7f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b088      	sub	sp, #32
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	68db      	ldr	r3, [r3, #12]
 800d7fe:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d103      	bne.n	800d80e <xTaskRemoveFromEventList+0x1e>
 800d806:	f001 f897 	bl	800e938 <ulSetInterruptMask>
 800d80a:	bf00      	nop
 800d80c:	e7fd      	b.n	800d80a <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d812:	617b      	str	r3, [r7, #20]
 800d814:	69bb      	ldr	r3, [r7, #24]
 800d816:	69db      	ldr	r3, [r3, #28]
 800d818:	69ba      	ldr	r2, [r7, #24]
 800d81a:	6a12      	ldr	r2, [r2, #32]
 800d81c:	609a      	str	r2, [r3, #8]
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	6a1b      	ldr	r3, [r3, #32]
 800d822:	69ba      	ldr	r2, [r7, #24]
 800d824:	69d2      	ldr	r2, [r2, #28]
 800d826:	605a      	str	r2, [r3, #4]
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	685a      	ldr	r2, [r3, #4]
 800d82c:	69bb      	ldr	r3, [r7, #24]
 800d82e:	3318      	adds	r3, #24
 800d830:	429a      	cmp	r2, r3
 800d832:	d103      	bne.n	800d83c <xTaskRemoveFromEventList+0x4c>
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	6a1a      	ldr	r2, [r3, #32]
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	605a      	str	r2, [r3, #4]
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	2200      	movs	r2, #0
 800d840:	629a      	str	r2, [r3, #40]	@ 0x28
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	1e5a      	subs	r2, r3, #1
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d84c:	4b49      	ldr	r3, [pc, #292]	@ (800d974 <xTaskRemoveFromEventList+0x184>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d15f      	bne.n	800d914 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800d854:	69bb      	ldr	r3, [r7, #24]
 800d856:	695b      	ldr	r3, [r3, #20]
 800d858:	60fb      	str	r3, [r7, #12]
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	689b      	ldr	r3, [r3, #8]
 800d85e:	69ba      	ldr	r2, [r7, #24]
 800d860:	68d2      	ldr	r2, [r2, #12]
 800d862:	609a      	str	r2, [r3, #8]
 800d864:	69bb      	ldr	r3, [r7, #24]
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	69ba      	ldr	r2, [r7, #24]
 800d86a:	6892      	ldr	r2, [r2, #8]
 800d86c:	605a      	str	r2, [r3, #4]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	685a      	ldr	r2, [r3, #4]
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	3304      	adds	r3, #4
 800d876:	429a      	cmp	r2, r3
 800d878:	d103      	bne.n	800d882 <xTaskRemoveFromEventList+0x92>
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	68da      	ldr	r2, [r3, #12]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	605a      	str	r2, [r3, #4]
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	2200      	movs	r2, #0
 800d886:	615a      	str	r2, [r3, #20]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	1e5a      	subs	r2, r3, #1
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d896:	4b38      	ldr	r3, [pc, #224]	@ (800d978 <xTaskRemoveFromEventList+0x188>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d903      	bls.n	800d8a6 <xTaskRemoveFromEventList+0xb6>
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8a2:	4a35      	ldr	r2, [pc, #212]	@ (800d978 <xTaskRemoveFromEventList+0x188>)
 800d8a4:	6013      	str	r3, [r2, #0]
 800d8a6:	69bb      	ldr	r3, [r7, #24]
 800d8a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8aa:	4934      	ldr	r1, [pc, #208]	@ (800d97c <xTaskRemoveFromEventList+0x18c>)
 800d8ac:	4613      	mov	r3, r2
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	4413      	add	r3, r2
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	440b      	add	r3, r1
 800d8b6:	3304      	adds	r3, #4
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	60bb      	str	r3, [r7, #8]
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	609a      	str	r2, [r3, #8]
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	689a      	ldr	r2, [r3, #8]
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	60da      	str	r2, [r3, #12]
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	689b      	ldr	r3, [r3, #8]
 800d8ce:	69ba      	ldr	r2, [r7, #24]
 800d8d0:	3204      	adds	r2, #4
 800d8d2:	605a      	str	r2, [r3, #4]
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	1d1a      	adds	r2, r3, #4
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	609a      	str	r2, [r3, #8]
 800d8dc:	69bb      	ldr	r3, [r7, #24]
 800d8de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8e0:	4613      	mov	r3, r2
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	4413      	add	r3, r2
 800d8e6:	009b      	lsls	r3, r3, #2
 800d8e8:	4a24      	ldr	r2, [pc, #144]	@ (800d97c <xTaskRemoveFromEventList+0x18c>)
 800d8ea:	441a      	add	r2, r3
 800d8ec:	69bb      	ldr	r3, [r7, #24]
 800d8ee:	615a      	str	r2, [r3, #20]
 800d8f0:	69bb      	ldr	r3, [r7, #24]
 800d8f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8f4:	4921      	ldr	r1, [pc, #132]	@ (800d97c <xTaskRemoveFromEventList+0x18c>)
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	4413      	add	r3, r2
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	440b      	add	r3, r1
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	1c59      	adds	r1, r3, #1
 800d904:	481d      	ldr	r0, [pc, #116]	@ (800d97c <xTaskRemoveFromEventList+0x18c>)
 800d906:	4613      	mov	r3, r2
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	4413      	add	r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	4403      	add	r3, r0
 800d910:	6019      	str	r1, [r3, #0]
 800d912:	e01b      	b.n	800d94c <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d914:	4b1a      	ldr	r3, [pc, #104]	@ (800d980 <xTaskRemoveFromEventList+0x190>)
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	613b      	str	r3, [r7, #16]
 800d91a:	69bb      	ldr	r3, [r7, #24]
 800d91c:	693a      	ldr	r2, [r7, #16]
 800d91e:	61da      	str	r2, [r3, #28]
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	689a      	ldr	r2, [r3, #8]
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	621a      	str	r2, [r3, #32]
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	69ba      	ldr	r2, [r7, #24]
 800d92e:	3218      	adds	r2, #24
 800d930:	605a      	str	r2, [r3, #4]
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	f103 0218 	add.w	r2, r3, #24
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	609a      	str	r2, [r3, #8]
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	4a10      	ldr	r2, [pc, #64]	@ (800d980 <xTaskRemoveFromEventList+0x190>)
 800d940:	629a      	str	r2, [r3, #40]	@ 0x28
 800d942:	4b0f      	ldr	r3, [pc, #60]	@ (800d980 <xTaskRemoveFromEventList+0x190>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	3301      	adds	r3, #1
 800d948:	4a0d      	ldr	r2, [pc, #52]	@ (800d980 <xTaskRemoveFromEventList+0x190>)
 800d94a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d950:	4b0c      	ldr	r3, [pc, #48]	@ (800d984 <xTaskRemoveFromEventList+0x194>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d956:	429a      	cmp	r2, r3
 800d958:	d905      	bls.n	800d966 <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800d95a:	2301      	movs	r3, #1
 800d95c:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800d95e:	4b0a      	ldr	r3, [pc, #40]	@ (800d988 <xTaskRemoveFromEventList+0x198>)
 800d960:	2201      	movs	r2, #1
 800d962:	601a      	str	r2, [r3, #0]
 800d964:	e001      	b.n	800d96a <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800d966:	2300      	movs	r3, #0
 800d968:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800d96a:	69fb      	ldr	r3, [r7, #28]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3720      	adds	r7, #32
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	20055930 	.word	0x20055930
 800d978:	20055910 	.word	0x20055910
 800d97c:	20055438 	.word	0x20055438
 800d980:	200558c8 	.word	0x200558c8
 800d984:	20055434 	.word	0x20055434
 800d988:	2005591c 	.word	0x2005591c

0800d98c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d994:	4b06      	ldr	r3, [pc, #24]	@ (800d9b0 <vTaskInternalSetTimeOutState+0x24>)
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800d99c:	4b05      	ldr	r3, [pc, #20]	@ (800d9b4 <vTaskInternalSetTimeOutState+0x28>)
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	605a      	str	r2, [r3, #4]
}
 800d9a4:	bf00      	nop
 800d9a6:	370c      	adds	r7, #12
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr
 800d9b0:	20055920 	.word	0x20055920
 800d9b4:	2005590c 	.word	0x2005590c

0800d9b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b086      	sub	sp, #24
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d103      	bne.n	800d9d0 <xTaskCheckForTimeOut+0x18>
 800d9c8:	f000 ffb6 	bl	800e938 <ulSetInterruptMask>
 800d9cc:	bf00      	nop
 800d9ce:	e7fd      	b.n	800d9cc <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d103      	bne.n	800d9de <xTaskCheckForTimeOut+0x26>
 800d9d6:	f000 ffaf 	bl	800e938 <ulSetInterruptMask>
 800d9da:	bf00      	nop
 800d9dc:	e7fd      	b.n	800d9da <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800d9de:	f000 fe6d 	bl	800e6bc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800d9e2:	4b1f      	ldr	r3, [pc, #124]	@ (800da60 <xTaskCheckForTimeOut+0xa8>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	693a      	ldr	r2, [r7, #16]
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9fa:	d102      	bne.n	800da02 <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	617b      	str	r3, [r7, #20]
 800da00:	e026      	b.n	800da50 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	4b17      	ldr	r3, [pc, #92]	@ (800da64 <xTaskCheckForTimeOut+0xac>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d00a      	beq.n	800da24 <xTaskCheckForTimeOut+0x6c>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	693a      	ldr	r2, [r7, #16]
 800da14:	429a      	cmp	r2, r3
 800da16:	d305      	bcc.n	800da24 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800da18:	2301      	movs	r3, #1
 800da1a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	2200      	movs	r2, #0
 800da20:	601a      	str	r2, [r3, #0]
 800da22:	e015      	b.n	800da50 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d20b      	bcs.n	800da46 <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	681a      	ldr	r2, [r3, #0]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	1ad2      	subs	r2, r2, r3
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f7ff ffa6 	bl	800d98c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800da40:	2300      	movs	r3, #0
 800da42:	617b      	str	r3, [r7, #20]
 800da44:	e004      	b.n	800da50 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	2200      	movs	r2, #0
 800da4a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800da4c:	2301      	movs	r3, #1
 800da4e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800da50:	f000 fe46 	bl	800e6e0 <vPortExitCritical>

    return xReturn;
 800da54:	697b      	ldr	r3, [r7, #20]
}
 800da56:	4618      	mov	r0, r3
 800da58:	3718      	adds	r7, #24
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	2005590c 	.word	0x2005590c
 800da64:	20055920 	.word	0x20055920

0800da68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800da68:	b480      	push	{r7}
 800da6a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800da6c:	4b03      	ldr	r3, [pc, #12]	@ (800da7c <vTaskMissedYield+0x14>)
 800da6e:	2201      	movs	r2, #1
 800da70:	601a      	str	r2, [r3, #0]
}
 800da72:	bf00      	nop
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr
 800da7c:	2005591c 	.word	0x2005591c

0800da80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b082      	sub	sp, #8
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800da88:	f000 f84a 	bl	800db20 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800da8c:	4b03      	ldr	r3, [pc, #12]	@ (800da9c <prvIdleTask+0x1c>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2b01      	cmp	r3, #1
 800da92:	d9f9      	bls.n	800da88 <prvIdleTask+0x8>
            {
                taskYIELD();
 800da94:	f000 fe00 	bl	800e698 <vPortYield>
        prvCheckTasksWaitingTermination();
 800da98:	e7f6      	b.n	800da88 <prvIdleTask+0x8>
 800da9a:	bf00      	nop
 800da9c:	20055438 	.word	0x20055438

0800daa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800daa6:	2300      	movs	r3, #0
 800daa8:	607b      	str	r3, [r7, #4]
 800daaa:	e00c      	b.n	800dac6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	4613      	mov	r3, r2
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	4413      	add	r3, r2
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	4a12      	ldr	r2, [pc, #72]	@ (800db00 <prvInitialiseTaskLists+0x60>)
 800dab8:	4413      	add	r3, r2
 800daba:	4618      	mov	r0, r3
 800dabc:	f7fe f90c 	bl	800bcd8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	3301      	adds	r3, #1
 800dac4:	607b      	str	r3, [r7, #4]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2b37      	cmp	r3, #55	@ 0x37
 800daca:	d9ef      	bls.n	800daac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800dacc:	480d      	ldr	r0, [pc, #52]	@ (800db04 <prvInitialiseTaskLists+0x64>)
 800dace:	f7fe f903 	bl	800bcd8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800dad2:	480d      	ldr	r0, [pc, #52]	@ (800db08 <prvInitialiseTaskLists+0x68>)
 800dad4:	f7fe f900 	bl	800bcd8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800dad8:	480c      	ldr	r0, [pc, #48]	@ (800db0c <prvInitialiseTaskLists+0x6c>)
 800dada:	f7fe f8fd 	bl	800bcd8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800dade:	480c      	ldr	r0, [pc, #48]	@ (800db10 <prvInitialiseTaskLists+0x70>)
 800dae0:	f7fe f8fa 	bl	800bcd8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800dae4:	480b      	ldr	r0, [pc, #44]	@ (800db14 <prvInitialiseTaskLists+0x74>)
 800dae6:	f7fe f8f7 	bl	800bcd8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800daea:	4b0b      	ldr	r3, [pc, #44]	@ (800db18 <prvInitialiseTaskLists+0x78>)
 800daec:	4a05      	ldr	r2, [pc, #20]	@ (800db04 <prvInitialiseTaskLists+0x64>)
 800daee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800daf0:	4b0a      	ldr	r3, [pc, #40]	@ (800db1c <prvInitialiseTaskLists+0x7c>)
 800daf2:	4a05      	ldr	r2, [pc, #20]	@ (800db08 <prvInitialiseTaskLists+0x68>)
 800daf4:	601a      	str	r2, [r3, #0]
}
 800daf6:	bf00      	nop
 800daf8:	3708      	adds	r7, #8
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	20055438 	.word	0x20055438
 800db04:	20055898 	.word	0x20055898
 800db08:	200558ac 	.word	0x200558ac
 800db0c:	200558c8 	.word	0x200558c8
 800db10:	200558dc 	.word	0x200558dc
 800db14:	200558f4 	.word	0x200558f4
 800db18:	200558c0 	.word	0x200558c0
 800db1c:	200558c4 	.word	0x200558c4

0800db20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db26:	e019      	b.n	800db5c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800db28:	f000 fdc8 	bl	800e6bc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db2c:	4b10      	ldr	r3, [pc, #64]	@ (800db70 <prvCheckTasksWaitingTermination+0x50>)
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	3304      	adds	r3, #4
 800db38:	4618      	mov	r0, r3
 800db3a:	f7fe f933 	bl	800bda4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800db3e:	4b0d      	ldr	r3, [pc, #52]	@ (800db74 <prvCheckTasksWaitingTermination+0x54>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	3b01      	subs	r3, #1
 800db44:	4a0b      	ldr	r2, [pc, #44]	@ (800db74 <prvCheckTasksWaitingTermination+0x54>)
 800db46:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800db48:	4b0b      	ldr	r3, [pc, #44]	@ (800db78 <prvCheckTasksWaitingTermination+0x58>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	3b01      	subs	r3, #1
 800db4e:	4a0a      	ldr	r2, [pc, #40]	@ (800db78 <prvCheckTasksWaitingTermination+0x58>)
 800db50:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800db52:	f000 fdc5 	bl	800e6e0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 f810 	bl	800db7c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db5c:	4b06      	ldr	r3, [pc, #24]	@ (800db78 <prvCheckTasksWaitingTermination+0x58>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d1e1      	bne.n	800db28 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800db64:	bf00      	nop
 800db66:	bf00      	nop
 800db68:	3708      	adds	r7, #8
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	200558dc 	.word	0x200558dc
 800db74:	20055908 	.word	0x20055908
 800db78:	200558f0 	.word	0x200558f0

0800db7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b082      	sub	sp, #8
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d108      	bne.n	800dba0 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db92:	4618      	mov	r0, r3
 800db94:	f000 ffdc 	bl	800eb50 <vPortFree>
                vPortFree( pxTCB );
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 ffd9 	bl	800eb50 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800db9e:	e011      	b.n	800dbc4 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d103      	bne.n	800dbb2 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 ffd0 	bl	800eb50 <vPortFree>
    }
 800dbb0:	e008      	b.n	800dbc4 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800dbb8:	2b02      	cmp	r3, #2
 800dbba:	d003      	beq.n	800dbc4 <prvDeleteTCB+0x48>
 800dbbc:	f000 febc 	bl	800e938 <ulSetInterruptMask>
 800dbc0:	bf00      	nop
 800dbc2:	e7fd      	b.n	800dbc0 <prvDeleteTCB+0x44>
    }
 800dbc4:	bf00      	nop
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dbcc:	b480      	push	{r7}
 800dbce:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbd0:	4b0a      	ldr	r3, [pc, #40]	@ (800dbfc <prvResetNextTaskUnblockTime+0x30>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d104      	bne.n	800dbe4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800dbda:	4b09      	ldr	r3, [pc, #36]	@ (800dc00 <prvResetNextTaskUnblockTime+0x34>)
 800dbdc:	f04f 32ff 	mov.w	r2, #4294967295
 800dbe0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800dbe2:	e005      	b.n	800dbf0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800dbe4:	4b05      	ldr	r3, [pc, #20]	@ (800dbfc <prvResetNextTaskUnblockTime+0x30>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4a04      	ldr	r2, [pc, #16]	@ (800dc00 <prvResetNextTaskUnblockTime+0x34>)
 800dbee:	6013      	str	r3, [r2, #0]
}
 800dbf0:	bf00      	nop
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr
 800dbfa:	bf00      	nop
 800dbfc:	200558c0 	.word	0x200558c0
 800dc00:	20055928 	.word	0x20055928

0800dc04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 800dc0a:	4b05      	ldr	r3, [pc, #20]	@ (800dc20 <xTaskGetCurrentTaskHandle+0x1c>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	607b      	str	r3, [r7, #4]

        return xReturn;
 800dc10:	687b      	ldr	r3, [r7, #4]
    }
 800dc12:	4618      	mov	r0, r3
 800dc14:	370c      	adds	r7, #12
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr
 800dc1e:	bf00      	nop
 800dc20:	20055434 	.word	0x20055434

0800dc24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800dc2a:	4b0b      	ldr	r3, [pc, #44]	@ (800dc58 <xTaskGetSchedulerState+0x34>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d102      	bne.n	800dc38 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800dc32:	2301      	movs	r3, #1
 800dc34:	607b      	str	r3, [r7, #4]
 800dc36:	e008      	b.n	800dc4a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc38:	4b08      	ldr	r3, [pc, #32]	@ (800dc5c <xTaskGetSchedulerState+0x38>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d102      	bne.n	800dc46 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800dc40:	2302      	movs	r3, #2
 800dc42:	607b      	str	r3, [r7, #4]
 800dc44:	e001      	b.n	800dc4a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800dc46:	2300      	movs	r3, #0
 800dc48:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800dc4a:	687b      	ldr	r3, [r7, #4]
    }
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	370c      	adds	r7, #12
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr
 800dc58:	20055914 	.word	0x20055914
 800dc5c:	20055930 	.word	0x20055930

0800dc60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b086      	sub	sp, #24
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d079      	beq.n	800dd6a <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc7a:	4b3e      	ldr	r3, [pc, #248]	@ (800dd74 <xTaskPriorityInherit+0x114>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d269      	bcs.n	800dd58 <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	699b      	ldr	r3, [r3, #24]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	db06      	blt.n	800dc9a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc8c:	4b39      	ldr	r3, [pc, #228]	@ (800dd74 <xTaskPriorityInherit+0x114>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc92:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	6959      	ldr	r1, [r3, #20]
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dca2:	4613      	mov	r3, r2
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	4413      	add	r3, r2
 800dca8:	009b      	lsls	r3, r3, #2
 800dcaa:	4a33      	ldr	r2, [pc, #204]	@ (800dd78 <xTaskPriorityInherit+0x118>)
 800dcac:	4413      	add	r3, r2
 800dcae:	4299      	cmp	r1, r3
 800dcb0:	d14a      	bne.n	800dd48 <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	3304      	adds	r3, #4
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fe f874 	bl	800bda4 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dcbc:	4b2d      	ldr	r3, [pc, #180]	@ (800dd74 <xTaskPriorityInherit+0x114>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcca:	4b2c      	ldr	r3, [pc, #176]	@ (800dd7c <xTaskPriorityInherit+0x11c>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d903      	bls.n	800dcda <xTaskPriorityInherit+0x7a>
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcd6:	4a29      	ldr	r2, [pc, #164]	@ (800dd7c <xTaskPriorityInherit+0x11c>)
 800dcd8:	6013      	str	r3, [r2, #0]
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcde:	4926      	ldr	r1, [pc, #152]	@ (800dd78 <xTaskPriorityInherit+0x118>)
 800dce0:	4613      	mov	r3, r2
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	4413      	add	r3, r2
 800dce6:	009b      	lsls	r3, r3, #2
 800dce8:	440b      	add	r3, r1
 800dcea:	3304      	adds	r3, #4
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	60fb      	str	r3, [r7, #12]
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	68fa      	ldr	r2, [r7, #12]
 800dcf4:	609a      	str	r2, [r3, #8]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	689a      	ldr	r2, [r3, #8]
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	60da      	str	r2, [r3, #12]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	689b      	ldr	r3, [r3, #8]
 800dd02:	693a      	ldr	r2, [r7, #16]
 800dd04:	3204      	adds	r2, #4
 800dd06:	605a      	str	r2, [r3, #4]
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	1d1a      	adds	r2, r3, #4
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	609a      	str	r2, [r3, #8]
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd14:	4613      	mov	r3, r2
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	4413      	add	r3, r2
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	4a16      	ldr	r2, [pc, #88]	@ (800dd78 <xTaskPriorityInherit+0x118>)
 800dd1e:	441a      	add	r2, r3
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	615a      	str	r2, [r3, #20]
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd28:	4913      	ldr	r1, [pc, #76]	@ (800dd78 <xTaskPriorityInherit+0x118>)
 800dd2a:	4613      	mov	r3, r2
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	4413      	add	r3, r2
 800dd30:	009b      	lsls	r3, r3, #2
 800dd32:	440b      	add	r3, r1
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	1c59      	adds	r1, r3, #1
 800dd38:	480f      	ldr	r0, [pc, #60]	@ (800dd78 <xTaskPriorityInherit+0x118>)
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	4413      	add	r3, r2
 800dd40:	009b      	lsls	r3, r3, #2
 800dd42:	4403      	add	r3, r0
 800dd44:	6019      	str	r1, [r3, #0]
 800dd46:	e004      	b.n	800dd52 <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd48:	4b0a      	ldr	r3, [pc, #40]	@ (800dd74 <xTaskPriorityInherit+0x114>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800dd52:	2301      	movs	r3, #1
 800dd54:	617b      	str	r3, [r7, #20]
 800dd56:	e008      	b.n	800dd6a <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dd5c:	4b05      	ldr	r3, [pc, #20]	@ (800dd74 <xTaskPriorityInherit+0x114>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d201      	bcs.n	800dd6a <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800dd66:	2301      	movs	r3, #1
 800dd68:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800dd6a:	697b      	ldr	r3, [r7, #20]
    }
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3718      	adds	r7, #24
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	20055434 	.word	0x20055434
 800dd78:	20055438 	.word	0x20055438
 800dd7c:	20055910 	.word	0x20055910

0800dd80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b086      	sub	sp, #24
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d070      	beq.n	800de78 <xTaskPriorityDisinherit+0xf8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800dd96:	4b3b      	ldr	r3, [pc, #236]	@ (800de84 <xTaskPriorityDisinherit+0x104>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	693a      	ldr	r2, [r7, #16]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d003      	beq.n	800dda8 <xTaskPriorityDisinherit+0x28>
 800dda0:	f000 fdca 	bl	800e938 <ulSetInterruptMask>
 800dda4:	bf00      	nop
 800dda6:	e7fd      	b.n	800dda4 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d103      	bne.n	800ddb8 <xTaskPriorityDisinherit+0x38>
 800ddb0:	f000 fdc2 	bl	800e938 <ulSetInterruptMask>
 800ddb4:	bf00      	nop
 800ddb6:	e7fd      	b.n	800ddb4 <xTaskPriorityDisinherit+0x34>
            ( pxTCB->uxMutexesHeld )--;
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddbc:	1e5a      	subs	r2, r3, #1
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d054      	beq.n	800de78 <xTaskPriorityDisinherit+0xf8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d150      	bne.n	800de78 <xTaskPriorityDisinherit+0xf8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	3304      	adds	r3, #4
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fd ffe2 	bl	800bda4 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddf8:	4b23      	ldr	r3, [pc, #140]	@ (800de88 <xTaskPriorityDisinherit+0x108>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d903      	bls.n	800de08 <xTaskPriorityDisinherit+0x88>
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de04:	4a20      	ldr	r2, [pc, #128]	@ (800de88 <xTaskPriorityDisinherit+0x108>)
 800de06:	6013      	str	r3, [r2, #0]
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de0c:	491f      	ldr	r1, [pc, #124]	@ (800de8c <xTaskPriorityDisinherit+0x10c>)
 800de0e:	4613      	mov	r3, r2
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	4413      	add	r3, r2
 800de14:	009b      	lsls	r3, r3, #2
 800de16:	440b      	add	r3, r1
 800de18:	3304      	adds	r3, #4
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	60fb      	str	r3, [r7, #12]
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	68fa      	ldr	r2, [r7, #12]
 800de22:	609a      	str	r2, [r3, #8]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	689a      	ldr	r2, [r3, #8]
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	60da      	str	r2, [r3, #12]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	693a      	ldr	r2, [r7, #16]
 800de32:	3204      	adds	r2, #4
 800de34:	605a      	str	r2, [r3, #4]
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	1d1a      	adds	r2, r3, #4
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	609a      	str	r2, [r3, #8]
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de42:	4613      	mov	r3, r2
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	4413      	add	r3, r2
 800de48:	009b      	lsls	r3, r3, #2
 800de4a:	4a10      	ldr	r2, [pc, #64]	@ (800de8c <xTaskPriorityDisinherit+0x10c>)
 800de4c:	441a      	add	r2, r3
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	615a      	str	r2, [r3, #20]
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de56:	490d      	ldr	r1, [pc, #52]	@ (800de8c <xTaskPriorityDisinherit+0x10c>)
 800de58:	4613      	mov	r3, r2
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	4413      	add	r3, r2
 800de5e:	009b      	lsls	r3, r3, #2
 800de60:	440b      	add	r3, r1
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	1c59      	adds	r1, r3, #1
 800de66:	4809      	ldr	r0, [pc, #36]	@ (800de8c <xTaskPriorityDisinherit+0x10c>)
 800de68:	4613      	mov	r3, r2
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	4413      	add	r3, r2
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	4403      	add	r3, r0
 800de72:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800de74:	2301      	movs	r3, #1
 800de76:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800de78:	697b      	ldr	r3, [r7, #20]
    }
 800de7a:	4618      	mov	r0, r3
 800de7c:	3718      	adds	r7, #24
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	20055434 	.word	0x20055434
 800de88:	20055910 	.word	0x20055910
 800de8c:	20055438 	.word	0x20055438

0800de90 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800de90:	b580      	push	{r7, lr}
 800de92:	b088      	sub	sp, #32
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800de9e:	2301      	movs	r3, #1
 800dea0:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f000 8085 	beq.w	800dfb4 <vTaskPriorityDisinheritAfterTimeout+0x124>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d103      	bne.n	800deba <vTaskPriorityDisinheritAfterTimeout+0x2a>
 800deb2:	f000 fd41 	bl	800e938 <ulSetInterruptMask>
 800deb6:	bf00      	nop
 800deb8:	e7fd      	b.n	800deb6 <vTaskPriorityDisinheritAfterTimeout+0x26>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800deba:	69bb      	ldr	r3, [r7, #24]
 800debc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800debe:	683a      	ldr	r2, [r7, #0]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d902      	bls.n	800deca <vTaskPriorityDisinheritAfterTimeout+0x3a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	61fb      	str	r3, [r7, #28]
 800dec8:	e002      	b.n	800ded0 <vTaskPriorityDisinheritAfterTimeout+0x40>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dece:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ded4:	69fa      	ldr	r2, [r7, #28]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d06c      	beq.n	800dfb4 <vTaskPriorityDisinheritAfterTimeout+0x124>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dede:	697a      	ldr	r2, [r7, #20]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d167      	bne.n	800dfb4 <vTaskPriorityDisinheritAfterTimeout+0x124>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800dee4:	4b35      	ldr	r3, [pc, #212]	@ (800dfbc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	69ba      	ldr	r2, [r7, #24]
 800deea:	429a      	cmp	r2, r3
 800deec:	d103      	bne.n	800def6 <vTaskPriorityDisinheritAfterTimeout+0x66>
 800deee:	f000 fd23 	bl	800e938 <ulSetInterruptMask>
 800def2:	bf00      	nop
 800def4:	e7fd      	b.n	800def2 <vTaskPriorityDisinheritAfterTimeout+0x62>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800def6:	69bb      	ldr	r3, [r7, #24]
 800def8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800defa:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	69fa      	ldr	r2, [r7, #28]
 800df00:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df02:	69bb      	ldr	r3, [r7, #24]
 800df04:	699b      	ldr	r3, [r3, #24]
 800df06:	2b00      	cmp	r3, #0
 800df08:	db04      	blt.n	800df14 <vTaskPriorityDisinheritAfterTimeout+0x84>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800df14:	69bb      	ldr	r3, [r7, #24]
 800df16:	6959      	ldr	r1, [r3, #20]
 800df18:	693a      	ldr	r2, [r7, #16]
 800df1a:	4613      	mov	r3, r2
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	4413      	add	r3, r2
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	4a27      	ldr	r2, [pc, #156]	@ (800dfc0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800df24:	4413      	add	r3, r2
 800df26:	4299      	cmp	r1, r3
 800df28:	d144      	bne.n	800dfb4 <vTaskPriorityDisinheritAfterTimeout+0x124>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	3304      	adds	r3, #4
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fd ff38 	bl	800bda4 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800df34:	69bb      	ldr	r3, [r7, #24]
 800df36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df38:	4b22      	ldr	r3, [pc, #136]	@ (800dfc4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d903      	bls.n	800df48 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df44:	4a1f      	ldr	r2, [pc, #124]	@ (800dfc4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800df46:	6013      	str	r3, [r2, #0]
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df4c:	491c      	ldr	r1, [pc, #112]	@ (800dfc0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800df4e:	4613      	mov	r3, r2
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	4413      	add	r3, r2
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	440b      	add	r3, r1
 800df58:	3304      	adds	r3, #4
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	60fb      	str	r3, [r7, #12]
 800df5e:	69bb      	ldr	r3, [r7, #24]
 800df60:	68fa      	ldr	r2, [r7, #12]
 800df62:	609a      	str	r2, [r3, #8]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	689a      	ldr	r2, [r3, #8]
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	60da      	str	r2, [r3, #12]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	689b      	ldr	r3, [r3, #8]
 800df70:	69ba      	ldr	r2, [r7, #24]
 800df72:	3204      	adds	r2, #4
 800df74:	605a      	str	r2, [r3, #4]
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	1d1a      	adds	r2, r3, #4
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	609a      	str	r2, [r3, #8]
 800df7e:	69bb      	ldr	r3, [r7, #24]
 800df80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df82:	4613      	mov	r3, r2
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	4413      	add	r3, r2
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	4a0d      	ldr	r2, [pc, #52]	@ (800dfc0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800df8c:	441a      	add	r2, r3
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	615a      	str	r2, [r3, #20]
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df96:	490a      	ldr	r1, [pc, #40]	@ (800dfc0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800df98:	4613      	mov	r3, r2
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	4413      	add	r3, r2
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	440b      	add	r3, r1
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	1c59      	adds	r1, r3, #1
 800dfa6:	4806      	ldr	r0, [pc, #24]	@ (800dfc0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800dfa8:	4613      	mov	r3, r2
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	4413      	add	r3, r2
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	4403      	add	r3, r0
 800dfb2:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800dfb4:	bf00      	nop
 800dfb6:	3720      	adds	r7, #32
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	20055434 	.word	0x20055434
 800dfc0:	20055438 	.word	0x20055438
 800dfc4:	20055910 	.word	0x20055910

0800dfc8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800dfc8:	b480      	push	{r7}
 800dfca:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800dfcc:	4b07      	ldr	r3, [pc, #28]	@ (800dfec <pvTaskIncrementMutexHeldCount+0x24>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d004      	beq.n	800dfde <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800dfd4:	4b05      	ldr	r3, [pc, #20]	@ (800dfec <pvTaskIncrementMutexHeldCount+0x24>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dfda:	3201      	adds	r2, #1
 800dfdc:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 800dfde:	4b03      	ldr	r3, [pc, #12]	@ (800dfec <pvTaskIncrementMutexHeldCount+0x24>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
    }
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr
 800dfec:	20055434 	.word	0x20055434

0800dff0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800dffa:	4b2e      	ldr	r3, [pc, #184]	@ (800e0b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e000:	4b2d      	ldr	r3, [pc, #180]	@ (800e0b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	3304      	adds	r3, #4
 800e006:	4618      	mov	r0, r3
 800e008:	f7fd fecc 	bl	800bda4 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e012:	d124      	bne.n	800e05e <prvAddCurrentTaskToDelayedList+0x6e>
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d021      	beq.n	800e05e <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e01a:	4b28      	ldr	r3, [pc, #160]	@ (800e0bc <prvAddCurrentTaskToDelayedList+0xcc>)
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	613b      	str	r3, [r7, #16]
 800e020:	4b25      	ldr	r3, [pc, #148]	@ (800e0b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	693a      	ldr	r2, [r7, #16]
 800e026:	609a      	str	r2, [r3, #8]
 800e028:	4b23      	ldr	r3, [pc, #140]	@ (800e0b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	693a      	ldr	r2, [r7, #16]
 800e02e:	6892      	ldr	r2, [r2, #8]
 800e030:	60da      	str	r2, [r3, #12]
 800e032:	4b21      	ldr	r3, [pc, #132]	@ (800e0b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e034:	681a      	ldr	r2, [r3, #0]
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	689b      	ldr	r3, [r3, #8]
 800e03a:	3204      	adds	r2, #4
 800e03c:	605a      	str	r2, [r3, #4]
 800e03e:	4b1e      	ldr	r3, [pc, #120]	@ (800e0b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	1d1a      	adds	r2, r3, #4
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	609a      	str	r2, [r3, #8]
 800e048:	4b1b      	ldr	r3, [pc, #108]	@ (800e0b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4a1b      	ldr	r2, [pc, #108]	@ (800e0bc <prvAddCurrentTaskToDelayedList+0xcc>)
 800e04e:	615a      	str	r2, [r3, #20]
 800e050:	4b1a      	ldr	r3, [pc, #104]	@ (800e0bc <prvAddCurrentTaskToDelayedList+0xcc>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	3301      	adds	r3, #1
 800e056:	4a19      	ldr	r2, [pc, #100]	@ (800e0bc <prvAddCurrentTaskToDelayedList+0xcc>)
 800e058:	6013      	str	r3, [r2, #0]
 800e05a:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800e05c:	e026      	b.n	800e0ac <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800e05e:	697a      	ldr	r2, [r7, #20]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	4413      	add	r3, r2
 800e064:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e066:	4b14      	ldr	r3, [pc, #80]	@ (800e0b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	68fa      	ldr	r2, [r7, #12]
 800e06c:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800e06e:	68fa      	ldr	r2, [r7, #12]
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	429a      	cmp	r2, r3
 800e074:	d209      	bcs.n	800e08a <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e076:	4b12      	ldr	r3, [pc, #72]	@ (800e0c0 <prvAddCurrentTaskToDelayedList+0xd0>)
 800e078:	681a      	ldr	r2, [r3, #0]
 800e07a:	4b0f      	ldr	r3, [pc, #60]	@ (800e0b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	3304      	adds	r3, #4
 800e080:	4619      	mov	r1, r3
 800e082:	4610      	mov	r0, r2
 800e084:	f7fd fe55 	bl	800bd32 <vListInsert>
}
 800e088:	e010      	b.n	800e0ac <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e08a:	4b0e      	ldr	r3, [pc, #56]	@ (800e0c4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	4b0a      	ldr	r3, [pc, #40]	@ (800e0b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	3304      	adds	r3, #4
 800e094:	4619      	mov	r1, r3
 800e096:	4610      	mov	r0, r2
 800e098:	f7fd fe4b 	bl	800bd32 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800e09c:	4b0a      	ldr	r3, [pc, #40]	@ (800e0c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d202      	bcs.n	800e0ac <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800e0a6:	4a08      	ldr	r2, [pc, #32]	@ (800e0c8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	6013      	str	r3, [r2, #0]
}
 800e0ac:	bf00      	nop
 800e0ae:	3718      	adds	r7, #24
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	2005590c 	.word	0x2005590c
 800e0b8:	20055434 	.word	0x20055434
 800e0bc:	200558f4 	.word	0x200558f4
 800e0c0:	200558c4 	.word	0x200558c4
 800e0c4:	200558c0 	.word	0x200558c0
 800e0c8:	20055928 	.word	0x20055928

0800e0cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b088      	sub	sp, #32
 800e0d0:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800e0d6:	f000 fa5f 	bl	800e598 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800e0da:	4b18      	ldr	r3, [pc, #96]	@ (800e13c <xTimerCreateTimerTask+0x70>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d020      	beq.n	800e124 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e0ea:	463a      	mov	r2, r7
 800e0ec:	1d39      	adds	r1, r7, #4
 800e0ee:	f107 0308 	add.w	r3, r7, #8
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fd fdd6 	bl	800bca4 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800e0f8:	6839      	ldr	r1, [r7, #0]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	68ba      	ldr	r2, [r7, #8]
 800e0fe:	9202      	str	r2, [sp, #8]
 800e100:	9301      	str	r3, [sp, #4]
 800e102:	2302      	movs	r3, #2
 800e104:	9300      	str	r3, [sp, #0]
 800e106:	2300      	movs	r3, #0
 800e108:	460a      	mov	r2, r1
 800e10a:	490d      	ldr	r1, [pc, #52]	@ (800e140 <xTimerCreateTimerTask+0x74>)
 800e10c:	480d      	ldr	r0, [pc, #52]	@ (800e144 <xTimerCreateTimerTask+0x78>)
 800e10e:	f7fe fe59 	bl	800cdc4 <xTaskCreateStatic>
 800e112:	4603      	mov	r3, r0
 800e114:	4a0c      	ldr	r2, [pc, #48]	@ (800e148 <xTimerCreateTimerTask+0x7c>)
 800e116:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800e118:	4b0b      	ldr	r3, [pc, #44]	@ (800e148 <xTimerCreateTimerTask+0x7c>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d001      	beq.n	800e124 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800e120:	2301      	movs	r3, #1
 800e122:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d103      	bne.n	800e132 <xTimerCreateTimerTask+0x66>
 800e12a:	f000 fc05 	bl	800e938 <ulSetInterruptMask>
 800e12e:	bf00      	nop
 800e130:	e7fd      	b.n	800e12e <xTimerCreateTimerTask+0x62>
        return xReturn;
 800e132:	68fb      	ldr	r3, [r7, #12]
    }
 800e134:	4618      	mov	r0, r3
 800e136:	3710      	adds	r7, #16
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	20055964 	.word	0x20055964
 800e140:	0801a0b8 	.word	0x0801a0b8
 800e144:	0800e1f1 	.word	0x0800e1f1
 800e148:	20055968 	.word	0x20055968

0800e14c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e158:	e008      	b.n	800e16c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	699b      	ldr	r3, [r3, #24]
 800e15e:	68ba      	ldr	r2, [r7, #8]
 800e160:	4413      	add	r3, r2
 800e162:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6a1b      	ldr	r3, [r3, #32]
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	699a      	ldr	r2, [r3, #24]
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	18d1      	adds	r1, r2, r3
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	68f8      	ldr	r0, [r7, #12]
 800e17a:	f000 f8d7 	bl	800e32c <prvInsertTimerInActiveList>
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d1ea      	bne.n	800e15a <prvReloadTimer+0xe>
        }
    }
 800e184:	bf00      	nop
 800e186:	bf00      	nop
 800e188:	3710      	adds	r7, #16
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
	...

0800e190 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e19a:	4b14      	ldr	r3, [pc, #80]	@ (800e1ec <prvProcessExpiredTimer+0x5c>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	68db      	ldr	r3, [r3, #12]
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	3304      	adds	r3, #4
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7fd fdfb 	bl	800bda4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e1b4:	f003 0304 	and.w	r3, r3, #4
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d005      	beq.n	800e1c8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800e1bc:	683a      	ldr	r2, [r7, #0]
 800e1be:	6879      	ldr	r1, [r7, #4]
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f7ff ffc3 	bl	800e14c <prvReloadTimer>
 800e1c6:	e008      	b.n	800e1da <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e1ce:	f023 0301 	bic.w	r3, r3, #1
 800e1d2:	b2da      	uxtb	r2, r3
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	6a1b      	ldr	r3, [r3, #32]
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	4798      	blx	r3
    }
 800e1e2:	bf00      	nop
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	2005595c 	.word	0x2005595c

0800e1f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b084      	sub	sp, #16
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e1f8:	f107 0308 	add.w	r3, r7, #8
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f000 f851 	bl	800e2a4 <prvGetNextExpireTime>
 800e202:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	4619      	mov	r1, r3
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f000 f805 	bl	800e218 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800e20e:	f000 f8cf 	bl	800e3b0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e212:	bf00      	nop
 800e214:	e7f0      	b.n	800e1f8 <prvTimerTask+0x8>
	...

0800e218 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800e222:	f7fe fffb 	bl	800d21c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e226:	f107 0308 	add.w	r3, r7, #8
 800e22a:	4618      	mov	r0, r3
 800e22c:	f000 f85e 	bl	800e2ec <prvSampleTimeNow>
 800e230:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d12a      	bne.n	800e28e <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d10a      	bne.n	800e254 <prvProcessTimerOrBlockTask+0x3c>
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	429a      	cmp	r2, r3
 800e244:	d806      	bhi.n	800e254 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800e246:	f7fe fff7 	bl	800d238 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e24a:	68f9      	ldr	r1, [r7, #12]
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f7ff ff9f 	bl	800e190 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800e252:	e01e      	b.n	800e292 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d008      	beq.n	800e26c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e25a:	4b10      	ldr	r3, [pc, #64]	@ (800e29c <prvProcessTimerOrBlockTask+0x84>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d101      	bne.n	800e268 <prvProcessTimerOrBlockTask+0x50>
 800e264:	2301      	movs	r3, #1
 800e266:	e000      	b.n	800e26a <prvProcessTimerOrBlockTask+0x52>
 800e268:	2300      	movs	r3, #0
 800e26a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e26c:	4b0c      	ldr	r3, [pc, #48]	@ (800e2a0 <prvProcessTimerOrBlockTask+0x88>)
 800e26e:	6818      	ldr	r0, [r3, #0]
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	1ad3      	subs	r3, r2, r3
 800e276:	683a      	ldr	r2, [r7, #0]
 800e278:	4619      	mov	r1, r3
 800e27a:	f7fe fd6f 	bl	800cd5c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800e27e:	f7fe ffdb 	bl	800d238 <xTaskResumeAll>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d104      	bne.n	800e292 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800e288:	f000 fa06 	bl	800e698 <vPortYield>
    }
 800e28c:	e001      	b.n	800e292 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800e28e:	f7fe ffd3 	bl	800d238 <xTaskResumeAll>
    }
 800e292:	bf00      	nop
 800e294:	3710      	adds	r7, #16
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	20055960 	.word	0x20055960
 800e2a0:	20055964 	.word	0x20055964

0800e2a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800e2a4:	b480      	push	{r7}
 800e2a6:	b085      	sub	sp, #20
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e2ac:	4b0e      	ldr	r3, [pc, #56]	@ (800e2e8 <prvGetNextExpireTime+0x44>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d101      	bne.n	800e2ba <prvGetNextExpireTime+0x16>
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	e000      	b.n	800e2bc <prvGetNextExpireTime+0x18>
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d105      	bne.n	800e2d4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2c8:	4b07      	ldr	r3, [pc, #28]	@ (800e2e8 <prvGetNextExpireTime+0x44>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	60fb      	str	r3, [r7, #12]
 800e2d2:	e001      	b.n	800e2d8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
    }
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3714      	adds	r7, #20
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop
 800e2e8:	2005595c 	.word	0x2005595c

0800e2ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800e2f4:	f7ff f88e 	bl	800d414 <xTaskGetTickCount>
 800e2f8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800e2fa:	4b0b      	ldr	r3, [pc, #44]	@ (800e328 <prvSampleTimeNow+0x3c>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	68fa      	ldr	r2, [r7, #12]
 800e300:	429a      	cmp	r2, r3
 800e302:	d205      	bcs.n	800e310 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800e304:	f000 f922 	bl	800e54c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2201      	movs	r2, #1
 800e30c:	601a      	str	r2, [r3, #0]
 800e30e:	e002      	b.n	800e316 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2200      	movs	r2, #0
 800e314:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800e316:	4a04      	ldr	r2, [pc, #16]	@ (800e328 <prvSampleTimeNow+0x3c>)
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800e31c:	68fb      	ldr	r3, [r7, #12]
    }
 800e31e:	4618      	mov	r0, r3
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	2005596c 	.word	0x2005596c

0800e32c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b086      	sub	sp, #24
 800e330:	af00      	add	r7, sp, #0
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	607a      	str	r2, [r7, #4]
 800e338:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800e33a:	2300      	movs	r3, #0
 800e33c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	68fa      	ldr	r2, [r7, #12]
 800e348:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800e34a:	68ba      	ldr	r2, [r7, #8]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d812      	bhi.n	800e378 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	1ad2      	subs	r2, r2, r3
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	699b      	ldr	r3, [r3, #24]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d302      	bcc.n	800e366 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800e360:	2301      	movs	r3, #1
 800e362:	617b      	str	r3, [r7, #20]
 800e364:	e01b      	b.n	800e39e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e366:	4b10      	ldr	r3, [pc, #64]	@ (800e3a8 <prvInsertTimerInActiveList+0x7c>)
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	3304      	adds	r3, #4
 800e36e:	4619      	mov	r1, r3
 800e370:	4610      	mov	r0, r2
 800e372:	f7fd fcde 	bl	800bd32 <vListInsert>
 800e376:	e012      	b.n	800e39e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d206      	bcs.n	800e38e <prvInsertTimerInActiveList+0x62>
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	429a      	cmp	r2, r3
 800e386:	d302      	bcc.n	800e38e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800e388:	2301      	movs	r3, #1
 800e38a:	617b      	str	r3, [r7, #20]
 800e38c:	e007      	b.n	800e39e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e38e:	4b07      	ldr	r3, [pc, #28]	@ (800e3ac <prvInsertTimerInActiveList+0x80>)
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	3304      	adds	r3, #4
 800e396:	4619      	mov	r1, r3
 800e398:	4610      	mov	r0, r2
 800e39a:	f7fd fcca 	bl	800bd32 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800e39e:	697b      	ldr	r3, [r7, #20]
    }
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3718      	adds	r7, #24
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	20055960 	.word	0x20055960
 800e3ac:	2005595c 	.word	0x2005595c

0800e3b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b088      	sub	sp, #32
 800e3b4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3b6:	e0b7      	b.n	800e528 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	da11      	bge.n	800e3e2 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e3be:	1d3b      	adds	r3, r7, #4
 800e3c0:	3304      	adds	r3, #4
 800e3c2:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800e3c4:	69fb      	ldr	r3, [r7, #28]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d103      	bne.n	800e3d2 <prvProcessReceivedCommands+0x22>
 800e3ca:	f000 fab5 	bl	800e938 <ulSetInterruptMask>
 800e3ce:	bf00      	nop
 800e3d0:	e7fd      	b.n	800e3ce <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	69fa      	ldr	r2, [r7, #28]
 800e3d8:	6850      	ldr	r0, [r2, #4]
 800e3da:	69fa      	ldr	r2, [r7, #28]
 800e3dc:	6892      	ldr	r2, [r2, #8]
 800e3de:	4611      	mov	r1, r2
 800e3e0:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	f2c0 809f 	blt.w	800e528 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e3ee:	69bb      	ldr	r3, [r7, #24]
 800e3f0:	695b      	ldr	r3, [r3, #20]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d004      	beq.n	800e400 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3f6:	69bb      	ldr	r3, [r7, #24]
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fd fcd2 	bl	800bda4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e400:	463b      	mov	r3, r7
 800e402:	4618      	mov	r0, r3
 800e404:	f7ff ff72 	bl	800e2ec <prvSampleTimeNow>
 800e408:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	3b01      	subs	r3, #1
 800e40e:	2b08      	cmp	r3, #8
 800e410:	f200 8087 	bhi.w	800e522 <prvProcessReceivedCommands+0x172>
 800e414:	a201      	add	r2, pc, #4	@ (adr r2, 800e41c <prvProcessReceivedCommands+0x6c>)
 800e416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e41a:	bf00      	nop
 800e41c:	0800e441 	.word	0x0800e441
 800e420:	0800e441 	.word	0x0800e441
 800e424:	0800e4a9 	.word	0x0800e4a9
 800e428:	0800e4bd 	.word	0x0800e4bd
 800e42c:	0800e4f9 	.word	0x0800e4f9
 800e430:	0800e441 	.word	0x0800e441
 800e434:	0800e441 	.word	0x0800e441
 800e438:	0800e4a9 	.word	0x0800e4a9
 800e43c:	0800e4bd 	.word	0x0800e4bd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e440:	69bb      	ldr	r3, [r7, #24]
 800e442:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e446:	f043 0301 	orr.w	r3, r3, #1
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	69bb      	ldr	r3, [r7, #24]
 800e44e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e452:	68ba      	ldr	r2, [r7, #8]
 800e454:	69bb      	ldr	r3, [r7, #24]
 800e456:	699b      	ldr	r3, [r3, #24]
 800e458:	18d1      	adds	r1, r2, r3
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	697a      	ldr	r2, [r7, #20]
 800e45e:	69b8      	ldr	r0, [r7, #24]
 800e460:	f7ff ff64 	bl	800e32c <prvInsertTimerInActiveList>
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	d05d      	beq.n	800e526 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e470:	f003 0304 	and.w	r3, r3, #4
 800e474:	2b00      	cmp	r3, #0
 800e476:	d009      	beq.n	800e48c <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800e478:	68ba      	ldr	r2, [r7, #8]
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	699b      	ldr	r3, [r3, #24]
 800e47e:	4413      	add	r3, r2
 800e480:	697a      	ldr	r2, [r7, #20]
 800e482:	4619      	mov	r1, r3
 800e484:	69b8      	ldr	r0, [r7, #24]
 800e486:	f7ff fe61 	bl	800e14c <prvReloadTimer>
 800e48a:	e008      	b.n	800e49e <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e492:	f023 0301 	bic.w	r3, r3, #1
 800e496:	b2da      	uxtb	r2, r3
 800e498:	69bb      	ldr	r3, [r7, #24]
 800e49a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e49e:	69bb      	ldr	r3, [r7, #24]
 800e4a0:	6a1b      	ldr	r3, [r3, #32]
 800e4a2:	69b8      	ldr	r0, [r7, #24]
 800e4a4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800e4a6:	e03e      	b.n	800e526 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e4a8:	69bb      	ldr	r3, [r7, #24]
 800e4aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e4ae:	f023 0301 	bic.w	r3, r3, #1
 800e4b2:	b2da      	uxtb	r2, r3
 800e4b4:	69bb      	ldr	r3, [r7, #24]
 800e4b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e4ba:	e035      	b.n	800e528 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e4bc:	69bb      	ldr	r3, [r7, #24]
 800e4be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e4c2:	f043 0301 	orr.w	r3, r3, #1
 800e4c6:	b2da      	uxtb	r2, r3
 800e4c8:	69bb      	ldr	r3, [r7, #24]
 800e4ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e4ce:	68ba      	ldr	r2, [r7, #8]
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e4d4:	69bb      	ldr	r3, [r7, #24]
 800e4d6:	699b      	ldr	r3, [r3, #24]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d103      	bne.n	800e4e4 <prvProcessReceivedCommands+0x134>
 800e4dc:	f000 fa2c 	bl	800e938 <ulSetInterruptMask>
 800e4e0:	bf00      	nop
 800e4e2:	e7fd      	b.n	800e4e0 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	699a      	ldr	r2, [r3, #24]
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	18d1      	adds	r1, r2, r3
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	697a      	ldr	r2, [r7, #20]
 800e4f0:	69b8      	ldr	r0, [r7, #24]
 800e4f2:	f7ff ff1b 	bl	800e32c <prvInsertTimerInActiveList>
                        break;
 800e4f6:	e017      	b.n	800e528 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e4fe:	f003 0302 	and.w	r3, r3, #2
 800e502:	2b00      	cmp	r3, #0
 800e504:	d103      	bne.n	800e50e <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800e506:	69b8      	ldr	r0, [r7, #24]
 800e508:	f000 fb22 	bl	800eb50 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800e50c:	e00c      	b.n	800e528 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800e50e:	69bb      	ldr	r3, [r7, #24]
 800e510:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e514:	f023 0301 	bic.w	r3, r3, #1
 800e518:	b2da      	uxtb	r2, r3
 800e51a:	69bb      	ldr	r3, [r7, #24]
 800e51c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800e520:	e002      	b.n	800e528 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800e522:	bf00      	nop
 800e524:	e000      	b.n	800e528 <prvProcessReceivedCommands+0x178>
                        break;
 800e526:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e528:	4b07      	ldr	r3, [pc, #28]	@ (800e548 <prvProcessReceivedCommands+0x198>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	1d39      	adds	r1, r7, #4
 800e52e:	2200      	movs	r2, #0
 800e530:	4618      	mov	r0, r3
 800e532:	f7fe f853 	bl	800c5dc <xQueueReceive>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	f47f af3d 	bne.w	800e3b8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800e53e:	bf00      	nop
 800e540:	bf00      	nop
 800e542:	3720      	adds	r7, #32
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}
 800e548:	20055964 	.word	0x20055964

0800e54c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e552:	e009      	b.n	800e568 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e554:	4b0e      	ldr	r3, [pc, #56]	@ (800e590 <prvSwitchTimerLists+0x44>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800e55e:	f04f 31ff 	mov.w	r1, #4294967295
 800e562:	6838      	ldr	r0, [r7, #0]
 800e564:	f7ff fe14 	bl	800e190 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e568:	4b09      	ldr	r3, [pc, #36]	@ (800e590 <prvSwitchTimerLists+0x44>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d1f0      	bne.n	800e554 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800e572:	4b07      	ldr	r3, [pc, #28]	@ (800e590 <prvSwitchTimerLists+0x44>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800e578:	4b06      	ldr	r3, [pc, #24]	@ (800e594 <prvSwitchTimerLists+0x48>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4a04      	ldr	r2, [pc, #16]	@ (800e590 <prvSwitchTimerLists+0x44>)
 800e57e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800e580:	4a04      	ldr	r2, [pc, #16]	@ (800e594 <prvSwitchTimerLists+0x48>)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6013      	str	r3, [r2, #0]
    }
 800e586:	bf00      	nop
 800e588:	3708      	adds	r7, #8
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	2005595c 	.word	0x2005595c
 800e594:	20055960 	.word	0x20055960

0800e598 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800e59e:	f000 f88d 	bl	800e6bc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800e5a2:	4b15      	ldr	r3, [pc, #84]	@ (800e5f8 <prvCheckForValidListAndQueue+0x60>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d120      	bne.n	800e5ec <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800e5aa:	4814      	ldr	r0, [pc, #80]	@ (800e5fc <prvCheckForValidListAndQueue+0x64>)
 800e5ac:	f7fd fb94 	bl	800bcd8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800e5b0:	4813      	ldr	r0, [pc, #76]	@ (800e600 <prvCheckForValidListAndQueue+0x68>)
 800e5b2:	f7fd fb91 	bl	800bcd8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800e5b6:	4b13      	ldr	r3, [pc, #76]	@ (800e604 <prvCheckForValidListAndQueue+0x6c>)
 800e5b8:	4a10      	ldr	r2, [pc, #64]	@ (800e5fc <prvCheckForValidListAndQueue+0x64>)
 800e5ba:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800e5bc:	4b12      	ldr	r3, [pc, #72]	@ (800e608 <prvCheckForValidListAndQueue+0x70>)
 800e5be:	4a10      	ldr	r2, [pc, #64]	@ (800e600 <prvCheckForValidListAndQueue+0x68>)
 800e5c0:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	9300      	str	r3, [sp, #0]
 800e5c6:	4b11      	ldr	r3, [pc, #68]	@ (800e60c <prvCheckForValidListAndQueue+0x74>)
 800e5c8:	4a11      	ldr	r2, [pc, #68]	@ (800e610 <prvCheckForValidListAndQueue+0x78>)
 800e5ca:	2110      	movs	r1, #16
 800e5cc:	200a      	movs	r0, #10
 800e5ce:	f7fd fc8c 	bl	800beea <xQueueGenericCreateStatic>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	4a08      	ldr	r2, [pc, #32]	@ (800e5f8 <prvCheckForValidListAndQueue+0x60>)
 800e5d6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800e5d8:	4b07      	ldr	r3, [pc, #28]	@ (800e5f8 <prvCheckForValidListAndQueue+0x60>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d005      	beq.n	800e5ec <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e5e0:	4b05      	ldr	r3, [pc, #20]	@ (800e5f8 <prvCheckForValidListAndQueue+0x60>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	490b      	ldr	r1, [pc, #44]	@ (800e614 <prvCheckForValidListAndQueue+0x7c>)
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7fe fb42 	bl	800cc70 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800e5ec:	f000 f878 	bl	800e6e0 <vPortExitCritical>
    }
 800e5f0:	bf00      	nop
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	20055964 	.word	0x20055964
 800e5fc:	20055934 	.word	0x20055934
 800e600:	20055948 	.word	0x20055948
 800e604:	2005595c 	.word	0x2005595c
 800e608:	20055960 	.word	0x20055960
 800e60c:	20055a10 	.word	0x20055a10
 800e610:	20055970 	.word	0x20055970
 800e614:	0801a0c0 	.word	0x0801a0c0

0800e618 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800e618:	b480      	push	{r7}
 800e61a:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e61c:	4b0b      	ldr	r3, [pc, #44]	@ (800e64c <vPortSetupTimerInterrupt+0x34>)
 800e61e:	2200      	movs	r2, #0
 800e620:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e622:	4b0b      	ldr	r3, [pc, #44]	@ (800e650 <vPortSetupTimerInterrupt+0x38>)
 800e624:	2200      	movs	r2, #0
 800e626:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e628:	4b0a      	ldr	r3, [pc, #40]	@ (800e654 <vPortSetupTimerInterrupt+0x3c>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4a0a      	ldr	r2, [pc, #40]	@ (800e658 <vPortSetupTimerInterrupt+0x40>)
 800e62e:	fba2 2303 	umull	r2, r3, r2, r3
 800e632:	099b      	lsrs	r3, r3, #6
 800e634:	4a09      	ldr	r2, [pc, #36]	@ (800e65c <vPortSetupTimerInterrupt+0x44>)
 800e636:	3b01      	subs	r3, #1
 800e638:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800e63a:	4b04      	ldr	r3, [pc, #16]	@ (800e64c <vPortSetupTimerInterrupt+0x34>)
 800e63c:	2207      	movs	r2, #7
 800e63e:	601a      	str	r2, [r3, #0]
}
 800e640:	bf00      	nop
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr
 800e64a:	bf00      	nop
 800e64c:	e000e010 	.word	0xe000e010
 800e650:	e000e018 	.word	0xe000e018
 800e654:	20050000 	.word	0x20050000
 800e658:	10624dd3 	.word	0x10624dd3
 800e65c:	e000e014 	.word	0xe000e014

0800e660 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800e666:	2300      	movs	r3, #0
 800e668:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800e66a:	4b0a      	ldr	r3, [pc, #40]	@ (800e694 <prvTaskExitError+0x34>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e672:	d003      	beq.n	800e67c <prvTaskExitError+0x1c>
 800e674:	f000 f960 	bl	800e938 <ulSetInterruptMask>
 800e678:	bf00      	nop
 800e67a:	e7fd      	b.n	800e678 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800e67c:	f000 f95c 	bl	800e938 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800e680:	bf00      	nop
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d0fc      	beq.n	800e682 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800e688:	bf00      	nop
 800e68a:	bf00      	nop
 800e68c:	3708      	adds	r7, #8
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	20050024 	.word	0x20050024

0800e698 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800e698:	b480      	push	{r7}
 800e69a:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e69c:	4b06      	ldr	r3, [pc, #24]	@ (800e6b8 <vPortYield+0x20>)
 800e69e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6a2:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800e6a4:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800e6a8:	f3bf 8f6f 	isb	sy
}
 800e6ac:	bf00      	nop
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr
 800e6b6:	bf00      	nop
 800e6b8:	e000ed04 	.word	0xe000ed04

0800e6bc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800e6c0:	f000 f93a 	bl	800e938 <ulSetInterruptMask>
    ulCriticalNesting++;
 800e6c4:	4b05      	ldr	r3, [pc, #20]	@ (800e6dc <vPortEnterCritical+0x20>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	4a04      	ldr	r2, [pc, #16]	@ (800e6dc <vPortEnterCritical+0x20>)
 800e6cc:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800e6ce:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800e6d2:	f3bf 8f6f 	isb	sy
}
 800e6d6:	bf00      	nop
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	20050024 	.word	0x20050024

0800e6e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800e6e4:	4b0a      	ldr	r3, [pc, #40]	@ (800e710 <vPortExitCritical+0x30>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d103      	bne.n	800e6f4 <vPortExitCritical+0x14>
 800e6ec:	f000 f924 	bl	800e938 <ulSetInterruptMask>
 800e6f0:	bf00      	nop
 800e6f2:	e7fd      	b.n	800e6f0 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800e6f4:	4b06      	ldr	r3, [pc, #24]	@ (800e710 <vPortExitCritical+0x30>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	3b01      	subs	r3, #1
 800e6fa:	4a05      	ldr	r2, [pc, #20]	@ (800e710 <vPortExitCritical+0x30>)
 800e6fc:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800e6fe:	4b04      	ldr	r3, [pc, #16]	@ (800e710 <vPortExitCritical+0x30>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d102      	bne.n	800e70c <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800e706:	2000      	movs	r0, #0
 800e708:	f000 f923 	bl	800e952 <vClearInterruptMask>
    }
}
 800e70c:	bf00      	nop
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	20050024 	.word	0x20050024

0800e714 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e71a:	f000 f90d 	bl	800e938 <ulSetInterruptMask>
 800e71e:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800e720:	f7fe fea6 	bl	800d470 <xTaskIncrementTick>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d003      	beq.n	800e732 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e72a:	4b05      	ldr	r3, [pc, #20]	@ (800e740 <xPortSysTickHandler+0x2c>)
 800e72c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e730:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 f90d 	bl	800e952 <vClearInterruptMask>
}
 800e738:	bf00      	nop
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	e000ed04 	.word	0xe000ed04

0800e744 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	699b      	ldr	r3, [r3, #24]
 800e750:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	3b02      	subs	r3, #2
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800e75a:	7afb      	ldrb	r3, [r7, #11]
 800e75c:	2b02      	cmp	r3, #2
 800e75e:	d102      	bne.n	800e766 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800e760:	f000 f8b6 	bl	800e8d0 <vRestoreContextOfFirstTask>
            break;
 800e764:	e003      	b.n	800e76e <vPortSVCHandler_C+0x2a>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800e766:	f000 f8e7 	bl	800e938 <ulSetInterruptMask>
 800e76a:	bf00      	nop
 800e76c:	e7fd      	b.n	800e76a <vPortSVCHandler_C+0x26>
    }
}
 800e76e:	bf00      	nop
 800e770:	3710      	adds	r7, #16
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
	...

0800e778 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	60f8      	str	r0, [r7, #12]
 800e780:	60b9      	str	r1, [r7, #8]
 800e782:	607a      	str	r2, [r7, #4]
 800e784:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	3b04      	subs	r3, #4
 800e78a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e792:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	3b04      	subs	r3, #4
 800e798:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	3b04      	subs	r3, #4
 800e7a4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800e7a6:	4a38      	ldr	r2, [pc, #224]	@ (800e888 <pxPortInitialiseStack+0x110>)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	3b04      	subs	r3, #4
 800e7b0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800e7b8:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	3b04      	subs	r3, #4
 800e7be:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800e7c6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	3b04      	subs	r3, #4
 800e7cc:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800e7d4:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	3b04      	subs	r3, #4
 800e7da:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800e7e2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	3b04      	subs	r3, #4
 800e7e8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	3b04      	subs	r3, #4
 800e7f4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800e7fc:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	3b04      	subs	r3, #4
 800e802:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800e80a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	3b04      	subs	r3, #4
 800e810:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800e818:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	3b04      	subs	r3, #4
 800e81e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800e826:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	3b04      	subs	r3, #4
 800e82c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800e834:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	3b04      	subs	r3, #4
 800e83a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800e842:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	3b04      	subs	r3, #4
 800e848:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800e850:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	3b04      	subs	r3, #4
 800e856:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800e85e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	3b04      	subs	r3, #4
 800e864:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800e86c:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	3b04      	subs	r3, #4
 800e872:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800e874:	68ba      	ldr	r2, [r7, #8]
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800e87a:	68fb      	ldr	r3, [r7, #12]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3714      	adds	r7, #20
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr
 800e888:	0800e661 	.word	0x0800e661

0800e88c <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800e890:	4b0c      	ldr	r3, [pc, #48]	@ (800e8c4 <xPortStartScheduler+0x38>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a0b      	ldr	r2, [pc, #44]	@ (800e8c4 <xPortStartScheduler+0x38>)
 800e896:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e89a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800e89c:	4b09      	ldr	r3, [pc, #36]	@ (800e8c4 <xPortStartScheduler+0x38>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4a08      	ldr	r2, [pc, #32]	@ (800e8c4 <xPortStartScheduler+0x38>)
 800e8a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8a6:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800e8a8:	f7ff feb6 	bl	800e618 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800e8ac:	4b06      	ldr	r3, [pc, #24]	@ (800e8c8 <xPortStartScheduler+0x3c>)
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800e8b2:	f000 f82d 	bl	800e910 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800e8b6:	f7fe feeb 	bl	800d690 <vTaskSwitchContext>
    prvTaskExitError();
 800e8ba:	f7ff fed1 	bl	800e660 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	e000ed20 	.word	0xe000ed20
 800e8c8:	20050024 	.word	0x20050024
 800e8cc:	00000000 	.word	0x00000000

0800e8d0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e8d0:	4a0b      	ldr	r2, [pc, #44]	@ (800e900 <pxCurrentTCBConst2>)
 800e8d2:	6811      	ldr	r1, [r2, #0]
 800e8d4:	6808      	ldr	r0, [r1, #0]
 800e8d6:	c806      	ldmia	r0!, {r1, r2}
 800e8d8:	f381 880b 	msr	PSPLIM, r1
 800e8dc:	2102      	movs	r1, #2
 800e8de:	f381 8814 	msr	CONTROL, r1
 800e8e2:	3020      	adds	r0, #32
 800e8e4:	f380 8809 	msr	PSP, r0
 800e8e8:	f3bf 8f6f 	isb	sy
 800e8ec:	f04f 0000 	mov.w	r0, #0
 800e8f0:	f380 8811 	msr	BASEPRI, r0
 800e8f4:	4710      	bx	r2
 800e8f6:	bf00      	nop
 800e8f8:	f3af 8000 	nop.w
 800e8fc:	f3af 8000 	nop.w

0800e900 <pxCurrentTCBConst2>:
 800e900:	20055434 	.word	0x20055434
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800e904:	bf00      	nop
 800e906:	bf00      	nop
	...

0800e910 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e910:	4807      	ldr	r0, [pc, #28]	@ (800e930 <xVTORConst>)
 800e912:	6800      	ldr	r0, [r0, #0]
 800e914:	6800      	ldr	r0, [r0, #0]
 800e916:	f380 8808 	msr	MSP, r0
 800e91a:	b662      	cpsie	i
 800e91c:	b661      	cpsie	f
 800e91e:	f3bf 8f4f 	dsb	sy
 800e922:	f3bf 8f6f 	isb	sy
 800e926:	df02      	svc	2
 800e928:	bf00      	nop
 800e92a:	bf00      	nop
 800e92c:	f3af 8000 	nop.w

0800e930 <xVTORConst>:
 800e930:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800e934:	bf00      	nop
 800e936:	bf00      	nop

0800e938 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e938:	f3ef 8011 	mrs	r0, BASEPRI
 800e93c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800e940:	f381 8811 	msr	BASEPRI, r1
 800e944:	f3bf 8f4f 	dsb	sy
 800e948:	f3bf 8f6f 	isb	sy
 800e94c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800e94e:	bf00      	nop
 800e950:	4618      	mov	r0, r3

0800e952 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e952:	f380 8811 	msr	BASEPRI, r0
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	f3bf 8f6f 	isb	sy
 800e95e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800e960:	bf00      	nop
	...

0800e970 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e970:	f3ef 8009 	mrs	r0, PSP
 800e974:	f3ef 820b 	mrs	r2, PSPLIM
 800e978:	4673      	mov	r3, lr
 800e97a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800e97e:	4a10      	ldr	r2, [pc, #64]	@ (800e9c0 <pxCurrentTCBConst>)
 800e980:	6811      	ldr	r1, [r2, #0]
 800e982:	6008      	str	r0, [r1, #0]
 800e984:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e988:	f380 8811 	msr	BASEPRI, r0
 800e98c:	f3bf 8f4f 	dsb	sy
 800e990:	f3bf 8f6f 	isb	sy
 800e994:	f7fe fe7c 	bl	800d690 <vTaskSwitchContext>
 800e998:	f04f 0000 	mov.w	r0, #0
 800e99c:	f380 8811 	msr	BASEPRI, r0
 800e9a0:	4a07      	ldr	r2, [pc, #28]	@ (800e9c0 <pxCurrentTCBConst>)
 800e9a2:	6811      	ldr	r1, [r2, #0]
 800e9a4:	6808      	ldr	r0, [r1, #0]
 800e9a6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800e9aa:	f382 880b 	msr	PSPLIM, r2
 800e9ae:	f380 8809 	msr	PSP, r0
 800e9b2:	4718      	bx	r3
 800e9b4:	f3af 8000 	nop.w
 800e9b8:	f3af 8000 	nop.w
 800e9bc:	f3af 8000 	nop.w

0800e9c0 <pxCurrentTCBConst>:
 800e9c0:	20055434 	.word	0x20055434
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800e9c4:	bf00      	nop
 800e9c6:	bf00      	nop
	...

0800e9d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800e9d0:	f01e 0f04 	tst.w	lr, #4
 800e9d4:	bf0c      	ite	eq
 800e9d6:	f3ef 8008 	mrseq	r0, MSP
 800e9da:	f3ef 8009 	mrsne	r0, PSP
 800e9de:	4904      	ldr	r1, [pc, #16]	@ (800e9f0 <svchandler_address_const>)
 800e9e0:	4708      	bx	r1
 800e9e2:	bf00      	nop
 800e9e4:	f3af 8000 	nop.w
 800e9e8:	f3af 8000 	nop.w
 800e9ec:	f3af 8000 	nop.w

0800e9f0 <svchandler_address_const>:
 800e9f0:	0800e745 	.word	0x0800e745
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800e9f4:	bf00      	nop
 800e9f6:	bf00      	nop

0800e9f8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b088      	sub	sp, #32
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800ea00:	2300      	movs	r3, #0
 800ea02:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800ea04:	f7fe fc0a 	bl	800d21c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800ea08:	4b4c      	ldr	r3, [pc, #304]	@ (800eb3c <pvPortMalloc+0x144>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d101      	bne.n	800ea14 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800ea10:	f000 f8ec 	bl	800ebec <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d012      	beq.n	800ea40 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800ea1a:	2208      	movs	r2, #8
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f003 0307 	and.w	r3, r3, #7
 800ea22:	1ad3      	subs	r3, r2, r3
 800ea24:	3308      	adds	r3, #8
 800ea26:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	43db      	mvns	r3, r3
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d804      	bhi.n	800ea3c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	4413      	add	r3, r2
 800ea38:	607b      	str	r3, [r7, #4]
 800ea3a:	e001      	b.n	800ea40 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	db69      	blt.n	800eb1a <pvPortMalloc+0x122>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d066      	beq.n	800eb1a <pvPortMalloc+0x122>
 800ea4c:	4b3c      	ldr	r3, [pc, #240]	@ (800eb40 <pvPortMalloc+0x148>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d861      	bhi.n	800eb1a <pvPortMalloc+0x122>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800ea56:	4b3b      	ldr	r3, [pc, #236]	@ (800eb44 <pvPortMalloc+0x14c>)
 800ea58:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800ea5a:	4b3a      	ldr	r3, [pc, #232]	@ (800eb44 <pvPortMalloc+0x14c>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea60:	e004      	b.n	800ea6c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800ea62:	69fb      	ldr	r3, [r7, #28]
 800ea64:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800ea66:	69fb      	ldr	r3, [r7, #28]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d903      	bls.n	800ea7e <pvPortMalloc+0x86>
 800ea76:	69fb      	ldr	r3, [r7, #28]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d1f1      	bne.n	800ea62 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800ea7e:	4b2f      	ldr	r3, [pc, #188]	@ (800eb3c <pvPortMalloc+0x144>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	69fa      	ldr	r2, [r7, #28]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d048      	beq.n	800eb1a <pvPortMalloc+0x122>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea88:	69bb      	ldr	r3, [r7, #24]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2208      	movs	r2, #8
 800ea8e:	4413      	add	r3, r2
 800ea90:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	685a      	ldr	r2, [r3, #4]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	1ad2      	subs	r2, r2, r3
 800eaa2:	2308      	movs	r3, #8
 800eaa4:	005b      	lsls	r3, r3, #1
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	d918      	bls.n	800eadc <pvPortMalloc+0xe4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eaaa:	69fa      	ldr	r2, [r7, #28]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4413      	add	r3, r2
 800eab0:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f003 0307 	and.w	r3, r3, #7
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d003      	beq.n	800eac4 <pvPortMalloc+0xcc>
 800eabc:	f7ff ff3c 	bl	800e938 <ulSetInterruptMask>
 800eac0:	bf00      	nop
 800eac2:	e7fd      	b.n	800eac0 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	685a      	ldr	r2, [r3, #4]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	1ad2      	subs	r2, r2, r3
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	687a      	ldr	r2, [r7, #4]
 800ead4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ead6:	68f8      	ldr	r0, [r7, #12]
 800ead8:	f000 f8e4 	bl	800eca4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eadc:	4b18      	ldr	r3, [pc, #96]	@ (800eb40 <pvPortMalloc+0x148>)
 800eade:	681a      	ldr	r2, [r3, #0]
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	1ad3      	subs	r3, r2, r3
 800eae6:	4a16      	ldr	r2, [pc, #88]	@ (800eb40 <pvPortMalloc+0x148>)
 800eae8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eaea:	4b15      	ldr	r3, [pc, #84]	@ (800eb40 <pvPortMalloc+0x148>)
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	4b16      	ldr	r3, [pc, #88]	@ (800eb48 <pvPortMalloc+0x150>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d203      	bcs.n	800eafe <pvPortMalloc+0x106>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eaf6:	4b12      	ldr	r3, [pc, #72]	@ (800eb40 <pvPortMalloc+0x148>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a13      	ldr	r2, [pc, #76]	@ (800eb48 <pvPortMalloc+0x150>)
 800eafc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800eb10:	4b0e      	ldr	r3, [pc, #56]	@ (800eb4c <pvPortMalloc+0x154>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	3301      	adds	r3, #1
 800eb16:	4a0d      	ldr	r2, [pc, #52]	@ (800eb4c <pvPortMalloc+0x154>)
 800eb18:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800eb1a:	f7fe fb8d 	bl	800d238 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	f003 0307 	and.w	r3, r3, #7
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d003      	beq.n	800eb30 <pvPortMalloc+0x138>
 800eb28:	f7ff ff06 	bl	800e938 <ulSetInterruptMask>
 800eb2c:	bf00      	nop
 800eb2e:	e7fd      	b.n	800eb2c <pvPortMalloc+0x134>
    return pvReturn;
 800eb30:	697b      	ldr	r3, [r7, #20]
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3720      	adds	r7, #32
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	2005da68 	.word	0x2005da68
 800eb40:	2005da6c 	.word	0x2005da6c
 800eb44:	2005da60 	.word	0x2005da60
 800eb48:	2005da70 	.word	0x2005da70
 800eb4c:	2005da74 	.word	0x2005da74

0800eb50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d03b      	beq.n	800ebda <vPortFree+0x8a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800eb62:	2308      	movs	r3, #8
 800eb64:	425b      	negs	r3, r3
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	4413      	add	r3, r2
 800eb6a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	db03      	blt.n	800eb80 <vPortFree+0x30>
 800eb78:	f7ff fede 	bl	800e938 <ulSetInterruptMask>
 800eb7c:	bf00      	nop
 800eb7e:	e7fd      	b.n	800eb7c <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d003      	beq.n	800eb90 <vPortFree+0x40>
 800eb88:	f7ff fed6 	bl	800e938 <ulSetInterruptMask>
 800eb8c:	bf00      	nop
 800eb8e:	e7fd      	b.n	800eb8c <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	0fdb      	lsrs	r3, r3, #31
 800eb96:	f003 0301 	and.w	r3, r3, #1
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d01c      	beq.n	800ebda <vPortFree+0x8a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d118      	bne.n	800ebda <vPortFree+0x8a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800ebb4:	f7fe fb32 	bl	800d21c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	685a      	ldr	r2, [r3, #4]
 800ebbc:	4b09      	ldr	r3, [pc, #36]	@ (800ebe4 <vPortFree+0x94>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	4a08      	ldr	r2, [pc, #32]	@ (800ebe4 <vPortFree+0x94>)
 800ebc4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ebc6:	68b8      	ldr	r0, [r7, #8]
 800ebc8:	f000 f86c 	bl	800eca4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800ebcc:	4b06      	ldr	r3, [pc, #24]	@ (800ebe8 <vPortFree+0x98>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	4a05      	ldr	r2, [pc, #20]	@ (800ebe8 <vPortFree+0x98>)
 800ebd4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800ebd6:	f7fe fb2f 	bl	800d238 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800ebda:	bf00      	nop
 800ebdc:	3710      	adds	r7, #16
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	2005da6c 	.word	0x2005da6c
 800ebe8:	2005da78 	.word	0x2005da78

0800ebec <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800ebec:	b480      	push	{r7}
 800ebee:	b085      	sub	sp, #20
 800ebf0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ebf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ebf6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800ebf8:	4b25      	ldr	r3, [pc, #148]	@ (800ec90 <prvHeapInit+0xa4>)
 800ebfa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f003 0307 	and.w	r3, r3, #7
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d00c      	beq.n	800ec20 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	3307      	adds	r3, #7
 800ec0a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f023 0307 	bic.w	r3, r3, #7
 800ec12:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800ec14:	68ba      	ldr	r2, [r7, #8]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	1ad3      	subs	r3, r2, r3
 800ec1a:	4a1d      	ldr	r2, [pc, #116]	@ (800ec90 <prvHeapInit+0xa4>)
 800ec1c:	4413      	add	r3, r2
 800ec1e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ec24:	4a1b      	ldr	r2, [pc, #108]	@ (800ec94 <prvHeapInit+0xa8>)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800ec2a:	4b1a      	ldr	r3, [pc, #104]	@ (800ec94 <prvHeapInit+0xa8>)
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	68ba      	ldr	r2, [r7, #8]
 800ec34:	4413      	add	r3, r2
 800ec36:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800ec38:	2208      	movs	r2, #8
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	1a9b      	subs	r3, r3, r2
 800ec3e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f023 0307 	bic.w	r3, r3, #7
 800ec46:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	4a13      	ldr	r2, [pc, #76]	@ (800ec98 <prvHeapInit+0xac>)
 800ec4c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800ec4e:	4b12      	ldr	r3, [pc, #72]	@ (800ec98 <prvHeapInit+0xac>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	2200      	movs	r2, #0
 800ec54:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800ec56:	4b10      	ldr	r3, [pc, #64]	@ (800ec98 <prvHeapInit+0xac>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	1ad2      	subs	r2, r2, r3
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ec98 <prvHeapInit+0xac>)
 800ec6e:	681a      	ldr	r2, [r3, #0]
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	4a08      	ldr	r2, [pc, #32]	@ (800ec9c <prvHeapInit+0xb0>)
 800ec7a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	4a07      	ldr	r2, [pc, #28]	@ (800eca0 <prvHeapInit+0xb4>)
 800ec82:	6013      	str	r3, [r2, #0]
}
 800ec84:	bf00      	nop
 800ec86:	3714      	adds	r7, #20
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr
 800ec90:	20055a60 	.word	0x20055a60
 800ec94:	2005da60 	.word	0x2005da60
 800ec98:	2005da68 	.word	0x2005da68
 800ec9c:	2005da70 	.word	0x2005da70
 800eca0:	2005da6c 	.word	0x2005da6c

0800eca4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800eca4:	b480      	push	{r7}
 800eca6:	b085      	sub	sp, #20
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ecac:	4b28      	ldr	r3, [pc, #160]	@ (800ed50 <prvInsertBlockIntoFreeList+0xac>)
 800ecae:	60fb      	str	r3, [r7, #12]
 800ecb0:	e002      	b.n	800ecb8 <prvInsertBlockIntoFreeList+0x14>
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	60fb      	str	r3, [r7, #12]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d8f7      	bhi.n	800ecb2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	68ba      	ldr	r2, [r7, #8]
 800eccc:	4413      	add	r3, r2
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d108      	bne.n	800ece6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	685a      	ldr	r2, [r3, #4]
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	441a      	add	r2, r3
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	68ba      	ldr	r2, [r7, #8]
 800ecf0:	441a      	add	r2, r3
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d118      	bne.n	800ed2c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681a      	ldr	r2, [r3, #0]
 800ecfe:	4b15      	ldr	r3, [pc, #84]	@ (800ed54 <prvInsertBlockIntoFreeList+0xb0>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d00d      	beq.n	800ed22 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	685a      	ldr	r2, [r3, #4]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	441a      	add	r2, r3
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	601a      	str	r2, [r3, #0]
 800ed20:	e008      	b.n	800ed34 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed22:	4b0c      	ldr	r3, [pc, #48]	@ (800ed54 <prvInsertBlockIntoFreeList+0xb0>)
 800ed24:	681a      	ldr	r2, [r3, #0]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	601a      	str	r2, [r3, #0]
 800ed2a:	e003      	b.n	800ed34 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800ed34:	68fa      	ldr	r2, [r7, #12]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d002      	beq.n	800ed42 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ed42:	bf00      	nop
 800ed44:	3714      	adds	r7, #20
 800ed46:	46bd      	mov	sp, r7
 800ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4c:	4770      	bx	lr
 800ed4e:	bf00      	nop
 800ed50:	2005da60 	.word	0x2005da60
 800ed54:	2005da68 	.word	0x2005da68

0800ed58 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ed62:	f007 fb79 	bl	8016458 <sys_timeouts_sleeptime>
 800ed66:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed6e:	d10b      	bne.n	800ed88 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ed70:	4813      	ldr	r0, [pc, #76]	@ (800edc0 <tcpip_timeouts_mbox_fetch+0x68>)
 800ed72:	f00a f8f6 	bl	8018f62 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ed76:	2200      	movs	r2, #0
 800ed78:	6839      	ldr	r1, [r7, #0]
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f00a f87e 	bl	8018e7c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ed80:	480f      	ldr	r0, [pc, #60]	@ (800edc0 <tcpip_timeouts_mbox_fetch+0x68>)
 800ed82:	f00a f8df 	bl	8018f44 <sys_mutex_lock>
    return;
 800ed86:	e018      	b.n	800edba <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d102      	bne.n	800ed94 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ed8e:	f007 fb29 	bl	80163e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ed92:	e7e6      	b.n	800ed62 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ed94:	480a      	ldr	r0, [pc, #40]	@ (800edc0 <tcpip_timeouts_mbox_fetch+0x68>)
 800ed96:	f00a f8e4 	bl	8018f62 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ed9a:	68fa      	ldr	r2, [r7, #12]
 800ed9c:	6839      	ldr	r1, [r7, #0]
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f00a f86c 	bl	8018e7c <sys_arch_mbox_fetch>
 800eda4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800eda6:	4806      	ldr	r0, [pc, #24]	@ (800edc0 <tcpip_timeouts_mbox_fetch+0x68>)
 800eda8:	f00a f8cc 	bl	8018f44 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb2:	d102      	bne.n	800edba <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800edb4:	f007 fb16 	bl	80163e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800edb8:	e7d3      	b.n	800ed62 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800edba:	3710      	adds	r7, #16
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	2005da88 	.word	0x2005da88

0800edc4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800edcc:	4810      	ldr	r0, [pc, #64]	@ (800ee10 <tcpip_thread+0x4c>)
 800edce:	f00a f8b9 	bl	8018f44 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800edd2:	4b10      	ldr	r3, [pc, #64]	@ (800ee14 <tcpip_thread+0x50>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d005      	beq.n	800ede6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800edda:	4b0e      	ldr	r3, [pc, #56]	@ (800ee14 <tcpip_thread+0x50>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	4a0e      	ldr	r2, [pc, #56]	@ (800ee18 <tcpip_thread+0x54>)
 800ede0:	6812      	ldr	r2, [r2, #0]
 800ede2:	4610      	mov	r0, r2
 800ede4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ede6:	f107 030c 	add.w	r3, r7, #12
 800edea:	4619      	mov	r1, r3
 800edec:	480b      	ldr	r0, [pc, #44]	@ (800ee1c <tcpip_thread+0x58>)
 800edee:	f7ff ffb3 	bl	800ed58 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d106      	bne.n	800ee06 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800edf8:	4b09      	ldr	r3, [pc, #36]	@ (800ee20 <tcpip_thread+0x5c>)
 800edfa:	2291      	movs	r2, #145	@ 0x91
 800edfc:	4909      	ldr	r1, [pc, #36]	@ (800ee24 <tcpip_thread+0x60>)
 800edfe:	480a      	ldr	r0, [pc, #40]	@ (800ee28 <tcpip_thread+0x64>)
 800ee00:	f00a f9fa 	bl	80191f8 <iprintf>
      continue;
 800ee04:	e003      	b.n	800ee0e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f000 f80f 	bl	800ee2c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ee0e:	e7ea      	b.n	800ede6 <tcpip_thread+0x22>
 800ee10:	2005da88 	.word	0x2005da88
 800ee14:	2005da7c 	.word	0x2005da7c
 800ee18:	2005da80 	.word	0x2005da80
 800ee1c:	2005da84 	.word	0x2005da84
 800ee20:	0801a0c8 	.word	0x0801a0c8
 800ee24:	0801a0f8 	.word	0x0801a0f8
 800ee28:	0801a118 	.word	0x0801a118

0800ee2c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	2b02      	cmp	r3, #2
 800ee3a:	d026      	beq.n	800ee8a <tcpip_thread_handle_msg+0x5e>
 800ee3c:	2b02      	cmp	r3, #2
 800ee3e:	dc2b      	bgt.n	800ee98 <tcpip_thread_handle_msg+0x6c>
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d002      	beq.n	800ee4a <tcpip_thread_handle_msg+0x1e>
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d015      	beq.n	800ee74 <tcpip_thread_handle_msg+0x48>
 800ee48:	e026      	b.n	800ee98 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	6850      	ldr	r0, [r2, #4]
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	6892      	ldr	r2, [r2, #8]
 800ee56:	4611      	mov	r1, r2
 800ee58:	4798      	blx	r3
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d004      	beq.n	800ee6a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	4618      	mov	r0, r3
 800ee66:	f001 fdc3 	bl	80109f0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ee6a:	6879      	ldr	r1, [r7, #4]
 800ee6c:	2009      	movs	r0, #9
 800ee6e:	f000 ff1b 	bl	800fca8 <memp_free>
      break;
 800ee72:	e018      	b.n	800eea6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	687a      	ldr	r2, [r7, #4]
 800ee7a:	6892      	ldr	r2, [r2, #8]
 800ee7c:	4610      	mov	r0, r2
 800ee7e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ee80:	6879      	ldr	r1, [r7, #4]
 800ee82:	2008      	movs	r0, #8
 800ee84:	f000 ff10 	bl	800fca8 <memp_free>
      break;
 800ee88:	e00d      	b.n	800eea6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	6892      	ldr	r2, [r2, #8]
 800ee92:	4610      	mov	r0, r2
 800ee94:	4798      	blx	r3
      break;
 800ee96:	e006      	b.n	800eea6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ee98:	4b05      	ldr	r3, [pc, #20]	@ (800eeb0 <tcpip_thread_handle_msg+0x84>)
 800ee9a:	22cf      	movs	r2, #207	@ 0xcf
 800ee9c:	4905      	ldr	r1, [pc, #20]	@ (800eeb4 <tcpip_thread_handle_msg+0x88>)
 800ee9e:	4806      	ldr	r0, [pc, #24]	@ (800eeb8 <tcpip_thread_handle_msg+0x8c>)
 800eea0:	f00a f9aa 	bl	80191f8 <iprintf>
      break;
 800eea4:	bf00      	nop
  }
}
 800eea6:	bf00      	nop
 800eea8:	3708      	adds	r7, #8
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	0801a0c8 	.word	0x0801a0c8
 800eeb4:	0801a0f8 	.word	0x0801a0f8
 800eeb8:	0801a118 	.word	0x0801a118

0800eebc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b086      	sub	sp, #24
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800eec8:	481a      	ldr	r0, [pc, #104]	@ (800ef34 <tcpip_inpkt+0x78>)
 800eeca:	f00a f808 	bl	8018ede <sys_mbox_valid>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d105      	bne.n	800eee0 <tcpip_inpkt+0x24>
 800eed4:	4b18      	ldr	r3, [pc, #96]	@ (800ef38 <tcpip_inpkt+0x7c>)
 800eed6:	22fc      	movs	r2, #252	@ 0xfc
 800eed8:	4918      	ldr	r1, [pc, #96]	@ (800ef3c <tcpip_inpkt+0x80>)
 800eeda:	4819      	ldr	r0, [pc, #100]	@ (800ef40 <tcpip_inpkt+0x84>)
 800eedc:	f00a f98c 	bl	80191f8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800eee0:	2009      	movs	r0, #9
 800eee2:	f000 fe6b 	bl	800fbbc <memp_malloc>
 800eee6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d102      	bne.n	800eef4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800eeee:	f04f 33ff 	mov.w	r3, #4294967295
 800eef2:	e01a      	b.n	800ef2a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	2200      	movs	r2, #0
 800eef8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	68fa      	ldr	r2, [r7, #12]
 800eefe:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	68ba      	ldr	r2, [r7, #8]
 800ef04:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ef0c:	6979      	ldr	r1, [r7, #20]
 800ef0e:	4809      	ldr	r0, [pc, #36]	@ (800ef34 <tcpip_inpkt+0x78>)
 800ef10:	f009 ff9a 	bl	8018e48 <sys_mbox_trypost>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d006      	beq.n	800ef28 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ef1a:	6979      	ldr	r1, [r7, #20]
 800ef1c:	2009      	movs	r0, #9
 800ef1e:	f000 fec3 	bl	800fca8 <memp_free>
    return ERR_MEM;
 800ef22:	f04f 33ff 	mov.w	r3, #4294967295
 800ef26:	e000      	b.n	800ef2a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ef28:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3718      	adds	r7, #24
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop
 800ef34:	2005da84 	.word	0x2005da84
 800ef38:	0801a0c8 	.word	0x0801a0c8
 800ef3c:	0801a140 	.word	0x0801a140
 800ef40:	0801a118 	.word	0x0801a118

0800ef44 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b082      	sub	sp, #8
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ef54:	f003 0318 	and.w	r3, r3, #24
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d006      	beq.n	800ef6a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ef5c:	4a08      	ldr	r2, [pc, #32]	@ (800ef80 <tcpip_input+0x3c>)
 800ef5e:	6839      	ldr	r1, [r7, #0]
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f7ff ffab 	bl	800eebc <tcpip_inpkt>
 800ef66:	4603      	mov	r3, r0
 800ef68:	e005      	b.n	800ef76 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ef6a:	4a06      	ldr	r2, [pc, #24]	@ (800ef84 <tcpip_input+0x40>)
 800ef6c:	6839      	ldr	r1, [r7, #0]
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f7ff ffa4 	bl	800eebc <tcpip_inpkt>
 800ef74:	4603      	mov	r3, r0
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3708      	adds	r7, #8
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	08018c69 	.word	0x08018c69
 800ef84:	08017b71 	.word	0x08017b71

0800ef88 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ef92:	4819      	ldr	r0, [pc, #100]	@ (800eff8 <tcpip_try_callback+0x70>)
 800ef94:	f009 ffa3 	bl	8018ede <sys_mbox_valid>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d106      	bne.n	800efac <tcpip_try_callback+0x24>
 800ef9e:	4b17      	ldr	r3, [pc, #92]	@ (800effc <tcpip_try_callback+0x74>)
 800efa0:	f240 125d 	movw	r2, #349	@ 0x15d
 800efa4:	4916      	ldr	r1, [pc, #88]	@ (800f000 <tcpip_try_callback+0x78>)
 800efa6:	4817      	ldr	r0, [pc, #92]	@ (800f004 <tcpip_try_callback+0x7c>)
 800efa8:	f00a f926 	bl	80191f8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800efac:	2008      	movs	r0, #8
 800efae:	f000 fe05 	bl	800fbbc <memp_malloc>
 800efb2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d102      	bne.n	800efc0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800efba:	f04f 33ff 	mov.w	r3, #4294967295
 800efbe:	e017      	b.n	800eff0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2201      	movs	r2, #1
 800efc4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	683a      	ldr	r2, [r7, #0]
 800efd0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800efd2:	68f9      	ldr	r1, [r7, #12]
 800efd4:	4808      	ldr	r0, [pc, #32]	@ (800eff8 <tcpip_try_callback+0x70>)
 800efd6:	f009 ff37 	bl	8018e48 <sys_mbox_trypost>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d006      	beq.n	800efee <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800efe0:	68f9      	ldr	r1, [r7, #12]
 800efe2:	2008      	movs	r0, #8
 800efe4:	f000 fe60 	bl	800fca8 <memp_free>
    return ERR_MEM;
 800efe8:	f04f 33ff 	mov.w	r3, #4294967295
 800efec:	e000      	b.n	800eff0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800efee:	2300      	movs	r3, #0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	2005da84 	.word	0x2005da84
 800effc:	0801a0c8 	.word	0x0801a0c8
 800f000:	0801a140 	.word	0x0801a140
 800f004:	0801a118 	.word	0x0801a118

0800f008 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af02      	add	r7, sp, #8
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f012:	f000 f92d 	bl	800f270 <lwip_init>

  tcpip_init_done = initfunc;
 800f016:	4a17      	ldr	r2, [pc, #92]	@ (800f074 <tcpip_init+0x6c>)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f01c:	4a16      	ldr	r2, [pc, #88]	@ (800f078 <tcpip_init+0x70>)
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f022:	2106      	movs	r1, #6
 800f024:	4815      	ldr	r0, [pc, #84]	@ (800f07c <tcpip_init+0x74>)
 800f026:	f009 fef5 	bl	8018e14 <sys_mbox_new>
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d006      	beq.n	800f03e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f030:	4b13      	ldr	r3, [pc, #76]	@ (800f080 <tcpip_init+0x78>)
 800f032:	f240 2261 	movw	r2, #609	@ 0x261
 800f036:	4913      	ldr	r1, [pc, #76]	@ (800f084 <tcpip_init+0x7c>)
 800f038:	4813      	ldr	r0, [pc, #76]	@ (800f088 <tcpip_init+0x80>)
 800f03a:	f00a f8dd 	bl	80191f8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f03e:	4813      	ldr	r0, [pc, #76]	@ (800f08c <tcpip_init+0x84>)
 800f040:	f009 ff6a 	bl	8018f18 <sys_mutex_new>
 800f044:	4603      	mov	r3, r0
 800f046:	2b00      	cmp	r3, #0
 800f048:	d006      	beq.n	800f058 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f04a:	4b0d      	ldr	r3, [pc, #52]	@ (800f080 <tcpip_init+0x78>)
 800f04c:	f240 2265 	movw	r2, #613	@ 0x265
 800f050:	490f      	ldr	r1, [pc, #60]	@ (800f090 <tcpip_init+0x88>)
 800f052:	480d      	ldr	r0, [pc, #52]	@ (800f088 <tcpip_init+0x80>)
 800f054:	f00a f8d0 	bl	80191f8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f058:	2318      	movs	r3, #24
 800f05a:	9300      	str	r3, [sp, #0]
 800f05c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f060:	2200      	movs	r2, #0
 800f062:	490c      	ldr	r1, [pc, #48]	@ (800f094 <tcpip_init+0x8c>)
 800f064:	480c      	ldr	r0, [pc, #48]	@ (800f098 <tcpip_init+0x90>)
 800f066:	f009 ff89 	bl	8018f7c <sys_thread_new>
}
 800f06a:	bf00      	nop
 800f06c:	3708      	adds	r7, #8
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	2005da7c 	.word	0x2005da7c
 800f078:	2005da80 	.word	0x2005da80
 800f07c:	2005da84 	.word	0x2005da84
 800f080:	0801a0c8 	.word	0x0801a0c8
 800f084:	0801a150 	.word	0x0801a150
 800f088:	0801a118 	.word	0x0801a118
 800f08c:	2005da88 	.word	0x2005da88
 800f090:	0801a174 	.word	0x0801a174
 800f094:	0800edc5 	.word	0x0800edc5
 800f098:	0801a198 	.word	0x0801a198

0800f09c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b083      	sub	sp, #12
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f0a6:	88fb      	ldrh	r3, [r7, #6]
 800f0a8:	021b      	lsls	r3, r3, #8
 800f0aa:	b21a      	sxth	r2, r3
 800f0ac:	88fb      	ldrh	r3, [r7, #6]
 800f0ae:	0a1b      	lsrs	r3, r3, #8
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	b21b      	sxth	r3, r3
 800f0b4:	4313      	orrs	r3, r2
 800f0b6:	b21b      	sxth	r3, r3
 800f0b8:	b29b      	uxth	r3, r3
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	370c      	adds	r7, #12
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr

0800f0c6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f0c6:	b480      	push	{r7}
 800f0c8:	b083      	sub	sp, #12
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	061a      	lsls	r2, r3, #24
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	021b      	lsls	r3, r3, #8
 800f0d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f0da:	431a      	orrs	r2, r3
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	0a1b      	lsrs	r3, r3, #8
 800f0e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f0e4:	431a      	orrs	r2, r3
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	0e1b      	lsrs	r3, r3, #24
 800f0ea:	4313      	orrs	r3, r2
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	370c      	adds	r7, #12
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr

0800f0f8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b089      	sub	sp, #36	@ 0x24
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800f106:	2300      	movs	r3, #0
 800f108:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800f10a:	2300      	movs	r3, #0
 800f10c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	f003 0301 	and.w	r3, r3, #1
 800f114:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d00d      	beq.n	800f138 <lwip_standard_chksum+0x40>
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	dd0a      	ble.n	800f138 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800f122:	69fa      	ldr	r2, [r7, #28]
 800f124:	1c53      	adds	r3, r2, #1
 800f126:	61fb      	str	r3, [r7, #28]
 800f128:	f107 030e 	add.w	r3, r7, #14
 800f12c:	3301      	adds	r3, #1
 800f12e:	7812      	ldrb	r2, [r2, #0]
 800f130:	701a      	strb	r2, [r3, #0]
    len--;
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	3b01      	subs	r3, #1
 800f136:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800f13c:	e00a      	b.n	800f154 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800f13e:	69bb      	ldr	r3, [r7, #24]
 800f140:	1c9a      	adds	r2, r3, #2
 800f142:	61ba      	str	r2, [r7, #24]
 800f144:	881b      	ldrh	r3, [r3, #0]
 800f146:	461a      	mov	r2, r3
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	4413      	add	r3, r2
 800f14c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	3b02      	subs	r3, #2
 800f152:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	2b01      	cmp	r3, #1
 800f158:	dcf1      	bgt.n	800f13e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	dd04      	ble.n	800f16a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800f160:	f107 030e 	add.w	r3, r7, #14
 800f164:	69ba      	ldr	r2, [r7, #24]
 800f166:	7812      	ldrb	r2, [r2, #0]
 800f168:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800f16a:	89fb      	ldrh	r3, [r7, #14]
 800f16c:	461a      	mov	r2, r3
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	4413      	add	r3, r2
 800f172:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	0c1a      	lsrs	r2, r3, #16
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	4413      	add	r3, r2
 800f17e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	0c1a      	lsrs	r2, r3, #16
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	b29b      	uxth	r3, r3
 800f188:	4413      	add	r3, r2
 800f18a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d007      	beq.n	800f1a2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	021b      	lsls	r3, r3, #8
 800f196:	b29a      	uxth	r2, r3
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	0a1b      	lsrs	r3, r3, #8
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	4313      	orrs	r3, r2
 800f1a0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	b29b      	uxth	r3, r3
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3724      	adds	r7, #36	@ 0x24
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr

0800f1b2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800f1b2:	b580      	push	{r7, lr}
 800f1b4:	b082      	sub	sp, #8
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
 800f1ba:	460b      	mov	r3, r1
 800f1bc:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800f1be:	887b      	ldrh	r3, [r7, #2]
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f7ff ff98 	bl	800f0f8 <lwip_standard_chksum>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	43db      	mvns	r3, r3
 800f1cc:	b29b      	uxth	r3, r3
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3708      	adds	r7, #8
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800f1d6:	b580      	push	{r7, lr}
 800f1d8:	b086      	sub	sp, #24
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	613b      	str	r3, [r7, #16]
 800f1ea:	e02b      	b.n	800f244 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	685a      	ldr	r2, [r3, #4]
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	895b      	ldrh	r3, [r3, #10]
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	4610      	mov	r0, r2
 800f1f8:	f7ff ff7e 	bl	800f0f8 <lwip_standard_chksum>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	461a      	mov	r2, r3
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	4413      	add	r3, r2
 800f204:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	0c1a      	lsrs	r2, r3, #16
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	b29b      	uxth	r3, r3
 800f20e:	4413      	add	r3, r2
 800f210:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800f212:	693b      	ldr	r3, [r7, #16]
 800f214:	895b      	ldrh	r3, [r3, #10]
 800f216:	f003 0301 	and.w	r3, r3, #1
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d00e      	beq.n	800f23e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2b00      	cmp	r3, #0
 800f224:	bf0c      	ite	eq
 800f226:	2301      	moveq	r3, #1
 800f228:	2300      	movne	r3, #0
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	021b      	lsls	r3, r3, #8
 800f232:	b29a      	uxth	r2, r3
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	0a1b      	lsrs	r3, r3, #8
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	4313      	orrs	r3, r2
 800f23c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	613b      	str	r3, [r7, #16]
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d1d0      	bne.n	800f1ec <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d007      	beq.n	800f260 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	021b      	lsls	r3, r3, #8
 800f254:	b29a      	uxth	r2, r3
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	0a1b      	lsrs	r3, r3, #8
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	4313      	orrs	r3, r2
 800f25e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	b29b      	uxth	r3, r3
 800f264:	43db      	mvns	r3, r3
 800f266:	b29b      	uxth	r3, r3
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3718      	adds	r7, #24
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f276:	2300      	movs	r3, #0
 800f278:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f27a:	f009 fe41 	bl	8018f00 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f27e:	f000 f8d5 	bl	800f42c <mem_init>
  memp_init();
 800f282:	f000 fc2d 	bl	800fae0 <memp_init>
  pbuf_init();
  netif_init();
 800f286:	f000 fd39 	bl	800fcfc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f28a:	f007 f91d 	bl	80164c8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f28e:	f001 fe49 	bl	8010f24 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f292:	f007 f85f 	bl	8016354 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f296:	bf00      	nop
 800f298:	3708      	adds	r7, #8
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
	...

0800f2a0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f2aa:	4b05      	ldr	r3, [pc, #20]	@ (800f2c0 <ptr_to_mem+0x20>)
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	88fb      	ldrh	r3, [r7, #6]
 800f2b0:	4413      	add	r3, r2
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	370c      	adds	r7, #12
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	2005daa4 	.word	0x2005daa4

0800f2c4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f2cc:	4b05      	ldr	r3, [pc, #20]	@ (800f2e4 <mem_to_ptr+0x20>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	687a      	ldr	r2, [r7, #4]
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	b29b      	uxth	r3, r3
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	370c      	adds	r7, #12
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop
 800f2e4:	2005daa4 	.word	0x2005daa4

0800f2e8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f2e8:	b590      	push	{r4, r7, lr}
 800f2ea:	b085      	sub	sp, #20
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f2f0:	4b45      	ldr	r3, [pc, #276]	@ (800f408 <plug_holes+0x120>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	687a      	ldr	r2, [r7, #4]
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d206      	bcs.n	800f308 <plug_holes+0x20>
 800f2fa:	4b44      	ldr	r3, [pc, #272]	@ (800f40c <plug_holes+0x124>)
 800f2fc:	f240 12df 	movw	r2, #479	@ 0x1df
 800f300:	4943      	ldr	r1, [pc, #268]	@ (800f410 <plug_holes+0x128>)
 800f302:	4844      	ldr	r0, [pc, #272]	@ (800f414 <plug_holes+0x12c>)
 800f304:	f009 ff78 	bl	80191f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f308:	4b43      	ldr	r3, [pc, #268]	@ (800f418 <plug_holes+0x130>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	687a      	ldr	r2, [r7, #4]
 800f30e:	429a      	cmp	r2, r3
 800f310:	d306      	bcc.n	800f320 <plug_holes+0x38>
 800f312:	4b3e      	ldr	r3, [pc, #248]	@ (800f40c <plug_holes+0x124>)
 800f314:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f318:	4940      	ldr	r1, [pc, #256]	@ (800f41c <plug_holes+0x134>)
 800f31a:	483e      	ldr	r0, [pc, #248]	@ (800f414 <plug_holes+0x12c>)
 800f31c:	f009 ff6c 	bl	80191f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	791b      	ldrb	r3, [r3, #4]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d006      	beq.n	800f336 <plug_holes+0x4e>
 800f328:	4b38      	ldr	r3, [pc, #224]	@ (800f40c <plug_holes+0x124>)
 800f32a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800f32e:	493c      	ldr	r1, [pc, #240]	@ (800f420 <plug_holes+0x138>)
 800f330:	4838      	ldr	r0, [pc, #224]	@ (800f414 <plug_holes+0x12c>)
 800f332:	f009 ff61 	bl	80191f8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	881b      	ldrh	r3, [r3, #0]
 800f33a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f33e:	d906      	bls.n	800f34e <plug_holes+0x66>
 800f340:	4b32      	ldr	r3, [pc, #200]	@ (800f40c <plug_holes+0x124>)
 800f342:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800f346:	4937      	ldr	r1, [pc, #220]	@ (800f424 <plug_holes+0x13c>)
 800f348:	4832      	ldr	r0, [pc, #200]	@ (800f414 <plug_holes+0x12c>)
 800f34a:	f009 ff55 	bl	80191f8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	881b      	ldrh	r3, [r3, #0]
 800f352:	4618      	mov	r0, r3
 800f354:	f7ff ffa4 	bl	800f2a0 <ptr_to_mem>
 800f358:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f35a:	687a      	ldr	r2, [r7, #4]
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	429a      	cmp	r2, r3
 800f360:	d024      	beq.n	800f3ac <plug_holes+0xc4>
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	791b      	ldrb	r3, [r3, #4]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d120      	bne.n	800f3ac <plug_holes+0xc4>
 800f36a:	4b2b      	ldr	r3, [pc, #172]	@ (800f418 <plug_holes+0x130>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	68fa      	ldr	r2, [r7, #12]
 800f370:	429a      	cmp	r2, r3
 800f372:	d01b      	beq.n	800f3ac <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f374:	4b2c      	ldr	r3, [pc, #176]	@ (800f428 <plug_holes+0x140>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	68fa      	ldr	r2, [r7, #12]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d102      	bne.n	800f384 <plug_holes+0x9c>
      lfree = mem;
 800f37e:	4a2a      	ldr	r2, [pc, #168]	@ (800f428 <plug_holes+0x140>)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	881a      	ldrh	r2, [r3, #0]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	881b      	ldrh	r3, [r3, #0]
 800f390:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f394:	d00a      	beq.n	800f3ac <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	881b      	ldrh	r3, [r3, #0]
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7ff ff80 	bl	800f2a0 <ptr_to_mem>
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f7ff ff8e 	bl	800f2c4 <mem_to_ptr>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	885b      	ldrh	r3, [r3, #2]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7ff ff75 	bl	800f2a0 <ptr_to_mem>
 800f3b6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f3b8:	68ba      	ldr	r2, [r7, #8]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d01f      	beq.n	800f400 <plug_holes+0x118>
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	791b      	ldrb	r3, [r3, #4]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d11b      	bne.n	800f400 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f3c8:	4b17      	ldr	r3, [pc, #92]	@ (800f428 <plug_holes+0x140>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d102      	bne.n	800f3d8 <plug_holes+0xf0>
      lfree = pmem;
 800f3d2:	4a15      	ldr	r2, [pc, #84]	@ (800f428 <plug_holes+0x140>)
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	881a      	ldrh	r2, [r3, #0]
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	881b      	ldrh	r3, [r3, #0]
 800f3e4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f3e8:	d00a      	beq.n	800f400 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	881b      	ldrh	r3, [r3, #0]
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7ff ff56 	bl	800f2a0 <ptr_to_mem>
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	68b8      	ldr	r0, [r7, #8]
 800f3f8:	f7ff ff64 	bl	800f2c4 <mem_to_ptr>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f400:	bf00      	nop
 800f402:	3714      	adds	r7, #20
 800f404:	46bd      	mov	sp, r7
 800f406:	bd90      	pop	{r4, r7, pc}
 800f408:	2005daa4 	.word	0x2005daa4
 800f40c:	0801a1a8 	.word	0x0801a1a8
 800f410:	0801a1d8 	.word	0x0801a1d8
 800f414:	0801a1f0 	.word	0x0801a1f0
 800f418:	2005daa8 	.word	0x2005daa8
 800f41c:	0801a218 	.word	0x0801a218
 800f420:	0801a234 	.word	0x0801a234
 800f424:	0801a250 	.word	0x0801a250
 800f428:	2005dab0 	.word	0x2005dab0

0800f42c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f432:	4b1d      	ldr	r3, [pc, #116]	@ (800f4a8 <mem_init+0x7c>)
 800f434:	4a1d      	ldr	r2, [pc, #116]	@ (800f4ac <mem_init+0x80>)
 800f436:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f438:	4b1b      	ldr	r3, [pc, #108]	@ (800f4a8 <mem_init+0x7c>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800f444:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2200      	movs	r2, #0
 800f44a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2200      	movs	r2, #0
 800f450:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f452:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800f456:	f7ff ff23 	bl	800f2a0 <ptr_to_mem>
 800f45a:	4603      	mov	r3, r0
 800f45c:	4a14      	ldr	r2, [pc, #80]	@ (800f4b0 <mem_init+0x84>)
 800f45e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f460:	4b13      	ldr	r3, [pc, #76]	@ (800f4b0 <mem_init+0x84>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2201      	movs	r2, #1
 800f466:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f468:	4b11      	ldr	r3, [pc, #68]	@ (800f4b0 <mem_init+0x84>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800f470:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f472:	4b0f      	ldr	r3, [pc, #60]	@ (800f4b0 <mem_init+0x84>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800f47a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f47c:	4b0a      	ldr	r3, [pc, #40]	@ (800f4a8 <mem_init+0x7c>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	4a0c      	ldr	r2, [pc, #48]	@ (800f4b4 <mem_init+0x88>)
 800f482:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f484:	480c      	ldr	r0, [pc, #48]	@ (800f4b8 <mem_init+0x8c>)
 800f486:	f009 fd47 	bl	8018f18 <sys_mutex_new>
 800f48a:	4603      	mov	r3, r0
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d006      	beq.n	800f49e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f490:	4b0a      	ldr	r3, [pc, #40]	@ (800f4bc <mem_init+0x90>)
 800f492:	f240 221f 	movw	r2, #543	@ 0x21f
 800f496:	490a      	ldr	r1, [pc, #40]	@ (800f4c0 <mem_init+0x94>)
 800f498:	480a      	ldr	r0, [pc, #40]	@ (800f4c4 <mem_init+0x98>)
 800f49a:	f009 fead 	bl	80191f8 <iprintf>
  }
}
 800f49e:	bf00      	nop
 800f4a0:	3708      	adds	r7, #8
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	2005daa4 	.word	0x2005daa4
 800f4ac:	20044000 	.word	0x20044000
 800f4b0:	2005daa8 	.word	0x2005daa8
 800f4b4:	2005dab0 	.word	0x2005dab0
 800f4b8:	2005daac 	.word	0x2005daac
 800f4bc:	0801a1a8 	.word	0x0801a1a8
 800f4c0:	0801a27c 	.word	0x0801a27c
 800f4c4:	0801a1f0 	.word	0x0801a1f0

0800f4c8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b086      	sub	sp, #24
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f7ff fef7 	bl	800f2c4 <mem_to_ptr>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	881b      	ldrh	r3, [r3, #0]
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7ff fede 	bl	800f2a0 <ptr_to_mem>
 800f4e4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	885b      	ldrh	r3, [r3, #2]
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7ff fed8 	bl	800f2a0 <ptr_to_mem>
 800f4f0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	881b      	ldrh	r3, [r3, #0]
 800f4f6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f4fa:	d818      	bhi.n	800f52e <mem_link_valid+0x66>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	885b      	ldrh	r3, [r3, #2]
 800f500:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f504:	d813      	bhi.n	800f52e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f50a:	8afa      	ldrh	r2, [r7, #22]
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d004      	beq.n	800f51a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	881b      	ldrh	r3, [r3, #0]
 800f514:	8afa      	ldrh	r2, [r7, #22]
 800f516:	429a      	cmp	r2, r3
 800f518:	d109      	bne.n	800f52e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f51a:	4b08      	ldr	r3, [pc, #32]	@ (800f53c <mem_link_valid+0x74>)
 800f51c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f51e:	693a      	ldr	r2, [r7, #16]
 800f520:	429a      	cmp	r2, r3
 800f522:	d006      	beq.n	800f532 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	885b      	ldrh	r3, [r3, #2]
 800f528:	8afa      	ldrh	r2, [r7, #22]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d001      	beq.n	800f532 <mem_link_valid+0x6a>
    return 0;
 800f52e:	2300      	movs	r3, #0
 800f530:	e000      	b.n	800f534 <mem_link_valid+0x6c>
  }
  return 1;
 800f532:	2301      	movs	r3, #1
}
 800f534:	4618      	mov	r0, r3
 800f536:	3718      	adds	r7, #24
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	2005daa8 	.word	0x2005daa8

0800f540 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b088      	sub	sp, #32
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d070      	beq.n	800f630 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f003 0303 	and.w	r3, r3, #3
 800f554:	2b00      	cmp	r3, #0
 800f556:	d00d      	beq.n	800f574 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f558:	4b37      	ldr	r3, [pc, #220]	@ (800f638 <mem_free+0xf8>)
 800f55a:	f240 2273 	movw	r2, #627	@ 0x273
 800f55e:	4937      	ldr	r1, [pc, #220]	@ (800f63c <mem_free+0xfc>)
 800f560:	4837      	ldr	r0, [pc, #220]	@ (800f640 <mem_free+0x100>)
 800f562:	f009 fe49 	bl	80191f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f566:	f009 fd29 	bl	8018fbc <sys_arch_protect>
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	68f8      	ldr	r0, [r7, #12]
 800f56e:	f009 fd33 	bl	8018fd8 <sys_arch_unprotect>
    return;
 800f572:	e05e      	b.n	800f632 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	3b08      	subs	r3, #8
 800f578:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f57a:	4b32      	ldr	r3, [pc, #200]	@ (800f644 <mem_free+0x104>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	69fa      	ldr	r2, [r7, #28]
 800f580:	429a      	cmp	r2, r3
 800f582:	d306      	bcc.n	800f592 <mem_free+0x52>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f103 020c 	add.w	r2, r3, #12
 800f58a:	4b2f      	ldr	r3, [pc, #188]	@ (800f648 <mem_free+0x108>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d90d      	bls.n	800f5ae <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f592:	4b29      	ldr	r3, [pc, #164]	@ (800f638 <mem_free+0xf8>)
 800f594:	f240 227f 	movw	r2, #639	@ 0x27f
 800f598:	492c      	ldr	r1, [pc, #176]	@ (800f64c <mem_free+0x10c>)
 800f59a:	4829      	ldr	r0, [pc, #164]	@ (800f640 <mem_free+0x100>)
 800f59c:	f009 fe2c 	bl	80191f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f5a0:	f009 fd0c 	bl	8018fbc <sys_arch_protect>
 800f5a4:	6138      	str	r0, [r7, #16]
 800f5a6:	6938      	ldr	r0, [r7, #16]
 800f5a8:	f009 fd16 	bl	8018fd8 <sys_arch_unprotect>
    return;
 800f5ac:	e041      	b.n	800f632 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f5ae:	4828      	ldr	r0, [pc, #160]	@ (800f650 <mem_free+0x110>)
 800f5b0:	f009 fcc8 	bl	8018f44 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f5b4:	69fb      	ldr	r3, [r7, #28]
 800f5b6:	791b      	ldrb	r3, [r3, #4]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d110      	bne.n	800f5de <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f5bc:	4b1e      	ldr	r3, [pc, #120]	@ (800f638 <mem_free+0xf8>)
 800f5be:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800f5c2:	4924      	ldr	r1, [pc, #144]	@ (800f654 <mem_free+0x114>)
 800f5c4:	481e      	ldr	r0, [pc, #120]	@ (800f640 <mem_free+0x100>)
 800f5c6:	f009 fe17 	bl	80191f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f5ca:	4821      	ldr	r0, [pc, #132]	@ (800f650 <mem_free+0x110>)
 800f5cc:	f009 fcc9 	bl	8018f62 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f5d0:	f009 fcf4 	bl	8018fbc <sys_arch_protect>
 800f5d4:	6178      	str	r0, [r7, #20]
 800f5d6:	6978      	ldr	r0, [r7, #20]
 800f5d8:	f009 fcfe 	bl	8018fd8 <sys_arch_unprotect>
    return;
 800f5dc:	e029      	b.n	800f632 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f5de:	69f8      	ldr	r0, [r7, #28]
 800f5e0:	f7ff ff72 	bl	800f4c8 <mem_link_valid>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d110      	bne.n	800f60c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f5ea:	4b13      	ldr	r3, [pc, #76]	@ (800f638 <mem_free+0xf8>)
 800f5ec:	f240 2295 	movw	r2, #661	@ 0x295
 800f5f0:	4919      	ldr	r1, [pc, #100]	@ (800f658 <mem_free+0x118>)
 800f5f2:	4813      	ldr	r0, [pc, #76]	@ (800f640 <mem_free+0x100>)
 800f5f4:	f009 fe00 	bl	80191f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f5f8:	4815      	ldr	r0, [pc, #84]	@ (800f650 <mem_free+0x110>)
 800f5fa:	f009 fcb2 	bl	8018f62 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f5fe:	f009 fcdd 	bl	8018fbc <sys_arch_protect>
 800f602:	61b8      	str	r0, [r7, #24]
 800f604:	69b8      	ldr	r0, [r7, #24]
 800f606:	f009 fce7 	bl	8018fd8 <sys_arch_unprotect>
    return;
 800f60a:	e012      	b.n	800f632 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	2200      	movs	r2, #0
 800f610:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f612:	4b12      	ldr	r3, [pc, #72]	@ (800f65c <mem_free+0x11c>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	69fa      	ldr	r2, [r7, #28]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d202      	bcs.n	800f622 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f61c:	4a0f      	ldr	r2, [pc, #60]	@ (800f65c <mem_free+0x11c>)
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f622:	69f8      	ldr	r0, [r7, #28]
 800f624:	f7ff fe60 	bl	800f2e8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f628:	4809      	ldr	r0, [pc, #36]	@ (800f650 <mem_free+0x110>)
 800f62a:	f009 fc9a 	bl	8018f62 <sys_mutex_unlock>
 800f62e:	e000      	b.n	800f632 <mem_free+0xf2>
    return;
 800f630:	bf00      	nop
}
 800f632:	3720      	adds	r7, #32
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}
 800f638:	0801a1a8 	.word	0x0801a1a8
 800f63c:	0801a298 	.word	0x0801a298
 800f640:	0801a1f0 	.word	0x0801a1f0
 800f644:	2005daa4 	.word	0x2005daa4
 800f648:	2005daa8 	.word	0x2005daa8
 800f64c:	0801a2bc 	.word	0x0801a2bc
 800f650:	2005daac 	.word	0x2005daac
 800f654:	0801a2d8 	.word	0x0801a2d8
 800f658:	0801a300 	.word	0x0801a300
 800f65c:	2005dab0 	.word	0x2005dab0

0800f660 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b088      	sub	sp, #32
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	460b      	mov	r3, r1
 800f66a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f66c:	887b      	ldrh	r3, [r7, #2]
 800f66e:	3303      	adds	r3, #3
 800f670:	b29b      	uxth	r3, r3
 800f672:	f023 0303 	bic.w	r3, r3, #3
 800f676:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f678:	8bfb      	ldrh	r3, [r7, #30]
 800f67a:	2b0b      	cmp	r3, #11
 800f67c:	d801      	bhi.n	800f682 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f67e:	230c      	movs	r3, #12
 800f680:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f682:	8bfb      	ldrh	r3, [r7, #30]
 800f684:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f688:	d803      	bhi.n	800f692 <mem_trim+0x32>
 800f68a:	8bfa      	ldrh	r2, [r7, #30]
 800f68c:	887b      	ldrh	r3, [r7, #2]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d201      	bcs.n	800f696 <mem_trim+0x36>
    return NULL;
 800f692:	2300      	movs	r3, #0
 800f694:	e0d8      	b.n	800f848 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f696:	4b6e      	ldr	r3, [pc, #440]	@ (800f850 <mem_trim+0x1f0>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	687a      	ldr	r2, [r7, #4]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d304      	bcc.n	800f6aa <mem_trim+0x4a>
 800f6a0:	4b6c      	ldr	r3, [pc, #432]	@ (800f854 <mem_trim+0x1f4>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	687a      	ldr	r2, [r7, #4]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d306      	bcc.n	800f6b8 <mem_trim+0x58>
 800f6aa:	4b6b      	ldr	r3, [pc, #428]	@ (800f858 <mem_trim+0x1f8>)
 800f6ac:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f6b0:	496a      	ldr	r1, [pc, #424]	@ (800f85c <mem_trim+0x1fc>)
 800f6b2:	486b      	ldr	r0, [pc, #428]	@ (800f860 <mem_trim+0x200>)
 800f6b4:	f009 fda0 	bl	80191f8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f6b8:	4b65      	ldr	r3, [pc, #404]	@ (800f850 <mem_trim+0x1f0>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	687a      	ldr	r2, [r7, #4]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d304      	bcc.n	800f6cc <mem_trim+0x6c>
 800f6c2:	4b64      	ldr	r3, [pc, #400]	@ (800f854 <mem_trim+0x1f4>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d307      	bcc.n	800f6dc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f6cc:	f009 fc76 	bl	8018fbc <sys_arch_protect>
 800f6d0:	60b8      	str	r0, [r7, #8]
 800f6d2:	68b8      	ldr	r0, [r7, #8]
 800f6d4:	f009 fc80 	bl	8018fd8 <sys_arch_unprotect>
    return rmem;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	e0b5      	b.n	800f848 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	3b08      	subs	r3, #8
 800f6e0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f6e2:	69b8      	ldr	r0, [r7, #24]
 800f6e4:	f7ff fdee 	bl	800f2c4 <mem_to_ptr>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f6ec:	69bb      	ldr	r3, [r7, #24]
 800f6ee:	881a      	ldrh	r2, [r3, #0]
 800f6f0:	8afb      	ldrh	r3, [r7, #22]
 800f6f2:	1ad3      	subs	r3, r2, r3
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	3b08      	subs	r3, #8
 800f6f8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f6fa:	8bfa      	ldrh	r2, [r7, #30]
 800f6fc:	8abb      	ldrh	r3, [r7, #20]
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d906      	bls.n	800f710 <mem_trim+0xb0>
 800f702:	4b55      	ldr	r3, [pc, #340]	@ (800f858 <mem_trim+0x1f8>)
 800f704:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800f708:	4956      	ldr	r1, [pc, #344]	@ (800f864 <mem_trim+0x204>)
 800f70a:	4855      	ldr	r0, [pc, #340]	@ (800f860 <mem_trim+0x200>)
 800f70c:	f009 fd74 	bl	80191f8 <iprintf>
  if (newsize > size) {
 800f710:	8bfa      	ldrh	r2, [r7, #30]
 800f712:	8abb      	ldrh	r3, [r7, #20]
 800f714:	429a      	cmp	r2, r3
 800f716:	d901      	bls.n	800f71c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f718:	2300      	movs	r3, #0
 800f71a:	e095      	b.n	800f848 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f71c:	8bfa      	ldrh	r2, [r7, #30]
 800f71e:	8abb      	ldrh	r3, [r7, #20]
 800f720:	429a      	cmp	r2, r3
 800f722:	d101      	bne.n	800f728 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	e08f      	b.n	800f848 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f728:	484f      	ldr	r0, [pc, #316]	@ (800f868 <mem_trim+0x208>)
 800f72a:	f009 fc0b 	bl	8018f44 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f72e:	69bb      	ldr	r3, [r7, #24]
 800f730:	881b      	ldrh	r3, [r3, #0]
 800f732:	4618      	mov	r0, r3
 800f734:	f7ff fdb4 	bl	800f2a0 <ptr_to_mem>
 800f738:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	791b      	ldrb	r3, [r3, #4]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d13f      	bne.n	800f7c2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f742:	69bb      	ldr	r3, [r7, #24]
 800f744:	881b      	ldrh	r3, [r3, #0]
 800f746:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f74a:	d106      	bne.n	800f75a <mem_trim+0xfa>
 800f74c:	4b42      	ldr	r3, [pc, #264]	@ (800f858 <mem_trim+0x1f8>)
 800f74e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800f752:	4946      	ldr	r1, [pc, #280]	@ (800f86c <mem_trim+0x20c>)
 800f754:	4842      	ldr	r0, [pc, #264]	@ (800f860 <mem_trim+0x200>)
 800f756:	f009 fd4f 	bl	80191f8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	881b      	ldrh	r3, [r3, #0]
 800f75e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f760:	8afa      	ldrh	r2, [r7, #22]
 800f762:	8bfb      	ldrh	r3, [r7, #30]
 800f764:	4413      	add	r3, r2
 800f766:	b29b      	uxth	r3, r3
 800f768:	3308      	adds	r3, #8
 800f76a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f76c:	4b40      	ldr	r3, [pc, #256]	@ (800f870 <mem_trim+0x210>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	693a      	ldr	r2, [r7, #16]
 800f772:	429a      	cmp	r2, r3
 800f774:	d106      	bne.n	800f784 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f776:	89fb      	ldrh	r3, [r7, #14]
 800f778:	4618      	mov	r0, r3
 800f77a:	f7ff fd91 	bl	800f2a0 <ptr_to_mem>
 800f77e:	4603      	mov	r3, r0
 800f780:	4a3b      	ldr	r2, [pc, #236]	@ (800f870 <mem_trim+0x210>)
 800f782:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f784:	89fb      	ldrh	r3, [r7, #14]
 800f786:	4618      	mov	r0, r3
 800f788:	f7ff fd8a 	bl	800f2a0 <ptr_to_mem>
 800f78c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	2200      	movs	r2, #0
 800f792:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	89ba      	ldrh	r2, [r7, #12]
 800f798:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	8afa      	ldrh	r2, [r7, #22]
 800f79e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	89fa      	ldrh	r2, [r7, #14]
 800f7a4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	881b      	ldrh	r3, [r3, #0]
 800f7aa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f7ae:	d047      	beq.n	800f840 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	881b      	ldrh	r3, [r3, #0]
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7ff fd73 	bl	800f2a0 <ptr_to_mem>
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	89fb      	ldrh	r3, [r7, #14]
 800f7be:	8053      	strh	r3, [r2, #2]
 800f7c0:	e03e      	b.n	800f840 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f7c2:	8bfb      	ldrh	r3, [r7, #30]
 800f7c4:	f103 0214 	add.w	r2, r3, #20
 800f7c8:	8abb      	ldrh	r3, [r7, #20]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d838      	bhi.n	800f840 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f7ce:	8afa      	ldrh	r2, [r7, #22]
 800f7d0:	8bfb      	ldrh	r3, [r7, #30]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	3308      	adds	r3, #8
 800f7d8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f7da:	69bb      	ldr	r3, [r7, #24]
 800f7dc:	881b      	ldrh	r3, [r3, #0]
 800f7de:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f7e2:	d106      	bne.n	800f7f2 <mem_trim+0x192>
 800f7e4:	4b1c      	ldr	r3, [pc, #112]	@ (800f858 <mem_trim+0x1f8>)
 800f7e6:	f240 3216 	movw	r2, #790	@ 0x316
 800f7ea:	4920      	ldr	r1, [pc, #128]	@ (800f86c <mem_trim+0x20c>)
 800f7ec:	481c      	ldr	r0, [pc, #112]	@ (800f860 <mem_trim+0x200>)
 800f7ee:	f009 fd03 	bl	80191f8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f7f2:	89fb      	ldrh	r3, [r7, #14]
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7ff fd53 	bl	800f2a0 <ptr_to_mem>
 800f7fa:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f7fc:	4b1c      	ldr	r3, [pc, #112]	@ (800f870 <mem_trim+0x210>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	693a      	ldr	r2, [r7, #16]
 800f802:	429a      	cmp	r2, r3
 800f804:	d202      	bcs.n	800f80c <mem_trim+0x1ac>
      lfree = mem2;
 800f806:	4a1a      	ldr	r2, [pc, #104]	@ (800f870 <mem_trim+0x210>)
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	2200      	movs	r2, #0
 800f810:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f812:	69bb      	ldr	r3, [r7, #24]
 800f814:	881a      	ldrh	r2, [r3, #0]
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	8afa      	ldrh	r2, [r7, #22]
 800f81e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f820:	69bb      	ldr	r3, [r7, #24]
 800f822:	89fa      	ldrh	r2, [r7, #14]
 800f824:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	881b      	ldrh	r3, [r3, #0]
 800f82a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f82e:	d007      	beq.n	800f840 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	881b      	ldrh	r3, [r3, #0]
 800f834:	4618      	mov	r0, r3
 800f836:	f7ff fd33 	bl	800f2a0 <ptr_to_mem>
 800f83a:	4602      	mov	r2, r0
 800f83c:	89fb      	ldrh	r3, [r7, #14]
 800f83e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f840:	4809      	ldr	r0, [pc, #36]	@ (800f868 <mem_trim+0x208>)
 800f842:	f009 fb8e 	bl	8018f62 <sys_mutex_unlock>
  return rmem;
 800f846:	687b      	ldr	r3, [r7, #4]
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3720      	adds	r7, #32
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	2005daa4 	.word	0x2005daa4
 800f854:	2005daa8 	.word	0x2005daa8
 800f858:	0801a1a8 	.word	0x0801a1a8
 800f85c:	0801a334 	.word	0x0801a334
 800f860:	0801a1f0 	.word	0x0801a1f0
 800f864:	0801a34c 	.word	0x0801a34c
 800f868:	2005daac 	.word	0x2005daac
 800f86c:	0801a36c 	.word	0x0801a36c
 800f870:	2005dab0 	.word	0x2005dab0

0800f874 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b088      	sub	sp, #32
 800f878:	af00      	add	r7, sp, #0
 800f87a:	4603      	mov	r3, r0
 800f87c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f87e:	88fb      	ldrh	r3, [r7, #6]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d101      	bne.n	800f888 <mem_malloc+0x14>
    return NULL;
 800f884:	2300      	movs	r3, #0
 800f886:	e0e2      	b.n	800fa4e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f888:	88fb      	ldrh	r3, [r7, #6]
 800f88a:	3303      	adds	r3, #3
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	f023 0303 	bic.w	r3, r3, #3
 800f892:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f894:	8bbb      	ldrh	r3, [r7, #28]
 800f896:	2b0b      	cmp	r3, #11
 800f898:	d801      	bhi.n	800f89e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f89a:	230c      	movs	r3, #12
 800f89c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f89e:	8bbb      	ldrh	r3, [r7, #28]
 800f8a0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f8a4:	d803      	bhi.n	800f8ae <mem_malloc+0x3a>
 800f8a6:	8bba      	ldrh	r2, [r7, #28]
 800f8a8:	88fb      	ldrh	r3, [r7, #6]
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d201      	bcs.n	800f8b2 <mem_malloc+0x3e>
    return NULL;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	e0cd      	b.n	800fa4e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f8b2:	4869      	ldr	r0, [pc, #420]	@ (800fa58 <mem_malloc+0x1e4>)
 800f8b4:	f009 fb46 	bl	8018f44 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f8b8:	4b68      	ldr	r3, [pc, #416]	@ (800fa5c <mem_malloc+0x1e8>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7ff fd01 	bl	800f2c4 <mem_to_ptr>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	83fb      	strh	r3, [r7, #30]
 800f8c6:	e0b7      	b.n	800fa38 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f8c8:	8bfb      	ldrh	r3, [r7, #30]
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7ff fce8 	bl	800f2a0 <ptr_to_mem>
 800f8d0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	791b      	ldrb	r3, [r3, #4]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	f040 80a7 	bne.w	800fa2a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	881b      	ldrh	r3, [r3, #0]
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	8bfb      	ldrh	r3, [r7, #30]
 800f8e4:	1ad3      	subs	r3, r2, r3
 800f8e6:	f1a3 0208 	sub.w	r2, r3, #8
 800f8ea:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	f0c0 809c 	bcc.w	800fa2a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	881b      	ldrh	r3, [r3, #0]
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	8bfb      	ldrh	r3, [r7, #30]
 800f8fa:	1ad3      	subs	r3, r2, r3
 800f8fc:	f1a3 0208 	sub.w	r2, r3, #8
 800f900:	8bbb      	ldrh	r3, [r7, #28]
 800f902:	3314      	adds	r3, #20
 800f904:	429a      	cmp	r2, r3
 800f906:	d333      	bcc.n	800f970 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f908:	8bfa      	ldrh	r2, [r7, #30]
 800f90a:	8bbb      	ldrh	r3, [r7, #28]
 800f90c:	4413      	add	r3, r2
 800f90e:	b29b      	uxth	r3, r3
 800f910:	3308      	adds	r3, #8
 800f912:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f914:	8a7b      	ldrh	r3, [r7, #18]
 800f916:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f91a:	d106      	bne.n	800f92a <mem_malloc+0xb6>
 800f91c:	4b50      	ldr	r3, [pc, #320]	@ (800fa60 <mem_malloc+0x1ec>)
 800f91e:	f240 3287 	movw	r2, #903	@ 0x387
 800f922:	4950      	ldr	r1, [pc, #320]	@ (800fa64 <mem_malloc+0x1f0>)
 800f924:	4850      	ldr	r0, [pc, #320]	@ (800fa68 <mem_malloc+0x1f4>)
 800f926:	f009 fc67 	bl	80191f8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f92a:	8a7b      	ldrh	r3, [r7, #18]
 800f92c:	4618      	mov	r0, r3
 800f92e:	f7ff fcb7 	bl	800f2a0 <ptr_to_mem>
 800f932:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2200      	movs	r2, #0
 800f938:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	881a      	ldrh	r2, [r3, #0]
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	8bfa      	ldrh	r2, [r7, #30]
 800f946:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	8a7a      	ldrh	r2, [r7, #18]
 800f94c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	2201      	movs	r2, #1
 800f952:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	881b      	ldrh	r3, [r3, #0]
 800f958:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f95c:	d00b      	beq.n	800f976 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	881b      	ldrh	r3, [r3, #0]
 800f962:	4618      	mov	r0, r3
 800f964:	f7ff fc9c 	bl	800f2a0 <ptr_to_mem>
 800f968:	4602      	mov	r2, r0
 800f96a:	8a7b      	ldrh	r3, [r7, #18]
 800f96c:	8053      	strh	r3, [r2, #2]
 800f96e:	e002      	b.n	800f976 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	2201      	movs	r2, #1
 800f974:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f976:	4b39      	ldr	r3, [pc, #228]	@ (800fa5c <mem_malloc+0x1e8>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	697a      	ldr	r2, [r7, #20]
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d127      	bne.n	800f9d0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f980:	4b36      	ldr	r3, [pc, #216]	@ (800fa5c <mem_malloc+0x1e8>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f986:	e005      	b.n	800f994 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f988:	69bb      	ldr	r3, [r7, #24]
 800f98a:	881b      	ldrh	r3, [r3, #0]
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7ff fc87 	bl	800f2a0 <ptr_to_mem>
 800f992:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f994:	69bb      	ldr	r3, [r7, #24]
 800f996:	791b      	ldrb	r3, [r3, #4]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d004      	beq.n	800f9a6 <mem_malloc+0x132>
 800f99c:	4b33      	ldr	r3, [pc, #204]	@ (800fa6c <mem_malloc+0x1f8>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	69ba      	ldr	r2, [r7, #24]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d1f0      	bne.n	800f988 <mem_malloc+0x114>
          }
          lfree = cur;
 800f9a6:	4a2d      	ldr	r2, [pc, #180]	@ (800fa5c <mem_malloc+0x1e8>)
 800f9a8:	69bb      	ldr	r3, [r7, #24]
 800f9aa:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f9ac:	4b2b      	ldr	r3, [pc, #172]	@ (800fa5c <mem_malloc+0x1e8>)
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	4b2e      	ldr	r3, [pc, #184]	@ (800fa6c <mem_malloc+0x1f8>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d00b      	beq.n	800f9d0 <mem_malloc+0x15c>
 800f9b8:	4b28      	ldr	r3, [pc, #160]	@ (800fa5c <mem_malloc+0x1e8>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	791b      	ldrb	r3, [r3, #4]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d006      	beq.n	800f9d0 <mem_malloc+0x15c>
 800f9c2:	4b27      	ldr	r3, [pc, #156]	@ (800fa60 <mem_malloc+0x1ec>)
 800f9c4:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800f9c8:	4929      	ldr	r1, [pc, #164]	@ (800fa70 <mem_malloc+0x1fc>)
 800f9ca:	4827      	ldr	r0, [pc, #156]	@ (800fa68 <mem_malloc+0x1f4>)
 800f9cc:	f009 fc14 	bl	80191f8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f9d0:	4821      	ldr	r0, [pc, #132]	@ (800fa58 <mem_malloc+0x1e4>)
 800f9d2:	f009 fac6 	bl	8018f62 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f9d6:	8bba      	ldrh	r2, [r7, #28]
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	4413      	add	r3, r2
 800f9dc:	3308      	adds	r3, #8
 800f9de:	4a23      	ldr	r2, [pc, #140]	@ (800fa6c <mem_malloc+0x1f8>)
 800f9e0:	6812      	ldr	r2, [r2, #0]
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d906      	bls.n	800f9f4 <mem_malloc+0x180>
 800f9e6:	4b1e      	ldr	r3, [pc, #120]	@ (800fa60 <mem_malloc+0x1ec>)
 800f9e8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800f9ec:	4921      	ldr	r1, [pc, #132]	@ (800fa74 <mem_malloc+0x200>)
 800f9ee:	481e      	ldr	r0, [pc, #120]	@ (800fa68 <mem_malloc+0x1f4>)
 800f9f0:	f009 fc02 	bl	80191f8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	f003 0303 	and.w	r3, r3, #3
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d006      	beq.n	800fa0c <mem_malloc+0x198>
 800f9fe:	4b18      	ldr	r3, [pc, #96]	@ (800fa60 <mem_malloc+0x1ec>)
 800fa00:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800fa04:	491c      	ldr	r1, [pc, #112]	@ (800fa78 <mem_malloc+0x204>)
 800fa06:	4818      	ldr	r0, [pc, #96]	@ (800fa68 <mem_malloc+0x1f4>)
 800fa08:	f009 fbf6 	bl	80191f8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	f003 0303 	and.w	r3, r3, #3
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d006      	beq.n	800fa24 <mem_malloc+0x1b0>
 800fa16:	4b12      	ldr	r3, [pc, #72]	@ (800fa60 <mem_malloc+0x1ec>)
 800fa18:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800fa1c:	4917      	ldr	r1, [pc, #92]	@ (800fa7c <mem_malloc+0x208>)
 800fa1e:	4812      	ldr	r0, [pc, #72]	@ (800fa68 <mem_malloc+0x1f4>)
 800fa20:	f009 fbea 	bl	80191f8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	3308      	adds	r3, #8
 800fa28:	e011      	b.n	800fa4e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800fa2a:	8bfb      	ldrh	r3, [r7, #30]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7ff fc37 	bl	800f2a0 <ptr_to_mem>
 800fa32:	4603      	mov	r3, r0
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fa38:	8bfa      	ldrh	r2, [r7, #30]
 800fa3a:	8bbb      	ldrh	r3, [r7, #28]
 800fa3c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800fa40:	429a      	cmp	r2, r3
 800fa42:	f4ff af41 	bcc.w	800f8c8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800fa46:	4804      	ldr	r0, [pc, #16]	@ (800fa58 <mem_malloc+0x1e4>)
 800fa48:	f009 fa8b 	bl	8018f62 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800fa4c:	2300      	movs	r3, #0
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3720      	adds	r7, #32
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	2005daac 	.word	0x2005daac
 800fa5c:	2005dab0 	.word	0x2005dab0
 800fa60:	0801a1a8 	.word	0x0801a1a8
 800fa64:	0801a36c 	.word	0x0801a36c
 800fa68:	0801a1f0 	.word	0x0801a1f0
 800fa6c:	2005daa8 	.word	0x2005daa8
 800fa70:	0801a380 	.word	0x0801a380
 800fa74:	0801a39c 	.word	0x0801a39c
 800fa78:	0801a3cc 	.word	0x0801a3cc
 800fa7c:	0801a3fc 	.word	0x0801a3fc

0800fa80 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b085      	sub	sp, #20
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	689b      	ldr	r3, [r3, #8]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	3303      	adds	r3, #3
 800fa96:	f023 0303 	bic.w	r3, r3, #3
 800fa9a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	60fb      	str	r3, [r7, #12]
 800faa0:	e011      	b.n	800fac6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	689b      	ldr	r3, [r3, #8]
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	689b      	ldr	r3, [r3, #8]
 800fab0:	68ba      	ldr	r2, [r7, #8]
 800fab2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	881b      	ldrh	r3, [r3, #0]
 800fab8:	461a      	mov	r2, r3
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	4413      	add	r3, r2
 800fabe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	3301      	adds	r3, #1
 800fac4:	60fb      	str	r3, [r7, #12]
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	885b      	ldrh	r3, [r3, #2]
 800faca:	461a      	mov	r2, r3
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	4293      	cmp	r3, r2
 800fad0:	dbe7      	blt.n	800faa2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800fad2:	bf00      	nop
 800fad4:	bf00      	nop
 800fad6:	3714      	adds	r7, #20
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr

0800fae0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fae6:	2300      	movs	r3, #0
 800fae8:	80fb      	strh	r3, [r7, #6]
 800faea:	e009      	b.n	800fb00 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800faec:	88fb      	ldrh	r3, [r7, #6]
 800faee:	4a08      	ldr	r2, [pc, #32]	@ (800fb10 <memp_init+0x30>)
 800faf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7ff ffc3 	bl	800fa80 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fafa:	88fb      	ldrh	r3, [r7, #6]
 800fafc:	3301      	adds	r3, #1
 800fafe:	80fb      	strh	r3, [r7, #6]
 800fb00:	88fb      	ldrh	r3, [r7, #6]
 800fb02:	2b0c      	cmp	r3, #12
 800fb04:	d9f2      	bls.n	800faec <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fb06:	bf00      	nop
 800fb08:	bf00      	nop
 800fb0a:	3708      	adds	r7, #8
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	0801cc5c 	.word	0x0801cc5c

0800fb14 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b084      	sub	sp, #16
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800fb1c:	f009 fa4e 	bl	8018fbc <sys_arch_protect>
 800fb20:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	689b      	ldr	r3, [r3, #8]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d015      	beq.n	800fb5c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	689b      	ldr	r3, [r3, #8]
 800fb34:	68ba      	ldr	r2, [r7, #8]
 800fb36:	6812      	ldr	r2, [r2, #0]
 800fb38:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	f003 0303 	and.w	r3, r3, #3
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d006      	beq.n	800fb52 <do_memp_malloc_pool+0x3e>
 800fb44:	4b09      	ldr	r3, [pc, #36]	@ (800fb6c <do_memp_malloc_pool+0x58>)
 800fb46:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800fb4a:	4909      	ldr	r1, [pc, #36]	@ (800fb70 <do_memp_malloc_pool+0x5c>)
 800fb4c:	4809      	ldr	r0, [pc, #36]	@ (800fb74 <do_memp_malloc_pool+0x60>)
 800fb4e:	f009 fb53 	bl	80191f8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fb52:	68f8      	ldr	r0, [r7, #12]
 800fb54:	f009 fa40 	bl	8018fd8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	e003      	b.n	800fb64 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fb5c:	68f8      	ldr	r0, [r7, #12]
 800fb5e:	f009 fa3b 	bl	8018fd8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800fb62:	2300      	movs	r3, #0
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3710      	adds	r7, #16
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}
 800fb6c:	0801a420 	.word	0x0801a420
 800fb70:	0801a450 	.word	0x0801a450
 800fb74:	0801a474 	.word	0x0801a474

0800fb78 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d106      	bne.n	800fb94 <memp_malloc_pool+0x1c>
 800fb86:	4b0a      	ldr	r3, [pc, #40]	@ (800fbb0 <memp_malloc_pool+0x38>)
 800fb88:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800fb8c:	4909      	ldr	r1, [pc, #36]	@ (800fbb4 <memp_malloc_pool+0x3c>)
 800fb8e:	480a      	ldr	r0, [pc, #40]	@ (800fbb8 <memp_malloc_pool+0x40>)
 800fb90:	f009 fb32 	bl	80191f8 <iprintf>
  if (desc == NULL) {
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d101      	bne.n	800fb9e <memp_malloc_pool+0x26>
    return NULL;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	e003      	b.n	800fba6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f7ff ffb8 	bl	800fb14 <do_memp_malloc_pool>
 800fba4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3708      	adds	r7, #8
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop
 800fbb0:	0801a420 	.word	0x0801a420
 800fbb4:	0801a49c 	.word	0x0801a49c
 800fbb8:	0801a474 	.word	0x0801a474

0800fbbc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800fbc6:	79fb      	ldrb	r3, [r7, #7]
 800fbc8:	2b0c      	cmp	r3, #12
 800fbca:	d908      	bls.n	800fbde <memp_malloc+0x22>
 800fbcc:	4b0a      	ldr	r3, [pc, #40]	@ (800fbf8 <memp_malloc+0x3c>)
 800fbce:	f240 1257 	movw	r2, #343	@ 0x157
 800fbd2:	490a      	ldr	r1, [pc, #40]	@ (800fbfc <memp_malloc+0x40>)
 800fbd4:	480a      	ldr	r0, [pc, #40]	@ (800fc00 <memp_malloc+0x44>)
 800fbd6:	f009 fb0f 	bl	80191f8 <iprintf>
 800fbda:	2300      	movs	r3, #0
 800fbdc:	e008      	b.n	800fbf0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800fbde:	79fb      	ldrb	r3, [r7, #7]
 800fbe0:	4a08      	ldr	r2, [pc, #32]	@ (800fc04 <memp_malloc+0x48>)
 800fbe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7ff ff94 	bl	800fb14 <do_memp_malloc_pool>
 800fbec:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800fbee:	68fb      	ldr	r3, [r7, #12]
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3710      	adds	r7, #16
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}
 800fbf8:	0801a420 	.word	0x0801a420
 800fbfc:	0801a4b0 	.word	0x0801a4b0
 800fc00:	0801a474 	.word	0x0801a474
 800fc04:	0801cc5c 	.word	0x0801cc5c

0800fc08 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	f003 0303 	and.w	r3, r3, #3
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d006      	beq.n	800fc2a <do_memp_free_pool+0x22>
 800fc1c:	4b0d      	ldr	r3, [pc, #52]	@ (800fc54 <do_memp_free_pool+0x4c>)
 800fc1e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800fc22:	490d      	ldr	r1, [pc, #52]	@ (800fc58 <do_memp_free_pool+0x50>)
 800fc24:	480d      	ldr	r0, [pc, #52]	@ (800fc5c <do_memp_free_pool+0x54>)
 800fc26:	f009 fae7 	bl	80191f8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800fc2e:	f009 f9c5 	bl	8018fbc <sys_arch_protect>
 800fc32:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	689b      	ldr	r3, [r3, #8]
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	689b      	ldr	r3, [r3, #8]
 800fc42:	68fa      	ldr	r2, [r7, #12]
 800fc44:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800fc46:	68b8      	ldr	r0, [r7, #8]
 800fc48:	f009 f9c6 	bl	8018fd8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800fc4c:	bf00      	nop
 800fc4e:	3710      	adds	r7, #16
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	0801a420 	.word	0x0801a420
 800fc58:	0801a4d0 	.word	0x0801a4d0
 800fc5c:	0801a474 	.word	0x0801a474

0800fc60 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d106      	bne.n	800fc7e <memp_free_pool+0x1e>
 800fc70:	4b0a      	ldr	r3, [pc, #40]	@ (800fc9c <memp_free_pool+0x3c>)
 800fc72:	f240 1295 	movw	r2, #405	@ 0x195
 800fc76:	490a      	ldr	r1, [pc, #40]	@ (800fca0 <memp_free_pool+0x40>)
 800fc78:	480a      	ldr	r0, [pc, #40]	@ (800fca4 <memp_free_pool+0x44>)
 800fc7a:	f009 fabd 	bl	80191f8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d007      	beq.n	800fc94 <memp_free_pool+0x34>
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d004      	beq.n	800fc94 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800fc8a:	6839      	ldr	r1, [r7, #0]
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f7ff ffbb 	bl	800fc08 <do_memp_free_pool>
 800fc92:	e000      	b.n	800fc96 <memp_free_pool+0x36>
    return;
 800fc94:	bf00      	nop
}
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	0801a420 	.word	0x0801a420
 800fca0:	0801a49c 	.word	0x0801a49c
 800fca4:	0801a474 	.word	0x0801a474

0800fca8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	4603      	mov	r3, r0
 800fcb0:	6039      	str	r1, [r7, #0]
 800fcb2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fcb4:	79fb      	ldrb	r3, [r7, #7]
 800fcb6:	2b0c      	cmp	r3, #12
 800fcb8:	d907      	bls.n	800fcca <memp_free+0x22>
 800fcba:	4b0c      	ldr	r3, [pc, #48]	@ (800fcec <memp_free+0x44>)
 800fcbc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800fcc0:	490b      	ldr	r1, [pc, #44]	@ (800fcf0 <memp_free+0x48>)
 800fcc2:	480c      	ldr	r0, [pc, #48]	@ (800fcf4 <memp_free+0x4c>)
 800fcc4:	f009 fa98 	bl	80191f8 <iprintf>
 800fcc8:	e00c      	b.n	800fce4 <memp_free+0x3c>

  if (mem == NULL) {
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d008      	beq.n	800fce2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fcd0:	79fb      	ldrb	r3, [r7, #7]
 800fcd2:	4a09      	ldr	r2, [pc, #36]	@ (800fcf8 <memp_free+0x50>)
 800fcd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcd8:	6839      	ldr	r1, [r7, #0]
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7ff ff94 	bl	800fc08 <do_memp_free_pool>
 800fce0:	e000      	b.n	800fce4 <memp_free+0x3c>
    return;
 800fce2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fce4:	3708      	adds	r7, #8
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop
 800fcec:	0801a420 	.word	0x0801a420
 800fcf0:	0801a4f0 	.word	0x0801a4f0
 800fcf4:	0801a474 	.word	0x0801a474
 800fcf8:	0801cc5c 	.word	0x0801cc5c

0800fcfc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800fd00:	bf00      	nop
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr
	...

0800fd0c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b086      	sub	sp, #24
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	60f8      	str	r0, [r7, #12]
 800fd14:	60b9      	str	r1, [r7, #8]
 800fd16:	607a      	str	r2, [r7, #4]
 800fd18:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d108      	bne.n	800fd32 <netif_add+0x26>
 800fd20:	4b57      	ldr	r3, [pc, #348]	@ (800fe80 <netif_add+0x174>)
 800fd22:	f240 1227 	movw	r2, #295	@ 0x127
 800fd26:	4957      	ldr	r1, [pc, #348]	@ (800fe84 <netif_add+0x178>)
 800fd28:	4857      	ldr	r0, [pc, #348]	@ (800fe88 <netif_add+0x17c>)
 800fd2a:	f009 fa65 	bl	80191f8 <iprintf>
 800fd2e:	2300      	movs	r3, #0
 800fd30:	e0a2      	b.n	800fe78 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800fd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d108      	bne.n	800fd4a <netif_add+0x3e>
 800fd38:	4b51      	ldr	r3, [pc, #324]	@ (800fe80 <netif_add+0x174>)
 800fd3a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800fd3e:	4953      	ldr	r1, [pc, #332]	@ (800fe8c <netif_add+0x180>)
 800fd40:	4851      	ldr	r0, [pc, #324]	@ (800fe88 <netif_add+0x17c>)
 800fd42:	f009 fa59 	bl	80191f8 <iprintf>
 800fd46:	2300      	movs	r3, #0
 800fd48:	e096      	b.n	800fe78 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d101      	bne.n	800fd54 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800fd50:	4b4f      	ldr	r3, [pc, #316]	@ (800fe90 <netif_add+0x184>)
 800fd52:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d101      	bne.n	800fd5e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800fd5a:	4b4d      	ldr	r3, [pc, #308]	@ (800fe90 <netif_add+0x184>)
 800fd5c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d101      	bne.n	800fd68 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fd64:	4b4a      	ldr	r3, [pc, #296]	@ (800fe90 <netif_add+0x184>)
 800fd66:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	2200      	movs	r2, #0
 800fd72:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	2200      	movs	r2, #0
 800fd78:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	4a45      	ldr	r2, [pc, #276]	@ (800fe94 <netif_add+0x188>)
 800fd7e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2200      	movs	r2, #0
 800fd84:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2200      	movs	r2, #0
 800fd92:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	6a3a      	ldr	r2, [r7, #32]
 800fd98:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800fd9a:	4b3f      	ldr	r3, [pc, #252]	@ (800fe98 <netif_add+0x18c>)
 800fd9c:	781a      	ldrb	r2, [r3, #0]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fda8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	68b9      	ldr	r1, [r7, #8]
 800fdb0:	68f8      	ldr	r0, [r7, #12]
 800fdb2:	f000 f913 	bl	800ffdc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800fdb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdb8:	68f8      	ldr	r0, [r7, #12]
 800fdba:	4798      	blx	r3
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d001      	beq.n	800fdc6 <netif_add+0xba>
    return NULL;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	e058      	b.n	800fe78 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fdcc:	2bff      	cmp	r3, #255	@ 0xff
 800fdce:	d103      	bne.n	800fdd8 <netif_add+0xcc>
        netif->num = 0;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fddc:	4b2f      	ldr	r3, [pc, #188]	@ (800fe9c <netif_add+0x190>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	617b      	str	r3, [r7, #20]
 800fde2:	e02b      	b.n	800fe3c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800fde4:	697a      	ldr	r2, [r7, #20]
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	429a      	cmp	r2, r3
 800fdea:	d106      	bne.n	800fdfa <netif_add+0xee>
 800fdec:	4b24      	ldr	r3, [pc, #144]	@ (800fe80 <netif_add+0x174>)
 800fdee:	f240 128b 	movw	r2, #395	@ 0x18b
 800fdf2:	492b      	ldr	r1, [pc, #172]	@ (800fea0 <netif_add+0x194>)
 800fdf4:	4824      	ldr	r0, [pc, #144]	@ (800fe88 <netif_add+0x17c>)
 800fdf6:	f009 f9ff 	bl	80191f8 <iprintf>
        num_netifs++;
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	2bff      	cmp	r3, #255	@ 0xff
 800fe04:	dd06      	ble.n	800fe14 <netif_add+0x108>
 800fe06:	4b1e      	ldr	r3, [pc, #120]	@ (800fe80 <netif_add+0x174>)
 800fe08:	f240 128d 	movw	r2, #397	@ 0x18d
 800fe0c:	4925      	ldr	r1, [pc, #148]	@ (800fea4 <netif_add+0x198>)
 800fe0e:	481e      	ldr	r0, [pc, #120]	@ (800fe88 <netif_add+0x17c>)
 800fe10:	f009 f9f2 	bl	80191f8 <iprintf>
        if (netif2->num == netif->num) {
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d108      	bne.n	800fe36 <netif_add+0x12a>
          netif->num++;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	b2da      	uxtb	r2, r3
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800fe34:	e005      	b.n	800fe42 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	617b      	str	r3, [r7, #20]
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1d0      	bne.n	800fde4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d1be      	bne.n	800fdc6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fe4e:	2bfe      	cmp	r3, #254	@ 0xfe
 800fe50:	d103      	bne.n	800fe5a <netif_add+0x14e>
    netif_num = 0;
 800fe52:	4b11      	ldr	r3, [pc, #68]	@ (800fe98 <netif_add+0x18c>)
 800fe54:	2200      	movs	r2, #0
 800fe56:	701a      	strb	r2, [r3, #0]
 800fe58:	e006      	b.n	800fe68 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fe60:	3301      	adds	r3, #1
 800fe62:	b2da      	uxtb	r2, r3
 800fe64:	4b0c      	ldr	r3, [pc, #48]	@ (800fe98 <netif_add+0x18c>)
 800fe66:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fe68:	4b0c      	ldr	r3, [pc, #48]	@ (800fe9c <netif_add+0x190>)
 800fe6a:	681a      	ldr	r2, [r3, #0]
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fe70:	4a0a      	ldr	r2, [pc, #40]	@ (800fe9c <netif_add+0x190>)
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fe76:	68fb      	ldr	r3, [r7, #12]
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3718      	adds	r7, #24
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}
 800fe80:	0801a50c 	.word	0x0801a50c
 800fe84:	0801a5a0 	.word	0x0801a5a0
 800fe88:	0801a55c 	.word	0x0801a55c
 800fe8c:	0801a5bc 	.word	0x0801a5bc
 800fe90:	0801ccd0 	.word	0x0801ccd0
 800fe94:	080102b7 	.word	0x080102b7
 800fe98:	20060b88 	.word	0x20060b88
 800fe9c:	20060b80 	.word	0x20060b80
 800fea0:	0801a5e0 	.word	0x0801a5e0
 800fea4:	0801a5f4 	.word	0x0801a5f4

0800fea8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800feb2:	6839      	ldr	r1, [r7, #0]
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f002 fb7f 	bl	80125b8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800feba:	6839      	ldr	r1, [r7, #0]
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f006 fc8d 	bl	80167dc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800fec2:	bf00      	nop
 800fec4:	3708      	adds	r7, #8
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
	...

0800fecc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b086      	sub	sp, #24
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	60f8      	str	r0, [r7, #12]
 800fed4:	60b9      	str	r1, [r7, #8]
 800fed6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d106      	bne.n	800feec <netif_do_set_ipaddr+0x20>
 800fede:	4b1d      	ldr	r3, [pc, #116]	@ (800ff54 <netif_do_set_ipaddr+0x88>)
 800fee0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800fee4:	491c      	ldr	r1, [pc, #112]	@ (800ff58 <netif_do_set_ipaddr+0x8c>)
 800fee6:	481d      	ldr	r0, [pc, #116]	@ (800ff5c <netif_do_set_ipaddr+0x90>)
 800fee8:	f009 f986 	bl	80191f8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d106      	bne.n	800ff00 <netif_do_set_ipaddr+0x34>
 800fef2:	4b18      	ldr	r3, [pc, #96]	@ (800ff54 <netif_do_set_ipaddr+0x88>)
 800fef4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800fef8:	4917      	ldr	r1, [pc, #92]	@ (800ff58 <netif_do_set_ipaddr+0x8c>)
 800fefa:	4818      	ldr	r0, [pc, #96]	@ (800ff5c <netif_do_set_ipaddr+0x90>)
 800fefc:	f009 f97c 	bl	80191f8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	3304      	adds	r3, #4
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d01c      	beq.n	800ff48 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	3304      	adds	r3, #4
 800ff18:	681a      	ldr	r2, [r3, #0]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ff1e:	f107 0314 	add.w	r3, r7, #20
 800ff22:	4619      	mov	r1, r3
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f7ff ffbf 	bl	800fea8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d002      	beq.n	800ff36 <netif_do_set_ipaddr+0x6a>
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	e000      	b.n	800ff38 <netif_do_set_ipaddr+0x6c>
 800ff36:	2300      	movs	r3, #0
 800ff38:	68fa      	ldr	r2, [r7, #12]
 800ff3a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ff3c:	2101      	movs	r1, #1
 800ff3e:	68f8      	ldr	r0, [r7, #12]
 800ff40:	f000 f8d2 	bl	80100e8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ff44:	2301      	movs	r3, #1
 800ff46:	e000      	b.n	800ff4a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ff48:	2300      	movs	r3, #0
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3718      	adds	r7, #24
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop
 800ff54:	0801a50c 	.word	0x0801a50c
 800ff58:	0801a624 	.word	0x0801a624
 800ff5c:	0801a55c 	.word	0x0801a55c

0800ff60 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b085      	sub	sp, #20
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	60b9      	str	r1, [r7, #8]
 800ff6a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	3308      	adds	r3, #8
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d00a      	beq.n	800ff90 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d002      	beq.n	800ff86 <netif_do_set_netmask+0x26>
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	e000      	b.n	800ff88 <netif_do_set_netmask+0x28>
 800ff86:	2300      	movs	r3, #0
 800ff88:	68fa      	ldr	r2, [r7, #12]
 800ff8a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	e000      	b.n	800ff92 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ff90:	2300      	movs	r3, #0
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3714      	adds	r7, #20
 800ff96:	46bd      	mov	sp, r7
 800ff98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9c:	4770      	bx	lr

0800ff9e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ff9e:	b480      	push	{r7}
 800ffa0:	b085      	sub	sp, #20
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	60f8      	str	r0, [r7, #12]
 800ffa6:	60b9      	str	r1, [r7, #8]
 800ffa8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	681a      	ldr	r2, [r3, #0]
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	330c      	adds	r3, #12
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d00a      	beq.n	800ffce <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d002      	beq.n	800ffc4 <netif_do_set_gw+0x26>
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	e000      	b.n	800ffc6 <netif_do_set_gw+0x28>
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	68fa      	ldr	r2, [r7, #12]
 800ffc8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ffca:	2301      	movs	r3, #1
 800ffcc:	e000      	b.n	800ffd0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ffce:	2300      	movs	r3, #0
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3714      	adds	r7, #20
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr

0800ffdc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b088      	sub	sp, #32
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]
 800ffe8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ffea:	2300      	movs	r3, #0
 800ffec:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ffee:	2300      	movs	r3, #0
 800fff0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d101      	bne.n	800fffc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fff8:	4b1c      	ldr	r3, [pc, #112]	@ (801006c <netif_set_addr+0x90>)
 800fffa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d101      	bne.n	8010006 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010002:	4b1a      	ldr	r3, [pc, #104]	@ (801006c <netif_set_addr+0x90>)
 8010004:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d101      	bne.n	8010010 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801000c:	4b17      	ldr	r3, [pc, #92]	@ (801006c <netif_set_addr+0x90>)
 801000e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d003      	beq.n	801001e <netif_set_addr+0x42>
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d101      	bne.n	8010022 <netif_set_addr+0x46>
 801001e:	2301      	movs	r3, #1
 8010020:	e000      	b.n	8010024 <netif_set_addr+0x48>
 8010022:	2300      	movs	r3, #0
 8010024:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d006      	beq.n	801003a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801002c:	f107 0310 	add.w	r3, r7, #16
 8010030:	461a      	mov	r2, r3
 8010032:	68b9      	ldr	r1, [r7, #8]
 8010034:	68f8      	ldr	r0, [r7, #12]
 8010036:	f7ff ff49 	bl	800fecc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801003a:	69fa      	ldr	r2, [r7, #28]
 801003c:	6879      	ldr	r1, [r7, #4]
 801003e:	68f8      	ldr	r0, [r7, #12]
 8010040:	f7ff ff8e 	bl	800ff60 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010044:	69ba      	ldr	r2, [r7, #24]
 8010046:	6839      	ldr	r1, [r7, #0]
 8010048:	68f8      	ldr	r0, [r7, #12]
 801004a:	f7ff ffa8 	bl	800ff9e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d106      	bne.n	8010062 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010054:	f107 0310 	add.w	r3, r7, #16
 8010058:	461a      	mov	r2, r3
 801005a:	68b9      	ldr	r1, [r7, #8]
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	f7ff ff35 	bl	800fecc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010062:	bf00      	nop
 8010064:	3720      	adds	r7, #32
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	0801ccd0 	.word	0x0801ccd0

08010070 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010078:	4a04      	ldr	r2, [pc, #16]	@ (801008c <netif_set_default+0x1c>)
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801007e:	bf00      	nop
 8010080:	370c      	adds	r7, #12
 8010082:	46bd      	mov	sp, r7
 8010084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010088:	4770      	bx	lr
 801008a:	bf00      	nop
 801008c:	20060b84 	.word	0x20060b84

08010090 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d107      	bne.n	80100ae <netif_set_up+0x1e>
 801009e:	4b0f      	ldr	r3, [pc, #60]	@ (80100dc <netif_set_up+0x4c>)
 80100a0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80100a4:	490e      	ldr	r1, [pc, #56]	@ (80100e0 <netif_set_up+0x50>)
 80100a6:	480f      	ldr	r0, [pc, #60]	@ (80100e4 <netif_set_up+0x54>)
 80100a8:	f009 f8a6 	bl	80191f8 <iprintf>
 80100ac:	e013      	b.n	80100d6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80100b4:	f003 0301 	and.w	r3, r3, #1
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d10c      	bne.n	80100d6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80100c2:	f043 0301 	orr.w	r3, r3, #1
 80100c6:	b2da      	uxtb	r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80100ce:	2103      	movs	r1, #3
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f000 f809 	bl	80100e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80100d6:	3708      	adds	r7, #8
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}
 80100dc:	0801a50c 	.word	0x0801a50c
 80100e0:	0801a694 	.word	0x0801a694
 80100e4:	0801a55c 	.word	0x0801a55c

080100e8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	460b      	mov	r3, r1
 80100f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d106      	bne.n	8010108 <netif_issue_reports+0x20>
 80100fa:	4b18      	ldr	r3, [pc, #96]	@ (801015c <netif_issue_reports+0x74>)
 80100fc:	f240 326d 	movw	r2, #877	@ 0x36d
 8010100:	4917      	ldr	r1, [pc, #92]	@ (8010160 <netif_issue_reports+0x78>)
 8010102:	4818      	ldr	r0, [pc, #96]	@ (8010164 <netif_issue_reports+0x7c>)
 8010104:	f009 f878 	bl	80191f8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801010e:	f003 0304 	and.w	r3, r3, #4
 8010112:	2b00      	cmp	r3, #0
 8010114:	d01e      	beq.n	8010154 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801011c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010120:	2b00      	cmp	r3, #0
 8010122:	d017      	beq.n	8010154 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010124:	78fb      	ldrb	r3, [r7, #3]
 8010126:	f003 0301 	and.w	r3, r3, #1
 801012a:	2b00      	cmp	r3, #0
 801012c:	d013      	beq.n	8010156 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	3304      	adds	r3, #4
 8010132:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010134:	2b00      	cmp	r3, #0
 8010136:	d00e      	beq.n	8010156 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801013e:	f003 0308 	and.w	r3, r3, #8
 8010142:	2b00      	cmp	r3, #0
 8010144:	d007      	beq.n	8010156 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	3304      	adds	r3, #4
 801014a:	4619      	mov	r1, r3
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f007 faaf 	bl	80176b0 <etharp_request>
 8010152:	e000      	b.n	8010156 <netif_issue_reports+0x6e>
    return;
 8010154:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010156:	3708      	adds	r7, #8
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}
 801015c:	0801a50c 	.word	0x0801a50c
 8010160:	0801a6b0 	.word	0x0801a6b0
 8010164:	0801a55c 	.word	0x0801a55c

08010168 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d107      	bne.n	8010186 <netif_set_down+0x1e>
 8010176:	4b12      	ldr	r3, [pc, #72]	@ (80101c0 <netif_set_down+0x58>)
 8010178:	f240 329b 	movw	r2, #923	@ 0x39b
 801017c:	4911      	ldr	r1, [pc, #68]	@ (80101c4 <netif_set_down+0x5c>)
 801017e:	4812      	ldr	r0, [pc, #72]	@ (80101c8 <netif_set_down+0x60>)
 8010180:	f009 f83a 	bl	80191f8 <iprintf>
 8010184:	e019      	b.n	80101ba <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801018c:	f003 0301 	and.w	r3, r3, #1
 8010190:	2b00      	cmp	r3, #0
 8010192:	d012      	beq.n	80101ba <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801019a:	f023 0301 	bic.w	r3, r3, #1
 801019e:	b2da      	uxtb	r2, r3
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80101ac:	f003 0308 	and.w	r3, r3, #8
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d002      	beq.n	80101ba <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f006 fe39 	bl	8016e2c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80101ba:	3708      	adds	r7, #8
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	0801a50c 	.word	0x0801a50c
 80101c4:	0801a6d4 	.word	0x0801a6d4
 80101c8:	0801a55c 	.word	0x0801a55c

080101cc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d107      	bne.n	80101ea <netif_set_link_up+0x1e>
 80101da:	4b13      	ldr	r3, [pc, #76]	@ (8010228 <netif_set_link_up+0x5c>)
 80101dc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80101e0:	4912      	ldr	r1, [pc, #72]	@ (801022c <netif_set_link_up+0x60>)
 80101e2:	4813      	ldr	r0, [pc, #76]	@ (8010230 <netif_set_link_up+0x64>)
 80101e4:	f009 f808 	bl	80191f8 <iprintf>
 80101e8:	e01b      	b.n	8010222 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80101f0:	f003 0304 	and.w	r3, r3, #4
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d114      	bne.n	8010222 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80101fe:	f043 0304 	orr.w	r3, r3, #4
 8010202:	b2da      	uxtb	r2, r3
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801020a:	2103      	movs	r1, #3
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f7ff ff6b 	bl	80100e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	69db      	ldr	r3, [r3, #28]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d003      	beq.n	8010222 <netif_set_link_up+0x56>
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	69db      	ldr	r3, [r3, #28]
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010222:	3708      	adds	r7, #8
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}
 8010228:	0801a50c 	.word	0x0801a50c
 801022c:	0801a6f4 	.word	0x0801a6f4
 8010230:	0801a55c 	.word	0x0801a55c

08010234 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b082      	sub	sp, #8
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d107      	bne.n	8010252 <netif_set_link_down+0x1e>
 8010242:	4b11      	ldr	r3, [pc, #68]	@ (8010288 <netif_set_link_down+0x54>)
 8010244:	f240 4206 	movw	r2, #1030	@ 0x406
 8010248:	4910      	ldr	r1, [pc, #64]	@ (801028c <netif_set_link_down+0x58>)
 801024a:	4811      	ldr	r0, [pc, #68]	@ (8010290 <netif_set_link_down+0x5c>)
 801024c:	f008 ffd4 	bl	80191f8 <iprintf>
 8010250:	e017      	b.n	8010282 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010258:	f003 0304 	and.w	r3, r3, #4
 801025c:	2b00      	cmp	r3, #0
 801025e:	d010      	beq.n	8010282 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010266:	f023 0304 	bic.w	r3, r3, #4
 801026a:	b2da      	uxtb	r2, r3
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	69db      	ldr	r3, [r3, #28]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d003      	beq.n	8010282 <netif_set_link_down+0x4e>
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	69db      	ldr	r3, [r3, #28]
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010282:	3708      	adds	r7, #8
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}
 8010288:	0801a50c 	.word	0x0801a50c
 801028c:	0801a718 	.word	0x0801a718
 8010290:	0801a55c 	.word	0x0801a55c

08010294 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010294:	b480      	push	{r7}
 8010296:	b083      	sub	sp, #12
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d002      	beq.n	80102aa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	683a      	ldr	r2, [r7, #0]
 80102a8:	61da      	str	r2, [r3, #28]
  }
}
 80102aa:	bf00      	nop
 80102ac:	370c      	adds	r7, #12
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr

080102b6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80102b6:	b480      	push	{r7}
 80102b8:	b085      	sub	sp, #20
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	60f8      	str	r0, [r7, #12]
 80102be:	60b9      	str	r1, [r7, #8]
 80102c0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80102c2:	f06f 030b 	mvn.w	r3, #11
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	3714      	adds	r7, #20
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr
	...

080102d4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b085      	sub	sp, #20
 80102d8:	af00      	add	r7, sp, #0
 80102da:	4603      	mov	r3, r0
 80102dc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80102de:	79fb      	ldrb	r3, [r7, #7]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d013      	beq.n	801030c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80102e4:	4b0d      	ldr	r3, [pc, #52]	@ (801031c <netif_get_by_index+0x48>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	60fb      	str	r3, [r7, #12]
 80102ea:	e00c      	b.n	8010306 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80102f2:	3301      	adds	r3, #1
 80102f4:	b2db      	uxtb	r3, r3
 80102f6:	79fa      	ldrb	r2, [r7, #7]
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d101      	bne.n	8010300 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	e006      	b.n	801030e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	60fb      	str	r3, [r7, #12]
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d1ef      	bne.n	80102ec <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801030c:	2300      	movs	r3, #0
}
 801030e:	4618      	mov	r0, r3
 8010310:	3714      	adds	r7, #20
 8010312:	46bd      	mov	sp, r7
 8010314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010318:	4770      	bx	lr
 801031a:	bf00      	nop
 801031c:	20060b80 	.word	0x20060b80

08010320 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b082      	sub	sp, #8
 8010324:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010326:	f008 fe49 	bl	8018fbc <sys_arch_protect>
 801032a:	6038      	str	r0, [r7, #0]
 801032c:	4b0d      	ldr	r3, [pc, #52]	@ (8010364 <pbuf_free_ooseq+0x44>)
 801032e:	2200      	movs	r2, #0
 8010330:	701a      	strb	r2, [r3, #0]
 8010332:	6838      	ldr	r0, [r7, #0]
 8010334:	f008 fe50 	bl	8018fd8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010338:	4b0b      	ldr	r3, [pc, #44]	@ (8010368 <pbuf_free_ooseq+0x48>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	607b      	str	r3, [r7, #4]
 801033e:	e00a      	b.n	8010356 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010344:	2b00      	cmp	r3, #0
 8010346:	d003      	beq.n	8010350 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f002 f973 	bl	8012634 <tcp_free_ooseq>
      return;
 801034e:	e005      	b.n	801035c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	607b      	str	r3, [r7, #4]
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d1f1      	bne.n	8010340 <pbuf_free_ooseq+0x20>
    }
  }
}
 801035c:	3708      	adds	r7, #8
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
 8010362:	bf00      	nop
 8010364:	20060b89 	.word	0x20060b89
 8010368:	20060b98 	.word	0x20060b98

0801036c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010374:	f7ff ffd4 	bl	8010320 <pbuf_free_ooseq>
}
 8010378:	bf00      	nop
 801037a:	3708      	adds	r7, #8
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}

08010380 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010386:	f008 fe19 	bl	8018fbc <sys_arch_protect>
 801038a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801038c:	4b0f      	ldr	r3, [pc, #60]	@ (80103cc <pbuf_pool_is_empty+0x4c>)
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010392:	4b0e      	ldr	r3, [pc, #56]	@ (80103cc <pbuf_pool_is_empty+0x4c>)
 8010394:	2201      	movs	r2, #1
 8010396:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f008 fe1d 	bl	8018fd8 <sys_arch_unprotect>

  if (!queued) {
 801039e:	78fb      	ldrb	r3, [r7, #3]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d10f      	bne.n	80103c4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80103a4:	2100      	movs	r1, #0
 80103a6:	480a      	ldr	r0, [pc, #40]	@ (80103d0 <pbuf_pool_is_empty+0x50>)
 80103a8:	f7fe fdee 	bl	800ef88 <tcpip_try_callback>
 80103ac:	4603      	mov	r3, r0
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d008      	beq.n	80103c4 <pbuf_pool_is_empty+0x44>
 80103b2:	f008 fe03 	bl	8018fbc <sys_arch_protect>
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	4b04      	ldr	r3, [pc, #16]	@ (80103cc <pbuf_pool_is_empty+0x4c>)
 80103ba:	2200      	movs	r2, #0
 80103bc:	701a      	strb	r2, [r3, #0]
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f008 fe0a 	bl	8018fd8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80103c4:	bf00      	nop
 80103c6:	3708      	adds	r7, #8
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	20060b89 	.word	0x20060b89
 80103d0:	0801036d 	.word	0x0801036d

080103d4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80103d4:	b480      	push	{r7}
 80103d6:	b085      	sub	sp, #20
 80103d8:	af00      	add	r7, sp, #0
 80103da:	60f8      	str	r0, [r7, #12]
 80103dc:	60b9      	str	r1, [r7, #8]
 80103de:	4611      	mov	r1, r2
 80103e0:	461a      	mov	r2, r3
 80103e2:	460b      	mov	r3, r1
 80103e4:	80fb      	strh	r3, [r7, #6]
 80103e6:	4613      	mov	r3, r2
 80103e8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	2200      	movs	r2, #0
 80103ee:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	68ba      	ldr	r2, [r7, #8]
 80103f4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	88fa      	ldrh	r2, [r7, #6]
 80103fa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	88ba      	ldrh	r2, [r7, #4]
 8010400:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010402:	8b3b      	ldrh	r3, [r7, #24]
 8010404:	b2da      	uxtb	r2, r3
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	7f3a      	ldrb	r2, [r7, #28]
 801040e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	2201      	movs	r2, #1
 8010414:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	2200      	movs	r2, #0
 801041a:	73da      	strb	r2, [r3, #15]
}
 801041c:	bf00      	nop
 801041e:	3714      	adds	r7, #20
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr

08010428 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b08c      	sub	sp, #48	@ 0x30
 801042c:	af02      	add	r7, sp, #8
 801042e:	4603      	mov	r3, r0
 8010430:	71fb      	strb	r3, [r7, #7]
 8010432:	460b      	mov	r3, r1
 8010434:	80bb      	strh	r3, [r7, #4]
 8010436:	4613      	mov	r3, r2
 8010438:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801043a:	79fb      	ldrb	r3, [r7, #7]
 801043c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801043e:	887b      	ldrh	r3, [r7, #2]
 8010440:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8010444:	d07f      	beq.n	8010546 <pbuf_alloc+0x11e>
 8010446:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801044a:	f300 80c8 	bgt.w	80105de <pbuf_alloc+0x1b6>
 801044e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010452:	d010      	beq.n	8010476 <pbuf_alloc+0x4e>
 8010454:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010458:	f300 80c1 	bgt.w	80105de <pbuf_alloc+0x1b6>
 801045c:	2b01      	cmp	r3, #1
 801045e:	d002      	beq.n	8010466 <pbuf_alloc+0x3e>
 8010460:	2b41      	cmp	r3, #65	@ 0x41
 8010462:	f040 80bc 	bne.w	80105de <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010466:	887a      	ldrh	r2, [r7, #2]
 8010468:	88bb      	ldrh	r3, [r7, #4]
 801046a:	4619      	mov	r1, r3
 801046c:	2000      	movs	r0, #0
 801046e:	f000 f8d1 	bl	8010614 <pbuf_alloc_reference>
 8010472:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8010474:	e0bd      	b.n	80105f2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010476:	2300      	movs	r3, #0
 8010478:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 801047a:	2300      	movs	r3, #0
 801047c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801047e:	88bb      	ldrh	r3, [r7, #4]
 8010480:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010482:	200c      	movs	r0, #12
 8010484:	f7ff fb9a 	bl	800fbbc <memp_malloc>
 8010488:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d109      	bne.n	80104a4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010490:	f7ff ff76 	bl	8010380 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010496:	2b00      	cmp	r3, #0
 8010498:	d002      	beq.n	80104a0 <pbuf_alloc+0x78>
            pbuf_free(p);
 801049a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801049c:	f000 faa8 	bl	80109f0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80104a0:	2300      	movs	r3, #0
 80104a2:	e0a7      	b.n	80105f4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80104a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80104a6:	3303      	adds	r3, #3
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	f023 0303 	bic.w	r3, r3, #3
 80104ae:	b29b      	uxth	r3, r3
 80104b0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80104b4:	b29b      	uxth	r3, r3
 80104b6:	8b7a      	ldrh	r2, [r7, #26]
 80104b8:	4293      	cmp	r3, r2
 80104ba:	bf28      	it	cs
 80104bc:	4613      	movcs	r3, r2
 80104be:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80104c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80104c2:	3310      	adds	r3, #16
 80104c4:	693a      	ldr	r2, [r7, #16]
 80104c6:	4413      	add	r3, r2
 80104c8:	3303      	adds	r3, #3
 80104ca:	f023 0303 	bic.w	r3, r3, #3
 80104ce:	4618      	mov	r0, r3
 80104d0:	89f9      	ldrh	r1, [r7, #14]
 80104d2:	8b7a      	ldrh	r2, [r7, #26]
 80104d4:	2300      	movs	r3, #0
 80104d6:	9301      	str	r3, [sp, #4]
 80104d8:	887b      	ldrh	r3, [r7, #2]
 80104da:	9300      	str	r3, [sp, #0]
 80104dc:	460b      	mov	r3, r1
 80104de:	4601      	mov	r1, r0
 80104e0:	6938      	ldr	r0, [r7, #16]
 80104e2:	f7ff ff77 	bl	80103d4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	685b      	ldr	r3, [r3, #4]
 80104ea:	f003 0303 	and.w	r3, r3, #3
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d006      	beq.n	8010500 <pbuf_alloc+0xd8>
 80104f2:	4b42      	ldr	r3, [pc, #264]	@ (80105fc <pbuf_alloc+0x1d4>)
 80104f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80104f8:	4941      	ldr	r1, [pc, #260]	@ (8010600 <pbuf_alloc+0x1d8>)
 80104fa:	4842      	ldr	r0, [pc, #264]	@ (8010604 <pbuf_alloc+0x1dc>)
 80104fc:	f008 fe7c 	bl	80191f8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010500:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010502:	3303      	adds	r3, #3
 8010504:	f023 0303 	bic.w	r3, r3, #3
 8010508:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 801050c:	d106      	bne.n	801051c <pbuf_alloc+0xf4>
 801050e:	4b3b      	ldr	r3, [pc, #236]	@ (80105fc <pbuf_alloc+0x1d4>)
 8010510:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8010514:	493c      	ldr	r1, [pc, #240]	@ (8010608 <pbuf_alloc+0x1e0>)
 8010516:	483b      	ldr	r0, [pc, #236]	@ (8010604 <pbuf_alloc+0x1dc>)
 8010518:	f008 fe6e 	bl	80191f8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801051c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801051e:	2b00      	cmp	r3, #0
 8010520:	d102      	bne.n	8010528 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	627b      	str	r3, [r7, #36]	@ 0x24
 8010526:	e002      	b.n	801052e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010528:	69fb      	ldr	r3, [r7, #28]
 801052a:	693a      	ldr	r2, [r7, #16]
 801052c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010532:	8b7a      	ldrh	r2, [r7, #26]
 8010534:	89fb      	ldrh	r3, [r7, #14]
 8010536:	1ad3      	subs	r3, r2, r3
 8010538:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801053a:	2300      	movs	r3, #0
 801053c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801053e:	8b7b      	ldrh	r3, [r7, #26]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d19e      	bne.n	8010482 <pbuf_alloc+0x5a>
      break;
 8010544:	e055      	b.n	80105f2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010546:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010548:	3303      	adds	r3, #3
 801054a:	b29b      	uxth	r3, r3
 801054c:	f023 0303 	bic.w	r3, r3, #3
 8010550:	b29a      	uxth	r2, r3
 8010552:	88bb      	ldrh	r3, [r7, #4]
 8010554:	3303      	adds	r3, #3
 8010556:	b29b      	uxth	r3, r3
 8010558:	f023 0303 	bic.w	r3, r3, #3
 801055c:	b29b      	uxth	r3, r3
 801055e:	4413      	add	r3, r2
 8010560:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010562:	8b3b      	ldrh	r3, [r7, #24]
 8010564:	3310      	adds	r3, #16
 8010566:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010568:	8b3a      	ldrh	r2, [r7, #24]
 801056a:	88bb      	ldrh	r3, [r7, #4]
 801056c:	3303      	adds	r3, #3
 801056e:	f023 0303 	bic.w	r3, r3, #3
 8010572:	429a      	cmp	r2, r3
 8010574:	d306      	bcc.n	8010584 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010576:	8afa      	ldrh	r2, [r7, #22]
 8010578:	88bb      	ldrh	r3, [r7, #4]
 801057a:	3303      	adds	r3, #3
 801057c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010580:	429a      	cmp	r2, r3
 8010582:	d201      	bcs.n	8010588 <pbuf_alloc+0x160>
        return NULL;
 8010584:	2300      	movs	r3, #0
 8010586:	e035      	b.n	80105f4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010588:	8afb      	ldrh	r3, [r7, #22]
 801058a:	4618      	mov	r0, r3
 801058c:	f7ff f972 	bl	800f874 <mem_malloc>
 8010590:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8010592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010594:	2b00      	cmp	r3, #0
 8010596:	d101      	bne.n	801059c <pbuf_alloc+0x174>
        return NULL;
 8010598:	2300      	movs	r3, #0
 801059a:	e02b      	b.n	80105f4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801059c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801059e:	3310      	adds	r3, #16
 80105a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105a2:	4413      	add	r3, r2
 80105a4:	3303      	adds	r3, #3
 80105a6:	f023 0303 	bic.w	r3, r3, #3
 80105aa:	4618      	mov	r0, r3
 80105ac:	88b9      	ldrh	r1, [r7, #4]
 80105ae:	88ba      	ldrh	r2, [r7, #4]
 80105b0:	2300      	movs	r3, #0
 80105b2:	9301      	str	r3, [sp, #4]
 80105b4:	887b      	ldrh	r3, [r7, #2]
 80105b6:	9300      	str	r3, [sp, #0]
 80105b8:	460b      	mov	r3, r1
 80105ba:	4601      	mov	r1, r0
 80105bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80105be:	f7ff ff09 	bl	80103d4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80105c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	f003 0303 	and.w	r3, r3, #3
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d010      	beq.n	80105f0 <pbuf_alloc+0x1c8>
 80105ce:	4b0b      	ldr	r3, [pc, #44]	@ (80105fc <pbuf_alloc+0x1d4>)
 80105d0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80105d4:	490d      	ldr	r1, [pc, #52]	@ (801060c <pbuf_alloc+0x1e4>)
 80105d6:	480b      	ldr	r0, [pc, #44]	@ (8010604 <pbuf_alloc+0x1dc>)
 80105d8:	f008 fe0e 	bl	80191f8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80105dc:	e008      	b.n	80105f0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80105de:	4b07      	ldr	r3, [pc, #28]	@ (80105fc <pbuf_alloc+0x1d4>)
 80105e0:	f240 1227 	movw	r2, #295	@ 0x127
 80105e4:	490a      	ldr	r1, [pc, #40]	@ (8010610 <pbuf_alloc+0x1e8>)
 80105e6:	4807      	ldr	r0, [pc, #28]	@ (8010604 <pbuf_alloc+0x1dc>)
 80105e8:	f008 fe06 	bl	80191f8 <iprintf>
      return NULL;
 80105ec:	2300      	movs	r3, #0
 80105ee:	e001      	b.n	80105f4 <pbuf_alloc+0x1cc>
      break;
 80105f0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80105f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3728      	adds	r7, #40	@ 0x28
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}
 80105fc:	0801a73c 	.word	0x0801a73c
 8010600:	0801a76c 	.word	0x0801a76c
 8010604:	0801a79c 	.word	0x0801a79c
 8010608:	0801a7c4 	.word	0x0801a7c4
 801060c:	0801a7f8 	.word	0x0801a7f8
 8010610:	0801a824 	.word	0x0801a824

08010614 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b086      	sub	sp, #24
 8010618:	af02      	add	r7, sp, #8
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	460b      	mov	r3, r1
 801061e:	807b      	strh	r3, [r7, #2]
 8010620:	4613      	mov	r3, r2
 8010622:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010624:	883b      	ldrh	r3, [r7, #0]
 8010626:	2b41      	cmp	r3, #65	@ 0x41
 8010628:	d009      	beq.n	801063e <pbuf_alloc_reference+0x2a>
 801062a:	883b      	ldrh	r3, [r7, #0]
 801062c:	2b01      	cmp	r3, #1
 801062e:	d006      	beq.n	801063e <pbuf_alloc_reference+0x2a>
 8010630:	4b0f      	ldr	r3, [pc, #60]	@ (8010670 <pbuf_alloc_reference+0x5c>)
 8010632:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8010636:	490f      	ldr	r1, [pc, #60]	@ (8010674 <pbuf_alloc_reference+0x60>)
 8010638:	480f      	ldr	r0, [pc, #60]	@ (8010678 <pbuf_alloc_reference+0x64>)
 801063a:	f008 fddd 	bl	80191f8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801063e:	200b      	movs	r0, #11
 8010640:	f7ff fabc 	bl	800fbbc <memp_malloc>
 8010644:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d101      	bne.n	8010650 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801064c:	2300      	movs	r3, #0
 801064e:	e00b      	b.n	8010668 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010650:	8879      	ldrh	r1, [r7, #2]
 8010652:	887a      	ldrh	r2, [r7, #2]
 8010654:	2300      	movs	r3, #0
 8010656:	9301      	str	r3, [sp, #4]
 8010658:	883b      	ldrh	r3, [r7, #0]
 801065a:	9300      	str	r3, [sp, #0]
 801065c:	460b      	mov	r3, r1
 801065e:	6879      	ldr	r1, [r7, #4]
 8010660:	68f8      	ldr	r0, [r7, #12]
 8010662:	f7ff feb7 	bl	80103d4 <pbuf_init_alloced_pbuf>
  return p;
 8010666:	68fb      	ldr	r3, [r7, #12]
}
 8010668:	4618      	mov	r0, r3
 801066a:	3710      	adds	r7, #16
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}
 8010670:	0801a73c 	.word	0x0801a73c
 8010674:	0801a840 	.word	0x0801a840
 8010678:	0801a79c 	.word	0x0801a79c

0801067c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b088      	sub	sp, #32
 8010680:	af02      	add	r7, sp, #8
 8010682:	607b      	str	r3, [r7, #4]
 8010684:	4603      	mov	r3, r0
 8010686:	73fb      	strb	r3, [r7, #15]
 8010688:	460b      	mov	r3, r1
 801068a:	81bb      	strh	r3, [r7, #12]
 801068c:	4613      	mov	r3, r2
 801068e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010690:	7bfb      	ldrb	r3, [r7, #15]
 8010692:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010694:	8a7b      	ldrh	r3, [r7, #18]
 8010696:	3303      	adds	r3, #3
 8010698:	f023 0203 	bic.w	r2, r3, #3
 801069c:	89bb      	ldrh	r3, [r7, #12]
 801069e:	441a      	add	r2, r3
 80106a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d901      	bls.n	80106aa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80106a6:	2300      	movs	r3, #0
 80106a8:	e018      	b.n	80106dc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80106aa:	6a3b      	ldr	r3, [r7, #32]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d007      	beq.n	80106c0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80106b0:	8a7b      	ldrh	r3, [r7, #18]
 80106b2:	3303      	adds	r3, #3
 80106b4:	f023 0303 	bic.w	r3, r3, #3
 80106b8:	6a3a      	ldr	r2, [r7, #32]
 80106ba:	4413      	add	r3, r2
 80106bc:	617b      	str	r3, [r7, #20]
 80106be:	e001      	b.n	80106c4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80106c0:	2300      	movs	r3, #0
 80106c2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	89b9      	ldrh	r1, [r7, #12]
 80106c8:	89ba      	ldrh	r2, [r7, #12]
 80106ca:	2302      	movs	r3, #2
 80106cc:	9301      	str	r3, [sp, #4]
 80106ce:	897b      	ldrh	r3, [r7, #10]
 80106d0:	9300      	str	r3, [sp, #0]
 80106d2:	460b      	mov	r3, r1
 80106d4:	6979      	ldr	r1, [r7, #20]
 80106d6:	f7ff fe7d 	bl	80103d4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80106da:	687b      	ldr	r3, [r7, #4]
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3718      	adds	r7, #24
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b084      	sub	sp, #16
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	460b      	mov	r3, r1
 80106ee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d106      	bne.n	8010704 <pbuf_realloc+0x20>
 80106f6:	4b3a      	ldr	r3, [pc, #232]	@ (80107e0 <pbuf_realloc+0xfc>)
 80106f8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80106fc:	4939      	ldr	r1, [pc, #228]	@ (80107e4 <pbuf_realloc+0x100>)
 80106fe:	483a      	ldr	r0, [pc, #232]	@ (80107e8 <pbuf_realloc+0x104>)
 8010700:	f008 fd7a 	bl	80191f8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	891b      	ldrh	r3, [r3, #8]
 8010708:	887a      	ldrh	r2, [r7, #2]
 801070a:	429a      	cmp	r2, r3
 801070c:	d263      	bcs.n	80107d6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	891a      	ldrh	r2, [r3, #8]
 8010712:	887b      	ldrh	r3, [r7, #2]
 8010714:	1ad3      	subs	r3, r2, r3
 8010716:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010718:	887b      	ldrh	r3, [r7, #2]
 801071a:	817b      	strh	r3, [r7, #10]
  q = p;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010720:	e018      	b.n	8010754 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	895b      	ldrh	r3, [r3, #10]
 8010726:	897a      	ldrh	r2, [r7, #10]
 8010728:	1ad3      	subs	r3, r2, r3
 801072a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	891a      	ldrh	r2, [r3, #8]
 8010730:	893b      	ldrh	r3, [r7, #8]
 8010732:	1ad3      	subs	r3, r2, r3
 8010734:	b29a      	uxth	r2, r3
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d106      	bne.n	8010754 <pbuf_realloc+0x70>
 8010746:	4b26      	ldr	r3, [pc, #152]	@ (80107e0 <pbuf_realloc+0xfc>)
 8010748:	f240 12af 	movw	r2, #431	@ 0x1af
 801074c:	4927      	ldr	r1, [pc, #156]	@ (80107ec <pbuf_realloc+0x108>)
 801074e:	4826      	ldr	r0, [pc, #152]	@ (80107e8 <pbuf_realloc+0x104>)
 8010750:	f008 fd52 	bl	80191f8 <iprintf>
  while (rem_len > q->len) {
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	895b      	ldrh	r3, [r3, #10]
 8010758:	897a      	ldrh	r2, [r7, #10]
 801075a:	429a      	cmp	r2, r3
 801075c:	d8e1      	bhi.n	8010722 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	7b1b      	ldrb	r3, [r3, #12]
 8010762:	f003 030f 	and.w	r3, r3, #15
 8010766:	2b00      	cmp	r3, #0
 8010768:	d121      	bne.n	80107ae <pbuf_realloc+0xca>
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	895b      	ldrh	r3, [r3, #10]
 801076e:	897a      	ldrh	r2, [r7, #10]
 8010770:	429a      	cmp	r2, r3
 8010772:	d01c      	beq.n	80107ae <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	7b5b      	ldrb	r3, [r3, #13]
 8010778:	f003 0302 	and.w	r3, r3, #2
 801077c:	2b00      	cmp	r3, #0
 801077e:	d116      	bne.n	80107ae <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	685a      	ldr	r2, [r3, #4]
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	1ad3      	subs	r3, r2, r3
 8010788:	b29a      	uxth	r2, r3
 801078a:	897b      	ldrh	r3, [r7, #10]
 801078c:	4413      	add	r3, r2
 801078e:	b29b      	uxth	r3, r3
 8010790:	4619      	mov	r1, r3
 8010792:	68f8      	ldr	r0, [r7, #12]
 8010794:	f7fe ff64 	bl	800f660 <mem_trim>
 8010798:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d106      	bne.n	80107ae <pbuf_realloc+0xca>
 80107a0:	4b0f      	ldr	r3, [pc, #60]	@ (80107e0 <pbuf_realloc+0xfc>)
 80107a2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80107a6:	4912      	ldr	r1, [pc, #72]	@ (80107f0 <pbuf_realloc+0x10c>)
 80107a8:	480f      	ldr	r0, [pc, #60]	@ (80107e8 <pbuf_realloc+0x104>)
 80107aa:	f008 fd25 	bl	80191f8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	897a      	ldrh	r2, [r7, #10]
 80107b2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	895a      	ldrh	r2, [r3, #10]
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d004      	beq.n	80107ce <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	4618      	mov	r0, r3
 80107ca:	f000 f911 	bl	80109f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2200      	movs	r2, #0
 80107d2:	601a      	str	r2, [r3, #0]
 80107d4:	e000      	b.n	80107d8 <pbuf_realloc+0xf4>
    return;
 80107d6:	bf00      	nop

}
 80107d8:	3710      	adds	r7, #16
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
 80107de:	bf00      	nop
 80107e0:	0801a73c 	.word	0x0801a73c
 80107e4:	0801a854 	.word	0x0801a854
 80107e8:	0801a79c 	.word	0x0801a79c
 80107ec:	0801a86c 	.word	0x0801a86c
 80107f0:	0801a884 	.word	0x0801a884

080107f4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b086      	sub	sp, #24
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	60f8      	str	r0, [r7, #12]
 80107fc:	60b9      	str	r1, [r7, #8]
 80107fe:	4613      	mov	r3, r2
 8010800:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d106      	bne.n	8010816 <pbuf_add_header_impl+0x22>
 8010808:	4b2b      	ldr	r3, [pc, #172]	@ (80108b8 <pbuf_add_header_impl+0xc4>)
 801080a:	f240 12df 	movw	r2, #479	@ 0x1df
 801080e:	492b      	ldr	r1, [pc, #172]	@ (80108bc <pbuf_add_header_impl+0xc8>)
 8010810:	482b      	ldr	r0, [pc, #172]	@ (80108c0 <pbuf_add_header_impl+0xcc>)
 8010812:	f008 fcf1 	bl	80191f8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d003      	beq.n	8010824 <pbuf_add_header_impl+0x30>
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010822:	d301      	bcc.n	8010828 <pbuf_add_header_impl+0x34>
    return 1;
 8010824:	2301      	movs	r3, #1
 8010826:	e043      	b.n	80108b0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d101      	bne.n	8010832 <pbuf_add_header_impl+0x3e>
    return 0;
 801082e:	2300      	movs	r3, #0
 8010830:	e03e      	b.n	80108b0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	891a      	ldrh	r2, [r3, #8]
 801083a:	8a7b      	ldrh	r3, [r7, #18]
 801083c:	4413      	add	r3, r2
 801083e:	b29b      	uxth	r3, r3
 8010840:	8a7a      	ldrh	r2, [r7, #18]
 8010842:	429a      	cmp	r2, r3
 8010844:	d901      	bls.n	801084a <pbuf_add_header_impl+0x56>
    return 1;
 8010846:	2301      	movs	r3, #1
 8010848:	e032      	b.n	80108b0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	7b1b      	ldrb	r3, [r3, #12]
 801084e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010850:	8a3b      	ldrh	r3, [r7, #16]
 8010852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010856:	2b00      	cmp	r3, #0
 8010858:	d00c      	beq.n	8010874 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	685a      	ldr	r2, [r3, #4]
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	425b      	negs	r3, r3
 8010862:	4413      	add	r3, r2
 8010864:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	3310      	adds	r3, #16
 801086a:	697a      	ldr	r2, [r7, #20]
 801086c:	429a      	cmp	r2, r3
 801086e:	d20d      	bcs.n	801088c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010870:	2301      	movs	r3, #1
 8010872:	e01d      	b.n	80108b0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010874:	79fb      	ldrb	r3, [r7, #7]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d006      	beq.n	8010888 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	685a      	ldr	r2, [r3, #4]
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	425b      	negs	r3, r3
 8010882:	4413      	add	r3, r2
 8010884:	617b      	str	r3, [r7, #20]
 8010886:	e001      	b.n	801088c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010888:	2301      	movs	r3, #1
 801088a:	e011      	b.n	80108b0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	697a      	ldr	r2, [r7, #20]
 8010890:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	895a      	ldrh	r2, [r3, #10]
 8010896:	8a7b      	ldrh	r3, [r7, #18]
 8010898:	4413      	add	r3, r2
 801089a:	b29a      	uxth	r2, r3
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	891a      	ldrh	r2, [r3, #8]
 80108a4:	8a7b      	ldrh	r3, [r7, #18]
 80108a6:	4413      	add	r3, r2
 80108a8:	b29a      	uxth	r2, r3
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	811a      	strh	r2, [r3, #8]


  return 0;
 80108ae:	2300      	movs	r3, #0
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3718      	adds	r7, #24
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}
 80108b8:	0801a73c 	.word	0x0801a73c
 80108bc:	0801a8a0 	.word	0x0801a8a0
 80108c0:	0801a79c 	.word	0x0801a79c

080108c4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80108ce:	2200      	movs	r2, #0
 80108d0:	6839      	ldr	r1, [r7, #0]
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7ff ff8e 	bl	80107f4 <pbuf_add_header_impl>
 80108d8:	4603      	mov	r3, r0
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3708      	adds	r7, #8
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}
	...

080108e4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b084      	sub	sp, #16
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d106      	bne.n	8010902 <pbuf_remove_header+0x1e>
 80108f4:	4b20      	ldr	r3, [pc, #128]	@ (8010978 <pbuf_remove_header+0x94>)
 80108f6:	f240 224b 	movw	r2, #587	@ 0x24b
 80108fa:	4920      	ldr	r1, [pc, #128]	@ (801097c <pbuf_remove_header+0x98>)
 80108fc:	4820      	ldr	r0, [pc, #128]	@ (8010980 <pbuf_remove_header+0x9c>)
 80108fe:	f008 fc7b 	bl	80191f8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d003      	beq.n	8010910 <pbuf_remove_header+0x2c>
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801090e:	d301      	bcc.n	8010914 <pbuf_remove_header+0x30>
    return 1;
 8010910:	2301      	movs	r3, #1
 8010912:	e02c      	b.n	801096e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d101      	bne.n	801091e <pbuf_remove_header+0x3a>
    return 0;
 801091a:	2300      	movs	r3, #0
 801091c:	e027      	b.n	801096e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	895b      	ldrh	r3, [r3, #10]
 8010926:	89fa      	ldrh	r2, [r7, #14]
 8010928:	429a      	cmp	r2, r3
 801092a:	d908      	bls.n	801093e <pbuf_remove_header+0x5a>
 801092c:	4b12      	ldr	r3, [pc, #72]	@ (8010978 <pbuf_remove_header+0x94>)
 801092e:	f240 2255 	movw	r2, #597	@ 0x255
 8010932:	4914      	ldr	r1, [pc, #80]	@ (8010984 <pbuf_remove_header+0xa0>)
 8010934:	4812      	ldr	r0, [pc, #72]	@ (8010980 <pbuf_remove_header+0x9c>)
 8010936:	f008 fc5f 	bl	80191f8 <iprintf>
 801093a:	2301      	movs	r3, #1
 801093c:	e017      	b.n	801096e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	685a      	ldr	r2, [r3, #4]
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	441a      	add	r2, r3
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	895a      	ldrh	r2, [r3, #10]
 8010954:	89fb      	ldrh	r3, [r7, #14]
 8010956:	1ad3      	subs	r3, r2, r3
 8010958:	b29a      	uxth	r2, r3
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	891a      	ldrh	r2, [r3, #8]
 8010962:	89fb      	ldrh	r3, [r7, #14]
 8010964:	1ad3      	subs	r3, r2, r3
 8010966:	b29a      	uxth	r2, r3
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801096c:	2300      	movs	r3, #0
}
 801096e:	4618      	mov	r0, r3
 8010970:	3710      	adds	r7, #16
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}
 8010976:	bf00      	nop
 8010978:	0801a73c 	.word	0x0801a73c
 801097c:	0801a8a0 	.word	0x0801a8a0
 8010980:	0801a79c 	.word	0x0801a79c
 8010984:	0801a8ac 	.word	0x0801a8ac

08010988 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	460b      	mov	r3, r1
 8010992:	807b      	strh	r3, [r7, #2]
 8010994:	4613      	mov	r3, r2
 8010996:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010998:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801099c:	2b00      	cmp	r3, #0
 801099e:	da08      	bge.n	80109b2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80109a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80109a4:	425b      	negs	r3, r3
 80109a6:	4619      	mov	r1, r3
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f7ff ff9b 	bl	80108e4 <pbuf_remove_header>
 80109ae:	4603      	mov	r3, r0
 80109b0:	e007      	b.n	80109c2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80109b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80109b6:	787a      	ldrb	r2, [r7, #1]
 80109b8:	4619      	mov	r1, r3
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f7ff ff1a 	bl	80107f4 <pbuf_add_header_impl>
 80109c0:	4603      	mov	r3, r0
  }
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3708      	adds	r7, #8
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}

080109ca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80109ca:	b580      	push	{r7, lr}
 80109cc:	b082      	sub	sp, #8
 80109ce:	af00      	add	r7, sp, #0
 80109d0:	6078      	str	r0, [r7, #4]
 80109d2:	460b      	mov	r3, r1
 80109d4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80109d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80109da:	2201      	movs	r2, #1
 80109dc:	4619      	mov	r1, r3
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f7ff ffd2 	bl	8010988 <pbuf_header_impl>
 80109e4:	4603      	mov	r3, r0
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3708      	adds	r7, #8
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
	...

080109f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b088      	sub	sp, #32
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d10b      	bne.n	8010a16 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d106      	bne.n	8010a12 <pbuf_free+0x22>
 8010a04:	4b3b      	ldr	r3, [pc, #236]	@ (8010af4 <pbuf_free+0x104>)
 8010a06:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8010a0a:	493b      	ldr	r1, [pc, #236]	@ (8010af8 <pbuf_free+0x108>)
 8010a0c:	483b      	ldr	r0, [pc, #236]	@ (8010afc <pbuf_free+0x10c>)
 8010a0e:	f008 fbf3 	bl	80191f8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010a12:	2300      	movs	r3, #0
 8010a14:	e069      	b.n	8010aea <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010a16:	2300      	movs	r3, #0
 8010a18:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010a1a:	e062      	b.n	8010ae2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010a1c:	f008 face 	bl	8018fbc <sys_arch_protect>
 8010a20:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	7b9b      	ldrb	r3, [r3, #14]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d106      	bne.n	8010a38 <pbuf_free+0x48>
 8010a2a:	4b32      	ldr	r3, [pc, #200]	@ (8010af4 <pbuf_free+0x104>)
 8010a2c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8010a30:	4933      	ldr	r1, [pc, #204]	@ (8010b00 <pbuf_free+0x110>)
 8010a32:	4832      	ldr	r0, [pc, #200]	@ (8010afc <pbuf_free+0x10c>)
 8010a34:	f008 fbe0 	bl	80191f8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	7b9b      	ldrb	r3, [r3, #14]
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	b2da      	uxtb	r2, r3
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	739a      	strb	r2, [r3, #14]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	7b9b      	ldrb	r3, [r3, #14]
 8010a48:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8010a4a:	69b8      	ldr	r0, [r7, #24]
 8010a4c:	f008 fac4 	bl	8018fd8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010a50:	7dfb      	ldrb	r3, [r7, #23]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d143      	bne.n	8010ade <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	7b1b      	ldrb	r3, [r3, #12]
 8010a60:	f003 030f 	and.w	r3, r3, #15
 8010a64:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	7b5b      	ldrb	r3, [r3, #13]
 8010a6a:	f003 0302 	and.w	r3, r3, #2
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d011      	beq.n	8010a96 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	691b      	ldr	r3, [r3, #16]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d106      	bne.n	8010a8c <pbuf_free+0x9c>
 8010a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8010af4 <pbuf_free+0x104>)
 8010a80:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010a84:	491f      	ldr	r1, [pc, #124]	@ (8010b04 <pbuf_free+0x114>)
 8010a86:	481d      	ldr	r0, [pc, #116]	@ (8010afc <pbuf_free+0x10c>)
 8010a88:	f008 fbb6 	bl	80191f8 <iprintf>
        pc->custom_free_function(p);
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	691b      	ldr	r3, [r3, #16]
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	4798      	blx	r3
 8010a94:	e01d      	b.n	8010ad2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010a96:	7bfb      	ldrb	r3, [r7, #15]
 8010a98:	2b02      	cmp	r3, #2
 8010a9a:	d104      	bne.n	8010aa6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010a9c:	6879      	ldr	r1, [r7, #4]
 8010a9e:	200c      	movs	r0, #12
 8010aa0:	f7ff f902 	bl	800fca8 <memp_free>
 8010aa4:	e015      	b.n	8010ad2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010aa6:	7bfb      	ldrb	r3, [r7, #15]
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	d104      	bne.n	8010ab6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010aac:	6879      	ldr	r1, [r7, #4]
 8010aae:	200b      	movs	r0, #11
 8010ab0:	f7ff f8fa 	bl	800fca8 <memp_free>
 8010ab4:	e00d      	b.n	8010ad2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010ab6:	7bfb      	ldrb	r3, [r7, #15]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d103      	bne.n	8010ac4 <pbuf_free+0xd4>
          mem_free(p);
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f7fe fd3f 	bl	800f540 <mem_free>
 8010ac2:	e006      	b.n	8010ad2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8010af4 <pbuf_free+0x104>)
 8010ac6:	f240 320f 	movw	r2, #783	@ 0x30f
 8010aca:	490f      	ldr	r1, [pc, #60]	@ (8010b08 <pbuf_free+0x118>)
 8010acc:	480b      	ldr	r0, [pc, #44]	@ (8010afc <pbuf_free+0x10c>)
 8010ace:	f008 fb93 	bl	80191f8 <iprintf>
        }
      }
      count++;
 8010ad2:	7ffb      	ldrb	r3, [r7, #31]
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	607b      	str	r3, [r7, #4]
 8010adc:	e001      	b.n	8010ae2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d199      	bne.n	8010a1c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010ae8:	7ffb      	ldrb	r3, [r7, #31]
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3720      	adds	r7, #32
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}
 8010af2:	bf00      	nop
 8010af4:	0801a73c 	.word	0x0801a73c
 8010af8:	0801a8a0 	.word	0x0801a8a0
 8010afc:	0801a79c 	.word	0x0801a79c
 8010b00:	0801a8cc 	.word	0x0801a8cc
 8010b04:	0801a8e4 	.word	0x0801a8e4
 8010b08:	0801a908 	.word	0x0801a908

08010b0c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b085      	sub	sp, #20
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010b14:	2300      	movs	r3, #0
 8010b16:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010b18:	e005      	b.n	8010b26 <pbuf_clen+0x1a>
    ++len;
 8010b1a:	89fb      	ldrh	r3, [r7, #14]
 8010b1c:	3301      	adds	r3, #1
 8010b1e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d1f6      	bne.n	8010b1a <pbuf_clen+0xe>
  }
  return len;
 8010b2c:	89fb      	ldrh	r3, [r7, #14]
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3714      	adds	r7, #20
 8010b32:	46bd      	mov	sp, r7
 8010b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b38:	4770      	bx	lr
	...

08010b3c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d016      	beq.n	8010b78 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010b4a:	f008 fa37 	bl	8018fbc <sys_arch_protect>
 8010b4e:	60f8      	str	r0, [r7, #12]
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	7b9b      	ldrb	r3, [r3, #14]
 8010b54:	3301      	adds	r3, #1
 8010b56:	b2da      	uxtb	r2, r3
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	739a      	strb	r2, [r3, #14]
 8010b5c:	68f8      	ldr	r0, [r7, #12]
 8010b5e:	f008 fa3b 	bl	8018fd8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	7b9b      	ldrb	r3, [r3, #14]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d106      	bne.n	8010b78 <pbuf_ref+0x3c>
 8010b6a:	4b05      	ldr	r3, [pc, #20]	@ (8010b80 <pbuf_ref+0x44>)
 8010b6c:	f240 3242 	movw	r2, #834	@ 0x342
 8010b70:	4904      	ldr	r1, [pc, #16]	@ (8010b84 <pbuf_ref+0x48>)
 8010b72:	4805      	ldr	r0, [pc, #20]	@ (8010b88 <pbuf_ref+0x4c>)
 8010b74:	f008 fb40 	bl	80191f8 <iprintf>
  }
}
 8010b78:	bf00      	nop
 8010b7a:	3710      	adds	r7, #16
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	0801a73c 	.word	0x0801a73c
 8010b84:	0801a91c 	.word	0x0801a91c
 8010b88:	0801a79c 	.word	0x0801a79c

08010b8c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b084      	sub	sp, #16
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
 8010b94:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d002      	beq.n	8010ba2 <pbuf_cat+0x16>
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d107      	bne.n	8010bb2 <pbuf_cat+0x26>
 8010ba2:	4b20      	ldr	r3, [pc, #128]	@ (8010c24 <pbuf_cat+0x98>)
 8010ba4:	f240 3259 	movw	r2, #857	@ 0x359
 8010ba8:	491f      	ldr	r1, [pc, #124]	@ (8010c28 <pbuf_cat+0x9c>)
 8010baa:	4820      	ldr	r0, [pc, #128]	@ (8010c2c <pbuf_cat+0xa0>)
 8010bac:	f008 fb24 	bl	80191f8 <iprintf>
 8010bb0:	e034      	b.n	8010c1c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	60fb      	str	r3, [r7, #12]
 8010bb6:	e00a      	b.n	8010bce <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	891a      	ldrh	r2, [r3, #8]
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	891b      	ldrh	r3, [r3, #8]
 8010bc0:	4413      	add	r3, r2
 8010bc2:	b29a      	uxth	r2, r3
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	60fb      	str	r3, [r7, #12]
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d1f0      	bne.n	8010bb8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	891a      	ldrh	r2, [r3, #8]
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	895b      	ldrh	r3, [r3, #10]
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d006      	beq.n	8010bf0 <pbuf_cat+0x64>
 8010be2:	4b10      	ldr	r3, [pc, #64]	@ (8010c24 <pbuf_cat+0x98>)
 8010be4:	f240 3262 	movw	r2, #866	@ 0x362
 8010be8:	4911      	ldr	r1, [pc, #68]	@ (8010c30 <pbuf_cat+0xa4>)
 8010bea:	4810      	ldr	r0, [pc, #64]	@ (8010c2c <pbuf_cat+0xa0>)
 8010bec:	f008 fb04 	bl	80191f8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d006      	beq.n	8010c06 <pbuf_cat+0x7a>
 8010bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8010c24 <pbuf_cat+0x98>)
 8010bfa:	f240 3263 	movw	r2, #867	@ 0x363
 8010bfe:	490d      	ldr	r1, [pc, #52]	@ (8010c34 <pbuf_cat+0xa8>)
 8010c00:	480a      	ldr	r0, [pc, #40]	@ (8010c2c <pbuf_cat+0xa0>)
 8010c02:	f008 faf9 	bl	80191f8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	891a      	ldrh	r2, [r3, #8]
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	891b      	ldrh	r3, [r3, #8]
 8010c0e:	4413      	add	r3, r2
 8010c10:	b29a      	uxth	r2, r3
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	683a      	ldr	r2, [r7, #0]
 8010c1a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010c1c:	3710      	adds	r7, #16
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	0801a73c 	.word	0x0801a73c
 8010c28:	0801a930 	.word	0x0801a930
 8010c2c:	0801a79c 	.word	0x0801a79c
 8010c30:	0801a968 	.word	0x0801a968
 8010c34:	0801a998 	.word	0x0801a998

08010c38 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b086      	sub	sp, #24
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010c42:	2300      	movs	r3, #0
 8010c44:	617b      	str	r3, [r7, #20]
 8010c46:	2300      	movs	r3, #0
 8010c48:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d008      	beq.n	8010c62 <pbuf_copy+0x2a>
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d005      	beq.n	8010c62 <pbuf_copy+0x2a>
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	891a      	ldrh	r2, [r3, #8]
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	891b      	ldrh	r3, [r3, #8]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d209      	bcs.n	8010c76 <pbuf_copy+0x3e>
 8010c62:	4b57      	ldr	r3, [pc, #348]	@ (8010dc0 <pbuf_copy+0x188>)
 8010c64:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8010c68:	4956      	ldr	r1, [pc, #344]	@ (8010dc4 <pbuf_copy+0x18c>)
 8010c6a:	4857      	ldr	r0, [pc, #348]	@ (8010dc8 <pbuf_copy+0x190>)
 8010c6c:	f008 fac4 	bl	80191f8 <iprintf>
 8010c70:	f06f 030f 	mvn.w	r3, #15
 8010c74:	e09f      	b.n	8010db6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	895b      	ldrh	r3, [r3, #10]
 8010c7a:	461a      	mov	r2, r3
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	1ad2      	subs	r2, r2, r3
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	895b      	ldrh	r3, [r3, #10]
 8010c84:	4619      	mov	r1, r3
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	1acb      	subs	r3, r1, r3
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d306      	bcc.n	8010c9c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	895b      	ldrh	r3, [r3, #10]
 8010c92:	461a      	mov	r2, r3
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	1ad3      	subs	r3, r2, r3
 8010c98:	60fb      	str	r3, [r7, #12]
 8010c9a:	e005      	b.n	8010ca8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	895b      	ldrh	r3, [r3, #10]
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	1ad3      	subs	r3, r2, r3
 8010ca6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	685a      	ldr	r2, [r3, #4]
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	18d0      	adds	r0, r2, r3
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	685a      	ldr	r2, [r3, #4]
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	68fa      	ldr	r2, [r7, #12]
 8010cba:	4619      	mov	r1, r3
 8010cbc:	f008 fb77 	bl	80193ae <memcpy>
    offset_to += len;
 8010cc0:	697a      	ldr	r2, [r7, #20]
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	4413      	add	r3, r2
 8010cc6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010cc8:	693a      	ldr	r2, [r7, #16]
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	4413      	add	r3, r2
 8010cce:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	895b      	ldrh	r3, [r3, #10]
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d906      	bls.n	8010cea <pbuf_copy+0xb2>
 8010cdc:	4b38      	ldr	r3, [pc, #224]	@ (8010dc0 <pbuf_copy+0x188>)
 8010cde:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8010ce2:	493a      	ldr	r1, [pc, #232]	@ (8010dcc <pbuf_copy+0x194>)
 8010ce4:	4838      	ldr	r0, [pc, #224]	@ (8010dc8 <pbuf_copy+0x190>)
 8010ce6:	f008 fa87 	bl	80191f8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	895b      	ldrh	r3, [r3, #10]
 8010cee:	461a      	mov	r2, r3
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	4293      	cmp	r3, r2
 8010cf4:	d906      	bls.n	8010d04 <pbuf_copy+0xcc>
 8010cf6:	4b32      	ldr	r3, [pc, #200]	@ (8010dc0 <pbuf_copy+0x188>)
 8010cf8:	f240 32da 	movw	r2, #986	@ 0x3da
 8010cfc:	4934      	ldr	r1, [pc, #208]	@ (8010dd0 <pbuf_copy+0x198>)
 8010cfe:	4832      	ldr	r0, [pc, #200]	@ (8010dc8 <pbuf_copy+0x190>)
 8010d00:	f008 fa7a 	bl	80191f8 <iprintf>
    if (offset_from >= p_from->len) {
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	895b      	ldrh	r3, [r3, #10]
 8010d08:	461a      	mov	r2, r3
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d304      	bcc.n	8010d1a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010d10:	2300      	movs	r3, #0
 8010d12:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	895b      	ldrh	r3, [r3, #10]
 8010d1e:	461a      	mov	r2, r3
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	4293      	cmp	r3, r2
 8010d24:	d114      	bne.n	8010d50 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010d26:	2300      	movs	r3, #0
 8010d28:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d10c      	bne.n	8010d50 <pbuf_copy+0x118>
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d009      	beq.n	8010d50 <pbuf_copy+0x118>
 8010d3c:	4b20      	ldr	r3, [pc, #128]	@ (8010dc0 <pbuf_copy+0x188>)
 8010d3e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8010d42:	4924      	ldr	r1, [pc, #144]	@ (8010dd4 <pbuf_copy+0x19c>)
 8010d44:	4820      	ldr	r0, [pc, #128]	@ (8010dc8 <pbuf_copy+0x190>)
 8010d46:	f008 fa57 	bl	80191f8 <iprintf>
 8010d4a:	f06f 030f 	mvn.w	r3, #15
 8010d4e:	e032      	b.n	8010db6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d013      	beq.n	8010d7e <pbuf_copy+0x146>
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	895a      	ldrh	r2, [r3, #10]
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	891b      	ldrh	r3, [r3, #8]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d10d      	bne.n	8010d7e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d009      	beq.n	8010d7e <pbuf_copy+0x146>
 8010d6a:	4b15      	ldr	r3, [pc, #84]	@ (8010dc0 <pbuf_copy+0x188>)
 8010d6c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8010d70:	4919      	ldr	r1, [pc, #100]	@ (8010dd8 <pbuf_copy+0x1a0>)
 8010d72:	4815      	ldr	r0, [pc, #84]	@ (8010dc8 <pbuf_copy+0x190>)
 8010d74:	f008 fa40 	bl	80191f8 <iprintf>
 8010d78:	f06f 0305 	mvn.w	r3, #5
 8010d7c:	e01b      	b.n	8010db6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d013      	beq.n	8010dac <pbuf_copy+0x174>
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	895a      	ldrh	r2, [r3, #10]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	891b      	ldrh	r3, [r3, #8]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d10d      	bne.n	8010dac <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d009      	beq.n	8010dac <pbuf_copy+0x174>
 8010d98:	4b09      	ldr	r3, [pc, #36]	@ (8010dc0 <pbuf_copy+0x188>)
 8010d9a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8010d9e:	490e      	ldr	r1, [pc, #56]	@ (8010dd8 <pbuf_copy+0x1a0>)
 8010da0:	4809      	ldr	r0, [pc, #36]	@ (8010dc8 <pbuf_copy+0x190>)
 8010da2:	f008 fa29 	bl	80191f8 <iprintf>
 8010da6:	f06f 0305 	mvn.w	r3, #5
 8010daa:	e004      	b.n	8010db6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	f47f af61 	bne.w	8010c76 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010db4:	2300      	movs	r3, #0
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3718      	adds	r7, #24
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	0801a73c 	.word	0x0801a73c
 8010dc4:	0801a9e4 	.word	0x0801a9e4
 8010dc8:	0801a79c 	.word	0x0801a79c
 8010dcc:	0801aa14 	.word	0x0801aa14
 8010dd0:	0801aa2c 	.word	0x0801aa2c
 8010dd4:	0801aa48 	.word	0x0801aa48
 8010dd8:	0801aa58 	.word	0x0801aa58

08010ddc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b088      	sub	sp, #32
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	60f8      	str	r0, [r7, #12]
 8010de4:	60b9      	str	r1, [r7, #8]
 8010de6:	4611      	mov	r1, r2
 8010de8:	461a      	mov	r2, r3
 8010dea:	460b      	mov	r3, r1
 8010dec:	80fb      	strh	r3, [r7, #6]
 8010dee:	4613      	mov	r3, r2
 8010df0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010df2:	2300      	movs	r3, #0
 8010df4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010df6:	2300      	movs	r3, #0
 8010df8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d108      	bne.n	8010e12 <pbuf_copy_partial+0x36>
 8010e00:	4b2b      	ldr	r3, [pc, #172]	@ (8010eb0 <pbuf_copy_partial+0xd4>)
 8010e02:	f240 420a 	movw	r2, #1034	@ 0x40a
 8010e06:	492b      	ldr	r1, [pc, #172]	@ (8010eb4 <pbuf_copy_partial+0xd8>)
 8010e08:	482b      	ldr	r0, [pc, #172]	@ (8010eb8 <pbuf_copy_partial+0xdc>)
 8010e0a:	f008 f9f5 	bl	80191f8 <iprintf>
 8010e0e:	2300      	movs	r3, #0
 8010e10:	e04a      	b.n	8010ea8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d108      	bne.n	8010e2a <pbuf_copy_partial+0x4e>
 8010e18:	4b25      	ldr	r3, [pc, #148]	@ (8010eb0 <pbuf_copy_partial+0xd4>)
 8010e1a:	f240 420b 	movw	r2, #1035	@ 0x40b
 8010e1e:	4927      	ldr	r1, [pc, #156]	@ (8010ebc <pbuf_copy_partial+0xe0>)
 8010e20:	4825      	ldr	r0, [pc, #148]	@ (8010eb8 <pbuf_copy_partial+0xdc>)
 8010e22:	f008 f9e9 	bl	80191f8 <iprintf>
 8010e26:	2300      	movs	r3, #0
 8010e28:	e03e      	b.n	8010ea8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	61fb      	str	r3, [r7, #28]
 8010e2e:	e034      	b.n	8010e9a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010e30:	88bb      	ldrh	r3, [r7, #4]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d00a      	beq.n	8010e4c <pbuf_copy_partial+0x70>
 8010e36:	69fb      	ldr	r3, [r7, #28]
 8010e38:	895b      	ldrh	r3, [r3, #10]
 8010e3a:	88ba      	ldrh	r2, [r7, #4]
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d305      	bcc.n	8010e4c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	895b      	ldrh	r3, [r3, #10]
 8010e44:	88ba      	ldrh	r2, [r7, #4]
 8010e46:	1ad3      	subs	r3, r2, r3
 8010e48:	80bb      	strh	r3, [r7, #4]
 8010e4a:	e023      	b.n	8010e94 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010e4c:	69fb      	ldr	r3, [r7, #28]
 8010e4e:	895a      	ldrh	r2, [r3, #10]
 8010e50:	88bb      	ldrh	r3, [r7, #4]
 8010e52:	1ad3      	subs	r3, r2, r3
 8010e54:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010e56:	8b3a      	ldrh	r2, [r7, #24]
 8010e58:	88fb      	ldrh	r3, [r7, #6]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d901      	bls.n	8010e62 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010e5e:	88fb      	ldrh	r3, [r7, #6]
 8010e60:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010e62:	8b7b      	ldrh	r3, [r7, #26]
 8010e64:	68ba      	ldr	r2, [r7, #8]
 8010e66:	18d0      	adds	r0, r2, r3
 8010e68:	69fb      	ldr	r3, [r7, #28]
 8010e6a:	685a      	ldr	r2, [r3, #4]
 8010e6c:	88bb      	ldrh	r3, [r7, #4]
 8010e6e:	4413      	add	r3, r2
 8010e70:	8b3a      	ldrh	r2, [r7, #24]
 8010e72:	4619      	mov	r1, r3
 8010e74:	f008 fa9b 	bl	80193ae <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010e78:	8afa      	ldrh	r2, [r7, #22]
 8010e7a:	8b3b      	ldrh	r3, [r7, #24]
 8010e7c:	4413      	add	r3, r2
 8010e7e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010e80:	8b7a      	ldrh	r2, [r7, #26]
 8010e82:	8b3b      	ldrh	r3, [r7, #24]
 8010e84:	4413      	add	r3, r2
 8010e86:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010e88:	88fa      	ldrh	r2, [r7, #6]
 8010e8a:	8b3b      	ldrh	r3, [r7, #24]
 8010e8c:	1ad3      	subs	r3, r2, r3
 8010e8e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010e90:	2300      	movs	r3, #0
 8010e92:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010e94:	69fb      	ldr	r3, [r7, #28]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	61fb      	str	r3, [r7, #28]
 8010e9a:	88fb      	ldrh	r3, [r7, #6]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d002      	beq.n	8010ea6 <pbuf_copy_partial+0xca>
 8010ea0:	69fb      	ldr	r3, [r7, #28]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d1c4      	bne.n	8010e30 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010ea6:	8afb      	ldrh	r3, [r7, #22]
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3720      	adds	r7, #32
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}
 8010eb0:	0801a73c 	.word	0x0801a73c
 8010eb4:	0801aa84 	.word	0x0801aa84
 8010eb8:	0801a79c 	.word	0x0801a79c
 8010ebc:	0801aaa4 	.word	0x0801aaa4

08010ec0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b084      	sub	sp, #16
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	603a      	str	r2, [r7, #0]
 8010eca:	71fb      	strb	r3, [r7, #7]
 8010ecc:	460b      	mov	r3, r1
 8010ece:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	8919      	ldrh	r1, [r3, #8]
 8010ed4:	88ba      	ldrh	r2, [r7, #4]
 8010ed6:	79fb      	ldrb	r3, [r7, #7]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7ff faa5 	bl	8010428 <pbuf_alloc>
 8010ede:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d101      	bne.n	8010eea <pbuf_clone+0x2a>
    return NULL;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	e011      	b.n	8010f0e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010eea:	6839      	ldr	r1, [r7, #0]
 8010eec:	68f8      	ldr	r0, [r7, #12]
 8010eee:	f7ff fea3 	bl	8010c38 <pbuf_copy>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010ef6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d006      	beq.n	8010f0c <pbuf_clone+0x4c>
 8010efe:	4b06      	ldr	r3, [pc, #24]	@ (8010f18 <pbuf_clone+0x58>)
 8010f00:	f240 5224 	movw	r2, #1316	@ 0x524
 8010f04:	4905      	ldr	r1, [pc, #20]	@ (8010f1c <pbuf_clone+0x5c>)
 8010f06:	4806      	ldr	r0, [pc, #24]	@ (8010f20 <pbuf_clone+0x60>)
 8010f08:	f008 f976 	bl	80191f8 <iprintf>
  return q;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3710      	adds	r7, #16
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}
 8010f16:	bf00      	nop
 8010f18:	0801a73c 	.word	0x0801a73c
 8010f1c:	0801abb0 	.word	0x0801abb0
 8010f20:	0801a79c 	.word	0x0801a79c

08010f24 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010f28:	f008 f866 	bl	8018ff8 <rand>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8010f3a:	b29a      	uxth	r2, r3
 8010f3c:	4b01      	ldr	r3, [pc, #4]	@ (8010f44 <tcp_init+0x20>)
 8010f3e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010f40:	bf00      	nop
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	20050028 	.word	0x20050028

08010f48 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	7d1b      	ldrb	r3, [r3, #20]
 8010f54:	2b01      	cmp	r3, #1
 8010f56:	d105      	bne.n	8010f64 <tcp_free+0x1c>
 8010f58:	4b06      	ldr	r3, [pc, #24]	@ (8010f74 <tcp_free+0x2c>)
 8010f5a:	22d4      	movs	r2, #212	@ 0xd4
 8010f5c:	4906      	ldr	r1, [pc, #24]	@ (8010f78 <tcp_free+0x30>)
 8010f5e:	4807      	ldr	r0, [pc, #28]	@ (8010f7c <tcp_free+0x34>)
 8010f60:	f008 f94a 	bl	80191f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010f64:	6879      	ldr	r1, [r7, #4]
 8010f66:	2001      	movs	r0, #1
 8010f68:	f7fe fe9e 	bl	800fca8 <memp_free>
}
 8010f6c:	bf00      	nop
 8010f6e:	3708      	adds	r7, #8
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}
 8010f74:	0801ac3c 	.word	0x0801ac3c
 8010f78:	0801ac6c 	.word	0x0801ac6c
 8010f7c:	0801ac80 	.word	0x0801ac80

08010f80 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	7d1b      	ldrb	r3, [r3, #20]
 8010f8c:	2b01      	cmp	r3, #1
 8010f8e:	d105      	bne.n	8010f9c <tcp_free_listen+0x1c>
 8010f90:	4b06      	ldr	r3, [pc, #24]	@ (8010fac <tcp_free_listen+0x2c>)
 8010f92:	22df      	movs	r2, #223	@ 0xdf
 8010f94:	4906      	ldr	r1, [pc, #24]	@ (8010fb0 <tcp_free_listen+0x30>)
 8010f96:	4807      	ldr	r0, [pc, #28]	@ (8010fb4 <tcp_free_listen+0x34>)
 8010f98:	f008 f92e 	bl	80191f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010f9c:	6879      	ldr	r1, [r7, #4]
 8010f9e:	2002      	movs	r0, #2
 8010fa0:	f7fe fe82 	bl	800fca8 <memp_free>
}
 8010fa4:	bf00      	nop
 8010fa6:	3708      	adds	r7, #8
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}
 8010fac:	0801ac3c 	.word	0x0801ac3c
 8010fb0:	0801aca8 	.word	0x0801aca8
 8010fb4:	0801ac80 	.word	0x0801ac80

08010fb8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010fbc:	f000 fea4 	bl	8011d08 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010fc0:	4b07      	ldr	r3, [pc, #28]	@ (8010fe0 <tcp_tmr+0x28>)
 8010fc2:	781b      	ldrb	r3, [r3, #0]
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	b2da      	uxtb	r2, r3
 8010fc8:	4b05      	ldr	r3, [pc, #20]	@ (8010fe0 <tcp_tmr+0x28>)
 8010fca:	701a      	strb	r2, [r3, #0]
 8010fcc:	4b04      	ldr	r3, [pc, #16]	@ (8010fe0 <tcp_tmr+0x28>)
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	f003 0301 	and.w	r3, r3, #1
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d001      	beq.n	8010fdc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010fd8:	f000 fb54 	bl	8011684 <tcp_slowtmr>
  }
}
 8010fdc:	bf00      	nop
 8010fde:	bd80      	pop	{r7, pc}
 8010fe0:	20060ba1 	.word	0x20060ba1

08010fe4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b084      	sub	sp, #16
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d105      	bne.n	8011000 <tcp_remove_listener+0x1c>
 8010ff4:	4b0d      	ldr	r3, [pc, #52]	@ (801102c <tcp_remove_listener+0x48>)
 8010ff6:	22ff      	movs	r2, #255	@ 0xff
 8010ff8:	490d      	ldr	r1, [pc, #52]	@ (8011030 <tcp_remove_listener+0x4c>)
 8010ffa:	480e      	ldr	r0, [pc, #56]	@ (8011034 <tcp_remove_listener+0x50>)
 8010ffc:	f008 f8fc 	bl	80191f8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	60fb      	str	r3, [r7, #12]
 8011004:	e00a      	b.n	801101c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801100a:	683a      	ldr	r2, [r7, #0]
 801100c:	429a      	cmp	r2, r3
 801100e:	d102      	bne.n	8011016 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	2200      	movs	r2, #0
 8011014:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	68db      	ldr	r3, [r3, #12]
 801101a:	60fb      	str	r3, [r7, #12]
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d1f1      	bne.n	8011006 <tcp_remove_listener+0x22>
    }
  }
}
 8011022:	bf00      	nop
 8011024:	bf00      	nop
 8011026:	3710      	adds	r7, #16
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}
 801102c:	0801ac3c 	.word	0x0801ac3c
 8011030:	0801acc4 	.word	0x0801acc4
 8011034:	0801ac80 	.word	0x0801ac80

08011038 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d106      	bne.n	8011054 <tcp_listen_closed+0x1c>
 8011046:	4b14      	ldr	r3, [pc, #80]	@ (8011098 <tcp_listen_closed+0x60>)
 8011048:	f240 1211 	movw	r2, #273	@ 0x111
 801104c:	4913      	ldr	r1, [pc, #76]	@ (801109c <tcp_listen_closed+0x64>)
 801104e:	4814      	ldr	r0, [pc, #80]	@ (80110a0 <tcp_listen_closed+0x68>)
 8011050:	f008 f8d2 	bl	80191f8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	7d1b      	ldrb	r3, [r3, #20]
 8011058:	2b01      	cmp	r3, #1
 801105a:	d006      	beq.n	801106a <tcp_listen_closed+0x32>
 801105c:	4b0e      	ldr	r3, [pc, #56]	@ (8011098 <tcp_listen_closed+0x60>)
 801105e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8011062:	4910      	ldr	r1, [pc, #64]	@ (80110a4 <tcp_listen_closed+0x6c>)
 8011064:	480e      	ldr	r0, [pc, #56]	@ (80110a0 <tcp_listen_closed+0x68>)
 8011066:	f008 f8c7 	bl	80191f8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801106a:	2301      	movs	r3, #1
 801106c:	60fb      	str	r3, [r7, #12]
 801106e:	e00b      	b.n	8011088 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011070:	4a0d      	ldr	r2, [pc, #52]	@ (80110a8 <tcp_listen_closed+0x70>)
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	6879      	ldr	r1, [r7, #4]
 801107c:	4618      	mov	r0, r3
 801107e:	f7ff ffb1 	bl	8010fe4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	3301      	adds	r3, #1
 8011086:	60fb      	str	r3, [r7, #12]
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	2b03      	cmp	r3, #3
 801108c:	d9f0      	bls.n	8011070 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801108e:	bf00      	nop
 8011090:	bf00      	nop
 8011092:	3710      	adds	r7, #16
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}
 8011098:	0801ac3c 	.word	0x0801ac3c
 801109c:	0801acec 	.word	0x0801acec
 80110a0:	0801ac80 	.word	0x0801ac80
 80110a4:	0801acf8 	.word	0x0801acf8
 80110a8:	0801cca8 	.word	0x0801cca8

080110ac <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80110ac:	b5b0      	push	{r4, r5, r7, lr}
 80110ae:	b088      	sub	sp, #32
 80110b0:	af04      	add	r7, sp, #16
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	460b      	mov	r3, r1
 80110b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d106      	bne.n	80110cc <tcp_close_shutdown+0x20>
 80110be:	4b63      	ldr	r3, [pc, #396]	@ (801124c <tcp_close_shutdown+0x1a0>)
 80110c0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80110c4:	4962      	ldr	r1, [pc, #392]	@ (8011250 <tcp_close_shutdown+0x1a4>)
 80110c6:	4863      	ldr	r0, [pc, #396]	@ (8011254 <tcp_close_shutdown+0x1a8>)
 80110c8:	f008 f896 	bl	80191f8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80110cc:	78fb      	ldrb	r3, [r7, #3]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d066      	beq.n	80111a0 <tcp_close_shutdown+0xf4>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	7d1b      	ldrb	r3, [r3, #20]
 80110d6:	2b04      	cmp	r3, #4
 80110d8:	d003      	beq.n	80110e2 <tcp_close_shutdown+0x36>
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	7d1b      	ldrb	r3, [r3, #20]
 80110de:	2b07      	cmp	r3, #7
 80110e0:	d15e      	bne.n	80111a0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d104      	bne.n	80110f4 <tcp_close_shutdown+0x48>
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110ee:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80110f2:	d055      	beq.n	80111a0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	8b5b      	ldrh	r3, [r3, #26]
 80110f8:	f003 0310 	and.w	r3, r3, #16
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d106      	bne.n	801110e <tcp_close_shutdown+0x62>
 8011100:	4b52      	ldr	r3, [pc, #328]	@ (801124c <tcp_close_shutdown+0x1a0>)
 8011102:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8011106:	4954      	ldr	r1, [pc, #336]	@ (8011258 <tcp_close_shutdown+0x1ac>)
 8011108:	4852      	ldr	r0, [pc, #328]	@ (8011254 <tcp_close_shutdown+0x1a8>)
 801110a:	f008 f875 	bl	80191f8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011116:	687d      	ldr	r5, [r7, #4]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	3304      	adds	r3, #4
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	8ad2      	ldrh	r2, [r2, #22]
 8011120:	6879      	ldr	r1, [r7, #4]
 8011122:	8b09      	ldrh	r1, [r1, #24]
 8011124:	9102      	str	r1, [sp, #8]
 8011126:	9201      	str	r2, [sp, #4]
 8011128:	9300      	str	r3, [sp, #0]
 801112a:	462b      	mov	r3, r5
 801112c:	4622      	mov	r2, r4
 801112e:	4601      	mov	r1, r0
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f004 fe8d 	bl	8015e50 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f001 f8c8 	bl	80122cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801113c:	4b47      	ldr	r3, [pc, #284]	@ (801125c <tcp_close_shutdown+0x1b0>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	429a      	cmp	r2, r3
 8011144:	d105      	bne.n	8011152 <tcp_close_shutdown+0xa6>
 8011146:	4b45      	ldr	r3, [pc, #276]	@ (801125c <tcp_close_shutdown+0x1b0>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	68db      	ldr	r3, [r3, #12]
 801114c:	4a43      	ldr	r2, [pc, #268]	@ (801125c <tcp_close_shutdown+0x1b0>)
 801114e:	6013      	str	r3, [r2, #0]
 8011150:	e013      	b.n	801117a <tcp_close_shutdown+0xce>
 8011152:	4b42      	ldr	r3, [pc, #264]	@ (801125c <tcp_close_shutdown+0x1b0>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	60fb      	str	r3, [r7, #12]
 8011158:	e00c      	b.n	8011174 <tcp_close_shutdown+0xc8>
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	429a      	cmp	r2, r3
 8011162:	d104      	bne.n	801116e <tcp_close_shutdown+0xc2>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	68da      	ldr	r2, [r3, #12]
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	60da      	str	r2, [r3, #12]
 801116c:	e005      	b.n	801117a <tcp_close_shutdown+0xce>
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	68db      	ldr	r3, [r3, #12]
 8011172:	60fb      	str	r3, [r7, #12]
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d1ef      	bne.n	801115a <tcp_close_shutdown+0xae>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2200      	movs	r2, #0
 801117e:	60da      	str	r2, [r3, #12]
 8011180:	4b37      	ldr	r3, [pc, #220]	@ (8011260 <tcp_close_shutdown+0x1b4>)
 8011182:	2201      	movs	r2, #1
 8011184:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011186:	4b37      	ldr	r3, [pc, #220]	@ (8011264 <tcp_close_shutdown+0x1b8>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	687a      	ldr	r2, [r7, #4]
 801118c:	429a      	cmp	r2, r3
 801118e:	d102      	bne.n	8011196 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011190:	f003 fd5c 	bl	8014c4c <tcp_trigger_input_pcb_close>
 8011194:	e002      	b.n	801119c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f7ff fed6 	bl	8010f48 <tcp_free>
      }
      return ERR_OK;
 801119c:	2300      	movs	r3, #0
 801119e:	e050      	b.n	8011242 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	7d1b      	ldrb	r3, [r3, #20]
 80111a4:	2b02      	cmp	r3, #2
 80111a6:	d03b      	beq.n	8011220 <tcp_close_shutdown+0x174>
 80111a8:	2b02      	cmp	r3, #2
 80111aa:	dc44      	bgt.n	8011236 <tcp_close_shutdown+0x18a>
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d002      	beq.n	80111b6 <tcp_close_shutdown+0x10a>
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	d02a      	beq.n	801120a <tcp_close_shutdown+0x15e>
 80111b4:	e03f      	b.n	8011236 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	8adb      	ldrh	r3, [r3, #22]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d021      	beq.n	8011202 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80111be:	4b2a      	ldr	r3, [pc, #168]	@ (8011268 <tcp_close_shutdown+0x1bc>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	687a      	ldr	r2, [r7, #4]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d105      	bne.n	80111d4 <tcp_close_shutdown+0x128>
 80111c8:	4b27      	ldr	r3, [pc, #156]	@ (8011268 <tcp_close_shutdown+0x1bc>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	4a26      	ldr	r2, [pc, #152]	@ (8011268 <tcp_close_shutdown+0x1bc>)
 80111d0:	6013      	str	r3, [r2, #0]
 80111d2:	e013      	b.n	80111fc <tcp_close_shutdown+0x150>
 80111d4:	4b24      	ldr	r3, [pc, #144]	@ (8011268 <tcp_close_shutdown+0x1bc>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	60bb      	str	r3, [r7, #8]
 80111da:	e00c      	b.n	80111f6 <tcp_close_shutdown+0x14a>
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	68db      	ldr	r3, [r3, #12]
 80111e0:	687a      	ldr	r2, [r7, #4]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d104      	bne.n	80111f0 <tcp_close_shutdown+0x144>
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	68da      	ldr	r2, [r3, #12]
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	60da      	str	r2, [r3, #12]
 80111ee:	e005      	b.n	80111fc <tcp_close_shutdown+0x150>
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	68db      	ldr	r3, [r3, #12]
 80111f4:	60bb      	str	r3, [r7, #8]
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d1ef      	bne.n	80111dc <tcp_close_shutdown+0x130>
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2200      	movs	r2, #0
 8011200:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f7ff fea0 	bl	8010f48 <tcp_free>
      break;
 8011208:	e01a      	b.n	8011240 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f7ff ff14 	bl	8011038 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011210:	6879      	ldr	r1, [r7, #4]
 8011212:	4816      	ldr	r0, [pc, #88]	@ (801126c <tcp_close_shutdown+0x1c0>)
 8011214:	f001 f8aa 	bl	801236c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f7ff feb1 	bl	8010f80 <tcp_free_listen>
      break;
 801121e:	e00f      	b.n	8011240 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011220:	6879      	ldr	r1, [r7, #4]
 8011222:	480e      	ldr	r0, [pc, #56]	@ (801125c <tcp_close_shutdown+0x1b0>)
 8011224:	f001 f8a2 	bl	801236c <tcp_pcb_remove>
 8011228:	4b0d      	ldr	r3, [pc, #52]	@ (8011260 <tcp_close_shutdown+0x1b4>)
 801122a:	2201      	movs	r2, #1
 801122c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f7ff fe8a 	bl	8010f48 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011234:	e004      	b.n	8011240 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f000 f81a 	bl	8011270 <tcp_close_shutdown_fin>
 801123c:	4603      	mov	r3, r0
 801123e:	e000      	b.n	8011242 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011240:	2300      	movs	r3, #0
}
 8011242:	4618      	mov	r0, r3
 8011244:	3710      	adds	r7, #16
 8011246:	46bd      	mov	sp, r7
 8011248:	bdb0      	pop	{r4, r5, r7, pc}
 801124a:	bf00      	nop
 801124c:	0801ac3c 	.word	0x0801ac3c
 8011250:	0801ad10 	.word	0x0801ad10
 8011254:	0801ac80 	.word	0x0801ac80
 8011258:	0801ad30 	.word	0x0801ad30
 801125c:	20060b98 	.word	0x20060b98
 8011260:	20060ba0 	.word	0x20060ba0
 8011264:	20060bd8 	.word	0x20060bd8
 8011268:	20060b90 	.word	0x20060b90
 801126c:	20060b94 	.word	0x20060b94

08011270 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b084      	sub	sp, #16
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d106      	bne.n	801128c <tcp_close_shutdown_fin+0x1c>
 801127e:	4b2e      	ldr	r3, [pc, #184]	@ (8011338 <tcp_close_shutdown_fin+0xc8>)
 8011280:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8011284:	492d      	ldr	r1, [pc, #180]	@ (801133c <tcp_close_shutdown_fin+0xcc>)
 8011286:	482e      	ldr	r0, [pc, #184]	@ (8011340 <tcp_close_shutdown_fin+0xd0>)
 8011288:	f007 ffb6 	bl	80191f8 <iprintf>

  switch (pcb->state) {
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	7d1b      	ldrb	r3, [r3, #20]
 8011290:	2b07      	cmp	r3, #7
 8011292:	d020      	beq.n	80112d6 <tcp_close_shutdown_fin+0x66>
 8011294:	2b07      	cmp	r3, #7
 8011296:	dc2b      	bgt.n	80112f0 <tcp_close_shutdown_fin+0x80>
 8011298:	2b03      	cmp	r3, #3
 801129a:	d002      	beq.n	80112a2 <tcp_close_shutdown_fin+0x32>
 801129c:	2b04      	cmp	r3, #4
 801129e:	d00d      	beq.n	80112bc <tcp_close_shutdown_fin+0x4c>
 80112a0:	e026      	b.n	80112f0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f003 fee2 	bl	801506c <tcp_send_fin>
 80112a8:	4603      	mov	r3, r0
 80112aa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80112ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d11f      	bne.n	80112f4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2205      	movs	r2, #5
 80112b8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80112ba:	e01b      	b.n	80112f4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f003 fed5 	bl	801506c <tcp_send_fin>
 80112c2:	4603      	mov	r3, r0
 80112c4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80112c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d114      	bne.n	80112f8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2205      	movs	r2, #5
 80112d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80112d4:	e010      	b.n	80112f8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f003 fec8 	bl	801506c <tcp_send_fin>
 80112dc:	4603      	mov	r3, r0
 80112de:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80112e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d109      	bne.n	80112fc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2209      	movs	r2, #9
 80112ec:	751a      	strb	r2, [r3, #20]
      }
      break;
 80112ee:	e005      	b.n	80112fc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80112f0:	2300      	movs	r3, #0
 80112f2:	e01c      	b.n	801132e <tcp_close_shutdown_fin+0xbe>
      break;
 80112f4:	bf00      	nop
 80112f6:	e002      	b.n	80112fe <tcp_close_shutdown_fin+0x8e>
      break;
 80112f8:	bf00      	nop
 80112fa:	e000      	b.n	80112fe <tcp_close_shutdown_fin+0x8e>
      break;
 80112fc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80112fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d103      	bne.n	801130e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f003 ffee 	bl	80152e8 <tcp_output>
 801130c:	e00d      	b.n	801132a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011316:	d108      	bne.n	801132a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	8b5b      	ldrh	r3, [r3, #26]
 801131c:	f043 0308 	orr.w	r3, r3, #8
 8011320:	b29a      	uxth	r2, r3
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011326:	2300      	movs	r3, #0
 8011328:	e001      	b.n	801132e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801132e:	4618      	mov	r0, r3
 8011330:	3710      	adds	r7, #16
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	0801ac3c 	.word	0x0801ac3c
 801133c:	0801acec 	.word	0x0801acec
 8011340:	0801ac80 	.word	0x0801ac80

08011344 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b082      	sub	sp, #8
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d109      	bne.n	8011366 <tcp_close+0x22>
 8011352:	4b0f      	ldr	r3, [pc, #60]	@ (8011390 <tcp_close+0x4c>)
 8011354:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8011358:	490e      	ldr	r1, [pc, #56]	@ (8011394 <tcp_close+0x50>)
 801135a:	480f      	ldr	r0, [pc, #60]	@ (8011398 <tcp_close+0x54>)
 801135c:	f007 ff4c 	bl	80191f8 <iprintf>
 8011360:	f06f 030f 	mvn.w	r3, #15
 8011364:	e00f      	b.n	8011386 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	7d1b      	ldrb	r3, [r3, #20]
 801136a:	2b01      	cmp	r3, #1
 801136c:	d006      	beq.n	801137c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	8b5b      	ldrh	r3, [r3, #26]
 8011372:	f043 0310 	orr.w	r3, r3, #16
 8011376:	b29a      	uxth	r2, r3
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801137c:	2101      	movs	r1, #1
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f7ff fe94 	bl	80110ac <tcp_close_shutdown>
 8011384:	4603      	mov	r3, r0
}
 8011386:	4618      	mov	r0, r3
 8011388:	3708      	adds	r7, #8
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}
 801138e:	bf00      	nop
 8011390:	0801ac3c 	.word	0x0801ac3c
 8011394:	0801ad4c 	.word	0x0801ad4c
 8011398:	0801ac80 	.word	0x0801ac80

0801139c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b08e      	sub	sp, #56	@ 0x38
 80113a0:	af04      	add	r7, sp, #16
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d107      	bne.n	80113bc <tcp_abandon+0x20>
 80113ac:	4b52      	ldr	r3, [pc, #328]	@ (80114f8 <tcp_abandon+0x15c>)
 80113ae:	f240 223d 	movw	r2, #573	@ 0x23d
 80113b2:	4952      	ldr	r1, [pc, #328]	@ (80114fc <tcp_abandon+0x160>)
 80113b4:	4852      	ldr	r0, [pc, #328]	@ (8011500 <tcp_abandon+0x164>)
 80113b6:	f007 ff1f 	bl	80191f8 <iprintf>
 80113ba:	e099      	b.n	80114f0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	7d1b      	ldrb	r3, [r3, #20]
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d106      	bne.n	80113d2 <tcp_abandon+0x36>
 80113c4:	4b4c      	ldr	r3, [pc, #304]	@ (80114f8 <tcp_abandon+0x15c>)
 80113c6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80113ca:	494e      	ldr	r1, [pc, #312]	@ (8011504 <tcp_abandon+0x168>)
 80113cc:	484c      	ldr	r0, [pc, #304]	@ (8011500 <tcp_abandon+0x164>)
 80113ce:	f007 ff13 	bl	80191f8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	7d1b      	ldrb	r3, [r3, #20]
 80113d6:	2b0a      	cmp	r3, #10
 80113d8:	d107      	bne.n	80113ea <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80113da:	6879      	ldr	r1, [r7, #4]
 80113dc:	484a      	ldr	r0, [pc, #296]	@ (8011508 <tcp_abandon+0x16c>)
 80113de:	f000 ffc5 	bl	801236c <tcp_pcb_remove>
    tcp_free(pcb);
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f7ff fdb0 	bl	8010f48 <tcp_free>
 80113e8:	e082      	b.n	80114f0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80113ea:	2300      	movs	r3, #0
 80113ec:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80113ee:	2300      	movs	r3, #0
 80113f0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113f6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113fc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011404:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	691b      	ldr	r3, [r3, #16]
 801140a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	7d1b      	ldrb	r3, [r3, #20]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d126      	bne.n	8011462 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	8adb      	ldrh	r3, [r3, #22]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d02e      	beq.n	801147a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801141c:	4b3b      	ldr	r3, [pc, #236]	@ (801150c <tcp_abandon+0x170>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	687a      	ldr	r2, [r7, #4]
 8011422:	429a      	cmp	r2, r3
 8011424:	d105      	bne.n	8011432 <tcp_abandon+0x96>
 8011426:	4b39      	ldr	r3, [pc, #228]	@ (801150c <tcp_abandon+0x170>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	68db      	ldr	r3, [r3, #12]
 801142c:	4a37      	ldr	r2, [pc, #220]	@ (801150c <tcp_abandon+0x170>)
 801142e:	6013      	str	r3, [r2, #0]
 8011430:	e013      	b.n	801145a <tcp_abandon+0xbe>
 8011432:	4b36      	ldr	r3, [pc, #216]	@ (801150c <tcp_abandon+0x170>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	61fb      	str	r3, [r7, #28]
 8011438:	e00c      	b.n	8011454 <tcp_abandon+0xb8>
 801143a:	69fb      	ldr	r3, [r7, #28]
 801143c:	68db      	ldr	r3, [r3, #12]
 801143e:	687a      	ldr	r2, [r7, #4]
 8011440:	429a      	cmp	r2, r3
 8011442:	d104      	bne.n	801144e <tcp_abandon+0xb2>
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	68da      	ldr	r2, [r3, #12]
 8011448:	69fb      	ldr	r3, [r7, #28]
 801144a:	60da      	str	r2, [r3, #12]
 801144c:	e005      	b.n	801145a <tcp_abandon+0xbe>
 801144e:	69fb      	ldr	r3, [r7, #28]
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	61fb      	str	r3, [r7, #28]
 8011454:	69fb      	ldr	r3, [r7, #28]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d1ef      	bne.n	801143a <tcp_abandon+0x9e>
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2200      	movs	r2, #0
 801145e:	60da      	str	r2, [r3, #12]
 8011460:	e00b      	b.n	801147a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	8adb      	ldrh	r3, [r3, #22]
 801146a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801146c:	6879      	ldr	r1, [r7, #4]
 801146e:	4828      	ldr	r0, [pc, #160]	@ (8011510 <tcp_abandon+0x174>)
 8011470:	f000 ff7c 	bl	801236c <tcp_pcb_remove>
 8011474:	4b27      	ldr	r3, [pc, #156]	@ (8011514 <tcp_abandon+0x178>)
 8011476:	2201      	movs	r2, #1
 8011478:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801147e:	2b00      	cmp	r3, #0
 8011480:	d004      	beq.n	801148c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011486:	4618      	mov	r0, r3
 8011488:	f000 fd1e 	bl	8011ec8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011490:	2b00      	cmp	r3, #0
 8011492:	d004      	beq.n	801149e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011498:	4618      	mov	r0, r3
 801149a:	f000 fd15 	bl	8011ec8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d004      	beq.n	80114b0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114aa:	4618      	mov	r0, r3
 80114ac:	f000 fd0c 	bl	8011ec8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80114b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d00e      	beq.n	80114d4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80114b6:	6879      	ldr	r1, [r7, #4]
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	3304      	adds	r3, #4
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	8b12      	ldrh	r2, [r2, #24]
 80114c0:	9202      	str	r2, [sp, #8]
 80114c2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80114c4:	9201      	str	r2, [sp, #4]
 80114c6:	9300      	str	r3, [sp, #0]
 80114c8:	460b      	mov	r3, r1
 80114ca:	697a      	ldr	r2, [r7, #20]
 80114cc:	69b9      	ldr	r1, [r7, #24]
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f004 fcbe 	bl	8015e50 <tcp_rst>
    }
    last_state = pcb->state;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	7d1b      	ldrb	r3, [r3, #20]
 80114d8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f7ff fd34 	bl	8010f48 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d004      	beq.n	80114f0 <tcp_abandon+0x154>
 80114e6:	693b      	ldr	r3, [r7, #16]
 80114e8:	f06f 010c 	mvn.w	r1, #12
 80114ec:	68f8      	ldr	r0, [r7, #12]
 80114ee:	4798      	blx	r3
  }
}
 80114f0:	3728      	adds	r7, #40	@ 0x28
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}
 80114f6:	bf00      	nop
 80114f8:	0801ac3c 	.word	0x0801ac3c
 80114fc:	0801ad80 	.word	0x0801ad80
 8011500:	0801ac80 	.word	0x0801ac80
 8011504:	0801ad9c 	.word	0x0801ad9c
 8011508:	20060b9c 	.word	0x20060b9c
 801150c:	20060b90 	.word	0x20060b90
 8011510:	20060b98 	.word	0x20060b98
 8011514:	20060ba0 	.word	0x20060ba0

08011518 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b082      	sub	sp, #8
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011520:	2101      	movs	r1, #1
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f7ff ff3a 	bl	801139c <tcp_abandon>
}
 8011528:	bf00      	nop
 801152a:	3708      	adds	r7, #8
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}

08011530 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b084      	sub	sp, #16
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d106      	bne.n	801154c <tcp_update_rcv_ann_wnd+0x1c>
 801153e:	4b25      	ldr	r3, [pc, #148]	@ (80115d4 <tcp_update_rcv_ann_wnd+0xa4>)
 8011540:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8011544:	4924      	ldr	r1, [pc, #144]	@ (80115d8 <tcp_update_rcv_ann_wnd+0xa8>)
 8011546:	4825      	ldr	r0, [pc, #148]	@ (80115dc <tcp_update_rcv_ann_wnd+0xac>)
 8011548:	f007 fe56 	bl	80191f8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011554:	4413      	add	r3, r2
 8011556:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8011560:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8011564:	bf28      	it	cs
 8011566:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801156a:	b292      	uxth	r2, r2
 801156c:	4413      	add	r3, r2
 801156e:	68fa      	ldr	r2, [r7, #12]
 8011570:	1ad3      	subs	r3, r2, r3
 8011572:	2b00      	cmp	r3, #0
 8011574:	db08      	blt.n	8011588 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011582:	68fa      	ldr	r2, [r7, #12]
 8011584:	1ad3      	subs	r3, r2, r3
 8011586:	e020      	b.n	80115ca <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011590:	1ad3      	subs	r3, r2, r3
 8011592:	2b00      	cmp	r3, #0
 8011594:	dd03      	ble.n	801159e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2200      	movs	r2, #0
 801159a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801159c:	e014      	b.n	80115c8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115a6:	1ad3      	subs	r3, r2, r3
 80115a8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80115b0:	d306      	bcc.n	80115c0 <tcp_update_rcv_ann_wnd+0x90>
 80115b2:	4b08      	ldr	r3, [pc, #32]	@ (80115d4 <tcp_update_rcv_ann_wnd+0xa4>)
 80115b4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80115b8:	4909      	ldr	r1, [pc, #36]	@ (80115e0 <tcp_update_rcv_ann_wnd+0xb0>)
 80115ba:	4808      	ldr	r0, [pc, #32]	@ (80115dc <tcp_update_rcv_ann_wnd+0xac>)
 80115bc:	f007 fe1c 	bl	80191f8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	b29a      	uxth	r2, r3
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80115c8:	2300      	movs	r3, #0
  }
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	3710      	adds	r7, #16
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}
 80115d2:	bf00      	nop
 80115d4:	0801ac3c 	.word	0x0801ac3c
 80115d8:	0801ae98 	.word	0x0801ae98
 80115dc:	0801ac80 	.word	0x0801ac80
 80115e0:	0801aebc 	.word	0x0801aebc

080115e4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b084      	sub	sp, #16
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	460b      	mov	r3, r1
 80115ee:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d107      	bne.n	8011606 <tcp_recved+0x22>
 80115f6:	4b1f      	ldr	r3, [pc, #124]	@ (8011674 <tcp_recved+0x90>)
 80115f8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80115fc:	491e      	ldr	r1, [pc, #120]	@ (8011678 <tcp_recved+0x94>)
 80115fe:	481f      	ldr	r0, [pc, #124]	@ (801167c <tcp_recved+0x98>)
 8011600:	f007 fdfa 	bl	80191f8 <iprintf>
 8011604:	e032      	b.n	801166c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	7d1b      	ldrb	r3, [r3, #20]
 801160a:	2b01      	cmp	r3, #1
 801160c:	d106      	bne.n	801161c <tcp_recved+0x38>
 801160e:	4b19      	ldr	r3, [pc, #100]	@ (8011674 <tcp_recved+0x90>)
 8011610:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8011614:	491a      	ldr	r1, [pc, #104]	@ (8011680 <tcp_recved+0x9c>)
 8011616:	4819      	ldr	r0, [pc, #100]	@ (801167c <tcp_recved+0x98>)
 8011618:	f007 fdee 	bl	80191f8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011620:	887b      	ldrh	r3, [r7, #2]
 8011622:	4413      	add	r3, r2
 8011624:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011626:	89fb      	ldrh	r3, [r7, #14]
 8011628:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801162c:	d804      	bhi.n	8011638 <tcp_recved+0x54>
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011632:	89fa      	ldrh	r2, [r7, #14]
 8011634:	429a      	cmp	r2, r3
 8011636:	d204      	bcs.n	8011642 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801163e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011640:	e002      	b.n	8011648 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	89fa      	ldrh	r2, [r7, #14]
 8011646:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f7ff ff71 	bl	8011530 <tcp_update_rcv_ann_wnd>
 801164e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011656:	d309      	bcc.n	801166c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	8b5b      	ldrh	r3, [r3, #26]
 801165c:	f043 0302 	orr.w	r3, r3, #2
 8011660:	b29a      	uxth	r2, r3
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f003 fe3e 	bl	80152e8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801166c:	3710      	adds	r7, #16
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
 8011672:	bf00      	nop
 8011674:	0801ac3c 	.word	0x0801ac3c
 8011678:	0801aed8 	.word	0x0801aed8
 801167c:	0801ac80 	.word	0x0801ac80
 8011680:	0801aef0 	.word	0x0801aef0

08011684 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011684:	b5b0      	push	{r4, r5, r7, lr}
 8011686:	b090      	sub	sp, #64	@ 0x40
 8011688:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801168a:	2300      	movs	r3, #0
 801168c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8011690:	4b95      	ldr	r3, [pc, #596]	@ (80118e8 <tcp_slowtmr+0x264>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	3301      	adds	r3, #1
 8011696:	4a94      	ldr	r2, [pc, #592]	@ (80118e8 <tcp_slowtmr+0x264>)
 8011698:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801169a:	4b94      	ldr	r3, [pc, #592]	@ (80118ec <tcp_slowtmr+0x268>)
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	3301      	adds	r3, #1
 80116a0:	b2da      	uxtb	r2, r3
 80116a2:	4b92      	ldr	r3, [pc, #584]	@ (80118ec <tcp_slowtmr+0x268>)
 80116a4:	701a      	strb	r2, [r3, #0]
 80116a6:	e000      	b.n	80116aa <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80116a8:	bf00      	nop
  prev = NULL;
 80116aa:	2300      	movs	r3, #0
 80116ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80116ae:	4b90      	ldr	r3, [pc, #576]	@ (80118f0 <tcp_slowtmr+0x26c>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80116b4:	e29f      	b.n	8011bf6 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80116b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116b8:	7d1b      	ldrb	r3, [r3, #20]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d106      	bne.n	80116cc <tcp_slowtmr+0x48>
 80116be:	4b8d      	ldr	r3, [pc, #564]	@ (80118f4 <tcp_slowtmr+0x270>)
 80116c0:	f240 42be 	movw	r2, #1214	@ 0x4be
 80116c4:	498c      	ldr	r1, [pc, #560]	@ (80118f8 <tcp_slowtmr+0x274>)
 80116c6:	488d      	ldr	r0, [pc, #564]	@ (80118fc <tcp_slowtmr+0x278>)
 80116c8:	f007 fd96 	bl	80191f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80116cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116ce:	7d1b      	ldrb	r3, [r3, #20]
 80116d0:	2b01      	cmp	r3, #1
 80116d2:	d106      	bne.n	80116e2 <tcp_slowtmr+0x5e>
 80116d4:	4b87      	ldr	r3, [pc, #540]	@ (80118f4 <tcp_slowtmr+0x270>)
 80116d6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80116da:	4989      	ldr	r1, [pc, #548]	@ (8011900 <tcp_slowtmr+0x27c>)
 80116dc:	4887      	ldr	r0, [pc, #540]	@ (80118fc <tcp_slowtmr+0x278>)
 80116de:	f007 fd8b 	bl	80191f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80116e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116e4:	7d1b      	ldrb	r3, [r3, #20]
 80116e6:	2b0a      	cmp	r3, #10
 80116e8:	d106      	bne.n	80116f8 <tcp_slowtmr+0x74>
 80116ea:	4b82      	ldr	r3, [pc, #520]	@ (80118f4 <tcp_slowtmr+0x270>)
 80116ec:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80116f0:	4984      	ldr	r1, [pc, #528]	@ (8011904 <tcp_slowtmr+0x280>)
 80116f2:	4882      	ldr	r0, [pc, #520]	@ (80118fc <tcp_slowtmr+0x278>)
 80116f4:	f007 fd80 	bl	80191f8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80116f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116fa:	7f9a      	ldrb	r2, [r3, #30]
 80116fc:	4b7b      	ldr	r3, [pc, #492]	@ (80118ec <tcp_slowtmr+0x268>)
 80116fe:	781b      	ldrb	r3, [r3, #0]
 8011700:	429a      	cmp	r2, r3
 8011702:	d105      	bne.n	8011710 <tcp_slowtmr+0x8c>
      prev = pcb;
 8011704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011706:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801170a:	68db      	ldr	r3, [r3, #12]
 801170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801170e:	e272      	b.n	8011bf6 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8011710:	4b76      	ldr	r3, [pc, #472]	@ (80118ec <tcp_slowtmr+0x268>)
 8011712:	781a      	ldrb	r2, [r3, #0]
 8011714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011716:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8011718:	2300      	movs	r3, #0
 801171a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801171e:	2300      	movs	r3, #0
 8011720:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011726:	7d1b      	ldrb	r3, [r3, #20]
 8011728:	2b02      	cmp	r3, #2
 801172a:	d10a      	bne.n	8011742 <tcp_slowtmr+0xbe>
 801172c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801172e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011732:	2b05      	cmp	r3, #5
 8011734:	d905      	bls.n	8011742 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8011736:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801173a:	3301      	adds	r3, #1
 801173c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011740:	e11e      	b.n	8011980 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011744:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011748:	2b0b      	cmp	r3, #11
 801174a:	d905      	bls.n	8011758 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801174c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011750:	3301      	adds	r3, #1
 8011752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011756:	e113      	b.n	8011980 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8011758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801175a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801175e:	2b00      	cmp	r3, #0
 8011760:	d075      	beq.n	801184e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011766:	2b00      	cmp	r3, #0
 8011768:	d006      	beq.n	8011778 <tcp_slowtmr+0xf4>
 801176a:	4b62      	ldr	r3, [pc, #392]	@ (80118f4 <tcp_slowtmr+0x270>)
 801176c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8011770:	4965      	ldr	r1, [pc, #404]	@ (8011908 <tcp_slowtmr+0x284>)
 8011772:	4862      	ldr	r0, [pc, #392]	@ (80118fc <tcp_slowtmr+0x278>)
 8011774:	f007 fd40 	bl	80191f8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801177a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801177c:	2b00      	cmp	r3, #0
 801177e:	d106      	bne.n	801178e <tcp_slowtmr+0x10a>
 8011780:	4b5c      	ldr	r3, [pc, #368]	@ (80118f4 <tcp_slowtmr+0x270>)
 8011782:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8011786:	4961      	ldr	r1, [pc, #388]	@ (801190c <tcp_slowtmr+0x288>)
 8011788:	485c      	ldr	r0, [pc, #368]	@ (80118fc <tcp_slowtmr+0x278>)
 801178a:	f007 fd35 	bl	80191f8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801178e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011790:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011794:	2b0b      	cmp	r3, #11
 8011796:	d905      	bls.n	80117a4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8011798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801179c:	3301      	adds	r3, #1
 801179e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80117a2:	e0ed      	b.n	8011980 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80117a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117a6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80117aa:	3b01      	subs	r3, #1
 80117ac:	4a58      	ldr	r2, [pc, #352]	@ (8011910 <tcp_slowtmr+0x28c>)
 80117ae:	5cd3      	ldrb	r3, [r2, r3]
 80117b0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80117b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80117b8:	7c7a      	ldrb	r2, [r7, #17]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d907      	bls.n	80117ce <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80117be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80117c4:	3301      	adds	r3, #1
 80117c6:	b2da      	uxtb	r2, r3
 80117c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ca:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80117ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80117d4:	7c7a      	ldrb	r2, [r7, #17]
 80117d6:	429a      	cmp	r2, r3
 80117d8:	f200 80d2 	bhi.w	8011980 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80117dc:	2301      	movs	r3, #1
 80117de:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80117e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d108      	bne.n	80117fc <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80117ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80117ec:	f004 fc24 	bl	8016038 <tcp_zero_window_probe>
 80117f0:	4603      	mov	r3, r0
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d014      	beq.n	8011820 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80117f6:	2300      	movs	r3, #0
 80117f8:	623b      	str	r3, [r7, #32]
 80117fa:	e011      	b.n	8011820 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80117fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011802:	4619      	mov	r1, r3
 8011804:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011806:	f003 fae9 	bl	8014ddc <tcp_split_unsent_seg>
 801180a:	4603      	mov	r3, r0
 801180c:	2b00      	cmp	r3, #0
 801180e:	d107      	bne.n	8011820 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8011810:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011812:	f003 fd69 	bl	80152e8 <tcp_output>
 8011816:	4603      	mov	r3, r0
 8011818:	2b00      	cmp	r3, #0
 801181a:	d101      	bne.n	8011820 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801181c:	2300      	movs	r3, #0
 801181e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8011820:	6a3b      	ldr	r3, [r7, #32]
 8011822:	2b00      	cmp	r3, #0
 8011824:	f000 80ac 	beq.w	8011980 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8011828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801182a:	2200      	movs	r2, #0
 801182c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011832:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011836:	2b06      	cmp	r3, #6
 8011838:	f200 80a2 	bhi.w	8011980 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801183c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801183e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011842:	3301      	adds	r3, #1
 8011844:	b2da      	uxtb	r2, r3
 8011846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011848:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801184c:	e098      	b.n	8011980 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801184e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011850:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011854:	2b00      	cmp	r3, #0
 8011856:	db0f      	blt.n	8011878 <tcp_slowtmr+0x1f4>
 8011858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801185a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801185e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8011862:	4293      	cmp	r3, r2
 8011864:	d008      	beq.n	8011878 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8011866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011868:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801186c:	b29b      	uxth	r3, r3
 801186e:	3301      	adds	r3, #1
 8011870:	b29b      	uxth	r3, r3
 8011872:	b21a      	sxth	r2, r3
 8011874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011876:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8011878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801187a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801187e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011880:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011884:	429a      	cmp	r2, r3
 8011886:	db7b      	blt.n	8011980 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011888:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801188a:	f004 f821 	bl	80158d0 <tcp_rexmit_rto_prepare>
 801188e:	4603      	mov	r3, r0
 8011890:	2b00      	cmp	r3, #0
 8011892:	d007      	beq.n	80118a4 <tcp_slowtmr+0x220>
 8011894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011898:	2b00      	cmp	r3, #0
 801189a:	d171      	bne.n	8011980 <tcp_slowtmr+0x2fc>
 801189c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801189e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d06d      	beq.n	8011980 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80118a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118a6:	7d1b      	ldrb	r3, [r3, #20]
 80118a8:	2b02      	cmp	r3, #2
 80118aa:	d03a      	beq.n	8011922 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80118ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80118b2:	2b0c      	cmp	r3, #12
 80118b4:	bf28      	it	cs
 80118b6:	230c      	movcs	r3, #12
 80118b8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80118ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80118c0:	10db      	asrs	r3, r3, #3
 80118c2:	b21b      	sxth	r3, r3
 80118c4:	461a      	mov	r2, r3
 80118c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80118cc:	4413      	add	r3, r2
 80118ce:	7efa      	ldrb	r2, [r7, #27]
 80118d0:	4910      	ldr	r1, [pc, #64]	@ (8011914 <tcp_slowtmr+0x290>)
 80118d2:	5c8a      	ldrb	r2, [r1, r2]
 80118d4:	4093      	lsls	r3, r2
 80118d6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80118de:	4293      	cmp	r3, r2
 80118e0:	dc1a      	bgt.n	8011918 <tcp_slowtmr+0x294>
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	b21a      	sxth	r2, r3
 80118e6:	e019      	b.n	801191c <tcp_slowtmr+0x298>
 80118e8:	20060b8c 	.word	0x20060b8c
 80118ec:	20060ba2 	.word	0x20060ba2
 80118f0:	20060b98 	.word	0x20060b98
 80118f4:	0801ac3c 	.word	0x0801ac3c
 80118f8:	0801af80 	.word	0x0801af80
 80118fc:	0801ac80 	.word	0x0801ac80
 8011900:	0801afac 	.word	0x0801afac
 8011904:	0801afd8 	.word	0x0801afd8
 8011908:	0801b008 	.word	0x0801b008
 801190c:	0801b03c 	.word	0x0801b03c
 8011910:	0801cca0 	.word	0x0801cca0
 8011914:	0801cc90 	.word	0x0801cc90
 8011918:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801191c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801191e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8011922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011924:	2200      	movs	r2, #0
 8011926:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801192a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801192e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011930:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011934:	4293      	cmp	r3, r2
 8011936:	bf28      	it	cs
 8011938:	4613      	movcs	r3, r2
 801193a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801193c:	8a7b      	ldrh	r3, [r7, #18]
 801193e:	085b      	lsrs	r3, r3, #1
 8011940:	b29a      	uxth	r2, r3
 8011942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011944:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801194a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801194e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011950:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011952:	005b      	lsls	r3, r3, #1
 8011954:	b29b      	uxth	r3, r3
 8011956:	429a      	cmp	r2, r3
 8011958:	d206      	bcs.n	8011968 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801195a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801195c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801195e:	005b      	lsls	r3, r3, #1
 8011960:	b29a      	uxth	r2, r3
 8011962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011964:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8011968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801196a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801196c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801196e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8011972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011974:	2200      	movs	r2, #0
 8011976:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801197a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801197c:	f004 f818 	bl	80159b0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8011980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011982:	7d1b      	ldrb	r3, [r3, #20]
 8011984:	2b06      	cmp	r3, #6
 8011986:	d111      	bne.n	80119ac <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8011988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801198a:	8b5b      	ldrh	r3, [r3, #26]
 801198c:	f003 0310 	and.w	r3, r3, #16
 8011990:	2b00      	cmp	r3, #0
 8011992:	d00b      	beq.n	80119ac <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011994:	4b9d      	ldr	r3, [pc, #628]	@ (8011c0c <tcp_slowtmr+0x588>)
 8011996:	681a      	ldr	r2, [r3, #0]
 8011998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801199a:	6a1b      	ldr	r3, [r3, #32]
 801199c:	1ad3      	subs	r3, r2, r3
 801199e:	2b28      	cmp	r3, #40	@ 0x28
 80119a0:	d904      	bls.n	80119ac <tcp_slowtmr+0x328>
          ++pcb_remove;
 80119a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80119a6:	3301      	adds	r3, #1
 80119a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80119ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119ae:	7a5b      	ldrb	r3, [r3, #9]
 80119b0:	f003 0308 	and.w	r3, r3, #8
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d04c      	beq.n	8011a52 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80119b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119ba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80119bc:	2b04      	cmp	r3, #4
 80119be:	d003      	beq.n	80119c8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80119c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119c2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80119c4:	2b07      	cmp	r3, #7
 80119c6:	d144      	bne.n	8011a52 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80119c8:	4b90      	ldr	r3, [pc, #576]	@ (8011c0c <tcp_slowtmr+0x588>)
 80119ca:	681a      	ldr	r2, [r3, #0]
 80119cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119ce:	6a1b      	ldr	r3, [r3, #32]
 80119d0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80119d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80119d8:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 80119dc:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 80119e0:	498b      	ldr	r1, [pc, #556]	@ (8011c10 <tcp_slowtmr+0x58c>)
 80119e2:	fba1 1303 	umull	r1, r3, r1, r3
 80119e6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80119e8:	429a      	cmp	r2, r3
 80119ea:	d90a      	bls.n	8011a02 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 80119ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80119f0:	3301      	adds	r3, #1
 80119f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80119f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80119fa:	3301      	adds	r3, #1
 80119fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011a00:	e027      	b.n	8011a52 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a02:	4b82      	ldr	r3, [pc, #520]	@ (8011c0c <tcp_slowtmr+0x588>)
 8011a04:	681a      	ldr	r2, [r3, #0]
 8011a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a08:	6a1b      	ldr	r3, [r3, #32]
 8011a0a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a0e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8011a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a14:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011a18:	4618      	mov	r0, r3
 8011a1a:	4b7e      	ldr	r3, [pc, #504]	@ (8011c14 <tcp_slowtmr+0x590>)
 8011a1c:	fb00 f303 	mul.w	r3, r0, r3
 8011a20:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011a22:	497b      	ldr	r1, [pc, #492]	@ (8011c10 <tcp_slowtmr+0x58c>)
 8011a24:	fba1 1303 	umull	r1, r3, r1, r3
 8011a28:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d911      	bls.n	8011a52 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8011a2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011a30:	f004 fac2 	bl	8015fb8 <tcp_keepalive>
 8011a34:	4603      	mov	r3, r0
 8011a36:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8011a3a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d107      	bne.n	8011a52 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8011a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a44:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8011a48:	3301      	adds	r3, #1
 8011a4a:	b2da      	uxtb	r2, r3
 8011a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a4e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8011a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d011      	beq.n	8011a7e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011a5a:	4b6c      	ldr	r3, [pc, #432]	@ (8011c0c <tcp_slowtmr+0x588>)
 8011a5c:	681a      	ldr	r2, [r3, #0]
 8011a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a60:	6a1b      	ldr	r3, [r3, #32]
 8011a62:	1ad2      	subs	r2, r2, r3
 8011a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a66:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	460b      	mov	r3, r1
 8011a6e:	005b      	lsls	r3, r3, #1
 8011a70:	440b      	add	r3, r1
 8011a72:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011a74:	429a      	cmp	r2, r3
 8011a76:	d302      	bcc.n	8011a7e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8011a78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011a7a:	f000 fddb 	bl	8012634 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8011a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a80:	7d1b      	ldrb	r3, [r3, #20]
 8011a82:	2b03      	cmp	r3, #3
 8011a84:	d10b      	bne.n	8011a9e <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a86:	4b61      	ldr	r3, [pc, #388]	@ (8011c0c <tcp_slowtmr+0x588>)
 8011a88:	681a      	ldr	r2, [r3, #0]
 8011a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a8c:	6a1b      	ldr	r3, [r3, #32]
 8011a8e:	1ad3      	subs	r3, r2, r3
 8011a90:	2b28      	cmp	r3, #40	@ 0x28
 8011a92:	d904      	bls.n	8011a9e <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8011a94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a98:	3301      	adds	r3, #1
 8011a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8011a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aa0:	7d1b      	ldrb	r3, [r3, #20]
 8011aa2:	2b09      	cmp	r3, #9
 8011aa4:	d10b      	bne.n	8011abe <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011aa6:	4b59      	ldr	r3, [pc, #356]	@ (8011c0c <tcp_slowtmr+0x588>)
 8011aa8:	681a      	ldr	r2, [r3, #0]
 8011aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aac:	6a1b      	ldr	r3, [r3, #32]
 8011aae:	1ad3      	subs	r3, r2, r3
 8011ab0:	2bf0      	cmp	r3, #240	@ 0xf0
 8011ab2:	d904      	bls.n	8011abe <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8011ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ab8:	3301      	adds	r3, #1
 8011aba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8011abe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d060      	beq.n	8011b88 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8011ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011acc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8011ace:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011ad0:	f000 fbfc 	bl	80122cc <tcp_pcb_purge>
      if (prev != NULL) {
 8011ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d010      	beq.n	8011afc <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011ada:	4b4f      	ldr	r3, [pc, #316]	@ (8011c18 <tcp_slowtmr+0x594>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d106      	bne.n	8011af2 <tcp_slowtmr+0x46e>
 8011ae4:	4b4d      	ldr	r3, [pc, #308]	@ (8011c1c <tcp_slowtmr+0x598>)
 8011ae6:	f240 526d 	movw	r2, #1389	@ 0x56d
 8011aea:	494d      	ldr	r1, [pc, #308]	@ (8011c20 <tcp_slowtmr+0x59c>)
 8011aec:	484d      	ldr	r0, [pc, #308]	@ (8011c24 <tcp_slowtmr+0x5a0>)
 8011aee:	f007 fb83 	bl	80191f8 <iprintf>
        prev->next = pcb->next;
 8011af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011af4:	68da      	ldr	r2, [r3, #12]
 8011af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011af8:	60da      	str	r2, [r3, #12]
 8011afa:	e00f      	b.n	8011b1c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011afc:	4b46      	ldr	r3, [pc, #280]	@ (8011c18 <tcp_slowtmr+0x594>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d006      	beq.n	8011b14 <tcp_slowtmr+0x490>
 8011b06:	4b45      	ldr	r3, [pc, #276]	@ (8011c1c <tcp_slowtmr+0x598>)
 8011b08:	f240 5271 	movw	r2, #1393	@ 0x571
 8011b0c:	4946      	ldr	r1, [pc, #280]	@ (8011c28 <tcp_slowtmr+0x5a4>)
 8011b0e:	4845      	ldr	r0, [pc, #276]	@ (8011c24 <tcp_slowtmr+0x5a0>)
 8011b10:	f007 fb72 	bl	80191f8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	4a3f      	ldr	r2, [pc, #252]	@ (8011c18 <tcp_slowtmr+0x594>)
 8011b1a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8011b1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d013      	beq.n	8011b4c <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b26:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8011b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b2a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011b2c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8011b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b30:	3304      	adds	r3, #4
 8011b32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b34:	8ad2      	ldrh	r2, [r2, #22]
 8011b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011b38:	8b09      	ldrh	r1, [r1, #24]
 8011b3a:	9102      	str	r1, [sp, #8]
 8011b3c:	9201      	str	r2, [sp, #4]
 8011b3e:	9300      	str	r3, [sp, #0]
 8011b40:	462b      	mov	r3, r5
 8011b42:	4622      	mov	r2, r4
 8011b44:	4601      	mov	r1, r0
 8011b46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011b48:	f004 f982 	bl	8015e50 <tcp_rst>
      err_arg = pcb->callback_arg;
 8011b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b4e:	691b      	ldr	r3, [r3, #16]
 8011b50:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b54:	7d1b      	ldrb	r3, [r3, #20]
 8011b56:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b5a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b5e:	68db      	ldr	r3, [r3, #12]
 8011b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8011b62:	6838      	ldr	r0, [r7, #0]
 8011b64:	f7ff f9f0 	bl	8010f48 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8011b68:	4b30      	ldr	r3, [pc, #192]	@ (8011c2c <tcp_slowtmr+0x5a8>)
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d004      	beq.n	8011b7e <tcp_slowtmr+0x4fa>
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	f06f 010c 	mvn.w	r1, #12
 8011b7a:	68b8      	ldr	r0, [r7, #8]
 8011b7c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8011c2c <tcp_slowtmr+0x5a8>)
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d037      	beq.n	8011bf6 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8011b86:	e590      	b.n	80116aa <tcp_slowtmr+0x26>
      prev = pcb;
 8011b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b8e:	68db      	ldr	r3, [r3, #12]
 8011b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8011b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b94:	7f1b      	ldrb	r3, [r3, #28]
 8011b96:	3301      	adds	r3, #1
 8011b98:	b2da      	uxtb	r2, r3
 8011b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b9c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ba0:	7f1a      	ldrb	r2, [r3, #28]
 8011ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ba4:	7f5b      	ldrb	r3, [r3, #29]
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d325      	bcc.n	8011bf6 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8011baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bac:	2200      	movs	r2, #0
 8011bae:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8011bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8011c2c <tcp_slowtmr+0x5a8>)
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d00b      	beq.n	8011bd8 <tcp_slowtmr+0x554>
 8011bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011bc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011bc8:	6912      	ldr	r2, [r2, #16]
 8011bca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011bcc:	4610      	mov	r0, r2
 8011bce:	4798      	blx	r3
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8011bd6:	e002      	b.n	8011bde <tcp_slowtmr+0x55a>
 8011bd8:	2300      	movs	r3, #0
 8011bda:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8011bde:	4b13      	ldr	r3, [pc, #76]	@ (8011c2c <tcp_slowtmr+0x5a8>)
 8011be0:	781b      	ldrb	r3, [r3, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	f47f ad60 	bne.w	80116a8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011be8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d102      	bne.n	8011bf6 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8011bf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011bf2:	f003 fb79 	bl	80152e8 <tcp_output>
  while (pcb != NULL) {
 8011bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	f47f ad5c 	bne.w	80116b6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8011c02:	4b0b      	ldr	r3, [pc, #44]	@ (8011c30 <tcp_slowtmr+0x5ac>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011c08:	e067      	b.n	8011cda <tcp_slowtmr+0x656>
 8011c0a:	bf00      	nop
 8011c0c:	20060b8c 	.word	0x20060b8c
 8011c10:	10624dd3 	.word	0x10624dd3
 8011c14:	000124f8 	.word	0x000124f8
 8011c18:	20060b98 	.word	0x20060b98
 8011c1c:	0801ac3c 	.word	0x0801ac3c
 8011c20:	0801b074 	.word	0x0801b074
 8011c24:	0801ac80 	.word	0x0801ac80
 8011c28:	0801b0a0 	.word	0x0801b0a0
 8011c2c:	20060ba0 	.word	0x20060ba0
 8011c30:	20060b9c 	.word	0x20060b9c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c36:	7d1b      	ldrb	r3, [r3, #20]
 8011c38:	2b0a      	cmp	r3, #10
 8011c3a:	d006      	beq.n	8011c4a <tcp_slowtmr+0x5c6>
 8011c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8011cec <tcp_slowtmr+0x668>)
 8011c3e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8011c42:	492b      	ldr	r1, [pc, #172]	@ (8011cf0 <tcp_slowtmr+0x66c>)
 8011c44:	482b      	ldr	r0, [pc, #172]	@ (8011cf4 <tcp_slowtmr+0x670>)
 8011c46:	f007 fad7 	bl	80191f8 <iprintf>
    pcb_remove = 0;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011c50:	4b29      	ldr	r3, [pc, #164]	@ (8011cf8 <tcp_slowtmr+0x674>)
 8011c52:	681a      	ldr	r2, [r3, #0]
 8011c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c56:	6a1b      	ldr	r3, [r3, #32]
 8011c58:	1ad3      	subs	r3, r2, r3
 8011c5a:	2bf0      	cmp	r3, #240	@ 0xf0
 8011c5c:	d904      	bls.n	8011c68 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8011c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011c62:	3301      	adds	r3, #1
 8011c64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d02f      	beq.n	8011cd0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011c70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011c72:	f000 fb2b 	bl	80122cc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d010      	beq.n	8011c9e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8011cfc <tcp_slowtmr+0x678>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d106      	bne.n	8011c94 <tcp_slowtmr+0x610>
 8011c86:	4b19      	ldr	r3, [pc, #100]	@ (8011cec <tcp_slowtmr+0x668>)
 8011c88:	f240 52af 	movw	r2, #1455	@ 0x5af
 8011c8c:	491c      	ldr	r1, [pc, #112]	@ (8011d00 <tcp_slowtmr+0x67c>)
 8011c8e:	4819      	ldr	r0, [pc, #100]	@ (8011cf4 <tcp_slowtmr+0x670>)
 8011c90:	f007 fab2 	bl	80191f8 <iprintf>
        prev->next = pcb->next;
 8011c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c96:	68da      	ldr	r2, [r3, #12]
 8011c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c9a:	60da      	str	r2, [r3, #12]
 8011c9c:	e00f      	b.n	8011cbe <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011c9e:	4b17      	ldr	r3, [pc, #92]	@ (8011cfc <tcp_slowtmr+0x678>)
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d006      	beq.n	8011cb6 <tcp_slowtmr+0x632>
 8011ca8:	4b10      	ldr	r3, [pc, #64]	@ (8011cec <tcp_slowtmr+0x668>)
 8011caa:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8011cae:	4915      	ldr	r1, [pc, #84]	@ (8011d04 <tcp_slowtmr+0x680>)
 8011cb0:	4810      	ldr	r0, [pc, #64]	@ (8011cf4 <tcp_slowtmr+0x670>)
 8011cb2:	f007 faa1 	bl	80191f8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cb8:	68db      	ldr	r3, [r3, #12]
 8011cba:	4a10      	ldr	r2, [pc, #64]	@ (8011cfc <tcp_slowtmr+0x678>)
 8011cbc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cc0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cc4:	68db      	ldr	r3, [r3, #12]
 8011cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8011cc8:	69f8      	ldr	r0, [r7, #28]
 8011cca:	f7ff f93d 	bl	8010f48 <tcp_free>
 8011cce:	e004      	b.n	8011cda <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8011cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d1a9      	bne.n	8011c34 <tcp_slowtmr+0x5b0>
    }
  }
}
 8011ce0:	bf00      	nop
 8011ce2:	bf00      	nop
 8011ce4:	3730      	adds	r7, #48	@ 0x30
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8011cea:	bf00      	nop
 8011cec:	0801ac3c 	.word	0x0801ac3c
 8011cf0:	0801b0cc 	.word	0x0801b0cc
 8011cf4:	0801ac80 	.word	0x0801ac80
 8011cf8:	20060b8c 	.word	0x20060b8c
 8011cfc:	20060b9c 	.word	0x20060b9c
 8011d00:	0801b0fc 	.word	0x0801b0fc
 8011d04:	0801b124 	.word	0x0801b124

08011d08 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8011dc4 <tcp_fasttmr+0xbc>)
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	3301      	adds	r3, #1
 8011d14:	b2da      	uxtb	r2, r3
 8011d16:	4b2b      	ldr	r3, [pc, #172]	@ (8011dc4 <tcp_fasttmr+0xbc>)
 8011d18:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8011dc8 <tcp_fasttmr+0xc0>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011d20:	e048      	b.n	8011db4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	7f9a      	ldrb	r2, [r3, #30]
 8011d26:	4b27      	ldr	r3, [pc, #156]	@ (8011dc4 <tcp_fasttmr+0xbc>)
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d03f      	beq.n	8011dae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011d2e:	4b25      	ldr	r3, [pc, #148]	@ (8011dc4 <tcp_fasttmr+0xbc>)
 8011d30:	781a      	ldrb	r2, [r3, #0]
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	8b5b      	ldrh	r3, [r3, #26]
 8011d3a:	f003 0301 	and.w	r3, r3, #1
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d010      	beq.n	8011d64 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	8b5b      	ldrh	r3, [r3, #26]
 8011d46:	f043 0302 	orr.w	r3, r3, #2
 8011d4a:	b29a      	uxth	r2, r3
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011d50:	6878      	ldr	r0, [r7, #4]
 8011d52:	f003 fac9 	bl	80152e8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	8b5b      	ldrh	r3, [r3, #26]
 8011d5a:	f023 0303 	bic.w	r3, r3, #3
 8011d5e:	b29a      	uxth	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	8b5b      	ldrh	r3, [r3, #26]
 8011d68:	f003 0308 	and.w	r3, r3, #8
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d009      	beq.n	8011d84 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	8b5b      	ldrh	r3, [r3, #26]
 8011d74:	f023 0308 	bic.w	r3, r3, #8
 8011d78:	b29a      	uxth	r2, r3
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f7ff fa76 	bl	8011270 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	68db      	ldr	r3, [r3, #12]
 8011d88:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d00a      	beq.n	8011da8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011d92:	4b0e      	ldr	r3, [pc, #56]	@ (8011dcc <tcp_fasttmr+0xc4>)
 8011d94:	2200      	movs	r2, #0
 8011d96:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f000 f819 	bl	8011dd0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8011dcc <tcp_fasttmr+0xc4>)
 8011da0:	781b      	ldrb	r3, [r3, #0]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d000      	beq.n	8011da8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011da6:	e7b8      	b.n	8011d1a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	607b      	str	r3, [r7, #4]
 8011dac:	e002      	b.n	8011db4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	68db      	ldr	r3, [r3, #12]
 8011db2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d1b3      	bne.n	8011d22 <tcp_fasttmr+0x1a>
    }
  }
}
 8011dba:	bf00      	nop
 8011dbc:	bf00      	nop
 8011dbe:	3708      	adds	r7, #8
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}
 8011dc4:	20060ba2 	.word	0x20060ba2
 8011dc8:	20060b98 	.word	0x20060b98
 8011dcc:	20060ba0 	.word	0x20060ba0

08011dd0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011dd0:	b590      	push	{r4, r7, lr}
 8011dd2:	b085      	sub	sp, #20
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d109      	bne.n	8011df2 <tcp_process_refused_data+0x22>
 8011dde:	4b37      	ldr	r3, [pc, #220]	@ (8011ebc <tcp_process_refused_data+0xec>)
 8011de0:	f240 6209 	movw	r2, #1545	@ 0x609
 8011de4:	4936      	ldr	r1, [pc, #216]	@ (8011ec0 <tcp_process_refused_data+0xf0>)
 8011de6:	4837      	ldr	r0, [pc, #220]	@ (8011ec4 <tcp_process_refused_data+0xf4>)
 8011de8:	f007 fa06 	bl	80191f8 <iprintf>
 8011dec:	f06f 030f 	mvn.w	r3, #15
 8011df0:	e060      	b.n	8011eb4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011df6:	7b5b      	ldrb	r3, [r3, #13]
 8011df8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011dfe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2200      	movs	r2, #0
 8011e04:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d00b      	beq.n	8011e28 <tcp_process_refused_data+0x58>
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6918      	ldr	r0, [r3, #16]
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	68ba      	ldr	r2, [r7, #8]
 8011e1e:	6879      	ldr	r1, [r7, #4]
 8011e20:	47a0      	blx	r4
 8011e22:	4603      	mov	r3, r0
 8011e24:	73fb      	strb	r3, [r7, #15]
 8011e26:	e007      	b.n	8011e38 <tcp_process_refused_data+0x68>
 8011e28:	2300      	movs	r3, #0
 8011e2a:	68ba      	ldr	r2, [r7, #8]
 8011e2c:	6879      	ldr	r1, [r7, #4]
 8011e2e:	2000      	movs	r0, #0
 8011e30:	f000 f8a4 	bl	8011f7c <tcp_recv_null>
 8011e34:	4603      	mov	r3, r0
 8011e36:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d12a      	bne.n	8011e96 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011e40:	7bbb      	ldrb	r3, [r7, #14]
 8011e42:	f003 0320 	and.w	r3, r3, #32
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d033      	beq.n	8011eb2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e4e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011e52:	d005      	beq.n	8011e60 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e58:	3301      	adds	r3, #1
 8011e5a:	b29a      	uxth	r2, r3
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d00b      	beq.n	8011e82 <tcp_process_refused_data+0xb2>
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	6918      	ldr	r0, [r3, #16]
 8011e74:	2300      	movs	r3, #0
 8011e76:	2200      	movs	r2, #0
 8011e78:	6879      	ldr	r1, [r7, #4]
 8011e7a:	47a0      	blx	r4
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	73fb      	strb	r3, [r7, #15]
 8011e80:	e001      	b.n	8011e86 <tcp_process_refused_data+0xb6>
 8011e82:	2300      	movs	r3, #0
 8011e84:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e8a:	f113 0f0d 	cmn.w	r3, #13
 8011e8e:	d110      	bne.n	8011eb2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011e90:	f06f 030c 	mvn.w	r3, #12
 8011e94:	e00e      	b.n	8011eb4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e9a:	f113 0f0d 	cmn.w	r3, #13
 8011e9e:	d102      	bne.n	8011ea6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011ea0:	f06f 030c 	mvn.w	r3, #12
 8011ea4:	e006      	b.n	8011eb4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	68ba      	ldr	r2, [r7, #8]
 8011eaa:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8011eac:	f06f 0304 	mvn.w	r3, #4
 8011eb0:	e000      	b.n	8011eb4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011eb2:	2300      	movs	r3, #0
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3714      	adds	r7, #20
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd90      	pop	{r4, r7, pc}
 8011ebc:	0801ac3c 	.word	0x0801ac3c
 8011ec0:	0801b14c 	.word	0x0801b14c
 8011ec4:	0801ac80 	.word	0x0801ac80

08011ec8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b084      	sub	sp, #16
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011ed0:	e007      	b.n	8011ee2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f000 f80a 	bl	8011ef2 <tcp_seg_free>
    seg = next;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d1f4      	bne.n	8011ed2 <tcp_segs_free+0xa>
  }
}
 8011ee8:	bf00      	nop
 8011eea:	bf00      	nop
 8011eec:	3710      	adds	r7, #16
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}

08011ef2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011ef2:	b580      	push	{r7, lr}
 8011ef4:	b082      	sub	sp, #8
 8011ef6:	af00      	add	r7, sp, #0
 8011ef8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d00c      	beq.n	8011f1a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	685b      	ldr	r3, [r3, #4]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d004      	beq.n	8011f12 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	685b      	ldr	r3, [r3, #4]
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f7fe fd6f 	bl	80109f0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011f12:	6879      	ldr	r1, [r7, #4]
 8011f14:	2003      	movs	r0, #3
 8011f16:	f7fd fec7 	bl	800fca8 <memp_free>
  }
}
 8011f1a:	bf00      	nop
 8011f1c:	3708      	adds	r7, #8
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
	...

08011f24 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b084      	sub	sp, #16
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d106      	bne.n	8011f40 <tcp_seg_copy+0x1c>
 8011f32:	4b0f      	ldr	r3, [pc, #60]	@ (8011f70 <tcp_seg_copy+0x4c>)
 8011f34:	f240 6282 	movw	r2, #1666	@ 0x682
 8011f38:	490e      	ldr	r1, [pc, #56]	@ (8011f74 <tcp_seg_copy+0x50>)
 8011f3a:	480f      	ldr	r0, [pc, #60]	@ (8011f78 <tcp_seg_copy+0x54>)
 8011f3c:	f007 f95c 	bl	80191f8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011f40:	2003      	movs	r0, #3
 8011f42:	f7fd fe3b 	bl	800fbbc <memp_malloc>
 8011f46:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d101      	bne.n	8011f52 <tcp_seg_copy+0x2e>
    return NULL;
 8011f4e:	2300      	movs	r3, #0
 8011f50:	e00a      	b.n	8011f68 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011f52:	2210      	movs	r2, #16
 8011f54:	6879      	ldr	r1, [r7, #4]
 8011f56:	68f8      	ldr	r0, [r7, #12]
 8011f58:	f007 fa29 	bl	80193ae <memcpy>
  pbuf_ref(cseg->p);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	4618      	mov	r0, r3
 8011f62:	f7fe fdeb 	bl	8010b3c <pbuf_ref>
  return cseg;
 8011f66:	68fb      	ldr	r3, [r7, #12]
}
 8011f68:	4618      	mov	r0, r3
 8011f6a:	3710      	adds	r7, #16
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}
 8011f70:	0801ac3c 	.word	0x0801ac3c
 8011f74:	0801b190 	.word	0x0801b190
 8011f78:	0801ac80 	.word	0x0801ac80

08011f7c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b084      	sub	sp, #16
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	60f8      	str	r0, [r7, #12]
 8011f84:	60b9      	str	r1, [r7, #8]
 8011f86:	607a      	str	r2, [r7, #4]
 8011f88:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d109      	bne.n	8011fa4 <tcp_recv_null+0x28>
 8011f90:	4b12      	ldr	r3, [pc, #72]	@ (8011fdc <tcp_recv_null+0x60>)
 8011f92:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011f96:	4912      	ldr	r1, [pc, #72]	@ (8011fe0 <tcp_recv_null+0x64>)
 8011f98:	4812      	ldr	r0, [pc, #72]	@ (8011fe4 <tcp_recv_null+0x68>)
 8011f9a:	f007 f92d 	bl	80191f8 <iprintf>
 8011f9e:	f06f 030f 	mvn.w	r3, #15
 8011fa2:	e016      	b.n	8011fd2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d009      	beq.n	8011fbe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	891b      	ldrh	r3, [r3, #8]
 8011fae:	4619      	mov	r1, r3
 8011fb0:	68b8      	ldr	r0, [r7, #8]
 8011fb2:	f7ff fb17 	bl	80115e4 <tcp_recved>
    pbuf_free(p);
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f7fe fd1a 	bl	80109f0 <pbuf_free>
 8011fbc:	e008      	b.n	8011fd0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011fbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d104      	bne.n	8011fd0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011fc6:	68b8      	ldr	r0, [r7, #8]
 8011fc8:	f7ff f9bc 	bl	8011344 <tcp_close>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	e000      	b.n	8011fd2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011fd0:	2300      	movs	r3, #0
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3710      	adds	r7, #16
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}
 8011fda:	bf00      	nop
 8011fdc:	0801ac3c 	.word	0x0801ac3c
 8011fe0:	0801b1ac 	.word	0x0801b1ac
 8011fe4:	0801ac80 	.word	0x0801ac80

08011fe8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b086      	sub	sp, #24
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	4603      	mov	r3, r0
 8011ff0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	db01      	blt.n	8011ffe <tcp_kill_prio+0x16>
 8011ffa:	79fb      	ldrb	r3, [r7, #7]
 8011ffc:	e000      	b.n	8012000 <tcp_kill_prio+0x18>
 8011ffe:	237f      	movs	r3, #127	@ 0x7f
 8012000:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012002:	7afb      	ldrb	r3, [r7, #11]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d034      	beq.n	8012072 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012008:	7afb      	ldrb	r3, [r7, #11]
 801200a:	3b01      	subs	r3, #1
 801200c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801200e:	2300      	movs	r3, #0
 8012010:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012012:	2300      	movs	r3, #0
 8012014:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012016:	4b19      	ldr	r3, [pc, #100]	@ (801207c <tcp_kill_prio+0x94>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	617b      	str	r3, [r7, #20]
 801201c:	e01f      	b.n	801205e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	7d5b      	ldrb	r3, [r3, #21]
 8012022:	7afa      	ldrb	r2, [r7, #11]
 8012024:	429a      	cmp	r2, r3
 8012026:	d80c      	bhi.n	8012042 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801202c:	7afa      	ldrb	r2, [r7, #11]
 801202e:	429a      	cmp	r2, r3
 8012030:	d112      	bne.n	8012058 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012032:	4b13      	ldr	r3, [pc, #76]	@ (8012080 <tcp_kill_prio+0x98>)
 8012034:	681a      	ldr	r2, [r3, #0]
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	6a1b      	ldr	r3, [r3, #32]
 801203a:	1ad3      	subs	r3, r2, r3
 801203c:	68fa      	ldr	r2, [r7, #12]
 801203e:	429a      	cmp	r2, r3
 8012040:	d80a      	bhi.n	8012058 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012042:	4b0f      	ldr	r3, [pc, #60]	@ (8012080 <tcp_kill_prio+0x98>)
 8012044:	681a      	ldr	r2, [r3, #0]
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	6a1b      	ldr	r3, [r3, #32]
 801204a:	1ad3      	subs	r3, r2, r3
 801204c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	7d5b      	ldrb	r3, [r3, #21]
 8012056:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	617b      	str	r3, [r7, #20]
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d1dc      	bne.n	801201e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d004      	beq.n	8012074 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801206a:	6938      	ldr	r0, [r7, #16]
 801206c:	f7ff fa54 	bl	8011518 <tcp_abort>
 8012070:	e000      	b.n	8012074 <tcp_kill_prio+0x8c>
    return;
 8012072:	bf00      	nop
  }
}
 8012074:	3718      	adds	r7, #24
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
 801207a:	bf00      	nop
 801207c:	20060b98 	.word	0x20060b98
 8012080:	20060b8c 	.word	0x20060b8c

08012084 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b086      	sub	sp, #24
 8012088:	af00      	add	r7, sp, #0
 801208a:	4603      	mov	r3, r0
 801208c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801208e:	79fb      	ldrb	r3, [r7, #7]
 8012090:	2b08      	cmp	r3, #8
 8012092:	d009      	beq.n	80120a8 <tcp_kill_state+0x24>
 8012094:	79fb      	ldrb	r3, [r7, #7]
 8012096:	2b09      	cmp	r3, #9
 8012098:	d006      	beq.n	80120a8 <tcp_kill_state+0x24>
 801209a:	4b1a      	ldr	r3, [pc, #104]	@ (8012104 <tcp_kill_state+0x80>)
 801209c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80120a0:	4919      	ldr	r1, [pc, #100]	@ (8012108 <tcp_kill_state+0x84>)
 80120a2:	481a      	ldr	r0, [pc, #104]	@ (801210c <tcp_kill_state+0x88>)
 80120a4:	f007 f8a8 	bl	80191f8 <iprintf>

  inactivity = 0;
 80120a8:	2300      	movs	r3, #0
 80120aa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80120ac:	2300      	movs	r3, #0
 80120ae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80120b0:	4b17      	ldr	r3, [pc, #92]	@ (8012110 <tcp_kill_state+0x8c>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	617b      	str	r3, [r7, #20]
 80120b6:	e017      	b.n	80120e8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80120b8:	697b      	ldr	r3, [r7, #20]
 80120ba:	7d1b      	ldrb	r3, [r3, #20]
 80120bc:	79fa      	ldrb	r2, [r7, #7]
 80120be:	429a      	cmp	r2, r3
 80120c0:	d10f      	bne.n	80120e2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80120c2:	4b14      	ldr	r3, [pc, #80]	@ (8012114 <tcp_kill_state+0x90>)
 80120c4:	681a      	ldr	r2, [r3, #0]
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	6a1b      	ldr	r3, [r3, #32]
 80120ca:	1ad3      	subs	r3, r2, r3
 80120cc:	68fa      	ldr	r2, [r7, #12]
 80120ce:	429a      	cmp	r2, r3
 80120d0:	d807      	bhi.n	80120e2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80120d2:	4b10      	ldr	r3, [pc, #64]	@ (8012114 <tcp_kill_state+0x90>)
 80120d4:	681a      	ldr	r2, [r3, #0]
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	6a1b      	ldr	r3, [r3, #32]
 80120da:	1ad3      	subs	r3, r2, r3
 80120dc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80120de:	697b      	ldr	r3, [r7, #20]
 80120e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	68db      	ldr	r3, [r3, #12]
 80120e6:	617b      	str	r3, [r7, #20]
 80120e8:	697b      	ldr	r3, [r7, #20]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d1e4      	bne.n	80120b8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d003      	beq.n	80120fc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80120f4:	2100      	movs	r1, #0
 80120f6:	6938      	ldr	r0, [r7, #16]
 80120f8:	f7ff f950 	bl	801139c <tcp_abandon>
  }
}
 80120fc:	bf00      	nop
 80120fe:	3718      	adds	r7, #24
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}
 8012104:	0801ac3c 	.word	0x0801ac3c
 8012108:	0801b1c8 	.word	0x0801b1c8
 801210c:	0801ac80 	.word	0x0801ac80
 8012110:	20060b98 	.word	0x20060b98
 8012114:	20060b8c 	.word	0x20060b8c

08012118 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b084      	sub	sp, #16
 801211c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801211e:	2300      	movs	r3, #0
 8012120:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012122:	2300      	movs	r3, #0
 8012124:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012126:	4b12      	ldr	r3, [pc, #72]	@ (8012170 <tcp_kill_timewait+0x58>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	60fb      	str	r3, [r7, #12]
 801212c:	e012      	b.n	8012154 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801212e:	4b11      	ldr	r3, [pc, #68]	@ (8012174 <tcp_kill_timewait+0x5c>)
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	6a1b      	ldr	r3, [r3, #32]
 8012136:	1ad3      	subs	r3, r2, r3
 8012138:	687a      	ldr	r2, [r7, #4]
 801213a:	429a      	cmp	r2, r3
 801213c:	d807      	bhi.n	801214e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801213e:	4b0d      	ldr	r3, [pc, #52]	@ (8012174 <tcp_kill_timewait+0x5c>)
 8012140:	681a      	ldr	r2, [r3, #0]
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	6a1b      	ldr	r3, [r3, #32]
 8012146:	1ad3      	subs	r3, r2, r3
 8012148:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	68db      	ldr	r3, [r3, #12]
 8012152:	60fb      	str	r3, [r7, #12]
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d1e9      	bne.n	801212e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d002      	beq.n	8012166 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012160:	68b8      	ldr	r0, [r7, #8]
 8012162:	f7ff f9d9 	bl	8011518 <tcp_abort>
  }
}
 8012166:	bf00      	nop
 8012168:	3710      	adds	r7, #16
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
 801216e:	bf00      	nop
 8012170:	20060b9c 	.word	0x20060b9c
 8012174:	20060b8c 	.word	0x20060b8c

08012178 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801217e:	4b10      	ldr	r3, [pc, #64]	@ (80121c0 <tcp_handle_closepend+0x48>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012184:	e014      	b.n	80121b0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	68db      	ldr	r3, [r3, #12]
 801218a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	8b5b      	ldrh	r3, [r3, #26]
 8012190:	f003 0308 	and.w	r3, r3, #8
 8012194:	2b00      	cmp	r3, #0
 8012196:	d009      	beq.n	80121ac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	8b5b      	ldrh	r3, [r3, #26]
 801219c:	f023 0308 	bic.w	r3, r3, #8
 80121a0:	b29a      	uxth	r2, r3
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80121a6:	6878      	ldr	r0, [r7, #4]
 80121a8:	f7ff f862 	bl	8011270 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d1e7      	bne.n	8012186 <tcp_handle_closepend+0xe>
  }
}
 80121b6:	bf00      	nop
 80121b8:	bf00      	nop
 80121ba:	3708      	adds	r7, #8
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}
 80121c0:	20060b98 	.word	0x20060b98

080121c4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b084      	sub	sp, #16
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	4603      	mov	r3, r0
 80121cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80121ce:	2001      	movs	r0, #1
 80121d0:	f7fd fcf4 	bl	800fbbc <memp_malloc>
 80121d4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d126      	bne.n	801222a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80121dc:	f7ff ffcc 	bl	8012178 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80121e0:	f7ff ff9a 	bl	8012118 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80121e4:	2001      	movs	r0, #1
 80121e6:	f7fd fce9 	bl	800fbbc <memp_malloc>
 80121ea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d11b      	bne.n	801222a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80121f2:	2009      	movs	r0, #9
 80121f4:	f7ff ff46 	bl	8012084 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80121f8:	2001      	movs	r0, #1
 80121fa:	f7fd fcdf 	bl	800fbbc <memp_malloc>
 80121fe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d111      	bne.n	801222a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012206:	2008      	movs	r0, #8
 8012208:	f7ff ff3c 	bl	8012084 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801220c:	2001      	movs	r0, #1
 801220e:	f7fd fcd5 	bl	800fbbc <memp_malloc>
 8012212:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d107      	bne.n	801222a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801221a:	79fb      	ldrb	r3, [r7, #7]
 801221c:	4618      	mov	r0, r3
 801221e:	f7ff fee3 	bl	8011fe8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012222:	2001      	movs	r0, #1
 8012224:	f7fd fcca 	bl	800fbbc <memp_malloc>
 8012228:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d03f      	beq.n	80122b0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012230:	229c      	movs	r2, #156	@ 0x9c
 8012232:	2100      	movs	r1, #0
 8012234:	68f8      	ldr	r0, [r7, #12]
 8012236:	f007 f844 	bl	80192c2 <memset>
    pcb->prio = prio;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	79fa      	ldrb	r2, [r7, #7]
 801223e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8012246:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8012250:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	22ff      	movs	r2, #255	@ 0xff
 801225e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012266:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2206      	movs	r2, #6
 801226c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	2206      	movs	r2, #6
 8012274:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801227c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	2201      	movs	r2, #1
 8012282:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8012286:	4b0d      	ldr	r3, [pc, #52]	@ (80122bc <tcp_alloc+0xf8>)
 8012288:	681a      	ldr	r2, [r3, #0]
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801228e:	4b0c      	ldr	r3, [pc, #48]	@ (80122c0 <tcp_alloc+0xfc>)
 8012290:	781a      	ldrb	r2, [r3, #0]
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801229c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	4a08      	ldr	r2, [pc, #32]	@ (80122c4 <tcp_alloc+0x100>)
 80122a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	4a07      	ldr	r2, [pc, #28]	@ (80122c8 <tcp_alloc+0x104>)
 80122ac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80122b0:	68fb      	ldr	r3, [r7, #12]
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3710      	adds	r7, #16
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	20060b8c 	.word	0x20060b8c
 80122c0:	20060ba2 	.word	0x20060ba2
 80122c4:	08011f7d 	.word	0x08011f7d
 80122c8:	006ddd00 	.word	0x006ddd00

080122cc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b082      	sub	sp, #8
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d107      	bne.n	80122ea <tcp_pcb_purge+0x1e>
 80122da:	4b21      	ldr	r3, [pc, #132]	@ (8012360 <tcp_pcb_purge+0x94>)
 80122dc:	f640 0251 	movw	r2, #2129	@ 0x851
 80122e0:	4920      	ldr	r1, [pc, #128]	@ (8012364 <tcp_pcb_purge+0x98>)
 80122e2:	4821      	ldr	r0, [pc, #132]	@ (8012368 <tcp_pcb_purge+0x9c>)
 80122e4:	f006 ff88 	bl	80191f8 <iprintf>
 80122e8:	e037      	b.n	801235a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	7d1b      	ldrb	r3, [r3, #20]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d033      	beq.n	801235a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80122f6:	2b0a      	cmp	r3, #10
 80122f8:	d02f      	beq.n	801235a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80122fe:	2b01      	cmp	r3, #1
 8012300:	d02b      	beq.n	801235a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012306:	2b00      	cmp	r3, #0
 8012308:	d007      	beq.n	801231a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801230e:	4618      	mov	r0, r3
 8012310:	f7fe fb6e 	bl	80109f0 <pbuf_free>
      pcb->refused_data = NULL;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2200      	movs	r2, #0
 8012318:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801231e:	2b00      	cmp	r3, #0
 8012320:	d002      	beq.n	8012328 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f000 f986 	bl	8012634 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801232e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012334:	4618      	mov	r0, r3
 8012336:	f7ff fdc7 	bl	8011ec8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801233e:	4618      	mov	r0, r3
 8012340:	f7ff fdc2 	bl	8011ec8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2200      	movs	r2, #0
 8012348:	66da      	str	r2, [r3, #108]	@ 0x6c
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2200      	movs	r2, #0
 8012356:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801235a:	3708      	adds	r7, #8
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}
 8012360:	0801ac3c 	.word	0x0801ac3c
 8012364:	0801b288 	.word	0x0801b288
 8012368:	0801ac80 	.word	0x0801ac80

0801236c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d106      	bne.n	801238a <tcp_pcb_remove+0x1e>
 801237c:	4b3e      	ldr	r3, [pc, #248]	@ (8012478 <tcp_pcb_remove+0x10c>)
 801237e:	f640 0283 	movw	r2, #2179	@ 0x883
 8012382:	493e      	ldr	r1, [pc, #248]	@ (801247c <tcp_pcb_remove+0x110>)
 8012384:	483e      	ldr	r0, [pc, #248]	@ (8012480 <tcp_pcb_remove+0x114>)
 8012386:	f006 ff37 	bl	80191f8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d106      	bne.n	801239e <tcp_pcb_remove+0x32>
 8012390:	4b39      	ldr	r3, [pc, #228]	@ (8012478 <tcp_pcb_remove+0x10c>)
 8012392:	f640 0284 	movw	r2, #2180	@ 0x884
 8012396:	493b      	ldr	r1, [pc, #236]	@ (8012484 <tcp_pcb_remove+0x118>)
 8012398:	4839      	ldr	r0, [pc, #228]	@ (8012480 <tcp_pcb_remove+0x114>)
 801239a:	f006 ff2d 	bl	80191f8 <iprintf>

  TCP_RMV(pcblist, pcb);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	683a      	ldr	r2, [r7, #0]
 80123a4:	429a      	cmp	r2, r3
 80123a6:	d105      	bne.n	80123b4 <tcp_pcb_remove+0x48>
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	68da      	ldr	r2, [r3, #12]
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	601a      	str	r2, [r3, #0]
 80123b2:	e013      	b.n	80123dc <tcp_pcb_remove+0x70>
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	60fb      	str	r3, [r7, #12]
 80123ba:	e00c      	b.n	80123d6 <tcp_pcb_remove+0x6a>
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	68db      	ldr	r3, [r3, #12]
 80123c0:	683a      	ldr	r2, [r7, #0]
 80123c2:	429a      	cmp	r2, r3
 80123c4:	d104      	bne.n	80123d0 <tcp_pcb_remove+0x64>
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	68da      	ldr	r2, [r3, #12]
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	60da      	str	r2, [r3, #12]
 80123ce:	e005      	b.n	80123dc <tcp_pcb_remove+0x70>
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	60fb      	str	r3, [r7, #12]
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d1ef      	bne.n	80123bc <tcp_pcb_remove+0x50>
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	2200      	movs	r2, #0
 80123e0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80123e2:	6838      	ldr	r0, [r7, #0]
 80123e4:	f7ff ff72 	bl	80122cc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	7d1b      	ldrb	r3, [r3, #20]
 80123ec:	2b0a      	cmp	r3, #10
 80123ee:	d013      	beq.n	8012418 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	d00f      	beq.n	8012418 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	8b5b      	ldrh	r3, [r3, #26]
 80123fc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8012400:	2b00      	cmp	r3, #0
 8012402:	d009      	beq.n	8012418 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	8b5b      	ldrh	r3, [r3, #26]
 8012408:	f043 0302 	orr.w	r3, r3, #2
 801240c:	b29a      	uxth	r2, r3
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012412:	6838      	ldr	r0, [r7, #0]
 8012414:	f002 ff68 	bl	80152e8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	7d1b      	ldrb	r3, [r3, #20]
 801241c:	2b01      	cmp	r3, #1
 801241e:	d020      	beq.n	8012462 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012424:	2b00      	cmp	r3, #0
 8012426:	d006      	beq.n	8012436 <tcp_pcb_remove+0xca>
 8012428:	4b13      	ldr	r3, [pc, #76]	@ (8012478 <tcp_pcb_remove+0x10c>)
 801242a:	f640 0293 	movw	r2, #2195	@ 0x893
 801242e:	4916      	ldr	r1, [pc, #88]	@ (8012488 <tcp_pcb_remove+0x11c>)
 8012430:	4813      	ldr	r0, [pc, #76]	@ (8012480 <tcp_pcb_remove+0x114>)
 8012432:	f006 fee1 	bl	80191f8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012436:	683b      	ldr	r3, [r7, #0]
 8012438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801243a:	2b00      	cmp	r3, #0
 801243c:	d006      	beq.n	801244c <tcp_pcb_remove+0xe0>
 801243e:	4b0e      	ldr	r3, [pc, #56]	@ (8012478 <tcp_pcb_remove+0x10c>)
 8012440:	f640 0294 	movw	r2, #2196	@ 0x894
 8012444:	4911      	ldr	r1, [pc, #68]	@ (801248c <tcp_pcb_remove+0x120>)
 8012446:	480e      	ldr	r0, [pc, #56]	@ (8012480 <tcp_pcb_remove+0x114>)
 8012448:	f006 fed6 	bl	80191f8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012450:	2b00      	cmp	r3, #0
 8012452:	d006      	beq.n	8012462 <tcp_pcb_remove+0xf6>
 8012454:	4b08      	ldr	r3, [pc, #32]	@ (8012478 <tcp_pcb_remove+0x10c>)
 8012456:	f640 0296 	movw	r2, #2198	@ 0x896
 801245a:	490d      	ldr	r1, [pc, #52]	@ (8012490 <tcp_pcb_remove+0x124>)
 801245c:	4808      	ldr	r0, [pc, #32]	@ (8012480 <tcp_pcb_remove+0x114>)
 801245e:	f006 fecb 	bl	80191f8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	2200      	movs	r2, #0
 8012466:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	2200      	movs	r2, #0
 801246c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801246e:	bf00      	nop
 8012470:	3710      	adds	r7, #16
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}
 8012476:	bf00      	nop
 8012478:	0801ac3c 	.word	0x0801ac3c
 801247c:	0801b2a4 	.word	0x0801b2a4
 8012480:	0801ac80 	.word	0x0801ac80
 8012484:	0801b2c0 	.word	0x0801b2c0
 8012488:	0801b2e0 	.word	0x0801b2e0
 801248c:	0801b2f8 	.word	0x0801b2f8
 8012490:	0801b314 	.word	0x0801b314

08012494 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b082      	sub	sp, #8
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d106      	bne.n	80124b0 <tcp_next_iss+0x1c>
 80124a2:	4b0a      	ldr	r3, [pc, #40]	@ (80124cc <tcp_next_iss+0x38>)
 80124a4:	f640 02af 	movw	r2, #2223	@ 0x8af
 80124a8:	4909      	ldr	r1, [pc, #36]	@ (80124d0 <tcp_next_iss+0x3c>)
 80124aa:	480a      	ldr	r0, [pc, #40]	@ (80124d4 <tcp_next_iss+0x40>)
 80124ac:	f006 fea4 	bl	80191f8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80124b0:	4b09      	ldr	r3, [pc, #36]	@ (80124d8 <tcp_next_iss+0x44>)
 80124b2:	681a      	ldr	r2, [r3, #0]
 80124b4:	4b09      	ldr	r3, [pc, #36]	@ (80124dc <tcp_next_iss+0x48>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	4413      	add	r3, r2
 80124ba:	4a07      	ldr	r2, [pc, #28]	@ (80124d8 <tcp_next_iss+0x44>)
 80124bc:	6013      	str	r3, [r2, #0]
  return iss;
 80124be:	4b06      	ldr	r3, [pc, #24]	@ (80124d8 <tcp_next_iss+0x44>)
 80124c0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	3708      	adds	r7, #8
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}
 80124ca:	bf00      	nop
 80124cc:	0801ac3c 	.word	0x0801ac3c
 80124d0:	0801b32c 	.word	0x0801b32c
 80124d4:	0801ac80 	.word	0x0801ac80
 80124d8:	2005002c 	.word	0x2005002c
 80124dc:	20060b8c 	.word	0x20060b8c

080124e0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b086      	sub	sp, #24
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	4603      	mov	r3, r0
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	607a      	str	r2, [r7, #4]
 80124ec:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d106      	bne.n	8012502 <tcp_eff_send_mss_netif+0x22>
 80124f4:	4b14      	ldr	r3, [pc, #80]	@ (8012548 <tcp_eff_send_mss_netif+0x68>)
 80124f6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80124fa:	4914      	ldr	r1, [pc, #80]	@ (801254c <tcp_eff_send_mss_netif+0x6c>)
 80124fc:	4814      	ldr	r0, [pc, #80]	@ (8012550 <tcp_eff_send_mss_netif+0x70>)
 80124fe:	f006 fe7b 	bl	80191f8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d101      	bne.n	801250c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012508:	89fb      	ldrh	r3, [r7, #14]
 801250a:	e019      	b.n	8012540 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801250c:	68bb      	ldr	r3, [r7, #8]
 801250e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012510:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012512:	8afb      	ldrh	r3, [r7, #22]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d012      	beq.n	801253e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012518:	2328      	movs	r3, #40	@ 0x28
 801251a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801251c:	8afa      	ldrh	r2, [r7, #22]
 801251e:	8abb      	ldrh	r3, [r7, #20]
 8012520:	429a      	cmp	r2, r3
 8012522:	d904      	bls.n	801252e <tcp_eff_send_mss_netif+0x4e>
 8012524:	8afa      	ldrh	r2, [r7, #22]
 8012526:	8abb      	ldrh	r3, [r7, #20]
 8012528:	1ad3      	subs	r3, r2, r3
 801252a:	b29b      	uxth	r3, r3
 801252c:	e000      	b.n	8012530 <tcp_eff_send_mss_netif+0x50>
 801252e:	2300      	movs	r3, #0
 8012530:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012532:	8a7a      	ldrh	r2, [r7, #18]
 8012534:	89fb      	ldrh	r3, [r7, #14]
 8012536:	4293      	cmp	r3, r2
 8012538:	bf28      	it	cs
 801253a:	4613      	movcs	r3, r2
 801253c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801253e:	89fb      	ldrh	r3, [r7, #14]
}
 8012540:	4618      	mov	r0, r3
 8012542:	3718      	adds	r7, #24
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}
 8012548:	0801ac3c 	.word	0x0801ac3c
 801254c:	0801b348 	.word	0x0801b348
 8012550:	0801ac80 	.word	0x0801ac80

08012554 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b084      	sub	sp, #16
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d119      	bne.n	801259c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012568:	4b10      	ldr	r3, [pc, #64]	@ (80125ac <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801256a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801256e:	4910      	ldr	r1, [pc, #64]	@ (80125b0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012570:	4810      	ldr	r0, [pc, #64]	@ (80125b4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012572:	f006 fe41 	bl	80191f8 <iprintf>

  while (pcb != NULL) {
 8012576:	e011      	b.n	801259c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	681a      	ldr	r2, [r3, #0]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	429a      	cmp	r2, r3
 8012582:	d108      	bne.n	8012596 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	68db      	ldr	r3, [r3, #12]
 8012588:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801258a:	68f8      	ldr	r0, [r7, #12]
 801258c:	f7fe ffc4 	bl	8011518 <tcp_abort>
      pcb = next;
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	60fb      	str	r3, [r7, #12]
 8012594:	e002      	b.n	801259c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	68db      	ldr	r3, [r3, #12]
 801259a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d1ea      	bne.n	8012578 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80125a2:	bf00      	nop
 80125a4:	bf00      	nop
 80125a6:	3710      	adds	r7, #16
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}
 80125ac:	0801ac3c 	.word	0x0801ac3c
 80125b0:	0801b370 	.word	0x0801b370
 80125b4:	0801ac80 	.word	0x0801ac80

080125b8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b084      	sub	sp, #16
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d02a      	beq.n	801261e <tcp_netif_ip_addr_changed+0x66>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d026      	beq.n	801261e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80125d0:	4b15      	ldr	r3, [pc, #84]	@ (8012628 <tcp_netif_ip_addr_changed+0x70>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	4619      	mov	r1, r3
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f7ff ffbc 	bl	8012554 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80125dc:	4b13      	ldr	r3, [pc, #76]	@ (801262c <tcp_netif_ip_addr_changed+0x74>)
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	4619      	mov	r1, r3
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f7ff ffb6 	bl	8012554 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d017      	beq.n	801261e <tcp_netif_ip_addr_changed+0x66>
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d013      	beq.n	801261e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80125f6:	4b0e      	ldr	r3, [pc, #56]	@ (8012630 <tcp_netif_ip_addr_changed+0x78>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	60fb      	str	r3, [r7, #12]
 80125fc:	e00c      	b.n	8012618 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	681a      	ldr	r2, [r3, #0]
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	429a      	cmp	r2, r3
 8012608:	d103      	bne.n	8012612 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	681a      	ldr	r2, [r3, #0]
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	68db      	ldr	r3, [r3, #12]
 8012616:	60fb      	str	r3, [r7, #12]
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d1ef      	bne.n	80125fe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801261e:	bf00      	nop
 8012620:	3710      	adds	r7, #16
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}
 8012626:	bf00      	nop
 8012628:	20060b98 	.word	0x20060b98
 801262c:	20060b90 	.word	0x20060b90
 8012630:	20060b94 	.word	0x20060b94

08012634 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b082      	sub	sp, #8
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012640:	2b00      	cmp	r3, #0
 8012642:	d007      	beq.n	8012654 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012648:	4618      	mov	r0, r3
 801264a:	f7ff fc3d 	bl	8011ec8 <tcp_segs_free>
    pcb->ooseq = NULL;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2200      	movs	r2, #0
 8012652:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012654:	bf00      	nop
 8012656:	3708      	adds	r7, #8
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}

0801265c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801265c:	b590      	push	{r4, r7, lr}
 801265e:	b08d      	sub	sp, #52	@ 0x34
 8012660:	af04      	add	r7, sp, #16
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d105      	bne.n	8012678 <tcp_input+0x1c>
 801266c:	4b9b      	ldr	r3, [pc, #620]	@ (80128dc <tcp_input+0x280>)
 801266e:	2283      	movs	r2, #131	@ 0x83
 8012670:	499b      	ldr	r1, [pc, #620]	@ (80128e0 <tcp_input+0x284>)
 8012672:	489c      	ldr	r0, [pc, #624]	@ (80128e4 <tcp_input+0x288>)
 8012674:	f006 fdc0 	bl	80191f8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	4a9a      	ldr	r2, [pc, #616]	@ (80128e8 <tcp_input+0x28c>)
 801267e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	895b      	ldrh	r3, [r3, #10]
 8012684:	2b13      	cmp	r3, #19
 8012686:	f240 83d1 	bls.w	8012e2c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801268a:	4b98      	ldr	r3, [pc, #608]	@ (80128ec <tcp_input+0x290>)
 801268c:	695b      	ldr	r3, [r3, #20]
 801268e:	4a97      	ldr	r2, [pc, #604]	@ (80128ec <tcp_input+0x290>)
 8012690:	6812      	ldr	r2, [r2, #0]
 8012692:	4611      	mov	r1, r2
 8012694:	4618      	mov	r0, r3
 8012696:	f005 fc67 	bl	8017f68 <ip4_addr_isbroadcast_u32>
 801269a:	4603      	mov	r3, r0
 801269c:	2b00      	cmp	r3, #0
 801269e:	f040 83c7 	bne.w	8012e30 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80126a2:	4b92      	ldr	r3, [pc, #584]	@ (80128ec <tcp_input+0x290>)
 80126a4:	695b      	ldr	r3, [r3, #20]
 80126a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80126aa:	2be0      	cmp	r3, #224	@ 0xe0
 80126ac:	f000 83c0 	beq.w	8012e30 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80126b0:	4b8d      	ldr	r3, [pc, #564]	@ (80128e8 <tcp_input+0x28c>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	899b      	ldrh	r3, [r3, #12]
 80126b6:	b29b      	uxth	r3, r3
 80126b8:	4618      	mov	r0, r3
 80126ba:	f7fc fcef 	bl	800f09c <lwip_htons>
 80126be:	4603      	mov	r3, r0
 80126c0:	0b1b      	lsrs	r3, r3, #12
 80126c2:	b29b      	uxth	r3, r3
 80126c4:	b2db      	uxtb	r3, r3
 80126c6:	009b      	lsls	r3, r3, #2
 80126c8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80126ca:	7cbb      	ldrb	r3, [r7, #18]
 80126cc:	2b13      	cmp	r3, #19
 80126ce:	f240 83b1 	bls.w	8012e34 <tcp_input+0x7d8>
 80126d2:	7cbb      	ldrb	r3, [r7, #18]
 80126d4:	b29a      	uxth	r2, r3
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	891b      	ldrh	r3, [r3, #8]
 80126da:	429a      	cmp	r2, r3
 80126dc:	f200 83aa 	bhi.w	8012e34 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80126e0:	7cbb      	ldrb	r3, [r7, #18]
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	3b14      	subs	r3, #20
 80126e6:	b29a      	uxth	r2, r3
 80126e8:	4b81      	ldr	r3, [pc, #516]	@ (80128f0 <tcp_input+0x294>)
 80126ea:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80126ec:	4b81      	ldr	r3, [pc, #516]	@ (80128f4 <tcp_input+0x298>)
 80126ee:	2200      	movs	r2, #0
 80126f0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	895a      	ldrh	r2, [r3, #10]
 80126f6:	7cbb      	ldrb	r3, [r7, #18]
 80126f8:	b29b      	uxth	r3, r3
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d309      	bcc.n	8012712 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80126fe:	4b7c      	ldr	r3, [pc, #496]	@ (80128f0 <tcp_input+0x294>)
 8012700:	881a      	ldrh	r2, [r3, #0]
 8012702:	4b7d      	ldr	r3, [pc, #500]	@ (80128f8 <tcp_input+0x29c>)
 8012704:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012706:	7cbb      	ldrb	r3, [r7, #18]
 8012708:	4619      	mov	r1, r3
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f7fe f8ea 	bl	80108e4 <pbuf_remove_header>
 8012710:	e04e      	b.n	80127b0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d105      	bne.n	8012726 <tcp_input+0xca>
 801271a:	4b70      	ldr	r3, [pc, #448]	@ (80128dc <tcp_input+0x280>)
 801271c:	22c2      	movs	r2, #194	@ 0xc2
 801271e:	4977      	ldr	r1, [pc, #476]	@ (80128fc <tcp_input+0x2a0>)
 8012720:	4870      	ldr	r0, [pc, #448]	@ (80128e4 <tcp_input+0x288>)
 8012722:	f006 fd69 	bl	80191f8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012726:	2114      	movs	r1, #20
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f7fe f8db 	bl	80108e4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	895a      	ldrh	r2, [r3, #10]
 8012732:	4b71      	ldr	r3, [pc, #452]	@ (80128f8 <tcp_input+0x29c>)
 8012734:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012736:	4b6e      	ldr	r3, [pc, #440]	@ (80128f0 <tcp_input+0x294>)
 8012738:	881a      	ldrh	r2, [r3, #0]
 801273a:	4b6f      	ldr	r3, [pc, #444]	@ (80128f8 <tcp_input+0x29c>)
 801273c:	881b      	ldrh	r3, [r3, #0]
 801273e:	1ad3      	subs	r3, r2, r3
 8012740:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012742:	4b6d      	ldr	r3, [pc, #436]	@ (80128f8 <tcp_input+0x29c>)
 8012744:	881b      	ldrh	r3, [r3, #0]
 8012746:	4619      	mov	r1, r3
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	f7fe f8cb 	bl	80108e4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	895b      	ldrh	r3, [r3, #10]
 8012754:	8a3a      	ldrh	r2, [r7, #16]
 8012756:	429a      	cmp	r2, r3
 8012758:	f200 836e 	bhi.w	8012e38 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	4a64      	ldr	r2, [pc, #400]	@ (80128f4 <tcp_input+0x298>)
 8012764:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	8a3a      	ldrh	r2, [r7, #16]
 801276c:	4611      	mov	r1, r2
 801276e:	4618      	mov	r0, r3
 8012770:	f7fe f8b8 	bl	80108e4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	891a      	ldrh	r2, [r3, #8]
 8012778:	8a3b      	ldrh	r3, [r7, #16]
 801277a:	1ad3      	subs	r3, r2, r3
 801277c:	b29a      	uxth	r2, r3
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	895b      	ldrh	r3, [r3, #10]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d005      	beq.n	8012796 <tcp_input+0x13a>
 801278a:	4b54      	ldr	r3, [pc, #336]	@ (80128dc <tcp_input+0x280>)
 801278c:	22df      	movs	r2, #223	@ 0xdf
 801278e:	495c      	ldr	r1, [pc, #368]	@ (8012900 <tcp_input+0x2a4>)
 8012790:	4854      	ldr	r0, [pc, #336]	@ (80128e4 <tcp_input+0x288>)
 8012792:	f006 fd31 	bl	80191f8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	891a      	ldrh	r2, [r3, #8]
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	891b      	ldrh	r3, [r3, #8]
 80127a0:	429a      	cmp	r2, r3
 80127a2:	d005      	beq.n	80127b0 <tcp_input+0x154>
 80127a4:	4b4d      	ldr	r3, [pc, #308]	@ (80128dc <tcp_input+0x280>)
 80127a6:	22e0      	movs	r2, #224	@ 0xe0
 80127a8:	4956      	ldr	r1, [pc, #344]	@ (8012904 <tcp_input+0x2a8>)
 80127aa:	484e      	ldr	r0, [pc, #312]	@ (80128e4 <tcp_input+0x288>)
 80127ac:	f006 fd24 	bl	80191f8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80127b0:	4b4d      	ldr	r3, [pc, #308]	@ (80128e8 <tcp_input+0x28c>)
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	881b      	ldrh	r3, [r3, #0]
 80127b6:	b29b      	uxth	r3, r3
 80127b8:	4a4b      	ldr	r2, [pc, #300]	@ (80128e8 <tcp_input+0x28c>)
 80127ba:	6814      	ldr	r4, [r2, #0]
 80127bc:	4618      	mov	r0, r3
 80127be:	f7fc fc6d 	bl	800f09c <lwip_htons>
 80127c2:	4603      	mov	r3, r0
 80127c4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80127c6:	4b48      	ldr	r3, [pc, #288]	@ (80128e8 <tcp_input+0x28c>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	885b      	ldrh	r3, [r3, #2]
 80127cc:	b29b      	uxth	r3, r3
 80127ce:	4a46      	ldr	r2, [pc, #280]	@ (80128e8 <tcp_input+0x28c>)
 80127d0:	6814      	ldr	r4, [r2, #0]
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7fc fc62 	bl	800f09c <lwip_htons>
 80127d8:	4603      	mov	r3, r0
 80127da:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80127dc:	4b42      	ldr	r3, [pc, #264]	@ (80128e8 <tcp_input+0x28c>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	685b      	ldr	r3, [r3, #4]
 80127e2:	4a41      	ldr	r2, [pc, #260]	@ (80128e8 <tcp_input+0x28c>)
 80127e4:	6814      	ldr	r4, [r2, #0]
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7fc fc6d 	bl	800f0c6 <lwip_htonl>
 80127ec:	4603      	mov	r3, r0
 80127ee:	6063      	str	r3, [r4, #4]
 80127f0:	6863      	ldr	r3, [r4, #4]
 80127f2:	4a45      	ldr	r2, [pc, #276]	@ (8012908 <tcp_input+0x2ac>)
 80127f4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80127f6:	4b3c      	ldr	r3, [pc, #240]	@ (80128e8 <tcp_input+0x28c>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	689b      	ldr	r3, [r3, #8]
 80127fc:	4a3a      	ldr	r2, [pc, #232]	@ (80128e8 <tcp_input+0x28c>)
 80127fe:	6814      	ldr	r4, [r2, #0]
 8012800:	4618      	mov	r0, r3
 8012802:	f7fc fc60 	bl	800f0c6 <lwip_htonl>
 8012806:	4603      	mov	r3, r0
 8012808:	60a3      	str	r3, [r4, #8]
 801280a:	68a3      	ldr	r3, [r4, #8]
 801280c:	4a3f      	ldr	r2, [pc, #252]	@ (801290c <tcp_input+0x2b0>)
 801280e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012810:	4b35      	ldr	r3, [pc, #212]	@ (80128e8 <tcp_input+0x28c>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	89db      	ldrh	r3, [r3, #14]
 8012816:	b29b      	uxth	r3, r3
 8012818:	4a33      	ldr	r2, [pc, #204]	@ (80128e8 <tcp_input+0x28c>)
 801281a:	6814      	ldr	r4, [r2, #0]
 801281c:	4618      	mov	r0, r3
 801281e:	f7fc fc3d 	bl	800f09c <lwip_htons>
 8012822:	4603      	mov	r3, r0
 8012824:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012826:	4b30      	ldr	r3, [pc, #192]	@ (80128e8 <tcp_input+0x28c>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	899b      	ldrh	r3, [r3, #12]
 801282c:	b29b      	uxth	r3, r3
 801282e:	4618      	mov	r0, r3
 8012830:	f7fc fc34 	bl	800f09c <lwip_htons>
 8012834:	4603      	mov	r3, r0
 8012836:	b2db      	uxtb	r3, r3
 8012838:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801283c:	b2da      	uxtb	r2, r3
 801283e:	4b34      	ldr	r3, [pc, #208]	@ (8012910 <tcp_input+0x2b4>)
 8012840:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	891a      	ldrh	r2, [r3, #8]
 8012846:	4b33      	ldr	r3, [pc, #204]	@ (8012914 <tcp_input+0x2b8>)
 8012848:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801284a:	4b31      	ldr	r3, [pc, #196]	@ (8012910 <tcp_input+0x2b4>)
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	f003 0303 	and.w	r3, r3, #3
 8012852:	2b00      	cmp	r3, #0
 8012854:	d00c      	beq.n	8012870 <tcp_input+0x214>
    tcplen++;
 8012856:	4b2f      	ldr	r3, [pc, #188]	@ (8012914 <tcp_input+0x2b8>)
 8012858:	881b      	ldrh	r3, [r3, #0]
 801285a:	3301      	adds	r3, #1
 801285c:	b29a      	uxth	r2, r3
 801285e:	4b2d      	ldr	r3, [pc, #180]	@ (8012914 <tcp_input+0x2b8>)
 8012860:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	891a      	ldrh	r2, [r3, #8]
 8012866:	4b2b      	ldr	r3, [pc, #172]	@ (8012914 <tcp_input+0x2b8>)
 8012868:	881b      	ldrh	r3, [r3, #0]
 801286a:	429a      	cmp	r2, r3
 801286c:	f200 82e6 	bhi.w	8012e3c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012870:	2300      	movs	r3, #0
 8012872:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012874:	4b28      	ldr	r3, [pc, #160]	@ (8012918 <tcp_input+0x2bc>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	61fb      	str	r3, [r7, #28]
 801287a:	e09d      	b.n	80129b8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801287c:	69fb      	ldr	r3, [r7, #28]
 801287e:	7d1b      	ldrb	r3, [r3, #20]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d105      	bne.n	8012890 <tcp_input+0x234>
 8012884:	4b15      	ldr	r3, [pc, #84]	@ (80128dc <tcp_input+0x280>)
 8012886:	22fb      	movs	r2, #251	@ 0xfb
 8012888:	4924      	ldr	r1, [pc, #144]	@ (801291c <tcp_input+0x2c0>)
 801288a:	4816      	ldr	r0, [pc, #88]	@ (80128e4 <tcp_input+0x288>)
 801288c:	f006 fcb4 	bl	80191f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012890:	69fb      	ldr	r3, [r7, #28]
 8012892:	7d1b      	ldrb	r3, [r3, #20]
 8012894:	2b0a      	cmp	r3, #10
 8012896:	d105      	bne.n	80128a4 <tcp_input+0x248>
 8012898:	4b10      	ldr	r3, [pc, #64]	@ (80128dc <tcp_input+0x280>)
 801289a:	22fc      	movs	r2, #252	@ 0xfc
 801289c:	4920      	ldr	r1, [pc, #128]	@ (8012920 <tcp_input+0x2c4>)
 801289e:	4811      	ldr	r0, [pc, #68]	@ (80128e4 <tcp_input+0x288>)
 80128a0:	f006 fcaa 	bl	80191f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80128a4:	69fb      	ldr	r3, [r7, #28]
 80128a6:	7d1b      	ldrb	r3, [r3, #20]
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	d105      	bne.n	80128b8 <tcp_input+0x25c>
 80128ac:	4b0b      	ldr	r3, [pc, #44]	@ (80128dc <tcp_input+0x280>)
 80128ae:	22fd      	movs	r2, #253	@ 0xfd
 80128b0:	491c      	ldr	r1, [pc, #112]	@ (8012924 <tcp_input+0x2c8>)
 80128b2:	480c      	ldr	r0, [pc, #48]	@ (80128e4 <tcp_input+0x288>)
 80128b4:	f006 fca0 	bl	80191f8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80128b8:	69fb      	ldr	r3, [r7, #28]
 80128ba:	7a1b      	ldrb	r3, [r3, #8]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d033      	beq.n	8012928 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80128c0:	69fb      	ldr	r3, [r7, #28]
 80128c2:	7a1a      	ldrb	r2, [r3, #8]
 80128c4:	4b09      	ldr	r3, [pc, #36]	@ (80128ec <tcp_input+0x290>)
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80128cc:	3301      	adds	r3, #1
 80128ce:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d029      	beq.n	8012928 <tcp_input+0x2cc>
      prev = pcb;
 80128d4:	69fb      	ldr	r3, [r7, #28]
 80128d6:	61bb      	str	r3, [r7, #24]
      continue;
 80128d8:	e06b      	b.n	80129b2 <tcp_input+0x356>
 80128da:	bf00      	nop
 80128dc:	0801b3a4 	.word	0x0801b3a4
 80128e0:	0801b3d8 	.word	0x0801b3d8
 80128e4:	0801b3f0 	.word	0x0801b3f0
 80128e8:	20060bb4 	.word	0x20060bb4
 80128ec:	2005da8c 	.word	0x2005da8c
 80128f0:	20060bb8 	.word	0x20060bb8
 80128f4:	20060bbc 	.word	0x20060bbc
 80128f8:	20060bba 	.word	0x20060bba
 80128fc:	0801b418 	.word	0x0801b418
 8012900:	0801b428 	.word	0x0801b428
 8012904:	0801b434 	.word	0x0801b434
 8012908:	20060bc4 	.word	0x20060bc4
 801290c:	20060bc8 	.word	0x20060bc8
 8012910:	20060bd0 	.word	0x20060bd0
 8012914:	20060bce 	.word	0x20060bce
 8012918:	20060b98 	.word	0x20060b98
 801291c:	0801b454 	.word	0x0801b454
 8012920:	0801b47c 	.word	0x0801b47c
 8012924:	0801b4a8 	.word	0x0801b4a8
    }

    if (pcb->remote_port == tcphdr->src &&
 8012928:	69fb      	ldr	r3, [r7, #28]
 801292a:	8b1a      	ldrh	r2, [r3, #24]
 801292c:	4b72      	ldr	r3, [pc, #456]	@ (8012af8 <tcp_input+0x49c>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	881b      	ldrh	r3, [r3, #0]
 8012932:	b29b      	uxth	r3, r3
 8012934:	429a      	cmp	r2, r3
 8012936:	d13a      	bne.n	80129ae <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012938:	69fb      	ldr	r3, [r7, #28]
 801293a:	8ada      	ldrh	r2, [r3, #22]
 801293c:	4b6e      	ldr	r3, [pc, #440]	@ (8012af8 <tcp_input+0x49c>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	885b      	ldrh	r3, [r3, #2]
 8012942:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012944:	429a      	cmp	r2, r3
 8012946:	d132      	bne.n	80129ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012948:	69fb      	ldr	r3, [r7, #28]
 801294a:	685a      	ldr	r2, [r3, #4]
 801294c:	4b6b      	ldr	r3, [pc, #428]	@ (8012afc <tcp_input+0x4a0>)
 801294e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012950:	429a      	cmp	r2, r3
 8012952:	d12c      	bne.n	80129ae <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012954:	69fb      	ldr	r3, [r7, #28]
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	4b68      	ldr	r3, [pc, #416]	@ (8012afc <tcp_input+0x4a0>)
 801295a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801295c:	429a      	cmp	r2, r3
 801295e:	d126      	bne.n	80129ae <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012960:	69fb      	ldr	r3, [r7, #28]
 8012962:	68db      	ldr	r3, [r3, #12]
 8012964:	69fa      	ldr	r2, [r7, #28]
 8012966:	429a      	cmp	r2, r3
 8012968:	d106      	bne.n	8012978 <tcp_input+0x31c>
 801296a:	4b65      	ldr	r3, [pc, #404]	@ (8012b00 <tcp_input+0x4a4>)
 801296c:	f240 120d 	movw	r2, #269	@ 0x10d
 8012970:	4964      	ldr	r1, [pc, #400]	@ (8012b04 <tcp_input+0x4a8>)
 8012972:	4865      	ldr	r0, [pc, #404]	@ (8012b08 <tcp_input+0x4ac>)
 8012974:	f006 fc40 	bl	80191f8 <iprintf>
      if (prev != NULL) {
 8012978:	69bb      	ldr	r3, [r7, #24]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d00a      	beq.n	8012994 <tcp_input+0x338>
        prev->next = pcb->next;
 801297e:	69fb      	ldr	r3, [r7, #28]
 8012980:	68da      	ldr	r2, [r3, #12]
 8012982:	69bb      	ldr	r3, [r7, #24]
 8012984:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012986:	4b61      	ldr	r3, [pc, #388]	@ (8012b0c <tcp_input+0x4b0>)
 8012988:	681a      	ldr	r2, [r3, #0]
 801298a:	69fb      	ldr	r3, [r7, #28]
 801298c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801298e:	4a5f      	ldr	r2, [pc, #380]	@ (8012b0c <tcp_input+0x4b0>)
 8012990:	69fb      	ldr	r3, [r7, #28]
 8012992:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	68db      	ldr	r3, [r3, #12]
 8012998:	69fa      	ldr	r2, [r7, #28]
 801299a:	429a      	cmp	r2, r3
 801299c:	d111      	bne.n	80129c2 <tcp_input+0x366>
 801299e:	4b58      	ldr	r3, [pc, #352]	@ (8012b00 <tcp_input+0x4a4>)
 80129a0:	f240 1215 	movw	r2, #277	@ 0x115
 80129a4:	495a      	ldr	r1, [pc, #360]	@ (8012b10 <tcp_input+0x4b4>)
 80129a6:	4858      	ldr	r0, [pc, #352]	@ (8012b08 <tcp_input+0x4ac>)
 80129a8:	f006 fc26 	bl	80191f8 <iprintf>
      break;
 80129ac:	e009      	b.n	80129c2 <tcp_input+0x366>
    }
    prev = pcb;
 80129ae:	69fb      	ldr	r3, [r7, #28]
 80129b0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80129b2:	69fb      	ldr	r3, [r7, #28]
 80129b4:	68db      	ldr	r3, [r3, #12]
 80129b6:	61fb      	str	r3, [r7, #28]
 80129b8:	69fb      	ldr	r3, [r7, #28]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	f47f af5e 	bne.w	801287c <tcp_input+0x220>
 80129c0:	e000      	b.n	80129c4 <tcp_input+0x368>
      break;
 80129c2:	bf00      	nop
  }

  if (pcb == NULL) {
 80129c4:	69fb      	ldr	r3, [r7, #28]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	f040 80aa 	bne.w	8012b20 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80129cc:	4b51      	ldr	r3, [pc, #324]	@ (8012b14 <tcp_input+0x4b8>)
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	61fb      	str	r3, [r7, #28]
 80129d2:	e03f      	b.n	8012a54 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80129d4:	69fb      	ldr	r3, [r7, #28]
 80129d6:	7d1b      	ldrb	r3, [r3, #20]
 80129d8:	2b0a      	cmp	r3, #10
 80129da:	d006      	beq.n	80129ea <tcp_input+0x38e>
 80129dc:	4b48      	ldr	r3, [pc, #288]	@ (8012b00 <tcp_input+0x4a4>)
 80129de:	f240 121f 	movw	r2, #287	@ 0x11f
 80129e2:	494d      	ldr	r1, [pc, #308]	@ (8012b18 <tcp_input+0x4bc>)
 80129e4:	4848      	ldr	r0, [pc, #288]	@ (8012b08 <tcp_input+0x4ac>)
 80129e6:	f006 fc07 	bl	80191f8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80129ea:	69fb      	ldr	r3, [r7, #28]
 80129ec:	7a1b      	ldrb	r3, [r3, #8]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d009      	beq.n	8012a06 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80129f2:	69fb      	ldr	r3, [r7, #28]
 80129f4:	7a1a      	ldrb	r2, [r3, #8]
 80129f6:	4b41      	ldr	r3, [pc, #260]	@ (8012afc <tcp_input+0x4a0>)
 80129f8:	685b      	ldr	r3, [r3, #4]
 80129fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80129fe:	3301      	adds	r3, #1
 8012a00:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d122      	bne.n	8012a4c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012a06:	69fb      	ldr	r3, [r7, #28]
 8012a08:	8b1a      	ldrh	r2, [r3, #24]
 8012a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8012af8 <tcp_input+0x49c>)
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	881b      	ldrh	r3, [r3, #0]
 8012a10:	b29b      	uxth	r3, r3
 8012a12:	429a      	cmp	r2, r3
 8012a14:	d11b      	bne.n	8012a4e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012a16:	69fb      	ldr	r3, [r7, #28]
 8012a18:	8ada      	ldrh	r2, [r3, #22]
 8012a1a:	4b37      	ldr	r3, [pc, #220]	@ (8012af8 <tcp_input+0x49c>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	885b      	ldrh	r3, [r3, #2]
 8012a20:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d113      	bne.n	8012a4e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012a26:	69fb      	ldr	r3, [r7, #28]
 8012a28:	685a      	ldr	r2, [r3, #4]
 8012a2a:	4b34      	ldr	r3, [pc, #208]	@ (8012afc <tcp_input+0x4a0>)
 8012a2c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d10d      	bne.n	8012a4e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012a32:	69fb      	ldr	r3, [r7, #28]
 8012a34:	681a      	ldr	r2, [r3, #0]
 8012a36:	4b31      	ldr	r3, [pc, #196]	@ (8012afc <tcp_input+0x4a0>)
 8012a38:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	d107      	bne.n	8012a4e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012a3e:	69f8      	ldr	r0, [r7, #28]
 8012a40:	f000 fb56 	bl	80130f0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f7fd ffd3 	bl	80109f0 <pbuf_free>
        return;
 8012a4a:	e1fd      	b.n	8012e48 <tcp_input+0x7ec>
        continue;
 8012a4c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a4e:	69fb      	ldr	r3, [r7, #28]
 8012a50:	68db      	ldr	r3, [r3, #12]
 8012a52:	61fb      	str	r3, [r7, #28]
 8012a54:	69fb      	ldr	r3, [r7, #28]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d1bc      	bne.n	80129d4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8012b1c <tcp_input+0x4c0>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	617b      	str	r3, [r7, #20]
 8012a64:	e02a      	b.n	8012abc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	7a1b      	ldrb	r3, [r3, #8]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d00c      	beq.n	8012a88 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	7a1a      	ldrb	r2, [r3, #8]
 8012a72:	4b22      	ldr	r3, [pc, #136]	@ (8012afc <tcp_input+0x4a0>)
 8012a74:	685b      	ldr	r3, [r3, #4]
 8012a76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012a7a:	3301      	adds	r3, #1
 8012a7c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d002      	beq.n	8012a88 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	61bb      	str	r3, [r7, #24]
        continue;
 8012a86:	e016      	b.n	8012ab6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	8ada      	ldrh	r2, [r3, #22]
 8012a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8012af8 <tcp_input+0x49c>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	885b      	ldrh	r3, [r3, #2]
 8012a92:	b29b      	uxth	r3, r3
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d10c      	bne.n	8012ab2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	681a      	ldr	r2, [r3, #0]
 8012a9c:	4b17      	ldr	r3, [pc, #92]	@ (8012afc <tcp_input+0x4a0>)
 8012a9e:	695b      	ldr	r3, [r3, #20]
 8012aa0:	429a      	cmp	r2, r3
 8012aa2:	d00f      	beq.n	8012ac4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d00d      	beq.n	8012ac6 <tcp_input+0x46a>
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d009      	beq.n	8012ac6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012ab6:	697b      	ldr	r3, [r7, #20]
 8012ab8:	68db      	ldr	r3, [r3, #12]
 8012aba:	617b      	str	r3, [r7, #20]
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d1d1      	bne.n	8012a66 <tcp_input+0x40a>
 8012ac2:	e000      	b.n	8012ac6 <tcp_input+0x46a>
            break;
 8012ac4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d029      	beq.n	8012b20 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012acc:	69bb      	ldr	r3, [r7, #24]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d00a      	beq.n	8012ae8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	68da      	ldr	r2, [r3, #12]
 8012ad6:	69bb      	ldr	r3, [r7, #24]
 8012ad8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012ada:	4b10      	ldr	r3, [pc, #64]	@ (8012b1c <tcp_input+0x4c0>)
 8012adc:	681a      	ldr	r2, [r3, #0]
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8012b1c <tcp_input+0x4c0>)
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012ae8:	6978      	ldr	r0, [r7, #20]
 8012aea:	f000 fa03 	bl	8012ef4 <tcp_listen_input>
      }
      pbuf_free(p);
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f7fd ff7e 	bl	80109f0 <pbuf_free>
      return;
 8012af4:	e1a8      	b.n	8012e48 <tcp_input+0x7ec>
 8012af6:	bf00      	nop
 8012af8:	20060bb4 	.word	0x20060bb4
 8012afc:	2005da8c 	.word	0x2005da8c
 8012b00:	0801b3a4 	.word	0x0801b3a4
 8012b04:	0801b4d0 	.word	0x0801b4d0
 8012b08:	0801b3f0 	.word	0x0801b3f0
 8012b0c:	20060b98 	.word	0x20060b98
 8012b10:	0801b4fc 	.word	0x0801b4fc
 8012b14:	20060b9c 	.word	0x20060b9c
 8012b18:	0801b528 	.word	0x0801b528
 8012b1c:	20060b94 	.word	0x20060b94
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012b20:	69fb      	ldr	r3, [r7, #28]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	f000 8158 	beq.w	8012dd8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012b28:	4b95      	ldr	r3, [pc, #596]	@ (8012d80 <tcp_input+0x724>)
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	891a      	ldrh	r2, [r3, #8]
 8012b32:	4b93      	ldr	r3, [pc, #588]	@ (8012d80 <tcp_input+0x724>)
 8012b34:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012b36:	4a92      	ldr	r2, [pc, #584]	@ (8012d80 <tcp_input+0x724>)
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012b3c:	4b91      	ldr	r3, [pc, #580]	@ (8012d84 <tcp_input+0x728>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	4a8f      	ldr	r2, [pc, #572]	@ (8012d80 <tcp_input+0x724>)
 8012b42:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012b44:	4b90      	ldr	r3, [pc, #576]	@ (8012d88 <tcp_input+0x72c>)
 8012b46:	2200      	movs	r2, #0
 8012b48:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012b4a:	4b90      	ldr	r3, [pc, #576]	@ (8012d8c <tcp_input+0x730>)
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012b50:	4b8f      	ldr	r3, [pc, #572]	@ (8012d90 <tcp_input+0x734>)
 8012b52:	2200      	movs	r2, #0
 8012b54:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012b56:	4b8f      	ldr	r3, [pc, #572]	@ (8012d94 <tcp_input+0x738>)
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	f003 0308 	and.w	r3, r3, #8
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d006      	beq.n	8012b70 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	7b5b      	ldrb	r3, [r3, #13]
 8012b66:	f043 0301 	orr.w	r3, r3, #1
 8012b6a:	b2da      	uxtb	r2, r3
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012b70:	69fb      	ldr	r3, [r7, #28]
 8012b72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d017      	beq.n	8012ba8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012b78:	69f8      	ldr	r0, [r7, #28]
 8012b7a:	f7ff f929 	bl	8011dd0 <tcp_process_refused_data>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	f113 0f0d 	cmn.w	r3, #13
 8012b84:	d007      	beq.n	8012b96 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012b86:	69fb      	ldr	r3, [r7, #28]
 8012b88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d00c      	beq.n	8012ba8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012b8e:	4b82      	ldr	r3, [pc, #520]	@ (8012d98 <tcp_input+0x73c>)
 8012b90:	881b      	ldrh	r3, [r3, #0]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d008      	beq.n	8012ba8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	f040 80e3 	bne.w	8012d66 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012ba0:	69f8      	ldr	r0, [r7, #28]
 8012ba2:	f003 f9a7 	bl	8015ef4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012ba6:	e0de      	b.n	8012d66 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8012ba8:	4a7c      	ldr	r2, [pc, #496]	@ (8012d9c <tcp_input+0x740>)
 8012baa:	69fb      	ldr	r3, [r7, #28]
 8012bac:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012bae:	69f8      	ldr	r0, [r7, #28]
 8012bb0:	f000 fb18 	bl	80131e4 <tcp_process>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012bb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012bbc:	f113 0f0d 	cmn.w	r3, #13
 8012bc0:	f000 80d3 	beq.w	8012d6a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8012bc4:	4b71      	ldr	r3, [pc, #452]	@ (8012d8c <tcp_input+0x730>)
 8012bc6:	781b      	ldrb	r3, [r3, #0]
 8012bc8:	f003 0308 	and.w	r3, r3, #8
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d015      	beq.n	8012bfc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012bd0:	69fb      	ldr	r3, [r7, #28]
 8012bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d008      	beq.n	8012bec <tcp_input+0x590>
 8012bda:	69fb      	ldr	r3, [r7, #28]
 8012bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012be0:	69fa      	ldr	r2, [r7, #28]
 8012be2:	6912      	ldr	r2, [r2, #16]
 8012be4:	f06f 010d 	mvn.w	r1, #13
 8012be8:	4610      	mov	r0, r2
 8012bea:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012bec:	69f9      	ldr	r1, [r7, #28]
 8012bee:	486c      	ldr	r0, [pc, #432]	@ (8012da0 <tcp_input+0x744>)
 8012bf0:	f7ff fbbc 	bl	801236c <tcp_pcb_remove>
        tcp_free(pcb);
 8012bf4:	69f8      	ldr	r0, [r7, #28]
 8012bf6:	f7fe f9a7 	bl	8010f48 <tcp_free>
 8012bfa:	e0da      	b.n	8012db2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012c00:	4b63      	ldr	r3, [pc, #396]	@ (8012d90 <tcp_input+0x734>)
 8012c02:	881b      	ldrh	r3, [r3, #0]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d01d      	beq.n	8012c44 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012c08:	4b61      	ldr	r3, [pc, #388]	@ (8012d90 <tcp_input+0x734>)
 8012c0a:	881b      	ldrh	r3, [r3, #0]
 8012c0c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012c0e:	69fb      	ldr	r3, [r7, #28]
 8012c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d00a      	beq.n	8012c2e <tcp_input+0x5d2>
 8012c18:	69fb      	ldr	r3, [r7, #28]
 8012c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012c1e:	69fa      	ldr	r2, [r7, #28]
 8012c20:	6910      	ldr	r0, [r2, #16]
 8012c22:	89fa      	ldrh	r2, [r7, #14]
 8012c24:	69f9      	ldr	r1, [r7, #28]
 8012c26:	4798      	blx	r3
 8012c28:	4603      	mov	r3, r0
 8012c2a:	74fb      	strb	r3, [r7, #19]
 8012c2c:	e001      	b.n	8012c32 <tcp_input+0x5d6>
 8012c2e:	2300      	movs	r3, #0
 8012c30:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012c32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c36:	f113 0f0d 	cmn.w	r3, #13
 8012c3a:	f000 8098 	beq.w	8012d6e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012c3e:	4b54      	ldr	r3, [pc, #336]	@ (8012d90 <tcp_input+0x734>)
 8012c40:	2200      	movs	r2, #0
 8012c42:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012c44:	69f8      	ldr	r0, [r7, #28]
 8012c46:	f000 f915 	bl	8012e74 <tcp_input_delayed_close>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	f040 8090 	bne.w	8012d72 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012c52:	4b4d      	ldr	r3, [pc, #308]	@ (8012d88 <tcp_input+0x72c>)
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d041      	beq.n	8012cde <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012c5a:	69fb      	ldr	r3, [r7, #28]
 8012c5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d006      	beq.n	8012c70 <tcp_input+0x614>
 8012c62:	4b50      	ldr	r3, [pc, #320]	@ (8012da4 <tcp_input+0x748>)
 8012c64:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8012c68:	494f      	ldr	r1, [pc, #316]	@ (8012da8 <tcp_input+0x74c>)
 8012c6a:	4850      	ldr	r0, [pc, #320]	@ (8012dac <tcp_input+0x750>)
 8012c6c:	f006 fac4 	bl	80191f8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012c70:	69fb      	ldr	r3, [r7, #28]
 8012c72:	8b5b      	ldrh	r3, [r3, #26]
 8012c74:	f003 0310 	and.w	r3, r3, #16
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d008      	beq.n	8012c8e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012c7c:	4b42      	ldr	r3, [pc, #264]	@ (8012d88 <tcp_input+0x72c>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7fd feb5 	bl	80109f0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012c86:	69f8      	ldr	r0, [r7, #28]
 8012c88:	f7fe fc46 	bl	8011518 <tcp_abort>
            goto aborted;
 8012c8c:	e091      	b.n	8012db2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012c8e:	69fb      	ldr	r3, [r7, #28]
 8012c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d00c      	beq.n	8012cb2 <tcp_input+0x656>
 8012c98:	69fb      	ldr	r3, [r7, #28]
 8012c9a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012c9e:	69fb      	ldr	r3, [r7, #28]
 8012ca0:	6918      	ldr	r0, [r3, #16]
 8012ca2:	4b39      	ldr	r3, [pc, #228]	@ (8012d88 <tcp_input+0x72c>)
 8012ca4:	681a      	ldr	r2, [r3, #0]
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	69f9      	ldr	r1, [r7, #28]
 8012caa:	47a0      	blx	r4
 8012cac:	4603      	mov	r3, r0
 8012cae:	74fb      	strb	r3, [r7, #19]
 8012cb0:	e008      	b.n	8012cc4 <tcp_input+0x668>
 8012cb2:	4b35      	ldr	r3, [pc, #212]	@ (8012d88 <tcp_input+0x72c>)
 8012cb4:	681a      	ldr	r2, [r3, #0]
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	69f9      	ldr	r1, [r7, #28]
 8012cba:	2000      	movs	r0, #0
 8012cbc:	f7ff f95e 	bl	8011f7c <tcp_recv_null>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012cc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012cc8:	f113 0f0d 	cmn.w	r3, #13
 8012ccc:	d053      	beq.n	8012d76 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012cce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d003      	beq.n	8012cde <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8012d88 <tcp_input+0x72c>)
 8012cd8:	681a      	ldr	r2, [r3, #0]
 8012cda:	69fb      	ldr	r3, [r7, #28]
 8012cdc:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012cde:	4b2b      	ldr	r3, [pc, #172]	@ (8012d8c <tcp_input+0x730>)
 8012ce0:	781b      	ldrb	r3, [r3, #0]
 8012ce2:	f003 0320 	and.w	r3, r3, #32
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d030      	beq.n	8012d4c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8012cea:	69fb      	ldr	r3, [r7, #28]
 8012cec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d009      	beq.n	8012d06 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012cf2:	69fb      	ldr	r3, [r7, #28]
 8012cf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012cf6:	7b5a      	ldrb	r2, [r3, #13]
 8012cf8:	69fb      	ldr	r3, [r7, #28]
 8012cfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012cfc:	f042 0220 	orr.w	r2, r2, #32
 8012d00:	b2d2      	uxtb	r2, r2
 8012d02:	735a      	strb	r2, [r3, #13]
 8012d04:	e022      	b.n	8012d4c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012d06:	69fb      	ldr	r3, [r7, #28]
 8012d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d0a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012d0e:	d005      	beq.n	8012d1c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8012d10:	69fb      	ldr	r3, [r7, #28]
 8012d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d14:	3301      	adds	r3, #1
 8012d16:	b29a      	uxth	r2, r3
 8012d18:	69fb      	ldr	r3, [r7, #28]
 8012d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012d1c:	69fb      	ldr	r3, [r7, #28]
 8012d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d00b      	beq.n	8012d3e <tcp_input+0x6e2>
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012d2c:	69fb      	ldr	r3, [r7, #28]
 8012d2e:	6918      	ldr	r0, [r3, #16]
 8012d30:	2300      	movs	r3, #0
 8012d32:	2200      	movs	r2, #0
 8012d34:	69f9      	ldr	r1, [r7, #28]
 8012d36:	47a0      	blx	r4
 8012d38:	4603      	mov	r3, r0
 8012d3a:	74fb      	strb	r3, [r7, #19]
 8012d3c:	e001      	b.n	8012d42 <tcp_input+0x6e6>
 8012d3e:	2300      	movs	r3, #0
 8012d40:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012d42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012d46:	f113 0f0d 	cmn.w	r3, #13
 8012d4a:	d016      	beq.n	8012d7a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012d4c:	4b13      	ldr	r3, [pc, #76]	@ (8012d9c <tcp_input+0x740>)
 8012d4e:	2200      	movs	r2, #0
 8012d50:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012d52:	69f8      	ldr	r0, [r7, #28]
 8012d54:	f000 f88e 	bl	8012e74 <tcp_input_delayed_close>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d128      	bne.n	8012db0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012d5e:	69f8      	ldr	r0, [r7, #28]
 8012d60:	f002 fac2 	bl	80152e8 <tcp_output>
 8012d64:	e025      	b.n	8012db2 <tcp_input+0x756>
        goto aborted;
 8012d66:	bf00      	nop
 8012d68:	e023      	b.n	8012db2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012d6a:	bf00      	nop
 8012d6c:	e021      	b.n	8012db2 <tcp_input+0x756>
              goto aborted;
 8012d6e:	bf00      	nop
 8012d70:	e01f      	b.n	8012db2 <tcp_input+0x756>
          goto aborted;
 8012d72:	bf00      	nop
 8012d74:	e01d      	b.n	8012db2 <tcp_input+0x756>
            goto aborted;
 8012d76:	bf00      	nop
 8012d78:	e01b      	b.n	8012db2 <tcp_input+0x756>
              goto aborted;
 8012d7a:	bf00      	nop
 8012d7c:	e019      	b.n	8012db2 <tcp_input+0x756>
 8012d7e:	bf00      	nop
 8012d80:	20060ba4 	.word	0x20060ba4
 8012d84:	20060bb4 	.word	0x20060bb4
 8012d88:	20060bd4 	.word	0x20060bd4
 8012d8c:	20060bd1 	.word	0x20060bd1
 8012d90:	20060bcc 	.word	0x20060bcc
 8012d94:	20060bd0 	.word	0x20060bd0
 8012d98:	20060bce 	.word	0x20060bce
 8012d9c:	20060bd8 	.word	0x20060bd8
 8012da0:	20060b98 	.word	0x20060b98
 8012da4:	0801b3a4 	.word	0x0801b3a4
 8012da8:	0801b558 	.word	0x0801b558
 8012dac:	0801b3f0 	.word	0x0801b3f0
          goto aborted;
 8012db0:	bf00      	nop
    tcp_input_pcb = NULL;
 8012db2:	4b27      	ldr	r3, [pc, #156]	@ (8012e50 <tcp_input+0x7f4>)
 8012db4:	2200      	movs	r2, #0
 8012db6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012db8:	4b26      	ldr	r3, [pc, #152]	@ (8012e54 <tcp_input+0x7f8>)
 8012dba:	2200      	movs	r2, #0
 8012dbc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012dbe:	4b26      	ldr	r3, [pc, #152]	@ (8012e58 <tcp_input+0x7fc>)
 8012dc0:	685b      	ldr	r3, [r3, #4]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d03f      	beq.n	8012e46 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8012dc6:	4b24      	ldr	r3, [pc, #144]	@ (8012e58 <tcp_input+0x7fc>)
 8012dc8:	685b      	ldr	r3, [r3, #4]
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f7fd fe10 	bl	80109f0 <pbuf_free>
      inseg.p = NULL;
 8012dd0:	4b21      	ldr	r3, [pc, #132]	@ (8012e58 <tcp_input+0x7fc>)
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012dd6:	e036      	b.n	8012e46 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012dd8:	4b20      	ldr	r3, [pc, #128]	@ (8012e5c <tcp_input+0x800>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	899b      	ldrh	r3, [r3, #12]
 8012dde:	b29b      	uxth	r3, r3
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7fc f95b 	bl	800f09c <lwip_htons>
 8012de6:	4603      	mov	r3, r0
 8012de8:	b2db      	uxtb	r3, r3
 8012dea:	f003 0304 	and.w	r3, r3, #4
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d118      	bne.n	8012e24 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012df2:	4b1b      	ldr	r3, [pc, #108]	@ (8012e60 <tcp_input+0x804>)
 8012df4:	6819      	ldr	r1, [r3, #0]
 8012df6:	4b1b      	ldr	r3, [pc, #108]	@ (8012e64 <tcp_input+0x808>)
 8012df8:	881b      	ldrh	r3, [r3, #0]
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8012e68 <tcp_input+0x80c>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e02:	4b16      	ldr	r3, [pc, #88]	@ (8012e5c <tcp_input+0x800>)
 8012e04:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e06:	885b      	ldrh	r3, [r3, #2]
 8012e08:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e0a:	4a14      	ldr	r2, [pc, #80]	@ (8012e5c <tcp_input+0x800>)
 8012e0c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e0e:	8812      	ldrh	r2, [r2, #0]
 8012e10:	b292      	uxth	r2, r2
 8012e12:	9202      	str	r2, [sp, #8]
 8012e14:	9301      	str	r3, [sp, #4]
 8012e16:	4b15      	ldr	r3, [pc, #84]	@ (8012e6c <tcp_input+0x810>)
 8012e18:	9300      	str	r3, [sp, #0]
 8012e1a:	4b15      	ldr	r3, [pc, #84]	@ (8012e70 <tcp_input+0x814>)
 8012e1c:	4602      	mov	r2, r0
 8012e1e:	2000      	movs	r0, #0
 8012e20:	f003 f816 	bl	8015e50 <tcp_rst>
    pbuf_free(p);
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f7fd fde3 	bl	80109f0 <pbuf_free>
  return;
 8012e2a:	e00c      	b.n	8012e46 <tcp_input+0x7ea>
    goto dropped;
 8012e2c:	bf00      	nop
 8012e2e:	e006      	b.n	8012e3e <tcp_input+0x7e2>
    goto dropped;
 8012e30:	bf00      	nop
 8012e32:	e004      	b.n	8012e3e <tcp_input+0x7e2>
    goto dropped;
 8012e34:	bf00      	nop
 8012e36:	e002      	b.n	8012e3e <tcp_input+0x7e2>
      goto dropped;
 8012e38:	bf00      	nop
 8012e3a:	e000      	b.n	8012e3e <tcp_input+0x7e2>
      goto dropped;
 8012e3c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012e3e:	6878      	ldr	r0, [r7, #4]
 8012e40:	f7fd fdd6 	bl	80109f0 <pbuf_free>
 8012e44:	e000      	b.n	8012e48 <tcp_input+0x7ec>
  return;
 8012e46:	bf00      	nop
}
 8012e48:	3724      	adds	r7, #36	@ 0x24
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd90      	pop	{r4, r7, pc}
 8012e4e:	bf00      	nop
 8012e50:	20060bd8 	.word	0x20060bd8
 8012e54:	20060bd4 	.word	0x20060bd4
 8012e58:	20060ba4 	.word	0x20060ba4
 8012e5c:	20060bb4 	.word	0x20060bb4
 8012e60:	20060bc8 	.word	0x20060bc8
 8012e64:	20060bce 	.word	0x20060bce
 8012e68:	20060bc4 	.word	0x20060bc4
 8012e6c:	2005da9c 	.word	0x2005da9c
 8012e70:	2005daa0 	.word	0x2005daa0

08012e74 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b082      	sub	sp, #8
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d106      	bne.n	8012e90 <tcp_input_delayed_close+0x1c>
 8012e82:	4b17      	ldr	r3, [pc, #92]	@ (8012ee0 <tcp_input_delayed_close+0x6c>)
 8012e84:	f240 225a 	movw	r2, #602	@ 0x25a
 8012e88:	4916      	ldr	r1, [pc, #88]	@ (8012ee4 <tcp_input_delayed_close+0x70>)
 8012e8a:	4817      	ldr	r0, [pc, #92]	@ (8012ee8 <tcp_input_delayed_close+0x74>)
 8012e8c:	f006 f9b4 	bl	80191f8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012e90:	4b16      	ldr	r3, [pc, #88]	@ (8012eec <tcp_input_delayed_close+0x78>)
 8012e92:	781b      	ldrb	r3, [r3, #0]
 8012e94:	f003 0310 	and.w	r3, r3, #16
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d01c      	beq.n	8012ed6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	8b5b      	ldrh	r3, [r3, #26]
 8012ea0:	f003 0310 	and.w	r3, r3, #16
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d10d      	bne.n	8012ec4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d008      	beq.n	8012ec4 <tcp_input_delayed_close+0x50>
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012eb8:	687a      	ldr	r2, [r7, #4]
 8012eba:	6912      	ldr	r2, [r2, #16]
 8012ebc:	f06f 010e 	mvn.w	r1, #14
 8012ec0:	4610      	mov	r0, r2
 8012ec2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012ec4:	6879      	ldr	r1, [r7, #4]
 8012ec6:	480a      	ldr	r0, [pc, #40]	@ (8012ef0 <tcp_input_delayed_close+0x7c>)
 8012ec8:	f7ff fa50 	bl	801236c <tcp_pcb_remove>
    tcp_free(pcb);
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f7fe f83b 	bl	8010f48 <tcp_free>
    return 1;
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	e000      	b.n	8012ed8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012ed6:	2300      	movs	r3, #0
}
 8012ed8:	4618      	mov	r0, r3
 8012eda:	3708      	adds	r7, #8
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd80      	pop	{r7, pc}
 8012ee0:	0801b3a4 	.word	0x0801b3a4
 8012ee4:	0801b574 	.word	0x0801b574
 8012ee8:	0801b3f0 	.word	0x0801b3f0
 8012eec:	20060bd1 	.word	0x20060bd1
 8012ef0:	20060b98 	.word	0x20060b98

08012ef4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012ef4:	b590      	push	{r4, r7, lr}
 8012ef6:	b08b      	sub	sp, #44	@ 0x2c
 8012ef8:	af04      	add	r7, sp, #16
 8012efa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012efc:	4b6f      	ldr	r3, [pc, #444]	@ (80130bc <tcp_listen_input+0x1c8>)
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	f003 0304 	and.w	r3, r3, #4
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	f040 80d2 	bne.w	80130ae <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d106      	bne.n	8012f1e <tcp_listen_input+0x2a>
 8012f10:	4b6b      	ldr	r3, [pc, #428]	@ (80130c0 <tcp_listen_input+0x1cc>)
 8012f12:	f240 2281 	movw	r2, #641	@ 0x281
 8012f16:	496b      	ldr	r1, [pc, #428]	@ (80130c4 <tcp_listen_input+0x1d0>)
 8012f18:	486b      	ldr	r0, [pc, #428]	@ (80130c8 <tcp_listen_input+0x1d4>)
 8012f1a:	f006 f96d 	bl	80191f8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012f1e:	4b67      	ldr	r3, [pc, #412]	@ (80130bc <tcp_listen_input+0x1c8>)
 8012f20:	781b      	ldrb	r3, [r3, #0]
 8012f22:	f003 0310 	and.w	r3, r3, #16
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d019      	beq.n	8012f5e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f2a:	4b68      	ldr	r3, [pc, #416]	@ (80130cc <tcp_listen_input+0x1d8>)
 8012f2c:	6819      	ldr	r1, [r3, #0]
 8012f2e:	4b68      	ldr	r3, [pc, #416]	@ (80130d0 <tcp_listen_input+0x1dc>)
 8012f30:	881b      	ldrh	r3, [r3, #0]
 8012f32:	461a      	mov	r2, r3
 8012f34:	4b67      	ldr	r3, [pc, #412]	@ (80130d4 <tcp_listen_input+0x1e0>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f3a:	4b67      	ldr	r3, [pc, #412]	@ (80130d8 <tcp_listen_input+0x1e4>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f3e:	885b      	ldrh	r3, [r3, #2]
 8012f40:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f42:	4a65      	ldr	r2, [pc, #404]	@ (80130d8 <tcp_listen_input+0x1e4>)
 8012f44:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f46:	8812      	ldrh	r2, [r2, #0]
 8012f48:	b292      	uxth	r2, r2
 8012f4a:	9202      	str	r2, [sp, #8]
 8012f4c:	9301      	str	r3, [sp, #4]
 8012f4e:	4b63      	ldr	r3, [pc, #396]	@ (80130dc <tcp_listen_input+0x1e8>)
 8012f50:	9300      	str	r3, [sp, #0]
 8012f52:	4b63      	ldr	r3, [pc, #396]	@ (80130e0 <tcp_listen_input+0x1ec>)
 8012f54:	4602      	mov	r2, r0
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f002 ff7a 	bl	8015e50 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012f5c:	e0a9      	b.n	80130b2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012f5e:	4b57      	ldr	r3, [pc, #348]	@ (80130bc <tcp_listen_input+0x1c8>)
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	f003 0302 	and.w	r3, r3, #2
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	f000 80a3 	beq.w	80130b2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	7d5b      	ldrb	r3, [r3, #21]
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7ff f927 	bl	80121c4 <tcp_alloc>
 8012f76:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d111      	bne.n	8012fa2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	699b      	ldr	r3, [r3, #24]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d00a      	beq.n	8012f9c <tcp_listen_input+0xa8>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	699b      	ldr	r3, [r3, #24]
 8012f8a:	687a      	ldr	r2, [r7, #4]
 8012f8c:	6910      	ldr	r0, [r2, #16]
 8012f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8012f92:	2100      	movs	r1, #0
 8012f94:	4798      	blx	r3
 8012f96:	4603      	mov	r3, r0
 8012f98:	73bb      	strb	r3, [r7, #14]
      return;
 8012f9a:	e08b      	b.n	80130b4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012f9c:	23f0      	movs	r3, #240	@ 0xf0
 8012f9e:	73bb      	strb	r3, [r7, #14]
      return;
 8012fa0:	e088      	b.n	80130b4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012fa2:	4b50      	ldr	r3, [pc, #320]	@ (80130e4 <tcp_listen_input+0x1f0>)
 8012fa4:	695a      	ldr	r2, [r3, #20]
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012faa:	4b4e      	ldr	r3, [pc, #312]	@ (80130e4 <tcp_listen_input+0x1f0>)
 8012fac:	691a      	ldr	r2, [r3, #16]
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	8ada      	ldrh	r2, [r3, #22]
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012fba:	4b47      	ldr	r3, [pc, #284]	@ (80130d8 <tcp_listen_input+0x1e4>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	881b      	ldrh	r3, [r3, #0]
 8012fc0:	b29a      	uxth	r2, r3
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	2203      	movs	r2, #3
 8012fca:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012fcc:	4b41      	ldr	r3, [pc, #260]	@ (80130d4 <tcp_listen_input+0x1e0>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	1c5a      	adds	r2, r3, #1
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012fd6:	697b      	ldr	r3, [r7, #20]
 8012fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012fda:	697b      	ldr	r3, [r7, #20]
 8012fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8012fde:	6978      	ldr	r0, [r7, #20]
 8012fe0:	f7ff fa58 	bl	8012494 <tcp_next_iss>
 8012fe4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	693a      	ldr	r2, [r7, #16]
 8012fea:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8012fec:	697b      	ldr	r3, [r7, #20]
 8012fee:	693a      	ldr	r2, [r7, #16]
 8012ff0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8012ff2:	697b      	ldr	r3, [r7, #20]
 8012ff4:	693a      	ldr	r2, [r7, #16]
 8012ff6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8012ff8:	697b      	ldr	r3, [r7, #20]
 8012ffa:	693a      	ldr	r2, [r7, #16]
 8012ffc:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012ffe:	4b35      	ldr	r3, [pc, #212]	@ (80130d4 <tcp_listen_input+0x1e0>)
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	1e5a      	subs	r2, r3, #1
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	691a      	ldr	r2, [r3, #16]
 801300c:	697b      	ldr	r3, [r7, #20]
 801300e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	687a      	ldr	r2, [r7, #4]
 8013014:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	7a5b      	ldrb	r3, [r3, #9]
 801301a:	f003 030c 	and.w	r3, r3, #12
 801301e:	b2da      	uxtb	r2, r3
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	7a1a      	ldrb	r2, [r3, #8]
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801302c:	4b2e      	ldr	r3, [pc, #184]	@ (80130e8 <tcp_listen_input+0x1f4>)
 801302e:	681a      	ldr	r2, [r3, #0]
 8013030:	697b      	ldr	r3, [r7, #20]
 8013032:	60da      	str	r2, [r3, #12]
 8013034:	4a2c      	ldr	r2, [pc, #176]	@ (80130e8 <tcp_listen_input+0x1f4>)
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	6013      	str	r3, [r2, #0]
 801303a:	f003 f8cb 	bl	80161d4 <tcp_timer_needed>
 801303e:	4b2b      	ldr	r3, [pc, #172]	@ (80130ec <tcp_listen_input+0x1f8>)
 8013040:	2201      	movs	r2, #1
 8013042:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013044:	6978      	ldr	r0, [r7, #20]
 8013046:	f001 fd8b 	bl	8014b60 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801304a:	4b23      	ldr	r3, [pc, #140]	@ (80130d8 <tcp_listen_input+0x1e4>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	89db      	ldrh	r3, [r3, #14]
 8013050:	b29a      	uxth	r2, r3
 8013052:	697b      	ldr	r3, [r7, #20]
 8013054:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013058:	697b      	ldr	r3, [r7, #20]
 801305a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	3304      	adds	r3, #4
 801306c:	4618      	mov	r0, r3
 801306e:	f004 fce5 	bl	8017a3c <ip4_route>
 8013072:	4601      	mov	r1, r0
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	3304      	adds	r3, #4
 8013078:	461a      	mov	r2, r3
 801307a:	4620      	mov	r0, r4
 801307c:	f7ff fa30 	bl	80124e0 <tcp_eff_send_mss_netif>
 8013080:	4603      	mov	r3, r0
 8013082:	461a      	mov	r2, r3
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013088:	2112      	movs	r1, #18
 801308a:	6978      	ldr	r0, [r7, #20]
 801308c:	f002 f83e 	bl	801510c <tcp_enqueue_flags>
 8013090:	4603      	mov	r3, r0
 8013092:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d004      	beq.n	80130a6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801309c:	2100      	movs	r1, #0
 801309e:	6978      	ldr	r0, [r7, #20]
 80130a0:	f7fe f97c 	bl	801139c <tcp_abandon>
      return;
 80130a4:	e006      	b.n	80130b4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80130a6:	6978      	ldr	r0, [r7, #20]
 80130a8:	f002 f91e 	bl	80152e8 <tcp_output>
  return;
 80130ac:	e001      	b.n	80130b2 <tcp_listen_input+0x1be>
    return;
 80130ae:	bf00      	nop
 80130b0:	e000      	b.n	80130b4 <tcp_listen_input+0x1c0>
  return;
 80130b2:	bf00      	nop
}
 80130b4:	371c      	adds	r7, #28
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd90      	pop	{r4, r7, pc}
 80130ba:	bf00      	nop
 80130bc:	20060bd0 	.word	0x20060bd0
 80130c0:	0801b3a4 	.word	0x0801b3a4
 80130c4:	0801b59c 	.word	0x0801b59c
 80130c8:	0801b3f0 	.word	0x0801b3f0
 80130cc:	20060bc8 	.word	0x20060bc8
 80130d0:	20060bce 	.word	0x20060bce
 80130d4:	20060bc4 	.word	0x20060bc4
 80130d8:	20060bb4 	.word	0x20060bb4
 80130dc:	2005da9c 	.word	0x2005da9c
 80130e0:	2005daa0 	.word	0x2005daa0
 80130e4:	2005da8c 	.word	0x2005da8c
 80130e8:	20060b98 	.word	0x20060b98
 80130ec:	20060ba0 	.word	0x20060ba0

080130f0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b086      	sub	sp, #24
 80130f4:	af04      	add	r7, sp, #16
 80130f6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80130f8:	4b2f      	ldr	r3, [pc, #188]	@ (80131b8 <tcp_timewait_input+0xc8>)
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	f003 0304 	and.w	r3, r3, #4
 8013100:	2b00      	cmp	r3, #0
 8013102:	d153      	bne.n	80131ac <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d106      	bne.n	8013118 <tcp_timewait_input+0x28>
 801310a:	4b2c      	ldr	r3, [pc, #176]	@ (80131bc <tcp_timewait_input+0xcc>)
 801310c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8013110:	492b      	ldr	r1, [pc, #172]	@ (80131c0 <tcp_timewait_input+0xd0>)
 8013112:	482c      	ldr	r0, [pc, #176]	@ (80131c4 <tcp_timewait_input+0xd4>)
 8013114:	f006 f870 	bl	80191f8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013118:	4b27      	ldr	r3, [pc, #156]	@ (80131b8 <tcp_timewait_input+0xc8>)
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	f003 0302 	and.w	r3, r3, #2
 8013120:	2b00      	cmp	r3, #0
 8013122:	d02a      	beq.n	801317a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013124:	4b28      	ldr	r3, [pc, #160]	@ (80131c8 <tcp_timewait_input+0xd8>)
 8013126:	681a      	ldr	r2, [r3, #0]
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801312c:	1ad3      	subs	r3, r2, r3
 801312e:	2b00      	cmp	r3, #0
 8013130:	db2d      	blt.n	801318e <tcp_timewait_input+0x9e>
 8013132:	4b25      	ldr	r3, [pc, #148]	@ (80131c8 <tcp_timewait_input+0xd8>)
 8013134:	681a      	ldr	r2, [r3, #0]
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801313a:	6879      	ldr	r1, [r7, #4]
 801313c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801313e:	440b      	add	r3, r1
 8013140:	1ad3      	subs	r3, r2, r3
 8013142:	2b00      	cmp	r3, #0
 8013144:	dc23      	bgt.n	801318e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013146:	4b21      	ldr	r3, [pc, #132]	@ (80131cc <tcp_timewait_input+0xdc>)
 8013148:	6819      	ldr	r1, [r3, #0]
 801314a:	4b21      	ldr	r3, [pc, #132]	@ (80131d0 <tcp_timewait_input+0xe0>)
 801314c:	881b      	ldrh	r3, [r3, #0]
 801314e:	461a      	mov	r2, r3
 8013150:	4b1d      	ldr	r3, [pc, #116]	@ (80131c8 <tcp_timewait_input+0xd8>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013156:	4b1f      	ldr	r3, [pc, #124]	@ (80131d4 <tcp_timewait_input+0xe4>)
 8013158:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801315a:	885b      	ldrh	r3, [r3, #2]
 801315c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801315e:	4a1d      	ldr	r2, [pc, #116]	@ (80131d4 <tcp_timewait_input+0xe4>)
 8013160:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013162:	8812      	ldrh	r2, [r2, #0]
 8013164:	b292      	uxth	r2, r2
 8013166:	9202      	str	r2, [sp, #8]
 8013168:	9301      	str	r3, [sp, #4]
 801316a:	4b1b      	ldr	r3, [pc, #108]	@ (80131d8 <tcp_timewait_input+0xe8>)
 801316c:	9300      	str	r3, [sp, #0]
 801316e:	4b1b      	ldr	r3, [pc, #108]	@ (80131dc <tcp_timewait_input+0xec>)
 8013170:	4602      	mov	r2, r0
 8013172:	6878      	ldr	r0, [r7, #4]
 8013174:	f002 fe6c 	bl	8015e50 <tcp_rst>
      return;
 8013178:	e01b      	b.n	80131b2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801317a:	4b0f      	ldr	r3, [pc, #60]	@ (80131b8 <tcp_timewait_input+0xc8>)
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	f003 0301 	and.w	r3, r3, #1
 8013182:	2b00      	cmp	r3, #0
 8013184:	d003      	beq.n	801318e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013186:	4b16      	ldr	r3, [pc, #88]	@ (80131e0 <tcp_timewait_input+0xf0>)
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801318e:	4b10      	ldr	r3, [pc, #64]	@ (80131d0 <tcp_timewait_input+0xe0>)
 8013190:	881b      	ldrh	r3, [r3, #0]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d00c      	beq.n	80131b0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	8b5b      	ldrh	r3, [r3, #26]
 801319a:	f043 0302 	orr.w	r3, r3, #2
 801319e:	b29a      	uxth	r2, r3
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f002 f89f 	bl	80152e8 <tcp_output>
  }
  return;
 80131aa:	e001      	b.n	80131b0 <tcp_timewait_input+0xc0>
    return;
 80131ac:	bf00      	nop
 80131ae:	e000      	b.n	80131b2 <tcp_timewait_input+0xc2>
  return;
 80131b0:	bf00      	nop
}
 80131b2:	3708      	adds	r7, #8
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}
 80131b8:	20060bd0 	.word	0x20060bd0
 80131bc:	0801b3a4 	.word	0x0801b3a4
 80131c0:	0801b5bc 	.word	0x0801b5bc
 80131c4:	0801b3f0 	.word	0x0801b3f0
 80131c8:	20060bc4 	.word	0x20060bc4
 80131cc:	20060bc8 	.word	0x20060bc8
 80131d0:	20060bce 	.word	0x20060bce
 80131d4:	20060bb4 	.word	0x20060bb4
 80131d8:	2005da9c 	.word	0x2005da9c
 80131dc:	2005daa0 	.word	0x2005daa0
 80131e0:	20060b8c 	.word	0x20060b8c

080131e4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80131e4:	b590      	push	{r4, r7, lr}
 80131e6:	b08d      	sub	sp, #52	@ 0x34
 80131e8:	af04      	add	r7, sp, #16
 80131ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80131ec:	2300      	movs	r3, #0
 80131ee:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80131f0:	2300      	movs	r3, #0
 80131f2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d106      	bne.n	8013208 <tcp_process+0x24>
 80131fa:	4b9d      	ldr	r3, [pc, #628]	@ (8013470 <tcp_process+0x28c>)
 80131fc:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8013200:	499c      	ldr	r1, [pc, #624]	@ (8013474 <tcp_process+0x290>)
 8013202:	489d      	ldr	r0, [pc, #628]	@ (8013478 <tcp_process+0x294>)
 8013204:	f005 fff8 	bl	80191f8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013208:	4b9c      	ldr	r3, [pc, #624]	@ (801347c <tcp_process+0x298>)
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	f003 0304 	and.w	r3, r3, #4
 8013210:	2b00      	cmp	r3, #0
 8013212:	d04e      	beq.n	80132b2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	7d1b      	ldrb	r3, [r3, #20]
 8013218:	2b02      	cmp	r3, #2
 801321a:	d108      	bne.n	801322e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013220:	4b97      	ldr	r3, [pc, #604]	@ (8013480 <tcp_process+0x29c>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	429a      	cmp	r2, r3
 8013226:	d123      	bne.n	8013270 <tcp_process+0x8c>
        acceptable = 1;
 8013228:	2301      	movs	r3, #1
 801322a:	76fb      	strb	r3, [r7, #27]
 801322c:	e020      	b.n	8013270 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013232:	4b94      	ldr	r3, [pc, #592]	@ (8013484 <tcp_process+0x2a0>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	429a      	cmp	r2, r3
 8013238:	d102      	bne.n	8013240 <tcp_process+0x5c>
        acceptable = 1;
 801323a:	2301      	movs	r3, #1
 801323c:	76fb      	strb	r3, [r7, #27]
 801323e:	e017      	b.n	8013270 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013240:	4b90      	ldr	r3, [pc, #576]	@ (8013484 <tcp_process+0x2a0>)
 8013242:	681a      	ldr	r2, [r3, #0]
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013248:	1ad3      	subs	r3, r2, r3
 801324a:	2b00      	cmp	r3, #0
 801324c:	db10      	blt.n	8013270 <tcp_process+0x8c>
 801324e:	4b8d      	ldr	r3, [pc, #564]	@ (8013484 <tcp_process+0x2a0>)
 8013250:	681a      	ldr	r2, [r3, #0]
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013256:	6879      	ldr	r1, [r7, #4]
 8013258:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801325a:	440b      	add	r3, r1
 801325c:	1ad3      	subs	r3, r2, r3
 801325e:	2b00      	cmp	r3, #0
 8013260:	dc06      	bgt.n	8013270 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	8b5b      	ldrh	r3, [r3, #26]
 8013266:	f043 0302 	orr.w	r3, r3, #2
 801326a:	b29a      	uxth	r2, r3
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013270:	7efb      	ldrb	r3, [r7, #27]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d01b      	beq.n	80132ae <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	7d1b      	ldrb	r3, [r3, #20]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d106      	bne.n	801328c <tcp_process+0xa8>
 801327e:	4b7c      	ldr	r3, [pc, #496]	@ (8013470 <tcp_process+0x28c>)
 8013280:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8013284:	4980      	ldr	r1, [pc, #512]	@ (8013488 <tcp_process+0x2a4>)
 8013286:	487c      	ldr	r0, [pc, #496]	@ (8013478 <tcp_process+0x294>)
 8013288:	f005 ffb6 	bl	80191f8 <iprintf>
      recv_flags |= TF_RESET;
 801328c:	4b7f      	ldr	r3, [pc, #508]	@ (801348c <tcp_process+0x2a8>)
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	f043 0308 	orr.w	r3, r3, #8
 8013294:	b2da      	uxtb	r2, r3
 8013296:	4b7d      	ldr	r3, [pc, #500]	@ (801348c <tcp_process+0x2a8>)
 8013298:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	8b5b      	ldrh	r3, [r3, #26]
 801329e:	f023 0301 	bic.w	r3, r3, #1
 80132a2:	b29a      	uxth	r2, r3
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80132a8:	f06f 030d 	mvn.w	r3, #13
 80132ac:	e37a      	b.n	80139a4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80132ae:	2300      	movs	r3, #0
 80132b0:	e378      	b.n	80139a4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80132b2:	4b72      	ldr	r3, [pc, #456]	@ (801347c <tcp_process+0x298>)
 80132b4:	781b      	ldrb	r3, [r3, #0]
 80132b6:	f003 0302 	and.w	r3, r3, #2
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d010      	beq.n	80132e0 <tcp_process+0xfc>
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	7d1b      	ldrb	r3, [r3, #20]
 80132c2:	2b02      	cmp	r3, #2
 80132c4:	d00c      	beq.n	80132e0 <tcp_process+0xfc>
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	7d1b      	ldrb	r3, [r3, #20]
 80132ca:	2b03      	cmp	r3, #3
 80132cc:	d008      	beq.n	80132e0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	8b5b      	ldrh	r3, [r3, #26]
 80132d2:	f043 0302 	orr.w	r3, r3, #2
 80132d6:	b29a      	uxth	r2, r3
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80132dc:	2300      	movs	r3, #0
 80132de:	e361      	b.n	80139a4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	8b5b      	ldrh	r3, [r3, #26]
 80132e4:	f003 0310 	and.w	r3, r3, #16
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d103      	bne.n	80132f4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80132ec:	4b68      	ldr	r3, [pc, #416]	@ (8013490 <tcp_process+0x2ac>)
 80132ee:	681a      	ldr	r2, [r3, #0]
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2200      	movs	r2, #0
 80132f8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2200      	movs	r2, #0
 8013300:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f001 fc2b 	bl	8014b60 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	7d1b      	ldrb	r3, [r3, #20]
 801330e:	3b02      	subs	r3, #2
 8013310:	2b07      	cmp	r3, #7
 8013312:	f200 8337 	bhi.w	8013984 <tcp_process+0x7a0>
 8013316:	a201      	add	r2, pc, #4	@ (adr r2, 801331c <tcp_process+0x138>)
 8013318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801331c:	0801333d 	.word	0x0801333d
 8013320:	0801356d 	.word	0x0801356d
 8013324:	080136e5 	.word	0x080136e5
 8013328:	0801370f 	.word	0x0801370f
 801332c:	08013833 	.word	0x08013833
 8013330:	080136e5 	.word	0x080136e5
 8013334:	080138bf 	.word	0x080138bf
 8013338:	0801394f 	.word	0x0801394f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801333c:	4b4f      	ldr	r3, [pc, #316]	@ (801347c <tcp_process+0x298>)
 801333e:	781b      	ldrb	r3, [r3, #0]
 8013340:	f003 0310 	and.w	r3, r3, #16
 8013344:	2b00      	cmp	r3, #0
 8013346:	f000 80e4 	beq.w	8013512 <tcp_process+0x32e>
 801334a:	4b4c      	ldr	r3, [pc, #304]	@ (801347c <tcp_process+0x298>)
 801334c:	781b      	ldrb	r3, [r3, #0]
 801334e:	f003 0302 	and.w	r3, r3, #2
 8013352:	2b00      	cmp	r3, #0
 8013354:	f000 80dd 	beq.w	8013512 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801335c:	1c5a      	adds	r2, r3, #1
 801335e:	4b48      	ldr	r3, [pc, #288]	@ (8013480 <tcp_process+0x29c>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	429a      	cmp	r2, r3
 8013364:	f040 80d5 	bne.w	8013512 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013368:	4b46      	ldr	r3, [pc, #280]	@ (8013484 <tcp_process+0x2a0>)
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	1c5a      	adds	r2, r3, #1
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801337a:	4b41      	ldr	r3, [pc, #260]	@ (8013480 <tcp_process+0x29c>)
 801337c:	681a      	ldr	r2, [r3, #0]
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013382:	4b44      	ldr	r3, [pc, #272]	@ (8013494 <tcp_process+0x2b0>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	89db      	ldrh	r3, [r3, #14]
 8013388:	b29a      	uxth	r2, r3
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801339c:	4b39      	ldr	r3, [pc, #228]	@ (8013484 <tcp_process+0x2a0>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	1e5a      	subs	r2, r3, #1
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2204      	movs	r2, #4
 80133aa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	3304      	adds	r3, #4
 80133b4:	4618      	mov	r0, r3
 80133b6:	f004 fb41 	bl	8017a3c <ip4_route>
 80133ba:	4601      	mov	r1, r0
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	3304      	adds	r3, #4
 80133c0:	461a      	mov	r2, r3
 80133c2:	4620      	mov	r0, r4
 80133c4:	f7ff f88c 	bl	80124e0 <tcp_eff_send_mss_netif>
 80133c8:	4603      	mov	r3, r0
 80133ca:	461a      	mov	r2, r3
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80133d4:	009a      	lsls	r2, r3, #2
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80133da:	005b      	lsls	r3, r3, #1
 80133dc:	f241 111c 	movw	r1, #4380	@ 0x111c
 80133e0:	428b      	cmp	r3, r1
 80133e2:	bf38      	it	cc
 80133e4:	460b      	movcc	r3, r1
 80133e6:	429a      	cmp	r2, r3
 80133e8:	d204      	bcs.n	80133f4 <tcp_process+0x210>
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80133ee:	009b      	lsls	r3, r3, #2
 80133f0:	b29b      	uxth	r3, r3
 80133f2:	e00d      	b.n	8013410 <tcp_process+0x22c>
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80133f8:	005b      	lsls	r3, r3, #1
 80133fa:	f241 121c 	movw	r2, #4380	@ 0x111c
 80133fe:	4293      	cmp	r3, r2
 8013400:	d904      	bls.n	801340c <tcp_process+0x228>
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013406:	005b      	lsls	r3, r3, #1
 8013408:	b29b      	uxth	r3, r3
 801340a:	e001      	b.n	8013410 <tcp_process+0x22c>
 801340c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8013410:	687a      	ldr	r2, [r7, #4]
 8013412:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801341c:	2b00      	cmp	r3, #0
 801341e:	d106      	bne.n	801342e <tcp_process+0x24a>
 8013420:	4b13      	ldr	r3, [pc, #76]	@ (8013470 <tcp_process+0x28c>)
 8013422:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8013426:	491c      	ldr	r1, [pc, #112]	@ (8013498 <tcp_process+0x2b4>)
 8013428:	4813      	ldr	r0, [pc, #76]	@ (8013478 <tcp_process+0x294>)
 801342a:	f005 fee5 	bl	80191f8 <iprintf>
        --pcb->snd_queuelen;
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013434:	3b01      	subs	r3, #1
 8013436:	b29a      	uxth	r2, r3
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013442:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013444:	69fb      	ldr	r3, [r7, #28]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d12a      	bne.n	80134a0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801344e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013450:	69fb      	ldr	r3, [r7, #28]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d106      	bne.n	8013464 <tcp_process+0x280>
 8013456:	4b06      	ldr	r3, [pc, #24]	@ (8013470 <tcp_process+0x28c>)
 8013458:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801345c:	490f      	ldr	r1, [pc, #60]	@ (801349c <tcp_process+0x2b8>)
 801345e:	4806      	ldr	r0, [pc, #24]	@ (8013478 <tcp_process+0x294>)
 8013460:	f005 feca 	bl	80191f8 <iprintf>
          pcb->unsent = rseg->next;
 8013464:	69fb      	ldr	r3, [r7, #28]
 8013466:	681a      	ldr	r2, [r3, #0]
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	66da      	str	r2, [r3, #108]	@ 0x6c
 801346c:	e01c      	b.n	80134a8 <tcp_process+0x2c4>
 801346e:	bf00      	nop
 8013470:	0801b3a4 	.word	0x0801b3a4
 8013474:	0801b5dc 	.word	0x0801b5dc
 8013478:	0801b3f0 	.word	0x0801b3f0
 801347c:	20060bd0 	.word	0x20060bd0
 8013480:	20060bc8 	.word	0x20060bc8
 8013484:	20060bc4 	.word	0x20060bc4
 8013488:	0801b5f8 	.word	0x0801b5f8
 801348c:	20060bd1 	.word	0x20060bd1
 8013490:	20060b8c 	.word	0x20060b8c
 8013494:	20060bb4 	.word	0x20060bb4
 8013498:	0801b618 	.word	0x0801b618
 801349c:	0801b630 	.word	0x0801b630
        } else {
          pcb->unacked = rseg->next;
 80134a0:	69fb      	ldr	r3, [r7, #28]
 80134a2:	681a      	ldr	r2, [r3, #0]
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80134a8:	69f8      	ldr	r0, [r7, #28]
 80134aa:	f7fe fd22 	bl	8011ef2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d104      	bne.n	80134c0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80134bc:	861a      	strh	r2, [r3, #48]	@ 0x30
 80134be:	e006      	b.n	80134ce <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	2200      	movs	r2, #0
 80134c4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	2200      	movs	r2, #0
 80134ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d00a      	beq.n	80134ee <tcp_process+0x30a>
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80134de:	687a      	ldr	r2, [r7, #4]
 80134e0:	6910      	ldr	r0, [r2, #16]
 80134e2:	2200      	movs	r2, #0
 80134e4:	6879      	ldr	r1, [r7, #4]
 80134e6:	4798      	blx	r3
 80134e8:	4603      	mov	r3, r0
 80134ea:	76bb      	strb	r3, [r7, #26]
 80134ec:	e001      	b.n	80134f2 <tcp_process+0x30e>
 80134ee:	2300      	movs	r3, #0
 80134f0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80134f2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80134f6:	f113 0f0d 	cmn.w	r3, #13
 80134fa:	d102      	bne.n	8013502 <tcp_process+0x31e>
          return ERR_ABRT;
 80134fc:	f06f 030c 	mvn.w	r3, #12
 8013500:	e250      	b.n	80139a4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	8b5b      	ldrh	r3, [r3, #26]
 8013506:	f043 0302 	orr.w	r3, r3, #2
 801350a:	b29a      	uxth	r2, r3
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013510:	e23a      	b.n	8013988 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8013512:	4b98      	ldr	r3, [pc, #608]	@ (8013774 <tcp_process+0x590>)
 8013514:	781b      	ldrb	r3, [r3, #0]
 8013516:	f003 0310 	and.w	r3, r3, #16
 801351a:	2b00      	cmp	r3, #0
 801351c:	f000 8234 	beq.w	8013988 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013520:	4b95      	ldr	r3, [pc, #596]	@ (8013778 <tcp_process+0x594>)
 8013522:	6819      	ldr	r1, [r3, #0]
 8013524:	4b95      	ldr	r3, [pc, #596]	@ (801377c <tcp_process+0x598>)
 8013526:	881b      	ldrh	r3, [r3, #0]
 8013528:	461a      	mov	r2, r3
 801352a:	4b95      	ldr	r3, [pc, #596]	@ (8013780 <tcp_process+0x59c>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013530:	4b94      	ldr	r3, [pc, #592]	@ (8013784 <tcp_process+0x5a0>)
 8013532:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013534:	885b      	ldrh	r3, [r3, #2]
 8013536:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013538:	4a92      	ldr	r2, [pc, #584]	@ (8013784 <tcp_process+0x5a0>)
 801353a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801353c:	8812      	ldrh	r2, [r2, #0]
 801353e:	b292      	uxth	r2, r2
 8013540:	9202      	str	r2, [sp, #8]
 8013542:	9301      	str	r3, [sp, #4]
 8013544:	4b90      	ldr	r3, [pc, #576]	@ (8013788 <tcp_process+0x5a4>)
 8013546:	9300      	str	r3, [sp, #0]
 8013548:	4b90      	ldr	r3, [pc, #576]	@ (801378c <tcp_process+0x5a8>)
 801354a:	4602      	mov	r2, r0
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	f002 fc7f 	bl	8015e50 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013558:	2b05      	cmp	r3, #5
 801355a:	f200 8215 	bhi.w	8013988 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2200      	movs	r2, #0
 8013562:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f002 fa4b 	bl	8015a00 <tcp_rexmit_rto>
      break;
 801356a:	e20d      	b.n	8013988 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801356c:	4b81      	ldr	r3, [pc, #516]	@ (8013774 <tcp_process+0x590>)
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	f003 0310 	and.w	r3, r3, #16
 8013574:	2b00      	cmp	r3, #0
 8013576:	f000 80a1 	beq.w	80136bc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801357a:	4b7f      	ldr	r3, [pc, #508]	@ (8013778 <tcp_process+0x594>)
 801357c:	681a      	ldr	r2, [r3, #0]
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013582:	1ad3      	subs	r3, r2, r3
 8013584:	3b01      	subs	r3, #1
 8013586:	2b00      	cmp	r3, #0
 8013588:	db7e      	blt.n	8013688 <tcp_process+0x4a4>
 801358a:	4b7b      	ldr	r3, [pc, #492]	@ (8013778 <tcp_process+0x594>)
 801358c:	681a      	ldr	r2, [r3, #0]
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013592:	1ad3      	subs	r3, r2, r3
 8013594:	2b00      	cmp	r3, #0
 8013596:	dc77      	bgt.n	8013688 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2204      	movs	r2, #4
 801359c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d102      	bne.n	80135ac <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80135a6:	23fa      	movs	r3, #250	@ 0xfa
 80135a8:	76bb      	strb	r3, [r7, #26]
 80135aa:	e01d      	b.n	80135e8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80135b0:	699b      	ldr	r3, [r3, #24]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d106      	bne.n	80135c4 <tcp_process+0x3e0>
 80135b6:	4b76      	ldr	r3, [pc, #472]	@ (8013790 <tcp_process+0x5ac>)
 80135b8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80135bc:	4975      	ldr	r1, [pc, #468]	@ (8013794 <tcp_process+0x5b0>)
 80135be:	4876      	ldr	r0, [pc, #472]	@ (8013798 <tcp_process+0x5b4>)
 80135c0:	f005 fe1a 	bl	80191f8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80135c8:	699b      	ldr	r3, [r3, #24]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d00a      	beq.n	80135e4 <tcp_process+0x400>
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80135d2:	699b      	ldr	r3, [r3, #24]
 80135d4:	687a      	ldr	r2, [r7, #4]
 80135d6:	6910      	ldr	r0, [r2, #16]
 80135d8:	2200      	movs	r2, #0
 80135da:	6879      	ldr	r1, [r7, #4]
 80135dc:	4798      	blx	r3
 80135de:	4603      	mov	r3, r0
 80135e0:	76bb      	strb	r3, [r7, #26]
 80135e2:	e001      	b.n	80135e8 <tcp_process+0x404>
 80135e4:	23f0      	movs	r3, #240	@ 0xf0
 80135e6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80135e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d00a      	beq.n	8013606 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80135f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80135f4:	f113 0f0d 	cmn.w	r3, #13
 80135f8:	d002      	beq.n	8013600 <tcp_process+0x41c>
              tcp_abort(pcb);
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f7fd ff8c 	bl	8011518 <tcp_abort>
            }
            return ERR_ABRT;
 8013600:	f06f 030c 	mvn.w	r3, #12
 8013604:	e1ce      	b.n	80139a4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013606:	6878      	ldr	r0, [r7, #4]
 8013608:	f000 fae0 	bl	8013bcc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801360c:	4b63      	ldr	r3, [pc, #396]	@ (801379c <tcp_process+0x5b8>)
 801360e:	881b      	ldrh	r3, [r3, #0]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d005      	beq.n	8013620 <tcp_process+0x43c>
            recv_acked--;
 8013614:	4b61      	ldr	r3, [pc, #388]	@ (801379c <tcp_process+0x5b8>)
 8013616:	881b      	ldrh	r3, [r3, #0]
 8013618:	3b01      	subs	r3, #1
 801361a:	b29a      	uxth	r2, r3
 801361c:	4b5f      	ldr	r3, [pc, #380]	@ (801379c <tcp_process+0x5b8>)
 801361e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013624:	009a      	lsls	r2, r3, #2
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801362a:	005b      	lsls	r3, r3, #1
 801362c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8013630:	428b      	cmp	r3, r1
 8013632:	bf38      	it	cc
 8013634:	460b      	movcc	r3, r1
 8013636:	429a      	cmp	r2, r3
 8013638:	d204      	bcs.n	8013644 <tcp_process+0x460>
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801363e:	009b      	lsls	r3, r3, #2
 8013640:	b29b      	uxth	r3, r3
 8013642:	e00d      	b.n	8013660 <tcp_process+0x47c>
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013648:	005b      	lsls	r3, r3, #1
 801364a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801364e:	4293      	cmp	r3, r2
 8013650:	d904      	bls.n	801365c <tcp_process+0x478>
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013656:	005b      	lsls	r3, r3, #1
 8013658:	b29b      	uxth	r3, r3
 801365a:	e001      	b.n	8013660 <tcp_process+0x47c>
 801365c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8013660:	687a      	ldr	r2, [r7, #4]
 8013662:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013666:	4b4e      	ldr	r3, [pc, #312]	@ (80137a0 <tcp_process+0x5bc>)
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	f003 0320 	and.w	r3, r3, #32
 801366e:	2b00      	cmp	r3, #0
 8013670:	d037      	beq.n	80136e2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	8b5b      	ldrh	r3, [r3, #26]
 8013676:	f043 0302 	orr.w	r3, r3, #2
 801367a:	b29a      	uxth	r2, r3
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2207      	movs	r2, #7
 8013684:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013686:	e02c      	b.n	80136e2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013688:	4b3b      	ldr	r3, [pc, #236]	@ (8013778 <tcp_process+0x594>)
 801368a:	6819      	ldr	r1, [r3, #0]
 801368c:	4b3b      	ldr	r3, [pc, #236]	@ (801377c <tcp_process+0x598>)
 801368e:	881b      	ldrh	r3, [r3, #0]
 8013690:	461a      	mov	r2, r3
 8013692:	4b3b      	ldr	r3, [pc, #236]	@ (8013780 <tcp_process+0x59c>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013698:	4b3a      	ldr	r3, [pc, #232]	@ (8013784 <tcp_process+0x5a0>)
 801369a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801369c:	885b      	ldrh	r3, [r3, #2]
 801369e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80136a0:	4a38      	ldr	r2, [pc, #224]	@ (8013784 <tcp_process+0x5a0>)
 80136a2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80136a4:	8812      	ldrh	r2, [r2, #0]
 80136a6:	b292      	uxth	r2, r2
 80136a8:	9202      	str	r2, [sp, #8]
 80136aa:	9301      	str	r3, [sp, #4]
 80136ac:	4b36      	ldr	r3, [pc, #216]	@ (8013788 <tcp_process+0x5a4>)
 80136ae:	9300      	str	r3, [sp, #0]
 80136b0:	4b36      	ldr	r3, [pc, #216]	@ (801378c <tcp_process+0x5a8>)
 80136b2:	4602      	mov	r2, r0
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f002 fbcb 	bl	8015e50 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80136ba:	e167      	b.n	801398c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80136bc:	4b2d      	ldr	r3, [pc, #180]	@ (8013774 <tcp_process+0x590>)
 80136be:	781b      	ldrb	r3, [r3, #0]
 80136c0:	f003 0302 	and.w	r3, r3, #2
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	f000 8161 	beq.w	801398c <tcp_process+0x7a8>
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136ce:	1e5a      	subs	r2, r3, #1
 80136d0:	4b2b      	ldr	r3, [pc, #172]	@ (8013780 <tcp_process+0x59c>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	f040 8159 	bne.w	801398c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f002 f9b2 	bl	8015a44 <tcp_rexmit>
      break;
 80136e0:	e154      	b.n	801398c <tcp_process+0x7a8>
 80136e2:	e153      	b.n	801398c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f000 fa71 	bl	8013bcc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80136ea:	4b2d      	ldr	r3, [pc, #180]	@ (80137a0 <tcp_process+0x5bc>)
 80136ec:	781b      	ldrb	r3, [r3, #0]
 80136ee:	f003 0320 	and.w	r3, r3, #32
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	f000 814c 	beq.w	8013990 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	8b5b      	ldrh	r3, [r3, #26]
 80136fc:	f043 0302 	orr.w	r3, r3, #2
 8013700:	b29a      	uxth	r2, r3
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	2207      	movs	r2, #7
 801370a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801370c:	e140      	b.n	8013990 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801370e:	6878      	ldr	r0, [r7, #4]
 8013710:	f000 fa5c 	bl	8013bcc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013714:	4b22      	ldr	r3, [pc, #136]	@ (80137a0 <tcp_process+0x5bc>)
 8013716:	781b      	ldrb	r3, [r3, #0]
 8013718:	f003 0320 	and.w	r3, r3, #32
 801371c:	2b00      	cmp	r3, #0
 801371e:	d071      	beq.n	8013804 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013720:	4b14      	ldr	r3, [pc, #80]	@ (8013774 <tcp_process+0x590>)
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	f003 0310 	and.w	r3, r3, #16
 8013728:	2b00      	cmp	r3, #0
 801372a:	d060      	beq.n	80137ee <tcp_process+0x60a>
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013730:	4b11      	ldr	r3, [pc, #68]	@ (8013778 <tcp_process+0x594>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	429a      	cmp	r2, r3
 8013736:	d15a      	bne.n	80137ee <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801373c:	2b00      	cmp	r3, #0
 801373e:	d156      	bne.n	80137ee <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	8b5b      	ldrh	r3, [r3, #26]
 8013744:	f043 0302 	orr.w	r3, r3, #2
 8013748:	b29a      	uxth	r2, r3
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f7fe fdbc 	bl	80122cc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013754:	4b13      	ldr	r3, [pc, #76]	@ (80137a4 <tcp_process+0x5c0>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	687a      	ldr	r2, [r7, #4]
 801375a:	429a      	cmp	r2, r3
 801375c:	d105      	bne.n	801376a <tcp_process+0x586>
 801375e:	4b11      	ldr	r3, [pc, #68]	@ (80137a4 <tcp_process+0x5c0>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	68db      	ldr	r3, [r3, #12]
 8013764:	4a0f      	ldr	r2, [pc, #60]	@ (80137a4 <tcp_process+0x5c0>)
 8013766:	6013      	str	r3, [r2, #0]
 8013768:	e02e      	b.n	80137c8 <tcp_process+0x5e4>
 801376a:	4b0e      	ldr	r3, [pc, #56]	@ (80137a4 <tcp_process+0x5c0>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	617b      	str	r3, [r7, #20]
 8013770:	e027      	b.n	80137c2 <tcp_process+0x5de>
 8013772:	bf00      	nop
 8013774:	20060bd0 	.word	0x20060bd0
 8013778:	20060bc8 	.word	0x20060bc8
 801377c:	20060bce 	.word	0x20060bce
 8013780:	20060bc4 	.word	0x20060bc4
 8013784:	20060bb4 	.word	0x20060bb4
 8013788:	2005da9c 	.word	0x2005da9c
 801378c:	2005daa0 	.word	0x2005daa0
 8013790:	0801b3a4 	.word	0x0801b3a4
 8013794:	0801b644 	.word	0x0801b644
 8013798:	0801b3f0 	.word	0x0801b3f0
 801379c:	20060bcc 	.word	0x20060bcc
 80137a0:	20060bd1 	.word	0x20060bd1
 80137a4:	20060b98 	.word	0x20060b98
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	68db      	ldr	r3, [r3, #12]
 80137ac:	687a      	ldr	r2, [r7, #4]
 80137ae:	429a      	cmp	r2, r3
 80137b0:	d104      	bne.n	80137bc <tcp_process+0x5d8>
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	68da      	ldr	r2, [r3, #12]
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	60da      	str	r2, [r3, #12]
 80137ba:	e005      	b.n	80137c8 <tcp_process+0x5e4>
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	68db      	ldr	r3, [r3, #12]
 80137c0:	617b      	str	r3, [r7, #20]
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d1ef      	bne.n	80137a8 <tcp_process+0x5c4>
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	2200      	movs	r2, #0
 80137cc:	60da      	str	r2, [r3, #12]
 80137ce:	4b77      	ldr	r3, [pc, #476]	@ (80139ac <tcp_process+0x7c8>)
 80137d0:	2201      	movs	r2, #1
 80137d2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	220a      	movs	r2, #10
 80137d8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80137da:	4b75      	ldr	r3, [pc, #468]	@ (80139b0 <tcp_process+0x7cc>)
 80137dc:	681a      	ldr	r2, [r3, #0]
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	60da      	str	r2, [r3, #12]
 80137e2:	4a73      	ldr	r2, [pc, #460]	@ (80139b0 <tcp_process+0x7cc>)
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	6013      	str	r3, [r2, #0]
 80137e8:	f002 fcf4 	bl	80161d4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80137ec:	e0d2      	b.n	8013994 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	8b5b      	ldrh	r3, [r3, #26]
 80137f2:	f043 0302 	orr.w	r3, r3, #2
 80137f6:	b29a      	uxth	r2, r3
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2208      	movs	r2, #8
 8013800:	751a      	strb	r2, [r3, #20]
      break;
 8013802:	e0c7      	b.n	8013994 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013804:	4b6b      	ldr	r3, [pc, #428]	@ (80139b4 <tcp_process+0x7d0>)
 8013806:	781b      	ldrb	r3, [r3, #0]
 8013808:	f003 0310 	and.w	r3, r3, #16
 801380c:	2b00      	cmp	r3, #0
 801380e:	f000 80c1 	beq.w	8013994 <tcp_process+0x7b0>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013816:	4b68      	ldr	r3, [pc, #416]	@ (80139b8 <tcp_process+0x7d4>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	429a      	cmp	r2, r3
 801381c:	f040 80ba 	bne.w	8013994 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013824:	2b00      	cmp	r3, #0
 8013826:	f040 80b5 	bne.w	8013994 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2206      	movs	r2, #6
 801382e:	751a      	strb	r2, [r3, #20]
      break;
 8013830:	e0b0      	b.n	8013994 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f000 f9ca 	bl	8013bcc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013838:	4b60      	ldr	r3, [pc, #384]	@ (80139bc <tcp_process+0x7d8>)
 801383a:	781b      	ldrb	r3, [r3, #0]
 801383c:	f003 0320 	and.w	r3, r3, #32
 8013840:	2b00      	cmp	r3, #0
 8013842:	f000 80a9 	beq.w	8013998 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	8b5b      	ldrh	r3, [r3, #26]
 801384a:	f043 0302 	orr.w	r3, r3, #2
 801384e:	b29a      	uxth	r2, r3
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013854:	6878      	ldr	r0, [r7, #4]
 8013856:	f7fe fd39 	bl	80122cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801385a:	4b59      	ldr	r3, [pc, #356]	@ (80139c0 <tcp_process+0x7dc>)
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	687a      	ldr	r2, [r7, #4]
 8013860:	429a      	cmp	r2, r3
 8013862:	d105      	bne.n	8013870 <tcp_process+0x68c>
 8013864:	4b56      	ldr	r3, [pc, #344]	@ (80139c0 <tcp_process+0x7dc>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	68db      	ldr	r3, [r3, #12]
 801386a:	4a55      	ldr	r2, [pc, #340]	@ (80139c0 <tcp_process+0x7dc>)
 801386c:	6013      	str	r3, [r2, #0]
 801386e:	e013      	b.n	8013898 <tcp_process+0x6b4>
 8013870:	4b53      	ldr	r3, [pc, #332]	@ (80139c0 <tcp_process+0x7dc>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	613b      	str	r3, [r7, #16]
 8013876:	e00c      	b.n	8013892 <tcp_process+0x6ae>
 8013878:	693b      	ldr	r3, [r7, #16]
 801387a:	68db      	ldr	r3, [r3, #12]
 801387c:	687a      	ldr	r2, [r7, #4]
 801387e:	429a      	cmp	r2, r3
 8013880:	d104      	bne.n	801388c <tcp_process+0x6a8>
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	68da      	ldr	r2, [r3, #12]
 8013886:	693b      	ldr	r3, [r7, #16]
 8013888:	60da      	str	r2, [r3, #12]
 801388a:	e005      	b.n	8013898 <tcp_process+0x6b4>
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	68db      	ldr	r3, [r3, #12]
 8013890:	613b      	str	r3, [r7, #16]
 8013892:	693b      	ldr	r3, [r7, #16]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d1ef      	bne.n	8013878 <tcp_process+0x694>
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2200      	movs	r2, #0
 801389c:	60da      	str	r2, [r3, #12]
 801389e:	4b43      	ldr	r3, [pc, #268]	@ (80139ac <tcp_process+0x7c8>)
 80138a0:	2201      	movs	r2, #1
 80138a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	220a      	movs	r2, #10
 80138a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80138aa:	4b41      	ldr	r3, [pc, #260]	@ (80139b0 <tcp_process+0x7cc>)
 80138ac:	681a      	ldr	r2, [r3, #0]
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	60da      	str	r2, [r3, #12]
 80138b2:	4a3f      	ldr	r2, [pc, #252]	@ (80139b0 <tcp_process+0x7cc>)
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6013      	str	r3, [r2, #0]
 80138b8:	f002 fc8c 	bl	80161d4 <tcp_timer_needed>
      }
      break;
 80138bc:	e06c      	b.n	8013998 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f000 f984 	bl	8013bcc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80138c4:	4b3b      	ldr	r3, [pc, #236]	@ (80139b4 <tcp_process+0x7d0>)
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	f003 0310 	and.w	r3, r3, #16
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d065      	beq.n	801399c <tcp_process+0x7b8>
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80138d4:	4b38      	ldr	r3, [pc, #224]	@ (80139b8 <tcp_process+0x7d4>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	429a      	cmp	r2, r3
 80138da:	d15f      	bne.n	801399c <tcp_process+0x7b8>
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d15b      	bne.n	801399c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80138e4:	6878      	ldr	r0, [r7, #4]
 80138e6:	f7fe fcf1 	bl	80122cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80138ea:	4b35      	ldr	r3, [pc, #212]	@ (80139c0 <tcp_process+0x7dc>)
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	687a      	ldr	r2, [r7, #4]
 80138f0:	429a      	cmp	r2, r3
 80138f2:	d105      	bne.n	8013900 <tcp_process+0x71c>
 80138f4:	4b32      	ldr	r3, [pc, #200]	@ (80139c0 <tcp_process+0x7dc>)
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	68db      	ldr	r3, [r3, #12]
 80138fa:	4a31      	ldr	r2, [pc, #196]	@ (80139c0 <tcp_process+0x7dc>)
 80138fc:	6013      	str	r3, [r2, #0]
 80138fe:	e013      	b.n	8013928 <tcp_process+0x744>
 8013900:	4b2f      	ldr	r3, [pc, #188]	@ (80139c0 <tcp_process+0x7dc>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	60fb      	str	r3, [r7, #12]
 8013906:	e00c      	b.n	8013922 <tcp_process+0x73e>
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	68db      	ldr	r3, [r3, #12]
 801390c:	687a      	ldr	r2, [r7, #4]
 801390e:	429a      	cmp	r2, r3
 8013910:	d104      	bne.n	801391c <tcp_process+0x738>
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	68da      	ldr	r2, [r3, #12]
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	60da      	str	r2, [r3, #12]
 801391a:	e005      	b.n	8013928 <tcp_process+0x744>
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	68db      	ldr	r3, [r3, #12]
 8013920:	60fb      	str	r3, [r7, #12]
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d1ef      	bne.n	8013908 <tcp_process+0x724>
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2200      	movs	r2, #0
 801392c:	60da      	str	r2, [r3, #12]
 801392e:	4b1f      	ldr	r3, [pc, #124]	@ (80139ac <tcp_process+0x7c8>)
 8013930:	2201      	movs	r2, #1
 8013932:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	220a      	movs	r2, #10
 8013938:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801393a:	4b1d      	ldr	r3, [pc, #116]	@ (80139b0 <tcp_process+0x7cc>)
 801393c:	681a      	ldr	r2, [r3, #0]
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	60da      	str	r2, [r3, #12]
 8013942:	4a1b      	ldr	r2, [pc, #108]	@ (80139b0 <tcp_process+0x7cc>)
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6013      	str	r3, [r2, #0]
 8013948:	f002 fc44 	bl	80161d4 <tcp_timer_needed>
      }
      break;
 801394c:	e026      	b.n	801399c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801394e:	6878      	ldr	r0, [r7, #4]
 8013950:	f000 f93c 	bl	8013bcc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013954:	4b17      	ldr	r3, [pc, #92]	@ (80139b4 <tcp_process+0x7d0>)
 8013956:	781b      	ldrb	r3, [r3, #0]
 8013958:	f003 0310 	and.w	r3, r3, #16
 801395c:	2b00      	cmp	r3, #0
 801395e:	d01f      	beq.n	80139a0 <tcp_process+0x7bc>
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013964:	4b14      	ldr	r3, [pc, #80]	@ (80139b8 <tcp_process+0x7d4>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	429a      	cmp	r2, r3
 801396a:	d119      	bne.n	80139a0 <tcp_process+0x7bc>
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013970:	2b00      	cmp	r3, #0
 8013972:	d115      	bne.n	80139a0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013974:	4b11      	ldr	r3, [pc, #68]	@ (80139bc <tcp_process+0x7d8>)
 8013976:	781b      	ldrb	r3, [r3, #0]
 8013978:	f043 0310 	orr.w	r3, r3, #16
 801397c:	b2da      	uxtb	r2, r3
 801397e:	4b0f      	ldr	r3, [pc, #60]	@ (80139bc <tcp_process+0x7d8>)
 8013980:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013982:	e00d      	b.n	80139a0 <tcp_process+0x7bc>
    default:
      break;
 8013984:	bf00      	nop
 8013986:	e00c      	b.n	80139a2 <tcp_process+0x7be>
      break;
 8013988:	bf00      	nop
 801398a:	e00a      	b.n	80139a2 <tcp_process+0x7be>
      break;
 801398c:	bf00      	nop
 801398e:	e008      	b.n	80139a2 <tcp_process+0x7be>
      break;
 8013990:	bf00      	nop
 8013992:	e006      	b.n	80139a2 <tcp_process+0x7be>
      break;
 8013994:	bf00      	nop
 8013996:	e004      	b.n	80139a2 <tcp_process+0x7be>
      break;
 8013998:	bf00      	nop
 801399a:	e002      	b.n	80139a2 <tcp_process+0x7be>
      break;
 801399c:	bf00      	nop
 801399e:	e000      	b.n	80139a2 <tcp_process+0x7be>
      break;
 80139a0:	bf00      	nop
  }
  return ERR_OK;
 80139a2:	2300      	movs	r3, #0
}
 80139a4:	4618      	mov	r0, r3
 80139a6:	3724      	adds	r7, #36	@ 0x24
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd90      	pop	{r4, r7, pc}
 80139ac:	20060ba0 	.word	0x20060ba0
 80139b0:	20060b9c 	.word	0x20060b9c
 80139b4:	20060bd0 	.word	0x20060bd0
 80139b8:	20060bc8 	.word	0x20060bc8
 80139bc:	20060bd1 	.word	0x20060bd1
 80139c0:	20060b98 	.word	0x20060b98

080139c4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80139c4:	b590      	push	{r4, r7, lr}
 80139c6:	b085      	sub	sp, #20
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
 80139cc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d106      	bne.n	80139e2 <tcp_oos_insert_segment+0x1e>
 80139d4:	4b3b      	ldr	r3, [pc, #236]	@ (8013ac4 <tcp_oos_insert_segment+0x100>)
 80139d6:	f240 421f 	movw	r2, #1055	@ 0x41f
 80139da:	493b      	ldr	r1, [pc, #236]	@ (8013ac8 <tcp_oos_insert_segment+0x104>)
 80139dc:	483b      	ldr	r0, [pc, #236]	@ (8013acc <tcp_oos_insert_segment+0x108>)
 80139de:	f005 fc0b 	bl	80191f8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	68db      	ldr	r3, [r3, #12]
 80139e6:	899b      	ldrh	r3, [r3, #12]
 80139e8:	b29b      	uxth	r3, r3
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7fb fb56 	bl	800f09c <lwip_htons>
 80139f0:	4603      	mov	r3, r0
 80139f2:	b2db      	uxtb	r3, r3
 80139f4:	f003 0301 	and.w	r3, r3, #1
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d028      	beq.n	8013a4e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80139fc:	6838      	ldr	r0, [r7, #0]
 80139fe:	f7fe fa63 	bl	8011ec8 <tcp_segs_free>
    next = NULL;
 8013a02:	2300      	movs	r3, #0
 8013a04:	603b      	str	r3, [r7, #0]
 8013a06:	e056      	b.n	8013ab6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	68db      	ldr	r3, [r3, #12]
 8013a0c:	899b      	ldrh	r3, [r3, #12]
 8013a0e:	b29b      	uxth	r3, r3
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7fb fb43 	bl	800f09c <lwip_htons>
 8013a16:	4603      	mov	r3, r0
 8013a18:	b2db      	uxtb	r3, r3
 8013a1a:	f003 0301 	and.w	r3, r3, #1
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d00d      	beq.n	8013a3e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	68db      	ldr	r3, [r3, #12]
 8013a26:	899b      	ldrh	r3, [r3, #12]
 8013a28:	b29c      	uxth	r4, r3
 8013a2a:	2001      	movs	r0, #1
 8013a2c:	f7fb fb36 	bl	800f09c <lwip_htons>
 8013a30:	4603      	mov	r3, r0
 8013a32:	461a      	mov	r2, r3
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	68db      	ldr	r3, [r3, #12]
 8013a38:	4322      	orrs	r2, r4
 8013a3a:	b292      	uxth	r2, r2
 8013a3c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013a48:	68f8      	ldr	r0, [r7, #12]
 8013a4a:	f7fe fa52 	bl	8011ef2 <tcp_seg_free>
    while (next &&
 8013a4e:	683b      	ldr	r3, [r7, #0]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d00e      	beq.n	8013a72 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	891b      	ldrh	r3, [r3, #8]
 8013a58:	461a      	mov	r2, r3
 8013a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8013ad0 <tcp_oos_insert_segment+0x10c>)
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	441a      	add	r2, r3
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	68db      	ldr	r3, [r3, #12]
 8013a64:	685b      	ldr	r3, [r3, #4]
 8013a66:	6839      	ldr	r1, [r7, #0]
 8013a68:	8909      	ldrh	r1, [r1, #8]
 8013a6a:	440b      	add	r3, r1
 8013a6c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	daca      	bge.n	8013a08 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d01e      	beq.n	8013ab6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	891b      	ldrh	r3, [r3, #8]
 8013a7c:	461a      	mov	r2, r3
 8013a7e:	4b14      	ldr	r3, [pc, #80]	@ (8013ad0 <tcp_oos_insert_segment+0x10c>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	441a      	add	r2, r3
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	68db      	ldr	r3, [r3, #12]
 8013a88:	685b      	ldr	r3, [r3, #4]
 8013a8a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	dd12      	ble.n	8013ab6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	68db      	ldr	r3, [r3, #12]
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	b29a      	uxth	r2, r3
 8013a98:	4b0d      	ldr	r3, [pc, #52]	@ (8013ad0 <tcp_oos_insert_segment+0x10c>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	b29b      	uxth	r3, r3
 8013a9e:	1ad3      	subs	r3, r2, r3
 8013aa0:	b29a      	uxth	r2, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	685a      	ldr	r2, [r3, #4]
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	891b      	ldrh	r3, [r3, #8]
 8013aae:	4619      	mov	r1, r3
 8013ab0:	4610      	mov	r0, r2
 8013ab2:	f7fc fe17 	bl	80106e4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	683a      	ldr	r2, [r7, #0]
 8013aba:	601a      	str	r2, [r3, #0]
}
 8013abc:	bf00      	nop
 8013abe:	3714      	adds	r7, #20
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd90      	pop	{r4, r7, pc}
 8013ac4:	0801b3a4 	.word	0x0801b3a4
 8013ac8:	0801b664 	.word	0x0801b664
 8013acc:	0801b3f0 	.word	0x0801b3f0
 8013ad0:	20060bc4 	.word	0x20060bc4

08013ad4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013ad4:	b5b0      	push	{r4, r5, r7, lr}
 8013ad6:	b086      	sub	sp, #24
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	60f8      	str	r0, [r7, #12]
 8013adc:	60b9      	str	r1, [r7, #8]
 8013ade:	607a      	str	r2, [r7, #4]
 8013ae0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013ae2:	e03e      	b.n	8013b62 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	685b      	ldr	r3, [r3, #4]
 8013af2:	4618      	mov	r0, r3
 8013af4:	f7fd f80a 	bl	8010b0c <pbuf_clen>
 8013af8:	4603      	mov	r3, r0
 8013afa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013b02:	8a7a      	ldrh	r2, [r7, #18]
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d906      	bls.n	8013b16 <tcp_free_acked_segments+0x42>
 8013b08:	4b2a      	ldr	r3, [pc, #168]	@ (8013bb4 <tcp_free_acked_segments+0xe0>)
 8013b0a:	f240 4257 	movw	r2, #1111	@ 0x457
 8013b0e:	492a      	ldr	r1, [pc, #168]	@ (8013bb8 <tcp_free_acked_segments+0xe4>)
 8013b10:	482a      	ldr	r0, [pc, #168]	@ (8013bbc <tcp_free_acked_segments+0xe8>)
 8013b12:	f005 fb71 	bl	80191f8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8013b1c:	8a7b      	ldrh	r3, [r7, #18]
 8013b1e:	1ad3      	subs	r3, r2, r3
 8013b20:	b29a      	uxth	r2, r3
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013b28:	697b      	ldr	r3, [r7, #20]
 8013b2a:	891a      	ldrh	r2, [r3, #8]
 8013b2c:	4b24      	ldr	r3, [pc, #144]	@ (8013bc0 <tcp_free_acked_segments+0xec>)
 8013b2e:	881b      	ldrh	r3, [r3, #0]
 8013b30:	4413      	add	r3, r2
 8013b32:	b29a      	uxth	r2, r3
 8013b34:	4b22      	ldr	r3, [pc, #136]	@ (8013bc0 <tcp_free_acked_segments+0xec>)
 8013b36:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013b38:	6978      	ldr	r0, [r7, #20]
 8013b3a:	f7fe f9da 	bl	8011ef2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d00c      	beq.n	8013b62 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d109      	bne.n	8013b62 <tcp_free_acked_segments+0x8e>
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d106      	bne.n	8013b62 <tcp_free_acked_segments+0x8e>
 8013b54:	4b17      	ldr	r3, [pc, #92]	@ (8013bb4 <tcp_free_acked_segments+0xe0>)
 8013b56:	f240 4261 	movw	r2, #1121	@ 0x461
 8013b5a:	491a      	ldr	r1, [pc, #104]	@ (8013bc4 <tcp_free_acked_segments+0xf0>)
 8013b5c:	4817      	ldr	r0, [pc, #92]	@ (8013bbc <tcp_free_acked_segments+0xe8>)
 8013b5e:	f005 fb4b 	bl	80191f8 <iprintf>
  while (seg_list != NULL &&
 8013b62:	68bb      	ldr	r3, [r7, #8]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d020      	beq.n	8013baa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013b68:	68bb      	ldr	r3, [r7, #8]
 8013b6a:	68db      	ldr	r3, [r3, #12]
 8013b6c:	685b      	ldr	r3, [r3, #4]
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7fb faa9 	bl	800f0c6 <lwip_htonl>
 8013b74:	4604      	mov	r4, r0
 8013b76:	68bb      	ldr	r3, [r7, #8]
 8013b78:	891b      	ldrh	r3, [r3, #8]
 8013b7a:	461d      	mov	r5, r3
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	68db      	ldr	r3, [r3, #12]
 8013b80:	899b      	ldrh	r3, [r3, #12]
 8013b82:	b29b      	uxth	r3, r3
 8013b84:	4618      	mov	r0, r3
 8013b86:	f7fb fa89 	bl	800f09c <lwip_htons>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	b2db      	uxtb	r3, r3
 8013b8e:	f003 0303 	and.w	r3, r3, #3
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d001      	beq.n	8013b9a <tcp_free_acked_segments+0xc6>
 8013b96:	2301      	movs	r3, #1
 8013b98:	e000      	b.n	8013b9c <tcp_free_acked_segments+0xc8>
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	442b      	add	r3, r5
 8013b9e:	18e2      	adds	r2, r4, r3
 8013ba0:	4b09      	ldr	r3, [pc, #36]	@ (8013bc8 <tcp_free_acked_segments+0xf4>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	dd9c      	ble.n	8013ae4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013baa:	68bb      	ldr	r3, [r7, #8]
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3718      	adds	r7, #24
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8013bb4:	0801b3a4 	.word	0x0801b3a4
 8013bb8:	0801b68c 	.word	0x0801b68c
 8013bbc:	0801b3f0 	.word	0x0801b3f0
 8013bc0:	20060bcc 	.word	0x20060bcc
 8013bc4:	0801b6b4 	.word	0x0801b6b4
 8013bc8:	20060bc8 	.word	0x20060bc8

08013bcc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013bcc:	b5b0      	push	{r4, r5, r7, lr}
 8013bce:	b094      	sub	sp, #80	@ 0x50
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d106      	bne.n	8013bec <tcp_receive+0x20>
 8013bde:	4b91      	ldr	r3, [pc, #580]	@ (8013e24 <tcp_receive+0x258>)
 8013be0:	f240 427b 	movw	r2, #1147	@ 0x47b
 8013be4:	4990      	ldr	r1, [pc, #576]	@ (8013e28 <tcp_receive+0x25c>)
 8013be6:	4891      	ldr	r0, [pc, #580]	@ (8013e2c <tcp_receive+0x260>)
 8013be8:	f005 fb06 	bl	80191f8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	7d1b      	ldrb	r3, [r3, #20]
 8013bf0:	2b03      	cmp	r3, #3
 8013bf2:	d806      	bhi.n	8013c02 <tcp_receive+0x36>
 8013bf4:	4b8b      	ldr	r3, [pc, #556]	@ (8013e24 <tcp_receive+0x258>)
 8013bf6:	f240 427c 	movw	r2, #1148	@ 0x47c
 8013bfa:	498d      	ldr	r1, [pc, #564]	@ (8013e30 <tcp_receive+0x264>)
 8013bfc:	488b      	ldr	r0, [pc, #556]	@ (8013e2c <tcp_receive+0x260>)
 8013bfe:	f005 fafb 	bl	80191f8 <iprintf>

  if (flags & TCP_ACK) {
 8013c02:	4b8c      	ldr	r3, [pc, #560]	@ (8013e34 <tcp_receive+0x268>)
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	f003 0310 	and.w	r3, r3, #16
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	f000 8264 	beq.w	80140d8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013c16:	461a      	mov	r2, r3
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013c1c:	4413      	add	r3, r2
 8013c1e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013c24:	4b84      	ldr	r3, [pc, #528]	@ (8013e38 <tcp_receive+0x26c>)
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	1ad3      	subs	r3, r2, r3
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	db1b      	blt.n	8013c66 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013c32:	4b81      	ldr	r3, [pc, #516]	@ (8013e38 <tcp_receive+0x26c>)
 8013c34:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013c36:	429a      	cmp	r2, r3
 8013c38:	d106      	bne.n	8013c48 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8013e3c <tcp_receive+0x270>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	1ad3      	subs	r3, r2, r3
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	db0e      	blt.n	8013c66 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013c4c:	4b7b      	ldr	r3, [pc, #492]	@ (8013e3c <tcp_receive+0x270>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013c50:	429a      	cmp	r2, r3
 8013c52:	d125      	bne.n	8013ca0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013c54:	4b7a      	ldr	r3, [pc, #488]	@ (8013e40 <tcp_receive+0x274>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	89db      	ldrh	r3, [r3, #14]
 8013c5a:	b29a      	uxth	r2, r3
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013c62:	429a      	cmp	r2, r3
 8013c64:	d91c      	bls.n	8013ca0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013c66:	4b76      	ldr	r3, [pc, #472]	@ (8013e40 <tcp_receive+0x274>)
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	89db      	ldrh	r3, [r3, #14]
 8013c6c:	b29a      	uxth	r2, r3
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013c80:	429a      	cmp	r2, r3
 8013c82:	d205      	bcs.n	8013c90 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8013c90:	4b69      	ldr	r3, [pc, #420]	@ (8013e38 <tcp_receive+0x26c>)
 8013c92:	681a      	ldr	r2, [r3, #0]
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8013c98:	4b68      	ldr	r3, [pc, #416]	@ (8013e3c <tcp_receive+0x270>)
 8013c9a:	681a      	ldr	r2, [r3, #0]
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013ca0:	4b66      	ldr	r3, [pc, #408]	@ (8013e3c <tcp_receive+0x270>)
 8013ca2:	681a      	ldr	r2, [r3, #0]
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ca8:	1ad3      	subs	r3, r2, r3
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	dc58      	bgt.n	8013d60 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013cae:	4b65      	ldr	r3, [pc, #404]	@ (8013e44 <tcp_receive+0x278>)
 8013cb0:	881b      	ldrh	r3, [r3, #0]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d14b      	bne.n	8013d4e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013cba:	687a      	ldr	r2, [r7, #4]
 8013cbc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8013cc0:	4413      	add	r3, r2
 8013cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013cc4:	429a      	cmp	r2, r3
 8013cc6:	d142      	bne.n	8013d4e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	db3d      	blt.n	8013d4e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013cd6:	4b59      	ldr	r3, [pc, #356]	@ (8013e3c <tcp_receive+0x270>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d137      	bne.n	8013d4e <tcp_receive+0x182>
              found_dupack = 1;
 8013cde:	2301      	movs	r3, #1
 8013ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013ce8:	2bff      	cmp	r3, #255	@ 0xff
 8013cea:	d007      	beq.n	8013cfc <tcp_receive+0x130>
                ++pcb->dupacks;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013cf2:	3301      	adds	r3, #1
 8013cf4:	b2da      	uxtb	r2, r3
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013d02:	2b03      	cmp	r3, #3
 8013d04:	d91b      	bls.n	8013d3e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013d10:	4413      	add	r3, r2
 8013d12:	b29a      	uxth	r2, r3
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	d30a      	bcc.n	8013d34 <tcp_receive+0x168>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013d28:	4413      	add	r3, r2
 8013d2a:	b29a      	uxth	r2, r3
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013d32:	e004      	b.n	8013d3e <tcp_receive+0x172>
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d3a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013d44:	2b02      	cmp	r3, #2
 8013d46:	d902      	bls.n	8013d4e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013d48:	6878      	ldr	r0, [r7, #4]
 8013d4a:	f001 fee7 	bl	8015b1c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	f040 8161 	bne.w	8014018 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	2200      	movs	r2, #0
 8013d5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013d5e:	e15b      	b.n	8014018 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013d60:	4b36      	ldr	r3, [pc, #216]	@ (8013e3c <tcp_receive+0x270>)
 8013d62:	681a      	ldr	r2, [r3, #0]
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d68:	1ad3      	subs	r3, r2, r3
 8013d6a:	3b01      	subs	r3, #1
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	f2c0 814e 	blt.w	801400e <tcp_receive+0x442>
 8013d72:	4b32      	ldr	r3, [pc, #200]	@ (8013e3c <tcp_receive+0x270>)
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013d7a:	1ad3      	subs	r3, r2, r3
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	f300 8146 	bgt.w	801400e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	8b5b      	ldrh	r3, [r3, #26]
 8013d86:	f003 0304 	and.w	r3, r3, #4
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d010      	beq.n	8013db0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	8b5b      	ldrh	r3, [r3, #26]
 8013d92:	f023 0304 	bic.w	r3, r3, #4
 8013d96:	b29a      	uxth	r2, r3
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2200      	movs	r2, #0
 8013dac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2200      	movs	r2, #0
 8013db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013dbe:	10db      	asrs	r3, r3, #3
 8013dc0:	b21b      	sxth	r3, r3
 8013dc2:	b29a      	uxth	r2, r3
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013dca:	b29b      	uxth	r3, r3
 8013dcc:	4413      	add	r3, r2
 8013dce:	b29b      	uxth	r3, r3
 8013dd0:	b21a      	sxth	r2, r3
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013dd8:	4b18      	ldr	r3, [pc, #96]	@ (8013e3c <tcp_receive+0x270>)
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	b29a      	uxth	r2, r3
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013de2:	b29b      	uxth	r3, r3
 8013de4:	1ad3      	subs	r3, r2, r3
 8013de6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2200      	movs	r2, #0
 8013dec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8013df0:	4b12      	ldr	r3, [pc, #72]	@ (8013e3c <tcp_receive+0x270>)
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	7d1b      	ldrb	r3, [r3, #20]
 8013dfc:	2b03      	cmp	r3, #3
 8013dfe:	f240 8097 	bls.w	8013f30 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	d245      	bcs.n	8013e9e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	8b5b      	ldrh	r3, [r3, #26]
 8013e16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d014      	beq.n	8013e48 <tcp_receive+0x27c>
 8013e1e:	2301      	movs	r3, #1
 8013e20:	e013      	b.n	8013e4a <tcp_receive+0x27e>
 8013e22:	bf00      	nop
 8013e24:	0801b3a4 	.word	0x0801b3a4
 8013e28:	0801b6d4 	.word	0x0801b6d4
 8013e2c:	0801b3f0 	.word	0x0801b3f0
 8013e30:	0801b6f0 	.word	0x0801b6f0
 8013e34:	20060bd0 	.word	0x20060bd0
 8013e38:	20060bc4 	.word	0x20060bc4
 8013e3c:	20060bc8 	.word	0x20060bc8
 8013e40:	20060bb4 	.word	0x20060bb4
 8013e44:	20060bce 	.word	0x20060bce
 8013e48:	2302      	movs	r3, #2
 8013e4a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013e4e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013e52:	b29a      	uxth	r2, r3
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013e58:	fb12 f303 	smulbb	r3, r2, r3
 8013e5c:	b29b      	uxth	r3, r3
 8013e5e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013e60:	4293      	cmp	r3, r2
 8013e62:	bf28      	it	cs
 8013e64:	4613      	movcs	r3, r2
 8013e66:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013e6e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013e70:	4413      	add	r3, r2
 8013e72:	b29a      	uxth	r2, r3
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d309      	bcc.n	8013e92 <tcp_receive+0x2c6>
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013e84:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013e86:	4413      	add	r3, r2
 8013e88:	b29a      	uxth	r2, r3
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013e90:	e04e      	b.n	8013f30 <tcp_receive+0x364>
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013e98:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013e9c:	e048      	b.n	8013f30 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013ea4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013ea6:	4413      	add	r3, r2
 8013ea8:	b29a      	uxth	r2, r3
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8013eb0:	429a      	cmp	r2, r3
 8013eb2:	d309      	bcc.n	8013ec8 <tcp_receive+0x2fc>
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013eba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013ebc:	4413      	add	r3, r2
 8013ebe:	b29a      	uxth	r2, r3
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8013ec6:	e004      	b.n	8013ed2 <tcp_receive+0x306>
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013ece:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d326      	bcc.n	8013f30 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013eee:	1ad3      	subs	r3, r2, r3
 8013ef0:	b29a      	uxth	r2, r3
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013f02:	4413      	add	r3, r2
 8013f04:	b29a      	uxth	r2, r3
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013f0c:	429a      	cmp	r2, r3
 8013f0e:	d30a      	bcc.n	8013f26 <tcp_receive+0x35a>
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013f1a:	4413      	add	r3, r2
 8013f1c:	b29a      	uxth	r2, r3
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013f24:	e004      	b.n	8013f30 <tcp_receive+0x364>
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013f2c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f38:	4a98      	ldr	r2, [pc, #608]	@ (801419c <tcp_receive+0x5d0>)
 8013f3a:	6878      	ldr	r0, [r7, #4]
 8013f3c:	f7ff fdca 	bl	8013ad4 <tcp_free_acked_segments>
 8013f40:	4602      	mov	r2, r0
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f4e:	4a94      	ldr	r2, [pc, #592]	@ (80141a0 <tcp_receive+0x5d4>)
 8013f50:	6878      	ldr	r0, [r7, #4]
 8013f52:	f7ff fdbf 	bl	8013ad4 <tcp_free_acked_segments>
 8013f56:	4602      	mov	r2, r0
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d104      	bne.n	8013f6e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013f6a:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013f6c:	e002      	b.n	8013f74 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2200      	movs	r2, #0
 8013f72:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	2200      	movs	r2, #0
 8013f78:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d103      	bne.n	8013f8a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2200      	movs	r2, #0
 8013f86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8013f90:	4b84      	ldr	r3, [pc, #528]	@ (80141a4 <tcp_receive+0x5d8>)
 8013f92:	881b      	ldrh	r3, [r3, #0]
 8013f94:	4413      	add	r3, r2
 8013f96:	b29a      	uxth	r2, r3
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	8b5b      	ldrh	r3, [r3, #26]
 8013fa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d035      	beq.n	8014016 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d118      	bne.n	8013fe4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d00c      	beq.n	8013fd4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013fc2:	68db      	ldr	r3, [r3, #12]
 8013fc4:	685b      	ldr	r3, [r3, #4]
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7fb f87d 	bl	800f0c6 <lwip_htonl>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	dc20      	bgt.n	8014016 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	8b5b      	ldrh	r3, [r3, #26]
 8013fd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013fdc:	b29a      	uxth	r2, r3
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013fe2:	e018      	b.n	8014016 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013fec:	68db      	ldr	r3, [r3, #12]
 8013fee:	685b      	ldr	r3, [r3, #4]
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f7fb f868 	bl	800f0c6 <lwip_htonl>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	1ae3      	subs	r3, r4, r3
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	dc0b      	bgt.n	8014016 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	8b5b      	ldrh	r3, [r3, #26]
 8014002:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014006:	b29a      	uxth	r2, r3
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801400c:	e003      	b.n	8014016 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801400e:	6878      	ldr	r0, [r7, #4]
 8014010:	f001 ff70 	bl	8015ef4 <tcp_send_empty_ack>
 8014014:	e000      	b.n	8014018 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014016:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801401c:	2b00      	cmp	r3, #0
 801401e:	d05b      	beq.n	80140d8 <tcp_receive+0x50c>
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014024:	4b60      	ldr	r3, [pc, #384]	@ (80141a8 <tcp_receive+0x5dc>)
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	1ad3      	subs	r3, r2, r3
 801402a:	2b00      	cmp	r3, #0
 801402c:	da54      	bge.n	80140d8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801402e:	4b5f      	ldr	r3, [pc, #380]	@ (80141ac <tcp_receive+0x5e0>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	b29a      	uxth	r2, r3
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014038:	b29b      	uxth	r3, r3
 801403a:	1ad3      	subs	r3, r2, r3
 801403c:	b29b      	uxth	r3, r3
 801403e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014042:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801404c:	10db      	asrs	r3, r3, #3
 801404e:	b21b      	sxth	r3, r3
 8014050:	b29b      	uxth	r3, r3
 8014052:	1ad3      	subs	r3, r2, r3
 8014054:	b29b      	uxth	r3, r3
 8014056:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014060:	b29a      	uxth	r2, r3
 8014062:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8014066:	4413      	add	r3, r2
 8014068:	b29b      	uxth	r3, r3
 801406a:	b21a      	sxth	r2, r3
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8014070:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8014074:	2b00      	cmp	r3, #0
 8014076:	da05      	bge.n	8014084 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014078:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801407c:	425b      	negs	r3, r3
 801407e:	b29b      	uxth	r3, r3
 8014080:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014084:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801408e:	109b      	asrs	r3, r3, #2
 8014090:	b21b      	sxth	r3, r3
 8014092:	b29b      	uxth	r3, r3
 8014094:	1ad3      	subs	r3, r2, r3
 8014096:	b29b      	uxth	r3, r3
 8014098:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80140a2:	b29a      	uxth	r2, r3
 80140a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80140a8:	4413      	add	r3, r2
 80140aa:	b29b      	uxth	r3, r3
 80140ac:	b21a      	sxth	r2, r3
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80140b8:	10db      	asrs	r3, r3, #3
 80140ba:	b21b      	sxth	r3, r3
 80140bc:	b29a      	uxth	r2, r3
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80140c4:	b29b      	uxth	r3, r3
 80140c6:	4413      	add	r3, r2
 80140c8:	b29b      	uxth	r3, r3
 80140ca:	b21a      	sxth	r2, r3
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2200      	movs	r2, #0
 80140d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80140d8:	4b35      	ldr	r3, [pc, #212]	@ (80141b0 <tcp_receive+0x5e4>)
 80140da:	881b      	ldrh	r3, [r3, #0]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	f000 84df 	beq.w	8014aa0 <tcp_receive+0xed4>
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	7d1b      	ldrb	r3, [r3, #20]
 80140e6:	2b06      	cmp	r3, #6
 80140e8:	f200 84da 	bhi.w	8014aa0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80140f0:	4b30      	ldr	r3, [pc, #192]	@ (80141b4 <tcp_receive+0x5e8>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	1ad3      	subs	r3, r2, r3
 80140f6:	3b01      	subs	r3, #1
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	f2c0 808f 	blt.w	801421c <tcp_receive+0x650>
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014102:	4b2b      	ldr	r3, [pc, #172]	@ (80141b0 <tcp_receive+0x5e4>)
 8014104:	881b      	ldrh	r3, [r3, #0]
 8014106:	4619      	mov	r1, r3
 8014108:	4b2a      	ldr	r3, [pc, #168]	@ (80141b4 <tcp_receive+0x5e8>)
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	440b      	add	r3, r1
 801410e:	1ad3      	subs	r3, r2, r3
 8014110:	3301      	adds	r3, #1
 8014112:	2b00      	cmp	r3, #0
 8014114:	f300 8082 	bgt.w	801421c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014118:	4b27      	ldr	r3, [pc, #156]	@ (80141b8 <tcp_receive+0x5ec>)
 801411a:	685b      	ldr	r3, [r3, #4]
 801411c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014122:	4b24      	ldr	r3, [pc, #144]	@ (80141b4 <tcp_receive+0x5e8>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	1ad3      	subs	r3, r2, r3
 8014128:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801412a:	4b23      	ldr	r3, [pc, #140]	@ (80141b8 <tcp_receive+0x5ec>)
 801412c:	685b      	ldr	r3, [r3, #4]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d106      	bne.n	8014140 <tcp_receive+0x574>
 8014132:	4b22      	ldr	r3, [pc, #136]	@ (80141bc <tcp_receive+0x5f0>)
 8014134:	f240 5294 	movw	r2, #1428	@ 0x594
 8014138:	4921      	ldr	r1, [pc, #132]	@ (80141c0 <tcp_receive+0x5f4>)
 801413a:	4822      	ldr	r0, [pc, #136]	@ (80141c4 <tcp_receive+0x5f8>)
 801413c:	f005 f85c 	bl	80191f8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014142:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8014146:	4293      	cmp	r3, r2
 8014148:	d906      	bls.n	8014158 <tcp_receive+0x58c>
 801414a:	4b1c      	ldr	r3, [pc, #112]	@ (80141bc <tcp_receive+0x5f0>)
 801414c:	f240 5295 	movw	r2, #1429	@ 0x595
 8014150:	491d      	ldr	r1, [pc, #116]	@ (80141c8 <tcp_receive+0x5fc>)
 8014152:	481c      	ldr	r0, [pc, #112]	@ (80141c4 <tcp_receive+0x5f8>)
 8014154:	f005 f850 	bl	80191f8 <iprintf>
      off = (u16_t)off32;
 8014158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801415a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801415e:	4b16      	ldr	r3, [pc, #88]	@ (80141b8 <tcp_receive+0x5ec>)
 8014160:	685b      	ldr	r3, [r3, #4]
 8014162:	891b      	ldrh	r3, [r3, #8]
 8014164:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014168:	429a      	cmp	r2, r3
 801416a:	d906      	bls.n	801417a <tcp_receive+0x5ae>
 801416c:	4b13      	ldr	r3, [pc, #76]	@ (80141bc <tcp_receive+0x5f0>)
 801416e:	f240 5297 	movw	r2, #1431	@ 0x597
 8014172:	4916      	ldr	r1, [pc, #88]	@ (80141cc <tcp_receive+0x600>)
 8014174:	4813      	ldr	r0, [pc, #76]	@ (80141c4 <tcp_receive+0x5f8>)
 8014176:	f005 f83f 	bl	80191f8 <iprintf>
      inseg.len -= off;
 801417a:	4b0f      	ldr	r3, [pc, #60]	@ (80141b8 <tcp_receive+0x5ec>)
 801417c:	891a      	ldrh	r2, [r3, #8]
 801417e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014182:	1ad3      	subs	r3, r2, r3
 8014184:	b29a      	uxth	r2, r3
 8014186:	4b0c      	ldr	r3, [pc, #48]	@ (80141b8 <tcp_receive+0x5ec>)
 8014188:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801418a:	4b0b      	ldr	r3, [pc, #44]	@ (80141b8 <tcp_receive+0x5ec>)
 801418c:	685b      	ldr	r3, [r3, #4]
 801418e:	891a      	ldrh	r2, [r3, #8]
 8014190:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014194:	1ad3      	subs	r3, r2, r3
 8014196:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8014198:	e02a      	b.n	80141f0 <tcp_receive+0x624>
 801419a:	bf00      	nop
 801419c:	0801b70c 	.word	0x0801b70c
 80141a0:	0801b714 	.word	0x0801b714
 80141a4:	20060bcc 	.word	0x20060bcc
 80141a8:	20060bc8 	.word	0x20060bc8
 80141ac:	20060b8c 	.word	0x20060b8c
 80141b0:	20060bce 	.word	0x20060bce
 80141b4:	20060bc4 	.word	0x20060bc4
 80141b8:	20060ba4 	.word	0x20060ba4
 80141bc:	0801b3a4 	.word	0x0801b3a4
 80141c0:	0801b71c 	.word	0x0801b71c
 80141c4:	0801b3f0 	.word	0x0801b3f0
 80141c8:	0801b72c 	.word	0x0801b72c
 80141cc:	0801b73c 	.word	0x0801b73c
        off -= p->len;
 80141d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141d2:	895b      	ldrh	r3, [r3, #10]
 80141d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80141d8:	1ad3      	subs	r3, r2, r3
 80141da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80141de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141e0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80141e2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80141e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141e6:	2200      	movs	r2, #0
 80141e8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80141ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80141f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141f2:	895b      	ldrh	r3, [r3, #10]
 80141f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80141f8:	429a      	cmp	r2, r3
 80141fa:	d8e9      	bhi.n	80141d0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80141fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014200:	4619      	mov	r1, r3
 8014202:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8014204:	f7fc fb6e 	bl	80108e4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801420c:	4a90      	ldr	r2, [pc, #576]	@ (8014450 <tcp_receive+0x884>)
 801420e:	6013      	str	r3, [r2, #0]
 8014210:	4b90      	ldr	r3, [pc, #576]	@ (8014454 <tcp_receive+0x888>)
 8014212:	68db      	ldr	r3, [r3, #12]
 8014214:	4a8e      	ldr	r2, [pc, #568]	@ (8014450 <tcp_receive+0x884>)
 8014216:	6812      	ldr	r2, [r2, #0]
 8014218:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801421a:	e00d      	b.n	8014238 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801421c:	4b8c      	ldr	r3, [pc, #560]	@ (8014450 <tcp_receive+0x884>)
 801421e:	681a      	ldr	r2, [r3, #0]
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014224:	1ad3      	subs	r3, r2, r3
 8014226:	2b00      	cmp	r3, #0
 8014228:	da06      	bge.n	8014238 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	8b5b      	ldrh	r3, [r3, #26]
 801422e:	f043 0302 	orr.w	r3, r3, #2
 8014232:	b29a      	uxth	r2, r3
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014238:	4b85      	ldr	r3, [pc, #532]	@ (8014450 <tcp_receive+0x884>)
 801423a:	681a      	ldr	r2, [r3, #0]
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014240:	1ad3      	subs	r3, r2, r3
 8014242:	2b00      	cmp	r3, #0
 8014244:	f2c0 8427 	blt.w	8014a96 <tcp_receive+0xeca>
 8014248:	4b81      	ldr	r3, [pc, #516]	@ (8014450 <tcp_receive+0x884>)
 801424a:	681a      	ldr	r2, [r3, #0]
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014250:	6879      	ldr	r1, [r7, #4]
 8014252:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014254:	440b      	add	r3, r1
 8014256:	1ad3      	subs	r3, r2, r3
 8014258:	3301      	adds	r3, #1
 801425a:	2b00      	cmp	r3, #0
 801425c:	f300 841b 	bgt.w	8014a96 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014264:	4b7a      	ldr	r3, [pc, #488]	@ (8014450 <tcp_receive+0x884>)
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	429a      	cmp	r2, r3
 801426a:	f040 8298 	bne.w	801479e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801426e:	4b79      	ldr	r3, [pc, #484]	@ (8014454 <tcp_receive+0x888>)
 8014270:	891c      	ldrh	r4, [r3, #8]
 8014272:	4b78      	ldr	r3, [pc, #480]	@ (8014454 <tcp_receive+0x888>)
 8014274:	68db      	ldr	r3, [r3, #12]
 8014276:	899b      	ldrh	r3, [r3, #12]
 8014278:	b29b      	uxth	r3, r3
 801427a:	4618      	mov	r0, r3
 801427c:	f7fa ff0e 	bl	800f09c <lwip_htons>
 8014280:	4603      	mov	r3, r0
 8014282:	b2db      	uxtb	r3, r3
 8014284:	f003 0303 	and.w	r3, r3, #3
 8014288:	2b00      	cmp	r3, #0
 801428a:	d001      	beq.n	8014290 <tcp_receive+0x6c4>
 801428c:	2301      	movs	r3, #1
 801428e:	e000      	b.n	8014292 <tcp_receive+0x6c6>
 8014290:	2300      	movs	r3, #0
 8014292:	4423      	add	r3, r4
 8014294:	b29a      	uxth	r2, r3
 8014296:	4b70      	ldr	r3, [pc, #448]	@ (8014458 <tcp_receive+0x88c>)
 8014298:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801429e:	4b6e      	ldr	r3, [pc, #440]	@ (8014458 <tcp_receive+0x88c>)
 80142a0:	881b      	ldrh	r3, [r3, #0]
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d274      	bcs.n	8014390 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80142a6:	4b6b      	ldr	r3, [pc, #428]	@ (8014454 <tcp_receive+0x888>)
 80142a8:	68db      	ldr	r3, [r3, #12]
 80142aa:	899b      	ldrh	r3, [r3, #12]
 80142ac:	b29b      	uxth	r3, r3
 80142ae:	4618      	mov	r0, r3
 80142b0:	f7fa fef4 	bl	800f09c <lwip_htons>
 80142b4:	4603      	mov	r3, r0
 80142b6:	b2db      	uxtb	r3, r3
 80142b8:	f003 0301 	and.w	r3, r3, #1
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d01e      	beq.n	80142fe <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80142c0:	4b64      	ldr	r3, [pc, #400]	@ (8014454 <tcp_receive+0x888>)
 80142c2:	68db      	ldr	r3, [r3, #12]
 80142c4:	899b      	ldrh	r3, [r3, #12]
 80142c6:	b29b      	uxth	r3, r3
 80142c8:	b21b      	sxth	r3, r3
 80142ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80142ce:	b21c      	sxth	r4, r3
 80142d0:	4b60      	ldr	r3, [pc, #384]	@ (8014454 <tcp_receive+0x888>)
 80142d2:	68db      	ldr	r3, [r3, #12]
 80142d4:	899b      	ldrh	r3, [r3, #12]
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	4618      	mov	r0, r3
 80142da:	f7fa fedf 	bl	800f09c <lwip_htons>
 80142de:	4603      	mov	r3, r0
 80142e0:	b2db      	uxtb	r3, r3
 80142e2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	4618      	mov	r0, r3
 80142ea:	f7fa fed7 	bl	800f09c <lwip_htons>
 80142ee:	4603      	mov	r3, r0
 80142f0:	b21b      	sxth	r3, r3
 80142f2:	4323      	orrs	r3, r4
 80142f4:	b21a      	sxth	r2, r3
 80142f6:	4b57      	ldr	r3, [pc, #348]	@ (8014454 <tcp_receive+0x888>)
 80142f8:	68db      	ldr	r3, [r3, #12]
 80142fa:	b292      	uxth	r2, r2
 80142fc:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014302:	4b54      	ldr	r3, [pc, #336]	@ (8014454 <tcp_receive+0x888>)
 8014304:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014306:	4b53      	ldr	r3, [pc, #332]	@ (8014454 <tcp_receive+0x888>)
 8014308:	68db      	ldr	r3, [r3, #12]
 801430a:	899b      	ldrh	r3, [r3, #12]
 801430c:	b29b      	uxth	r3, r3
 801430e:	4618      	mov	r0, r3
 8014310:	f7fa fec4 	bl	800f09c <lwip_htons>
 8014314:	4603      	mov	r3, r0
 8014316:	b2db      	uxtb	r3, r3
 8014318:	f003 0302 	and.w	r3, r3, #2
 801431c:	2b00      	cmp	r3, #0
 801431e:	d005      	beq.n	801432c <tcp_receive+0x760>
            inseg.len -= 1;
 8014320:	4b4c      	ldr	r3, [pc, #304]	@ (8014454 <tcp_receive+0x888>)
 8014322:	891b      	ldrh	r3, [r3, #8]
 8014324:	3b01      	subs	r3, #1
 8014326:	b29a      	uxth	r2, r3
 8014328:	4b4a      	ldr	r3, [pc, #296]	@ (8014454 <tcp_receive+0x888>)
 801432a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801432c:	4b49      	ldr	r3, [pc, #292]	@ (8014454 <tcp_receive+0x888>)
 801432e:	685b      	ldr	r3, [r3, #4]
 8014330:	4a48      	ldr	r2, [pc, #288]	@ (8014454 <tcp_receive+0x888>)
 8014332:	8912      	ldrh	r2, [r2, #8]
 8014334:	4611      	mov	r1, r2
 8014336:	4618      	mov	r0, r3
 8014338:	f7fc f9d4 	bl	80106e4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801433c:	4b45      	ldr	r3, [pc, #276]	@ (8014454 <tcp_receive+0x888>)
 801433e:	891c      	ldrh	r4, [r3, #8]
 8014340:	4b44      	ldr	r3, [pc, #272]	@ (8014454 <tcp_receive+0x888>)
 8014342:	68db      	ldr	r3, [r3, #12]
 8014344:	899b      	ldrh	r3, [r3, #12]
 8014346:	b29b      	uxth	r3, r3
 8014348:	4618      	mov	r0, r3
 801434a:	f7fa fea7 	bl	800f09c <lwip_htons>
 801434e:	4603      	mov	r3, r0
 8014350:	b2db      	uxtb	r3, r3
 8014352:	f003 0303 	and.w	r3, r3, #3
 8014356:	2b00      	cmp	r3, #0
 8014358:	d001      	beq.n	801435e <tcp_receive+0x792>
 801435a:	2301      	movs	r3, #1
 801435c:	e000      	b.n	8014360 <tcp_receive+0x794>
 801435e:	2300      	movs	r3, #0
 8014360:	4423      	add	r3, r4
 8014362:	b29a      	uxth	r2, r3
 8014364:	4b3c      	ldr	r3, [pc, #240]	@ (8014458 <tcp_receive+0x88c>)
 8014366:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014368:	4b3b      	ldr	r3, [pc, #236]	@ (8014458 <tcp_receive+0x88c>)
 801436a:	881b      	ldrh	r3, [r3, #0]
 801436c:	461a      	mov	r2, r3
 801436e:	4b38      	ldr	r3, [pc, #224]	@ (8014450 <tcp_receive+0x884>)
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	441a      	add	r2, r3
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014378:	6879      	ldr	r1, [r7, #4]
 801437a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801437c:	440b      	add	r3, r1
 801437e:	429a      	cmp	r2, r3
 8014380:	d006      	beq.n	8014390 <tcp_receive+0x7c4>
 8014382:	4b36      	ldr	r3, [pc, #216]	@ (801445c <tcp_receive+0x890>)
 8014384:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8014388:	4935      	ldr	r1, [pc, #212]	@ (8014460 <tcp_receive+0x894>)
 801438a:	4836      	ldr	r0, [pc, #216]	@ (8014464 <tcp_receive+0x898>)
 801438c:	f004 ff34 	bl	80191f8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014394:	2b00      	cmp	r3, #0
 8014396:	f000 80e6 	beq.w	8014566 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801439a:	4b2e      	ldr	r3, [pc, #184]	@ (8014454 <tcp_receive+0x888>)
 801439c:	68db      	ldr	r3, [r3, #12]
 801439e:	899b      	ldrh	r3, [r3, #12]
 80143a0:	b29b      	uxth	r3, r3
 80143a2:	4618      	mov	r0, r3
 80143a4:	f7fa fe7a 	bl	800f09c <lwip_htons>
 80143a8:	4603      	mov	r3, r0
 80143aa:	b2db      	uxtb	r3, r3
 80143ac:	f003 0301 	and.w	r3, r3, #1
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d010      	beq.n	80143d6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80143b4:	e00a      	b.n	80143cc <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80143ba:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80143c0:	681a      	ldr	r2, [r3, #0]
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80143c6:	68f8      	ldr	r0, [r7, #12]
 80143c8:	f7fd fd93 	bl	8011ef2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d1f0      	bne.n	80143b6 <tcp_receive+0x7ea>
 80143d4:	e0c7      	b.n	8014566 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80143da:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80143dc:	e051      	b.n	8014482 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80143de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143e0:	68db      	ldr	r3, [r3, #12]
 80143e2:	899b      	ldrh	r3, [r3, #12]
 80143e4:	b29b      	uxth	r3, r3
 80143e6:	4618      	mov	r0, r3
 80143e8:	f7fa fe58 	bl	800f09c <lwip_htons>
 80143ec:	4603      	mov	r3, r0
 80143ee:	b2db      	uxtb	r3, r3
 80143f0:	f003 0301 	and.w	r3, r3, #1
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d03c      	beq.n	8014472 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80143f8:	4b16      	ldr	r3, [pc, #88]	@ (8014454 <tcp_receive+0x888>)
 80143fa:	68db      	ldr	r3, [r3, #12]
 80143fc:	899b      	ldrh	r3, [r3, #12]
 80143fe:	b29b      	uxth	r3, r3
 8014400:	4618      	mov	r0, r3
 8014402:	f7fa fe4b 	bl	800f09c <lwip_htons>
 8014406:	4603      	mov	r3, r0
 8014408:	b2db      	uxtb	r3, r3
 801440a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801440e:	2b00      	cmp	r3, #0
 8014410:	d12f      	bne.n	8014472 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014412:	4b10      	ldr	r3, [pc, #64]	@ (8014454 <tcp_receive+0x888>)
 8014414:	68db      	ldr	r3, [r3, #12]
 8014416:	899b      	ldrh	r3, [r3, #12]
 8014418:	b29c      	uxth	r4, r3
 801441a:	2001      	movs	r0, #1
 801441c:	f7fa fe3e 	bl	800f09c <lwip_htons>
 8014420:	4603      	mov	r3, r0
 8014422:	461a      	mov	r2, r3
 8014424:	4b0b      	ldr	r3, [pc, #44]	@ (8014454 <tcp_receive+0x888>)
 8014426:	68db      	ldr	r3, [r3, #12]
 8014428:	4322      	orrs	r2, r4
 801442a:	b292      	uxth	r2, r2
 801442c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801442e:	4b09      	ldr	r3, [pc, #36]	@ (8014454 <tcp_receive+0x888>)
 8014430:	891c      	ldrh	r4, [r3, #8]
 8014432:	4b08      	ldr	r3, [pc, #32]	@ (8014454 <tcp_receive+0x888>)
 8014434:	68db      	ldr	r3, [r3, #12]
 8014436:	899b      	ldrh	r3, [r3, #12]
 8014438:	b29b      	uxth	r3, r3
 801443a:	4618      	mov	r0, r3
 801443c:	f7fa fe2e 	bl	800f09c <lwip_htons>
 8014440:	4603      	mov	r3, r0
 8014442:	b2db      	uxtb	r3, r3
 8014444:	f003 0303 	and.w	r3, r3, #3
 8014448:	2b00      	cmp	r3, #0
 801444a:	d00d      	beq.n	8014468 <tcp_receive+0x89c>
 801444c:	2301      	movs	r3, #1
 801444e:	e00c      	b.n	801446a <tcp_receive+0x89e>
 8014450:	20060bc4 	.word	0x20060bc4
 8014454:	20060ba4 	.word	0x20060ba4
 8014458:	20060bce 	.word	0x20060bce
 801445c:	0801b3a4 	.word	0x0801b3a4
 8014460:	0801b74c 	.word	0x0801b74c
 8014464:	0801b3f0 	.word	0x0801b3f0
 8014468:	2300      	movs	r3, #0
 801446a:	4423      	add	r3, r4
 801446c:	b29a      	uxth	r2, r3
 801446e:	4b98      	ldr	r3, [pc, #608]	@ (80146d0 <tcp_receive+0xb04>)
 8014470:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014474:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801447c:	6938      	ldr	r0, [r7, #16]
 801447e:	f7fd fd38 	bl	8011ef2 <tcp_seg_free>
            while (next &&
 8014482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014484:	2b00      	cmp	r3, #0
 8014486:	d00e      	beq.n	80144a6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014488:	4b91      	ldr	r3, [pc, #580]	@ (80146d0 <tcp_receive+0xb04>)
 801448a:	881b      	ldrh	r3, [r3, #0]
 801448c:	461a      	mov	r2, r3
 801448e:	4b91      	ldr	r3, [pc, #580]	@ (80146d4 <tcp_receive+0xb08>)
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	441a      	add	r2, r3
 8014494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014496:	68db      	ldr	r3, [r3, #12]
 8014498:	685b      	ldr	r3, [r3, #4]
 801449a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801449c:	8909      	ldrh	r1, [r1, #8]
 801449e:	440b      	add	r3, r1
 80144a0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	da9b      	bge.n	80143de <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80144a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d059      	beq.n	8014560 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80144ac:	4b88      	ldr	r3, [pc, #544]	@ (80146d0 <tcp_receive+0xb04>)
 80144ae:	881b      	ldrh	r3, [r3, #0]
 80144b0:	461a      	mov	r2, r3
 80144b2:	4b88      	ldr	r3, [pc, #544]	@ (80146d4 <tcp_receive+0xb08>)
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	441a      	add	r2, r3
 80144b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144ba:	68db      	ldr	r3, [r3, #12]
 80144bc:	685b      	ldr	r3, [r3, #4]
 80144be:	1ad3      	subs	r3, r2, r3
            if (next &&
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	dd4d      	ble.n	8014560 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80144c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144c6:	68db      	ldr	r3, [r3, #12]
 80144c8:	685b      	ldr	r3, [r3, #4]
 80144ca:	b29a      	uxth	r2, r3
 80144cc:	4b81      	ldr	r3, [pc, #516]	@ (80146d4 <tcp_receive+0xb08>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	b29b      	uxth	r3, r3
 80144d2:	1ad3      	subs	r3, r2, r3
 80144d4:	b29a      	uxth	r2, r3
 80144d6:	4b80      	ldr	r3, [pc, #512]	@ (80146d8 <tcp_receive+0xb0c>)
 80144d8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80144da:	4b7f      	ldr	r3, [pc, #508]	@ (80146d8 <tcp_receive+0xb0c>)
 80144dc:	68db      	ldr	r3, [r3, #12]
 80144de:	899b      	ldrh	r3, [r3, #12]
 80144e0:	b29b      	uxth	r3, r3
 80144e2:	4618      	mov	r0, r3
 80144e4:	f7fa fdda 	bl	800f09c <lwip_htons>
 80144e8:	4603      	mov	r3, r0
 80144ea:	b2db      	uxtb	r3, r3
 80144ec:	f003 0302 	and.w	r3, r3, #2
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d005      	beq.n	8014500 <tcp_receive+0x934>
                inseg.len -= 1;
 80144f4:	4b78      	ldr	r3, [pc, #480]	@ (80146d8 <tcp_receive+0xb0c>)
 80144f6:	891b      	ldrh	r3, [r3, #8]
 80144f8:	3b01      	subs	r3, #1
 80144fa:	b29a      	uxth	r2, r3
 80144fc:	4b76      	ldr	r3, [pc, #472]	@ (80146d8 <tcp_receive+0xb0c>)
 80144fe:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014500:	4b75      	ldr	r3, [pc, #468]	@ (80146d8 <tcp_receive+0xb0c>)
 8014502:	685b      	ldr	r3, [r3, #4]
 8014504:	4a74      	ldr	r2, [pc, #464]	@ (80146d8 <tcp_receive+0xb0c>)
 8014506:	8912      	ldrh	r2, [r2, #8]
 8014508:	4611      	mov	r1, r2
 801450a:	4618      	mov	r0, r3
 801450c:	f7fc f8ea 	bl	80106e4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014510:	4b71      	ldr	r3, [pc, #452]	@ (80146d8 <tcp_receive+0xb0c>)
 8014512:	891c      	ldrh	r4, [r3, #8]
 8014514:	4b70      	ldr	r3, [pc, #448]	@ (80146d8 <tcp_receive+0xb0c>)
 8014516:	68db      	ldr	r3, [r3, #12]
 8014518:	899b      	ldrh	r3, [r3, #12]
 801451a:	b29b      	uxth	r3, r3
 801451c:	4618      	mov	r0, r3
 801451e:	f7fa fdbd 	bl	800f09c <lwip_htons>
 8014522:	4603      	mov	r3, r0
 8014524:	b2db      	uxtb	r3, r3
 8014526:	f003 0303 	and.w	r3, r3, #3
 801452a:	2b00      	cmp	r3, #0
 801452c:	d001      	beq.n	8014532 <tcp_receive+0x966>
 801452e:	2301      	movs	r3, #1
 8014530:	e000      	b.n	8014534 <tcp_receive+0x968>
 8014532:	2300      	movs	r3, #0
 8014534:	4423      	add	r3, r4
 8014536:	b29a      	uxth	r2, r3
 8014538:	4b65      	ldr	r3, [pc, #404]	@ (80146d0 <tcp_receive+0xb04>)
 801453a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801453c:	4b64      	ldr	r3, [pc, #400]	@ (80146d0 <tcp_receive+0xb04>)
 801453e:	881b      	ldrh	r3, [r3, #0]
 8014540:	461a      	mov	r2, r3
 8014542:	4b64      	ldr	r3, [pc, #400]	@ (80146d4 <tcp_receive+0xb08>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	441a      	add	r2, r3
 8014548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801454a:	68db      	ldr	r3, [r3, #12]
 801454c:	685b      	ldr	r3, [r3, #4]
 801454e:	429a      	cmp	r2, r3
 8014550:	d006      	beq.n	8014560 <tcp_receive+0x994>
 8014552:	4b62      	ldr	r3, [pc, #392]	@ (80146dc <tcp_receive+0xb10>)
 8014554:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8014558:	4961      	ldr	r1, [pc, #388]	@ (80146e0 <tcp_receive+0xb14>)
 801455a:	4862      	ldr	r0, [pc, #392]	@ (80146e4 <tcp_receive+0xb18>)
 801455c:	f004 fe4c 	bl	80191f8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014564:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014566:	4b5a      	ldr	r3, [pc, #360]	@ (80146d0 <tcp_receive+0xb04>)
 8014568:	881b      	ldrh	r3, [r3, #0]
 801456a:	461a      	mov	r2, r3
 801456c:	4b59      	ldr	r3, [pc, #356]	@ (80146d4 <tcp_receive+0xb08>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	441a      	add	r2, r3
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801457a:	4b55      	ldr	r3, [pc, #340]	@ (80146d0 <tcp_receive+0xb04>)
 801457c:	881b      	ldrh	r3, [r3, #0]
 801457e:	429a      	cmp	r2, r3
 8014580:	d206      	bcs.n	8014590 <tcp_receive+0x9c4>
 8014582:	4b56      	ldr	r3, [pc, #344]	@ (80146dc <tcp_receive+0xb10>)
 8014584:	f240 6207 	movw	r2, #1543	@ 0x607
 8014588:	4957      	ldr	r1, [pc, #348]	@ (80146e8 <tcp_receive+0xb1c>)
 801458a:	4856      	ldr	r0, [pc, #344]	@ (80146e4 <tcp_receive+0xb18>)
 801458c:	f004 fe34 	bl	80191f8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014594:	4b4e      	ldr	r3, [pc, #312]	@ (80146d0 <tcp_receive+0xb04>)
 8014596:	881b      	ldrh	r3, [r3, #0]
 8014598:	1ad3      	subs	r3, r2, r3
 801459a:	b29a      	uxth	r2, r3
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80145a0:	6878      	ldr	r0, [r7, #4]
 80145a2:	f7fc ffc5 	bl	8011530 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80145a6:	4b4c      	ldr	r3, [pc, #304]	@ (80146d8 <tcp_receive+0xb0c>)
 80145a8:	685b      	ldr	r3, [r3, #4]
 80145aa:	891b      	ldrh	r3, [r3, #8]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d006      	beq.n	80145be <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80145b0:	4b49      	ldr	r3, [pc, #292]	@ (80146d8 <tcp_receive+0xb0c>)
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	4a4d      	ldr	r2, [pc, #308]	@ (80146ec <tcp_receive+0xb20>)
 80145b6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80145b8:	4b47      	ldr	r3, [pc, #284]	@ (80146d8 <tcp_receive+0xb0c>)
 80145ba:	2200      	movs	r2, #0
 80145bc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80145be:	4b46      	ldr	r3, [pc, #280]	@ (80146d8 <tcp_receive+0xb0c>)
 80145c0:	68db      	ldr	r3, [r3, #12]
 80145c2:	899b      	ldrh	r3, [r3, #12]
 80145c4:	b29b      	uxth	r3, r3
 80145c6:	4618      	mov	r0, r3
 80145c8:	f7fa fd68 	bl	800f09c <lwip_htons>
 80145cc:	4603      	mov	r3, r0
 80145ce:	b2db      	uxtb	r3, r3
 80145d0:	f003 0301 	and.w	r3, r3, #1
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	f000 80b8 	beq.w	801474a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80145da:	4b45      	ldr	r3, [pc, #276]	@ (80146f0 <tcp_receive+0xb24>)
 80145dc:	781b      	ldrb	r3, [r3, #0]
 80145de:	f043 0320 	orr.w	r3, r3, #32
 80145e2:	b2da      	uxtb	r2, r3
 80145e4:	4b42      	ldr	r3, [pc, #264]	@ (80146f0 <tcp_receive+0xb24>)
 80145e6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80145e8:	e0af      	b.n	801474a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80145ee:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80145f4:	68db      	ldr	r3, [r3, #12]
 80145f6:	685b      	ldr	r3, [r3, #4]
 80145f8:	4a36      	ldr	r2, [pc, #216]	@ (80146d4 <tcp_receive+0xb08>)
 80145fa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	891b      	ldrh	r3, [r3, #8]
 8014600:	461c      	mov	r4, r3
 8014602:	68bb      	ldr	r3, [r7, #8]
 8014604:	68db      	ldr	r3, [r3, #12]
 8014606:	899b      	ldrh	r3, [r3, #12]
 8014608:	b29b      	uxth	r3, r3
 801460a:	4618      	mov	r0, r3
 801460c:	f7fa fd46 	bl	800f09c <lwip_htons>
 8014610:	4603      	mov	r3, r0
 8014612:	b2db      	uxtb	r3, r3
 8014614:	f003 0303 	and.w	r3, r3, #3
 8014618:	2b00      	cmp	r3, #0
 801461a:	d001      	beq.n	8014620 <tcp_receive+0xa54>
 801461c:	2301      	movs	r3, #1
 801461e:	e000      	b.n	8014622 <tcp_receive+0xa56>
 8014620:	2300      	movs	r3, #0
 8014622:	191a      	adds	r2, r3, r4
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014628:	441a      	add	r2, r3
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014632:	461c      	mov	r4, r3
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	891b      	ldrh	r3, [r3, #8]
 8014638:	461d      	mov	r5, r3
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	68db      	ldr	r3, [r3, #12]
 801463e:	899b      	ldrh	r3, [r3, #12]
 8014640:	b29b      	uxth	r3, r3
 8014642:	4618      	mov	r0, r3
 8014644:	f7fa fd2a 	bl	800f09c <lwip_htons>
 8014648:	4603      	mov	r3, r0
 801464a:	b2db      	uxtb	r3, r3
 801464c:	f003 0303 	and.w	r3, r3, #3
 8014650:	2b00      	cmp	r3, #0
 8014652:	d001      	beq.n	8014658 <tcp_receive+0xa8c>
 8014654:	2301      	movs	r3, #1
 8014656:	e000      	b.n	801465a <tcp_receive+0xa8e>
 8014658:	2300      	movs	r3, #0
 801465a:	442b      	add	r3, r5
 801465c:	429c      	cmp	r4, r3
 801465e:	d206      	bcs.n	801466e <tcp_receive+0xaa2>
 8014660:	4b1e      	ldr	r3, [pc, #120]	@ (80146dc <tcp_receive+0xb10>)
 8014662:	f240 622b 	movw	r2, #1579	@ 0x62b
 8014666:	4923      	ldr	r1, [pc, #140]	@ (80146f4 <tcp_receive+0xb28>)
 8014668:	481e      	ldr	r0, [pc, #120]	@ (80146e4 <tcp_receive+0xb18>)
 801466a:	f004 fdc5 	bl	80191f8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	891b      	ldrh	r3, [r3, #8]
 8014672:	461c      	mov	r4, r3
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	68db      	ldr	r3, [r3, #12]
 8014678:	899b      	ldrh	r3, [r3, #12]
 801467a:	b29b      	uxth	r3, r3
 801467c:	4618      	mov	r0, r3
 801467e:	f7fa fd0d 	bl	800f09c <lwip_htons>
 8014682:	4603      	mov	r3, r0
 8014684:	b2db      	uxtb	r3, r3
 8014686:	f003 0303 	and.w	r3, r3, #3
 801468a:	2b00      	cmp	r3, #0
 801468c:	d001      	beq.n	8014692 <tcp_receive+0xac6>
 801468e:	2301      	movs	r3, #1
 8014690:	e000      	b.n	8014694 <tcp_receive+0xac8>
 8014692:	2300      	movs	r3, #0
 8014694:	1919      	adds	r1, r3, r4
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801469a:	b28b      	uxth	r3, r1
 801469c:	1ad3      	subs	r3, r2, r3
 801469e:	b29a      	uxth	r2, r3
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	f7fc ff43 	bl	8011530 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80146aa:	68bb      	ldr	r3, [r7, #8]
 80146ac:	685b      	ldr	r3, [r3, #4]
 80146ae:	891b      	ldrh	r3, [r3, #8]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d028      	beq.n	8014706 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80146b4:	4b0d      	ldr	r3, [pc, #52]	@ (80146ec <tcp_receive+0xb20>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d01d      	beq.n	80146f8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80146bc:	4b0b      	ldr	r3, [pc, #44]	@ (80146ec <tcp_receive+0xb20>)
 80146be:	681a      	ldr	r2, [r3, #0]
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	685b      	ldr	r3, [r3, #4]
 80146c4:	4619      	mov	r1, r3
 80146c6:	4610      	mov	r0, r2
 80146c8:	f7fc fa60 	bl	8010b8c <pbuf_cat>
 80146cc:	e018      	b.n	8014700 <tcp_receive+0xb34>
 80146ce:	bf00      	nop
 80146d0:	20060bce 	.word	0x20060bce
 80146d4:	20060bc4 	.word	0x20060bc4
 80146d8:	20060ba4 	.word	0x20060ba4
 80146dc:	0801b3a4 	.word	0x0801b3a4
 80146e0:	0801b784 	.word	0x0801b784
 80146e4:	0801b3f0 	.word	0x0801b3f0
 80146e8:	0801b7c0 	.word	0x0801b7c0
 80146ec:	20060bd4 	.word	0x20060bd4
 80146f0:	20060bd1 	.word	0x20060bd1
 80146f4:	0801b7e0 	.word	0x0801b7e0
            } else {
              recv_data = cseg->p;
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	685b      	ldr	r3, [r3, #4]
 80146fc:	4a70      	ldr	r2, [pc, #448]	@ (80148c0 <tcp_receive+0xcf4>)
 80146fe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	2200      	movs	r2, #0
 8014704:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	68db      	ldr	r3, [r3, #12]
 801470a:	899b      	ldrh	r3, [r3, #12]
 801470c:	b29b      	uxth	r3, r3
 801470e:	4618      	mov	r0, r3
 8014710:	f7fa fcc4 	bl	800f09c <lwip_htons>
 8014714:	4603      	mov	r3, r0
 8014716:	b2db      	uxtb	r3, r3
 8014718:	f003 0301 	and.w	r3, r3, #1
 801471c:	2b00      	cmp	r3, #0
 801471e:	d00d      	beq.n	801473c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014720:	4b68      	ldr	r3, [pc, #416]	@ (80148c4 <tcp_receive+0xcf8>)
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	f043 0320 	orr.w	r3, r3, #32
 8014728:	b2da      	uxtb	r2, r3
 801472a:	4b66      	ldr	r3, [pc, #408]	@ (80148c4 <tcp_receive+0xcf8>)
 801472c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	7d1b      	ldrb	r3, [r3, #20]
 8014732:	2b04      	cmp	r3, #4
 8014734:	d102      	bne.n	801473c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	2207      	movs	r2, #7
 801473a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801473c:	68bb      	ldr	r3, [r7, #8]
 801473e:	681a      	ldr	r2, [r3, #0]
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8014744:	68b8      	ldr	r0, [r7, #8]
 8014746:	f7fd fbd4 	bl	8011ef2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801474e:	2b00      	cmp	r3, #0
 8014750:	d008      	beq.n	8014764 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014756:	68db      	ldr	r3, [r3, #12]
 8014758:	685a      	ldr	r2, [r3, #4]
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801475e:	429a      	cmp	r2, r3
 8014760:	f43f af43 	beq.w	80145ea <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	8b5b      	ldrh	r3, [r3, #26]
 8014768:	f003 0301 	and.w	r3, r3, #1
 801476c:	2b00      	cmp	r3, #0
 801476e:	d00e      	beq.n	801478e <tcp_receive+0xbc2>
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	8b5b      	ldrh	r3, [r3, #26]
 8014774:	f023 0301 	bic.w	r3, r3, #1
 8014778:	b29a      	uxth	r2, r3
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	835a      	strh	r2, [r3, #26]
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	8b5b      	ldrh	r3, [r3, #26]
 8014782:	f043 0302 	orr.w	r3, r3, #2
 8014786:	b29a      	uxth	r2, r3
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801478c:	e187      	b.n	8014a9e <tcp_receive+0xed2>
        tcp_ack(pcb);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	8b5b      	ldrh	r3, [r3, #26]
 8014792:	f043 0301 	orr.w	r3, r3, #1
 8014796:	b29a      	uxth	r2, r3
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801479c:	e17f      	b.n	8014a9e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d106      	bne.n	80147b4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80147a6:	4848      	ldr	r0, [pc, #288]	@ (80148c8 <tcp_receive+0xcfc>)
 80147a8:	f7fd fbbc 	bl	8011f24 <tcp_seg_copy>
 80147ac:	4602      	mov	r2, r0
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	675a      	str	r2, [r3, #116]	@ 0x74
 80147b2:	e16c      	b.n	8014a8e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80147b4:	2300      	movs	r3, #0
 80147b6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80147bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80147be:	e156      	b.n	8014a6e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80147c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147c2:	68db      	ldr	r3, [r3, #12]
 80147c4:	685a      	ldr	r2, [r3, #4]
 80147c6:	4b41      	ldr	r3, [pc, #260]	@ (80148cc <tcp_receive+0xd00>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	429a      	cmp	r2, r3
 80147cc:	d11d      	bne.n	801480a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80147ce:	4b3e      	ldr	r3, [pc, #248]	@ (80148c8 <tcp_receive+0xcfc>)
 80147d0:	891a      	ldrh	r2, [r3, #8]
 80147d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147d4:	891b      	ldrh	r3, [r3, #8]
 80147d6:	429a      	cmp	r2, r3
 80147d8:	f240 814e 	bls.w	8014a78 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80147dc:	483a      	ldr	r0, [pc, #232]	@ (80148c8 <tcp_receive+0xcfc>)
 80147de:	f7fd fba1 	bl	8011f24 <tcp_seg_copy>
 80147e2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	f000 8148 	beq.w	8014a7c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80147ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d003      	beq.n	80147fa <tcp_receive+0xc2e>
                    prev->next = cseg;
 80147f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80147f4:	697a      	ldr	r2, [r7, #20]
 80147f6:	601a      	str	r2, [r3, #0]
 80147f8:	e002      	b.n	8014800 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	697a      	ldr	r2, [r7, #20]
 80147fe:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014800:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014802:	6978      	ldr	r0, [r7, #20]
 8014804:	f7ff f8de 	bl	80139c4 <tcp_oos_insert_segment>
                }
                break;
 8014808:	e138      	b.n	8014a7c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801480a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801480c:	2b00      	cmp	r3, #0
 801480e:	d117      	bne.n	8014840 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014810:	4b2e      	ldr	r3, [pc, #184]	@ (80148cc <tcp_receive+0xd00>)
 8014812:	681a      	ldr	r2, [r3, #0]
 8014814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014816:	68db      	ldr	r3, [r3, #12]
 8014818:	685b      	ldr	r3, [r3, #4]
 801481a:	1ad3      	subs	r3, r2, r3
 801481c:	2b00      	cmp	r3, #0
 801481e:	da57      	bge.n	80148d0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014820:	4829      	ldr	r0, [pc, #164]	@ (80148c8 <tcp_receive+0xcfc>)
 8014822:	f7fd fb7f 	bl	8011f24 <tcp_seg_copy>
 8014826:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014828:	69bb      	ldr	r3, [r7, #24]
 801482a:	2b00      	cmp	r3, #0
 801482c:	f000 8128 	beq.w	8014a80 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	69ba      	ldr	r2, [r7, #24]
 8014834:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014836:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014838:	69b8      	ldr	r0, [r7, #24]
 801483a:	f7ff f8c3 	bl	80139c4 <tcp_oos_insert_segment>
                  }
                  break;
 801483e:	e11f      	b.n	8014a80 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014840:	4b22      	ldr	r3, [pc, #136]	@ (80148cc <tcp_receive+0xd00>)
 8014842:	681a      	ldr	r2, [r3, #0]
 8014844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014846:	68db      	ldr	r3, [r3, #12]
 8014848:	685b      	ldr	r3, [r3, #4]
 801484a:	1ad3      	subs	r3, r2, r3
 801484c:	3b01      	subs	r3, #1
 801484e:	2b00      	cmp	r3, #0
 8014850:	db3e      	blt.n	80148d0 <tcp_receive+0xd04>
 8014852:	4b1e      	ldr	r3, [pc, #120]	@ (80148cc <tcp_receive+0xd00>)
 8014854:	681a      	ldr	r2, [r3, #0]
 8014856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014858:	68db      	ldr	r3, [r3, #12]
 801485a:	685b      	ldr	r3, [r3, #4]
 801485c:	1ad3      	subs	r3, r2, r3
 801485e:	3301      	adds	r3, #1
 8014860:	2b00      	cmp	r3, #0
 8014862:	dc35      	bgt.n	80148d0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014864:	4818      	ldr	r0, [pc, #96]	@ (80148c8 <tcp_receive+0xcfc>)
 8014866:	f7fd fb5d 	bl	8011f24 <tcp_seg_copy>
 801486a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801486c:	69fb      	ldr	r3, [r7, #28]
 801486e:	2b00      	cmp	r3, #0
 8014870:	f000 8108 	beq.w	8014a84 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014876:	68db      	ldr	r3, [r3, #12]
 8014878:	685b      	ldr	r3, [r3, #4]
 801487a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801487c:	8912      	ldrh	r2, [r2, #8]
 801487e:	441a      	add	r2, r3
 8014880:	4b12      	ldr	r3, [pc, #72]	@ (80148cc <tcp_receive+0xd00>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	1ad3      	subs	r3, r2, r3
 8014886:	2b00      	cmp	r3, #0
 8014888:	dd12      	ble.n	80148b0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801488a:	4b10      	ldr	r3, [pc, #64]	@ (80148cc <tcp_receive+0xd00>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	b29a      	uxth	r2, r3
 8014890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014892:	68db      	ldr	r3, [r3, #12]
 8014894:	685b      	ldr	r3, [r3, #4]
 8014896:	b29b      	uxth	r3, r3
 8014898:	1ad3      	subs	r3, r2, r3
 801489a:	b29a      	uxth	r2, r3
 801489c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801489e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80148a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148a2:	685a      	ldr	r2, [r3, #4]
 80148a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148a6:	891b      	ldrh	r3, [r3, #8]
 80148a8:	4619      	mov	r1, r3
 80148aa:	4610      	mov	r0, r2
 80148ac:	f7fb ff1a 	bl	80106e4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80148b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148b2:	69fa      	ldr	r2, [r7, #28]
 80148b4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80148b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80148b8:	69f8      	ldr	r0, [r7, #28]
 80148ba:	f7ff f883 	bl	80139c4 <tcp_oos_insert_segment>
                  }
                  break;
 80148be:	e0e1      	b.n	8014a84 <tcp_receive+0xeb8>
 80148c0:	20060bd4 	.word	0x20060bd4
 80148c4:	20060bd1 	.word	0x20060bd1
 80148c8:	20060ba4 	.word	0x20060ba4
 80148cc:	20060bc4 	.word	0x20060bc4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80148d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148d2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80148d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	f040 80c5 	bne.w	8014a68 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80148de:	4b7f      	ldr	r3, [pc, #508]	@ (8014adc <tcp_receive+0xf10>)
 80148e0:	681a      	ldr	r2, [r3, #0]
 80148e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148e4:	68db      	ldr	r3, [r3, #12]
 80148e6:	685b      	ldr	r3, [r3, #4]
 80148e8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	f340 80bc 	ble.w	8014a68 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80148f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148f2:	68db      	ldr	r3, [r3, #12]
 80148f4:	899b      	ldrh	r3, [r3, #12]
 80148f6:	b29b      	uxth	r3, r3
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7fa fbcf 	bl	800f09c <lwip_htons>
 80148fe:	4603      	mov	r3, r0
 8014900:	b2db      	uxtb	r3, r3
 8014902:	f003 0301 	and.w	r3, r3, #1
 8014906:	2b00      	cmp	r3, #0
 8014908:	f040 80be 	bne.w	8014a88 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801490c:	4874      	ldr	r0, [pc, #464]	@ (8014ae0 <tcp_receive+0xf14>)
 801490e:	f7fd fb09 	bl	8011f24 <tcp_seg_copy>
 8014912:	4602      	mov	r2, r0
 8014914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014916:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	2b00      	cmp	r3, #0
 801491e:	f000 80b5 	beq.w	8014a8c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014924:	68db      	ldr	r3, [r3, #12]
 8014926:	685b      	ldr	r3, [r3, #4]
 8014928:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801492a:	8912      	ldrh	r2, [r2, #8]
 801492c:	441a      	add	r2, r3
 801492e:	4b6b      	ldr	r3, [pc, #428]	@ (8014adc <tcp_receive+0xf10>)
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	1ad3      	subs	r3, r2, r3
 8014934:	2b00      	cmp	r3, #0
 8014936:	dd12      	ble.n	801495e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014938:	4b68      	ldr	r3, [pc, #416]	@ (8014adc <tcp_receive+0xf10>)
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	b29a      	uxth	r2, r3
 801493e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014940:	68db      	ldr	r3, [r3, #12]
 8014942:	685b      	ldr	r3, [r3, #4]
 8014944:	b29b      	uxth	r3, r3
 8014946:	1ad3      	subs	r3, r2, r3
 8014948:	b29a      	uxth	r2, r3
 801494a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801494c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801494e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014950:	685a      	ldr	r2, [r3, #4]
 8014952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014954:	891b      	ldrh	r3, [r3, #8]
 8014956:	4619      	mov	r1, r3
 8014958:	4610      	mov	r0, r2
 801495a:	f7fb fec3 	bl	80106e4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801495e:	4b61      	ldr	r3, [pc, #388]	@ (8014ae4 <tcp_receive+0xf18>)
 8014960:	881b      	ldrh	r3, [r3, #0]
 8014962:	461a      	mov	r2, r3
 8014964:	4b5d      	ldr	r3, [pc, #372]	@ (8014adc <tcp_receive+0xf10>)
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	441a      	add	r2, r3
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801496e:	6879      	ldr	r1, [r7, #4]
 8014970:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014972:	440b      	add	r3, r1
 8014974:	1ad3      	subs	r3, r2, r3
 8014976:	2b00      	cmp	r3, #0
 8014978:	f340 8088 	ble.w	8014a8c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801497c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	68db      	ldr	r3, [r3, #12]
 8014982:	899b      	ldrh	r3, [r3, #12]
 8014984:	b29b      	uxth	r3, r3
 8014986:	4618      	mov	r0, r3
 8014988:	f7fa fb88 	bl	800f09c <lwip_htons>
 801498c:	4603      	mov	r3, r0
 801498e:	b2db      	uxtb	r3, r3
 8014990:	f003 0301 	and.w	r3, r3, #1
 8014994:	2b00      	cmp	r3, #0
 8014996:	d021      	beq.n	80149dc <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	68db      	ldr	r3, [r3, #12]
 801499e:	899b      	ldrh	r3, [r3, #12]
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	b21b      	sxth	r3, r3
 80149a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80149a8:	b21c      	sxth	r4, r3
 80149aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	68db      	ldr	r3, [r3, #12]
 80149b0:	899b      	ldrh	r3, [r3, #12]
 80149b2:	b29b      	uxth	r3, r3
 80149b4:	4618      	mov	r0, r3
 80149b6:	f7fa fb71 	bl	800f09c <lwip_htons>
 80149ba:	4603      	mov	r3, r0
 80149bc:	b2db      	uxtb	r3, r3
 80149be:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80149c2:	b29b      	uxth	r3, r3
 80149c4:	4618      	mov	r0, r3
 80149c6:	f7fa fb69 	bl	800f09c <lwip_htons>
 80149ca:	4603      	mov	r3, r0
 80149cc:	b21b      	sxth	r3, r3
 80149ce:	4323      	orrs	r3, r4
 80149d0:	b21a      	sxth	r2, r3
 80149d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	68db      	ldr	r3, [r3, #12]
 80149d8:	b292      	uxth	r2, r2
 80149da:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149e0:	b29a      	uxth	r2, r3
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80149e6:	4413      	add	r3, r2
 80149e8:	b299      	uxth	r1, r3
 80149ea:	4b3c      	ldr	r3, [pc, #240]	@ (8014adc <tcp_receive+0xf10>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	b29a      	uxth	r2, r3
 80149f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	1a8a      	subs	r2, r1, r2
 80149f6:	b292      	uxth	r2, r2
 80149f8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80149fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	685a      	ldr	r2, [r3, #4]
 8014a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	891b      	ldrh	r3, [r3, #8]
 8014a06:	4619      	mov	r1, r3
 8014a08:	4610      	mov	r0, r2
 8014a0a:	f7fb fe6b 	bl	80106e4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	891c      	ldrh	r4, [r3, #8]
 8014a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	68db      	ldr	r3, [r3, #12]
 8014a1a:	899b      	ldrh	r3, [r3, #12]
 8014a1c:	b29b      	uxth	r3, r3
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f7fa fb3c 	bl	800f09c <lwip_htons>
 8014a24:	4603      	mov	r3, r0
 8014a26:	b2db      	uxtb	r3, r3
 8014a28:	f003 0303 	and.w	r3, r3, #3
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d001      	beq.n	8014a34 <tcp_receive+0xe68>
 8014a30:	2301      	movs	r3, #1
 8014a32:	e000      	b.n	8014a36 <tcp_receive+0xe6a>
 8014a34:	2300      	movs	r3, #0
 8014a36:	4423      	add	r3, r4
 8014a38:	b29a      	uxth	r2, r3
 8014a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8014ae4 <tcp_receive+0xf18>)
 8014a3c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014a3e:	4b29      	ldr	r3, [pc, #164]	@ (8014ae4 <tcp_receive+0xf18>)
 8014a40:	881b      	ldrh	r3, [r3, #0]
 8014a42:	461a      	mov	r2, r3
 8014a44:	4b25      	ldr	r3, [pc, #148]	@ (8014adc <tcp_receive+0xf10>)
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	441a      	add	r2, r3
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a4e:	6879      	ldr	r1, [r7, #4]
 8014a50:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014a52:	440b      	add	r3, r1
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d019      	beq.n	8014a8c <tcp_receive+0xec0>
 8014a58:	4b23      	ldr	r3, [pc, #140]	@ (8014ae8 <tcp_receive+0xf1c>)
 8014a5a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8014a5e:	4923      	ldr	r1, [pc, #140]	@ (8014aec <tcp_receive+0xf20>)
 8014a60:	4823      	ldr	r0, [pc, #140]	@ (8014af0 <tcp_receive+0xf24>)
 8014a62:	f004 fbc9 	bl	80191f8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014a66:	e011      	b.n	8014a8c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	f47f aea5 	bne.w	80147c0 <tcp_receive+0xbf4>
 8014a76:	e00a      	b.n	8014a8e <tcp_receive+0xec2>
                break;
 8014a78:	bf00      	nop
 8014a7a:	e008      	b.n	8014a8e <tcp_receive+0xec2>
                break;
 8014a7c:	bf00      	nop
 8014a7e:	e006      	b.n	8014a8e <tcp_receive+0xec2>
                  break;
 8014a80:	bf00      	nop
 8014a82:	e004      	b.n	8014a8e <tcp_receive+0xec2>
                  break;
 8014a84:	bf00      	nop
 8014a86:	e002      	b.n	8014a8e <tcp_receive+0xec2>
                  break;
 8014a88:	bf00      	nop
 8014a8a:	e000      	b.n	8014a8e <tcp_receive+0xec2>
                break;
 8014a8c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f001 fa30 	bl	8015ef4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014a94:	e003      	b.n	8014a9e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014a96:	6878      	ldr	r0, [r7, #4]
 8014a98:	f001 fa2c 	bl	8015ef4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014a9c:	e01a      	b.n	8014ad4 <tcp_receive+0xf08>
 8014a9e:	e019      	b.n	8014ad4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8014adc <tcp_receive+0xf10>)
 8014aa2:	681a      	ldr	r2, [r3, #0]
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014aa8:	1ad3      	subs	r3, r2, r3
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	db0a      	blt.n	8014ac4 <tcp_receive+0xef8>
 8014aae:	4b0b      	ldr	r3, [pc, #44]	@ (8014adc <tcp_receive+0xf10>)
 8014ab0:	681a      	ldr	r2, [r3, #0]
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ab6:	6879      	ldr	r1, [r7, #4]
 8014ab8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014aba:	440b      	add	r3, r1
 8014abc:	1ad3      	subs	r3, r2, r3
 8014abe:	3301      	adds	r3, #1
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	dd07      	ble.n	8014ad4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	8b5b      	ldrh	r3, [r3, #26]
 8014ac8:	f043 0302 	orr.w	r3, r3, #2
 8014acc:	b29a      	uxth	r2, r3
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014ad2:	e7ff      	b.n	8014ad4 <tcp_receive+0xf08>
 8014ad4:	bf00      	nop
 8014ad6:	3750      	adds	r7, #80	@ 0x50
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bdb0      	pop	{r4, r5, r7, pc}
 8014adc:	20060bc4 	.word	0x20060bc4
 8014ae0:	20060ba4 	.word	0x20060ba4
 8014ae4:	20060bce 	.word	0x20060bce
 8014ae8:	0801b3a4 	.word	0x0801b3a4
 8014aec:	0801b74c 	.word	0x0801b74c
 8014af0:	0801b3f0 	.word	0x0801b3f0

08014af4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014af4:	b480      	push	{r7}
 8014af6:	b083      	sub	sp, #12
 8014af8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014afa:	4b15      	ldr	r3, [pc, #84]	@ (8014b50 <tcp_get_next_optbyte+0x5c>)
 8014afc:	881b      	ldrh	r3, [r3, #0]
 8014afe:	1c5a      	adds	r2, r3, #1
 8014b00:	b291      	uxth	r1, r2
 8014b02:	4a13      	ldr	r2, [pc, #76]	@ (8014b50 <tcp_get_next_optbyte+0x5c>)
 8014b04:	8011      	strh	r1, [r2, #0]
 8014b06:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014b08:	4b12      	ldr	r3, [pc, #72]	@ (8014b54 <tcp_get_next_optbyte+0x60>)
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d004      	beq.n	8014b1a <tcp_get_next_optbyte+0x26>
 8014b10:	4b11      	ldr	r3, [pc, #68]	@ (8014b58 <tcp_get_next_optbyte+0x64>)
 8014b12:	881b      	ldrh	r3, [r3, #0]
 8014b14:	88fa      	ldrh	r2, [r7, #6]
 8014b16:	429a      	cmp	r2, r3
 8014b18:	d208      	bcs.n	8014b2c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014b1a:	4b10      	ldr	r3, [pc, #64]	@ (8014b5c <tcp_get_next_optbyte+0x68>)
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	3314      	adds	r3, #20
 8014b20:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014b22:	88fb      	ldrh	r3, [r7, #6]
 8014b24:	683a      	ldr	r2, [r7, #0]
 8014b26:	4413      	add	r3, r2
 8014b28:	781b      	ldrb	r3, [r3, #0]
 8014b2a:	e00b      	b.n	8014b44 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014b2c:	88fb      	ldrh	r3, [r7, #6]
 8014b2e:	b2da      	uxtb	r2, r3
 8014b30:	4b09      	ldr	r3, [pc, #36]	@ (8014b58 <tcp_get_next_optbyte+0x64>)
 8014b32:	881b      	ldrh	r3, [r3, #0]
 8014b34:	b2db      	uxtb	r3, r3
 8014b36:	1ad3      	subs	r3, r2, r3
 8014b38:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014b3a:	4b06      	ldr	r3, [pc, #24]	@ (8014b54 <tcp_get_next_optbyte+0x60>)
 8014b3c:	681a      	ldr	r2, [r3, #0]
 8014b3e:	797b      	ldrb	r3, [r7, #5]
 8014b40:	4413      	add	r3, r2
 8014b42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014b44:	4618      	mov	r0, r3
 8014b46:	370c      	adds	r7, #12
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4e:	4770      	bx	lr
 8014b50:	20060bc0 	.word	0x20060bc0
 8014b54:	20060bbc 	.word	0x20060bbc
 8014b58:	20060bba 	.word	0x20060bba
 8014b5c:	20060bb4 	.word	0x20060bb4

08014b60 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b084      	sub	sp, #16
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d106      	bne.n	8014b7c <tcp_parseopt+0x1c>
 8014b6e:	4b32      	ldr	r3, [pc, #200]	@ (8014c38 <tcp_parseopt+0xd8>)
 8014b70:	f240 727d 	movw	r2, #1917	@ 0x77d
 8014b74:	4931      	ldr	r1, [pc, #196]	@ (8014c3c <tcp_parseopt+0xdc>)
 8014b76:	4832      	ldr	r0, [pc, #200]	@ (8014c40 <tcp_parseopt+0xe0>)
 8014b78:	f004 fb3e 	bl	80191f8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014b7c:	4b31      	ldr	r3, [pc, #196]	@ (8014c44 <tcp_parseopt+0xe4>)
 8014b7e:	881b      	ldrh	r3, [r3, #0]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d056      	beq.n	8014c32 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014b84:	4b30      	ldr	r3, [pc, #192]	@ (8014c48 <tcp_parseopt+0xe8>)
 8014b86:	2200      	movs	r2, #0
 8014b88:	801a      	strh	r2, [r3, #0]
 8014b8a:	e046      	b.n	8014c1a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8014b8c:	f7ff ffb2 	bl	8014af4 <tcp_get_next_optbyte>
 8014b90:	4603      	mov	r3, r0
 8014b92:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014b94:	7bfb      	ldrb	r3, [r7, #15]
 8014b96:	2b02      	cmp	r3, #2
 8014b98:	d006      	beq.n	8014ba8 <tcp_parseopt+0x48>
 8014b9a:	2b02      	cmp	r3, #2
 8014b9c:	dc2a      	bgt.n	8014bf4 <tcp_parseopt+0x94>
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d042      	beq.n	8014c28 <tcp_parseopt+0xc8>
 8014ba2:	2b01      	cmp	r3, #1
 8014ba4:	d038      	beq.n	8014c18 <tcp_parseopt+0xb8>
 8014ba6:	e025      	b.n	8014bf4 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014ba8:	f7ff ffa4 	bl	8014af4 <tcp_get_next_optbyte>
 8014bac:	4603      	mov	r3, r0
 8014bae:	2b04      	cmp	r3, #4
 8014bb0:	d13c      	bne.n	8014c2c <tcp_parseopt+0xcc>
 8014bb2:	4b25      	ldr	r3, [pc, #148]	@ (8014c48 <tcp_parseopt+0xe8>)
 8014bb4:	881b      	ldrh	r3, [r3, #0]
 8014bb6:	3301      	adds	r3, #1
 8014bb8:	4a22      	ldr	r2, [pc, #136]	@ (8014c44 <tcp_parseopt+0xe4>)
 8014bba:	8812      	ldrh	r2, [r2, #0]
 8014bbc:	4293      	cmp	r3, r2
 8014bbe:	da35      	bge.n	8014c2c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014bc0:	f7ff ff98 	bl	8014af4 <tcp_get_next_optbyte>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	021b      	lsls	r3, r3, #8
 8014bc8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014bca:	f7ff ff93 	bl	8014af4 <tcp_get_next_optbyte>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	461a      	mov	r2, r3
 8014bd2:	89bb      	ldrh	r3, [r7, #12]
 8014bd4:	4313      	orrs	r3, r2
 8014bd6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014bd8:	89bb      	ldrh	r3, [r7, #12]
 8014bda:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8014bde:	d804      	bhi.n	8014bea <tcp_parseopt+0x8a>
 8014be0:	89bb      	ldrh	r3, [r7, #12]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d001      	beq.n	8014bea <tcp_parseopt+0x8a>
 8014be6:	89ba      	ldrh	r2, [r7, #12]
 8014be8:	e001      	b.n	8014bee <tcp_parseopt+0x8e>
 8014bea:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8014bf2:	e012      	b.n	8014c1a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014bf4:	f7ff ff7e 	bl	8014af4 <tcp_get_next_optbyte>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014bfc:	7afb      	ldrb	r3, [r7, #11]
 8014bfe:	2b01      	cmp	r3, #1
 8014c00:	d916      	bls.n	8014c30 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014c02:	7afb      	ldrb	r3, [r7, #11]
 8014c04:	b29a      	uxth	r2, r3
 8014c06:	4b10      	ldr	r3, [pc, #64]	@ (8014c48 <tcp_parseopt+0xe8>)
 8014c08:	881b      	ldrh	r3, [r3, #0]
 8014c0a:	4413      	add	r3, r2
 8014c0c:	b29b      	uxth	r3, r3
 8014c0e:	3b02      	subs	r3, #2
 8014c10:	b29a      	uxth	r2, r3
 8014c12:	4b0d      	ldr	r3, [pc, #52]	@ (8014c48 <tcp_parseopt+0xe8>)
 8014c14:	801a      	strh	r2, [r3, #0]
 8014c16:	e000      	b.n	8014c1a <tcp_parseopt+0xba>
          break;
 8014c18:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8014c48 <tcp_parseopt+0xe8>)
 8014c1c:	881a      	ldrh	r2, [r3, #0]
 8014c1e:	4b09      	ldr	r3, [pc, #36]	@ (8014c44 <tcp_parseopt+0xe4>)
 8014c20:	881b      	ldrh	r3, [r3, #0]
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d3b2      	bcc.n	8014b8c <tcp_parseopt+0x2c>
 8014c26:	e004      	b.n	8014c32 <tcp_parseopt+0xd2>
          return;
 8014c28:	bf00      	nop
 8014c2a:	e002      	b.n	8014c32 <tcp_parseopt+0xd2>
            return;
 8014c2c:	bf00      	nop
 8014c2e:	e000      	b.n	8014c32 <tcp_parseopt+0xd2>
            return;
 8014c30:	bf00      	nop
      }
    }
  }
}
 8014c32:	3710      	adds	r7, #16
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd80      	pop	{r7, pc}
 8014c38:	0801b3a4 	.word	0x0801b3a4
 8014c3c:	0801b808 	.word	0x0801b808
 8014c40:	0801b3f0 	.word	0x0801b3f0
 8014c44:	20060bb8 	.word	0x20060bb8
 8014c48:	20060bc0 	.word	0x20060bc0

08014c4c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014c4c:	b480      	push	{r7}
 8014c4e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014c50:	4b05      	ldr	r3, [pc, #20]	@ (8014c68 <tcp_trigger_input_pcb_close+0x1c>)
 8014c52:	781b      	ldrb	r3, [r3, #0]
 8014c54:	f043 0310 	orr.w	r3, r3, #16
 8014c58:	b2da      	uxtb	r2, r3
 8014c5a:	4b03      	ldr	r3, [pc, #12]	@ (8014c68 <tcp_trigger_input_pcb_close+0x1c>)
 8014c5c:	701a      	strb	r2, [r3, #0]
}
 8014c5e:	bf00      	nop
 8014c60:	46bd      	mov	sp, r7
 8014c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c66:	4770      	bx	lr
 8014c68:	20060bd1 	.word	0x20060bd1

08014c6c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b084      	sub	sp, #16
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	60f8      	str	r0, [r7, #12]
 8014c74:	60b9      	str	r1, [r7, #8]
 8014c76:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d00a      	beq.n	8014c94 <tcp_route+0x28>
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	7a1b      	ldrb	r3, [r3, #8]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d006      	beq.n	8014c94 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	7a1b      	ldrb	r3, [r3, #8]
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	f7fb fb22 	bl	80102d4 <netif_get_by_index>
 8014c90:	4603      	mov	r3, r0
 8014c92:	e003      	b.n	8014c9c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f002 fed1 	bl	8017a3c <ip4_route>
 8014c9a:	4603      	mov	r3, r0
  }
}
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	3710      	adds	r7, #16
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd80      	pop	{r7, pc}

08014ca4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014ca4:	b590      	push	{r4, r7, lr}
 8014ca6:	b087      	sub	sp, #28
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	60f8      	str	r0, [r7, #12]
 8014cac:	60b9      	str	r1, [r7, #8]
 8014cae:	603b      	str	r3, [r7, #0]
 8014cb0:	4613      	mov	r3, r2
 8014cb2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d105      	bne.n	8014cc6 <tcp_create_segment+0x22>
 8014cba:	4b43      	ldr	r3, [pc, #268]	@ (8014dc8 <tcp_create_segment+0x124>)
 8014cbc:	22a3      	movs	r2, #163	@ 0xa3
 8014cbe:	4943      	ldr	r1, [pc, #268]	@ (8014dcc <tcp_create_segment+0x128>)
 8014cc0:	4843      	ldr	r0, [pc, #268]	@ (8014dd0 <tcp_create_segment+0x12c>)
 8014cc2:	f004 fa99 	bl	80191f8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014cc6:	68bb      	ldr	r3, [r7, #8]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d105      	bne.n	8014cd8 <tcp_create_segment+0x34>
 8014ccc:	4b3e      	ldr	r3, [pc, #248]	@ (8014dc8 <tcp_create_segment+0x124>)
 8014cce:	22a4      	movs	r2, #164	@ 0xa4
 8014cd0:	4940      	ldr	r1, [pc, #256]	@ (8014dd4 <tcp_create_segment+0x130>)
 8014cd2:	483f      	ldr	r0, [pc, #252]	@ (8014dd0 <tcp_create_segment+0x12c>)
 8014cd4:	f004 fa90 	bl	80191f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014cd8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014cdc:	009b      	lsls	r3, r3, #2
 8014cde:	b2db      	uxtb	r3, r3
 8014ce0:	f003 0304 	and.w	r3, r3, #4
 8014ce4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014ce6:	2003      	movs	r0, #3
 8014ce8:	f7fa ff68 	bl	800fbbc <memp_malloc>
 8014cec:	6138      	str	r0, [r7, #16]
 8014cee:	693b      	ldr	r3, [r7, #16]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d104      	bne.n	8014cfe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014cf4:	68b8      	ldr	r0, [r7, #8]
 8014cf6:	f7fb fe7b 	bl	80109f0 <pbuf_free>
    return NULL;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	e060      	b.n	8014dc0 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8014cfe:	693b      	ldr	r3, [r7, #16]
 8014d00:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014d04:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014d06:	693b      	ldr	r3, [r7, #16]
 8014d08:	2200      	movs	r2, #0
 8014d0a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014d0c:	693b      	ldr	r3, [r7, #16]
 8014d0e:	68ba      	ldr	r2, [r7, #8]
 8014d10:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014d12:	68bb      	ldr	r3, [r7, #8]
 8014d14:	891a      	ldrh	r2, [r3, #8]
 8014d16:	7dfb      	ldrb	r3, [r7, #23]
 8014d18:	b29b      	uxth	r3, r3
 8014d1a:	429a      	cmp	r2, r3
 8014d1c:	d205      	bcs.n	8014d2a <tcp_create_segment+0x86>
 8014d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8014dc8 <tcp_create_segment+0x124>)
 8014d20:	22b0      	movs	r2, #176	@ 0xb0
 8014d22:	492d      	ldr	r1, [pc, #180]	@ (8014dd8 <tcp_create_segment+0x134>)
 8014d24:	482a      	ldr	r0, [pc, #168]	@ (8014dd0 <tcp_create_segment+0x12c>)
 8014d26:	f004 fa67 	bl	80191f8 <iprintf>
  seg->len = p->tot_len - optlen;
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	891a      	ldrh	r2, [r3, #8]
 8014d2e:	7dfb      	ldrb	r3, [r7, #23]
 8014d30:	b29b      	uxth	r3, r3
 8014d32:	1ad3      	subs	r3, r2, r3
 8014d34:	b29a      	uxth	r2, r3
 8014d36:	693b      	ldr	r3, [r7, #16]
 8014d38:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014d3a:	2114      	movs	r1, #20
 8014d3c:	68b8      	ldr	r0, [r7, #8]
 8014d3e:	f7fb fdc1 	bl	80108c4 <pbuf_add_header>
 8014d42:	4603      	mov	r3, r0
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d004      	beq.n	8014d52 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014d48:	6938      	ldr	r0, [r7, #16]
 8014d4a:	f7fd f8d2 	bl	8011ef2 <tcp_seg_free>
    return NULL;
 8014d4e:	2300      	movs	r3, #0
 8014d50:	e036      	b.n	8014dc0 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	685b      	ldr	r3, [r3, #4]
 8014d56:	685a      	ldr	r2, [r3, #4]
 8014d58:	693b      	ldr	r3, [r7, #16]
 8014d5a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	8ada      	ldrh	r2, [r3, #22]
 8014d60:	693b      	ldr	r3, [r7, #16]
 8014d62:	68dc      	ldr	r4, [r3, #12]
 8014d64:	4610      	mov	r0, r2
 8014d66:	f7fa f999 	bl	800f09c <lwip_htons>
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	8b1a      	ldrh	r2, [r3, #24]
 8014d72:	693b      	ldr	r3, [r7, #16]
 8014d74:	68dc      	ldr	r4, [r3, #12]
 8014d76:	4610      	mov	r0, r2
 8014d78:	f7fa f990 	bl	800f09c <lwip_htons>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014d80:	693b      	ldr	r3, [r7, #16]
 8014d82:	68dc      	ldr	r4, [r3, #12]
 8014d84:	6838      	ldr	r0, [r7, #0]
 8014d86:	f7fa f99e 	bl	800f0c6 <lwip_htonl>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014d8e:	7dfb      	ldrb	r3, [r7, #23]
 8014d90:	089b      	lsrs	r3, r3, #2
 8014d92:	b2db      	uxtb	r3, r3
 8014d94:	3305      	adds	r3, #5
 8014d96:	b29b      	uxth	r3, r3
 8014d98:	031b      	lsls	r3, r3, #12
 8014d9a:	b29a      	uxth	r2, r3
 8014d9c:	79fb      	ldrb	r3, [r7, #7]
 8014d9e:	b29b      	uxth	r3, r3
 8014da0:	4313      	orrs	r3, r2
 8014da2:	b29a      	uxth	r2, r3
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	68dc      	ldr	r4, [r3, #12]
 8014da8:	4610      	mov	r0, r2
 8014daa:	f7fa f977 	bl	800f09c <lwip_htons>
 8014dae:	4603      	mov	r3, r0
 8014db0:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	68db      	ldr	r3, [r3, #12]
 8014db6:	2200      	movs	r2, #0
 8014db8:	749a      	strb	r2, [r3, #18]
 8014dba:	2200      	movs	r2, #0
 8014dbc:	74da      	strb	r2, [r3, #19]
  return seg;
 8014dbe:	693b      	ldr	r3, [r7, #16]
}
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	371c      	adds	r7, #28
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd90      	pop	{r4, r7, pc}
 8014dc8:	0801b824 	.word	0x0801b824
 8014dcc:	0801b858 	.word	0x0801b858
 8014dd0:	0801b878 	.word	0x0801b878
 8014dd4:	0801b8a0 	.word	0x0801b8a0
 8014dd8:	0801b8c4 	.word	0x0801b8c4

08014ddc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014ddc:	b590      	push	{r4, r7, lr}
 8014dde:	b08b      	sub	sp, #44	@ 0x2c
 8014de0:	af02      	add	r7, sp, #8
 8014de2:	6078      	str	r0, [r7, #4]
 8014de4:	460b      	mov	r3, r1
 8014de6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014de8:	2300      	movs	r3, #0
 8014dea:	61fb      	str	r3, [r7, #28]
 8014dec:	2300      	movs	r3, #0
 8014dee:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014df0:	2300      	movs	r3, #0
 8014df2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d106      	bne.n	8014e08 <tcp_split_unsent_seg+0x2c>
 8014dfa:	4b95      	ldr	r3, [pc, #596]	@ (8015050 <tcp_split_unsent_seg+0x274>)
 8014dfc:	f240 324b 	movw	r2, #843	@ 0x34b
 8014e00:	4994      	ldr	r1, [pc, #592]	@ (8015054 <tcp_split_unsent_seg+0x278>)
 8014e02:	4895      	ldr	r0, [pc, #596]	@ (8015058 <tcp_split_unsent_seg+0x27c>)
 8014e04:	f004 f9f8 	bl	80191f8 <iprintf>

  useg = pcb->unsent;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e0c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014e0e:	697b      	ldr	r3, [r7, #20]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d102      	bne.n	8014e1a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014e14:	f04f 33ff 	mov.w	r3, #4294967295
 8014e18:	e116      	b.n	8015048 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014e1a:	887b      	ldrh	r3, [r7, #2]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d109      	bne.n	8014e34 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014e20:	4b8b      	ldr	r3, [pc, #556]	@ (8015050 <tcp_split_unsent_seg+0x274>)
 8014e22:	f240 3253 	movw	r2, #851	@ 0x353
 8014e26:	498d      	ldr	r1, [pc, #564]	@ (801505c <tcp_split_unsent_seg+0x280>)
 8014e28:	488b      	ldr	r0, [pc, #556]	@ (8015058 <tcp_split_unsent_seg+0x27c>)
 8014e2a:	f004 f9e5 	bl	80191f8 <iprintf>
    return ERR_VAL;
 8014e2e:	f06f 0305 	mvn.w	r3, #5
 8014e32:	e109      	b.n	8015048 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014e34:	697b      	ldr	r3, [r7, #20]
 8014e36:	891b      	ldrh	r3, [r3, #8]
 8014e38:	887a      	ldrh	r2, [r7, #2]
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	d301      	bcc.n	8014e42 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	e102      	b.n	8015048 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e46:	887a      	ldrh	r2, [r7, #2]
 8014e48:	429a      	cmp	r2, r3
 8014e4a:	d906      	bls.n	8014e5a <tcp_split_unsent_seg+0x7e>
 8014e4c:	4b80      	ldr	r3, [pc, #512]	@ (8015050 <tcp_split_unsent_seg+0x274>)
 8014e4e:	f240 325b 	movw	r2, #859	@ 0x35b
 8014e52:	4983      	ldr	r1, [pc, #524]	@ (8015060 <tcp_split_unsent_seg+0x284>)
 8014e54:	4880      	ldr	r0, [pc, #512]	@ (8015058 <tcp_split_unsent_seg+0x27c>)
 8014e56:	f004 f9cf 	bl	80191f8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014e5a:	697b      	ldr	r3, [r7, #20]
 8014e5c:	891b      	ldrh	r3, [r3, #8]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d106      	bne.n	8014e70 <tcp_split_unsent_seg+0x94>
 8014e62:	4b7b      	ldr	r3, [pc, #492]	@ (8015050 <tcp_split_unsent_seg+0x274>)
 8014e64:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8014e68:	497e      	ldr	r1, [pc, #504]	@ (8015064 <tcp_split_unsent_seg+0x288>)
 8014e6a:	487b      	ldr	r0, [pc, #492]	@ (8015058 <tcp_split_unsent_seg+0x27c>)
 8014e6c:	f004 f9c4 	bl	80191f8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	7a9b      	ldrb	r3, [r3, #10]
 8014e74:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014e76:	7bfb      	ldrb	r3, [r7, #15]
 8014e78:	009b      	lsls	r3, r3, #2
 8014e7a:	b2db      	uxtb	r3, r3
 8014e7c:	f003 0304 	and.w	r3, r3, #4
 8014e80:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014e82:	697b      	ldr	r3, [r7, #20]
 8014e84:	891a      	ldrh	r2, [r3, #8]
 8014e86:	887b      	ldrh	r3, [r7, #2]
 8014e88:	1ad3      	subs	r3, r2, r3
 8014e8a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014e8c:	7bbb      	ldrb	r3, [r7, #14]
 8014e8e:	b29a      	uxth	r2, r3
 8014e90:	89bb      	ldrh	r3, [r7, #12]
 8014e92:	4413      	add	r3, r2
 8014e94:	b29b      	uxth	r3, r3
 8014e96:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	2036      	movs	r0, #54	@ 0x36
 8014e9e:	f7fb fac3 	bl	8010428 <pbuf_alloc>
 8014ea2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	f000 80b7 	beq.w	801501a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014eac:	697b      	ldr	r3, [r7, #20]
 8014eae:	685b      	ldr	r3, [r3, #4]
 8014eb0:	891a      	ldrh	r2, [r3, #8]
 8014eb2:	697b      	ldr	r3, [r7, #20]
 8014eb4:	891b      	ldrh	r3, [r3, #8]
 8014eb6:	1ad3      	subs	r3, r2, r3
 8014eb8:	b29a      	uxth	r2, r3
 8014eba:	887b      	ldrh	r3, [r7, #2]
 8014ebc:	4413      	add	r3, r2
 8014ebe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	6858      	ldr	r0, [r3, #4]
 8014ec4:	693b      	ldr	r3, [r7, #16]
 8014ec6:	685a      	ldr	r2, [r3, #4]
 8014ec8:	7bbb      	ldrb	r3, [r7, #14]
 8014eca:	18d1      	adds	r1, r2, r3
 8014ecc:	897b      	ldrh	r3, [r7, #10]
 8014ece:	89ba      	ldrh	r2, [r7, #12]
 8014ed0:	f7fb ff84 	bl	8010ddc <pbuf_copy_partial>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	461a      	mov	r2, r3
 8014ed8:	89bb      	ldrh	r3, [r7, #12]
 8014eda:	4293      	cmp	r3, r2
 8014edc:	f040 809f 	bne.w	801501e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	68db      	ldr	r3, [r3, #12]
 8014ee4:	899b      	ldrh	r3, [r3, #12]
 8014ee6:	b29b      	uxth	r3, r3
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f7fa f8d7 	bl	800f09c <lwip_htons>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	b2db      	uxtb	r3, r3
 8014ef2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014ef6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014ef8:	2300      	movs	r3, #0
 8014efa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014efc:	7efb      	ldrb	r3, [r7, #27]
 8014efe:	f003 0308 	and.w	r3, r3, #8
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d007      	beq.n	8014f16 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014f06:	7efb      	ldrb	r3, [r7, #27]
 8014f08:	f023 0308 	bic.w	r3, r3, #8
 8014f0c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014f0e:	7ebb      	ldrb	r3, [r7, #26]
 8014f10:	f043 0308 	orr.w	r3, r3, #8
 8014f14:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014f16:	7efb      	ldrb	r3, [r7, #27]
 8014f18:	f003 0301 	and.w	r3, r3, #1
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d007      	beq.n	8014f30 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014f20:	7efb      	ldrb	r3, [r7, #27]
 8014f22:	f023 0301 	bic.w	r3, r3, #1
 8014f26:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014f28:	7ebb      	ldrb	r3, [r7, #26]
 8014f2a:	f043 0301 	orr.w	r3, r3, #1
 8014f2e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	68db      	ldr	r3, [r3, #12]
 8014f34:	685b      	ldr	r3, [r3, #4]
 8014f36:	4618      	mov	r0, r3
 8014f38:	f7fa f8c5 	bl	800f0c6 <lwip_htonl>
 8014f3c:	4602      	mov	r2, r0
 8014f3e:	887b      	ldrh	r3, [r7, #2]
 8014f40:	18d1      	adds	r1, r2, r3
 8014f42:	7eba      	ldrb	r2, [r7, #26]
 8014f44:	7bfb      	ldrb	r3, [r7, #15]
 8014f46:	9300      	str	r3, [sp, #0]
 8014f48:	460b      	mov	r3, r1
 8014f4a:	6939      	ldr	r1, [r7, #16]
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f7ff fea9 	bl	8014ca4 <tcp_create_segment>
 8014f52:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014f54:	69fb      	ldr	r3, [r7, #28]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d063      	beq.n	8015022 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	685b      	ldr	r3, [r3, #4]
 8014f5e:	4618      	mov	r0, r3
 8014f60:	f7fb fdd4 	bl	8010b0c <pbuf_clen>
 8014f64:	4603      	mov	r3, r0
 8014f66:	461a      	mov	r2, r3
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014f6e:	1a9b      	subs	r3, r3, r2
 8014f70:	b29a      	uxth	r2, r3
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014f78:	697b      	ldr	r3, [r7, #20]
 8014f7a:	6858      	ldr	r0, [r3, #4]
 8014f7c:	697b      	ldr	r3, [r7, #20]
 8014f7e:	685b      	ldr	r3, [r3, #4]
 8014f80:	891a      	ldrh	r2, [r3, #8]
 8014f82:	89bb      	ldrh	r3, [r7, #12]
 8014f84:	1ad3      	subs	r3, r2, r3
 8014f86:	b29b      	uxth	r3, r3
 8014f88:	4619      	mov	r1, r3
 8014f8a:	f7fb fbab 	bl	80106e4 <pbuf_realloc>
  useg->len -= remainder;
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	891a      	ldrh	r2, [r3, #8]
 8014f92:	89bb      	ldrh	r3, [r7, #12]
 8014f94:	1ad3      	subs	r3, r2, r3
 8014f96:	b29a      	uxth	r2, r3
 8014f98:	697b      	ldr	r3, [r7, #20]
 8014f9a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014f9c:	697b      	ldr	r3, [r7, #20]
 8014f9e:	68db      	ldr	r3, [r3, #12]
 8014fa0:	899b      	ldrh	r3, [r3, #12]
 8014fa2:	b29c      	uxth	r4, r3
 8014fa4:	7efb      	ldrb	r3, [r7, #27]
 8014fa6:	b29b      	uxth	r3, r3
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f7fa f877 	bl	800f09c <lwip_htons>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	461a      	mov	r2, r3
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	68db      	ldr	r3, [r3, #12]
 8014fb6:	4322      	orrs	r2, r4
 8014fb8:	b292      	uxth	r2, r2
 8014fba:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	685b      	ldr	r3, [r3, #4]
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f7fb fda3 	bl	8010b0c <pbuf_clen>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	461a      	mov	r2, r3
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014fd0:	4413      	add	r3, r2
 8014fd2:	b29a      	uxth	r2, r3
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014fda:	69fb      	ldr	r3, [r7, #28]
 8014fdc:	685b      	ldr	r3, [r3, #4]
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f7fb fd94 	bl	8010b0c <pbuf_clen>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	461a      	mov	r2, r3
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014fee:	4413      	add	r3, r2
 8014ff0:	b29a      	uxth	r2, r3
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014ff8:	697b      	ldr	r3, [r7, #20]
 8014ffa:	681a      	ldr	r2, [r3, #0]
 8014ffc:	69fb      	ldr	r3, [r7, #28]
 8014ffe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015000:	697b      	ldr	r3, [r7, #20]
 8015002:	69fa      	ldr	r2, [r7, #28]
 8015004:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015006:	69fb      	ldr	r3, [r7, #28]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d103      	bne.n	8015016 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	2200      	movs	r2, #0
 8015012:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015016:	2300      	movs	r3, #0
 8015018:	e016      	b.n	8015048 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801501a:	bf00      	nop
 801501c:	e002      	b.n	8015024 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801501e:	bf00      	nop
 8015020:	e000      	b.n	8015024 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015022:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015024:	69fb      	ldr	r3, [r7, #28]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d006      	beq.n	8015038 <tcp_split_unsent_seg+0x25c>
 801502a:	4b09      	ldr	r3, [pc, #36]	@ (8015050 <tcp_split_unsent_seg+0x274>)
 801502c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8015030:	490d      	ldr	r1, [pc, #52]	@ (8015068 <tcp_split_unsent_seg+0x28c>)
 8015032:	4809      	ldr	r0, [pc, #36]	@ (8015058 <tcp_split_unsent_seg+0x27c>)
 8015034:	f004 f8e0 	bl	80191f8 <iprintf>
  if (p != NULL) {
 8015038:	693b      	ldr	r3, [r7, #16]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d002      	beq.n	8015044 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801503e:	6938      	ldr	r0, [r7, #16]
 8015040:	f7fb fcd6 	bl	80109f0 <pbuf_free>
  }

  return ERR_MEM;
 8015044:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015048:	4618      	mov	r0, r3
 801504a:	3724      	adds	r7, #36	@ 0x24
 801504c:	46bd      	mov	sp, r7
 801504e:	bd90      	pop	{r4, r7, pc}
 8015050:	0801b824 	.word	0x0801b824
 8015054:	0801bbb8 	.word	0x0801bbb8
 8015058:	0801b878 	.word	0x0801b878
 801505c:	0801bbdc 	.word	0x0801bbdc
 8015060:	0801bc00 	.word	0x0801bc00
 8015064:	0801bc10 	.word	0x0801bc10
 8015068:	0801bc20 	.word	0x0801bc20

0801506c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801506c:	b590      	push	{r4, r7, lr}
 801506e:	b085      	sub	sp, #20
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d106      	bne.n	8015088 <tcp_send_fin+0x1c>
 801507a:	4b21      	ldr	r3, [pc, #132]	@ (8015100 <tcp_send_fin+0x94>)
 801507c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8015080:	4920      	ldr	r1, [pc, #128]	@ (8015104 <tcp_send_fin+0x98>)
 8015082:	4821      	ldr	r0, [pc, #132]	@ (8015108 <tcp_send_fin+0x9c>)
 8015084:	f004 f8b8 	bl	80191f8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801508c:	2b00      	cmp	r3, #0
 801508e:	d02e      	beq.n	80150ee <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015094:	60fb      	str	r3, [r7, #12]
 8015096:	e002      	b.n	801509e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d1f8      	bne.n	8015098 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	68db      	ldr	r3, [r3, #12]
 80150aa:	899b      	ldrh	r3, [r3, #12]
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7f9 fff4 	bl	800f09c <lwip_htons>
 80150b4:	4603      	mov	r3, r0
 80150b6:	b2db      	uxtb	r3, r3
 80150b8:	f003 0307 	and.w	r3, r3, #7
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d116      	bne.n	80150ee <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	68db      	ldr	r3, [r3, #12]
 80150c4:	899b      	ldrh	r3, [r3, #12]
 80150c6:	b29c      	uxth	r4, r3
 80150c8:	2001      	movs	r0, #1
 80150ca:	f7f9 ffe7 	bl	800f09c <lwip_htons>
 80150ce:	4603      	mov	r3, r0
 80150d0:	461a      	mov	r2, r3
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	68db      	ldr	r3, [r3, #12]
 80150d6:	4322      	orrs	r2, r4
 80150d8:	b292      	uxth	r2, r2
 80150da:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	8b5b      	ldrh	r3, [r3, #26]
 80150e0:	f043 0320 	orr.w	r3, r3, #32
 80150e4:	b29a      	uxth	r2, r3
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80150ea:	2300      	movs	r3, #0
 80150ec:	e004      	b.n	80150f8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80150ee:	2101      	movs	r1, #1
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	f000 f80b 	bl	801510c <tcp_enqueue_flags>
 80150f6:	4603      	mov	r3, r0
}
 80150f8:	4618      	mov	r0, r3
 80150fa:	3714      	adds	r7, #20
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd90      	pop	{r4, r7, pc}
 8015100:	0801b824 	.word	0x0801b824
 8015104:	0801bc2c 	.word	0x0801bc2c
 8015108:	0801b878 	.word	0x0801b878

0801510c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b08a      	sub	sp, #40	@ 0x28
 8015110:	af02      	add	r7, sp, #8
 8015112:	6078      	str	r0, [r7, #4]
 8015114:	460b      	mov	r3, r1
 8015116:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015118:	2300      	movs	r3, #0
 801511a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801511c:	2300      	movs	r3, #0
 801511e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015120:	78fb      	ldrb	r3, [r7, #3]
 8015122:	f003 0303 	and.w	r3, r3, #3
 8015126:	2b00      	cmp	r3, #0
 8015128:	d106      	bne.n	8015138 <tcp_enqueue_flags+0x2c>
 801512a:	4b67      	ldr	r3, [pc, #412]	@ (80152c8 <tcp_enqueue_flags+0x1bc>)
 801512c:	f240 4211 	movw	r2, #1041	@ 0x411
 8015130:	4966      	ldr	r1, [pc, #408]	@ (80152cc <tcp_enqueue_flags+0x1c0>)
 8015132:	4867      	ldr	r0, [pc, #412]	@ (80152d0 <tcp_enqueue_flags+0x1c4>)
 8015134:	f004 f860 	bl	80191f8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d106      	bne.n	801514c <tcp_enqueue_flags+0x40>
 801513e:	4b62      	ldr	r3, [pc, #392]	@ (80152c8 <tcp_enqueue_flags+0x1bc>)
 8015140:	f240 4213 	movw	r2, #1043	@ 0x413
 8015144:	4963      	ldr	r1, [pc, #396]	@ (80152d4 <tcp_enqueue_flags+0x1c8>)
 8015146:	4862      	ldr	r0, [pc, #392]	@ (80152d0 <tcp_enqueue_flags+0x1c4>)
 8015148:	f004 f856 	bl	80191f8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801514c:	78fb      	ldrb	r3, [r7, #3]
 801514e:	f003 0302 	and.w	r3, r3, #2
 8015152:	2b00      	cmp	r3, #0
 8015154:	d001      	beq.n	801515a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015156:	2301      	movs	r3, #1
 8015158:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801515a:	7ffb      	ldrb	r3, [r7, #31]
 801515c:	009b      	lsls	r3, r3, #2
 801515e:	b2db      	uxtb	r3, r3
 8015160:	f003 0304 	and.w	r3, r3, #4
 8015164:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015166:	7dfb      	ldrb	r3, [r7, #23]
 8015168:	b29b      	uxth	r3, r3
 801516a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801516e:	4619      	mov	r1, r3
 8015170:	2036      	movs	r0, #54	@ 0x36
 8015172:	f7fb f959 	bl	8010428 <pbuf_alloc>
 8015176:	6138      	str	r0, [r7, #16]
 8015178:	693b      	ldr	r3, [r7, #16]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d109      	bne.n	8015192 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	8b5b      	ldrh	r3, [r3, #26]
 8015182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015186:	b29a      	uxth	r2, r3
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801518c:	f04f 33ff 	mov.w	r3, #4294967295
 8015190:	e095      	b.n	80152be <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015192:	693b      	ldr	r3, [r7, #16]
 8015194:	895a      	ldrh	r2, [r3, #10]
 8015196:	7dfb      	ldrb	r3, [r7, #23]
 8015198:	b29b      	uxth	r3, r3
 801519a:	429a      	cmp	r2, r3
 801519c:	d206      	bcs.n	80151ac <tcp_enqueue_flags+0xa0>
 801519e:	4b4a      	ldr	r3, [pc, #296]	@ (80152c8 <tcp_enqueue_flags+0x1bc>)
 80151a0:	f240 4239 	movw	r2, #1081	@ 0x439
 80151a4:	494c      	ldr	r1, [pc, #304]	@ (80152d8 <tcp_enqueue_flags+0x1cc>)
 80151a6:	484a      	ldr	r0, [pc, #296]	@ (80152d0 <tcp_enqueue_flags+0x1c4>)
 80151a8:	f004 f826 	bl	80191f8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80151b0:	78fa      	ldrb	r2, [r7, #3]
 80151b2:	7ffb      	ldrb	r3, [r7, #31]
 80151b4:	9300      	str	r3, [sp, #0]
 80151b6:	460b      	mov	r3, r1
 80151b8:	6939      	ldr	r1, [r7, #16]
 80151ba:	6878      	ldr	r0, [r7, #4]
 80151bc:	f7ff fd72 	bl	8014ca4 <tcp_create_segment>
 80151c0:	60f8      	str	r0, [r7, #12]
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d109      	bne.n	80151dc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	8b5b      	ldrh	r3, [r3, #26]
 80151cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80151d0:	b29a      	uxth	r2, r3
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80151d6:	f04f 33ff 	mov.w	r3, #4294967295
 80151da:	e070      	b.n	80152be <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	68db      	ldr	r3, [r3, #12]
 80151e0:	f003 0303 	and.w	r3, r3, #3
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d006      	beq.n	80151f6 <tcp_enqueue_flags+0xea>
 80151e8:	4b37      	ldr	r3, [pc, #220]	@ (80152c8 <tcp_enqueue_flags+0x1bc>)
 80151ea:	f240 4242 	movw	r2, #1090	@ 0x442
 80151ee:	493b      	ldr	r1, [pc, #236]	@ (80152dc <tcp_enqueue_flags+0x1d0>)
 80151f0:	4837      	ldr	r0, [pc, #220]	@ (80152d0 <tcp_enqueue_flags+0x1c4>)
 80151f2:	f004 f801 	bl	80191f8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	891b      	ldrh	r3, [r3, #8]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d006      	beq.n	801520c <tcp_enqueue_flags+0x100>
 80151fe:	4b32      	ldr	r3, [pc, #200]	@ (80152c8 <tcp_enqueue_flags+0x1bc>)
 8015200:	f240 4243 	movw	r2, #1091	@ 0x443
 8015204:	4936      	ldr	r1, [pc, #216]	@ (80152e0 <tcp_enqueue_flags+0x1d4>)
 8015206:	4832      	ldr	r0, [pc, #200]	@ (80152d0 <tcp_enqueue_flags+0x1c4>)
 8015208:	f003 fff6 	bl	80191f8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015210:	2b00      	cmp	r3, #0
 8015212:	d103      	bne.n	801521c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	68fa      	ldr	r2, [r7, #12]
 8015218:	66da      	str	r2, [r3, #108]	@ 0x6c
 801521a:	e00d      	b.n	8015238 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015220:	61bb      	str	r3, [r7, #24]
 8015222:	e002      	b.n	801522a <tcp_enqueue_flags+0x11e>
 8015224:	69bb      	ldr	r3, [r7, #24]
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	61bb      	str	r3, [r7, #24]
 801522a:	69bb      	ldr	r3, [r7, #24]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d1f8      	bne.n	8015224 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015232:	69bb      	ldr	r3, [r7, #24]
 8015234:	68fa      	ldr	r2, [r7, #12]
 8015236:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	2200      	movs	r2, #0
 801523c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015240:	78fb      	ldrb	r3, [r7, #3]
 8015242:	f003 0302 	and.w	r3, r3, #2
 8015246:	2b00      	cmp	r3, #0
 8015248:	d104      	bne.n	8015254 <tcp_enqueue_flags+0x148>
 801524a:	78fb      	ldrb	r3, [r7, #3]
 801524c:	f003 0301 	and.w	r3, r3, #1
 8015250:	2b00      	cmp	r3, #0
 8015252:	d004      	beq.n	801525e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015258:	1c5a      	adds	r2, r3, #1
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801525e:	78fb      	ldrb	r3, [r7, #3]
 8015260:	f003 0301 	and.w	r3, r3, #1
 8015264:	2b00      	cmp	r3, #0
 8015266:	d006      	beq.n	8015276 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	8b5b      	ldrh	r3, [r3, #26]
 801526c:	f043 0320 	orr.w	r3, r3, #32
 8015270:	b29a      	uxth	r2, r3
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	685b      	ldr	r3, [r3, #4]
 801527a:	4618      	mov	r0, r3
 801527c:	f7fb fc46 	bl	8010b0c <pbuf_clen>
 8015280:	4603      	mov	r3, r0
 8015282:	461a      	mov	r2, r3
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801528a:	4413      	add	r3, r2
 801528c:	b29a      	uxth	r2, r3
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801529a:	2b00      	cmp	r3, #0
 801529c:	d00e      	beq.n	80152bc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d10a      	bne.n	80152bc <tcp_enqueue_flags+0x1b0>
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d106      	bne.n	80152bc <tcp_enqueue_flags+0x1b0>
 80152ae:	4b06      	ldr	r3, [pc, #24]	@ (80152c8 <tcp_enqueue_flags+0x1bc>)
 80152b0:	f240 4265 	movw	r2, #1125	@ 0x465
 80152b4:	490b      	ldr	r1, [pc, #44]	@ (80152e4 <tcp_enqueue_flags+0x1d8>)
 80152b6:	4806      	ldr	r0, [pc, #24]	@ (80152d0 <tcp_enqueue_flags+0x1c4>)
 80152b8:	f003 ff9e 	bl	80191f8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80152bc:	2300      	movs	r3, #0
}
 80152be:	4618      	mov	r0, r3
 80152c0:	3720      	adds	r7, #32
 80152c2:	46bd      	mov	sp, r7
 80152c4:	bd80      	pop	{r7, pc}
 80152c6:	bf00      	nop
 80152c8:	0801b824 	.word	0x0801b824
 80152cc:	0801bc48 	.word	0x0801bc48
 80152d0:	0801b878 	.word	0x0801b878
 80152d4:	0801bca0 	.word	0x0801bca0
 80152d8:	0801bcc0 	.word	0x0801bcc0
 80152dc:	0801bcfc 	.word	0x0801bcfc
 80152e0:	0801bd14 	.word	0x0801bd14
 80152e4:	0801bd40 	.word	0x0801bd40

080152e8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80152e8:	b5b0      	push	{r4, r5, r7, lr}
 80152ea:	b08a      	sub	sp, #40	@ 0x28
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d106      	bne.n	8015304 <tcp_output+0x1c>
 80152f6:	4b8a      	ldr	r3, [pc, #552]	@ (8015520 <tcp_output+0x238>)
 80152f8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80152fc:	4989      	ldr	r1, [pc, #548]	@ (8015524 <tcp_output+0x23c>)
 80152fe:	488a      	ldr	r0, [pc, #552]	@ (8015528 <tcp_output+0x240>)
 8015300:	f003 ff7a 	bl	80191f8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	7d1b      	ldrb	r3, [r3, #20]
 8015308:	2b01      	cmp	r3, #1
 801530a:	d106      	bne.n	801531a <tcp_output+0x32>
 801530c:	4b84      	ldr	r3, [pc, #528]	@ (8015520 <tcp_output+0x238>)
 801530e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8015312:	4986      	ldr	r1, [pc, #536]	@ (801552c <tcp_output+0x244>)
 8015314:	4884      	ldr	r0, [pc, #528]	@ (8015528 <tcp_output+0x240>)
 8015316:	f003 ff6f 	bl	80191f8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801531a:	4b85      	ldr	r3, [pc, #532]	@ (8015530 <tcp_output+0x248>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	687a      	ldr	r2, [r7, #4]
 8015320:	429a      	cmp	r2, r3
 8015322:	d101      	bne.n	8015328 <tcp_output+0x40>
    return ERR_OK;
 8015324:	2300      	movs	r3, #0
 8015326:	e1ce      	b.n	80156c6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015334:	4293      	cmp	r3, r2
 8015336:	bf28      	it	cs
 8015338:	4613      	movcs	r3, r2
 801533a:	b29b      	uxth	r3, r3
 801533c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015342:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8015344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015346:	2b00      	cmp	r3, #0
 8015348:	d10b      	bne.n	8015362 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	8b5b      	ldrh	r3, [r3, #26]
 801534e:	f003 0302 	and.w	r3, r3, #2
 8015352:	2b00      	cmp	r3, #0
 8015354:	f000 81aa 	beq.w	80156ac <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015358:	6878      	ldr	r0, [r7, #4]
 801535a:	f000 fdcb 	bl	8015ef4 <tcp_send_empty_ack>
 801535e:	4603      	mov	r3, r0
 8015360:	e1b1      	b.n	80156c6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015362:	6879      	ldr	r1, [r7, #4]
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	3304      	adds	r3, #4
 8015368:	461a      	mov	r2, r3
 801536a:	6878      	ldr	r0, [r7, #4]
 801536c:	f7ff fc7e 	bl	8014c6c <tcp_route>
 8015370:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d102      	bne.n	801537e <tcp_output+0x96>
    return ERR_RTE;
 8015378:	f06f 0303 	mvn.w	r3, #3
 801537c:	e1a3      	b.n	80156c6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d003      	beq.n	801538c <tcp_output+0xa4>
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d111      	bne.n	80153b0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801538c:	697b      	ldr	r3, [r7, #20]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d002      	beq.n	8015398 <tcp_output+0xb0>
 8015392:	697b      	ldr	r3, [r7, #20]
 8015394:	3304      	adds	r3, #4
 8015396:	e000      	b.n	801539a <tcp_output+0xb2>
 8015398:	2300      	movs	r3, #0
 801539a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801539c:	693b      	ldr	r3, [r7, #16]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d102      	bne.n	80153a8 <tcp_output+0xc0>
      return ERR_RTE;
 80153a2:	f06f 0303 	mvn.w	r3, #3
 80153a6:	e18e      	b.n	80156c6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80153a8:	693b      	ldr	r3, [r7, #16]
 80153aa:	681a      	ldr	r2, [r3, #0]
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80153b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153b2:	68db      	ldr	r3, [r3, #12]
 80153b4:	685b      	ldr	r3, [r3, #4]
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7f9 fe85 	bl	800f0c6 <lwip_htonl>
 80153bc:	4602      	mov	r2, r0
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80153c2:	1ad3      	subs	r3, r2, r3
 80153c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80153c6:	8912      	ldrh	r2, [r2, #8]
 80153c8:	4413      	add	r3, r2
 80153ca:	69ba      	ldr	r2, [r7, #24]
 80153cc:	429a      	cmp	r2, r3
 80153ce:	d227      	bcs.n	8015420 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80153d6:	461a      	mov	r2, r3
 80153d8:	69bb      	ldr	r3, [r7, #24]
 80153da:	4293      	cmp	r3, r2
 80153dc:	d114      	bne.n	8015408 <tcp_output+0x120>
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d110      	bne.n	8015408 <tcp_output+0x120>
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d10b      	bne.n	8015408 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	2200      	movs	r2, #0
 80153f4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	2201      	movs	r2, #1
 80153fc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	2200      	movs	r2, #0
 8015404:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	8b5b      	ldrh	r3, [r3, #26]
 801540c:	f003 0302 	and.w	r3, r3, #2
 8015410:	2b00      	cmp	r3, #0
 8015412:	f000 814d 	beq.w	80156b0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015416:	6878      	ldr	r0, [r7, #4]
 8015418:	f000 fd6c 	bl	8015ef4 <tcp_send_empty_ack>
 801541c:	4603      	mov	r3, r0
 801541e:	e152      	b.n	80156c6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	2200      	movs	r2, #0
 8015424:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801542c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801542e:	6a3b      	ldr	r3, [r7, #32]
 8015430:	2b00      	cmp	r3, #0
 8015432:	f000 811c 	beq.w	801566e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015436:	e002      	b.n	801543e <tcp_output+0x156>
 8015438:	6a3b      	ldr	r3, [r7, #32]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	623b      	str	r3, [r7, #32]
 801543e:	6a3b      	ldr	r3, [r7, #32]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d1f8      	bne.n	8015438 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015446:	e112      	b.n	801566e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801544a:	68db      	ldr	r3, [r3, #12]
 801544c:	899b      	ldrh	r3, [r3, #12]
 801544e:	b29b      	uxth	r3, r3
 8015450:	4618      	mov	r0, r3
 8015452:	f7f9 fe23 	bl	800f09c <lwip_htons>
 8015456:	4603      	mov	r3, r0
 8015458:	b2db      	uxtb	r3, r3
 801545a:	f003 0304 	and.w	r3, r3, #4
 801545e:	2b00      	cmp	r3, #0
 8015460:	d006      	beq.n	8015470 <tcp_output+0x188>
 8015462:	4b2f      	ldr	r3, [pc, #188]	@ (8015520 <tcp_output+0x238>)
 8015464:	f240 5236 	movw	r2, #1334	@ 0x536
 8015468:	4932      	ldr	r1, [pc, #200]	@ (8015534 <tcp_output+0x24c>)
 801546a:	482f      	ldr	r0, [pc, #188]	@ (8015528 <tcp_output+0x240>)
 801546c:	f003 fec4 	bl	80191f8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015474:	2b00      	cmp	r3, #0
 8015476:	d01f      	beq.n	80154b8 <tcp_output+0x1d0>
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	8b5b      	ldrh	r3, [r3, #26]
 801547c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8015480:	2b00      	cmp	r3, #0
 8015482:	d119      	bne.n	80154b8 <tcp_output+0x1d0>
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015488:	2b00      	cmp	r3, #0
 801548a:	d00b      	beq.n	80154a4 <tcp_output+0x1bc>
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d110      	bne.n	80154b8 <tcp_output+0x1d0>
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801549a:	891a      	ldrh	r2, [r3, #8]
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80154a0:	429a      	cmp	r2, r3
 80154a2:	d209      	bcs.n	80154b8 <tcp_output+0x1d0>
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d004      	beq.n	80154b8 <tcp_output+0x1d0>
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80154b4:	2b08      	cmp	r3, #8
 80154b6:	d901      	bls.n	80154bc <tcp_output+0x1d4>
 80154b8:	2301      	movs	r3, #1
 80154ba:	e000      	b.n	80154be <tcp_output+0x1d6>
 80154bc:	2300      	movs	r3, #0
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d106      	bne.n	80154d0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	8b5b      	ldrh	r3, [r3, #26]
 80154c6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	f000 80e4 	beq.w	8015698 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	7d1b      	ldrb	r3, [r3, #20]
 80154d4:	2b02      	cmp	r3, #2
 80154d6:	d00d      	beq.n	80154f4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80154d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154da:	68db      	ldr	r3, [r3, #12]
 80154dc:	899b      	ldrh	r3, [r3, #12]
 80154de:	b29c      	uxth	r4, r3
 80154e0:	2010      	movs	r0, #16
 80154e2:	f7f9 fddb 	bl	800f09c <lwip_htons>
 80154e6:	4603      	mov	r3, r0
 80154e8:	461a      	mov	r2, r3
 80154ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154ec:	68db      	ldr	r3, [r3, #12]
 80154ee:	4322      	orrs	r2, r4
 80154f0:	b292      	uxth	r2, r2
 80154f2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80154f4:	697a      	ldr	r2, [r7, #20]
 80154f6:	6879      	ldr	r1, [r7, #4]
 80154f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80154fa:	f000 f909 	bl	8015710 <tcp_output_segment>
 80154fe:	4603      	mov	r3, r0
 8015500:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d016      	beq.n	8015538 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	8b5b      	ldrh	r3, [r3, #26]
 801550e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015512:	b29a      	uxth	r2, r3
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	835a      	strh	r2, [r3, #26]
      return err;
 8015518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801551c:	e0d3      	b.n	80156c6 <tcp_output+0x3de>
 801551e:	bf00      	nop
 8015520:	0801b824 	.word	0x0801b824
 8015524:	0801bd68 	.word	0x0801bd68
 8015528:	0801b878 	.word	0x0801b878
 801552c:	0801bd80 	.word	0x0801bd80
 8015530:	20060bd8 	.word	0x20060bd8
 8015534:	0801bda8 	.word	0x0801bda8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801553a:	681a      	ldr	r2, [r3, #0]
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	7d1b      	ldrb	r3, [r3, #20]
 8015544:	2b02      	cmp	r3, #2
 8015546:	d006      	beq.n	8015556 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	8b5b      	ldrh	r3, [r3, #26]
 801554c:	f023 0303 	bic.w	r3, r3, #3
 8015550:	b29a      	uxth	r2, r3
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015558:	68db      	ldr	r3, [r3, #12]
 801555a:	685b      	ldr	r3, [r3, #4]
 801555c:	4618      	mov	r0, r3
 801555e:	f7f9 fdb2 	bl	800f0c6 <lwip_htonl>
 8015562:	4604      	mov	r4, r0
 8015564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015566:	891b      	ldrh	r3, [r3, #8]
 8015568:	461d      	mov	r5, r3
 801556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801556c:	68db      	ldr	r3, [r3, #12]
 801556e:	899b      	ldrh	r3, [r3, #12]
 8015570:	b29b      	uxth	r3, r3
 8015572:	4618      	mov	r0, r3
 8015574:	f7f9 fd92 	bl	800f09c <lwip_htons>
 8015578:	4603      	mov	r3, r0
 801557a:	b2db      	uxtb	r3, r3
 801557c:	f003 0303 	and.w	r3, r3, #3
 8015580:	2b00      	cmp	r3, #0
 8015582:	d001      	beq.n	8015588 <tcp_output+0x2a0>
 8015584:	2301      	movs	r3, #1
 8015586:	e000      	b.n	801558a <tcp_output+0x2a2>
 8015588:	2300      	movs	r3, #0
 801558a:	442b      	add	r3, r5
 801558c:	4423      	add	r3, r4
 801558e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015594:	68bb      	ldr	r3, [r7, #8]
 8015596:	1ad3      	subs	r3, r2, r3
 8015598:	2b00      	cmp	r3, #0
 801559a:	da02      	bge.n	80155a2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	68ba      	ldr	r2, [r7, #8]
 80155a0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80155a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155a4:	891b      	ldrh	r3, [r3, #8]
 80155a6:	461c      	mov	r4, r3
 80155a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155aa:	68db      	ldr	r3, [r3, #12]
 80155ac:	899b      	ldrh	r3, [r3, #12]
 80155ae:	b29b      	uxth	r3, r3
 80155b0:	4618      	mov	r0, r3
 80155b2:	f7f9 fd73 	bl	800f09c <lwip_htons>
 80155b6:	4603      	mov	r3, r0
 80155b8:	b2db      	uxtb	r3, r3
 80155ba:	f003 0303 	and.w	r3, r3, #3
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d001      	beq.n	80155c6 <tcp_output+0x2de>
 80155c2:	2301      	movs	r3, #1
 80155c4:	e000      	b.n	80155c8 <tcp_output+0x2e0>
 80155c6:	2300      	movs	r3, #0
 80155c8:	4423      	add	r3, r4
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d049      	beq.n	8015662 <tcp_output+0x37a>
      seg->next = NULL;
 80155ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155d0:	2200      	movs	r2, #0
 80155d2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d105      	bne.n	80155e8 <tcp_output+0x300>
        pcb->unacked = seg;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80155e0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80155e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155e4:	623b      	str	r3, [r7, #32]
 80155e6:	e03f      	b.n	8015668 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80155e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155ea:	68db      	ldr	r3, [r3, #12]
 80155ec:	685b      	ldr	r3, [r3, #4]
 80155ee:	4618      	mov	r0, r3
 80155f0:	f7f9 fd69 	bl	800f0c6 <lwip_htonl>
 80155f4:	4604      	mov	r4, r0
 80155f6:	6a3b      	ldr	r3, [r7, #32]
 80155f8:	68db      	ldr	r3, [r3, #12]
 80155fa:	685b      	ldr	r3, [r3, #4]
 80155fc:	4618      	mov	r0, r3
 80155fe:	f7f9 fd62 	bl	800f0c6 <lwip_htonl>
 8015602:	4603      	mov	r3, r0
 8015604:	1ae3      	subs	r3, r4, r3
 8015606:	2b00      	cmp	r3, #0
 8015608:	da24      	bge.n	8015654 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	3370      	adds	r3, #112	@ 0x70
 801560e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015610:	e002      	b.n	8015618 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015612:	69fb      	ldr	r3, [r7, #28]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015618:	69fb      	ldr	r3, [r7, #28]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d011      	beq.n	8015644 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015620:	69fb      	ldr	r3, [r7, #28]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	68db      	ldr	r3, [r3, #12]
 8015626:	685b      	ldr	r3, [r3, #4]
 8015628:	4618      	mov	r0, r3
 801562a:	f7f9 fd4c 	bl	800f0c6 <lwip_htonl>
 801562e:	4604      	mov	r4, r0
 8015630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015632:	68db      	ldr	r3, [r3, #12]
 8015634:	685b      	ldr	r3, [r3, #4]
 8015636:	4618      	mov	r0, r3
 8015638:	f7f9 fd45 	bl	800f0c6 <lwip_htonl>
 801563c:	4603      	mov	r3, r0
 801563e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015640:	2b00      	cmp	r3, #0
 8015642:	dbe6      	blt.n	8015612 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015644:	69fb      	ldr	r3, [r7, #28]
 8015646:	681a      	ldr	r2, [r3, #0]
 8015648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801564a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801564c:	69fb      	ldr	r3, [r7, #28]
 801564e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015650:	601a      	str	r2, [r3, #0]
 8015652:	e009      	b.n	8015668 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015654:	6a3b      	ldr	r3, [r7, #32]
 8015656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015658:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801565a:	6a3b      	ldr	r3, [r7, #32]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	623b      	str	r3, [r7, #32]
 8015660:	e002      	b.n	8015668 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015662:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015664:	f7fc fc45 	bl	8011ef2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801566c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015670:	2b00      	cmp	r3, #0
 8015672:	d012      	beq.n	801569a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015676:	68db      	ldr	r3, [r3, #12]
 8015678:	685b      	ldr	r3, [r3, #4]
 801567a:	4618      	mov	r0, r3
 801567c:	f7f9 fd23 	bl	800f0c6 <lwip_htonl>
 8015680:	4602      	mov	r2, r0
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015686:	1ad3      	subs	r3, r2, r3
 8015688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801568a:	8912      	ldrh	r2, [r2, #8]
 801568c:	4413      	add	r3, r2
  while (seg != NULL &&
 801568e:	69ba      	ldr	r2, [r7, #24]
 8015690:	429a      	cmp	r2, r3
 8015692:	f4bf aed9 	bcs.w	8015448 <tcp_output+0x160>
 8015696:	e000      	b.n	801569a <tcp_output+0x3b2>
      break;
 8015698:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d108      	bne.n	80156b4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	2200      	movs	r2, #0
 80156a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80156aa:	e004      	b.n	80156b6 <tcp_output+0x3ce>
    goto output_done;
 80156ac:	bf00      	nop
 80156ae:	e002      	b.n	80156b6 <tcp_output+0x3ce>
    goto output_done;
 80156b0:	bf00      	nop
 80156b2:	e000      	b.n	80156b6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80156b4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	8b5b      	ldrh	r3, [r3, #26]
 80156ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80156be:	b29a      	uxth	r2, r3
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80156c4:	2300      	movs	r3, #0
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3728      	adds	r7, #40	@ 0x28
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bdb0      	pop	{r4, r5, r7, pc}
 80156ce:	bf00      	nop

080156d0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b082      	sub	sp, #8
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d106      	bne.n	80156ec <tcp_output_segment_busy+0x1c>
 80156de:	4b09      	ldr	r3, [pc, #36]	@ (8015704 <tcp_output_segment_busy+0x34>)
 80156e0:	f240 529a 	movw	r2, #1434	@ 0x59a
 80156e4:	4908      	ldr	r1, [pc, #32]	@ (8015708 <tcp_output_segment_busy+0x38>)
 80156e6:	4809      	ldr	r0, [pc, #36]	@ (801570c <tcp_output_segment_busy+0x3c>)
 80156e8:	f003 fd86 	bl	80191f8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	685b      	ldr	r3, [r3, #4]
 80156f0:	7b9b      	ldrb	r3, [r3, #14]
 80156f2:	2b01      	cmp	r3, #1
 80156f4:	d001      	beq.n	80156fa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80156f6:	2301      	movs	r3, #1
 80156f8:	e000      	b.n	80156fc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80156fa:	2300      	movs	r3, #0
}
 80156fc:	4618      	mov	r0, r3
 80156fe:	3708      	adds	r7, #8
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}
 8015704:	0801b824 	.word	0x0801b824
 8015708:	0801bdc0 	.word	0x0801bdc0
 801570c:	0801b878 	.word	0x0801b878

08015710 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015710:	b5b0      	push	{r4, r5, r7, lr}
 8015712:	b08c      	sub	sp, #48	@ 0x30
 8015714:	af04      	add	r7, sp, #16
 8015716:	60f8      	str	r0, [r7, #12]
 8015718:	60b9      	str	r1, [r7, #8]
 801571a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d106      	bne.n	8015730 <tcp_output_segment+0x20>
 8015722:	4b64      	ldr	r3, [pc, #400]	@ (80158b4 <tcp_output_segment+0x1a4>)
 8015724:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8015728:	4963      	ldr	r1, [pc, #396]	@ (80158b8 <tcp_output_segment+0x1a8>)
 801572a:	4864      	ldr	r0, [pc, #400]	@ (80158bc <tcp_output_segment+0x1ac>)
 801572c:	f003 fd64 	bl	80191f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d106      	bne.n	8015744 <tcp_output_segment+0x34>
 8015736:	4b5f      	ldr	r3, [pc, #380]	@ (80158b4 <tcp_output_segment+0x1a4>)
 8015738:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801573c:	4960      	ldr	r1, [pc, #384]	@ (80158c0 <tcp_output_segment+0x1b0>)
 801573e:	485f      	ldr	r0, [pc, #380]	@ (80158bc <tcp_output_segment+0x1ac>)
 8015740:	f003 fd5a 	bl	80191f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d106      	bne.n	8015758 <tcp_output_segment+0x48>
 801574a:	4b5a      	ldr	r3, [pc, #360]	@ (80158b4 <tcp_output_segment+0x1a4>)
 801574c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8015750:	495c      	ldr	r1, [pc, #368]	@ (80158c4 <tcp_output_segment+0x1b4>)
 8015752:	485a      	ldr	r0, [pc, #360]	@ (80158bc <tcp_output_segment+0x1ac>)
 8015754:	f003 fd50 	bl	80191f8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015758:	68f8      	ldr	r0, [r7, #12]
 801575a:	f7ff ffb9 	bl	80156d0 <tcp_output_segment_busy>
 801575e:	4603      	mov	r3, r0
 8015760:	2b00      	cmp	r3, #0
 8015762:	d001      	beq.n	8015768 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015764:	2300      	movs	r3, #0
 8015766:	e0a1      	b.n	80158ac <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015768:	68bb      	ldr	r3, [r7, #8]
 801576a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	68dc      	ldr	r4, [r3, #12]
 8015770:	4610      	mov	r0, r2
 8015772:	f7f9 fca8 	bl	800f0c6 <lwip_htonl>
 8015776:	4603      	mov	r3, r0
 8015778:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801577a:	68bb      	ldr	r3, [r7, #8]
 801577c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	68dc      	ldr	r4, [r3, #12]
 8015782:	4610      	mov	r0, r2
 8015784:	f7f9 fc8a 	bl	800f09c <lwip_htons>
 8015788:	4603      	mov	r3, r0
 801578a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015790:	68ba      	ldr	r2, [r7, #8]
 8015792:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015794:	441a      	add	r2, r3
 8015796:	68bb      	ldr	r3, [r7, #8]
 8015798:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	68db      	ldr	r3, [r3, #12]
 801579e:	3314      	adds	r3, #20
 80157a0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	7a9b      	ldrb	r3, [r3, #10]
 80157a6:	f003 0301 	and.w	r3, r3, #1
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d015      	beq.n	80157da <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	3304      	adds	r3, #4
 80157b2:	461a      	mov	r2, r3
 80157b4:	6879      	ldr	r1, [r7, #4]
 80157b6:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80157ba:	f7fc fe91 	bl	80124e0 <tcp_eff_send_mss_netif>
 80157be:	4603      	mov	r3, r0
 80157c0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80157c2:	8b7b      	ldrh	r3, [r7, #26]
 80157c4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80157c8:	4618      	mov	r0, r3
 80157ca:	f7f9 fc7c 	bl	800f0c6 <lwip_htonl>
 80157ce:	4602      	mov	r2, r0
 80157d0:	69fb      	ldr	r3, [r7, #28]
 80157d2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80157d4:	69fb      	ldr	r3, [r7, #28]
 80157d6:	3304      	adds	r3, #4
 80157d8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80157da:	68bb      	ldr	r3, [r7, #8]
 80157dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	da02      	bge.n	80157ea <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	2200      	movs	r2, #0
 80157e8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80157ea:	68bb      	ldr	r3, [r7, #8]
 80157ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d10c      	bne.n	801580c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80157f2:	4b35      	ldr	r3, [pc, #212]	@ (80158c8 <tcp_output_segment+0x1b8>)
 80157f4:	681a      	ldr	r2, [r3, #0]
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	68db      	ldr	r3, [r3, #12]
 80157fe:	685b      	ldr	r3, [r3, #4]
 8015800:	4618      	mov	r0, r3
 8015802:	f7f9 fc60 	bl	800f0c6 <lwip_htonl>
 8015806:	4602      	mov	r2, r0
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	68da      	ldr	r2, [r3, #12]
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	685b      	ldr	r3, [r3, #4]
 8015814:	685b      	ldr	r3, [r3, #4]
 8015816:	1ad3      	subs	r3, r2, r3
 8015818:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	685b      	ldr	r3, [r3, #4]
 801581e:	8959      	ldrh	r1, [r3, #10]
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	685b      	ldr	r3, [r3, #4]
 8015824:	8b3a      	ldrh	r2, [r7, #24]
 8015826:	1a8a      	subs	r2, r1, r2
 8015828:	b292      	uxth	r2, r2
 801582a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	685b      	ldr	r3, [r3, #4]
 8015830:	8919      	ldrh	r1, [r3, #8]
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	685b      	ldr	r3, [r3, #4]
 8015836:	8b3a      	ldrh	r2, [r7, #24]
 8015838:	1a8a      	subs	r2, r1, r2
 801583a:	b292      	uxth	r2, r2
 801583c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	685b      	ldr	r3, [r3, #4]
 8015842:	68fa      	ldr	r2, [r7, #12]
 8015844:	68d2      	ldr	r2, [r2, #12]
 8015846:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	68db      	ldr	r3, [r3, #12]
 801584c:	2200      	movs	r2, #0
 801584e:	741a      	strb	r2, [r3, #16]
 8015850:	2200      	movs	r2, #0
 8015852:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	68da      	ldr	r2, [r3, #12]
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	7a9b      	ldrb	r3, [r3, #10]
 801585c:	f003 0301 	and.w	r3, r3, #1
 8015860:	2b00      	cmp	r3, #0
 8015862:	d001      	beq.n	8015868 <tcp_output_segment+0x158>
 8015864:	2318      	movs	r3, #24
 8015866:	e000      	b.n	801586a <tcp_output_segment+0x15a>
 8015868:	2314      	movs	r3, #20
 801586a:	4413      	add	r3, r2
 801586c:	69fa      	ldr	r2, [r7, #28]
 801586e:	429a      	cmp	r2, r3
 8015870:	d006      	beq.n	8015880 <tcp_output_segment+0x170>
 8015872:	4b10      	ldr	r3, [pc, #64]	@ (80158b4 <tcp_output_segment+0x1a4>)
 8015874:	f240 621c 	movw	r2, #1564	@ 0x61c
 8015878:	4914      	ldr	r1, [pc, #80]	@ (80158cc <tcp_output_segment+0x1bc>)
 801587a:	4810      	ldr	r0, [pc, #64]	@ (80158bc <tcp_output_segment+0x1ac>)
 801587c:	f003 fcbc 	bl	80191f8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	6858      	ldr	r0, [r3, #4]
 8015884:	68b9      	ldr	r1, [r7, #8]
 8015886:	68bb      	ldr	r3, [r7, #8]
 8015888:	1d1c      	adds	r4, r3, #4
 801588a:	68bb      	ldr	r3, [r7, #8]
 801588c:	7add      	ldrb	r5, [r3, #11]
 801588e:	68bb      	ldr	r3, [r7, #8]
 8015890:	7a9b      	ldrb	r3, [r3, #10]
 8015892:	687a      	ldr	r2, [r7, #4]
 8015894:	9202      	str	r2, [sp, #8]
 8015896:	2206      	movs	r2, #6
 8015898:	9201      	str	r2, [sp, #4]
 801589a:	9300      	str	r3, [sp, #0]
 801589c:	462b      	mov	r3, r5
 801589e:	4622      	mov	r2, r4
 80158a0:	f002 fa8a 	bl	8017db8 <ip4_output_if>
 80158a4:	4603      	mov	r3, r0
 80158a6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80158a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80158ac:	4618      	mov	r0, r3
 80158ae:	3720      	adds	r7, #32
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bdb0      	pop	{r4, r5, r7, pc}
 80158b4:	0801b824 	.word	0x0801b824
 80158b8:	0801bde8 	.word	0x0801bde8
 80158bc:	0801b878 	.word	0x0801b878
 80158c0:	0801be08 	.word	0x0801be08
 80158c4:	0801be28 	.word	0x0801be28
 80158c8:	20060b8c 	.word	0x20060b8c
 80158cc:	0801be4c 	.word	0x0801be4c

080158d0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80158d0:	b5b0      	push	{r4, r5, r7, lr}
 80158d2:	b084      	sub	sp, #16
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d106      	bne.n	80158ec <tcp_rexmit_rto_prepare+0x1c>
 80158de:	4b31      	ldr	r3, [pc, #196]	@ (80159a4 <tcp_rexmit_rto_prepare+0xd4>)
 80158e0:	f240 6263 	movw	r2, #1635	@ 0x663
 80158e4:	4930      	ldr	r1, [pc, #192]	@ (80159a8 <tcp_rexmit_rto_prepare+0xd8>)
 80158e6:	4831      	ldr	r0, [pc, #196]	@ (80159ac <tcp_rexmit_rto_prepare+0xdc>)
 80158e8:	f003 fc86 	bl	80191f8 <iprintf>

  if (pcb->unacked == NULL) {
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d102      	bne.n	80158fa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80158f4:	f06f 0305 	mvn.w	r3, #5
 80158f8:	e050      	b.n	801599c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158fe:	60fb      	str	r3, [r7, #12]
 8015900:	e00b      	b.n	801591a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015902:	68f8      	ldr	r0, [r7, #12]
 8015904:	f7ff fee4 	bl	80156d0 <tcp_output_segment_busy>
 8015908:	4603      	mov	r3, r0
 801590a:	2b00      	cmp	r3, #0
 801590c:	d002      	beq.n	8015914 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801590e:	f06f 0305 	mvn.w	r3, #5
 8015912:	e043      	b.n	801599c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	60fb      	str	r3, [r7, #12]
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d1ef      	bne.n	8015902 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015922:	68f8      	ldr	r0, [r7, #12]
 8015924:	f7ff fed4 	bl	80156d0 <tcp_output_segment_busy>
 8015928:	4603      	mov	r3, r0
 801592a:	2b00      	cmp	r3, #0
 801592c:	d002      	beq.n	8015934 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801592e:	f06f 0305 	mvn.w	r3, #5
 8015932:	e033      	b.n	801599c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	2200      	movs	r2, #0
 8015948:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	8b5b      	ldrh	r3, [r3, #26]
 801594e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8015952:	b29a      	uxth	r2, r3
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	68db      	ldr	r3, [r3, #12]
 801595c:	685b      	ldr	r3, [r3, #4]
 801595e:	4618      	mov	r0, r3
 8015960:	f7f9 fbb1 	bl	800f0c6 <lwip_htonl>
 8015964:	4604      	mov	r4, r0
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	891b      	ldrh	r3, [r3, #8]
 801596a:	461d      	mov	r5, r3
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	68db      	ldr	r3, [r3, #12]
 8015970:	899b      	ldrh	r3, [r3, #12]
 8015972:	b29b      	uxth	r3, r3
 8015974:	4618      	mov	r0, r3
 8015976:	f7f9 fb91 	bl	800f09c <lwip_htons>
 801597a:	4603      	mov	r3, r0
 801597c:	b2db      	uxtb	r3, r3
 801597e:	f003 0303 	and.w	r3, r3, #3
 8015982:	2b00      	cmp	r3, #0
 8015984:	d001      	beq.n	801598a <tcp_rexmit_rto_prepare+0xba>
 8015986:	2301      	movs	r3, #1
 8015988:	e000      	b.n	801598c <tcp_rexmit_rto_prepare+0xbc>
 801598a:	2300      	movs	r3, #0
 801598c:	442b      	add	r3, r5
 801598e:	18e2      	adds	r2, r4, r3
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	2200      	movs	r2, #0
 8015998:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801599a:	2300      	movs	r3, #0
}
 801599c:	4618      	mov	r0, r3
 801599e:	3710      	adds	r7, #16
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bdb0      	pop	{r4, r5, r7, pc}
 80159a4:	0801b824 	.word	0x0801b824
 80159a8:	0801be60 	.word	0x0801be60
 80159ac:	0801b878 	.word	0x0801b878

080159b0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b082      	sub	sp, #8
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d106      	bne.n	80159cc <tcp_rexmit_rto_commit+0x1c>
 80159be:	4b0d      	ldr	r3, [pc, #52]	@ (80159f4 <tcp_rexmit_rto_commit+0x44>)
 80159c0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80159c4:	490c      	ldr	r1, [pc, #48]	@ (80159f8 <tcp_rexmit_rto_commit+0x48>)
 80159c6:	480d      	ldr	r0, [pc, #52]	@ (80159fc <tcp_rexmit_rto_commit+0x4c>)
 80159c8:	f003 fc16 	bl	80191f8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80159d2:	2bff      	cmp	r3, #255	@ 0xff
 80159d4:	d007      	beq.n	80159e6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80159dc:	3301      	adds	r3, #1
 80159de:	b2da      	uxtb	r2, r3
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80159e6:	6878      	ldr	r0, [r7, #4]
 80159e8:	f7ff fc7e 	bl	80152e8 <tcp_output>
}
 80159ec:	bf00      	nop
 80159ee:	3708      	adds	r7, #8
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bd80      	pop	{r7, pc}
 80159f4:	0801b824 	.word	0x0801b824
 80159f8:	0801be84 	.word	0x0801be84
 80159fc:	0801b878 	.word	0x0801b878

08015a00 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b082      	sub	sp, #8
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d106      	bne.n	8015a1c <tcp_rexmit_rto+0x1c>
 8015a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8015a38 <tcp_rexmit_rto+0x38>)
 8015a10:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8015a14:	4909      	ldr	r1, [pc, #36]	@ (8015a3c <tcp_rexmit_rto+0x3c>)
 8015a16:	480a      	ldr	r0, [pc, #40]	@ (8015a40 <tcp_rexmit_rto+0x40>)
 8015a18:	f003 fbee 	bl	80191f8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015a1c:	6878      	ldr	r0, [r7, #4]
 8015a1e:	f7ff ff57 	bl	80158d0 <tcp_rexmit_rto_prepare>
 8015a22:	4603      	mov	r3, r0
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d102      	bne.n	8015a2e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015a28:	6878      	ldr	r0, [r7, #4]
 8015a2a:	f7ff ffc1 	bl	80159b0 <tcp_rexmit_rto_commit>
  }
}
 8015a2e:	bf00      	nop
 8015a30:	3708      	adds	r7, #8
 8015a32:	46bd      	mov	sp, r7
 8015a34:	bd80      	pop	{r7, pc}
 8015a36:	bf00      	nop
 8015a38:	0801b824 	.word	0x0801b824
 8015a3c:	0801bea8 	.word	0x0801bea8
 8015a40:	0801b878 	.word	0x0801b878

08015a44 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015a44:	b590      	push	{r4, r7, lr}
 8015a46:	b085      	sub	sp, #20
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d106      	bne.n	8015a60 <tcp_rexmit+0x1c>
 8015a52:	4b2f      	ldr	r3, [pc, #188]	@ (8015b10 <tcp_rexmit+0xcc>)
 8015a54:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8015a58:	492e      	ldr	r1, [pc, #184]	@ (8015b14 <tcp_rexmit+0xd0>)
 8015a5a:	482f      	ldr	r0, [pc, #188]	@ (8015b18 <tcp_rexmit+0xd4>)
 8015a5c:	f003 fbcc 	bl	80191f8 <iprintf>

  if (pcb->unacked == NULL) {
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d102      	bne.n	8015a6e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015a68:	f06f 0305 	mvn.w	r3, #5
 8015a6c:	e04c      	b.n	8015b08 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a72:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015a74:	68b8      	ldr	r0, [r7, #8]
 8015a76:	f7ff fe2b 	bl	80156d0 <tcp_output_segment_busy>
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d002      	beq.n	8015a86 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015a80:	f06f 0305 	mvn.w	r3, #5
 8015a84:	e040      	b.n	8015b08 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015a86:	68bb      	ldr	r3, [r7, #8]
 8015a88:	681a      	ldr	r2, [r3, #0]
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	336c      	adds	r3, #108	@ 0x6c
 8015a92:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015a94:	e002      	b.n	8015a9c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d011      	beq.n	8015ac8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	68db      	ldr	r3, [r3, #12]
 8015aaa:	685b      	ldr	r3, [r3, #4]
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7f9 fb0a 	bl	800f0c6 <lwip_htonl>
 8015ab2:	4604      	mov	r4, r0
 8015ab4:	68bb      	ldr	r3, [r7, #8]
 8015ab6:	68db      	ldr	r3, [r3, #12]
 8015ab8:	685b      	ldr	r3, [r3, #4]
 8015aba:	4618      	mov	r0, r3
 8015abc:	f7f9 fb03 	bl	800f0c6 <lwip_htonl>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	dbe6      	blt.n	8015a96 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	681a      	ldr	r2, [r3, #0]
 8015acc:	68bb      	ldr	r3, [r7, #8]
 8015ace:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	68ba      	ldr	r2, [r7, #8]
 8015ad4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015ad6:	68bb      	ldr	r3, [r7, #8]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d103      	bne.n	8015ae6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015aec:	2bff      	cmp	r3, #255	@ 0xff
 8015aee:	d007      	beq.n	8015b00 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015af6:	3301      	adds	r3, #1
 8015af8:	b2da      	uxtb	r2, r3
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	2200      	movs	r2, #0
 8015b04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015b06:	2300      	movs	r3, #0
}
 8015b08:	4618      	mov	r0, r3
 8015b0a:	3714      	adds	r7, #20
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd90      	pop	{r4, r7, pc}
 8015b10:	0801b824 	.word	0x0801b824
 8015b14:	0801bec4 	.word	0x0801bec4
 8015b18:	0801b878 	.word	0x0801b878

08015b1c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d106      	bne.n	8015b38 <tcp_rexmit_fast+0x1c>
 8015b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8015bd4 <tcp_rexmit_fast+0xb8>)
 8015b2c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8015b30:	4929      	ldr	r1, [pc, #164]	@ (8015bd8 <tcp_rexmit_fast+0xbc>)
 8015b32:	482a      	ldr	r0, [pc, #168]	@ (8015bdc <tcp_rexmit_fast+0xc0>)
 8015b34:	f003 fb60 	bl	80191f8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d044      	beq.n	8015bca <tcp_rexmit_fast+0xae>
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	8b5b      	ldrh	r3, [r3, #26]
 8015b44:	f003 0304 	and.w	r3, r3, #4
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d13e      	bne.n	8015bca <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	f7ff ff79 	bl	8015a44 <tcp_rexmit>
 8015b52:	4603      	mov	r3, r0
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d138      	bne.n	8015bca <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015b64:	4293      	cmp	r3, r2
 8015b66:	bf28      	it	cs
 8015b68:	4613      	movcs	r3, r2
 8015b6a:	b29b      	uxth	r3, r3
 8015b6c:	0fda      	lsrs	r2, r3, #31
 8015b6e:	4413      	add	r3, r2
 8015b70:	105b      	asrs	r3, r3, #1
 8015b72:	b29a      	uxth	r2, r3
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015b80:	461a      	mov	r2, r3
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015b86:	005b      	lsls	r3, r3, #1
 8015b88:	429a      	cmp	r2, r3
 8015b8a:	d206      	bcs.n	8015b9a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015b90:	005b      	lsls	r3, r3, #1
 8015b92:	b29a      	uxth	r2, r3
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ba4:	4619      	mov	r1, r3
 8015ba6:	0049      	lsls	r1, r1, #1
 8015ba8:	440b      	add	r3, r1
 8015baa:	b29b      	uxth	r3, r3
 8015bac:	4413      	add	r3, r2
 8015bae:	b29a      	uxth	r2, r3
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	8b5b      	ldrh	r3, [r3, #26]
 8015bba:	f043 0304 	orr.w	r3, r3, #4
 8015bbe:	b29a      	uxth	r2, r3
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8015bca:	bf00      	nop
 8015bcc:	3708      	adds	r7, #8
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}
 8015bd2:	bf00      	nop
 8015bd4:	0801b824 	.word	0x0801b824
 8015bd8:	0801bedc 	.word	0x0801bedc
 8015bdc:	0801b878 	.word	0x0801b878

08015be0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b086      	sub	sp, #24
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	60f8      	str	r0, [r7, #12]
 8015be8:	607b      	str	r3, [r7, #4]
 8015bea:	460b      	mov	r3, r1
 8015bec:	817b      	strh	r3, [r7, #10]
 8015bee:	4613      	mov	r3, r2
 8015bf0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015bf2:	897a      	ldrh	r2, [r7, #10]
 8015bf4:	893b      	ldrh	r3, [r7, #8]
 8015bf6:	4413      	add	r3, r2
 8015bf8:	b29b      	uxth	r3, r3
 8015bfa:	3314      	adds	r3, #20
 8015bfc:	b29b      	uxth	r3, r3
 8015bfe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015c02:	4619      	mov	r1, r3
 8015c04:	2022      	movs	r0, #34	@ 0x22
 8015c06:	f7fa fc0f 	bl	8010428 <pbuf_alloc>
 8015c0a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015c0c:	697b      	ldr	r3, [r7, #20]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d04d      	beq.n	8015cae <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015c12:	897b      	ldrh	r3, [r7, #10]
 8015c14:	3313      	adds	r3, #19
 8015c16:	697a      	ldr	r2, [r7, #20]
 8015c18:	8952      	ldrh	r2, [r2, #10]
 8015c1a:	4293      	cmp	r3, r2
 8015c1c:	db06      	blt.n	8015c2c <tcp_output_alloc_header_common+0x4c>
 8015c1e:	4b26      	ldr	r3, [pc, #152]	@ (8015cb8 <tcp_output_alloc_header_common+0xd8>)
 8015c20:	f240 7223 	movw	r2, #1827	@ 0x723
 8015c24:	4925      	ldr	r1, [pc, #148]	@ (8015cbc <tcp_output_alloc_header_common+0xdc>)
 8015c26:	4826      	ldr	r0, [pc, #152]	@ (8015cc0 <tcp_output_alloc_header_common+0xe0>)
 8015c28:	f003 fae6 	bl	80191f8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015c2c:	697b      	ldr	r3, [r7, #20]
 8015c2e:	685b      	ldr	r3, [r3, #4]
 8015c30:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015c32:	8c3b      	ldrh	r3, [r7, #32]
 8015c34:	4618      	mov	r0, r3
 8015c36:	f7f9 fa31 	bl	800f09c <lwip_htons>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	461a      	mov	r2, r3
 8015c3e:	693b      	ldr	r3, [r7, #16]
 8015c40:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015c42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015c44:	4618      	mov	r0, r3
 8015c46:	f7f9 fa29 	bl	800f09c <lwip_htons>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	461a      	mov	r2, r3
 8015c4e:	693b      	ldr	r3, [r7, #16]
 8015c50:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015c52:	693b      	ldr	r3, [r7, #16]
 8015c54:	687a      	ldr	r2, [r7, #4]
 8015c56:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015c58:	68f8      	ldr	r0, [r7, #12]
 8015c5a:	f7f9 fa34 	bl	800f0c6 <lwip_htonl>
 8015c5e:	4602      	mov	r2, r0
 8015c60:	693b      	ldr	r3, [r7, #16]
 8015c62:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015c64:	897b      	ldrh	r3, [r7, #10]
 8015c66:	089b      	lsrs	r3, r3, #2
 8015c68:	b29b      	uxth	r3, r3
 8015c6a:	3305      	adds	r3, #5
 8015c6c:	b29b      	uxth	r3, r3
 8015c6e:	031b      	lsls	r3, r3, #12
 8015c70:	b29a      	uxth	r2, r3
 8015c72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015c76:	b29b      	uxth	r3, r3
 8015c78:	4313      	orrs	r3, r2
 8015c7a:	b29b      	uxth	r3, r3
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f7f9 fa0d 	bl	800f09c <lwip_htons>
 8015c82:	4603      	mov	r3, r0
 8015c84:	461a      	mov	r2, r3
 8015c86:	693b      	ldr	r3, [r7, #16]
 8015c88:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015c8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f7f9 fa05 	bl	800f09c <lwip_htons>
 8015c92:	4603      	mov	r3, r0
 8015c94:	461a      	mov	r2, r3
 8015c96:	693b      	ldr	r3, [r7, #16]
 8015c98:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015c9a:	693b      	ldr	r3, [r7, #16]
 8015c9c:	2200      	movs	r2, #0
 8015c9e:	741a      	strb	r2, [r3, #16]
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015ca4:	693b      	ldr	r3, [r7, #16]
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	749a      	strb	r2, [r3, #18]
 8015caa:	2200      	movs	r2, #0
 8015cac:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015cae:	697b      	ldr	r3, [r7, #20]
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3718      	adds	r7, #24
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	0801b824 	.word	0x0801b824
 8015cbc:	0801befc 	.word	0x0801befc
 8015cc0:	0801b878 	.word	0x0801b878

08015cc4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015cc4:	b5b0      	push	{r4, r5, r7, lr}
 8015cc6:	b08a      	sub	sp, #40	@ 0x28
 8015cc8:	af04      	add	r7, sp, #16
 8015cca:	60f8      	str	r0, [r7, #12]
 8015ccc:	607b      	str	r3, [r7, #4]
 8015cce:	460b      	mov	r3, r1
 8015cd0:	817b      	strh	r3, [r7, #10]
 8015cd2:	4613      	mov	r3, r2
 8015cd4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d106      	bne.n	8015cea <tcp_output_alloc_header+0x26>
 8015cdc:	4b15      	ldr	r3, [pc, #84]	@ (8015d34 <tcp_output_alloc_header+0x70>)
 8015cde:	f240 7242 	movw	r2, #1858	@ 0x742
 8015ce2:	4915      	ldr	r1, [pc, #84]	@ (8015d38 <tcp_output_alloc_header+0x74>)
 8015ce4:	4815      	ldr	r0, [pc, #84]	@ (8015d3c <tcp_output_alloc_header+0x78>)
 8015ce6:	f003 fa87 	bl	80191f8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	8adb      	ldrh	r3, [r3, #22]
 8015cf2:	68fa      	ldr	r2, [r7, #12]
 8015cf4:	8b12      	ldrh	r2, [r2, #24]
 8015cf6:	68f9      	ldr	r1, [r7, #12]
 8015cf8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8015cfa:	893d      	ldrh	r5, [r7, #8]
 8015cfc:	897c      	ldrh	r4, [r7, #10]
 8015cfe:	9103      	str	r1, [sp, #12]
 8015d00:	2110      	movs	r1, #16
 8015d02:	9102      	str	r1, [sp, #8]
 8015d04:	9201      	str	r2, [sp, #4]
 8015d06:	9300      	str	r3, [sp, #0]
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	462a      	mov	r2, r5
 8015d0c:	4621      	mov	r1, r4
 8015d0e:	f7ff ff67 	bl	8015be0 <tcp_output_alloc_header_common>
 8015d12:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015d14:	697b      	ldr	r3, [r7, #20]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d006      	beq.n	8015d28 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d1e:	68fa      	ldr	r2, [r7, #12]
 8015d20:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015d22:	441a      	add	r2, r3
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8015d28:	697b      	ldr	r3, [r7, #20]
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	3718      	adds	r7, #24
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bdb0      	pop	{r4, r5, r7, pc}
 8015d32:	bf00      	nop
 8015d34:	0801b824 	.word	0x0801b824
 8015d38:	0801bf2c 	.word	0x0801bf2c
 8015d3c:	0801b878 	.word	0x0801b878

08015d40 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b088      	sub	sp, #32
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	60f8      	str	r0, [r7, #12]
 8015d48:	60b9      	str	r1, [r7, #8]
 8015d4a:	4611      	mov	r1, r2
 8015d4c:	461a      	mov	r2, r3
 8015d4e:	460b      	mov	r3, r1
 8015d50:	71fb      	strb	r3, [r7, #7]
 8015d52:	4613      	mov	r3, r2
 8015d54:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015d56:	2300      	movs	r3, #0
 8015d58:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015d5a:	68bb      	ldr	r3, [r7, #8]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d106      	bne.n	8015d6e <tcp_output_fill_options+0x2e>
 8015d60:	4b12      	ldr	r3, [pc, #72]	@ (8015dac <tcp_output_fill_options+0x6c>)
 8015d62:	f240 7256 	movw	r2, #1878	@ 0x756
 8015d66:	4912      	ldr	r1, [pc, #72]	@ (8015db0 <tcp_output_fill_options+0x70>)
 8015d68:	4812      	ldr	r0, [pc, #72]	@ (8015db4 <tcp_output_fill_options+0x74>)
 8015d6a:	f003 fa45 	bl	80191f8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015d6e:	68bb      	ldr	r3, [r7, #8]
 8015d70:	685b      	ldr	r3, [r3, #4]
 8015d72:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015d74:	69bb      	ldr	r3, [r7, #24]
 8015d76:	3314      	adds	r3, #20
 8015d78:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015d7a:	8bfb      	ldrh	r3, [r7, #30]
 8015d7c:	009b      	lsls	r3, r3, #2
 8015d7e:	461a      	mov	r2, r3
 8015d80:	79fb      	ldrb	r3, [r7, #7]
 8015d82:	009b      	lsls	r3, r3, #2
 8015d84:	f003 0304 	and.w	r3, r3, #4
 8015d88:	4413      	add	r3, r2
 8015d8a:	3314      	adds	r3, #20
 8015d8c:	69ba      	ldr	r2, [r7, #24]
 8015d8e:	4413      	add	r3, r2
 8015d90:	697a      	ldr	r2, [r7, #20]
 8015d92:	429a      	cmp	r2, r3
 8015d94:	d006      	beq.n	8015da4 <tcp_output_fill_options+0x64>
 8015d96:	4b05      	ldr	r3, [pc, #20]	@ (8015dac <tcp_output_fill_options+0x6c>)
 8015d98:	f240 7275 	movw	r2, #1909	@ 0x775
 8015d9c:	4906      	ldr	r1, [pc, #24]	@ (8015db8 <tcp_output_fill_options+0x78>)
 8015d9e:	4805      	ldr	r0, [pc, #20]	@ (8015db4 <tcp_output_fill_options+0x74>)
 8015da0:	f003 fa2a 	bl	80191f8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015da4:	bf00      	nop
 8015da6:	3720      	adds	r7, #32
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}
 8015dac:	0801b824 	.word	0x0801b824
 8015db0:	0801bf54 	.word	0x0801bf54
 8015db4:	0801b878 	.word	0x0801b878
 8015db8:	0801be4c 	.word	0x0801be4c

08015dbc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b08a      	sub	sp, #40	@ 0x28
 8015dc0:	af04      	add	r7, sp, #16
 8015dc2:	60f8      	str	r0, [r7, #12]
 8015dc4:	60b9      	str	r1, [r7, #8]
 8015dc6:	607a      	str	r2, [r7, #4]
 8015dc8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015dca:	68bb      	ldr	r3, [r7, #8]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d106      	bne.n	8015dde <tcp_output_control_segment+0x22>
 8015dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8015e44 <tcp_output_control_segment+0x88>)
 8015dd2:	f240 7287 	movw	r2, #1927	@ 0x787
 8015dd6:	491c      	ldr	r1, [pc, #112]	@ (8015e48 <tcp_output_control_segment+0x8c>)
 8015dd8:	481c      	ldr	r0, [pc, #112]	@ (8015e4c <tcp_output_control_segment+0x90>)
 8015dda:	f003 fa0d 	bl	80191f8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015dde:	683a      	ldr	r2, [r7, #0]
 8015de0:	6879      	ldr	r1, [r7, #4]
 8015de2:	68f8      	ldr	r0, [r7, #12]
 8015de4:	f7fe ff42 	bl	8014c6c <tcp_route>
 8015de8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015dea:	693b      	ldr	r3, [r7, #16]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d102      	bne.n	8015df6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015df0:	23fc      	movs	r3, #252	@ 0xfc
 8015df2:	75fb      	strb	r3, [r7, #23]
 8015df4:	e01c      	b.n	8015e30 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d006      	beq.n	8015e0a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	7adb      	ldrb	r3, [r3, #11]
 8015e00:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	7a9b      	ldrb	r3, [r3, #10]
 8015e06:	757b      	strb	r3, [r7, #21]
 8015e08:	e003      	b.n	8015e12 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015e0a:	23ff      	movs	r3, #255	@ 0xff
 8015e0c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015e0e:	2300      	movs	r3, #0
 8015e10:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015e12:	7dba      	ldrb	r2, [r7, #22]
 8015e14:	693b      	ldr	r3, [r7, #16]
 8015e16:	9302      	str	r3, [sp, #8]
 8015e18:	2306      	movs	r3, #6
 8015e1a:	9301      	str	r3, [sp, #4]
 8015e1c:	7d7b      	ldrb	r3, [r7, #21]
 8015e1e:	9300      	str	r3, [sp, #0]
 8015e20:	4613      	mov	r3, r2
 8015e22:	683a      	ldr	r2, [r7, #0]
 8015e24:	6879      	ldr	r1, [r7, #4]
 8015e26:	68b8      	ldr	r0, [r7, #8]
 8015e28:	f001 ffc6 	bl	8017db8 <ip4_output_if>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015e30:	68b8      	ldr	r0, [r7, #8]
 8015e32:	f7fa fddd 	bl	80109f0 <pbuf_free>
  return err;
 8015e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	3718      	adds	r7, #24
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}
 8015e42:	bf00      	nop
 8015e44:	0801b824 	.word	0x0801b824
 8015e48:	0801bf7c 	.word	0x0801bf7c
 8015e4c:	0801b878 	.word	0x0801b878

08015e50 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015e50:	b590      	push	{r4, r7, lr}
 8015e52:	b08b      	sub	sp, #44	@ 0x2c
 8015e54:	af04      	add	r7, sp, #16
 8015e56:	60f8      	str	r0, [r7, #12]
 8015e58:	60b9      	str	r1, [r7, #8]
 8015e5a:	607a      	str	r2, [r7, #4]
 8015e5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d106      	bne.n	8015e72 <tcp_rst+0x22>
 8015e64:	4b1f      	ldr	r3, [pc, #124]	@ (8015ee4 <tcp_rst+0x94>)
 8015e66:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8015e6a:	491f      	ldr	r1, [pc, #124]	@ (8015ee8 <tcp_rst+0x98>)
 8015e6c:	481f      	ldr	r0, [pc, #124]	@ (8015eec <tcp_rst+0x9c>)
 8015e6e:	f003 f9c3 	bl	80191f8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d106      	bne.n	8015e86 <tcp_rst+0x36>
 8015e78:	4b1a      	ldr	r3, [pc, #104]	@ (8015ee4 <tcp_rst+0x94>)
 8015e7a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8015e7e:	491c      	ldr	r1, [pc, #112]	@ (8015ef0 <tcp_rst+0xa0>)
 8015e80:	481a      	ldr	r0, [pc, #104]	@ (8015eec <tcp_rst+0x9c>)
 8015e82:	f003 f9b9 	bl	80191f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015e86:	2300      	movs	r3, #0
 8015e88:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015e8a:	f246 0308 	movw	r3, #24584	@ 0x6008
 8015e8e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015e90:	7dfb      	ldrb	r3, [r7, #23]
 8015e92:	b29c      	uxth	r4, r3
 8015e94:	68b8      	ldr	r0, [r7, #8]
 8015e96:	f7f9 f916 	bl	800f0c6 <lwip_htonl>
 8015e9a:	4602      	mov	r2, r0
 8015e9c:	8abb      	ldrh	r3, [r7, #20]
 8015e9e:	9303      	str	r3, [sp, #12]
 8015ea0:	2314      	movs	r3, #20
 8015ea2:	9302      	str	r3, [sp, #8]
 8015ea4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015ea6:	9301      	str	r3, [sp, #4]
 8015ea8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015eaa:	9300      	str	r3, [sp, #0]
 8015eac:	4613      	mov	r3, r2
 8015eae:	2200      	movs	r2, #0
 8015eb0:	4621      	mov	r1, r4
 8015eb2:	6878      	ldr	r0, [r7, #4]
 8015eb4:	f7ff fe94 	bl	8015be0 <tcp_output_alloc_header_common>
 8015eb8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015eba:	693b      	ldr	r3, [r7, #16]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d00c      	beq.n	8015eda <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015ec0:	7dfb      	ldrb	r3, [r7, #23]
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	6939      	ldr	r1, [r7, #16]
 8015ec6:	68f8      	ldr	r0, [r7, #12]
 8015ec8:	f7ff ff3a 	bl	8015d40 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ece:	683a      	ldr	r2, [r7, #0]
 8015ed0:	6939      	ldr	r1, [r7, #16]
 8015ed2:	68f8      	ldr	r0, [r7, #12]
 8015ed4:	f7ff ff72 	bl	8015dbc <tcp_output_control_segment>
 8015ed8:	e000      	b.n	8015edc <tcp_rst+0x8c>
    return;
 8015eda:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015edc:	371c      	adds	r7, #28
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd90      	pop	{r4, r7, pc}
 8015ee2:	bf00      	nop
 8015ee4:	0801b824 	.word	0x0801b824
 8015ee8:	0801bfa8 	.word	0x0801bfa8
 8015eec:	0801b878 	.word	0x0801b878
 8015ef0:	0801bfc4 	.word	0x0801bfc4

08015ef4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015ef4:	b590      	push	{r4, r7, lr}
 8015ef6:	b087      	sub	sp, #28
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015efc:	2300      	movs	r3, #0
 8015efe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015f00:	2300      	movs	r3, #0
 8015f02:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d106      	bne.n	8015f18 <tcp_send_empty_ack+0x24>
 8015f0a:	4b28      	ldr	r3, [pc, #160]	@ (8015fac <tcp_send_empty_ack+0xb8>)
 8015f0c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8015f10:	4927      	ldr	r1, [pc, #156]	@ (8015fb0 <tcp_send_empty_ack+0xbc>)
 8015f12:	4828      	ldr	r0, [pc, #160]	@ (8015fb4 <tcp_send_empty_ack+0xc0>)
 8015f14:	f003 f970 	bl	80191f8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015f18:	7dfb      	ldrb	r3, [r7, #23]
 8015f1a:	009b      	lsls	r3, r3, #2
 8015f1c:	b2db      	uxtb	r3, r3
 8015f1e:	f003 0304 	and.w	r3, r3, #4
 8015f22:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015f24:	7d7b      	ldrb	r3, [r7, #21]
 8015f26:	b29c      	uxth	r4, r3
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	f7f9 f8ca 	bl	800f0c6 <lwip_htonl>
 8015f32:	4603      	mov	r3, r0
 8015f34:	2200      	movs	r2, #0
 8015f36:	4621      	mov	r1, r4
 8015f38:	6878      	ldr	r0, [r7, #4]
 8015f3a:	f7ff fec3 	bl	8015cc4 <tcp_output_alloc_header>
 8015f3e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015f40:	693b      	ldr	r3, [r7, #16]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d109      	bne.n	8015f5a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	8b5b      	ldrh	r3, [r3, #26]
 8015f4a:	f043 0303 	orr.w	r3, r3, #3
 8015f4e:	b29a      	uxth	r2, r3
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015f54:	f06f 0301 	mvn.w	r3, #1
 8015f58:	e023      	b.n	8015fa2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015f5a:	7dbb      	ldrb	r3, [r7, #22]
 8015f5c:	7dfa      	ldrb	r2, [r7, #23]
 8015f5e:	6939      	ldr	r1, [r7, #16]
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f7ff feed 	bl	8015d40 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015f66:	687a      	ldr	r2, [r7, #4]
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	3304      	adds	r3, #4
 8015f6c:	6939      	ldr	r1, [r7, #16]
 8015f6e:	6878      	ldr	r0, [r7, #4]
 8015f70:	f7ff ff24 	bl	8015dbc <tcp_output_control_segment>
 8015f74:	4603      	mov	r3, r0
 8015f76:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d007      	beq.n	8015f90 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	8b5b      	ldrh	r3, [r3, #26]
 8015f84:	f043 0303 	orr.w	r3, r3, #3
 8015f88:	b29a      	uxth	r2, r3
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	835a      	strh	r2, [r3, #26]
 8015f8e:	e006      	b.n	8015f9e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	8b5b      	ldrh	r3, [r3, #26]
 8015f94:	f023 0303 	bic.w	r3, r3, #3
 8015f98:	b29a      	uxth	r2, r3
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	371c      	adds	r7, #28
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	bd90      	pop	{r4, r7, pc}
 8015faa:	bf00      	nop
 8015fac:	0801b824 	.word	0x0801b824
 8015fb0:	0801bfe0 	.word	0x0801bfe0
 8015fb4:	0801b878 	.word	0x0801b878

08015fb8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015fb8:	b590      	push	{r4, r7, lr}
 8015fba:	b087      	sub	sp, #28
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d106      	bne.n	8015fd8 <tcp_keepalive+0x20>
 8015fca:	4b18      	ldr	r3, [pc, #96]	@ (801602c <tcp_keepalive+0x74>)
 8015fcc:	f640 0224 	movw	r2, #2084	@ 0x824
 8015fd0:	4917      	ldr	r1, [pc, #92]	@ (8016030 <tcp_keepalive+0x78>)
 8015fd2:	4818      	ldr	r0, [pc, #96]	@ (8016034 <tcp_keepalive+0x7c>)
 8015fd4:	f003 f910 	bl	80191f8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015fd8:	7dfb      	ldrb	r3, [r7, #23]
 8015fda:	b29c      	uxth	r4, r3
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015fe0:	3b01      	subs	r3, #1
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f7f9 f86f 	bl	800f0c6 <lwip_htonl>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	2200      	movs	r2, #0
 8015fec:	4621      	mov	r1, r4
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f7ff fe68 	bl	8015cc4 <tcp_output_alloc_header>
 8015ff4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015ff6:	693b      	ldr	r3, [r7, #16]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d102      	bne.n	8016002 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8016000:	e010      	b.n	8016024 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016002:	7dfb      	ldrb	r3, [r7, #23]
 8016004:	2200      	movs	r2, #0
 8016006:	6939      	ldr	r1, [r7, #16]
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f7ff fe99 	bl	8015d40 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801600e:	687a      	ldr	r2, [r7, #4]
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	3304      	adds	r3, #4
 8016014:	6939      	ldr	r1, [r7, #16]
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	f7ff fed0 	bl	8015dbc <tcp_output_control_segment>
 801601c:	4603      	mov	r3, r0
 801601e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016020:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016024:	4618      	mov	r0, r3
 8016026:	371c      	adds	r7, #28
 8016028:	46bd      	mov	sp, r7
 801602a:	bd90      	pop	{r4, r7, pc}
 801602c:	0801b824 	.word	0x0801b824
 8016030:	0801c000 	.word	0x0801c000
 8016034:	0801b878 	.word	0x0801b878

08016038 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016038:	b590      	push	{r4, r7, lr}
 801603a:	b08b      	sub	sp, #44	@ 0x2c
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016040:	2300      	movs	r3, #0
 8016042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d106      	bne.n	801605a <tcp_zero_window_probe+0x22>
 801604c:	4b4c      	ldr	r3, [pc, #304]	@ (8016180 <tcp_zero_window_probe+0x148>)
 801604e:	f640 024f 	movw	r2, #2127	@ 0x84f
 8016052:	494c      	ldr	r1, [pc, #304]	@ (8016184 <tcp_zero_window_probe+0x14c>)
 8016054:	484c      	ldr	r0, [pc, #304]	@ (8016188 <tcp_zero_window_probe+0x150>)
 8016056:	f003 f8cf 	bl	80191f8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801605e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016060:	6a3b      	ldr	r3, [r7, #32]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d101      	bne.n	801606a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016066:	2300      	movs	r3, #0
 8016068:	e086      	b.n	8016178 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8016070:	2bff      	cmp	r3, #255	@ 0xff
 8016072:	d007      	beq.n	8016084 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801607a:	3301      	adds	r3, #1
 801607c:	b2da      	uxtb	r2, r3
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016084:	6a3b      	ldr	r3, [r7, #32]
 8016086:	68db      	ldr	r3, [r3, #12]
 8016088:	899b      	ldrh	r3, [r3, #12]
 801608a:	b29b      	uxth	r3, r3
 801608c:	4618      	mov	r0, r3
 801608e:	f7f9 f805 	bl	800f09c <lwip_htons>
 8016092:	4603      	mov	r3, r0
 8016094:	b2db      	uxtb	r3, r3
 8016096:	f003 0301 	and.w	r3, r3, #1
 801609a:	2b00      	cmp	r3, #0
 801609c:	d005      	beq.n	80160aa <tcp_zero_window_probe+0x72>
 801609e:	6a3b      	ldr	r3, [r7, #32]
 80160a0:	891b      	ldrh	r3, [r3, #8]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d101      	bne.n	80160aa <tcp_zero_window_probe+0x72>
 80160a6:	2301      	movs	r3, #1
 80160a8:	e000      	b.n	80160ac <tcp_zero_window_probe+0x74>
 80160aa:	2300      	movs	r3, #0
 80160ac:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80160ae:	7ffb      	ldrb	r3, [r7, #31]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	bf0c      	ite	eq
 80160b4:	2301      	moveq	r3, #1
 80160b6:	2300      	movne	r3, #0
 80160b8:	b2db      	uxtb	r3, r3
 80160ba:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80160bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80160c0:	b299      	uxth	r1, r3
 80160c2:	6a3b      	ldr	r3, [r7, #32]
 80160c4:	68db      	ldr	r3, [r3, #12]
 80160c6:	685b      	ldr	r3, [r3, #4]
 80160c8:	8bba      	ldrh	r2, [r7, #28]
 80160ca:	6878      	ldr	r0, [r7, #4]
 80160cc:	f7ff fdfa 	bl	8015cc4 <tcp_output_alloc_header>
 80160d0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80160d2:	69bb      	ldr	r3, [r7, #24]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d102      	bne.n	80160de <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80160d8:	f04f 33ff 	mov.w	r3, #4294967295
 80160dc:	e04c      	b.n	8016178 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80160de:	69bb      	ldr	r3, [r7, #24]
 80160e0:	685b      	ldr	r3, [r3, #4]
 80160e2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80160e4:	7ffb      	ldrb	r3, [r7, #31]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d011      	beq.n	801610e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80160ea:	697b      	ldr	r3, [r7, #20]
 80160ec:	899b      	ldrh	r3, [r3, #12]
 80160ee:	b29b      	uxth	r3, r3
 80160f0:	b21b      	sxth	r3, r3
 80160f2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80160f6:	b21c      	sxth	r4, r3
 80160f8:	2011      	movs	r0, #17
 80160fa:	f7f8 ffcf 	bl	800f09c <lwip_htons>
 80160fe:	4603      	mov	r3, r0
 8016100:	b21b      	sxth	r3, r3
 8016102:	4323      	orrs	r3, r4
 8016104:	b21b      	sxth	r3, r3
 8016106:	b29a      	uxth	r2, r3
 8016108:	697b      	ldr	r3, [r7, #20]
 801610a:	819a      	strh	r2, [r3, #12]
 801610c:	e010      	b.n	8016130 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801610e:	69bb      	ldr	r3, [r7, #24]
 8016110:	685b      	ldr	r3, [r3, #4]
 8016112:	3314      	adds	r3, #20
 8016114:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016116:	6a3b      	ldr	r3, [r7, #32]
 8016118:	6858      	ldr	r0, [r3, #4]
 801611a:	6a3b      	ldr	r3, [r7, #32]
 801611c:	685b      	ldr	r3, [r3, #4]
 801611e:	891a      	ldrh	r2, [r3, #8]
 8016120:	6a3b      	ldr	r3, [r7, #32]
 8016122:	891b      	ldrh	r3, [r3, #8]
 8016124:	1ad3      	subs	r3, r2, r3
 8016126:	b29b      	uxth	r3, r3
 8016128:	2201      	movs	r2, #1
 801612a:	6939      	ldr	r1, [r7, #16]
 801612c:	f7fa fe56 	bl	8010ddc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016130:	6a3b      	ldr	r3, [r7, #32]
 8016132:	68db      	ldr	r3, [r3, #12]
 8016134:	685b      	ldr	r3, [r3, #4]
 8016136:	4618      	mov	r0, r3
 8016138:	f7f8 ffc5 	bl	800f0c6 <lwip_htonl>
 801613c:	4603      	mov	r3, r0
 801613e:	3301      	adds	r3, #1
 8016140:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	1ad3      	subs	r3, r2, r3
 801614a:	2b00      	cmp	r3, #0
 801614c:	da02      	bge.n	8016154 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	68fa      	ldr	r2, [r7, #12]
 8016152:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016158:	2200      	movs	r2, #0
 801615a:	69b9      	ldr	r1, [r7, #24]
 801615c:	6878      	ldr	r0, [r7, #4]
 801615e:	f7ff fdef 	bl	8015d40 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016162:	687a      	ldr	r2, [r7, #4]
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	3304      	adds	r3, #4
 8016168:	69b9      	ldr	r1, [r7, #24]
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	f7ff fe26 	bl	8015dbc <tcp_output_control_segment>
 8016170:	4603      	mov	r3, r0
 8016172:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016174:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016178:	4618      	mov	r0, r3
 801617a:	372c      	adds	r7, #44	@ 0x2c
 801617c:	46bd      	mov	sp, r7
 801617e:	bd90      	pop	{r4, r7, pc}
 8016180:	0801b824 	.word	0x0801b824
 8016184:	0801c01c 	.word	0x0801c01c
 8016188:	0801b878 	.word	0x0801b878

0801618c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b082      	sub	sp, #8
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016194:	f7fa ff10 	bl	8010fb8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016198:	4b0a      	ldr	r3, [pc, #40]	@ (80161c4 <tcpip_tcp_timer+0x38>)
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d103      	bne.n	80161a8 <tcpip_tcp_timer+0x1c>
 80161a0:	4b09      	ldr	r3, [pc, #36]	@ (80161c8 <tcpip_tcp_timer+0x3c>)
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d005      	beq.n	80161b4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80161a8:	2200      	movs	r2, #0
 80161aa:	4908      	ldr	r1, [pc, #32]	@ (80161cc <tcpip_tcp_timer+0x40>)
 80161ac:	20fa      	movs	r0, #250	@ 0xfa
 80161ae:	f000 f8f3 	bl	8016398 <sys_timeout>
 80161b2:	e003      	b.n	80161bc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80161b4:	4b06      	ldr	r3, [pc, #24]	@ (80161d0 <tcpip_tcp_timer+0x44>)
 80161b6:	2200      	movs	r2, #0
 80161b8:	601a      	str	r2, [r3, #0]
  }
}
 80161ba:	bf00      	nop
 80161bc:	bf00      	nop
 80161be:	3708      	adds	r7, #8
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}
 80161c4:	20060b98 	.word	0x20060b98
 80161c8:	20060b9c 	.word	0x20060b9c
 80161cc:	0801618d 	.word	0x0801618d
 80161d0:	20060be4 	.word	0x20060be4

080161d4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80161d8:	4b0a      	ldr	r3, [pc, #40]	@ (8016204 <tcp_timer_needed+0x30>)
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d10f      	bne.n	8016200 <tcp_timer_needed+0x2c>
 80161e0:	4b09      	ldr	r3, [pc, #36]	@ (8016208 <tcp_timer_needed+0x34>)
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d103      	bne.n	80161f0 <tcp_timer_needed+0x1c>
 80161e8:	4b08      	ldr	r3, [pc, #32]	@ (801620c <tcp_timer_needed+0x38>)
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d007      	beq.n	8016200 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80161f0:	4b04      	ldr	r3, [pc, #16]	@ (8016204 <tcp_timer_needed+0x30>)
 80161f2:	2201      	movs	r2, #1
 80161f4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80161f6:	2200      	movs	r2, #0
 80161f8:	4905      	ldr	r1, [pc, #20]	@ (8016210 <tcp_timer_needed+0x3c>)
 80161fa:	20fa      	movs	r0, #250	@ 0xfa
 80161fc:	f000 f8cc 	bl	8016398 <sys_timeout>
  }
}
 8016200:	bf00      	nop
 8016202:	bd80      	pop	{r7, pc}
 8016204:	20060be4 	.word	0x20060be4
 8016208:	20060b98 	.word	0x20060b98
 801620c:	20060b9c 	.word	0x20060b9c
 8016210:	0801618d 	.word	0x0801618d

08016214 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b086      	sub	sp, #24
 8016218:	af00      	add	r7, sp, #0
 801621a:	60f8      	str	r0, [r7, #12]
 801621c:	60b9      	str	r1, [r7, #8]
 801621e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016220:	200a      	movs	r0, #10
 8016222:	f7f9 fccb 	bl	800fbbc <memp_malloc>
 8016226:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016228:	693b      	ldr	r3, [r7, #16]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d109      	bne.n	8016242 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801622e:	693b      	ldr	r3, [r7, #16]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d151      	bne.n	80162d8 <sys_timeout_abs+0xc4>
 8016234:	4b2a      	ldr	r3, [pc, #168]	@ (80162e0 <sys_timeout_abs+0xcc>)
 8016236:	22be      	movs	r2, #190	@ 0xbe
 8016238:	492a      	ldr	r1, [pc, #168]	@ (80162e4 <sys_timeout_abs+0xd0>)
 801623a:	482b      	ldr	r0, [pc, #172]	@ (80162e8 <sys_timeout_abs+0xd4>)
 801623c:	f002 ffdc 	bl	80191f8 <iprintf>
    return;
 8016240:	e04a      	b.n	80162d8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016242:	693b      	ldr	r3, [r7, #16]
 8016244:	2200      	movs	r2, #0
 8016246:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016248:	693b      	ldr	r3, [r7, #16]
 801624a:	68ba      	ldr	r2, [r7, #8]
 801624c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801624e:	693b      	ldr	r3, [r7, #16]
 8016250:	687a      	ldr	r2, [r7, #4]
 8016252:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016254:	693b      	ldr	r3, [r7, #16]
 8016256:	68fa      	ldr	r2, [r7, #12]
 8016258:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801625a:	4b24      	ldr	r3, [pc, #144]	@ (80162ec <sys_timeout_abs+0xd8>)
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d103      	bne.n	801626a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016262:	4a22      	ldr	r2, [pc, #136]	@ (80162ec <sys_timeout_abs+0xd8>)
 8016264:	693b      	ldr	r3, [r7, #16]
 8016266:	6013      	str	r3, [r2, #0]
    return;
 8016268:	e037      	b.n	80162da <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801626a:	693b      	ldr	r3, [r7, #16]
 801626c:	685a      	ldr	r2, [r3, #4]
 801626e:	4b1f      	ldr	r3, [pc, #124]	@ (80162ec <sys_timeout_abs+0xd8>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	685b      	ldr	r3, [r3, #4]
 8016274:	1ad3      	subs	r3, r2, r3
 8016276:	0fdb      	lsrs	r3, r3, #31
 8016278:	f003 0301 	and.w	r3, r3, #1
 801627c:	b2db      	uxtb	r3, r3
 801627e:	2b00      	cmp	r3, #0
 8016280:	d007      	beq.n	8016292 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016282:	4b1a      	ldr	r3, [pc, #104]	@ (80162ec <sys_timeout_abs+0xd8>)
 8016284:	681a      	ldr	r2, [r3, #0]
 8016286:	693b      	ldr	r3, [r7, #16]
 8016288:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801628a:	4a18      	ldr	r2, [pc, #96]	@ (80162ec <sys_timeout_abs+0xd8>)
 801628c:	693b      	ldr	r3, [r7, #16]
 801628e:	6013      	str	r3, [r2, #0]
 8016290:	e023      	b.n	80162da <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016292:	4b16      	ldr	r3, [pc, #88]	@ (80162ec <sys_timeout_abs+0xd8>)
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	617b      	str	r3, [r7, #20]
 8016298:	e01a      	b.n	80162d0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d00b      	beq.n	80162ba <sys_timeout_abs+0xa6>
 80162a2:	693b      	ldr	r3, [r7, #16]
 80162a4:	685a      	ldr	r2, [r3, #4]
 80162a6:	697b      	ldr	r3, [r7, #20]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	685b      	ldr	r3, [r3, #4]
 80162ac:	1ad3      	subs	r3, r2, r3
 80162ae:	0fdb      	lsrs	r3, r3, #31
 80162b0:	f003 0301 	and.w	r3, r3, #1
 80162b4:	b2db      	uxtb	r3, r3
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d007      	beq.n	80162ca <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80162ba:	697b      	ldr	r3, [r7, #20]
 80162bc:	681a      	ldr	r2, [r3, #0]
 80162be:	693b      	ldr	r3, [r7, #16]
 80162c0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80162c2:	697b      	ldr	r3, [r7, #20]
 80162c4:	693a      	ldr	r2, [r7, #16]
 80162c6:	601a      	str	r2, [r3, #0]
        break;
 80162c8:	e007      	b.n	80162da <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80162ca:	697b      	ldr	r3, [r7, #20]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	617b      	str	r3, [r7, #20]
 80162d0:	697b      	ldr	r3, [r7, #20]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d1e1      	bne.n	801629a <sys_timeout_abs+0x86>
 80162d6:	e000      	b.n	80162da <sys_timeout_abs+0xc6>
    return;
 80162d8:	bf00      	nop
      }
    }
  }
}
 80162da:	3718      	adds	r7, #24
 80162dc:	46bd      	mov	sp, r7
 80162de:	bd80      	pop	{r7, pc}
 80162e0:	0801c040 	.word	0x0801c040
 80162e4:	0801c074 	.word	0x0801c074
 80162e8:	0801c0b4 	.word	0x0801c0b4
 80162ec:	20060bdc 	.word	0x20060bdc

080162f0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b086      	sub	sp, #24
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80162fc:	697b      	ldr	r3, [r7, #20]
 80162fe:	685b      	ldr	r3, [r3, #4]
 8016300:	4798      	blx	r3

  now = sys_now();
 8016302:	f7f4 fdbb 	bl	800ae7c <sys_now>
 8016306:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016308:	697b      	ldr	r3, [r7, #20]
 801630a:	681a      	ldr	r2, [r3, #0]
 801630c:	4b0f      	ldr	r3, [pc, #60]	@ (801634c <lwip_cyclic_timer+0x5c>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	4413      	add	r3, r2
 8016312:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016314:	68fa      	ldr	r2, [r7, #12]
 8016316:	693b      	ldr	r3, [r7, #16]
 8016318:	1ad3      	subs	r3, r2, r3
 801631a:	0fdb      	lsrs	r3, r3, #31
 801631c:	f003 0301 	and.w	r3, r3, #1
 8016320:	b2db      	uxtb	r3, r3
 8016322:	2b00      	cmp	r3, #0
 8016324:	d009      	beq.n	801633a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016326:	697b      	ldr	r3, [r7, #20]
 8016328:	681a      	ldr	r2, [r3, #0]
 801632a:	693b      	ldr	r3, [r7, #16]
 801632c:	4413      	add	r3, r2
 801632e:	687a      	ldr	r2, [r7, #4]
 8016330:	4907      	ldr	r1, [pc, #28]	@ (8016350 <lwip_cyclic_timer+0x60>)
 8016332:	4618      	mov	r0, r3
 8016334:	f7ff ff6e 	bl	8016214 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016338:	e004      	b.n	8016344 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801633a:	687a      	ldr	r2, [r7, #4]
 801633c:	4904      	ldr	r1, [pc, #16]	@ (8016350 <lwip_cyclic_timer+0x60>)
 801633e:	68f8      	ldr	r0, [r7, #12]
 8016340:	f7ff ff68 	bl	8016214 <sys_timeout_abs>
}
 8016344:	bf00      	nop
 8016346:	3718      	adds	r7, #24
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}
 801634c:	20060be0 	.word	0x20060be0
 8016350:	080162f1 	.word	0x080162f1

08016354 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b082      	sub	sp, #8
 8016358:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801635a:	2301      	movs	r3, #1
 801635c:	607b      	str	r3, [r7, #4]
 801635e:	e00e      	b.n	801637e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016360:	4a0b      	ldr	r2, [pc, #44]	@ (8016390 <sys_timeouts_init+0x3c>)
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	00db      	lsls	r3, r3, #3
 801636c:	4a08      	ldr	r2, [pc, #32]	@ (8016390 <sys_timeouts_init+0x3c>)
 801636e:	4413      	add	r3, r2
 8016370:	461a      	mov	r2, r3
 8016372:	4908      	ldr	r1, [pc, #32]	@ (8016394 <sys_timeouts_init+0x40>)
 8016374:	f000 f810 	bl	8016398 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	3301      	adds	r3, #1
 801637c:	607b      	str	r3, [r7, #4]
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	2b02      	cmp	r3, #2
 8016382:	d9ed      	bls.n	8016360 <sys_timeouts_init+0xc>
  }
}
 8016384:	bf00      	nop
 8016386:	bf00      	nop
 8016388:	3708      	adds	r7, #8
 801638a:	46bd      	mov	sp, r7
 801638c:	bd80      	pop	{r7, pc}
 801638e:	bf00      	nop
 8016390:	0801ccb8 	.word	0x0801ccb8
 8016394:	080162f1 	.word	0x080162f1

08016398 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016398:	b580      	push	{r7, lr}
 801639a:	b086      	sub	sp, #24
 801639c:	af00      	add	r7, sp, #0
 801639e:	60f8      	str	r0, [r7, #12]
 80163a0:	60b9      	str	r1, [r7, #8]
 80163a2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80163aa:	d306      	bcc.n	80163ba <sys_timeout+0x22>
 80163ac:	4b0a      	ldr	r3, [pc, #40]	@ (80163d8 <sys_timeout+0x40>)
 80163ae:	f240 1229 	movw	r2, #297	@ 0x129
 80163b2:	490a      	ldr	r1, [pc, #40]	@ (80163dc <sys_timeout+0x44>)
 80163b4:	480a      	ldr	r0, [pc, #40]	@ (80163e0 <sys_timeout+0x48>)
 80163b6:	f002 ff1f 	bl	80191f8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80163ba:	f7f4 fd5f 	bl	800ae7c <sys_now>
 80163be:	4602      	mov	r2, r0
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	4413      	add	r3, r2
 80163c4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80163c6:	687a      	ldr	r2, [r7, #4]
 80163c8:	68b9      	ldr	r1, [r7, #8]
 80163ca:	6978      	ldr	r0, [r7, #20]
 80163cc:	f7ff ff22 	bl	8016214 <sys_timeout_abs>
#endif
}
 80163d0:	bf00      	nop
 80163d2:	3718      	adds	r7, #24
 80163d4:	46bd      	mov	sp, r7
 80163d6:	bd80      	pop	{r7, pc}
 80163d8:	0801c040 	.word	0x0801c040
 80163dc:	0801c0dc 	.word	0x0801c0dc
 80163e0:	0801c0b4 	.word	0x0801c0b4

080163e4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b084      	sub	sp, #16
 80163e8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80163ea:	f7f4 fd47 	bl	800ae7c <sys_now>
 80163ee:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80163f0:	4b17      	ldr	r3, [pc, #92]	@ (8016450 <sys_check_timeouts+0x6c>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80163f6:	68bb      	ldr	r3, [r7, #8]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d022      	beq.n	8016442 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80163fc:	68bb      	ldr	r3, [r7, #8]
 80163fe:	685b      	ldr	r3, [r3, #4]
 8016400:	68fa      	ldr	r2, [r7, #12]
 8016402:	1ad3      	subs	r3, r2, r3
 8016404:	0fdb      	lsrs	r3, r3, #31
 8016406:	f003 0301 	and.w	r3, r3, #1
 801640a:	b2db      	uxtb	r3, r3
 801640c:	2b00      	cmp	r3, #0
 801640e:	d11a      	bne.n	8016446 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	4a0e      	ldr	r2, [pc, #56]	@ (8016450 <sys_check_timeouts+0x6c>)
 8016416:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016418:	68bb      	ldr	r3, [r7, #8]
 801641a:	689b      	ldr	r3, [r3, #8]
 801641c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801641e:	68bb      	ldr	r3, [r7, #8]
 8016420:	68db      	ldr	r3, [r3, #12]
 8016422:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016424:	68bb      	ldr	r3, [r7, #8]
 8016426:	685b      	ldr	r3, [r3, #4]
 8016428:	4a0a      	ldr	r2, [pc, #40]	@ (8016454 <sys_check_timeouts+0x70>)
 801642a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801642c:	68b9      	ldr	r1, [r7, #8]
 801642e:	200a      	movs	r0, #10
 8016430:	f7f9 fc3a 	bl	800fca8 <memp_free>
    if (handler != NULL) {
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d0da      	beq.n	80163f0 <sys_check_timeouts+0xc>
      handler(arg);
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	6838      	ldr	r0, [r7, #0]
 801643e:	4798      	blx	r3
  do {
 8016440:	e7d6      	b.n	80163f0 <sys_check_timeouts+0xc>
      return;
 8016442:	bf00      	nop
 8016444:	e000      	b.n	8016448 <sys_check_timeouts+0x64>
      return;
 8016446:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016448:	3710      	adds	r7, #16
 801644a:	46bd      	mov	sp, r7
 801644c:	bd80      	pop	{r7, pc}
 801644e:	bf00      	nop
 8016450:	20060bdc 	.word	0x20060bdc
 8016454:	20060be0 	.word	0x20060be0

08016458 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b082      	sub	sp, #8
 801645c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801645e:	4b16      	ldr	r3, [pc, #88]	@ (80164b8 <sys_timeouts_sleeptime+0x60>)
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d102      	bne.n	801646c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016466:	f04f 33ff 	mov.w	r3, #4294967295
 801646a:	e020      	b.n	80164ae <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801646c:	f7f4 fd06 	bl	800ae7c <sys_now>
 8016470:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016472:	4b11      	ldr	r3, [pc, #68]	@ (80164b8 <sys_timeouts_sleeptime+0x60>)
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	685a      	ldr	r2, [r3, #4]
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	1ad3      	subs	r3, r2, r3
 801647c:	0fdb      	lsrs	r3, r3, #31
 801647e:	f003 0301 	and.w	r3, r3, #1
 8016482:	b2db      	uxtb	r3, r3
 8016484:	2b00      	cmp	r3, #0
 8016486:	d001      	beq.n	801648c <sys_timeouts_sleeptime+0x34>
    return 0;
 8016488:	2300      	movs	r3, #0
 801648a:	e010      	b.n	80164ae <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801648c:	4b0a      	ldr	r3, [pc, #40]	@ (80164b8 <sys_timeouts_sleeptime+0x60>)
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	685a      	ldr	r2, [r3, #4]
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	1ad3      	subs	r3, r2, r3
 8016496:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016498:	683b      	ldr	r3, [r7, #0]
 801649a:	2b00      	cmp	r3, #0
 801649c:	da06      	bge.n	80164ac <sys_timeouts_sleeptime+0x54>
 801649e:	4b07      	ldr	r3, [pc, #28]	@ (80164bc <sys_timeouts_sleeptime+0x64>)
 80164a0:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80164a4:	4906      	ldr	r1, [pc, #24]	@ (80164c0 <sys_timeouts_sleeptime+0x68>)
 80164a6:	4807      	ldr	r0, [pc, #28]	@ (80164c4 <sys_timeouts_sleeptime+0x6c>)
 80164a8:	f002 fea6 	bl	80191f8 <iprintf>
    return ret;
 80164ac:	683b      	ldr	r3, [r7, #0]
  }
}
 80164ae:	4618      	mov	r0, r3
 80164b0:	3708      	adds	r7, #8
 80164b2:	46bd      	mov	sp, r7
 80164b4:	bd80      	pop	{r7, pc}
 80164b6:	bf00      	nop
 80164b8:	20060bdc 	.word	0x20060bdc
 80164bc:	0801c040 	.word	0x0801c040
 80164c0:	0801c114 	.word	0x0801c114
 80164c4:	0801c0b4 	.word	0x0801c0b4

080164c8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80164cc:	f002 fd94 	bl	8018ff8 <rand>
 80164d0:	4603      	mov	r3, r0
 80164d2:	b29b      	uxth	r3, r3
 80164d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80164d8:	b29b      	uxth	r3, r3
 80164da:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80164de:	b29a      	uxth	r2, r3
 80164e0:	4b01      	ldr	r3, [pc, #4]	@ (80164e8 <udp_init+0x20>)
 80164e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80164e4:	bf00      	nop
 80164e6:	bd80      	pop	{r7, pc}
 80164e8:	20050030 	.word	0x20050030

080164ec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b084      	sub	sp, #16
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	60f8      	str	r0, [r7, #12]
 80164f4:	60b9      	str	r1, [r7, #8]
 80164f6:	4613      	mov	r3, r2
 80164f8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d105      	bne.n	801650c <udp_input_local_match+0x20>
 8016500:	4b27      	ldr	r3, [pc, #156]	@ (80165a0 <udp_input_local_match+0xb4>)
 8016502:	2287      	movs	r2, #135	@ 0x87
 8016504:	4927      	ldr	r1, [pc, #156]	@ (80165a4 <udp_input_local_match+0xb8>)
 8016506:	4828      	ldr	r0, [pc, #160]	@ (80165a8 <udp_input_local_match+0xbc>)
 8016508:	f002 fe76 	bl	80191f8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801650c:	68bb      	ldr	r3, [r7, #8]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d105      	bne.n	801651e <udp_input_local_match+0x32>
 8016512:	4b23      	ldr	r3, [pc, #140]	@ (80165a0 <udp_input_local_match+0xb4>)
 8016514:	2288      	movs	r2, #136	@ 0x88
 8016516:	4925      	ldr	r1, [pc, #148]	@ (80165ac <udp_input_local_match+0xc0>)
 8016518:	4823      	ldr	r0, [pc, #140]	@ (80165a8 <udp_input_local_match+0xbc>)
 801651a:	f002 fe6d 	bl	80191f8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	7a1b      	ldrb	r3, [r3, #8]
 8016522:	2b00      	cmp	r3, #0
 8016524:	d00b      	beq.n	801653e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	7a1a      	ldrb	r2, [r3, #8]
 801652a:	4b21      	ldr	r3, [pc, #132]	@ (80165b0 <udp_input_local_match+0xc4>)
 801652c:	685b      	ldr	r3, [r3, #4]
 801652e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016532:	3301      	adds	r3, #1
 8016534:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016536:	429a      	cmp	r2, r3
 8016538:	d001      	beq.n	801653e <udp_input_local_match+0x52>
    return 0;
 801653a:	2300      	movs	r3, #0
 801653c:	e02b      	b.n	8016596 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801653e:	79fb      	ldrb	r3, [r7, #7]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d018      	beq.n	8016576 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d013      	beq.n	8016572 <udp_input_local_match+0x86>
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d00f      	beq.n	8016572 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016552:	4b17      	ldr	r3, [pc, #92]	@ (80165b0 <udp_input_local_match+0xc4>)
 8016554:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016556:	f1b3 3fff 	cmp.w	r3, #4294967295
 801655a:	d00a      	beq.n	8016572 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	681a      	ldr	r2, [r3, #0]
 8016560:	4b13      	ldr	r3, [pc, #76]	@ (80165b0 <udp_input_local_match+0xc4>)
 8016562:	695b      	ldr	r3, [r3, #20]
 8016564:	405a      	eors	r2, r3
 8016566:	68bb      	ldr	r3, [r7, #8]
 8016568:	3308      	adds	r3, #8
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801656e:	2b00      	cmp	r3, #0
 8016570:	d110      	bne.n	8016594 <udp_input_local_match+0xa8>
          return 1;
 8016572:	2301      	movs	r3, #1
 8016574:	e00f      	b.n	8016596 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d009      	beq.n	8016590 <udp_input_local_match+0xa4>
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d005      	beq.n	8016590 <udp_input_local_match+0xa4>
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	681a      	ldr	r2, [r3, #0]
 8016588:	4b09      	ldr	r3, [pc, #36]	@ (80165b0 <udp_input_local_match+0xc4>)
 801658a:	695b      	ldr	r3, [r3, #20]
 801658c:	429a      	cmp	r2, r3
 801658e:	d101      	bne.n	8016594 <udp_input_local_match+0xa8>
        return 1;
 8016590:	2301      	movs	r3, #1
 8016592:	e000      	b.n	8016596 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016594:	2300      	movs	r3, #0
}
 8016596:	4618      	mov	r0, r3
 8016598:	3710      	adds	r7, #16
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}
 801659e:	bf00      	nop
 80165a0:	0801c128 	.word	0x0801c128
 80165a4:	0801c158 	.word	0x0801c158
 80165a8:	0801c17c 	.word	0x0801c17c
 80165ac:	0801c1a4 	.word	0x0801c1a4
 80165b0:	2005da8c 	.word	0x2005da8c

080165b4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80165b4:	b590      	push	{r4, r7, lr}
 80165b6:	b08d      	sub	sp, #52	@ 0x34
 80165b8:	af02      	add	r7, sp, #8
 80165ba:	6078      	str	r0, [r7, #4]
 80165bc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80165be:	2300      	movs	r3, #0
 80165c0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d105      	bne.n	80165d4 <udp_input+0x20>
 80165c8:	4b7c      	ldr	r3, [pc, #496]	@ (80167bc <udp_input+0x208>)
 80165ca:	22cf      	movs	r2, #207	@ 0xcf
 80165cc:	497c      	ldr	r1, [pc, #496]	@ (80167c0 <udp_input+0x20c>)
 80165ce:	487d      	ldr	r0, [pc, #500]	@ (80167c4 <udp_input+0x210>)
 80165d0:	f002 fe12 	bl	80191f8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80165d4:	683b      	ldr	r3, [r7, #0]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d105      	bne.n	80165e6 <udp_input+0x32>
 80165da:	4b78      	ldr	r3, [pc, #480]	@ (80167bc <udp_input+0x208>)
 80165dc:	22d0      	movs	r2, #208	@ 0xd0
 80165de:	497a      	ldr	r1, [pc, #488]	@ (80167c8 <udp_input+0x214>)
 80165e0:	4878      	ldr	r0, [pc, #480]	@ (80167c4 <udp_input+0x210>)
 80165e2:	f002 fe09 	bl	80191f8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	895b      	ldrh	r3, [r3, #10]
 80165ea:	2b07      	cmp	r3, #7
 80165ec:	d803      	bhi.n	80165f6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80165ee:	6878      	ldr	r0, [r7, #4]
 80165f0:	f7fa f9fe 	bl	80109f0 <pbuf_free>
    goto end;
 80165f4:	e0de      	b.n	80167b4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	685b      	ldr	r3, [r3, #4]
 80165fa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80165fc:	4b73      	ldr	r3, [pc, #460]	@ (80167cc <udp_input+0x218>)
 80165fe:	695b      	ldr	r3, [r3, #20]
 8016600:	4a72      	ldr	r2, [pc, #456]	@ (80167cc <udp_input+0x218>)
 8016602:	6812      	ldr	r2, [r2, #0]
 8016604:	4611      	mov	r1, r2
 8016606:	4618      	mov	r0, r3
 8016608:	f001 fcae 	bl	8017f68 <ip4_addr_isbroadcast_u32>
 801660c:	4603      	mov	r3, r0
 801660e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016610:	697b      	ldr	r3, [r7, #20]
 8016612:	881b      	ldrh	r3, [r3, #0]
 8016614:	b29b      	uxth	r3, r3
 8016616:	4618      	mov	r0, r3
 8016618:	f7f8 fd40 	bl	800f09c <lwip_htons>
 801661c:	4603      	mov	r3, r0
 801661e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016620:	697b      	ldr	r3, [r7, #20]
 8016622:	885b      	ldrh	r3, [r3, #2]
 8016624:	b29b      	uxth	r3, r3
 8016626:	4618      	mov	r0, r3
 8016628:	f7f8 fd38 	bl	800f09c <lwip_htons>
 801662c:	4603      	mov	r3, r0
 801662e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016630:	2300      	movs	r3, #0
 8016632:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8016634:	2300      	movs	r3, #0
 8016636:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016638:	2300      	movs	r3, #0
 801663a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801663c:	4b64      	ldr	r3, [pc, #400]	@ (80167d0 <udp_input+0x21c>)
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	627b      	str	r3, [r7, #36]	@ 0x24
 8016642:	e054      	b.n	80166ee <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016646:	8a5b      	ldrh	r3, [r3, #18]
 8016648:	89fa      	ldrh	r2, [r7, #14]
 801664a:	429a      	cmp	r2, r3
 801664c:	d14a      	bne.n	80166e4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801664e:	7cfb      	ldrb	r3, [r7, #19]
 8016650:	461a      	mov	r2, r3
 8016652:	6839      	ldr	r1, [r7, #0]
 8016654:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016656:	f7ff ff49 	bl	80164ec <udp_input_local_match>
 801665a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801665c:	2b00      	cmp	r3, #0
 801665e:	d041      	beq.n	80166e4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016662:	7c1b      	ldrb	r3, [r3, #16]
 8016664:	f003 0304 	and.w	r3, r3, #4
 8016668:	2b00      	cmp	r3, #0
 801666a:	d11d      	bne.n	80166a8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801666c:	69fb      	ldr	r3, [r7, #28]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d102      	bne.n	8016678 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016674:	61fb      	str	r3, [r7, #28]
 8016676:	e017      	b.n	80166a8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016678:	7cfb      	ldrb	r3, [r7, #19]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d014      	beq.n	80166a8 <udp_input+0xf4>
 801667e:	4b53      	ldr	r3, [pc, #332]	@ (80167cc <udp_input+0x218>)
 8016680:	695b      	ldr	r3, [r3, #20]
 8016682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016686:	d10f      	bne.n	80166a8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016688:	69fb      	ldr	r3, [r7, #28]
 801668a:	681a      	ldr	r2, [r3, #0]
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	3304      	adds	r3, #4
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	429a      	cmp	r2, r3
 8016694:	d008      	beq.n	80166a8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016698:	681a      	ldr	r2, [r3, #0]
 801669a:	683b      	ldr	r3, [r7, #0]
 801669c:	3304      	adds	r3, #4
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d101      	bne.n	80166a8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80166a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166a6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80166a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166aa:	8a9b      	ldrh	r3, [r3, #20]
 80166ac:	8a3a      	ldrh	r2, [r7, #16]
 80166ae:	429a      	cmp	r2, r3
 80166b0:	d118      	bne.n	80166e4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80166b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166b4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d005      	beq.n	80166c6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80166ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166bc:	685a      	ldr	r2, [r3, #4]
 80166be:	4b43      	ldr	r3, [pc, #268]	@ (80167cc <udp_input+0x218>)
 80166c0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80166c2:	429a      	cmp	r2, r3
 80166c4:	d10e      	bne.n	80166e4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80166c6:	6a3b      	ldr	r3, [r7, #32]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d014      	beq.n	80166f6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80166cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166ce:	68da      	ldr	r2, [r3, #12]
 80166d0:	6a3b      	ldr	r3, [r7, #32]
 80166d2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80166d4:	4b3e      	ldr	r3, [pc, #248]	@ (80167d0 <udp_input+0x21c>)
 80166d6:	681a      	ldr	r2, [r3, #0]
 80166d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166da:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80166dc:	4a3c      	ldr	r2, [pc, #240]	@ (80167d0 <udp_input+0x21c>)
 80166de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166e0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80166e2:	e008      	b.n	80166f6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80166e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166e6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80166e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166ea:	68db      	ldr	r3, [r3, #12]
 80166ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80166ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d1a7      	bne.n	8016644 <udp_input+0x90>
 80166f4:	e000      	b.n	80166f8 <udp_input+0x144>
        break;
 80166f6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80166f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d101      	bne.n	8016702 <udp_input+0x14e>
    pcb = uncon_pcb;
 80166fe:	69fb      	ldr	r3, [r7, #28]
 8016700:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016704:	2b00      	cmp	r3, #0
 8016706:	d002      	beq.n	801670e <udp_input+0x15a>
    for_us = 1;
 8016708:	2301      	movs	r3, #1
 801670a:	76fb      	strb	r3, [r7, #27]
 801670c:	e00a      	b.n	8016724 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801670e:	683b      	ldr	r3, [r7, #0]
 8016710:	3304      	adds	r3, #4
 8016712:	681a      	ldr	r2, [r3, #0]
 8016714:	4b2d      	ldr	r3, [pc, #180]	@ (80167cc <udp_input+0x218>)
 8016716:	695b      	ldr	r3, [r3, #20]
 8016718:	429a      	cmp	r2, r3
 801671a:	bf0c      	ite	eq
 801671c:	2301      	moveq	r3, #1
 801671e:	2300      	movne	r3, #0
 8016720:	b2db      	uxtb	r3, r3
 8016722:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016724:	7efb      	ldrb	r3, [r7, #27]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d041      	beq.n	80167ae <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801672a:	2108      	movs	r1, #8
 801672c:	6878      	ldr	r0, [r7, #4]
 801672e:	f7fa f8d9 	bl	80108e4 <pbuf_remove_header>
 8016732:	4603      	mov	r3, r0
 8016734:	2b00      	cmp	r3, #0
 8016736:	d00a      	beq.n	801674e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016738:	4b20      	ldr	r3, [pc, #128]	@ (80167bc <udp_input+0x208>)
 801673a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801673e:	4925      	ldr	r1, [pc, #148]	@ (80167d4 <udp_input+0x220>)
 8016740:	4820      	ldr	r0, [pc, #128]	@ (80167c4 <udp_input+0x210>)
 8016742:	f002 fd59 	bl	80191f8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016746:	6878      	ldr	r0, [r7, #4]
 8016748:	f7fa f952 	bl	80109f0 <pbuf_free>
      goto end;
 801674c:	e032      	b.n	80167b4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016750:	2b00      	cmp	r3, #0
 8016752:	d012      	beq.n	801677a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016756:	699b      	ldr	r3, [r3, #24]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d00a      	beq.n	8016772 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801675e:	699c      	ldr	r4, [r3, #24]
 8016760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016762:	69d8      	ldr	r0, [r3, #28]
 8016764:	8a3b      	ldrh	r3, [r7, #16]
 8016766:	9300      	str	r3, [sp, #0]
 8016768:	4b1b      	ldr	r3, [pc, #108]	@ (80167d8 <udp_input+0x224>)
 801676a:	687a      	ldr	r2, [r7, #4]
 801676c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801676e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016770:	e021      	b.n	80167b6 <udp_input+0x202>
        pbuf_free(p);
 8016772:	6878      	ldr	r0, [r7, #4]
 8016774:	f7fa f93c 	bl	80109f0 <pbuf_free>
        goto end;
 8016778:	e01c      	b.n	80167b4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801677a:	7cfb      	ldrb	r3, [r7, #19]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d112      	bne.n	80167a6 <udp_input+0x1f2>
 8016780:	4b12      	ldr	r3, [pc, #72]	@ (80167cc <udp_input+0x218>)
 8016782:	695b      	ldr	r3, [r3, #20]
 8016784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016788:	2be0      	cmp	r3, #224	@ 0xe0
 801678a:	d00c      	beq.n	80167a6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801678c:	4b0f      	ldr	r3, [pc, #60]	@ (80167cc <udp_input+0x218>)
 801678e:	899b      	ldrh	r3, [r3, #12]
 8016790:	3308      	adds	r3, #8
 8016792:	b29b      	uxth	r3, r3
 8016794:	b21b      	sxth	r3, r3
 8016796:	4619      	mov	r1, r3
 8016798:	6878      	ldr	r0, [r7, #4]
 801679a:	f7fa f916 	bl	80109ca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801679e:	2103      	movs	r1, #3
 80167a0:	6878      	ldr	r0, [r7, #4]
 80167a2:	f001 f8b7 	bl	8017914 <icmp_dest_unreach>
      pbuf_free(p);
 80167a6:	6878      	ldr	r0, [r7, #4]
 80167a8:	f7fa f922 	bl	80109f0 <pbuf_free>
  return;
 80167ac:	e003      	b.n	80167b6 <udp_input+0x202>
    pbuf_free(p);
 80167ae:	6878      	ldr	r0, [r7, #4]
 80167b0:	f7fa f91e 	bl	80109f0 <pbuf_free>
  return;
 80167b4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80167b6:	372c      	adds	r7, #44	@ 0x2c
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd90      	pop	{r4, r7, pc}
 80167bc:	0801c128 	.word	0x0801c128
 80167c0:	0801c1cc 	.word	0x0801c1cc
 80167c4:	0801c17c 	.word	0x0801c17c
 80167c8:	0801c1e4 	.word	0x0801c1e4
 80167cc:	2005da8c 	.word	0x2005da8c
 80167d0:	20060be8 	.word	0x20060be8
 80167d4:	0801c200 	.word	0x0801c200
 80167d8:	2005da9c 	.word	0x2005da9c

080167dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80167dc:	b480      	push	{r7}
 80167de:	b085      	sub	sp, #20
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
 80167e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d01e      	beq.n	801682a <udp_netif_ip_addr_changed+0x4e>
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d01a      	beq.n	801682a <udp_netif_ip_addr_changed+0x4e>
 80167f4:	683b      	ldr	r3, [r7, #0]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d017      	beq.n	801682a <udp_netif_ip_addr_changed+0x4e>
 80167fa:	683b      	ldr	r3, [r7, #0]
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d013      	beq.n	801682a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016802:	4b0d      	ldr	r3, [pc, #52]	@ (8016838 <udp_netif_ip_addr_changed+0x5c>)
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	60fb      	str	r3, [r7, #12]
 8016808:	e00c      	b.n	8016824 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	681a      	ldr	r2, [r3, #0]
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	429a      	cmp	r2, r3
 8016814:	d103      	bne.n	801681e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016816:	683b      	ldr	r3, [r7, #0]
 8016818:	681a      	ldr	r2, [r3, #0]
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	68db      	ldr	r3, [r3, #12]
 8016822:	60fb      	str	r3, [r7, #12]
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d1ef      	bne.n	801680a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801682a:	bf00      	nop
 801682c:	3714      	adds	r7, #20
 801682e:	46bd      	mov	sp, r7
 8016830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016834:	4770      	bx	lr
 8016836:	bf00      	nop
 8016838:	20060be8 	.word	0x20060be8

0801683c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801683c:	b580      	push	{r7, lr}
 801683e:	b082      	sub	sp, #8
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016844:	4915      	ldr	r1, [pc, #84]	@ (801689c <etharp_free_entry+0x60>)
 8016846:	687a      	ldr	r2, [r7, #4]
 8016848:	4613      	mov	r3, r2
 801684a:	005b      	lsls	r3, r3, #1
 801684c:	4413      	add	r3, r2
 801684e:	00db      	lsls	r3, r3, #3
 8016850:	440b      	add	r3, r1
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d013      	beq.n	8016880 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016858:	4910      	ldr	r1, [pc, #64]	@ (801689c <etharp_free_entry+0x60>)
 801685a:	687a      	ldr	r2, [r7, #4]
 801685c:	4613      	mov	r3, r2
 801685e:	005b      	lsls	r3, r3, #1
 8016860:	4413      	add	r3, r2
 8016862:	00db      	lsls	r3, r3, #3
 8016864:	440b      	add	r3, r1
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	4618      	mov	r0, r3
 801686a:	f7fa f8c1 	bl	80109f0 <pbuf_free>
    arp_table[i].q = NULL;
 801686e:	490b      	ldr	r1, [pc, #44]	@ (801689c <etharp_free_entry+0x60>)
 8016870:	687a      	ldr	r2, [r7, #4]
 8016872:	4613      	mov	r3, r2
 8016874:	005b      	lsls	r3, r3, #1
 8016876:	4413      	add	r3, r2
 8016878:	00db      	lsls	r3, r3, #3
 801687a:	440b      	add	r3, r1
 801687c:	2200      	movs	r2, #0
 801687e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016880:	4906      	ldr	r1, [pc, #24]	@ (801689c <etharp_free_entry+0x60>)
 8016882:	687a      	ldr	r2, [r7, #4]
 8016884:	4613      	mov	r3, r2
 8016886:	005b      	lsls	r3, r3, #1
 8016888:	4413      	add	r3, r2
 801688a:	00db      	lsls	r3, r3, #3
 801688c:	440b      	add	r3, r1
 801688e:	3314      	adds	r3, #20
 8016890:	2200      	movs	r2, #0
 8016892:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016894:	bf00      	nop
 8016896:	3708      	adds	r7, #8
 8016898:	46bd      	mov	sp, r7
 801689a:	bd80      	pop	{r7, pc}
 801689c:	20060bec 	.word	0x20060bec

080168a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b082      	sub	sp, #8
 80168a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168a6:	2300      	movs	r3, #0
 80168a8:	607b      	str	r3, [r7, #4]
 80168aa:	e096      	b.n	80169da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80168ac:	494f      	ldr	r1, [pc, #316]	@ (80169ec <etharp_tmr+0x14c>)
 80168ae:	687a      	ldr	r2, [r7, #4]
 80168b0:	4613      	mov	r3, r2
 80168b2:	005b      	lsls	r3, r3, #1
 80168b4:	4413      	add	r3, r2
 80168b6:	00db      	lsls	r3, r3, #3
 80168b8:	440b      	add	r3, r1
 80168ba:	3314      	adds	r3, #20
 80168bc:	781b      	ldrb	r3, [r3, #0]
 80168be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80168c0:	78fb      	ldrb	r3, [r7, #3]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	f000 8086 	beq.w	80169d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80168c8:	4948      	ldr	r1, [pc, #288]	@ (80169ec <etharp_tmr+0x14c>)
 80168ca:	687a      	ldr	r2, [r7, #4]
 80168cc:	4613      	mov	r3, r2
 80168ce:	005b      	lsls	r3, r3, #1
 80168d0:	4413      	add	r3, r2
 80168d2:	00db      	lsls	r3, r3, #3
 80168d4:	440b      	add	r3, r1
 80168d6:	3312      	adds	r3, #18
 80168d8:	881b      	ldrh	r3, [r3, #0]
 80168da:	3301      	adds	r3, #1
 80168dc:	b298      	uxth	r0, r3
 80168de:	4943      	ldr	r1, [pc, #268]	@ (80169ec <etharp_tmr+0x14c>)
 80168e0:	687a      	ldr	r2, [r7, #4]
 80168e2:	4613      	mov	r3, r2
 80168e4:	005b      	lsls	r3, r3, #1
 80168e6:	4413      	add	r3, r2
 80168e8:	00db      	lsls	r3, r3, #3
 80168ea:	440b      	add	r3, r1
 80168ec:	3312      	adds	r3, #18
 80168ee:	4602      	mov	r2, r0
 80168f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80168f2:	493e      	ldr	r1, [pc, #248]	@ (80169ec <etharp_tmr+0x14c>)
 80168f4:	687a      	ldr	r2, [r7, #4]
 80168f6:	4613      	mov	r3, r2
 80168f8:	005b      	lsls	r3, r3, #1
 80168fa:	4413      	add	r3, r2
 80168fc:	00db      	lsls	r3, r3, #3
 80168fe:	440b      	add	r3, r1
 8016900:	3312      	adds	r3, #18
 8016902:	881b      	ldrh	r3, [r3, #0]
 8016904:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8016908:	d215      	bcs.n	8016936 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801690a:	4938      	ldr	r1, [pc, #224]	@ (80169ec <etharp_tmr+0x14c>)
 801690c:	687a      	ldr	r2, [r7, #4]
 801690e:	4613      	mov	r3, r2
 8016910:	005b      	lsls	r3, r3, #1
 8016912:	4413      	add	r3, r2
 8016914:	00db      	lsls	r3, r3, #3
 8016916:	440b      	add	r3, r1
 8016918:	3314      	adds	r3, #20
 801691a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801691c:	2b01      	cmp	r3, #1
 801691e:	d10e      	bne.n	801693e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016920:	4932      	ldr	r1, [pc, #200]	@ (80169ec <etharp_tmr+0x14c>)
 8016922:	687a      	ldr	r2, [r7, #4]
 8016924:	4613      	mov	r3, r2
 8016926:	005b      	lsls	r3, r3, #1
 8016928:	4413      	add	r3, r2
 801692a:	00db      	lsls	r3, r3, #3
 801692c:	440b      	add	r3, r1
 801692e:	3312      	adds	r3, #18
 8016930:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016932:	2b04      	cmp	r3, #4
 8016934:	d903      	bls.n	801693e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016936:	6878      	ldr	r0, [r7, #4]
 8016938:	f7ff ff80 	bl	801683c <etharp_free_entry>
 801693c:	e04a      	b.n	80169d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801693e:	492b      	ldr	r1, [pc, #172]	@ (80169ec <etharp_tmr+0x14c>)
 8016940:	687a      	ldr	r2, [r7, #4]
 8016942:	4613      	mov	r3, r2
 8016944:	005b      	lsls	r3, r3, #1
 8016946:	4413      	add	r3, r2
 8016948:	00db      	lsls	r3, r3, #3
 801694a:	440b      	add	r3, r1
 801694c:	3314      	adds	r3, #20
 801694e:	781b      	ldrb	r3, [r3, #0]
 8016950:	2b03      	cmp	r3, #3
 8016952:	d10a      	bne.n	801696a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016954:	4925      	ldr	r1, [pc, #148]	@ (80169ec <etharp_tmr+0x14c>)
 8016956:	687a      	ldr	r2, [r7, #4]
 8016958:	4613      	mov	r3, r2
 801695a:	005b      	lsls	r3, r3, #1
 801695c:	4413      	add	r3, r2
 801695e:	00db      	lsls	r3, r3, #3
 8016960:	440b      	add	r3, r1
 8016962:	3314      	adds	r3, #20
 8016964:	2204      	movs	r2, #4
 8016966:	701a      	strb	r2, [r3, #0]
 8016968:	e034      	b.n	80169d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801696a:	4920      	ldr	r1, [pc, #128]	@ (80169ec <etharp_tmr+0x14c>)
 801696c:	687a      	ldr	r2, [r7, #4]
 801696e:	4613      	mov	r3, r2
 8016970:	005b      	lsls	r3, r3, #1
 8016972:	4413      	add	r3, r2
 8016974:	00db      	lsls	r3, r3, #3
 8016976:	440b      	add	r3, r1
 8016978:	3314      	adds	r3, #20
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	2b04      	cmp	r3, #4
 801697e:	d10a      	bne.n	8016996 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016980:	491a      	ldr	r1, [pc, #104]	@ (80169ec <etharp_tmr+0x14c>)
 8016982:	687a      	ldr	r2, [r7, #4]
 8016984:	4613      	mov	r3, r2
 8016986:	005b      	lsls	r3, r3, #1
 8016988:	4413      	add	r3, r2
 801698a:	00db      	lsls	r3, r3, #3
 801698c:	440b      	add	r3, r1
 801698e:	3314      	adds	r3, #20
 8016990:	2202      	movs	r2, #2
 8016992:	701a      	strb	r2, [r3, #0]
 8016994:	e01e      	b.n	80169d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016996:	4915      	ldr	r1, [pc, #84]	@ (80169ec <etharp_tmr+0x14c>)
 8016998:	687a      	ldr	r2, [r7, #4]
 801699a:	4613      	mov	r3, r2
 801699c:	005b      	lsls	r3, r3, #1
 801699e:	4413      	add	r3, r2
 80169a0:	00db      	lsls	r3, r3, #3
 80169a2:	440b      	add	r3, r1
 80169a4:	3314      	adds	r3, #20
 80169a6:	781b      	ldrb	r3, [r3, #0]
 80169a8:	2b01      	cmp	r3, #1
 80169aa:	d113      	bne.n	80169d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80169ac:	490f      	ldr	r1, [pc, #60]	@ (80169ec <etharp_tmr+0x14c>)
 80169ae:	687a      	ldr	r2, [r7, #4]
 80169b0:	4613      	mov	r3, r2
 80169b2:	005b      	lsls	r3, r3, #1
 80169b4:	4413      	add	r3, r2
 80169b6:	00db      	lsls	r3, r3, #3
 80169b8:	440b      	add	r3, r1
 80169ba:	3308      	adds	r3, #8
 80169bc:	6818      	ldr	r0, [r3, #0]
 80169be:	687a      	ldr	r2, [r7, #4]
 80169c0:	4613      	mov	r3, r2
 80169c2:	005b      	lsls	r3, r3, #1
 80169c4:	4413      	add	r3, r2
 80169c6:	00db      	lsls	r3, r3, #3
 80169c8:	4a08      	ldr	r2, [pc, #32]	@ (80169ec <etharp_tmr+0x14c>)
 80169ca:	4413      	add	r3, r2
 80169cc:	3304      	adds	r3, #4
 80169ce:	4619      	mov	r1, r3
 80169d0:	f000 fe6e 	bl	80176b0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	3301      	adds	r3, #1
 80169d8:	607b      	str	r3, [r7, #4]
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	2b09      	cmp	r3, #9
 80169de:	f77f af65 	ble.w	80168ac <etharp_tmr+0xc>
      }
    }
  }
}
 80169e2:	bf00      	nop
 80169e4:	bf00      	nop
 80169e6:	3708      	adds	r7, #8
 80169e8:	46bd      	mov	sp, r7
 80169ea:	bd80      	pop	{r7, pc}
 80169ec:	20060bec 	.word	0x20060bec

080169f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80169f0:	b580      	push	{r7, lr}
 80169f2:	b08a      	sub	sp, #40	@ 0x28
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	60f8      	str	r0, [r7, #12]
 80169f8:	460b      	mov	r3, r1
 80169fa:	607a      	str	r2, [r7, #4]
 80169fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80169fe:	230a      	movs	r3, #10
 8016a00:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8016a02:	230a      	movs	r3, #10
 8016a04:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016a06:	230a      	movs	r3, #10
 8016a08:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016a0e:	230a      	movs	r3, #10
 8016a10:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016a12:	2300      	movs	r3, #0
 8016a14:	83bb      	strh	r3, [r7, #28]
 8016a16:	2300      	movs	r3, #0
 8016a18:	837b      	strh	r3, [r7, #26]
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a1e:	2300      	movs	r3, #0
 8016a20:	843b      	strh	r3, [r7, #32]
 8016a22:	e0ae      	b.n	8016b82 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016a24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a28:	49a6      	ldr	r1, [pc, #664]	@ (8016cc4 <etharp_find_entry+0x2d4>)
 8016a2a:	4613      	mov	r3, r2
 8016a2c:	005b      	lsls	r3, r3, #1
 8016a2e:	4413      	add	r3, r2
 8016a30:	00db      	lsls	r3, r3, #3
 8016a32:	440b      	add	r3, r1
 8016a34:	3314      	adds	r3, #20
 8016a36:	781b      	ldrb	r3, [r3, #0]
 8016a38:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016a3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016a3e:	2b0a      	cmp	r3, #10
 8016a40:	d105      	bne.n	8016a4e <etharp_find_entry+0x5e>
 8016a42:	7dfb      	ldrb	r3, [r7, #23]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d102      	bne.n	8016a4e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016a48:	8c3b      	ldrh	r3, [r7, #32]
 8016a4a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8016a4c:	e095      	b.n	8016b7a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016a4e:	7dfb      	ldrb	r3, [r7, #23]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	f000 8092 	beq.w	8016b7a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016a56:	7dfb      	ldrb	r3, [r7, #23]
 8016a58:	2b01      	cmp	r3, #1
 8016a5a:	d009      	beq.n	8016a70 <etharp_find_entry+0x80>
 8016a5c:	7dfb      	ldrb	r3, [r7, #23]
 8016a5e:	2b01      	cmp	r3, #1
 8016a60:	d806      	bhi.n	8016a70 <etharp_find_entry+0x80>
 8016a62:	4b99      	ldr	r3, [pc, #612]	@ (8016cc8 <etharp_find_entry+0x2d8>)
 8016a64:	f240 1223 	movw	r2, #291	@ 0x123
 8016a68:	4998      	ldr	r1, [pc, #608]	@ (8016ccc <etharp_find_entry+0x2dc>)
 8016a6a:	4899      	ldr	r0, [pc, #612]	@ (8016cd0 <etharp_find_entry+0x2e0>)
 8016a6c:	f002 fbc4 	bl	80191f8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d020      	beq.n	8016ab8 <etharp_find_entry+0xc8>
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	6819      	ldr	r1, [r3, #0]
 8016a7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a7e:	4891      	ldr	r0, [pc, #580]	@ (8016cc4 <etharp_find_entry+0x2d4>)
 8016a80:	4613      	mov	r3, r2
 8016a82:	005b      	lsls	r3, r3, #1
 8016a84:	4413      	add	r3, r2
 8016a86:	00db      	lsls	r3, r3, #3
 8016a88:	4403      	add	r3, r0
 8016a8a:	3304      	adds	r3, #4
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	4299      	cmp	r1, r3
 8016a90:	d112      	bne.n	8016ab8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d00c      	beq.n	8016ab2 <etharp_find_entry+0xc2>
 8016a98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a9c:	4989      	ldr	r1, [pc, #548]	@ (8016cc4 <etharp_find_entry+0x2d4>)
 8016a9e:	4613      	mov	r3, r2
 8016aa0:	005b      	lsls	r3, r3, #1
 8016aa2:	4413      	add	r3, r2
 8016aa4:	00db      	lsls	r3, r3, #3
 8016aa6:	440b      	add	r3, r1
 8016aa8:	3308      	adds	r3, #8
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	687a      	ldr	r2, [r7, #4]
 8016aae:	429a      	cmp	r2, r3
 8016ab0:	d102      	bne.n	8016ab8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016ab2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016ab6:	e100      	b.n	8016cba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016ab8:	7dfb      	ldrb	r3, [r7, #23]
 8016aba:	2b01      	cmp	r3, #1
 8016abc:	d140      	bne.n	8016b40 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016abe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ac2:	4980      	ldr	r1, [pc, #512]	@ (8016cc4 <etharp_find_entry+0x2d4>)
 8016ac4:	4613      	mov	r3, r2
 8016ac6:	005b      	lsls	r3, r3, #1
 8016ac8:	4413      	add	r3, r2
 8016aca:	00db      	lsls	r3, r3, #3
 8016acc:	440b      	add	r3, r1
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d01a      	beq.n	8016b0a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016ad4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ad8:	497a      	ldr	r1, [pc, #488]	@ (8016cc4 <etharp_find_entry+0x2d4>)
 8016ada:	4613      	mov	r3, r2
 8016adc:	005b      	lsls	r3, r3, #1
 8016ade:	4413      	add	r3, r2
 8016ae0:	00db      	lsls	r3, r3, #3
 8016ae2:	440b      	add	r3, r1
 8016ae4:	3312      	adds	r3, #18
 8016ae6:	881b      	ldrh	r3, [r3, #0]
 8016ae8:	8bba      	ldrh	r2, [r7, #28]
 8016aea:	429a      	cmp	r2, r3
 8016aec:	d845      	bhi.n	8016b7a <etharp_find_entry+0x18a>
            old_queue = i;
 8016aee:	8c3b      	ldrh	r3, [r7, #32]
 8016af0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016af2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016af6:	4973      	ldr	r1, [pc, #460]	@ (8016cc4 <etharp_find_entry+0x2d4>)
 8016af8:	4613      	mov	r3, r2
 8016afa:	005b      	lsls	r3, r3, #1
 8016afc:	4413      	add	r3, r2
 8016afe:	00db      	lsls	r3, r3, #3
 8016b00:	440b      	add	r3, r1
 8016b02:	3312      	adds	r3, #18
 8016b04:	881b      	ldrh	r3, [r3, #0]
 8016b06:	83bb      	strh	r3, [r7, #28]
 8016b08:	e037      	b.n	8016b7a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016b0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b0e:	496d      	ldr	r1, [pc, #436]	@ (8016cc4 <etharp_find_entry+0x2d4>)
 8016b10:	4613      	mov	r3, r2
 8016b12:	005b      	lsls	r3, r3, #1
 8016b14:	4413      	add	r3, r2
 8016b16:	00db      	lsls	r3, r3, #3
 8016b18:	440b      	add	r3, r1
 8016b1a:	3312      	adds	r3, #18
 8016b1c:	881b      	ldrh	r3, [r3, #0]
 8016b1e:	8b7a      	ldrh	r2, [r7, #26]
 8016b20:	429a      	cmp	r2, r3
 8016b22:	d82a      	bhi.n	8016b7a <etharp_find_entry+0x18a>
            old_pending = i;
 8016b24:	8c3b      	ldrh	r3, [r7, #32]
 8016b26:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8016b28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b2c:	4965      	ldr	r1, [pc, #404]	@ (8016cc4 <etharp_find_entry+0x2d4>)
 8016b2e:	4613      	mov	r3, r2
 8016b30:	005b      	lsls	r3, r3, #1
 8016b32:	4413      	add	r3, r2
 8016b34:	00db      	lsls	r3, r3, #3
 8016b36:	440b      	add	r3, r1
 8016b38:	3312      	adds	r3, #18
 8016b3a:	881b      	ldrh	r3, [r3, #0]
 8016b3c:	837b      	strh	r3, [r7, #26]
 8016b3e:	e01c      	b.n	8016b7a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016b40:	7dfb      	ldrb	r3, [r7, #23]
 8016b42:	2b01      	cmp	r3, #1
 8016b44:	d919      	bls.n	8016b7a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016b46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b4a:	495e      	ldr	r1, [pc, #376]	@ (8016cc4 <etharp_find_entry+0x2d4>)
 8016b4c:	4613      	mov	r3, r2
 8016b4e:	005b      	lsls	r3, r3, #1
 8016b50:	4413      	add	r3, r2
 8016b52:	00db      	lsls	r3, r3, #3
 8016b54:	440b      	add	r3, r1
 8016b56:	3312      	adds	r3, #18
 8016b58:	881b      	ldrh	r3, [r3, #0]
 8016b5a:	8b3a      	ldrh	r2, [r7, #24]
 8016b5c:	429a      	cmp	r2, r3
 8016b5e:	d80c      	bhi.n	8016b7a <etharp_find_entry+0x18a>
            old_stable = i;
 8016b60:	8c3b      	ldrh	r3, [r7, #32]
 8016b62:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8016b64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b68:	4956      	ldr	r1, [pc, #344]	@ (8016cc4 <etharp_find_entry+0x2d4>)
 8016b6a:	4613      	mov	r3, r2
 8016b6c:	005b      	lsls	r3, r3, #1
 8016b6e:	4413      	add	r3, r2
 8016b70:	00db      	lsls	r3, r3, #3
 8016b72:	440b      	add	r3, r1
 8016b74:	3312      	adds	r3, #18
 8016b76:	881b      	ldrh	r3, [r3, #0]
 8016b78:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b7a:	8c3b      	ldrh	r3, [r7, #32]
 8016b7c:	3301      	adds	r3, #1
 8016b7e:	b29b      	uxth	r3, r3
 8016b80:	843b      	strh	r3, [r7, #32]
 8016b82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b86:	2b09      	cmp	r3, #9
 8016b88:	f77f af4c 	ble.w	8016a24 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016b8c:	7afb      	ldrb	r3, [r7, #11]
 8016b8e:	f003 0302 	and.w	r3, r3, #2
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d108      	bne.n	8016ba8 <etharp_find_entry+0x1b8>
 8016b96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016b9a:	2b0a      	cmp	r3, #10
 8016b9c:	d107      	bne.n	8016bae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016b9e:	7afb      	ldrb	r3, [r7, #11]
 8016ba0:	f003 0301 	and.w	r3, r3, #1
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d102      	bne.n	8016bae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8016bac:	e085      	b.n	8016cba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016bae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016bb2:	2b09      	cmp	r3, #9
 8016bb4:	dc02      	bgt.n	8016bbc <etharp_find_entry+0x1cc>
    i = empty;
 8016bb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016bb8:	843b      	strh	r3, [r7, #32]
 8016bba:	e039      	b.n	8016c30 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016bbc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8016bc0:	2b09      	cmp	r3, #9
 8016bc2:	dc14      	bgt.n	8016bee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016bc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016bc6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016bc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016bcc:	493d      	ldr	r1, [pc, #244]	@ (8016cc4 <etharp_find_entry+0x2d4>)
 8016bce:	4613      	mov	r3, r2
 8016bd0:	005b      	lsls	r3, r3, #1
 8016bd2:	4413      	add	r3, r2
 8016bd4:	00db      	lsls	r3, r3, #3
 8016bd6:	440b      	add	r3, r1
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d018      	beq.n	8016c10 <etharp_find_entry+0x220>
 8016bde:	4b3a      	ldr	r3, [pc, #232]	@ (8016cc8 <etharp_find_entry+0x2d8>)
 8016be0:	f240 126d 	movw	r2, #365	@ 0x16d
 8016be4:	493b      	ldr	r1, [pc, #236]	@ (8016cd4 <etharp_find_entry+0x2e4>)
 8016be6:	483a      	ldr	r0, [pc, #232]	@ (8016cd0 <etharp_find_entry+0x2e0>)
 8016be8:	f002 fb06 	bl	80191f8 <iprintf>
 8016bec:	e010      	b.n	8016c10 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016bee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8016bf2:	2b09      	cmp	r3, #9
 8016bf4:	dc02      	bgt.n	8016bfc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016bf6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016bf8:	843b      	strh	r3, [r7, #32]
 8016bfa:	e009      	b.n	8016c10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016bfc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016c00:	2b09      	cmp	r3, #9
 8016c02:	dc02      	bgt.n	8016c0a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016c04:	8bfb      	ldrh	r3, [r7, #30]
 8016c06:	843b      	strh	r3, [r7, #32]
 8016c08:	e002      	b.n	8016c10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8016c0e:	e054      	b.n	8016cba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016c10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c14:	2b09      	cmp	r3, #9
 8016c16:	dd06      	ble.n	8016c26 <etharp_find_entry+0x236>
 8016c18:	4b2b      	ldr	r3, [pc, #172]	@ (8016cc8 <etharp_find_entry+0x2d8>)
 8016c1a:	f240 127f 	movw	r2, #383	@ 0x17f
 8016c1e:	492e      	ldr	r1, [pc, #184]	@ (8016cd8 <etharp_find_entry+0x2e8>)
 8016c20:	482b      	ldr	r0, [pc, #172]	@ (8016cd0 <etharp_find_entry+0x2e0>)
 8016c22:	f002 fae9 	bl	80191f8 <iprintf>
    etharp_free_entry(i);
 8016c26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	f7ff fe06 	bl	801683c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016c30:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c34:	2b09      	cmp	r3, #9
 8016c36:	dd06      	ble.n	8016c46 <etharp_find_entry+0x256>
 8016c38:	4b23      	ldr	r3, [pc, #140]	@ (8016cc8 <etharp_find_entry+0x2d8>)
 8016c3a:	f240 1283 	movw	r2, #387	@ 0x183
 8016c3e:	4926      	ldr	r1, [pc, #152]	@ (8016cd8 <etharp_find_entry+0x2e8>)
 8016c40:	4823      	ldr	r0, [pc, #140]	@ (8016cd0 <etharp_find_entry+0x2e0>)
 8016c42:	f002 fad9 	bl	80191f8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016c46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c4a:	491e      	ldr	r1, [pc, #120]	@ (8016cc4 <etharp_find_entry+0x2d4>)
 8016c4c:	4613      	mov	r3, r2
 8016c4e:	005b      	lsls	r3, r3, #1
 8016c50:	4413      	add	r3, r2
 8016c52:	00db      	lsls	r3, r3, #3
 8016c54:	440b      	add	r3, r1
 8016c56:	3314      	adds	r3, #20
 8016c58:	781b      	ldrb	r3, [r3, #0]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d006      	beq.n	8016c6c <etharp_find_entry+0x27c>
 8016c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8016cc8 <etharp_find_entry+0x2d8>)
 8016c60:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8016c64:	491d      	ldr	r1, [pc, #116]	@ (8016cdc <etharp_find_entry+0x2ec>)
 8016c66:	481a      	ldr	r0, [pc, #104]	@ (8016cd0 <etharp_find_entry+0x2e0>)
 8016c68:	f002 fac6 	bl	80191f8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d00b      	beq.n	8016c8a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016c72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	6819      	ldr	r1, [r3, #0]
 8016c7a:	4812      	ldr	r0, [pc, #72]	@ (8016cc4 <etharp_find_entry+0x2d4>)
 8016c7c:	4613      	mov	r3, r2
 8016c7e:	005b      	lsls	r3, r3, #1
 8016c80:	4413      	add	r3, r2
 8016c82:	00db      	lsls	r3, r3, #3
 8016c84:	4403      	add	r3, r0
 8016c86:	3304      	adds	r3, #4
 8016c88:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016c8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c8e:	490d      	ldr	r1, [pc, #52]	@ (8016cc4 <etharp_find_entry+0x2d4>)
 8016c90:	4613      	mov	r3, r2
 8016c92:	005b      	lsls	r3, r3, #1
 8016c94:	4413      	add	r3, r2
 8016c96:	00db      	lsls	r3, r3, #3
 8016c98:	440b      	add	r3, r1
 8016c9a:	3312      	adds	r3, #18
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016ca0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ca4:	4907      	ldr	r1, [pc, #28]	@ (8016cc4 <etharp_find_entry+0x2d4>)
 8016ca6:	4613      	mov	r3, r2
 8016ca8:	005b      	lsls	r3, r3, #1
 8016caa:	4413      	add	r3, r2
 8016cac:	00db      	lsls	r3, r3, #3
 8016cae:	440b      	add	r3, r1
 8016cb0:	3308      	adds	r3, #8
 8016cb2:	687a      	ldr	r2, [r7, #4]
 8016cb4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016cb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016cba:	4618      	mov	r0, r3
 8016cbc:	3728      	adds	r7, #40	@ 0x28
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	bd80      	pop	{r7, pc}
 8016cc2:	bf00      	nop
 8016cc4:	20060bec 	.word	0x20060bec
 8016cc8:	0801c48c 	.word	0x0801c48c
 8016ccc:	0801c4c4 	.word	0x0801c4c4
 8016cd0:	0801c504 	.word	0x0801c504
 8016cd4:	0801c52c 	.word	0x0801c52c
 8016cd8:	0801c544 	.word	0x0801c544
 8016cdc:	0801c558 	.word	0x0801c558

08016ce0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b088      	sub	sp, #32
 8016ce4:	af02      	add	r7, sp, #8
 8016ce6:	60f8      	str	r0, [r7, #12]
 8016ce8:	60b9      	str	r1, [r7, #8]
 8016cea:	607a      	str	r2, [r7, #4]
 8016cec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016cf4:	2b06      	cmp	r3, #6
 8016cf6:	d006      	beq.n	8016d06 <etharp_update_arp_entry+0x26>
 8016cf8:	4b48      	ldr	r3, [pc, #288]	@ (8016e1c <etharp_update_arp_entry+0x13c>)
 8016cfa:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8016cfe:	4948      	ldr	r1, [pc, #288]	@ (8016e20 <etharp_update_arp_entry+0x140>)
 8016d00:	4848      	ldr	r0, [pc, #288]	@ (8016e24 <etharp_update_arp_entry+0x144>)
 8016d02:	f002 fa79 	bl	80191f8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016d06:	68bb      	ldr	r3, [r7, #8]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d012      	beq.n	8016d32 <etharp_update_arp_entry+0x52>
 8016d0c:	68bb      	ldr	r3, [r7, #8]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d00e      	beq.n	8016d32 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016d14:	68bb      	ldr	r3, [r7, #8]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	68f9      	ldr	r1, [r7, #12]
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	f001 f924 	bl	8017f68 <ip4_addr_isbroadcast_u32>
 8016d20:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d105      	bne.n	8016d32 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016d26:	68bb      	ldr	r3, [r7, #8]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016d2e:	2be0      	cmp	r3, #224	@ 0xe0
 8016d30:	d102      	bne.n	8016d38 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016d32:	f06f 030f 	mvn.w	r3, #15
 8016d36:	e06c      	b.n	8016e12 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016d38:	78fb      	ldrb	r3, [r7, #3]
 8016d3a:	68fa      	ldr	r2, [r7, #12]
 8016d3c:	4619      	mov	r1, r3
 8016d3e:	68b8      	ldr	r0, [r7, #8]
 8016d40:	f7ff fe56 	bl	80169f0 <etharp_find_entry>
 8016d44:	4603      	mov	r3, r0
 8016d46:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016d48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	da02      	bge.n	8016d56 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016d50:	8afb      	ldrh	r3, [r7, #22]
 8016d52:	b25b      	sxtb	r3, r3
 8016d54:	e05d      	b.n	8016e12 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016d56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d5a:	4933      	ldr	r1, [pc, #204]	@ (8016e28 <etharp_update_arp_entry+0x148>)
 8016d5c:	4613      	mov	r3, r2
 8016d5e:	005b      	lsls	r3, r3, #1
 8016d60:	4413      	add	r3, r2
 8016d62:	00db      	lsls	r3, r3, #3
 8016d64:	440b      	add	r3, r1
 8016d66:	3314      	adds	r3, #20
 8016d68:	2202      	movs	r2, #2
 8016d6a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016d6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d70:	492d      	ldr	r1, [pc, #180]	@ (8016e28 <etharp_update_arp_entry+0x148>)
 8016d72:	4613      	mov	r3, r2
 8016d74:	005b      	lsls	r3, r3, #1
 8016d76:	4413      	add	r3, r2
 8016d78:	00db      	lsls	r3, r3, #3
 8016d7a:	440b      	add	r3, r1
 8016d7c:	3308      	adds	r3, #8
 8016d7e:	68fa      	ldr	r2, [r7, #12]
 8016d80:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016d82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d86:	4613      	mov	r3, r2
 8016d88:	005b      	lsls	r3, r3, #1
 8016d8a:	4413      	add	r3, r2
 8016d8c:	00db      	lsls	r3, r3, #3
 8016d8e:	3308      	adds	r3, #8
 8016d90:	4a25      	ldr	r2, [pc, #148]	@ (8016e28 <etharp_update_arp_entry+0x148>)
 8016d92:	4413      	add	r3, r2
 8016d94:	3304      	adds	r3, #4
 8016d96:	2206      	movs	r2, #6
 8016d98:	6879      	ldr	r1, [r7, #4]
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f002 fb07 	bl	80193ae <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016da0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016da4:	4920      	ldr	r1, [pc, #128]	@ (8016e28 <etharp_update_arp_entry+0x148>)
 8016da6:	4613      	mov	r3, r2
 8016da8:	005b      	lsls	r3, r3, #1
 8016daa:	4413      	add	r3, r2
 8016dac:	00db      	lsls	r3, r3, #3
 8016dae:	440b      	add	r3, r1
 8016db0:	3312      	adds	r3, #18
 8016db2:	2200      	movs	r2, #0
 8016db4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016db6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016dba:	491b      	ldr	r1, [pc, #108]	@ (8016e28 <etharp_update_arp_entry+0x148>)
 8016dbc:	4613      	mov	r3, r2
 8016dbe:	005b      	lsls	r3, r3, #1
 8016dc0:	4413      	add	r3, r2
 8016dc2:	00db      	lsls	r3, r3, #3
 8016dc4:	440b      	add	r3, r1
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d021      	beq.n	8016e10 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016dcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016dd0:	4915      	ldr	r1, [pc, #84]	@ (8016e28 <etharp_update_arp_entry+0x148>)
 8016dd2:	4613      	mov	r3, r2
 8016dd4:	005b      	lsls	r3, r3, #1
 8016dd6:	4413      	add	r3, r2
 8016dd8:	00db      	lsls	r3, r3, #3
 8016dda:	440b      	add	r3, r1
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016de0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016de4:	4910      	ldr	r1, [pc, #64]	@ (8016e28 <etharp_update_arp_entry+0x148>)
 8016de6:	4613      	mov	r3, r2
 8016de8:	005b      	lsls	r3, r3, #1
 8016dea:	4413      	add	r3, r2
 8016dec:	00db      	lsls	r3, r3, #3
 8016dee:	440b      	add	r3, r1
 8016df0:	2200      	movs	r2, #0
 8016df2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8016dfa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016dfe:	9300      	str	r3, [sp, #0]
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	6939      	ldr	r1, [r7, #16]
 8016e04:	68f8      	ldr	r0, [r7, #12]
 8016e06:	f001 ffbd 	bl	8018d84 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016e0a:	6938      	ldr	r0, [r7, #16]
 8016e0c:	f7f9 fdf0 	bl	80109f0 <pbuf_free>
  }
  return ERR_OK;
 8016e10:	2300      	movs	r3, #0
}
 8016e12:	4618      	mov	r0, r3
 8016e14:	3718      	adds	r7, #24
 8016e16:	46bd      	mov	sp, r7
 8016e18:	bd80      	pop	{r7, pc}
 8016e1a:	bf00      	nop
 8016e1c:	0801c48c 	.word	0x0801c48c
 8016e20:	0801c584 	.word	0x0801c584
 8016e24:	0801c504 	.word	0x0801c504
 8016e28:	20060bec 	.word	0x20060bec

08016e2c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b084      	sub	sp, #16
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e34:	2300      	movs	r3, #0
 8016e36:	60fb      	str	r3, [r7, #12]
 8016e38:	e01e      	b.n	8016e78 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016e3a:	4913      	ldr	r1, [pc, #76]	@ (8016e88 <etharp_cleanup_netif+0x5c>)
 8016e3c:	68fa      	ldr	r2, [r7, #12]
 8016e3e:	4613      	mov	r3, r2
 8016e40:	005b      	lsls	r3, r3, #1
 8016e42:	4413      	add	r3, r2
 8016e44:	00db      	lsls	r3, r3, #3
 8016e46:	440b      	add	r3, r1
 8016e48:	3314      	adds	r3, #20
 8016e4a:	781b      	ldrb	r3, [r3, #0]
 8016e4c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016e4e:	7afb      	ldrb	r3, [r7, #11]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d00e      	beq.n	8016e72 <etharp_cleanup_netif+0x46>
 8016e54:	490c      	ldr	r1, [pc, #48]	@ (8016e88 <etharp_cleanup_netif+0x5c>)
 8016e56:	68fa      	ldr	r2, [r7, #12]
 8016e58:	4613      	mov	r3, r2
 8016e5a:	005b      	lsls	r3, r3, #1
 8016e5c:	4413      	add	r3, r2
 8016e5e:	00db      	lsls	r3, r3, #3
 8016e60:	440b      	add	r3, r1
 8016e62:	3308      	adds	r3, #8
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	687a      	ldr	r2, [r7, #4]
 8016e68:	429a      	cmp	r2, r3
 8016e6a:	d102      	bne.n	8016e72 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016e6c:	68f8      	ldr	r0, [r7, #12]
 8016e6e:	f7ff fce5 	bl	801683c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	3301      	adds	r3, #1
 8016e76:	60fb      	str	r3, [r7, #12]
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	2b09      	cmp	r3, #9
 8016e7c:	dddd      	ble.n	8016e3a <etharp_cleanup_netif+0xe>
    }
  }
}
 8016e7e:	bf00      	nop
 8016e80:	bf00      	nop
 8016e82:	3710      	adds	r7, #16
 8016e84:	46bd      	mov	sp, r7
 8016e86:	bd80      	pop	{r7, pc}
 8016e88:	20060bec 	.word	0x20060bec

08016e8c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016e8c:	b5b0      	push	{r4, r5, r7, lr}
 8016e8e:	b08a      	sub	sp, #40	@ 0x28
 8016e90:	af04      	add	r7, sp, #16
 8016e92:	6078      	str	r0, [r7, #4]
 8016e94:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016e96:	683b      	ldr	r3, [r7, #0]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d107      	bne.n	8016eac <etharp_input+0x20>
 8016e9c:	4b3d      	ldr	r3, [pc, #244]	@ (8016f94 <etharp_input+0x108>)
 8016e9e:	f240 228a 	movw	r2, #650	@ 0x28a
 8016ea2:	493d      	ldr	r1, [pc, #244]	@ (8016f98 <etharp_input+0x10c>)
 8016ea4:	483d      	ldr	r0, [pc, #244]	@ (8016f9c <etharp_input+0x110>)
 8016ea6:	f002 f9a7 	bl	80191f8 <iprintf>
 8016eaa:	e06f      	b.n	8016f8c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	685b      	ldr	r3, [r3, #4]
 8016eb0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016eb2:	693b      	ldr	r3, [r7, #16]
 8016eb4:	881b      	ldrh	r3, [r3, #0]
 8016eb6:	b29b      	uxth	r3, r3
 8016eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016ebc:	d10c      	bne.n	8016ed8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016ec2:	2b06      	cmp	r3, #6
 8016ec4:	d108      	bne.n	8016ed8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016ec6:	693b      	ldr	r3, [r7, #16]
 8016ec8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016eca:	2b04      	cmp	r3, #4
 8016ecc:	d104      	bne.n	8016ed8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016ece:	693b      	ldr	r3, [r7, #16]
 8016ed0:	885b      	ldrh	r3, [r3, #2]
 8016ed2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016ed4:	2b08      	cmp	r3, #8
 8016ed6:	d003      	beq.n	8016ee0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016ed8:	6878      	ldr	r0, [r7, #4]
 8016eda:	f7f9 fd89 	bl	80109f0 <pbuf_free>
    return;
 8016ede:	e055      	b.n	8016f8c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016ee0:	693b      	ldr	r3, [r7, #16]
 8016ee2:	330e      	adds	r3, #14
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016ee8:	693b      	ldr	r3, [r7, #16]
 8016eea:	3318      	adds	r3, #24
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016ef0:	683b      	ldr	r3, [r7, #0]
 8016ef2:	3304      	adds	r3, #4
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d102      	bne.n	8016f00 <etharp_input+0x74>
    for_us = 0;
 8016efa:	2300      	movs	r3, #0
 8016efc:	75fb      	strb	r3, [r7, #23]
 8016efe:	e009      	b.n	8016f14 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016f00:	68ba      	ldr	r2, [r7, #8]
 8016f02:	683b      	ldr	r3, [r7, #0]
 8016f04:	3304      	adds	r3, #4
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	429a      	cmp	r2, r3
 8016f0a:	bf0c      	ite	eq
 8016f0c:	2301      	moveq	r3, #1
 8016f0e:	2300      	movne	r3, #0
 8016f10:	b2db      	uxtb	r3, r3
 8016f12:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016f14:	693b      	ldr	r3, [r7, #16]
 8016f16:	f103 0208 	add.w	r2, r3, #8
 8016f1a:	7dfb      	ldrb	r3, [r7, #23]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d001      	beq.n	8016f24 <etharp_input+0x98>
 8016f20:	2301      	movs	r3, #1
 8016f22:	e000      	b.n	8016f26 <etharp_input+0x9a>
 8016f24:	2302      	movs	r3, #2
 8016f26:	f107 010c 	add.w	r1, r7, #12
 8016f2a:	6838      	ldr	r0, [r7, #0]
 8016f2c:	f7ff fed8 	bl	8016ce0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016f30:	693b      	ldr	r3, [r7, #16]
 8016f32:	88db      	ldrh	r3, [r3, #6]
 8016f34:	b29b      	uxth	r3, r3
 8016f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016f3a:	d003      	beq.n	8016f44 <etharp_input+0xb8>
 8016f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016f40:	d01e      	beq.n	8016f80 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016f42:	e020      	b.n	8016f86 <etharp_input+0xfa>
      if (for_us) {
 8016f44:	7dfb      	ldrb	r3, [r7, #23]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d01c      	beq.n	8016f84 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016f4a:	683b      	ldr	r3, [r7, #0]
 8016f4c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8016f50:	693b      	ldr	r3, [r7, #16]
 8016f52:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016f56:	683b      	ldr	r3, [r7, #0]
 8016f58:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8016f5c:	683b      	ldr	r3, [r7, #0]
 8016f5e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016f60:	693a      	ldr	r2, [r7, #16]
 8016f62:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016f64:	2102      	movs	r1, #2
 8016f66:	9103      	str	r1, [sp, #12]
 8016f68:	f107 010c 	add.w	r1, r7, #12
 8016f6c:	9102      	str	r1, [sp, #8]
 8016f6e:	9201      	str	r2, [sp, #4]
 8016f70:	9300      	str	r3, [sp, #0]
 8016f72:	462b      	mov	r3, r5
 8016f74:	4622      	mov	r2, r4
 8016f76:	4601      	mov	r1, r0
 8016f78:	6838      	ldr	r0, [r7, #0]
 8016f7a:	f000 faeb 	bl	8017554 <etharp_raw>
      break;
 8016f7e:	e001      	b.n	8016f84 <etharp_input+0xf8>
      break;
 8016f80:	bf00      	nop
 8016f82:	e000      	b.n	8016f86 <etharp_input+0xfa>
      break;
 8016f84:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016f86:	6878      	ldr	r0, [r7, #4]
 8016f88:	f7f9 fd32 	bl	80109f0 <pbuf_free>
}
 8016f8c:	3718      	adds	r7, #24
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bdb0      	pop	{r4, r5, r7, pc}
 8016f92:	bf00      	nop
 8016f94:	0801c48c 	.word	0x0801c48c
 8016f98:	0801c5dc 	.word	0x0801c5dc
 8016f9c:	0801c504 	.word	0x0801c504

08016fa0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b086      	sub	sp, #24
 8016fa4:	af02      	add	r7, sp, #8
 8016fa6:	60f8      	str	r0, [r7, #12]
 8016fa8:	60b9      	str	r1, [r7, #8]
 8016faa:	4613      	mov	r3, r2
 8016fac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016fae:	79fa      	ldrb	r2, [r7, #7]
 8016fb0:	4944      	ldr	r1, [pc, #272]	@ (80170c4 <etharp_output_to_arp_index+0x124>)
 8016fb2:	4613      	mov	r3, r2
 8016fb4:	005b      	lsls	r3, r3, #1
 8016fb6:	4413      	add	r3, r2
 8016fb8:	00db      	lsls	r3, r3, #3
 8016fba:	440b      	add	r3, r1
 8016fbc:	3314      	adds	r3, #20
 8016fbe:	781b      	ldrb	r3, [r3, #0]
 8016fc0:	2b01      	cmp	r3, #1
 8016fc2:	d806      	bhi.n	8016fd2 <etharp_output_to_arp_index+0x32>
 8016fc4:	4b40      	ldr	r3, [pc, #256]	@ (80170c8 <etharp_output_to_arp_index+0x128>)
 8016fc6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016fca:	4940      	ldr	r1, [pc, #256]	@ (80170cc <etharp_output_to_arp_index+0x12c>)
 8016fcc:	4840      	ldr	r0, [pc, #256]	@ (80170d0 <etharp_output_to_arp_index+0x130>)
 8016fce:	f002 f913 	bl	80191f8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016fd2:	79fa      	ldrb	r2, [r7, #7]
 8016fd4:	493b      	ldr	r1, [pc, #236]	@ (80170c4 <etharp_output_to_arp_index+0x124>)
 8016fd6:	4613      	mov	r3, r2
 8016fd8:	005b      	lsls	r3, r3, #1
 8016fda:	4413      	add	r3, r2
 8016fdc:	00db      	lsls	r3, r3, #3
 8016fde:	440b      	add	r3, r1
 8016fe0:	3314      	adds	r3, #20
 8016fe2:	781b      	ldrb	r3, [r3, #0]
 8016fe4:	2b02      	cmp	r3, #2
 8016fe6:	d153      	bne.n	8017090 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016fe8:	79fa      	ldrb	r2, [r7, #7]
 8016fea:	4936      	ldr	r1, [pc, #216]	@ (80170c4 <etharp_output_to_arp_index+0x124>)
 8016fec:	4613      	mov	r3, r2
 8016fee:	005b      	lsls	r3, r3, #1
 8016ff0:	4413      	add	r3, r2
 8016ff2:	00db      	lsls	r3, r3, #3
 8016ff4:	440b      	add	r3, r1
 8016ff6:	3312      	adds	r3, #18
 8016ff8:	881b      	ldrh	r3, [r3, #0]
 8016ffa:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8016ffe:	d919      	bls.n	8017034 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017000:	79fa      	ldrb	r2, [r7, #7]
 8017002:	4613      	mov	r3, r2
 8017004:	005b      	lsls	r3, r3, #1
 8017006:	4413      	add	r3, r2
 8017008:	00db      	lsls	r3, r3, #3
 801700a:	4a2e      	ldr	r2, [pc, #184]	@ (80170c4 <etharp_output_to_arp_index+0x124>)
 801700c:	4413      	add	r3, r2
 801700e:	3304      	adds	r3, #4
 8017010:	4619      	mov	r1, r3
 8017012:	68f8      	ldr	r0, [r7, #12]
 8017014:	f000 fb4c 	bl	80176b0 <etharp_request>
 8017018:	4603      	mov	r3, r0
 801701a:	2b00      	cmp	r3, #0
 801701c:	d138      	bne.n	8017090 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801701e:	79fa      	ldrb	r2, [r7, #7]
 8017020:	4928      	ldr	r1, [pc, #160]	@ (80170c4 <etharp_output_to_arp_index+0x124>)
 8017022:	4613      	mov	r3, r2
 8017024:	005b      	lsls	r3, r3, #1
 8017026:	4413      	add	r3, r2
 8017028:	00db      	lsls	r3, r3, #3
 801702a:	440b      	add	r3, r1
 801702c:	3314      	adds	r3, #20
 801702e:	2203      	movs	r2, #3
 8017030:	701a      	strb	r2, [r3, #0]
 8017032:	e02d      	b.n	8017090 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017034:	79fa      	ldrb	r2, [r7, #7]
 8017036:	4923      	ldr	r1, [pc, #140]	@ (80170c4 <etharp_output_to_arp_index+0x124>)
 8017038:	4613      	mov	r3, r2
 801703a:	005b      	lsls	r3, r3, #1
 801703c:	4413      	add	r3, r2
 801703e:	00db      	lsls	r3, r3, #3
 8017040:	440b      	add	r3, r1
 8017042:	3312      	adds	r3, #18
 8017044:	881b      	ldrh	r3, [r3, #0]
 8017046:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801704a:	d321      	bcc.n	8017090 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801704c:	79fa      	ldrb	r2, [r7, #7]
 801704e:	4613      	mov	r3, r2
 8017050:	005b      	lsls	r3, r3, #1
 8017052:	4413      	add	r3, r2
 8017054:	00db      	lsls	r3, r3, #3
 8017056:	4a1b      	ldr	r2, [pc, #108]	@ (80170c4 <etharp_output_to_arp_index+0x124>)
 8017058:	4413      	add	r3, r2
 801705a:	1d19      	adds	r1, r3, #4
 801705c:	79fa      	ldrb	r2, [r7, #7]
 801705e:	4613      	mov	r3, r2
 8017060:	005b      	lsls	r3, r3, #1
 8017062:	4413      	add	r3, r2
 8017064:	00db      	lsls	r3, r3, #3
 8017066:	3308      	adds	r3, #8
 8017068:	4a16      	ldr	r2, [pc, #88]	@ (80170c4 <etharp_output_to_arp_index+0x124>)
 801706a:	4413      	add	r3, r2
 801706c:	3304      	adds	r3, #4
 801706e:	461a      	mov	r2, r3
 8017070:	68f8      	ldr	r0, [r7, #12]
 8017072:	f000 fafb 	bl	801766c <etharp_request_dst>
 8017076:	4603      	mov	r3, r0
 8017078:	2b00      	cmp	r3, #0
 801707a:	d109      	bne.n	8017090 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801707c:	79fa      	ldrb	r2, [r7, #7]
 801707e:	4911      	ldr	r1, [pc, #68]	@ (80170c4 <etharp_output_to_arp_index+0x124>)
 8017080:	4613      	mov	r3, r2
 8017082:	005b      	lsls	r3, r3, #1
 8017084:	4413      	add	r3, r2
 8017086:	00db      	lsls	r3, r3, #3
 8017088:	440b      	add	r3, r1
 801708a:	3314      	adds	r3, #20
 801708c:	2203      	movs	r2, #3
 801708e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8017096:	79fa      	ldrb	r2, [r7, #7]
 8017098:	4613      	mov	r3, r2
 801709a:	005b      	lsls	r3, r3, #1
 801709c:	4413      	add	r3, r2
 801709e:	00db      	lsls	r3, r3, #3
 80170a0:	3308      	adds	r3, #8
 80170a2:	4a08      	ldr	r2, [pc, #32]	@ (80170c4 <etharp_output_to_arp_index+0x124>)
 80170a4:	4413      	add	r3, r2
 80170a6:	3304      	adds	r3, #4
 80170a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80170ac:	9200      	str	r2, [sp, #0]
 80170ae:	460a      	mov	r2, r1
 80170b0:	68b9      	ldr	r1, [r7, #8]
 80170b2:	68f8      	ldr	r0, [r7, #12]
 80170b4:	f001 fe66 	bl	8018d84 <ethernet_output>
 80170b8:	4603      	mov	r3, r0
}
 80170ba:	4618      	mov	r0, r3
 80170bc:	3710      	adds	r7, #16
 80170be:	46bd      	mov	sp, r7
 80170c0:	bd80      	pop	{r7, pc}
 80170c2:	bf00      	nop
 80170c4:	20060bec 	.word	0x20060bec
 80170c8:	0801c48c 	.word	0x0801c48c
 80170cc:	0801c5fc 	.word	0x0801c5fc
 80170d0:	0801c504 	.word	0x0801c504

080170d4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80170d4:	b580      	push	{r7, lr}
 80170d6:	b08a      	sub	sp, #40	@ 0x28
 80170d8:	af02      	add	r7, sp, #8
 80170da:	60f8      	str	r0, [r7, #12]
 80170dc:	60b9      	str	r1, [r7, #8]
 80170de:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d106      	bne.n	80170f8 <etharp_output+0x24>
 80170ea:	4b73      	ldr	r3, [pc, #460]	@ (80172b8 <etharp_output+0x1e4>)
 80170ec:	f240 321e 	movw	r2, #798	@ 0x31e
 80170f0:	4972      	ldr	r1, [pc, #456]	@ (80172bc <etharp_output+0x1e8>)
 80170f2:	4873      	ldr	r0, [pc, #460]	@ (80172c0 <etharp_output+0x1ec>)
 80170f4:	f002 f880 	bl	80191f8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d106      	bne.n	801710c <etharp_output+0x38>
 80170fe:	4b6e      	ldr	r3, [pc, #440]	@ (80172b8 <etharp_output+0x1e4>)
 8017100:	f240 321f 	movw	r2, #799	@ 0x31f
 8017104:	496f      	ldr	r1, [pc, #444]	@ (80172c4 <etharp_output+0x1f0>)
 8017106:	486e      	ldr	r0, [pc, #440]	@ (80172c0 <etharp_output+0x1ec>)
 8017108:	f002 f876 	bl	80191f8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d106      	bne.n	8017120 <etharp_output+0x4c>
 8017112:	4b69      	ldr	r3, [pc, #420]	@ (80172b8 <etharp_output+0x1e4>)
 8017114:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8017118:	496b      	ldr	r1, [pc, #428]	@ (80172c8 <etharp_output+0x1f4>)
 801711a:	4869      	ldr	r0, [pc, #420]	@ (80172c0 <etharp_output+0x1ec>)
 801711c:	f002 f86c 	bl	80191f8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	68f9      	ldr	r1, [r7, #12]
 8017126:	4618      	mov	r0, r3
 8017128:	f000 ff1e 	bl	8017f68 <ip4_addr_isbroadcast_u32>
 801712c:	4603      	mov	r3, r0
 801712e:	2b00      	cmp	r3, #0
 8017130:	d002      	beq.n	8017138 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017132:	4b66      	ldr	r3, [pc, #408]	@ (80172cc <etharp_output+0x1f8>)
 8017134:	61fb      	str	r3, [r7, #28]
 8017136:	e0af      	b.n	8017298 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017140:	2be0      	cmp	r3, #224	@ 0xe0
 8017142:	d118      	bne.n	8017176 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017144:	2301      	movs	r3, #1
 8017146:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017148:	2300      	movs	r3, #0
 801714a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801714c:	235e      	movs	r3, #94	@ 0x5e
 801714e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	3301      	adds	r3, #1
 8017154:	781b      	ldrb	r3, [r3, #0]
 8017156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801715a:	b2db      	uxtb	r3, r3
 801715c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	3302      	adds	r3, #2
 8017162:	781b      	ldrb	r3, [r3, #0]
 8017164:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	3303      	adds	r3, #3
 801716a:	781b      	ldrb	r3, [r3, #0]
 801716c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801716e:	f107 0310 	add.w	r3, r7, #16
 8017172:	61fb      	str	r3, [r7, #28]
 8017174:	e090      	b.n	8017298 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	681a      	ldr	r2, [r3, #0]
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	3304      	adds	r3, #4
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	405a      	eors	r2, r3
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	3308      	adds	r3, #8
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	4013      	ands	r3, r2
 801718a:	2b00      	cmp	r3, #0
 801718c:	d012      	beq.n	80171b4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017194:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8017198:	4293      	cmp	r3, r2
 801719a:	d00b      	beq.n	80171b4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	330c      	adds	r3, #12
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d003      	beq.n	80171ae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	330c      	adds	r3, #12
 80171aa:	61bb      	str	r3, [r7, #24]
 80171ac:	e002      	b.n	80171b4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80171ae:	f06f 0303 	mvn.w	r3, #3
 80171b2:	e07d      	b.n	80172b0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80171b4:	4b46      	ldr	r3, [pc, #280]	@ (80172d0 <etharp_output+0x1fc>)
 80171b6:	781b      	ldrb	r3, [r3, #0]
 80171b8:	4619      	mov	r1, r3
 80171ba:	4a46      	ldr	r2, [pc, #280]	@ (80172d4 <etharp_output+0x200>)
 80171bc:	460b      	mov	r3, r1
 80171be:	005b      	lsls	r3, r3, #1
 80171c0:	440b      	add	r3, r1
 80171c2:	00db      	lsls	r3, r3, #3
 80171c4:	4413      	add	r3, r2
 80171c6:	3314      	adds	r3, #20
 80171c8:	781b      	ldrb	r3, [r3, #0]
 80171ca:	2b01      	cmp	r3, #1
 80171cc:	d925      	bls.n	801721a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80171ce:	4b40      	ldr	r3, [pc, #256]	@ (80172d0 <etharp_output+0x1fc>)
 80171d0:	781b      	ldrb	r3, [r3, #0]
 80171d2:	4619      	mov	r1, r3
 80171d4:	4a3f      	ldr	r2, [pc, #252]	@ (80172d4 <etharp_output+0x200>)
 80171d6:	460b      	mov	r3, r1
 80171d8:	005b      	lsls	r3, r3, #1
 80171da:	440b      	add	r3, r1
 80171dc:	00db      	lsls	r3, r3, #3
 80171de:	4413      	add	r3, r2
 80171e0:	3308      	adds	r3, #8
 80171e2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80171e4:	68fa      	ldr	r2, [r7, #12]
 80171e6:	429a      	cmp	r2, r3
 80171e8:	d117      	bne.n	801721a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80171ea:	69bb      	ldr	r3, [r7, #24]
 80171ec:	681a      	ldr	r2, [r3, #0]
 80171ee:	4b38      	ldr	r3, [pc, #224]	@ (80172d0 <etharp_output+0x1fc>)
 80171f0:	781b      	ldrb	r3, [r3, #0]
 80171f2:	4618      	mov	r0, r3
 80171f4:	4937      	ldr	r1, [pc, #220]	@ (80172d4 <etharp_output+0x200>)
 80171f6:	4603      	mov	r3, r0
 80171f8:	005b      	lsls	r3, r3, #1
 80171fa:	4403      	add	r3, r0
 80171fc:	00db      	lsls	r3, r3, #3
 80171fe:	440b      	add	r3, r1
 8017200:	3304      	adds	r3, #4
 8017202:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017204:	429a      	cmp	r2, r3
 8017206:	d108      	bne.n	801721a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017208:	4b31      	ldr	r3, [pc, #196]	@ (80172d0 <etharp_output+0x1fc>)
 801720a:	781b      	ldrb	r3, [r3, #0]
 801720c:	461a      	mov	r2, r3
 801720e:	68b9      	ldr	r1, [r7, #8]
 8017210:	68f8      	ldr	r0, [r7, #12]
 8017212:	f7ff fec5 	bl	8016fa0 <etharp_output_to_arp_index>
 8017216:	4603      	mov	r3, r0
 8017218:	e04a      	b.n	80172b0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801721a:	2300      	movs	r3, #0
 801721c:	75fb      	strb	r3, [r7, #23]
 801721e:	e031      	b.n	8017284 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017220:	7dfa      	ldrb	r2, [r7, #23]
 8017222:	492c      	ldr	r1, [pc, #176]	@ (80172d4 <etharp_output+0x200>)
 8017224:	4613      	mov	r3, r2
 8017226:	005b      	lsls	r3, r3, #1
 8017228:	4413      	add	r3, r2
 801722a:	00db      	lsls	r3, r3, #3
 801722c:	440b      	add	r3, r1
 801722e:	3314      	adds	r3, #20
 8017230:	781b      	ldrb	r3, [r3, #0]
 8017232:	2b01      	cmp	r3, #1
 8017234:	d923      	bls.n	801727e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017236:	7dfa      	ldrb	r2, [r7, #23]
 8017238:	4926      	ldr	r1, [pc, #152]	@ (80172d4 <etharp_output+0x200>)
 801723a:	4613      	mov	r3, r2
 801723c:	005b      	lsls	r3, r3, #1
 801723e:	4413      	add	r3, r2
 8017240:	00db      	lsls	r3, r3, #3
 8017242:	440b      	add	r3, r1
 8017244:	3308      	adds	r3, #8
 8017246:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017248:	68fa      	ldr	r2, [r7, #12]
 801724a:	429a      	cmp	r2, r3
 801724c:	d117      	bne.n	801727e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801724e:	69bb      	ldr	r3, [r7, #24]
 8017250:	6819      	ldr	r1, [r3, #0]
 8017252:	7dfa      	ldrb	r2, [r7, #23]
 8017254:	481f      	ldr	r0, [pc, #124]	@ (80172d4 <etharp_output+0x200>)
 8017256:	4613      	mov	r3, r2
 8017258:	005b      	lsls	r3, r3, #1
 801725a:	4413      	add	r3, r2
 801725c:	00db      	lsls	r3, r3, #3
 801725e:	4403      	add	r3, r0
 8017260:	3304      	adds	r3, #4
 8017262:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017264:	4299      	cmp	r1, r3
 8017266:	d10a      	bne.n	801727e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017268:	4a19      	ldr	r2, [pc, #100]	@ (80172d0 <etharp_output+0x1fc>)
 801726a:	7dfb      	ldrb	r3, [r7, #23]
 801726c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801726e:	7dfb      	ldrb	r3, [r7, #23]
 8017270:	461a      	mov	r2, r3
 8017272:	68b9      	ldr	r1, [r7, #8]
 8017274:	68f8      	ldr	r0, [r7, #12]
 8017276:	f7ff fe93 	bl	8016fa0 <etharp_output_to_arp_index>
 801727a:	4603      	mov	r3, r0
 801727c:	e018      	b.n	80172b0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801727e:	7dfb      	ldrb	r3, [r7, #23]
 8017280:	3301      	adds	r3, #1
 8017282:	75fb      	strb	r3, [r7, #23]
 8017284:	7dfb      	ldrb	r3, [r7, #23]
 8017286:	2b09      	cmp	r3, #9
 8017288:	d9ca      	bls.n	8017220 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801728a:	68ba      	ldr	r2, [r7, #8]
 801728c:	69b9      	ldr	r1, [r7, #24]
 801728e:	68f8      	ldr	r0, [r7, #12]
 8017290:	f000 f822 	bl	80172d8 <etharp_query>
 8017294:	4603      	mov	r3, r0
 8017296:	e00b      	b.n	80172b0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801729e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80172a2:	9300      	str	r3, [sp, #0]
 80172a4:	69fb      	ldr	r3, [r7, #28]
 80172a6:	68b9      	ldr	r1, [r7, #8]
 80172a8:	68f8      	ldr	r0, [r7, #12]
 80172aa:	f001 fd6b 	bl	8018d84 <ethernet_output>
 80172ae:	4603      	mov	r3, r0
}
 80172b0:	4618      	mov	r0, r3
 80172b2:	3720      	adds	r7, #32
 80172b4:	46bd      	mov	sp, r7
 80172b6:	bd80      	pop	{r7, pc}
 80172b8:	0801c48c 	.word	0x0801c48c
 80172bc:	0801c5dc 	.word	0x0801c5dc
 80172c0:	0801c504 	.word	0x0801c504
 80172c4:	0801c62c 	.word	0x0801c62c
 80172c8:	0801c5cc 	.word	0x0801c5cc
 80172cc:	0801ccd4 	.word	0x0801ccd4
 80172d0:	20060cdc 	.word	0x20060cdc
 80172d4:	20060bec 	.word	0x20060bec

080172d8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b08c      	sub	sp, #48	@ 0x30
 80172dc:	af02      	add	r7, sp, #8
 80172de:	60f8      	str	r0, [r7, #12]
 80172e0:	60b9      	str	r1, [r7, #8]
 80172e2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	3326      	adds	r3, #38	@ 0x26
 80172e8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80172ea:	23ff      	movs	r3, #255	@ 0xff
 80172ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80172f0:	2300      	movs	r3, #0
 80172f2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	68f9      	ldr	r1, [r7, #12]
 80172fa:	4618      	mov	r0, r3
 80172fc:	f000 fe34 	bl	8017f68 <ip4_addr_isbroadcast_u32>
 8017300:	4603      	mov	r3, r0
 8017302:	2b00      	cmp	r3, #0
 8017304:	d10c      	bne.n	8017320 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017306:	68bb      	ldr	r3, [r7, #8]
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801730e:	2be0      	cmp	r3, #224	@ 0xe0
 8017310:	d006      	beq.n	8017320 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017312:	68bb      	ldr	r3, [r7, #8]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d003      	beq.n	8017320 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017318:	68bb      	ldr	r3, [r7, #8]
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d102      	bne.n	8017326 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017320:	f06f 030f 	mvn.w	r3, #15
 8017324:	e101      	b.n	801752a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017326:	68fa      	ldr	r2, [r7, #12]
 8017328:	2101      	movs	r1, #1
 801732a:	68b8      	ldr	r0, [r7, #8]
 801732c:	f7ff fb60 	bl	80169f0 <etharp_find_entry>
 8017330:	4603      	mov	r3, r0
 8017332:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017334:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017338:	2b00      	cmp	r3, #0
 801733a:	da02      	bge.n	8017342 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801733c:	8a7b      	ldrh	r3, [r7, #18]
 801733e:	b25b      	sxtb	r3, r3
 8017340:	e0f3      	b.n	801752a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017342:	8a7b      	ldrh	r3, [r7, #18]
 8017344:	2b7e      	cmp	r3, #126	@ 0x7e
 8017346:	d906      	bls.n	8017356 <etharp_query+0x7e>
 8017348:	4b7a      	ldr	r3, [pc, #488]	@ (8017534 <etharp_query+0x25c>)
 801734a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801734e:	497a      	ldr	r1, [pc, #488]	@ (8017538 <etharp_query+0x260>)
 8017350:	487a      	ldr	r0, [pc, #488]	@ (801753c <etharp_query+0x264>)
 8017352:	f001 ff51 	bl	80191f8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017356:	8a7b      	ldrh	r3, [r7, #18]
 8017358:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801735a:	7c7a      	ldrb	r2, [r7, #17]
 801735c:	4978      	ldr	r1, [pc, #480]	@ (8017540 <etharp_query+0x268>)
 801735e:	4613      	mov	r3, r2
 8017360:	005b      	lsls	r3, r3, #1
 8017362:	4413      	add	r3, r2
 8017364:	00db      	lsls	r3, r3, #3
 8017366:	440b      	add	r3, r1
 8017368:	3314      	adds	r3, #20
 801736a:	781b      	ldrb	r3, [r3, #0]
 801736c:	2b00      	cmp	r3, #0
 801736e:	d115      	bne.n	801739c <etharp_query+0xc4>
    is_new_entry = 1;
 8017370:	2301      	movs	r3, #1
 8017372:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017374:	7c7a      	ldrb	r2, [r7, #17]
 8017376:	4972      	ldr	r1, [pc, #456]	@ (8017540 <etharp_query+0x268>)
 8017378:	4613      	mov	r3, r2
 801737a:	005b      	lsls	r3, r3, #1
 801737c:	4413      	add	r3, r2
 801737e:	00db      	lsls	r3, r3, #3
 8017380:	440b      	add	r3, r1
 8017382:	3314      	adds	r3, #20
 8017384:	2201      	movs	r2, #1
 8017386:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017388:	7c7a      	ldrb	r2, [r7, #17]
 801738a:	496d      	ldr	r1, [pc, #436]	@ (8017540 <etharp_query+0x268>)
 801738c:	4613      	mov	r3, r2
 801738e:	005b      	lsls	r3, r3, #1
 8017390:	4413      	add	r3, r2
 8017392:	00db      	lsls	r3, r3, #3
 8017394:	440b      	add	r3, r1
 8017396:	3308      	adds	r3, #8
 8017398:	68fa      	ldr	r2, [r7, #12]
 801739a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801739c:	7c7a      	ldrb	r2, [r7, #17]
 801739e:	4968      	ldr	r1, [pc, #416]	@ (8017540 <etharp_query+0x268>)
 80173a0:	4613      	mov	r3, r2
 80173a2:	005b      	lsls	r3, r3, #1
 80173a4:	4413      	add	r3, r2
 80173a6:	00db      	lsls	r3, r3, #3
 80173a8:	440b      	add	r3, r1
 80173aa:	3314      	adds	r3, #20
 80173ac:	781b      	ldrb	r3, [r3, #0]
 80173ae:	2b01      	cmp	r3, #1
 80173b0:	d011      	beq.n	80173d6 <etharp_query+0xfe>
 80173b2:	7c7a      	ldrb	r2, [r7, #17]
 80173b4:	4962      	ldr	r1, [pc, #392]	@ (8017540 <etharp_query+0x268>)
 80173b6:	4613      	mov	r3, r2
 80173b8:	005b      	lsls	r3, r3, #1
 80173ba:	4413      	add	r3, r2
 80173bc:	00db      	lsls	r3, r3, #3
 80173be:	440b      	add	r3, r1
 80173c0:	3314      	adds	r3, #20
 80173c2:	781b      	ldrb	r3, [r3, #0]
 80173c4:	2b01      	cmp	r3, #1
 80173c6:	d806      	bhi.n	80173d6 <etharp_query+0xfe>
 80173c8:	4b5a      	ldr	r3, [pc, #360]	@ (8017534 <etharp_query+0x25c>)
 80173ca:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80173ce:	495d      	ldr	r1, [pc, #372]	@ (8017544 <etharp_query+0x26c>)
 80173d0:	485a      	ldr	r0, [pc, #360]	@ (801753c <etharp_query+0x264>)
 80173d2:	f001 ff11 	bl	80191f8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80173d6:	6a3b      	ldr	r3, [r7, #32]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d102      	bne.n	80173e2 <etharp_query+0x10a>
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d10c      	bne.n	80173fc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80173e2:	68b9      	ldr	r1, [r7, #8]
 80173e4:	68f8      	ldr	r0, [r7, #12]
 80173e6:	f000 f963 	bl	80176b0 <etharp_request>
 80173ea:	4603      	mov	r3, r0
 80173ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d102      	bne.n	80173fc <etharp_query+0x124>
      return result;
 80173f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80173fa:	e096      	b.n	801752a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d106      	bne.n	8017410 <etharp_query+0x138>
 8017402:	4b4c      	ldr	r3, [pc, #304]	@ (8017534 <etharp_query+0x25c>)
 8017404:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8017408:	494f      	ldr	r1, [pc, #316]	@ (8017548 <etharp_query+0x270>)
 801740a:	484c      	ldr	r0, [pc, #304]	@ (801753c <etharp_query+0x264>)
 801740c:	f001 fef4 	bl	80191f8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017410:	7c7a      	ldrb	r2, [r7, #17]
 8017412:	494b      	ldr	r1, [pc, #300]	@ (8017540 <etharp_query+0x268>)
 8017414:	4613      	mov	r3, r2
 8017416:	005b      	lsls	r3, r3, #1
 8017418:	4413      	add	r3, r2
 801741a:	00db      	lsls	r3, r3, #3
 801741c:	440b      	add	r3, r1
 801741e:	3314      	adds	r3, #20
 8017420:	781b      	ldrb	r3, [r3, #0]
 8017422:	2b01      	cmp	r3, #1
 8017424:	d917      	bls.n	8017456 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017426:	4a49      	ldr	r2, [pc, #292]	@ (801754c <etharp_query+0x274>)
 8017428:	7c7b      	ldrb	r3, [r7, #17]
 801742a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801742c:	7c7a      	ldrb	r2, [r7, #17]
 801742e:	4613      	mov	r3, r2
 8017430:	005b      	lsls	r3, r3, #1
 8017432:	4413      	add	r3, r2
 8017434:	00db      	lsls	r3, r3, #3
 8017436:	3308      	adds	r3, #8
 8017438:	4a41      	ldr	r2, [pc, #260]	@ (8017540 <etharp_query+0x268>)
 801743a:	4413      	add	r3, r2
 801743c:	3304      	adds	r3, #4
 801743e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017442:	9200      	str	r2, [sp, #0]
 8017444:	697a      	ldr	r2, [r7, #20]
 8017446:	6879      	ldr	r1, [r7, #4]
 8017448:	68f8      	ldr	r0, [r7, #12]
 801744a:	f001 fc9b 	bl	8018d84 <ethernet_output>
 801744e:	4603      	mov	r3, r0
 8017450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017454:	e067      	b.n	8017526 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017456:	7c7a      	ldrb	r2, [r7, #17]
 8017458:	4939      	ldr	r1, [pc, #228]	@ (8017540 <etharp_query+0x268>)
 801745a:	4613      	mov	r3, r2
 801745c:	005b      	lsls	r3, r3, #1
 801745e:	4413      	add	r3, r2
 8017460:	00db      	lsls	r3, r3, #3
 8017462:	440b      	add	r3, r1
 8017464:	3314      	adds	r3, #20
 8017466:	781b      	ldrb	r3, [r3, #0]
 8017468:	2b01      	cmp	r3, #1
 801746a:	d15c      	bne.n	8017526 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801746c:	2300      	movs	r3, #0
 801746e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017474:	e01c      	b.n	80174b0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017476:	69fb      	ldr	r3, [r7, #28]
 8017478:	895a      	ldrh	r2, [r3, #10]
 801747a:	69fb      	ldr	r3, [r7, #28]
 801747c:	891b      	ldrh	r3, [r3, #8]
 801747e:	429a      	cmp	r2, r3
 8017480:	d10a      	bne.n	8017498 <etharp_query+0x1c0>
 8017482:	69fb      	ldr	r3, [r7, #28]
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	2b00      	cmp	r3, #0
 8017488:	d006      	beq.n	8017498 <etharp_query+0x1c0>
 801748a:	4b2a      	ldr	r3, [pc, #168]	@ (8017534 <etharp_query+0x25c>)
 801748c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8017490:	492f      	ldr	r1, [pc, #188]	@ (8017550 <etharp_query+0x278>)
 8017492:	482a      	ldr	r0, [pc, #168]	@ (801753c <etharp_query+0x264>)
 8017494:	f001 feb0 	bl	80191f8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017498:	69fb      	ldr	r3, [r7, #28]
 801749a:	7b1b      	ldrb	r3, [r3, #12]
 801749c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d002      	beq.n	80174aa <etharp_query+0x1d2>
        copy_needed = 1;
 80174a4:	2301      	movs	r3, #1
 80174a6:	61bb      	str	r3, [r7, #24]
        break;
 80174a8:	e005      	b.n	80174b6 <etharp_query+0x1de>
      }
      p = p->next;
 80174aa:	69fb      	ldr	r3, [r7, #28]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	61fb      	str	r3, [r7, #28]
    while (p) {
 80174b0:	69fb      	ldr	r3, [r7, #28]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d1df      	bne.n	8017476 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80174b6:	69bb      	ldr	r3, [r7, #24]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d007      	beq.n	80174cc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80174bc:	687a      	ldr	r2, [r7, #4]
 80174be:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80174c2:	200e      	movs	r0, #14
 80174c4:	f7f9 fcfc 	bl	8010ec0 <pbuf_clone>
 80174c8:	61f8      	str	r0, [r7, #28]
 80174ca:	e004      	b.n	80174d6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80174d0:	69f8      	ldr	r0, [r7, #28]
 80174d2:	f7f9 fb33 	bl	8010b3c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80174d6:	69fb      	ldr	r3, [r7, #28]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d021      	beq.n	8017520 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80174dc:	7c7a      	ldrb	r2, [r7, #17]
 80174de:	4918      	ldr	r1, [pc, #96]	@ (8017540 <etharp_query+0x268>)
 80174e0:	4613      	mov	r3, r2
 80174e2:	005b      	lsls	r3, r3, #1
 80174e4:	4413      	add	r3, r2
 80174e6:	00db      	lsls	r3, r3, #3
 80174e8:	440b      	add	r3, r1
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d00a      	beq.n	8017506 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80174f0:	7c7a      	ldrb	r2, [r7, #17]
 80174f2:	4913      	ldr	r1, [pc, #76]	@ (8017540 <etharp_query+0x268>)
 80174f4:	4613      	mov	r3, r2
 80174f6:	005b      	lsls	r3, r3, #1
 80174f8:	4413      	add	r3, r2
 80174fa:	00db      	lsls	r3, r3, #3
 80174fc:	440b      	add	r3, r1
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	4618      	mov	r0, r3
 8017502:	f7f9 fa75 	bl	80109f0 <pbuf_free>
      }
      arp_table[i].q = p;
 8017506:	7c7a      	ldrb	r2, [r7, #17]
 8017508:	490d      	ldr	r1, [pc, #52]	@ (8017540 <etharp_query+0x268>)
 801750a:	4613      	mov	r3, r2
 801750c:	005b      	lsls	r3, r3, #1
 801750e:	4413      	add	r3, r2
 8017510:	00db      	lsls	r3, r3, #3
 8017512:	440b      	add	r3, r1
 8017514:	69fa      	ldr	r2, [r7, #28]
 8017516:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017518:	2300      	movs	r3, #0
 801751a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801751e:	e002      	b.n	8017526 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017520:	23ff      	movs	r3, #255	@ 0xff
 8017522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8017526:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801752a:	4618      	mov	r0, r3
 801752c:	3728      	adds	r7, #40	@ 0x28
 801752e:	46bd      	mov	sp, r7
 8017530:	bd80      	pop	{r7, pc}
 8017532:	bf00      	nop
 8017534:	0801c48c 	.word	0x0801c48c
 8017538:	0801c638 	.word	0x0801c638
 801753c:	0801c504 	.word	0x0801c504
 8017540:	20060bec 	.word	0x20060bec
 8017544:	0801c648 	.word	0x0801c648
 8017548:	0801c62c 	.word	0x0801c62c
 801754c:	20060cdc 	.word	0x20060cdc
 8017550:	0801c670 	.word	0x0801c670

08017554 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b08a      	sub	sp, #40	@ 0x28
 8017558:	af02      	add	r7, sp, #8
 801755a:	60f8      	str	r0, [r7, #12]
 801755c:	60b9      	str	r1, [r7, #8]
 801755e:	607a      	str	r2, [r7, #4]
 8017560:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017562:	2300      	movs	r3, #0
 8017564:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d106      	bne.n	801757a <etharp_raw+0x26>
 801756c:	4b3a      	ldr	r3, [pc, #232]	@ (8017658 <etharp_raw+0x104>)
 801756e:	f240 4257 	movw	r2, #1111	@ 0x457
 8017572:	493a      	ldr	r1, [pc, #232]	@ (801765c <etharp_raw+0x108>)
 8017574:	483a      	ldr	r0, [pc, #232]	@ (8017660 <etharp_raw+0x10c>)
 8017576:	f001 fe3f 	bl	80191f8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801757a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801757e:	211c      	movs	r1, #28
 8017580:	200e      	movs	r0, #14
 8017582:	f7f8 ff51 	bl	8010428 <pbuf_alloc>
 8017586:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017588:	69bb      	ldr	r3, [r7, #24]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d102      	bne.n	8017594 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801758e:	f04f 33ff 	mov.w	r3, #4294967295
 8017592:	e05d      	b.n	8017650 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017594:	69bb      	ldr	r3, [r7, #24]
 8017596:	895b      	ldrh	r3, [r3, #10]
 8017598:	2b1b      	cmp	r3, #27
 801759a:	d806      	bhi.n	80175aa <etharp_raw+0x56>
 801759c:	4b2e      	ldr	r3, [pc, #184]	@ (8017658 <etharp_raw+0x104>)
 801759e:	f240 4262 	movw	r2, #1122	@ 0x462
 80175a2:	4930      	ldr	r1, [pc, #192]	@ (8017664 <etharp_raw+0x110>)
 80175a4:	482e      	ldr	r0, [pc, #184]	@ (8017660 <etharp_raw+0x10c>)
 80175a6:	f001 fe27 	bl	80191f8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80175aa:	69bb      	ldr	r3, [r7, #24]
 80175ac:	685b      	ldr	r3, [r3, #4]
 80175ae:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80175b0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80175b2:	4618      	mov	r0, r3
 80175b4:	f7f7 fd72 	bl	800f09c <lwip_htons>
 80175b8:	4603      	mov	r3, r0
 80175ba:	461a      	mov	r2, r3
 80175bc:	697b      	ldr	r3, [r7, #20]
 80175be:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80175c6:	2b06      	cmp	r3, #6
 80175c8:	d006      	beq.n	80175d8 <etharp_raw+0x84>
 80175ca:	4b23      	ldr	r3, [pc, #140]	@ (8017658 <etharp_raw+0x104>)
 80175cc:	f240 4269 	movw	r2, #1129	@ 0x469
 80175d0:	4925      	ldr	r1, [pc, #148]	@ (8017668 <etharp_raw+0x114>)
 80175d2:	4823      	ldr	r0, [pc, #140]	@ (8017660 <etharp_raw+0x10c>)
 80175d4:	f001 fe10 	bl	80191f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80175d8:	697b      	ldr	r3, [r7, #20]
 80175da:	3308      	adds	r3, #8
 80175dc:	2206      	movs	r2, #6
 80175de:	6839      	ldr	r1, [r7, #0]
 80175e0:	4618      	mov	r0, r3
 80175e2:	f001 fee4 	bl	80193ae <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80175e6:	697b      	ldr	r3, [r7, #20]
 80175e8:	3312      	adds	r3, #18
 80175ea:	2206      	movs	r2, #6
 80175ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80175ee:	4618      	mov	r0, r3
 80175f0:	f001 fedd 	bl	80193ae <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80175f4:	697b      	ldr	r3, [r7, #20]
 80175f6:	330e      	adds	r3, #14
 80175f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80175fa:	6812      	ldr	r2, [r2, #0]
 80175fc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80175fe:	697b      	ldr	r3, [r7, #20]
 8017600:	3318      	adds	r3, #24
 8017602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017604:	6812      	ldr	r2, [r2, #0]
 8017606:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017608:	697b      	ldr	r3, [r7, #20]
 801760a:	2200      	movs	r2, #0
 801760c:	701a      	strb	r2, [r3, #0]
 801760e:	2200      	movs	r2, #0
 8017610:	f042 0201 	orr.w	r2, r2, #1
 8017614:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017616:	697b      	ldr	r3, [r7, #20]
 8017618:	2200      	movs	r2, #0
 801761a:	f042 0208 	orr.w	r2, r2, #8
 801761e:	709a      	strb	r2, [r3, #2]
 8017620:	2200      	movs	r2, #0
 8017622:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017624:	697b      	ldr	r3, [r7, #20]
 8017626:	2206      	movs	r2, #6
 8017628:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801762a:	697b      	ldr	r3, [r7, #20]
 801762c:	2204      	movs	r2, #4
 801762e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017630:	f640 0306 	movw	r3, #2054	@ 0x806
 8017634:	9300      	str	r3, [sp, #0]
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	68ba      	ldr	r2, [r7, #8]
 801763a:	69b9      	ldr	r1, [r7, #24]
 801763c:	68f8      	ldr	r0, [r7, #12]
 801763e:	f001 fba1 	bl	8018d84 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017642:	69b8      	ldr	r0, [r7, #24]
 8017644:	f7f9 f9d4 	bl	80109f0 <pbuf_free>
  p = NULL;
 8017648:	2300      	movs	r3, #0
 801764a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801764c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017650:	4618      	mov	r0, r3
 8017652:	3720      	adds	r7, #32
 8017654:	46bd      	mov	sp, r7
 8017656:	bd80      	pop	{r7, pc}
 8017658:	0801c48c 	.word	0x0801c48c
 801765c:	0801c5dc 	.word	0x0801c5dc
 8017660:	0801c504 	.word	0x0801c504
 8017664:	0801c68c 	.word	0x0801c68c
 8017668:	0801c6c0 	.word	0x0801c6c0

0801766c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b088      	sub	sp, #32
 8017670:	af04      	add	r7, sp, #16
 8017672:	60f8      	str	r0, [r7, #12]
 8017674:	60b9      	str	r1, [r7, #8]
 8017676:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017688:	2201      	movs	r2, #1
 801768a:	9203      	str	r2, [sp, #12]
 801768c:	68ba      	ldr	r2, [r7, #8]
 801768e:	9202      	str	r2, [sp, #8]
 8017690:	4a06      	ldr	r2, [pc, #24]	@ (80176ac <etharp_request_dst+0x40>)
 8017692:	9201      	str	r2, [sp, #4]
 8017694:	9300      	str	r3, [sp, #0]
 8017696:	4603      	mov	r3, r0
 8017698:	687a      	ldr	r2, [r7, #4]
 801769a:	68f8      	ldr	r0, [r7, #12]
 801769c:	f7ff ff5a 	bl	8017554 <etharp_raw>
 80176a0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80176a2:	4618      	mov	r0, r3
 80176a4:	3710      	adds	r7, #16
 80176a6:	46bd      	mov	sp, r7
 80176a8:	bd80      	pop	{r7, pc}
 80176aa:	bf00      	nop
 80176ac:	0801ccdc 	.word	0x0801ccdc

080176b0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b082      	sub	sp, #8
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
 80176b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80176ba:	4a05      	ldr	r2, [pc, #20]	@ (80176d0 <etharp_request+0x20>)
 80176bc:	6839      	ldr	r1, [r7, #0]
 80176be:	6878      	ldr	r0, [r7, #4]
 80176c0:	f7ff ffd4 	bl	801766c <etharp_request_dst>
 80176c4:	4603      	mov	r3, r0
}
 80176c6:	4618      	mov	r0, r3
 80176c8:	3708      	adds	r7, #8
 80176ca:	46bd      	mov	sp, r7
 80176cc:	bd80      	pop	{r7, pc}
 80176ce:	bf00      	nop
 80176d0:	0801ccd4 	.word	0x0801ccd4

080176d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b08e      	sub	sp, #56	@ 0x38
 80176d8:	af04      	add	r7, sp, #16
 80176da:	6078      	str	r0, [r7, #4]
 80176dc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80176de:	4b87      	ldr	r3, [pc, #540]	@ (80178fc <icmp_input+0x228>)
 80176e0:	689b      	ldr	r3, [r3, #8]
 80176e2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80176e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176e6:	781b      	ldrb	r3, [r3, #0]
 80176e8:	f003 030f 	and.w	r3, r3, #15
 80176ec:	b2db      	uxtb	r3, r3
 80176ee:	009b      	lsls	r3, r3, #2
 80176f0:	b2db      	uxtb	r3, r3
 80176f2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80176f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80176f6:	2b13      	cmp	r3, #19
 80176f8:	f240 80e8 	bls.w	80178cc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	895b      	ldrh	r3, [r3, #10]
 8017700:	2b03      	cmp	r3, #3
 8017702:	f240 80e5 	bls.w	80178d0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	685b      	ldr	r3, [r3, #4]
 801770a:	781b      	ldrb	r3, [r3, #0]
 801770c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017710:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8017714:	2b00      	cmp	r3, #0
 8017716:	f000 80d2 	beq.w	80178be <icmp_input+0x1ea>
 801771a:	2b08      	cmp	r3, #8
 801771c:	f040 80d2 	bne.w	80178c4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017720:	4b77      	ldr	r3, [pc, #476]	@ (8017900 <icmp_input+0x22c>)
 8017722:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017724:	4b75      	ldr	r3, [pc, #468]	@ (80178fc <icmp_input+0x228>)
 8017726:	695b      	ldr	r3, [r3, #20]
 8017728:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801772c:	2be0      	cmp	r3, #224	@ 0xe0
 801772e:	f000 80d6 	beq.w	80178de <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017732:	4b72      	ldr	r3, [pc, #456]	@ (80178fc <icmp_input+0x228>)
 8017734:	695b      	ldr	r3, [r3, #20]
 8017736:	4a71      	ldr	r2, [pc, #452]	@ (80178fc <icmp_input+0x228>)
 8017738:	6812      	ldr	r2, [r2, #0]
 801773a:	4611      	mov	r1, r2
 801773c:	4618      	mov	r0, r3
 801773e:	f000 fc13 	bl	8017f68 <ip4_addr_isbroadcast_u32>
 8017742:	4603      	mov	r3, r0
 8017744:	2b00      	cmp	r3, #0
 8017746:	f040 80cc 	bne.w	80178e2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	891b      	ldrh	r3, [r3, #8]
 801774e:	2b07      	cmp	r3, #7
 8017750:	f240 80c0 	bls.w	80178d4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8017754:	6878      	ldr	r0, [r7, #4]
 8017756:	f7f7 fd3e 	bl	800f1d6 <inet_chksum_pbuf>
 801775a:	4603      	mov	r3, r0
 801775c:	2b00      	cmp	r3, #0
 801775e:	d003      	beq.n	8017768 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8017760:	6878      	ldr	r0, [r7, #4]
 8017762:	f7f9 f945 	bl	80109f0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8017766:	e0c5      	b.n	80178f4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017768:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801776a:	330e      	adds	r3, #14
 801776c:	4619      	mov	r1, r3
 801776e:	6878      	ldr	r0, [r7, #4]
 8017770:	f7f9 f8a8 	bl	80108c4 <pbuf_add_header>
 8017774:	4603      	mov	r3, r0
 8017776:	2b00      	cmp	r3, #0
 8017778:	d04b      	beq.n	8017812 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	891a      	ldrh	r2, [r3, #8]
 801777e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017780:	4413      	add	r3, r2
 8017782:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	891b      	ldrh	r3, [r3, #8]
 8017788:	8b7a      	ldrh	r2, [r7, #26]
 801778a:	429a      	cmp	r2, r3
 801778c:	f0c0 80ab 	bcc.w	80178e6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017790:	8b7b      	ldrh	r3, [r7, #26]
 8017792:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017796:	4619      	mov	r1, r3
 8017798:	200e      	movs	r0, #14
 801779a:	f7f8 fe45 	bl	8010428 <pbuf_alloc>
 801779e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80177a0:	697b      	ldr	r3, [r7, #20]
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	f000 80a1 	beq.w	80178ea <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80177a8:	697b      	ldr	r3, [r7, #20]
 80177aa:	895b      	ldrh	r3, [r3, #10]
 80177ac:	461a      	mov	r2, r3
 80177ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80177b0:	3308      	adds	r3, #8
 80177b2:	429a      	cmp	r2, r3
 80177b4:	d203      	bcs.n	80177be <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80177b6:	6978      	ldr	r0, [r7, #20]
 80177b8:	f7f9 f91a 	bl	80109f0 <pbuf_free>
          goto icmperr;
 80177bc:	e096      	b.n	80178ec <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80177be:	697b      	ldr	r3, [r7, #20]
 80177c0:	685b      	ldr	r3, [r3, #4]
 80177c2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80177c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80177c6:	4618      	mov	r0, r3
 80177c8:	f001 fdf1 	bl	80193ae <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80177cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80177ce:	4619      	mov	r1, r3
 80177d0:	6978      	ldr	r0, [r7, #20]
 80177d2:	f7f9 f887 	bl	80108e4 <pbuf_remove_header>
 80177d6:	4603      	mov	r3, r0
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d009      	beq.n	80177f0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80177dc:	4b49      	ldr	r3, [pc, #292]	@ (8017904 <icmp_input+0x230>)
 80177de:	22b6      	movs	r2, #182	@ 0xb6
 80177e0:	4949      	ldr	r1, [pc, #292]	@ (8017908 <icmp_input+0x234>)
 80177e2:	484a      	ldr	r0, [pc, #296]	@ (801790c <icmp_input+0x238>)
 80177e4:	f001 fd08 	bl	80191f8 <iprintf>
          pbuf_free(r);
 80177e8:	6978      	ldr	r0, [r7, #20]
 80177ea:	f7f9 f901 	bl	80109f0 <pbuf_free>
          goto icmperr;
 80177ee:	e07d      	b.n	80178ec <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80177f0:	6879      	ldr	r1, [r7, #4]
 80177f2:	6978      	ldr	r0, [r7, #20]
 80177f4:	f7f9 fa20 	bl	8010c38 <pbuf_copy>
 80177f8:	4603      	mov	r3, r0
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d003      	beq.n	8017806 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80177fe:	6978      	ldr	r0, [r7, #20]
 8017800:	f7f9 f8f6 	bl	80109f0 <pbuf_free>
          goto icmperr;
 8017804:	e072      	b.n	80178ec <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8017806:	6878      	ldr	r0, [r7, #4]
 8017808:	f7f9 f8f2 	bl	80109f0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801780c:	697b      	ldr	r3, [r7, #20]
 801780e:	607b      	str	r3, [r7, #4]
 8017810:	e00f      	b.n	8017832 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017812:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017814:	330e      	adds	r3, #14
 8017816:	4619      	mov	r1, r3
 8017818:	6878      	ldr	r0, [r7, #4]
 801781a:	f7f9 f863 	bl	80108e4 <pbuf_remove_header>
 801781e:	4603      	mov	r3, r0
 8017820:	2b00      	cmp	r3, #0
 8017822:	d006      	beq.n	8017832 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017824:	4b37      	ldr	r3, [pc, #220]	@ (8017904 <icmp_input+0x230>)
 8017826:	22c7      	movs	r2, #199	@ 0xc7
 8017828:	4939      	ldr	r1, [pc, #228]	@ (8017910 <icmp_input+0x23c>)
 801782a:	4838      	ldr	r0, [pc, #224]	@ (801790c <icmp_input+0x238>)
 801782c:	f001 fce4 	bl	80191f8 <iprintf>
          goto icmperr;
 8017830:	e05c      	b.n	80178ec <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	685b      	ldr	r3, [r3, #4]
 8017836:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017838:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801783a:	4619      	mov	r1, r3
 801783c:	6878      	ldr	r0, [r7, #4]
 801783e:	f7f9 f841 	bl	80108c4 <pbuf_add_header>
 8017842:	4603      	mov	r3, r0
 8017844:	2b00      	cmp	r3, #0
 8017846:	d13c      	bne.n	80178c2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	685b      	ldr	r3, [r3, #4]
 801784c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801784e:	69fb      	ldr	r3, [r7, #28]
 8017850:	681a      	ldr	r2, [r3, #0]
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017856:	4b29      	ldr	r3, [pc, #164]	@ (80178fc <icmp_input+0x228>)
 8017858:	691a      	ldr	r2, [r3, #16]
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801785e:	693b      	ldr	r3, [r7, #16]
 8017860:	2200      	movs	r2, #0
 8017862:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017864:	693b      	ldr	r3, [r7, #16]
 8017866:	885b      	ldrh	r3, [r3, #2]
 8017868:	b29b      	uxth	r3, r3
 801786a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801786e:	4293      	cmp	r3, r2
 8017870:	d907      	bls.n	8017882 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017872:	693b      	ldr	r3, [r7, #16]
 8017874:	885b      	ldrh	r3, [r3, #2]
 8017876:	b29b      	uxth	r3, r3
 8017878:	3309      	adds	r3, #9
 801787a:	b29a      	uxth	r2, r3
 801787c:	693b      	ldr	r3, [r7, #16]
 801787e:	805a      	strh	r2, [r3, #2]
 8017880:	e006      	b.n	8017890 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017882:	693b      	ldr	r3, [r7, #16]
 8017884:	885b      	ldrh	r3, [r3, #2]
 8017886:	b29b      	uxth	r3, r3
 8017888:	3308      	adds	r3, #8
 801788a:	b29a      	uxth	r2, r3
 801788c:	693b      	ldr	r3, [r7, #16]
 801788e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	22ff      	movs	r2, #255	@ 0xff
 8017894:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	2200      	movs	r2, #0
 801789a:	729a      	strb	r2, [r3, #10]
 801789c:	2200      	movs	r2, #0
 801789e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80178a0:	683b      	ldr	r3, [r7, #0]
 80178a2:	9302      	str	r3, [sp, #8]
 80178a4:	2301      	movs	r3, #1
 80178a6:	9301      	str	r3, [sp, #4]
 80178a8:	2300      	movs	r3, #0
 80178aa:	9300      	str	r3, [sp, #0]
 80178ac:	23ff      	movs	r3, #255	@ 0xff
 80178ae:	2200      	movs	r2, #0
 80178b0:	69f9      	ldr	r1, [r7, #28]
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f000 fa80 	bl	8017db8 <ip4_output_if>
 80178b8:	4603      	mov	r3, r0
 80178ba:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80178bc:	e001      	b.n	80178c2 <icmp_input+0x1ee>
      break;
 80178be:	bf00      	nop
 80178c0:	e000      	b.n	80178c4 <icmp_input+0x1f0>
      break;
 80178c2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80178c4:	6878      	ldr	r0, [r7, #4]
 80178c6:	f7f9 f893 	bl	80109f0 <pbuf_free>
  return;
 80178ca:	e013      	b.n	80178f4 <icmp_input+0x220>
    goto lenerr;
 80178cc:	bf00      	nop
 80178ce:	e002      	b.n	80178d6 <icmp_input+0x202>
    goto lenerr;
 80178d0:	bf00      	nop
 80178d2:	e000      	b.n	80178d6 <icmp_input+0x202>
        goto lenerr;
 80178d4:	bf00      	nop
lenerr:
  pbuf_free(p);
 80178d6:	6878      	ldr	r0, [r7, #4]
 80178d8:	f7f9 f88a 	bl	80109f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80178dc:	e00a      	b.n	80178f4 <icmp_input+0x220>
        goto icmperr;
 80178de:	bf00      	nop
 80178e0:	e004      	b.n	80178ec <icmp_input+0x218>
        goto icmperr;
 80178e2:	bf00      	nop
 80178e4:	e002      	b.n	80178ec <icmp_input+0x218>
          goto icmperr;
 80178e6:	bf00      	nop
 80178e8:	e000      	b.n	80178ec <icmp_input+0x218>
          goto icmperr;
 80178ea:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80178ec:	6878      	ldr	r0, [r7, #4]
 80178ee:	f7f9 f87f 	bl	80109f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80178f2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80178f4:	3728      	adds	r7, #40	@ 0x28
 80178f6:	46bd      	mov	sp, r7
 80178f8:	bd80      	pop	{r7, pc}
 80178fa:	bf00      	nop
 80178fc:	2005da8c 	.word	0x2005da8c
 8017900:	2005daa0 	.word	0x2005daa0
 8017904:	0801c704 	.word	0x0801c704
 8017908:	0801c73c 	.word	0x0801c73c
 801790c:	0801c774 	.word	0x0801c774
 8017910:	0801c79c 	.word	0x0801c79c

08017914 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017914:	b580      	push	{r7, lr}
 8017916:	b082      	sub	sp, #8
 8017918:	af00      	add	r7, sp, #0
 801791a:	6078      	str	r0, [r7, #4]
 801791c:	460b      	mov	r3, r1
 801791e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017920:	78fb      	ldrb	r3, [r7, #3]
 8017922:	461a      	mov	r2, r3
 8017924:	2103      	movs	r1, #3
 8017926:	6878      	ldr	r0, [r7, #4]
 8017928:	f000 f814 	bl	8017954 <icmp_send_response>
}
 801792c:	bf00      	nop
 801792e:	3708      	adds	r7, #8
 8017930:	46bd      	mov	sp, r7
 8017932:	bd80      	pop	{r7, pc}

08017934 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b082      	sub	sp, #8
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
 801793c:	460b      	mov	r3, r1
 801793e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017940:	78fb      	ldrb	r3, [r7, #3]
 8017942:	461a      	mov	r2, r3
 8017944:	210b      	movs	r1, #11
 8017946:	6878      	ldr	r0, [r7, #4]
 8017948:	f000 f804 	bl	8017954 <icmp_send_response>
}
 801794c:	bf00      	nop
 801794e:	3708      	adds	r7, #8
 8017950:	46bd      	mov	sp, r7
 8017952:	bd80      	pop	{r7, pc}

08017954 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017954:	b580      	push	{r7, lr}
 8017956:	b08c      	sub	sp, #48	@ 0x30
 8017958:	af04      	add	r7, sp, #16
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	460b      	mov	r3, r1
 801795e:	70fb      	strb	r3, [r7, #3]
 8017960:	4613      	mov	r3, r2
 8017962:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017964:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017968:	2124      	movs	r1, #36	@ 0x24
 801796a:	2022      	movs	r0, #34	@ 0x22
 801796c:	f7f8 fd5c 	bl	8010428 <pbuf_alloc>
 8017970:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017972:	69fb      	ldr	r3, [r7, #28]
 8017974:	2b00      	cmp	r3, #0
 8017976:	d056      	beq.n	8017a26 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017978:	69fb      	ldr	r3, [r7, #28]
 801797a:	895b      	ldrh	r3, [r3, #10]
 801797c:	2b23      	cmp	r3, #35	@ 0x23
 801797e:	d806      	bhi.n	801798e <icmp_send_response+0x3a>
 8017980:	4b2b      	ldr	r3, [pc, #172]	@ (8017a30 <icmp_send_response+0xdc>)
 8017982:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8017986:	492b      	ldr	r1, [pc, #172]	@ (8017a34 <icmp_send_response+0xe0>)
 8017988:	482b      	ldr	r0, [pc, #172]	@ (8017a38 <icmp_send_response+0xe4>)
 801798a:	f001 fc35 	bl	80191f8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	685b      	ldr	r3, [r3, #4]
 8017992:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017994:	69fb      	ldr	r3, [r7, #28]
 8017996:	685b      	ldr	r3, [r3, #4]
 8017998:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801799a:	697b      	ldr	r3, [r7, #20]
 801799c:	78fa      	ldrb	r2, [r7, #3]
 801799e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80179a0:	697b      	ldr	r3, [r7, #20]
 80179a2:	78ba      	ldrb	r2, [r7, #2]
 80179a4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80179a6:	697b      	ldr	r3, [r7, #20]
 80179a8:	2200      	movs	r2, #0
 80179aa:	711a      	strb	r2, [r3, #4]
 80179ac:	2200      	movs	r2, #0
 80179ae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80179b0:	697b      	ldr	r3, [r7, #20]
 80179b2:	2200      	movs	r2, #0
 80179b4:	719a      	strb	r2, [r3, #6]
 80179b6:	2200      	movs	r2, #0
 80179b8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80179ba:	69fb      	ldr	r3, [r7, #28]
 80179bc:	685b      	ldr	r3, [r3, #4]
 80179be:	f103 0008 	add.w	r0, r3, #8
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	685b      	ldr	r3, [r3, #4]
 80179c6:	221c      	movs	r2, #28
 80179c8:	4619      	mov	r1, r3
 80179ca:	f001 fcf0 	bl	80193ae <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80179ce:	69bb      	ldr	r3, [r7, #24]
 80179d0:	68db      	ldr	r3, [r3, #12]
 80179d2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80179d4:	f107 030c 	add.w	r3, r7, #12
 80179d8:	4618      	mov	r0, r3
 80179da:	f000 f82f 	bl	8017a3c <ip4_route>
 80179de:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80179e0:	693b      	ldr	r3, [r7, #16]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d01b      	beq.n	8017a1e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80179e6:	697b      	ldr	r3, [r7, #20]
 80179e8:	2200      	movs	r2, #0
 80179ea:	709a      	strb	r2, [r3, #2]
 80179ec:	2200      	movs	r2, #0
 80179ee:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80179f0:	69fb      	ldr	r3, [r7, #28]
 80179f2:	895b      	ldrh	r3, [r3, #10]
 80179f4:	4619      	mov	r1, r3
 80179f6:	6978      	ldr	r0, [r7, #20]
 80179f8:	f7f7 fbdb 	bl	800f1b2 <inet_chksum>
 80179fc:	4603      	mov	r3, r0
 80179fe:	461a      	mov	r2, r3
 8017a00:	697b      	ldr	r3, [r7, #20]
 8017a02:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017a04:	f107 020c 	add.w	r2, r7, #12
 8017a08:	693b      	ldr	r3, [r7, #16]
 8017a0a:	9302      	str	r3, [sp, #8]
 8017a0c:	2301      	movs	r3, #1
 8017a0e:	9301      	str	r3, [sp, #4]
 8017a10:	2300      	movs	r3, #0
 8017a12:	9300      	str	r3, [sp, #0]
 8017a14:	23ff      	movs	r3, #255	@ 0xff
 8017a16:	2100      	movs	r1, #0
 8017a18:	69f8      	ldr	r0, [r7, #28]
 8017a1a:	f000 f9cd 	bl	8017db8 <ip4_output_if>
  }
  pbuf_free(q);
 8017a1e:	69f8      	ldr	r0, [r7, #28]
 8017a20:	f7f8 ffe6 	bl	80109f0 <pbuf_free>
 8017a24:	e000      	b.n	8017a28 <icmp_send_response+0xd4>
    return;
 8017a26:	bf00      	nop
}
 8017a28:	3720      	adds	r7, #32
 8017a2a:	46bd      	mov	sp, r7
 8017a2c:	bd80      	pop	{r7, pc}
 8017a2e:	bf00      	nop
 8017a30:	0801c704 	.word	0x0801c704
 8017a34:	0801c7d0 	.word	0x0801c7d0
 8017a38:	0801c774 	.word	0x0801c774

08017a3c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017a3c:	b480      	push	{r7}
 8017a3e:	b085      	sub	sp, #20
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017a44:	4b33      	ldr	r3, [pc, #204]	@ (8017b14 <ip4_route+0xd8>)
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	60fb      	str	r3, [r7, #12]
 8017a4a:	e036      	b.n	8017aba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017a52:	f003 0301 	and.w	r3, r3, #1
 8017a56:	b2db      	uxtb	r3, r3
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d02b      	beq.n	8017ab4 <ip4_route+0x78>
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017a62:	089b      	lsrs	r3, r3, #2
 8017a64:	f003 0301 	and.w	r3, r3, #1
 8017a68:	b2db      	uxtb	r3, r3
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d022      	beq.n	8017ab4 <ip4_route+0x78>
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	3304      	adds	r3, #4
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d01d      	beq.n	8017ab4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	681a      	ldr	r2, [r3, #0]
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	3304      	adds	r3, #4
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	405a      	eors	r2, r3
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	3308      	adds	r3, #8
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	4013      	ands	r3, r2
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d101      	bne.n	8017a94 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	e038      	b.n	8017b06 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017a9a:	f003 0302 	and.w	r3, r3, #2
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d108      	bne.n	8017ab4 <ip4_route+0x78>
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	681a      	ldr	r2, [r3, #0]
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	330c      	adds	r3, #12
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	429a      	cmp	r2, r3
 8017aae:	d101      	bne.n	8017ab4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	e028      	b.n	8017b06 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	60fb      	str	r3, [r7, #12]
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d1c5      	bne.n	8017a4c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017ac0:	4b15      	ldr	r3, [pc, #84]	@ (8017b18 <ip4_route+0xdc>)
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d01a      	beq.n	8017afe <ip4_route+0xc2>
 8017ac8:	4b13      	ldr	r3, [pc, #76]	@ (8017b18 <ip4_route+0xdc>)
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017ad0:	f003 0301 	and.w	r3, r3, #1
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d012      	beq.n	8017afe <ip4_route+0xc2>
 8017ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8017b18 <ip4_route+0xdc>)
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017ae0:	f003 0304 	and.w	r3, r3, #4
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d00a      	beq.n	8017afe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8017b18 <ip4_route+0xdc>)
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	3304      	adds	r3, #4
 8017aee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d004      	beq.n	8017afe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	b2db      	uxtb	r3, r3
 8017afa:	2b7f      	cmp	r3, #127	@ 0x7f
 8017afc:	d101      	bne.n	8017b02 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017afe:	2300      	movs	r3, #0
 8017b00:	e001      	b.n	8017b06 <ip4_route+0xca>
  }

  return netif_default;
 8017b02:	4b05      	ldr	r3, [pc, #20]	@ (8017b18 <ip4_route+0xdc>)
 8017b04:	681b      	ldr	r3, [r3, #0]
}
 8017b06:	4618      	mov	r0, r3
 8017b08:	3714      	adds	r7, #20
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b10:	4770      	bx	lr
 8017b12:	bf00      	nop
 8017b14:	20060b80 	.word	0x20060b80
 8017b18:	20060b84 	.word	0x20060b84

08017b1c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	b082      	sub	sp, #8
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017b2a:	f003 0301 	and.w	r3, r3, #1
 8017b2e:	b2db      	uxtb	r3, r3
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d016      	beq.n	8017b62 <ip4_input_accept+0x46>
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	3304      	adds	r3, #4
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d011      	beq.n	8017b62 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8017b6c <ip4_input_accept+0x50>)
 8017b40:	695a      	ldr	r2, [r3, #20]
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	3304      	adds	r3, #4
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	429a      	cmp	r2, r3
 8017b4a:	d008      	beq.n	8017b5e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017b4c:	4b07      	ldr	r3, [pc, #28]	@ (8017b6c <ip4_input_accept+0x50>)
 8017b4e:	695b      	ldr	r3, [r3, #20]
 8017b50:	6879      	ldr	r1, [r7, #4]
 8017b52:	4618      	mov	r0, r3
 8017b54:	f000 fa08 	bl	8017f68 <ip4_addr_isbroadcast_u32>
 8017b58:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d001      	beq.n	8017b62 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017b5e:	2301      	movs	r3, #1
 8017b60:	e000      	b.n	8017b64 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017b62:	2300      	movs	r3, #0
}
 8017b64:	4618      	mov	r0, r3
 8017b66:	3708      	adds	r7, #8
 8017b68:	46bd      	mov	sp, r7
 8017b6a:	bd80      	pop	{r7, pc}
 8017b6c:	2005da8c 	.word	0x2005da8c

08017b70 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b086      	sub	sp, #24
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	6078      	str	r0, [r7, #4]
 8017b78:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	685b      	ldr	r3, [r3, #4]
 8017b7e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017b80:	697b      	ldr	r3, [r7, #20]
 8017b82:	781b      	ldrb	r3, [r3, #0]
 8017b84:	091b      	lsrs	r3, r3, #4
 8017b86:	b2db      	uxtb	r3, r3
 8017b88:	2b04      	cmp	r3, #4
 8017b8a:	d004      	beq.n	8017b96 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017b8c:	6878      	ldr	r0, [r7, #4]
 8017b8e:	f7f8 ff2f 	bl	80109f0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017b92:	2300      	movs	r3, #0
 8017b94:	e107      	b.n	8017da6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017b96:	697b      	ldr	r3, [r7, #20]
 8017b98:	781b      	ldrb	r3, [r3, #0]
 8017b9a:	f003 030f 	and.w	r3, r3, #15
 8017b9e:	b2db      	uxtb	r3, r3
 8017ba0:	009b      	lsls	r3, r3, #2
 8017ba2:	b2db      	uxtb	r3, r3
 8017ba4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017ba6:	697b      	ldr	r3, [r7, #20]
 8017ba8:	885b      	ldrh	r3, [r3, #2]
 8017baa:	b29b      	uxth	r3, r3
 8017bac:	4618      	mov	r0, r3
 8017bae:	f7f7 fa75 	bl	800f09c <lwip_htons>
 8017bb2:	4603      	mov	r3, r0
 8017bb4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	891b      	ldrh	r3, [r3, #8]
 8017bba:	89ba      	ldrh	r2, [r7, #12]
 8017bbc:	429a      	cmp	r2, r3
 8017bbe:	d204      	bcs.n	8017bca <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017bc0:	89bb      	ldrh	r3, [r7, #12]
 8017bc2:	4619      	mov	r1, r3
 8017bc4:	6878      	ldr	r0, [r7, #4]
 8017bc6:	f7f8 fd8d 	bl	80106e4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	895b      	ldrh	r3, [r3, #10]
 8017bce:	89fa      	ldrh	r2, [r7, #14]
 8017bd0:	429a      	cmp	r2, r3
 8017bd2:	d807      	bhi.n	8017be4 <ip4_input+0x74>
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	891b      	ldrh	r3, [r3, #8]
 8017bd8:	89ba      	ldrh	r2, [r7, #12]
 8017bda:	429a      	cmp	r2, r3
 8017bdc:	d802      	bhi.n	8017be4 <ip4_input+0x74>
 8017bde:	89fb      	ldrh	r3, [r7, #14]
 8017be0:	2b13      	cmp	r3, #19
 8017be2:	d804      	bhi.n	8017bee <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017be4:	6878      	ldr	r0, [r7, #4]
 8017be6:	f7f8 ff03 	bl	80109f0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017bea:	2300      	movs	r3, #0
 8017bec:	e0db      	b.n	8017da6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017bee:	697b      	ldr	r3, [r7, #20]
 8017bf0:	691b      	ldr	r3, [r3, #16]
 8017bf2:	4a6f      	ldr	r2, [pc, #444]	@ (8017db0 <ip4_input+0x240>)
 8017bf4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017bf6:	697b      	ldr	r3, [r7, #20]
 8017bf8:	68db      	ldr	r3, [r3, #12]
 8017bfa:	4a6d      	ldr	r2, [pc, #436]	@ (8017db0 <ip4_input+0x240>)
 8017bfc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017bfe:	4b6c      	ldr	r3, [pc, #432]	@ (8017db0 <ip4_input+0x240>)
 8017c00:	695b      	ldr	r3, [r3, #20]
 8017c02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017c06:	2be0      	cmp	r3, #224	@ 0xe0
 8017c08:	d112      	bne.n	8017c30 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017c0a:	683b      	ldr	r3, [r7, #0]
 8017c0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017c10:	f003 0301 	and.w	r3, r3, #1
 8017c14:	b2db      	uxtb	r3, r3
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d007      	beq.n	8017c2a <ip4_input+0xba>
 8017c1a:	683b      	ldr	r3, [r7, #0]
 8017c1c:	3304      	adds	r3, #4
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d002      	beq.n	8017c2a <ip4_input+0xba>
      netif = inp;
 8017c24:	683b      	ldr	r3, [r7, #0]
 8017c26:	613b      	str	r3, [r7, #16]
 8017c28:	e02a      	b.n	8017c80 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	613b      	str	r3, [r7, #16]
 8017c2e:	e027      	b.n	8017c80 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017c30:	6838      	ldr	r0, [r7, #0]
 8017c32:	f7ff ff73 	bl	8017b1c <ip4_input_accept>
 8017c36:	4603      	mov	r3, r0
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d002      	beq.n	8017c42 <ip4_input+0xd2>
      netif = inp;
 8017c3c:	683b      	ldr	r3, [r7, #0]
 8017c3e:	613b      	str	r3, [r7, #16]
 8017c40:	e01e      	b.n	8017c80 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017c42:	2300      	movs	r3, #0
 8017c44:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017c46:	4b5a      	ldr	r3, [pc, #360]	@ (8017db0 <ip4_input+0x240>)
 8017c48:	695b      	ldr	r3, [r3, #20]
 8017c4a:	b2db      	uxtb	r3, r3
 8017c4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8017c4e:	d017      	beq.n	8017c80 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017c50:	4b58      	ldr	r3, [pc, #352]	@ (8017db4 <ip4_input+0x244>)
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	613b      	str	r3, [r7, #16]
 8017c56:	e00e      	b.n	8017c76 <ip4_input+0x106>
          if (netif == inp) {
 8017c58:	693a      	ldr	r2, [r7, #16]
 8017c5a:	683b      	ldr	r3, [r7, #0]
 8017c5c:	429a      	cmp	r2, r3
 8017c5e:	d006      	beq.n	8017c6e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017c60:	6938      	ldr	r0, [r7, #16]
 8017c62:	f7ff ff5b 	bl	8017b1c <ip4_input_accept>
 8017c66:	4603      	mov	r3, r0
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d108      	bne.n	8017c7e <ip4_input+0x10e>
 8017c6c:	e000      	b.n	8017c70 <ip4_input+0x100>
            continue;
 8017c6e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017c70:	693b      	ldr	r3, [r7, #16]
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	613b      	str	r3, [r7, #16]
 8017c76:	693b      	ldr	r3, [r7, #16]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d1ed      	bne.n	8017c58 <ip4_input+0xe8>
 8017c7c:	e000      	b.n	8017c80 <ip4_input+0x110>
            break;
 8017c7e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017c80:	4b4b      	ldr	r3, [pc, #300]	@ (8017db0 <ip4_input+0x240>)
 8017c82:	691b      	ldr	r3, [r3, #16]
 8017c84:	6839      	ldr	r1, [r7, #0]
 8017c86:	4618      	mov	r0, r3
 8017c88:	f000 f96e 	bl	8017f68 <ip4_addr_isbroadcast_u32>
 8017c8c:	4603      	mov	r3, r0
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d105      	bne.n	8017c9e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017c92:	4b47      	ldr	r3, [pc, #284]	@ (8017db0 <ip4_input+0x240>)
 8017c94:	691b      	ldr	r3, [r3, #16]
 8017c96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017c9a:	2be0      	cmp	r3, #224	@ 0xe0
 8017c9c:	d104      	bne.n	8017ca8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017c9e:	6878      	ldr	r0, [r7, #4]
 8017ca0:	f7f8 fea6 	bl	80109f0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	e07e      	b.n	8017da6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017ca8:	693b      	ldr	r3, [r7, #16]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d104      	bne.n	8017cb8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017cae:	6878      	ldr	r0, [r7, #4]
 8017cb0:	f7f8 fe9e 	bl	80109f0 <pbuf_free>
    return ERR_OK;
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	e076      	b.n	8017da6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017cb8:	697b      	ldr	r3, [r7, #20]
 8017cba:	88db      	ldrh	r3, [r3, #6]
 8017cbc:	b29b      	uxth	r3, r3
 8017cbe:	461a      	mov	r2, r3
 8017cc0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8017cc4:	4013      	ands	r3, r2
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d00b      	beq.n	8017ce2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017cca:	6878      	ldr	r0, [r7, #4]
 8017ccc:	f000 fc92 	bl	80185f4 <ip4_reass>
 8017cd0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d101      	bne.n	8017cdc <ip4_input+0x16c>
      return ERR_OK;
 8017cd8:	2300      	movs	r3, #0
 8017cda:	e064      	b.n	8017da6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	685b      	ldr	r3, [r3, #4]
 8017ce0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017ce2:	4a33      	ldr	r2, [pc, #204]	@ (8017db0 <ip4_input+0x240>)
 8017ce4:	693b      	ldr	r3, [r7, #16]
 8017ce6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017ce8:	4a31      	ldr	r2, [pc, #196]	@ (8017db0 <ip4_input+0x240>)
 8017cea:	683b      	ldr	r3, [r7, #0]
 8017cec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017cee:	4a30      	ldr	r2, [pc, #192]	@ (8017db0 <ip4_input+0x240>)
 8017cf0:	697b      	ldr	r3, [r7, #20]
 8017cf2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017cf4:	697b      	ldr	r3, [r7, #20]
 8017cf6:	781b      	ldrb	r3, [r3, #0]
 8017cf8:	f003 030f 	and.w	r3, r3, #15
 8017cfc:	b2db      	uxtb	r3, r3
 8017cfe:	009b      	lsls	r3, r3, #2
 8017d00:	b2db      	uxtb	r3, r3
 8017d02:	461a      	mov	r2, r3
 8017d04:	4b2a      	ldr	r3, [pc, #168]	@ (8017db0 <ip4_input+0x240>)
 8017d06:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017d08:	89fb      	ldrh	r3, [r7, #14]
 8017d0a:	4619      	mov	r1, r3
 8017d0c:	6878      	ldr	r0, [r7, #4]
 8017d0e:	f7f8 fde9 	bl	80108e4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017d12:	697b      	ldr	r3, [r7, #20]
 8017d14:	7a5b      	ldrb	r3, [r3, #9]
 8017d16:	2b11      	cmp	r3, #17
 8017d18:	d006      	beq.n	8017d28 <ip4_input+0x1b8>
 8017d1a:	2b11      	cmp	r3, #17
 8017d1c:	dc13      	bgt.n	8017d46 <ip4_input+0x1d6>
 8017d1e:	2b01      	cmp	r3, #1
 8017d20:	d00c      	beq.n	8017d3c <ip4_input+0x1cc>
 8017d22:	2b06      	cmp	r3, #6
 8017d24:	d005      	beq.n	8017d32 <ip4_input+0x1c2>
 8017d26:	e00e      	b.n	8017d46 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017d28:	6839      	ldr	r1, [r7, #0]
 8017d2a:	6878      	ldr	r0, [r7, #4]
 8017d2c:	f7fe fc42 	bl	80165b4 <udp_input>
        break;
 8017d30:	e026      	b.n	8017d80 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017d32:	6839      	ldr	r1, [r7, #0]
 8017d34:	6878      	ldr	r0, [r7, #4]
 8017d36:	f7fa fc91 	bl	801265c <tcp_input>
        break;
 8017d3a:	e021      	b.n	8017d80 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017d3c:	6839      	ldr	r1, [r7, #0]
 8017d3e:	6878      	ldr	r0, [r7, #4]
 8017d40:	f7ff fcc8 	bl	80176d4 <icmp_input>
        break;
 8017d44:	e01c      	b.n	8017d80 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017d46:	4b1a      	ldr	r3, [pc, #104]	@ (8017db0 <ip4_input+0x240>)
 8017d48:	695b      	ldr	r3, [r3, #20]
 8017d4a:	6939      	ldr	r1, [r7, #16]
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	f000 f90b 	bl	8017f68 <ip4_addr_isbroadcast_u32>
 8017d52:	4603      	mov	r3, r0
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d10f      	bne.n	8017d78 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017d58:	4b15      	ldr	r3, [pc, #84]	@ (8017db0 <ip4_input+0x240>)
 8017d5a:	695b      	ldr	r3, [r3, #20]
 8017d5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017d60:	2be0      	cmp	r3, #224	@ 0xe0
 8017d62:	d009      	beq.n	8017d78 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017d64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017d68:	4619      	mov	r1, r3
 8017d6a:	6878      	ldr	r0, [r7, #4]
 8017d6c:	f7f8 fe2d 	bl	80109ca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017d70:	2102      	movs	r1, #2
 8017d72:	6878      	ldr	r0, [r7, #4]
 8017d74:	f7ff fdce 	bl	8017914 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017d78:	6878      	ldr	r0, [r7, #4]
 8017d7a:	f7f8 fe39 	bl	80109f0 <pbuf_free>
        break;
 8017d7e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017d80:	4b0b      	ldr	r3, [pc, #44]	@ (8017db0 <ip4_input+0x240>)
 8017d82:	2200      	movs	r2, #0
 8017d84:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017d86:	4b0a      	ldr	r3, [pc, #40]	@ (8017db0 <ip4_input+0x240>)
 8017d88:	2200      	movs	r2, #0
 8017d8a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017d8c:	4b08      	ldr	r3, [pc, #32]	@ (8017db0 <ip4_input+0x240>)
 8017d8e:	2200      	movs	r2, #0
 8017d90:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017d92:	4b07      	ldr	r3, [pc, #28]	@ (8017db0 <ip4_input+0x240>)
 8017d94:	2200      	movs	r2, #0
 8017d96:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017d98:	4b05      	ldr	r3, [pc, #20]	@ (8017db0 <ip4_input+0x240>)
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017d9e:	4b04      	ldr	r3, [pc, #16]	@ (8017db0 <ip4_input+0x240>)
 8017da0:	2200      	movs	r2, #0
 8017da2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017da4:	2300      	movs	r3, #0
}
 8017da6:	4618      	mov	r0, r3
 8017da8:	3718      	adds	r7, #24
 8017daa:	46bd      	mov	sp, r7
 8017dac:	bd80      	pop	{r7, pc}
 8017dae:	bf00      	nop
 8017db0:	2005da8c 	.word	0x2005da8c
 8017db4:	20060b80 	.word	0x20060b80

08017db8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017db8:	b580      	push	{r7, lr}
 8017dba:	b08a      	sub	sp, #40	@ 0x28
 8017dbc:	af04      	add	r7, sp, #16
 8017dbe:	60f8      	str	r0, [r7, #12]
 8017dc0:	60b9      	str	r1, [r7, #8]
 8017dc2:	607a      	str	r2, [r7, #4]
 8017dc4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017dc6:	68bb      	ldr	r3, [r7, #8]
 8017dc8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d009      	beq.n	8017de4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017dd0:	68bb      	ldr	r3, [r7, #8]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d003      	beq.n	8017dde <ip4_output_if+0x26>
 8017dd6:	68bb      	ldr	r3, [r7, #8]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d102      	bne.n	8017de4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017de0:	3304      	adds	r3, #4
 8017de2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017de4:	78fa      	ldrb	r2, [r7, #3]
 8017de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017de8:	9302      	str	r3, [sp, #8]
 8017dea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017dee:	9301      	str	r3, [sp, #4]
 8017df0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017df4:	9300      	str	r3, [sp, #0]
 8017df6:	4613      	mov	r3, r2
 8017df8:	687a      	ldr	r2, [r7, #4]
 8017dfa:	6979      	ldr	r1, [r7, #20]
 8017dfc:	68f8      	ldr	r0, [r7, #12]
 8017dfe:	f000 f805 	bl	8017e0c <ip4_output_if_src>
 8017e02:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017e04:	4618      	mov	r0, r3
 8017e06:	3718      	adds	r7, #24
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	bd80      	pop	{r7, pc}

08017e0c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b088      	sub	sp, #32
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	60f8      	str	r0, [r7, #12]
 8017e14:	60b9      	str	r1, [r7, #8]
 8017e16:	607a      	str	r2, [r7, #4]
 8017e18:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	7b9b      	ldrb	r3, [r3, #14]
 8017e1e:	2b01      	cmp	r3, #1
 8017e20:	d006      	beq.n	8017e30 <ip4_output_if_src+0x24>
 8017e22:	4b4b      	ldr	r3, [pc, #300]	@ (8017f50 <ip4_output_if_src+0x144>)
 8017e24:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8017e28:	494a      	ldr	r1, [pc, #296]	@ (8017f54 <ip4_output_if_src+0x148>)
 8017e2a:	484b      	ldr	r0, [pc, #300]	@ (8017f58 <ip4_output_if_src+0x14c>)
 8017e2c:	f001 f9e4 	bl	80191f8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d060      	beq.n	8017ef8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017e36:	2314      	movs	r3, #20
 8017e38:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017e3a:	2114      	movs	r1, #20
 8017e3c:	68f8      	ldr	r0, [r7, #12]
 8017e3e:	f7f8 fd41 	bl	80108c4 <pbuf_add_header>
 8017e42:	4603      	mov	r3, r0
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d002      	beq.n	8017e4e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017e48:	f06f 0301 	mvn.w	r3, #1
 8017e4c:	e07c      	b.n	8017f48 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	685b      	ldr	r3, [r3, #4]
 8017e52:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	895b      	ldrh	r3, [r3, #10]
 8017e58:	2b13      	cmp	r3, #19
 8017e5a:	d806      	bhi.n	8017e6a <ip4_output_if_src+0x5e>
 8017e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8017f50 <ip4_output_if_src+0x144>)
 8017e5e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8017e62:	493e      	ldr	r1, [pc, #248]	@ (8017f5c <ip4_output_if_src+0x150>)
 8017e64:	483c      	ldr	r0, [pc, #240]	@ (8017f58 <ip4_output_if_src+0x14c>)
 8017e66:	f001 f9c7 	bl	80191f8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017e6a:	69fb      	ldr	r3, [r7, #28]
 8017e6c:	78fa      	ldrb	r2, [r7, #3]
 8017e6e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017e70:	69fb      	ldr	r3, [r7, #28]
 8017e72:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017e76:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	681a      	ldr	r2, [r3, #0]
 8017e7c:	69fb      	ldr	r3, [r7, #28]
 8017e7e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017e80:	8b7b      	ldrh	r3, [r7, #26]
 8017e82:	089b      	lsrs	r3, r3, #2
 8017e84:	b29b      	uxth	r3, r3
 8017e86:	b2db      	uxtb	r3, r3
 8017e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017e8c:	b2da      	uxtb	r2, r3
 8017e8e:	69fb      	ldr	r3, [r7, #28]
 8017e90:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017e92:	69fb      	ldr	r3, [r7, #28]
 8017e94:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017e98:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	891b      	ldrh	r3, [r3, #8]
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f7f7 f8fc 	bl	800f09c <lwip_htons>
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	461a      	mov	r2, r3
 8017ea8:	69fb      	ldr	r3, [r7, #28]
 8017eaa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017eac:	69fb      	ldr	r3, [r7, #28]
 8017eae:	2200      	movs	r2, #0
 8017eb0:	719a      	strb	r2, [r3, #6]
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8017f60 <ip4_output_if_src+0x154>)
 8017eb8:	881b      	ldrh	r3, [r3, #0]
 8017eba:	4618      	mov	r0, r3
 8017ebc:	f7f7 f8ee 	bl	800f09c <lwip_htons>
 8017ec0:	4603      	mov	r3, r0
 8017ec2:	461a      	mov	r2, r3
 8017ec4:	69fb      	ldr	r3, [r7, #28]
 8017ec6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017ec8:	4b25      	ldr	r3, [pc, #148]	@ (8017f60 <ip4_output_if_src+0x154>)
 8017eca:	881b      	ldrh	r3, [r3, #0]
 8017ecc:	3301      	adds	r3, #1
 8017ece:	b29a      	uxth	r2, r3
 8017ed0:	4b23      	ldr	r3, [pc, #140]	@ (8017f60 <ip4_output_if_src+0x154>)
 8017ed2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017ed4:	68bb      	ldr	r3, [r7, #8]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d104      	bne.n	8017ee4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017eda:	4b22      	ldr	r3, [pc, #136]	@ (8017f64 <ip4_output_if_src+0x158>)
 8017edc:	681a      	ldr	r2, [r3, #0]
 8017ede:	69fb      	ldr	r3, [r7, #28]
 8017ee0:	60da      	str	r2, [r3, #12]
 8017ee2:	e003      	b.n	8017eec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017ee4:	68bb      	ldr	r3, [r7, #8]
 8017ee6:	681a      	ldr	r2, [r3, #0]
 8017ee8:	69fb      	ldr	r3, [r7, #28]
 8017eea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017eec:	69fb      	ldr	r3, [r7, #28]
 8017eee:	2200      	movs	r2, #0
 8017ef0:	729a      	strb	r2, [r3, #10]
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	72da      	strb	r2, [r3, #11]
 8017ef6:	e00f      	b.n	8017f18 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	895b      	ldrh	r3, [r3, #10]
 8017efc:	2b13      	cmp	r3, #19
 8017efe:	d802      	bhi.n	8017f06 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017f00:	f06f 0301 	mvn.w	r3, #1
 8017f04:	e020      	b.n	8017f48 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	685b      	ldr	r3, [r3, #4]
 8017f0a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017f0c:	69fb      	ldr	r3, [r7, #28]
 8017f0e:	691b      	ldr	r3, [r3, #16]
 8017f10:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017f12:	f107 0314 	add.w	r3, r7, #20
 8017f16:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f1a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d00c      	beq.n	8017f3a <ip4_output_if_src+0x12e>
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	891a      	ldrh	r2, [r3, #8]
 8017f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f26:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017f28:	429a      	cmp	r2, r3
 8017f2a:	d906      	bls.n	8017f3a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017f2c:	687a      	ldr	r2, [r7, #4]
 8017f2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017f30:	68f8      	ldr	r0, [r7, #12]
 8017f32:	f000 fd53 	bl	80189dc <ip4_frag>
 8017f36:	4603      	mov	r3, r0
 8017f38:	e006      	b.n	8017f48 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f3c:	695b      	ldr	r3, [r3, #20]
 8017f3e:	687a      	ldr	r2, [r7, #4]
 8017f40:	68f9      	ldr	r1, [r7, #12]
 8017f42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017f44:	4798      	blx	r3
 8017f46:	4603      	mov	r3, r0
}
 8017f48:	4618      	mov	r0, r3
 8017f4a:	3720      	adds	r7, #32
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bd80      	pop	{r7, pc}
 8017f50:	0801c7fc 	.word	0x0801c7fc
 8017f54:	0801c830 	.word	0x0801c830
 8017f58:	0801c83c 	.word	0x0801c83c
 8017f5c:	0801c864 	.word	0x0801c864
 8017f60:	20060cde 	.word	0x20060cde
 8017f64:	0801ccd0 	.word	0x0801ccd0

08017f68 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017f68:	b480      	push	{r7}
 8017f6a:	b085      	sub	sp, #20
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
 8017f70:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f7c:	d002      	beq.n	8017f84 <ip4_addr_isbroadcast_u32+0x1c>
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d101      	bne.n	8017f88 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017f84:	2301      	movs	r3, #1
 8017f86:	e02a      	b.n	8017fde <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017f88:	683b      	ldr	r3, [r7, #0]
 8017f8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017f8e:	f003 0302 	and.w	r3, r3, #2
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d101      	bne.n	8017f9a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017f96:	2300      	movs	r3, #0
 8017f98:	e021      	b.n	8017fde <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017f9a:	683b      	ldr	r3, [r7, #0]
 8017f9c:	3304      	adds	r3, #4
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	687a      	ldr	r2, [r7, #4]
 8017fa2:	429a      	cmp	r2, r3
 8017fa4:	d101      	bne.n	8017faa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	e019      	b.n	8017fde <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017faa:	68fa      	ldr	r2, [r7, #12]
 8017fac:	683b      	ldr	r3, [r7, #0]
 8017fae:	3304      	adds	r3, #4
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	405a      	eors	r2, r3
 8017fb4:	683b      	ldr	r3, [r7, #0]
 8017fb6:	3308      	adds	r3, #8
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	4013      	ands	r3, r2
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d10d      	bne.n	8017fdc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017fc0:	683b      	ldr	r3, [r7, #0]
 8017fc2:	3308      	adds	r3, #8
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	43da      	mvns	r2, r3
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017fcc:	683b      	ldr	r3, [r7, #0]
 8017fce:	3308      	adds	r3, #8
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	d101      	bne.n	8017fdc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017fd8:	2301      	movs	r3, #1
 8017fda:	e000      	b.n	8017fde <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017fdc:	2300      	movs	r3, #0
  }
}
 8017fde:	4618      	mov	r0, r3
 8017fe0:	3714      	adds	r7, #20
 8017fe2:	46bd      	mov	sp, r7
 8017fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe8:	4770      	bx	lr
	...

08017fec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017fec:	b580      	push	{r7, lr}
 8017fee:	b084      	sub	sp, #16
 8017ff0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017ff6:	4b12      	ldr	r3, [pc, #72]	@ (8018040 <ip_reass_tmr+0x54>)
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017ffc:	e018      	b.n	8018030 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	7fdb      	ldrb	r3, [r3, #31]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d00b      	beq.n	801801e <ip_reass_tmr+0x32>
      r->timer--;
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	7fdb      	ldrb	r3, [r3, #31]
 801800a:	3b01      	subs	r3, #1
 801800c:	b2da      	uxtb	r2, r3
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	60fb      	str	r3, [r7, #12]
 801801c:	e008      	b.n	8018030 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018028:	68b9      	ldr	r1, [r7, #8]
 801802a:	6878      	ldr	r0, [r7, #4]
 801802c:	f000 f80a 	bl	8018044 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018030:	68fb      	ldr	r3, [r7, #12]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d1e3      	bne.n	8017ffe <ip_reass_tmr+0x12>
    }
  }
}
 8018036:	bf00      	nop
 8018038:	bf00      	nop
 801803a:	3710      	adds	r7, #16
 801803c:	46bd      	mov	sp, r7
 801803e:	bd80      	pop	{r7, pc}
 8018040:	20060ce0 	.word	0x20060ce0

08018044 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018044:	b580      	push	{r7, lr}
 8018046:	b088      	sub	sp, #32
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]
 801804c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801804e:	2300      	movs	r3, #0
 8018050:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018052:	683a      	ldr	r2, [r7, #0]
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	429a      	cmp	r2, r3
 8018058:	d105      	bne.n	8018066 <ip_reass_free_complete_datagram+0x22>
 801805a:	4b45      	ldr	r3, [pc, #276]	@ (8018170 <ip_reass_free_complete_datagram+0x12c>)
 801805c:	22ab      	movs	r2, #171	@ 0xab
 801805e:	4945      	ldr	r1, [pc, #276]	@ (8018174 <ip_reass_free_complete_datagram+0x130>)
 8018060:	4845      	ldr	r0, [pc, #276]	@ (8018178 <ip_reass_free_complete_datagram+0x134>)
 8018062:	f001 f8c9 	bl	80191f8 <iprintf>
  if (prev != NULL) {
 8018066:	683b      	ldr	r3, [r7, #0]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d00a      	beq.n	8018082 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801806c:	683b      	ldr	r3, [r7, #0]
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	687a      	ldr	r2, [r7, #4]
 8018072:	429a      	cmp	r2, r3
 8018074:	d005      	beq.n	8018082 <ip_reass_free_complete_datagram+0x3e>
 8018076:	4b3e      	ldr	r3, [pc, #248]	@ (8018170 <ip_reass_free_complete_datagram+0x12c>)
 8018078:	22ad      	movs	r2, #173	@ 0xad
 801807a:	4940      	ldr	r1, [pc, #256]	@ (801817c <ip_reass_free_complete_datagram+0x138>)
 801807c:	483e      	ldr	r0, [pc, #248]	@ (8018178 <ip_reass_free_complete_datagram+0x134>)
 801807e:	f001 f8bb 	bl	80191f8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	685b      	ldr	r3, [r3, #4]
 8018086:	685b      	ldr	r3, [r3, #4]
 8018088:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801808a:	697b      	ldr	r3, [r7, #20]
 801808c:	889b      	ldrh	r3, [r3, #4]
 801808e:	b29b      	uxth	r3, r3
 8018090:	2b00      	cmp	r3, #0
 8018092:	d12a      	bne.n	80180ea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	685b      	ldr	r3, [r3, #4]
 8018098:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801809a:	697b      	ldr	r3, [r7, #20]
 801809c:	681a      	ldr	r2, [r3, #0]
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80180a2:	69bb      	ldr	r3, [r7, #24]
 80180a4:	6858      	ldr	r0, [r3, #4]
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	3308      	adds	r3, #8
 80180aa:	2214      	movs	r2, #20
 80180ac:	4619      	mov	r1, r3
 80180ae:	f001 f97e 	bl	80193ae <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80180b2:	2101      	movs	r1, #1
 80180b4:	69b8      	ldr	r0, [r7, #24]
 80180b6:	f7ff fc3d 	bl	8017934 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80180ba:	69b8      	ldr	r0, [r7, #24]
 80180bc:	f7f8 fd26 	bl	8010b0c <pbuf_clen>
 80180c0:	4603      	mov	r3, r0
 80180c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80180c4:	8bfa      	ldrh	r2, [r7, #30]
 80180c6:	8a7b      	ldrh	r3, [r7, #18]
 80180c8:	4413      	add	r3, r2
 80180ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80180ce:	db05      	blt.n	80180dc <ip_reass_free_complete_datagram+0x98>
 80180d0:	4b27      	ldr	r3, [pc, #156]	@ (8018170 <ip_reass_free_complete_datagram+0x12c>)
 80180d2:	22bc      	movs	r2, #188	@ 0xbc
 80180d4:	492a      	ldr	r1, [pc, #168]	@ (8018180 <ip_reass_free_complete_datagram+0x13c>)
 80180d6:	4828      	ldr	r0, [pc, #160]	@ (8018178 <ip_reass_free_complete_datagram+0x134>)
 80180d8:	f001 f88e 	bl	80191f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80180dc:	8bfa      	ldrh	r2, [r7, #30]
 80180de:	8a7b      	ldrh	r3, [r7, #18]
 80180e0:	4413      	add	r3, r2
 80180e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80180e4:	69b8      	ldr	r0, [r7, #24]
 80180e6:	f7f8 fc83 	bl	80109f0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	685b      	ldr	r3, [r3, #4]
 80180ee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80180f0:	e01f      	b.n	8018132 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80180f2:	69bb      	ldr	r3, [r7, #24]
 80180f4:	685b      	ldr	r3, [r3, #4]
 80180f6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80180f8:	69bb      	ldr	r3, [r7, #24]
 80180fa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80180fc:	697b      	ldr	r3, [r7, #20]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018102:	68f8      	ldr	r0, [r7, #12]
 8018104:	f7f8 fd02 	bl	8010b0c <pbuf_clen>
 8018108:	4603      	mov	r3, r0
 801810a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801810c:	8bfa      	ldrh	r2, [r7, #30]
 801810e:	8a7b      	ldrh	r3, [r7, #18]
 8018110:	4413      	add	r3, r2
 8018112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018116:	db05      	blt.n	8018124 <ip_reass_free_complete_datagram+0xe0>
 8018118:	4b15      	ldr	r3, [pc, #84]	@ (8018170 <ip_reass_free_complete_datagram+0x12c>)
 801811a:	22cc      	movs	r2, #204	@ 0xcc
 801811c:	4918      	ldr	r1, [pc, #96]	@ (8018180 <ip_reass_free_complete_datagram+0x13c>)
 801811e:	4816      	ldr	r0, [pc, #88]	@ (8018178 <ip_reass_free_complete_datagram+0x134>)
 8018120:	f001 f86a 	bl	80191f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018124:	8bfa      	ldrh	r2, [r7, #30]
 8018126:	8a7b      	ldrh	r3, [r7, #18]
 8018128:	4413      	add	r3, r2
 801812a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801812c:	68f8      	ldr	r0, [r7, #12]
 801812e:	f7f8 fc5f 	bl	80109f0 <pbuf_free>
  while (p != NULL) {
 8018132:	69bb      	ldr	r3, [r7, #24]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d1dc      	bne.n	80180f2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018138:	6839      	ldr	r1, [r7, #0]
 801813a:	6878      	ldr	r0, [r7, #4]
 801813c:	f000 f8c2 	bl	80182c4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018140:	4b10      	ldr	r3, [pc, #64]	@ (8018184 <ip_reass_free_complete_datagram+0x140>)
 8018142:	881b      	ldrh	r3, [r3, #0]
 8018144:	8bfa      	ldrh	r2, [r7, #30]
 8018146:	429a      	cmp	r2, r3
 8018148:	d905      	bls.n	8018156 <ip_reass_free_complete_datagram+0x112>
 801814a:	4b09      	ldr	r3, [pc, #36]	@ (8018170 <ip_reass_free_complete_datagram+0x12c>)
 801814c:	22d2      	movs	r2, #210	@ 0xd2
 801814e:	490e      	ldr	r1, [pc, #56]	@ (8018188 <ip_reass_free_complete_datagram+0x144>)
 8018150:	4809      	ldr	r0, [pc, #36]	@ (8018178 <ip_reass_free_complete_datagram+0x134>)
 8018152:	f001 f851 	bl	80191f8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018156:	4b0b      	ldr	r3, [pc, #44]	@ (8018184 <ip_reass_free_complete_datagram+0x140>)
 8018158:	881a      	ldrh	r2, [r3, #0]
 801815a:	8bfb      	ldrh	r3, [r7, #30]
 801815c:	1ad3      	subs	r3, r2, r3
 801815e:	b29a      	uxth	r2, r3
 8018160:	4b08      	ldr	r3, [pc, #32]	@ (8018184 <ip_reass_free_complete_datagram+0x140>)
 8018162:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018164:	8bfb      	ldrh	r3, [r7, #30]
}
 8018166:	4618      	mov	r0, r3
 8018168:	3720      	adds	r7, #32
 801816a:	46bd      	mov	sp, r7
 801816c:	bd80      	pop	{r7, pc}
 801816e:	bf00      	nop
 8018170:	0801c894 	.word	0x0801c894
 8018174:	0801c8d0 	.word	0x0801c8d0
 8018178:	0801c8dc 	.word	0x0801c8dc
 801817c:	0801c904 	.word	0x0801c904
 8018180:	0801c918 	.word	0x0801c918
 8018184:	20060ce4 	.word	0x20060ce4
 8018188:	0801c938 	.word	0x0801c938

0801818c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b08a      	sub	sp, #40	@ 0x28
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
 8018194:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018196:	2300      	movs	r3, #0
 8018198:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801819a:	2300      	movs	r3, #0
 801819c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801819e:	2300      	movs	r3, #0
 80181a0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80181a2:	2300      	movs	r3, #0
 80181a4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80181a6:	2300      	movs	r3, #0
 80181a8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80181aa:	4b28      	ldr	r3, [pc, #160]	@ (801824c <ip_reass_remove_oldest_datagram+0xc0>)
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80181b0:	e030      	b.n	8018214 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80181b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181b4:	695a      	ldr	r2, [r3, #20]
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	68db      	ldr	r3, [r3, #12]
 80181ba:	429a      	cmp	r2, r3
 80181bc:	d10c      	bne.n	80181d8 <ip_reass_remove_oldest_datagram+0x4c>
 80181be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181c0:	699a      	ldr	r2, [r3, #24]
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	691b      	ldr	r3, [r3, #16]
 80181c6:	429a      	cmp	r2, r3
 80181c8:	d106      	bne.n	80181d8 <ip_reass_remove_oldest_datagram+0x4c>
 80181ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181cc:	899a      	ldrh	r2, [r3, #12]
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	889b      	ldrh	r3, [r3, #4]
 80181d2:	b29b      	uxth	r3, r3
 80181d4:	429a      	cmp	r2, r3
 80181d6:	d014      	beq.n	8018202 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80181d8:	693b      	ldr	r3, [r7, #16]
 80181da:	3301      	adds	r3, #1
 80181dc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80181de:	6a3b      	ldr	r3, [r7, #32]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d104      	bne.n	80181ee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80181e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181e6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80181e8:	69fb      	ldr	r3, [r7, #28]
 80181ea:	61bb      	str	r3, [r7, #24]
 80181ec:	e009      	b.n	8018202 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80181ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181f0:	7fda      	ldrb	r2, [r3, #31]
 80181f2:	6a3b      	ldr	r3, [r7, #32]
 80181f4:	7fdb      	ldrb	r3, [r3, #31]
 80181f6:	429a      	cmp	r2, r3
 80181f8:	d803      	bhi.n	8018202 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80181fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181fc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80181fe:	69fb      	ldr	r3, [r7, #28]
 8018200:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	2b00      	cmp	r3, #0
 8018208:	d001      	beq.n	801820e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801820c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8018214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018216:	2b00      	cmp	r3, #0
 8018218:	d1cb      	bne.n	80181b2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801821a:	6a3b      	ldr	r3, [r7, #32]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d008      	beq.n	8018232 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018220:	69b9      	ldr	r1, [r7, #24]
 8018222:	6a38      	ldr	r0, [r7, #32]
 8018224:	f7ff ff0e 	bl	8018044 <ip_reass_free_complete_datagram>
 8018228:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801822a:	697a      	ldr	r2, [r7, #20]
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	4413      	add	r3, r2
 8018230:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018232:	697a      	ldr	r2, [r7, #20]
 8018234:	683b      	ldr	r3, [r7, #0]
 8018236:	429a      	cmp	r2, r3
 8018238:	da02      	bge.n	8018240 <ip_reass_remove_oldest_datagram+0xb4>
 801823a:	693b      	ldr	r3, [r7, #16]
 801823c:	2b01      	cmp	r3, #1
 801823e:	dcac      	bgt.n	801819a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018240:	697b      	ldr	r3, [r7, #20]
}
 8018242:	4618      	mov	r0, r3
 8018244:	3728      	adds	r7, #40	@ 0x28
 8018246:	46bd      	mov	sp, r7
 8018248:	bd80      	pop	{r7, pc}
 801824a:	bf00      	nop
 801824c:	20060ce0 	.word	0x20060ce0

08018250 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b084      	sub	sp, #16
 8018254:	af00      	add	r7, sp, #0
 8018256:	6078      	str	r0, [r7, #4]
 8018258:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801825a:	2004      	movs	r0, #4
 801825c:	f7f7 fcae 	bl	800fbbc <memp_malloc>
 8018260:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d110      	bne.n	801828a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018268:	6839      	ldr	r1, [r7, #0]
 801826a:	6878      	ldr	r0, [r7, #4]
 801826c:	f7ff ff8e 	bl	801818c <ip_reass_remove_oldest_datagram>
 8018270:	4602      	mov	r2, r0
 8018272:	683b      	ldr	r3, [r7, #0]
 8018274:	4293      	cmp	r3, r2
 8018276:	dc03      	bgt.n	8018280 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018278:	2004      	movs	r0, #4
 801827a:	f7f7 fc9f 	bl	800fbbc <memp_malloc>
 801827e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d101      	bne.n	801828a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018286:	2300      	movs	r3, #0
 8018288:	e016      	b.n	80182b8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801828a:	2220      	movs	r2, #32
 801828c:	2100      	movs	r1, #0
 801828e:	68f8      	ldr	r0, [r7, #12]
 8018290:	f001 f817 	bl	80192c2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	220f      	movs	r2, #15
 8018298:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801829a:	4b09      	ldr	r3, [pc, #36]	@ (80182c0 <ip_reass_enqueue_new_datagram+0x70>)
 801829c:	681a      	ldr	r2, [r3, #0]
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80182a2:	4a07      	ldr	r2, [pc, #28]	@ (80182c0 <ip_reass_enqueue_new_datagram+0x70>)
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	3308      	adds	r3, #8
 80182ac:	2214      	movs	r2, #20
 80182ae:	6879      	ldr	r1, [r7, #4]
 80182b0:	4618      	mov	r0, r3
 80182b2:	f001 f87c 	bl	80193ae <memcpy>
  return ipr;
 80182b6:	68fb      	ldr	r3, [r7, #12]
}
 80182b8:	4618      	mov	r0, r3
 80182ba:	3710      	adds	r7, #16
 80182bc:	46bd      	mov	sp, r7
 80182be:	bd80      	pop	{r7, pc}
 80182c0:	20060ce0 	.word	0x20060ce0

080182c4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80182c4:	b580      	push	{r7, lr}
 80182c6:	b082      	sub	sp, #8
 80182c8:	af00      	add	r7, sp, #0
 80182ca:	6078      	str	r0, [r7, #4]
 80182cc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80182ce:	4b10      	ldr	r3, [pc, #64]	@ (8018310 <ip_reass_dequeue_datagram+0x4c>)
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	687a      	ldr	r2, [r7, #4]
 80182d4:	429a      	cmp	r2, r3
 80182d6:	d104      	bne.n	80182e2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	4a0c      	ldr	r2, [pc, #48]	@ (8018310 <ip_reass_dequeue_datagram+0x4c>)
 80182de:	6013      	str	r3, [r2, #0]
 80182e0:	e00d      	b.n	80182fe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80182e2:	683b      	ldr	r3, [r7, #0]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d106      	bne.n	80182f6 <ip_reass_dequeue_datagram+0x32>
 80182e8:	4b0a      	ldr	r3, [pc, #40]	@ (8018314 <ip_reass_dequeue_datagram+0x50>)
 80182ea:	f240 1245 	movw	r2, #325	@ 0x145
 80182ee:	490a      	ldr	r1, [pc, #40]	@ (8018318 <ip_reass_dequeue_datagram+0x54>)
 80182f0:	480a      	ldr	r0, [pc, #40]	@ (801831c <ip_reass_dequeue_datagram+0x58>)
 80182f2:	f000 ff81 	bl	80191f8 <iprintf>
    prev->next = ipr->next;
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	681a      	ldr	r2, [r3, #0]
 80182fa:	683b      	ldr	r3, [r7, #0]
 80182fc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80182fe:	6879      	ldr	r1, [r7, #4]
 8018300:	2004      	movs	r0, #4
 8018302:	f7f7 fcd1 	bl	800fca8 <memp_free>
}
 8018306:	bf00      	nop
 8018308:	3708      	adds	r7, #8
 801830a:	46bd      	mov	sp, r7
 801830c:	bd80      	pop	{r7, pc}
 801830e:	bf00      	nop
 8018310:	20060ce0 	.word	0x20060ce0
 8018314:	0801c894 	.word	0x0801c894
 8018318:	0801c95c 	.word	0x0801c95c
 801831c:	0801c8dc 	.word	0x0801c8dc

08018320 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018320:	b580      	push	{r7, lr}
 8018322:	b08c      	sub	sp, #48	@ 0x30
 8018324:	af00      	add	r7, sp, #0
 8018326:	60f8      	str	r0, [r7, #12]
 8018328:	60b9      	str	r1, [r7, #8]
 801832a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801832c:	2300      	movs	r3, #0
 801832e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018330:	2301      	movs	r3, #1
 8018332:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018334:	68bb      	ldr	r3, [r7, #8]
 8018336:	685b      	ldr	r3, [r3, #4]
 8018338:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801833a:	69fb      	ldr	r3, [r7, #28]
 801833c:	885b      	ldrh	r3, [r3, #2]
 801833e:	b29b      	uxth	r3, r3
 8018340:	4618      	mov	r0, r3
 8018342:	f7f6 feab 	bl	800f09c <lwip_htons>
 8018346:	4603      	mov	r3, r0
 8018348:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801834a:	69fb      	ldr	r3, [r7, #28]
 801834c:	781b      	ldrb	r3, [r3, #0]
 801834e:	f003 030f 	and.w	r3, r3, #15
 8018352:	b2db      	uxtb	r3, r3
 8018354:	009b      	lsls	r3, r3, #2
 8018356:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018358:	7e7b      	ldrb	r3, [r7, #25]
 801835a:	b29b      	uxth	r3, r3
 801835c:	8b7a      	ldrh	r2, [r7, #26]
 801835e:	429a      	cmp	r2, r3
 8018360:	d202      	bcs.n	8018368 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018362:	f04f 33ff 	mov.w	r3, #4294967295
 8018366:	e135      	b.n	80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018368:	7e7b      	ldrb	r3, [r7, #25]
 801836a:	b29b      	uxth	r3, r3
 801836c:	8b7a      	ldrh	r2, [r7, #26]
 801836e:	1ad3      	subs	r3, r2, r3
 8018370:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018372:	69fb      	ldr	r3, [r7, #28]
 8018374:	88db      	ldrh	r3, [r3, #6]
 8018376:	b29b      	uxth	r3, r3
 8018378:	4618      	mov	r0, r3
 801837a:	f7f6 fe8f 	bl	800f09c <lwip_htons>
 801837e:	4603      	mov	r3, r0
 8018380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018384:	b29b      	uxth	r3, r3
 8018386:	00db      	lsls	r3, r3, #3
 8018388:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801838a:	68bb      	ldr	r3, [r7, #8]
 801838c:	685b      	ldr	r3, [r3, #4]
 801838e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8018390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018392:	2200      	movs	r2, #0
 8018394:	701a      	strb	r2, [r3, #0]
 8018396:	2200      	movs	r2, #0
 8018398:	705a      	strb	r2, [r3, #1]
 801839a:	2200      	movs	r2, #0
 801839c:	709a      	strb	r2, [r3, #2]
 801839e:	2200      	movs	r2, #0
 80183a0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80183a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183a4:	8afa      	ldrh	r2, [r7, #22]
 80183a6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80183a8:	8afa      	ldrh	r2, [r7, #22]
 80183aa:	8b7b      	ldrh	r3, [r7, #26]
 80183ac:	4413      	add	r3, r2
 80183ae:	b29a      	uxth	r2, r3
 80183b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183b2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80183b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183b6:	88db      	ldrh	r3, [r3, #6]
 80183b8:	b29b      	uxth	r3, r3
 80183ba:	8afa      	ldrh	r2, [r7, #22]
 80183bc:	429a      	cmp	r2, r3
 80183be:	d902      	bls.n	80183c6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80183c0:	f04f 33ff 	mov.w	r3, #4294967295
 80183c4:	e106      	b.n	80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	685b      	ldr	r3, [r3, #4]
 80183ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80183cc:	e068      	b.n	80184a0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80183ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183d0:	685b      	ldr	r3, [r3, #4]
 80183d2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80183d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183d6:	889b      	ldrh	r3, [r3, #4]
 80183d8:	b29a      	uxth	r2, r3
 80183da:	693b      	ldr	r3, [r7, #16]
 80183dc:	889b      	ldrh	r3, [r3, #4]
 80183de:	b29b      	uxth	r3, r3
 80183e0:	429a      	cmp	r2, r3
 80183e2:	d235      	bcs.n	8018450 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80183e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80183e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80183ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d020      	beq.n	8018432 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80183f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183f2:	889b      	ldrh	r3, [r3, #4]
 80183f4:	b29a      	uxth	r2, r3
 80183f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183f8:	88db      	ldrh	r3, [r3, #6]
 80183fa:	b29b      	uxth	r3, r3
 80183fc:	429a      	cmp	r2, r3
 80183fe:	d307      	bcc.n	8018410 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018402:	88db      	ldrh	r3, [r3, #6]
 8018404:	b29a      	uxth	r2, r3
 8018406:	693b      	ldr	r3, [r7, #16]
 8018408:	889b      	ldrh	r3, [r3, #4]
 801840a:	b29b      	uxth	r3, r3
 801840c:	429a      	cmp	r2, r3
 801840e:	d902      	bls.n	8018416 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018410:	f04f 33ff 	mov.w	r3, #4294967295
 8018414:	e0de      	b.n	80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018418:	68ba      	ldr	r2, [r7, #8]
 801841a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801841c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801841e:	88db      	ldrh	r3, [r3, #6]
 8018420:	b29a      	uxth	r2, r3
 8018422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018424:	889b      	ldrh	r3, [r3, #4]
 8018426:	b29b      	uxth	r3, r3
 8018428:	429a      	cmp	r2, r3
 801842a:	d03d      	beq.n	80184a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801842c:	2300      	movs	r3, #0
 801842e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018430:	e03a      	b.n	80184a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018434:	88db      	ldrh	r3, [r3, #6]
 8018436:	b29a      	uxth	r2, r3
 8018438:	693b      	ldr	r3, [r7, #16]
 801843a:	889b      	ldrh	r3, [r3, #4]
 801843c:	b29b      	uxth	r3, r3
 801843e:	429a      	cmp	r2, r3
 8018440:	d902      	bls.n	8018448 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018442:	f04f 33ff 	mov.w	r3, #4294967295
 8018446:	e0c5      	b.n	80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	68ba      	ldr	r2, [r7, #8]
 801844c:	605a      	str	r2, [r3, #4]
      break;
 801844e:	e02b      	b.n	80184a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018452:	889b      	ldrh	r3, [r3, #4]
 8018454:	b29a      	uxth	r2, r3
 8018456:	693b      	ldr	r3, [r7, #16]
 8018458:	889b      	ldrh	r3, [r3, #4]
 801845a:	b29b      	uxth	r3, r3
 801845c:	429a      	cmp	r2, r3
 801845e:	d102      	bne.n	8018466 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018460:	f04f 33ff 	mov.w	r3, #4294967295
 8018464:	e0b6      	b.n	80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018468:	889b      	ldrh	r3, [r3, #4]
 801846a:	b29a      	uxth	r2, r3
 801846c:	693b      	ldr	r3, [r7, #16]
 801846e:	88db      	ldrh	r3, [r3, #6]
 8018470:	b29b      	uxth	r3, r3
 8018472:	429a      	cmp	r2, r3
 8018474:	d202      	bcs.n	801847c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018476:	f04f 33ff 	mov.w	r3, #4294967295
 801847a:	e0ab      	b.n	80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801847c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801847e:	2b00      	cmp	r3, #0
 8018480:	d009      	beq.n	8018496 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018484:	88db      	ldrh	r3, [r3, #6]
 8018486:	b29a      	uxth	r2, r3
 8018488:	693b      	ldr	r3, [r7, #16]
 801848a:	889b      	ldrh	r3, [r3, #4]
 801848c:	b29b      	uxth	r3, r3
 801848e:	429a      	cmp	r2, r3
 8018490:	d001      	beq.n	8018496 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018492:	2300      	movs	r3, #0
 8018494:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018496:	693b      	ldr	r3, [r7, #16]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801849c:	693b      	ldr	r3, [r7, #16]
 801849e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80184a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d193      	bne.n	80183ce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80184a6:	e000      	b.n	80184aa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80184a8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80184aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d12d      	bne.n	801850c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80184b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d01c      	beq.n	80184f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80184b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184b8:	88db      	ldrh	r3, [r3, #6]
 80184ba:	b29a      	uxth	r2, r3
 80184bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184be:	889b      	ldrh	r3, [r3, #4]
 80184c0:	b29b      	uxth	r3, r3
 80184c2:	429a      	cmp	r2, r3
 80184c4:	d906      	bls.n	80184d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80184c6:	4b45      	ldr	r3, [pc, #276]	@ (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80184c8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80184cc:	4944      	ldr	r1, [pc, #272]	@ (80185e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80184ce:	4845      	ldr	r0, [pc, #276]	@ (80185e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80184d0:	f000 fe92 	bl	80191f8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80184d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184d6:	68ba      	ldr	r2, [r7, #8]
 80184d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80184da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184dc:	88db      	ldrh	r3, [r3, #6]
 80184de:	b29a      	uxth	r2, r3
 80184e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184e2:	889b      	ldrh	r3, [r3, #4]
 80184e4:	b29b      	uxth	r3, r3
 80184e6:	429a      	cmp	r2, r3
 80184e8:	d010      	beq.n	801850c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80184ea:	2300      	movs	r3, #0
 80184ec:	623b      	str	r3, [r7, #32]
 80184ee:	e00d      	b.n	801850c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	685b      	ldr	r3, [r3, #4]
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d006      	beq.n	8018506 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80184f8:	4b38      	ldr	r3, [pc, #224]	@ (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80184fa:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80184fe:	493a      	ldr	r1, [pc, #232]	@ (80185e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018500:	4838      	ldr	r0, [pc, #224]	@ (80185e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018502:	f000 fe79 	bl	80191f8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	68ba      	ldr	r2, [r7, #8]
 801850a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d105      	bne.n	801851e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	7f9b      	ldrb	r3, [r3, #30]
 8018516:	f003 0301 	and.w	r3, r3, #1
 801851a:	2b00      	cmp	r3, #0
 801851c:	d059      	beq.n	80185d2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801851e:	6a3b      	ldr	r3, [r7, #32]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d04f      	beq.n	80185c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	685b      	ldr	r3, [r3, #4]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d006      	beq.n	801853a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	685b      	ldr	r3, [r3, #4]
 8018530:	685b      	ldr	r3, [r3, #4]
 8018532:	889b      	ldrh	r3, [r3, #4]
 8018534:	b29b      	uxth	r3, r3
 8018536:	2b00      	cmp	r3, #0
 8018538:	d002      	beq.n	8018540 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801853a:	2300      	movs	r3, #0
 801853c:	623b      	str	r3, [r7, #32]
 801853e:	e041      	b.n	80185c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018542:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8018544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801854a:	e012      	b.n	8018572 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801854c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801854e:	685b      	ldr	r3, [r3, #4]
 8018550:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8018552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018554:	88db      	ldrh	r3, [r3, #6]
 8018556:	b29a      	uxth	r2, r3
 8018558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801855a:	889b      	ldrh	r3, [r3, #4]
 801855c:	b29b      	uxth	r3, r3
 801855e:	429a      	cmp	r2, r3
 8018560:	d002      	beq.n	8018568 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018562:	2300      	movs	r3, #0
 8018564:	623b      	str	r3, [r7, #32]
            break;
 8018566:	e007      	b.n	8018578 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801856a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801856c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018574:	2b00      	cmp	r3, #0
 8018576:	d1e9      	bne.n	801854c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018578:	6a3b      	ldr	r3, [r7, #32]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d022      	beq.n	80185c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	685b      	ldr	r3, [r3, #4]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d106      	bne.n	8018594 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018586:	4b15      	ldr	r3, [pc, #84]	@ (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018588:	f240 12df 	movw	r2, #479	@ 0x1df
 801858c:	4917      	ldr	r1, [pc, #92]	@ (80185ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801858e:	4815      	ldr	r0, [pc, #84]	@ (80185e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018590:	f000 fe32 	bl	80191f8 <iprintf>
          LWIP_ASSERT("sanity check",
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	685b      	ldr	r3, [r3, #4]
 8018598:	685b      	ldr	r3, [r3, #4]
 801859a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801859c:	429a      	cmp	r2, r3
 801859e:	d106      	bne.n	80185ae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80185a0:	4b0e      	ldr	r3, [pc, #56]	@ (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80185a2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80185a6:	4911      	ldr	r1, [pc, #68]	@ (80185ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80185a8:	480e      	ldr	r0, [pc, #56]	@ (80185e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80185aa:	f000 fe25 	bl	80191f8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80185ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d006      	beq.n	80185c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80185b6:	4b09      	ldr	r3, [pc, #36]	@ (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80185b8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80185bc:	490c      	ldr	r1, [pc, #48]	@ (80185f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80185be:	4809      	ldr	r0, [pc, #36]	@ (80185e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80185c0:	f000 fe1a 	bl	80191f8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80185c4:	6a3b      	ldr	r3, [r7, #32]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	bf14      	ite	ne
 80185ca:	2301      	movne	r3, #1
 80185cc:	2300      	moveq	r3, #0
 80185ce:	b2db      	uxtb	r3, r3
 80185d0:	e000      	b.n	80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80185d2:	2300      	movs	r3, #0
}
 80185d4:	4618      	mov	r0, r3
 80185d6:	3730      	adds	r7, #48	@ 0x30
 80185d8:	46bd      	mov	sp, r7
 80185da:	bd80      	pop	{r7, pc}
 80185dc:	0801c894 	.word	0x0801c894
 80185e0:	0801c978 	.word	0x0801c978
 80185e4:	0801c8dc 	.word	0x0801c8dc
 80185e8:	0801c998 	.word	0x0801c998
 80185ec:	0801c9d0 	.word	0x0801c9d0
 80185f0:	0801c9e0 	.word	0x0801c9e0

080185f4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b08e      	sub	sp, #56	@ 0x38
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	685b      	ldr	r3, [r3, #4]
 8018600:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018604:	781b      	ldrb	r3, [r3, #0]
 8018606:	f003 030f 	and.w	r3, r3, #15
 801860a:	b2db      	uxtb	r3, r3
 801860c:	009b      	lsls	r3, r3, #2
 801860e:	b2db      	uxtb	r3, r3
 8018610:	2b14      	cmp	r3, #20
 8018612:	f040 8171 	bne.w	80188f8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018618:	88db      	ldrh	r3, [r3, #6]
 801861a:	b29b      	uxth	r3, r3
 801861c:	4618      	mov	r0, r3
 801861e:	f7f6 fd3d 	bl	800f09c <lwip_htons>
 8018622:	4603      	mov	r3, r0
 8018624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018628:	b29b      	uxth	r3, r3
 801862a:	00db      	lsls	r3, r3, #3
 801862c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801862e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018630:	885b      	ldrh	r3, [r3, #2]
 8018632:	b29b      	uxth	r3, r3
 8018634:	4618      	mov	r0, r3
 8018636:	f7f6 fd31 	bl	800f09c <lwip_htons>
 801863a:	4603      	mov	r3, r0
 801863c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801863e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018640:	781b      	ldrb	r3, [r3, #0]
 8018642:	f003 030f 	and.w	r3, r3, #15
 8018646:	b2db      	uxtb	r3, r3
 8018648:	009b      	lsls	r3, r3, #2
 801864a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801864e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018652:	b29b      	uxth	r3, r3
 8018654:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018656:	429a      	cmp	r2, r3
 8018658:	f0c0 8150 	bcc.w	80188fc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801865c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018660:	b29b      	uxth	r3, r3
 8018662:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018664:	1ad3      	subs	r3, r2, r3
 8018666:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018668:	6878      	ldr	r0, [r7, #4]
 801866a:	f7f8 fa4f 	bl	8010b0c <pbuf_clen>
 801866e:	4603      	mov	r3, r0
 8018670:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018672:	4b8c      	ldr	r3, [pc, #560]	@ (80188a4 <ip4_reass+0x2b0>)
 8018674:	881b      	ldrh	r3, [r3, #0]
 8018676:	461a      	mov	r2, r3
 8018678:	8c3b      	ldrh	r3, [r7, #32]
 801867a:	4413      	add	r3, r2
 801867c:	2b0a      	cmp	r3, #10
 801867e:	dd10      	ble.n	80186a2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018680:	8c3b      	ldrh	r3, [r7, #32]
 8018682:	4619      	mov	r1, r3
 8018684:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018686:	f7ff fd81 	bl	801818c <ip_reass_remove_oldest_datagram>
 801868a:	4603      	mov	r3, r0
 801868c:	2b00      	cmp	r3, #0
 801868e:	f000 8137 	beq.w	8018900 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018692:	4b84      	ldr	r3, [pc, #528]	@ (80188a4 <ip4_reass+0x2b0>)
 8018694:	881b      	ldrh	r3, [r3, #0]
 8018696:	461a      	mov	r2, r3
 8018698:	8c3b      	ldrh	r3, [r7, #32]
 801869a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801869c:	2b0a      	cmp	r3, #10
 801869e:	f300 812f 	bgt.w	8018900 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80186a2:	4b81      	ldr	r3, [pc, #516]	@ (80188a8 <ip4_reass+0x2b4>)
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80186a8:	e015      	b.n	80186d6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80186aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186ac:	695a      	ldr	r2, [r3, #20]
 80186ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186b0:	68db      	ldr	r3, [r3, #12]
 80186b2:	429a      	cmp	r2, r3
 80186b4:	d10c      	bne.n	80186d0 <ip4_reass+0xdc>
 80186b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186b8:	699a      	ldr	r2, [r3, #24]
 80186ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186bc:	691b      	ldr	r3, [r3, #16]
 80186be:	429a      	cmp	r2, r3
 80186c0:	d106      	bne.n	80186d0 <ip4_reass+0xdc>
 80186c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186c4:	899a      	ldrh	r2, [r3, #12]
 80186c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186c8:	889b      	ldrh	r3, [r3, #4]
 80186ca:	b29b      	uxth	r3, r3
 80186cc:	429a      	cmp	r2, r3
 80186ce:	d006      	beq.n	80186de <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80186d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80186d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d1e6      	bne.n	80186aa <ip4_reass+0xb6>
 80186dc:	e000      	b.n	80186e0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80186de:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80186e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d109      	bne.n	80186fa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80186e6:	8c3b      	ldrh	r3, [r7, #32]
 80186e8:	4619      	mov	r1, r3
 80186ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80186ec:	f7ff fdb0 	bl	8018250 <ip_reass_enqueue_new_datagram>
 80186f0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80186f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d11c      	bne.n	8018732 <ip4_reass+0x13e>
      goto nullreturn;
 80186f8:	e105      	b.n	8018906 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80186fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80186fc:	88db      	ldrh	r3, [r3, #6]
 80186fe:	b29b      	uxth	r3, r3
 8018700:	4618      	mov	r0, r3
 8018702:	f7f6 fccb 	bl	800f09c <lwip_htons>
 8018706:	4603      	mov	r3, r0
 8018708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801870c:	2b00      	cmp	r3, #0
 801870e:	d110      	bne.n	8018732 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018712:	89db      	ldrh	r3, [r3, #14]
 8018714:	4618      	mov	r0, r3
 8018716:	f7f6 fcc1 	bl	800f09c <lwip_htons>
 801871a:	4603      	mov	r3, r0
 801871c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018720:	2b00      	cmp	r3, #0
 8018722:	d006      	beq.n	8018732 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018726:	3308      	adds	r3, #8
 8018728:	2214      	movs	r2, #20
 801872a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801872c:	4618      	mov	r0, r3
 801872e:	f000 fe3e 	bl	80193ae <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018734:	88db      	ldrh	r3, [r3, #6]
 8018736:	b29b      	uxth	r3, r3
 8018738:	f003 0320 	and.w	r3, r3, #32
 801873c:	2b00      	cmp	r3, #0
 801873e:	bf0c      	ite	eq
 8018740:	2301      	moveq	r3, #1
 8018742:	2300      	movne	r3, #0
 8018744:	b2db      	uxtb	r3, r3
 8018746:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018748:	69fb      	ldr	r3, [r7, #28]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d00e      	beq.n	801876c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801874e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018750:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018752:	4413      	add	r3, r2
 8018754:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018756:	8b7a      	ldrh	r2, [r7, #26]
 8018758:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801875a:	429a      	cmp	r2, r3
 801875c:	f0c0 80a0 	bcc.w	80188a0 <ip4_reass+0x2ac>
 8018760:	8b7b      	ldrh	r3, [r7, #26]
 8018762:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8018766:	4293      	cmp	r3, r2
 8018768:	f200 809a 	bhi.w	80188a0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801876c:	69fa      	ldr	r2, [r7, #28]
 801876e:	6879      	ldr	r1, [r7, #4]
 8018770:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018772:	f7ff fdd5 	bl	8018320 <ip_reass_chain_frag_into_datagram_and_validate>
 8018776:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018778:	697b      	ldr	r3, [r7, #20]
 801877a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801877e:	f000 809b 	beq.w	80188b8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018782:	4b48      	ldr	r3, [pc, #288]	@ (80188a4 <ip4_reass+0x2b0>)
 8018784:	881a      	ldrh	r2, [r3, #0]
 8018786:	8c3b      	ldrh	r3, [r7, #32]
 8018788:	4413      	add	r3, r2
 801878a:	b29a      	uxth	r2, r3
 801878c:	4b45      	ldr	r3, [pc, #276]	@ (80188a4 <ip4_reass+0x2b0>)
 801878e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018790:	69fb      	ldr	r3, [r7, #28]
 8018792:	2b00      	cmp	r3, #0
 8018794:	d00d      	beq.n	80187b2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018796:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018798:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801879a:	4413      	add	r3, r2
 801879c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187a0:	8a7a      	ldrh	r2, [r7, #18]
 80187a2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80187a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187a6:	7f9b      	ldrb	r3, [r3, #30]
 80187a8:	f043 0301 	orr.w	r3, r3, #1
 80187ac:	b2da      	uxtb	r2, r3
 80187ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187b0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80187b2:	697b      	ldr	r3, [r7, #20]
 80187b4:	2b01      	cmp	r3, #1
 80187b6:	d171      	bne.n	801889c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80187b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187ba:	8b9b      	ldrh	r3, [r3, #28]
 80187bc:	3314      	adds	r3, #20
 80187be:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80187c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187c2:	685b      	ldr	r3, [r3, #4]
 80187c4:	685b      	ldr	r3, [r3, #4]
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80187ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187cc:	685b      	ldr	r3, [r3, #4]
 80187ce:	685b      	ldr	r3, [r3, #4]
 80187d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80187d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187d4:	3308      	adds	r3, #8
 80187d6:	2214      	movs	r2, #20
 80187d8:	4619      	mov	r1, r3
 80187da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80187dc:	f000 fde7 	bl	80193ae <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80187e0:	8a3b      	ldrh	r3, [r7, #16]
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7f6 fc5a 	bl	800f09c <lwip_htons>
 80187e8:	4603      	mov	r3, r0
 80187ea:	461a      	mov	r2, r3
 80187ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187ee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80187f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187f2:	2200      	movs	r2, #0
 80187f4:	719a      	strb	r2, [r3, #6]
 80187f6:	2200      	movs	r2, #0
 80187f8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80187fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187fc:	2200      	movs	r2, #0
 80187fe:	729a      	strb	r2, [r3, #10]
 8018800:	2200      	movs	r2, #0
 8018802:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018806:	685b      	ldr	r3, [r3, #4]
 8018808:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801880a:	e00d      	b.n	8018828 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801880c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801880e:	685b      	ldr	r3, [r3, #4]
 8018810:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018812:	2114      	movs	r1, #20
 8018814:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018816:	f7f8 f865 	bl	80108e4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801881a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801881c:	6878      	ldr	r0, [r7, #4]
 801881e:	f7f8 f9b5 	bl	8010b8c <pbuf_cat>
      r = iprh->next_pbuf;
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8018828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801882a:	2b00      	cmp	r3, #0
 801882c:	d1ee      	bne.n	801880c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801882e:	4b1e      	ldr	r3, [pc, #120]	@ (80188a8 <ip4_reass+0x2b4>)
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018834:	429a      	cmp	r2, r3
 8018836:	d102      	bne.n	801883e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018838:	2300      	movs	r3, #0
 801883a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801883c:	e010      	b.n	8018860 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801883e:	4b1a      	ldr	r3, [pc, #104]	@ (80188a8 <ip4_reass+0x2b4>)
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018844:	e007      	b.n	8018856 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801884c:	429a      	cmp	r2, r3
 801884e:	d006      	beq.n	801885e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018858:	2b00      	cmp	r3, #0
 801885a:	d1f4      	bne.n	8018846 <ip4_reass+0x252>
 801885c:	e000      	b.n	8018860 <ip4_reass+0x26c>
          break;
 801885e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018860:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018862:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018864:	f7ff fd2e 	bl	80182c4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018868:	6878      	ldr	r0, [r7, #4]
 801886a:	f7f8 f94f 	bl	8010b0c <pbuf_clen>
 801886e:	4603      	mov	r3, r0
 8018870:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018872:	4b0c      	ldr	r3, [pc, #48]	@ (80188a4 <ip4_reass+0x2b0>)
 8018874:	881b      	ldrh	r3, [r3, #0]
 8018876:	8c3a      	ldrh	r2, [r7, #32]
 8018878:	429a      	cmp	r2, r3
 801887a:	d906      	bls.n	801888a <ip4_reass+0x296>
 801887c:	4b0b      	ldr	r3, [pc, #44]	@ (80188ac <ip4_reass+0x2b8>)
 801887e:	f240 229b 	movw	r2, #667	@ 0x29b
 8018882:	490b      	ldr	r1, [pc, #44]	@ (80188b0 <ip4_reass+0x2bc>)
 8018884:	480b      	ldr	r0, [pc, #44]	@ (80188b4 <ip4_reass+0x2c0>)
 8018886:	f000 fcb7 	bl	80191f8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801888a:	4b06      	ldr	r3, [pc, #24]	@ (80188a4 <ip4_reass+0x2b0>)
 801888c:	881a      	ldrh	r2, [r3, #0]
 801888e:	8c3b      	ldrh	r3, [r7, #32]
 8018890:	1ad3      	subs	r3, r2, r3
 8018892:	b29a      	uxth	r2, r3
 8018894:	4b03      	ldr	r3, [pc, #12]	@ (80188a4 <ip4_reass+0x2b0>)
 8018896:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	e038      	b.n	801890e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801889c:	2300      	movs	r3, #0
 801889e:	e036      	b.n	801890e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80188a0:	bf00      	nop
 80188a2:	e00a      	b.n	80188ba <ip4_reass+0x2c6>
 80188a4:	20060ce4 	.word	0x20060ce4
 80188a8:	20060ce0 	.word	0x20060ce0
 80188ac:	0801c894 	.word	0x0801c894
 80188b0:	0801ca04 	.word	0x0801ca04
 80188b4:	0801c8dc 	.word	0x0801c8dc
    goto nullreturn_ipr;
 80188b8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80188ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d106      	bne.n	80188ce <ip4_reass+0x2da>
 80188c0:	4b15      	ldr	r3, [pc, #84]	@ (8018918 <ip4_reass+0x324>)
 80188c2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80188c6:	4915      	ldr	r1, [pc, #84]	@ (801891c <ip4_reass+0x328>)
 80188c8:	4815      	ldr	r0, [pc, #84]	@ (8018920 <ip4_reass+0x32c>)
 80188ca:	f000 fc95 	bl	80191f8 <iprintf>
  if (ipr->p == NULL) {
 80188ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188d0:	685b      	ldr	r3, [r3, #4]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d116      	bne.n	8018904 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80188d6:	4b13      	ldr	r3, [pc, #76]	@ (8018924 <ip4_reass+0x330>)
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80188dc:	429a      	cmp	r2, r3
 80188de:	d006      	beq.n	80188ee <ip4_reass+0x2fa>
 80188e0:	4b0d      	ldr	r3, [pc, #52]	@ (8018918 <ip4_reass+0x324>)
 80188e2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80188e6:	4910      	ldr	r1, [pc, #64]	@ (8018928 <ip4_reass+0x334>)
 80188e8:	480d      	ldr	r0, [pc, #52]	@ (8018920 <ip4_reass+0x32c>)
 80188ea:	f000 fc85 	bl	80191f8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80188ee:	2100      	movs	r1, #0
 80188f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80188f2:	f7ff fce7 	bl	80182c4 <ip_reass_dequeue_datagram>
 80188f6:	e006      	b.n	8018906 <ip4_reass+0x312>
    goto nullreturn;
 80188f8:	bf00      	nop
 80188fa:	e004      	b.n	8018906 <ip4_reass+0x312>
    goto nullreturn;
 80188fc:	bf00      	nop
 80188fe:	e002      	b.n	8018906 <ip4_reass+0x312>
      goto nullreturn;
 8018900:	bf00      	nop
 8018902:	e000      	b.n	8018906 <ip4_reass+0x312>
  }

nullreturn:
 8018904:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018906:	6878      	ldr	r0, [r7, #4]
 8018908:	f7f8 f872 	bl	80109f0 <pbuf_free>
  return NULL;
 801890c:	2300      	movs	r3, #0
}
 801890e:	4618      	mov	r0, r3
 8018910:	3738      	adds	r7, #56	@ 0x38
 8018912:	46bd      	mov	sp, r7
 8018914:	bd80      	pop	{r7, pc}
 8018916:	bf00      	nop
 8018918:	0801c894 	.word	0x0801c894
 801891c:	0801ca20 	.word	0x0801ca20
 8018920:	0801c8dc 	.word	0x0801c8dc
 8018924:	20060ce0 	.word	0x20060ce0
 8018928:	0801ca2c 	.word	0x0801ca2c

0801892c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801892c:	b580      	push	{r7, lr}
 801892e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018930:	2005      	movs	r0, #5
 8018932:	f7f7 f943 	bl	800fbbc <memp_malloc>
 8018936:	4603      	mov	r3, r0
}
 8018938:	4618      	mov	r0, r3
 801893a:	bd80      	pop	{r7, pc}

0801893c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801893c:	b580      	push	{r7, lr}
 801893e:	b082      	sub	sp, #8
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d106      	bne.n	8018958 <ip_frag_free_pbuf_custom_ref+0x1c>
 801894a:	4b07      	ldr	r3, [pc, #28]	@ (8018968 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801894c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8018950:	4906      	ldr	r1, [pc, #24]	@ (801896c <ip_frag_free_pbuf_custom_ref+0x30>)
 8018952:	4807      	ldr	r0, [pc, #28]	@ (8018970 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018954:	f000 fc50 	bl	80191f8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018958:	6879      	ldr	r1, [r7, #4]
 801895a:	2005      	movs	r0, #5
 801895c:	f7f7 f9a4 	bl	800fca8 <memp_free>
}
 8018960:	bf00      	nop
 8018962:	3708      	adds	r7, #8
 8018964:	46bd      	mov	sp, r7
 8018966:	bd80      	pop	{r7, pc}
 8018968:	0801c894 	.word	0x0801c894
 801896c:	0801ca4c 	.word	0x0801ca4c
 8018970:	0801c8dc 	.word	0x0801c8dc

08018974 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018974:	b580      	push	{r7, lr}
 8018976:	b084      	sub	sp, #16
 8018978:	af00      	add	r7, sp, #0
 801897a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d106      	bne.n	8018994 <ipfrag_free_pbuf_custom+0x20>
 8018986:	4b11      	ldr	r3, [pc, #68]	@ (80189cc <ipfrag_free_pbuf_custom+0x58>)
 8018988:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801898c:	4910      	ldr	r1, [pc, #64]	@ (80189d0 <ipfrag_free_pbuf_custom+0x5c>)
 801898e:	4811      	ldr	r0, [pc, #68]	@ (80189d4 <ipfrag_free_pbuf_custom+0x60>)
 8018990:	f000 fc32 	bl	80191f8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018994:	68fa      	ldr	r2, [r7, #12]
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	429a      	cmp	r2, r3
 801899a:	d006      	beq.n	80189aa <ipfrag_free_pbuf_custom+0x36>
 801899c:	4b0b      	ldr	r3, [pc, #44]	@ (80189cc <ipfrag_free_pbuf_custom+0x58>)
 801899e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80189a2:	490d      	ldr	r1, [pc, #52]	@ (80189d8 <ipfrag_free_pbuf_custom+0x64>)
 80189a4:	480b      	ldr	r0, [pc, #44]	@ (80189d4 <ipfrag_free_pbuf_custom+0x60>)
 80189a6:	f000 fc27 	bl	80191f8 <iprintf>
  if (pcr->original != NULL) {
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	695b      	ldr	r3, [r3, #20]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d004      	beq.n	80189bc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	695b      	ldr	r3, [r3, #20]
 80189b6:	4618      	mov	r0, r3
 80189b8:	f7f8 f81a 	bl	80109f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80189bc:	68f8      	ldr	r0, [r7, #12]
 80189be:	f7ff ffbd 	bl	801893c <ip_frag_free_pbuf_custom_ref>
}
 80189c2:	bf00      	nop
 80189c4:	3710      	adds	r7, #16
 80189c6:	46bd      	mov	sp, r7
 80189c8:	bd80      	pop	{r7, pc}
 80189ca:	bf00      	nop
 80189cc:	0801c894 	.word	0x0801c894
 80189d0:	0801ca58 	.word	0x0801ca58
 80189d4:	0801c8dc 	.word	0x0801c8dc
 80189d8:	0801ca64 	.word	0x0801ca64

080189dc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b094      	sub	sp, #80	@ 0x50
 80189e0:	af02      	add	r7, sp, #8
 80189e2:	60f8      	str	r0, [r7, #12]
 80189e4:	60b9      	str	r1, [r7, #8]
 80189e6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80189e8:	2300      	movs	r3, #0
 80189ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80189ee:	68bb      	ldr	r3, [r7, #8]
 80189f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80189f2:	3b14      	subs	r3, #20
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	da00      	bge.n	80189fa <ip4_frag+0x1e>
 80189f8:	3307      	adds	r3, #7
 80189fa:	10db      	asrs	r3, r3, #3
 80189fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80189fe:	2314      	movs	r3, #20
 8018a00:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	685b      	ldr	r3, [r3, #4]
 8018a06:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8018a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a0a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a0e:	781b      	ldrb	r3, [r3, #0]
 8018a10:	f003 030f 	and.w	r3, r3, #15
 8018a14:	b2db      	uxtb	r3, r3
 8018a16:	009b      	lsls	r3, r3, #2
 8018a18:	b2db      	uxtb	r3, r3
 8018a1a:	2b14      	cmp	r3, #20
 8018a1c:	d002      	beq.n	8018a24 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018a1e:	f06f 0305 	mvn.w	r3, #5
 8018a22:	e110      	b.n	8018c46 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	895b      	ldrh	r3, [r3, #10]
 8018a28:	2b13      	cmp	r3, #19
 8018a2a:	d809      	bhi.n	8018a40 <ip4_frag+0x64>
 8018a2c:	4b88      	ldr	r3, [pc, #544]	@ (8018c50 <ip4_frag+0x274>)
 8018a2e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8018a32:	4988      	ldr	r1, [pc, #544]	@ (8018c54 <ip4_frag+0x278>)
 8018a34:	4888      	ldr	r0, [pc, #544]	@ (8018c58 <ip4_frag+0x27c>)
 8018a36:	f000 fbdf 	bl	80191f8 <iprintf>
 8018a3a:	f06f 0305 	mvn.w	r3, #5
 8018a3e:	e102      	b.n	8018c46 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a42:	88db      	ldrh	r3, [r3, #6]
 8018a44:	b29b      	uxth	r3, r3
 8018a46:	4618      	mov	r0, r3
 8018a48:	f7f6 fb28 	bl	800f09c <lwip_htons>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8018a50:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018a52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a56:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018a5a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018a5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018a60:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	891b      	ldrh	r3, [r3, #8]
 8018a66:	3b14      	subs	r3, #20
 8018a68:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8018a6c:	e0e1      	b.n	8018c32 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018a6e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018a70:	00db      	lsls	r3, r3, #3
 8018a72:	b29b      	uxth	r3, r3
 8018a74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018a78:	4293      	cmp	r3, r2
 8018a7a:	bf28      	it	cs
 8018a7c:	4613      	movcs	r3, r2
 8018a7e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018a80:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018a84:	2114      	movs	r1, #20
 8018a86:	200e      	movs	r0, #14
 8018a88:	f7f7 fcce 	bl	8010428 <pbuf_alloc>
 8018a8c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8018a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	f000 80d5 	beq.w	8018c40 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a98:	895b      	ldrh	r3, [r3, #10]
 8018a9a:	2b13      	cmp	r3, #19
 8018a9c:	d806      	bhi.n	8018aac <ip4_frag+0xd0>
 8018a9e:	4b6c      	ldr	r3, [pc, #432]	@ (8018c50 <ip4_frag+0x274>)
 8018aa0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8018aa4:	496d      	ldr	r1, [pc, #436]	@ (8018c5c <ip4_frag+0x280>)
 8018aa6:	486c      	ldr	r0, [pc, #432]	@ (8018c58 <ip4_frag+0x27c>)
 8018aa8:	f000 fba6 	bl	80191f8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018aae:	685b      	ldr	r3, [r3, #4]
 8018ab0:	2214      	movs	r2, #20
 8018ab2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	f000 fc7a 	bl	80193ae <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018abc:	685b      	ldr	r3, [r3, #4]
 8018abe:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8018ac0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018ac2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8018ac6:	e064      	b.n	8018b92 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	895a      	ldrh	r2, [r3, #10]
 8018acc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018ace:	1ad3      	subs	r3, r2, r3
 8018ad0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	895b      	ldrh	r3, [r3, #10]
 8018ad6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018ad8:	429a      	cmp	r2, r3
 8018ada:	d906      	bls.n	8018aea <ip4_frag+0x10e>
 8018adc:	4b5c      	ldr	r3, [pc, #368]	@ (8018c50 <ip4_frag+0x274>)
 8018ade:	f240 322d 	movw	r2, #813	@ 0x32d
 8018ae2:	495f      	ldr	r1, [pc, #380]	@ (8018c60 <ip4_frag+0x284>)
 8018ae4:	485c      	ldr	r0, [pc, #368]	@ (8018c58 <ip4_frag+0x27c>)
 8018ae6:	f000 fb87 	bl	80191f8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018aea:	8bfa      	ldrh	r2, [r7, #30]
 8018aec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018af0:	4293      	cmp	r3, r2
 8018af2:	bf28      	it	cs
 8018af4:	4613      	movcs	r3, r2
 8018af6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018afa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d105      	bne.n	8018b0e <ip4_frag+0x132>
        poff = 0;
 8018b02:	2300      	movs	r3, #0
 8018b04:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	60fb      	str	r3, [r7, #12]
        continue;
 8018b0c:	e041      	b.n	8018b92 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018b0e:	f7ff ff0d 	bl	801892c <ip_frag_alloc_pbuf_custom_ref>
 8018b12:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018b14:	69bb      	ldr	r3, [r7, #24]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d103      	bne.n	8018b22 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018b1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018b1c:	f7f7 ff68 	bl	80109f0 <pbuf_free>
        goto memerr;
 8018b20:	e08f      	b.n	8018c42 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018b22:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018b28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018b2a:	4413      	add	r3, r2
 8018b2c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8018b30:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018b34:	9201      	str	r2, [sp, #4]
 8018b36:	9300      	str	r3, [sp, #0]
 8018b38:	4603      	mov	r3, r0
 8018b3a:	2241      	movs	r2, #65	@ 0x41
 8018b3c:	2000      	movs	r0, #0
 8018b3e:	f7f7 fd9d 	bl	801067c <pbuf_alloced_custom>
 8018b42:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018b44:	697b      	ldr	r3, [r7, #20]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d106      	bne.n	8018b58 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018b4a:	69b8      	ldr	r0, [r7, #24]
 8018b4c:	f7ff fef6 	bl	801893c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018b50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018b52:	f7f7 ff4d 	bl	80109f0 <pbuf_free>
        goto memerr;
 8018b56:	e074      	b.n	8018c42 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018b58:	68f8      	ldr	r0, [r7, #12]
 8018b5a:	f7f7 ffef 	bl	8010b3c <pbuf_ref>
      pcr->original = p;
 8018b5e:	69bb      	ldr	r3, [r7, #24]
 8018b60:	68fa      	ldr	r2, [r7, #12]
 8018b62:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018b64:	69bb      	ldr	r3, [r7, #24]
 8018b66:	4a3f      	ldr	r2, [pc, #252]	@ (8018c64 <ip4_frag+0x288>)
 8018b68:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018b6a:	6979      	ldr	r1, [r7, #20]
 8018b6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018b6e:	f7f8 f80d 	bl	8010b8c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018b72:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8018b76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018b7a:	1ad3      	subs	r3, r2, r3
 8018b7c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8018b80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d004      	beq.n	8018b92 <ip4_frag+0x1b6>
        poff = 0;
 8018b88:	2300      	movs	r3, #0
 8018b8a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018b92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d196      	bne.n	8018ac8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018b9a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018b9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018ba0:	4413      	add	r3, r2
 8018ba2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018ba4:	68bb      	ldr	r3, [r7, #8]
 8018ba6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018ba8:	f1a3 0213 	sub.w	r2, r3, #19
 8018bac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018bb0:	429a      	cmp	r2, r3
 8018bb2:	bfcc      	ite	gt
 8018bb4:	2301      	movgt	r3, #1
 8018bb6:	2300      	movle	r3, #0
 8018bb8:	b2db      	uxtb	r3, r3
 8018bba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018bbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018bc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018bc4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8018bc6:	6a3b      	ldr	r3, [r7, #32]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d002      	beq.n	8018bd2 <ip4_frag+0x1f6>
 8018bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d003      	beq.n	8018bda <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018bd2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018bd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8018bd8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018bda:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018bdc:	4618      	mov	r0, r3
 8018bde:	f7f6 fa5d 	bl	800f09c <lwip_htons>
 8018be2:	4603      	mov	r3, r0
 8018be4:	461a      	mov	r2, r3
 8018be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018be8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018bea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018bec:	3314      	adds	r3, #20
 8018bee:	b29b      	uxth	r3, r3
 8018bf0:	4618      	mov	r0, r3
 8018bf2:	f7f6 fa53 	bl	800f09c <lwip_htons>
 8018bf6:	4603      	mov	r3, r0
 8018bf8:	461a      	mov	r2, r3
 8018bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018bfc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c00:	2200      	movs	r2, #0
 8018c02:	729a      	strb	r2, [r3, #10]
 8018c04:	2200      	movs	r2, #0
 8018c06:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018c08:	68bb      	ldr	r3, [r7, #8]
 8018c0a:	695b      	ldr	r3, [r3, #20]
 8018c0c:	687a      	ldr	r2, [r7, #4]
 8018c0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018c10:	68b8      	ldr	r0, [r7, #8]
 8018c12:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018c14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018c16:	f7f7 feeb 	bl	80109f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018c1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018c1e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018c20:	1ad3      	subs	r3, r2, r3
 8018c22:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8018c26:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8018c2a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018c2c:	4413      	add	r3, r2
 8018c2e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8018c32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	f47f af19 	bne.w	8018a6e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018c3c:	2300      	movs	r3, #0
 8018c3e:	e002      	b.n	8018c46 <ip4_frag+0x26a>
      goto memerr;
 8018c40:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018c46:	4618      	mov	r0, r3
 8018c48:	3748      	adds	r7, #72	@ 0x48
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	bd80      	pop	{r7, pc}
 8018c4e:	bf00      	nop
 8018c50:	0801c894 	.word	0x0801c894
 8018c54:	0801ca70 	.word	0x0801ca70
 8018c58:	0801c8dc 	.word	0x0801c8dc
 8018c5c:	0801ca8c 	.word	0x0801ca8c
 8018c60:	0801caac 	.word	0x0801caac
 8018c64:	08018975 	.word	0x08018975

08018c68 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018c68:	b580      	push	{r7, lr}
 8018c6a:	b086      	sub	sp, #24
 8018c6c:	af00      	add	r7, sp, #0
 8018c6e:	6078      	str	r0, [r7, #4]
 8018c70:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018c72:	230e      	movs	r3, #14
 8018c74:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	895b      	ldrh	r3, [r3, #10]
 8018c7a:	2b0e      	cmp	r3, #14
 8018c7c:	d96e      	bls.n	8018d5c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	7bdb      	ldrb	r3, [r3, #15]
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d106      	bne.n	8018c94 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018c86:	683b      	ldr	r3, [r7, #0]
 8018c88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018c8c:	3301      	adds	r3, #1
 8018c8e:	b2da      	uxtb	r2, r3
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	685b      	ldr	r3, [r3, #4]
 8018c98:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018c9a:	693b      	ldr	r3, [r7, #16]
 8018c9c:	7b1a      	ldrb	r2, [r3, #12]
 8018c9e:	7b5b      	ldrb	r3, [r3, #13]
 8018ca0:	021b      	lsls	r3, r3, #8
 8018ca2:	4313      	orrs	r3, r2
 8018ca4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018ca6:	693b      	ldr	r3, [r7, #16]
 8018ca8:	781b      	ldrb	r3, [r3, #0]
 8018caa:	f003 0301 	and.w	r3, r3, #1
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d023      	beq.n	8018cfa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018cb2:	693b      	ldr	r3, [r7, #16]
 8018cb4:	781b      	ldrb	r3, [r3, #0]
 8018cb6:	2b01      	cmp	r3, #1
 8018cb8:	d10f      	bne.n	8018cda <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018cba:	693b      	ldr	r3, [r7, #16]
 8018cbc:	785b      	ldrb	r3, [r3, #1]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d11b      	bne.n	8018cfa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018cc2:	693b      	ldr	r3, [r7, #16]
 8018cc4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018cc6:	2b5e      	cmp	r3, #94	@ 0x5e
 8018cc8:	d117      	bne.n	8018cfa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	7b5b      	ldrb	r3, [r3, #13]
 8018cce:	f043 0310 	orr.w	r3, r3, #16
 8018cd2:	b2da      	uxtb	r2, r3
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	735a      	strb	r2, [r3, #13]
 8018cd8:	e00f      	b.n	8018cfa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018cda:	693b      	ldr	r3, [r7, #16]
 8018cdc:	2206      	movs	r2, #6
 8018cde:	4928      	ldr	r1, [pc, #160]	@ (8018d80 <ethernet_input+0x118>)
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f000 fade 	bl	80192a2 <memcmp>
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d106      	bne.n	8018cfa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	7b5b      	ldrb	r3, [r3, #13]
 8018cf0:	f043 0308 	orr.w	r3, r3, #8
 8018cf4:	b2da      	uxtb	r2, r3
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018cfa:	89fb      	ldrh	r3, [r7, #14]
 8018cfc:	2b08      	cmp	r3, #8
 8018cfe:	d003      	beq.n	8018d08 <ethernet_input+0xa0>
 8018d00:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8018d04:	d014      	beq.n	8018d30 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018d06:	e032      	b.n	8018d6e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018d08:	683b      	ldr	r3, [r7, #0]
 8018d0a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018d0e:	f003 0308 	and.w	r3, r3, #8
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d024      	beq.n	8018d60 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018d16:	8afb      	ldrh	r3, [r7, #22]
 8018d18:	4619      	mov	r1, r3
 8018d1a:	6878      	ldr	r0, [r7, #4]
 8018d1c:	f7f7 fde2 	bl	80108e4 <pbuf_remove_header>
 8018d20:	4603      	mov	r3, r0
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d11e      	bne.n	8018d64 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018d26:	6839      	ldr	r1, [r7, #0]
 8018d28:	6878      	ldr	r0, [r7, #4]
 8018d2a:	f7fe ff21 	bl	8017b70 <ip4_input>
      break;
 8018d2e:	e013      	b.n	8018d58 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018d30:	683b      	ldr	r3, [r7, #0]
 8018d32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018d36:	f003 0308 	and.w	r3, r3, #8
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d014      	beq.n	8018d68 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018d3e:	8afb      	ldrh	r3, [r7, #22]
 8018d40:	4619      	mov	r1, r3
 8018d42:	6878      	ldr	r0, [r7, #4]
 8018d44:	f7f7 fdce 	bl	80108e4 <pbuf_remove_header>
 8018d48:	4603      	mov	r3, r0
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d10e      	bne.n	8018d6c <ethernet_input+0x104>
        etharp_input(p, netif);
 8018d4e:	6839      	ldr	r1, [r7, #0]
 8018d50:	6878      	ldr	r0, [r7, #4]
 8018d52:	f7fe f89b 	bl	8016e8c <etharp_input>
      break;
 8018d56:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018d58:	2300      	movs	r3, #0
 8018d5a:	e00c      	b.n	8018d76 <ethernet_input+0x10e>
    goto free_and_return;
 8018d5c:	bf00      	nop
 8018d5e:	e006      	b.n	8018d6e <ethernet_input+0x106>
        goto free_and_return;
 8018d60:	bf00      	nop
 8018d62:	e004      	b.n	8018d6e <ethernet_input+0x106>
        goto free_and_return;
 8018d64:	bf00      	nop
 8018d66:	e002      	b.n	8018d6e <ethernet_input+0x106>
        goto free_and_return;
 8018d68:	bf00      	nop
 8018d6a:	e000      	b.n	8018d6e <ethernet_input+0x106>
        goto free_and_return;
 8018d6c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018d6e:	6878      	ldr	r0, [r7, #4]
 8018d70:	f7f7 fe3e 	bl	80109f0 <pbuf_free>
  return ERR_OK;
 8018d74:	2300      	movs	r3, #0
}
 8018d76:	4618      	mov	r0, r3
 8018d78:	3718      	adds	r7, #24
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	bd80      	pop	{r7, pc}
 8018d7e:	bf00      	nop
 8018d80:	0801ccd4 	.word	0x0801ccd4

08018d84 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018d84:	b580      	push	{r7, lr}
 8018d86:	b086      	sub	sp, #24
 8018d88:	af00      	add	r7, sp, #0
 8018d8a:	60f8      	str	r0, [r7, #12]
 8018d8c:	60b9      	str	r1, [r7, #8]
 8018d8e:	607a      	str	r2, [r7, #4]
 8018d90:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018d92:	8c3b      	ldrh	r3, [r7, #32]
 8018d94:	4618      	mov	r0, r3
 8018d96:	f7f6 f981 	bl	800f09c <lwip_htons>
 8018d9a:	4603      	mov	r3, r0
 8018d9c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018d9e:	210e      	movs	r1, #14
 8018da0:	68b8      	ldr	r0, [r7, #8]
 8018da2:	f7f7 fd8f 	bl	80108c4 <pbuf_add_header>
 8018da6:	4603      	mov	r3, r0
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d125      	bne.n	8018df8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018dac:	68bb      	ldr	r3, [r7, #8]
 8018dae:	685b      	ldr	r3, [r3, #4]
 8018db0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018db2:	693b      	ldr	r3, [r7, #16]
 8018db4:	8afa      	ldrh	r2, [r7, #22]
 8018db6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018db8:	693b      	ldr	r3, [r7, #16]
 8018dba:	2206      	movs	r2, #6
 8018dbc:	6839      	ldr	r1, [r7, #0]
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	f000 faf5 	bl	80193ae <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018dc4:	693b      	ldr	r3, [r7, #16]
 8018dc6:	3306      	adds	r3, #6
 8018dc8:	2206      	movs	r2, #6
 8018dca:	6879      	ldr	r1, [r7, #4]
 8018dcc:	4618      	mov	r0, r3
 8018dce:	f000 faee 	bl	80193ae <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018dd8:	2b06      	cmp	r3, #6
 8018dda:	d006      	beq.n	8018dea <ethernet_output+0x66>
 8018ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8018e08 <ethernet_output+0x84>)
 8018dde:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8018de2:	490a      	ldr	r1, [pc, #40]	@ (8018e0c <ethernet_output+0x88>)
 8018de4:	480a      	ldr	r0, [pc, #40]	@ (8018e10 <ethernet_output+0x8c>)
 8018de6:	f000 fa07 	bl	80191f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	699b      	ldr	r3, [r3, #24]
 8018dee:	68b9      	ldr	r1, [r7, #8]
 8018df0:	68f8      	ldr	r0, [r7, #12]
 8018df2:	4798      	blx	r3
 8018df4:	4603      	mov	r3, r0
 8018df6:	e002      	b.n	8018dfe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018df8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018dfa:	f06f 0301 	mvn.w	r3, #1
}
 8018dfe:	4618      	mov	r0, r3
 8018e00:	3718      	adds	r7, #24
 8018e02:	46bd      	mov	sp, r7
 8018e04:	bd80      	pop	{r7, pc}
 8018e06:	bf00      	nop
 8018e08:	0801cabc 	.word	0x0801cabc
 8018e0c:	0801caf4 	.word	0x0801caf4
 8018e10:	0801cb28 	.word	0x0801cb28

08018e14 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b082      	sub	sp, #8
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
 8018e1c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018e1e:	683b      	ldr	r3, [r7, #0]
 8018e20:	2200      	movs	r2, #0
 8018e22:	2104      	movs	r1, #4
 8018e24:	4618      	mov	r0, r3
 8018e26:	f7f2 fdff 	bl	800ba28 <osMessageQueueNew>
 8018e2a:	4602      	mov	r2, r0
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d102      	bne.n	8018e3e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8018e38:	f04f 33ff 	mov.w	r3, #4294967295
 8018e3c:	e000      	b.n	8018e40 <sys_mbox_new+0x2c>

  return ERR_OK;
 8018e3e:	2300      	movs	r3, #0
}
 8018e40:	4618      	mov	r0, r3
 8018e42:	3708      	adds	r7, #8
 8018e44:	46bd      	mov	sp, r7
 8018e46:	bd80      	pop	{r7, pc}

08018e48 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018e48:	b580      	push	{r7, lr}
 8018e4a:	b084      	sub	sp, #16
 8018e4c:	af00      	add	r7, sp, #0
 8018e4e:	6078      	str	r0, [r7, #4]
 8018e50:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	6818      	ldr	r0, [r3, #0]
 8018e56:	4639      	mov	r1, r7
 8018e58:	2300      	movs	r3, #0
 8018e5a:	2200      	movs	r2, #0
 8018e5c:	f7f2 fe56 	bl	800bb0c <osMessageQueuePut>
 8018e60:	4603      	mov	r3, r0
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d102      	bne.n	8018e6c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8018e66:	2300      	movs	r3, #0
 8018e68:	73fb      	strb	r3, [r7, #15]
 8018e6a:	e001      	b.n	8018e70 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018e6c:	23ff      	movs	r3, #255	@ 0xff
 8018e6e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018e74:	4618      	mov	r0, r3
 8018e76:	3710      	adds	r7, #16
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bd80      	pop	{r7, pc}

08018e7c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b086      	sub	sp, #24
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	60f8      	str	r0, [r7, #12]
 8018e84:	60b9      	str	r1, [r7, #8]
 8018e86:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018e88:	f7f2 faf0 	bl	800b46c <osKernelGetTickCount>
 8018e8c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d013      	beq.n	8018ebc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	6818      	ldr	r0, [r3, #0]
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	2200      	movs	r2, #0
 8018e9c:	68b9      	ldr	r1, [r7, #8]
 8018e9e:	f7f2 fe8f 	bl	800bbc0 <osMessageQueueGet>
 8018ea2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8018ea4:	693b      	ldr	r3, [r7, #16]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d105      	bne.n	8018eb6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018eaa:	f7f2 fadf 	bl	800b46c <osKernelGetTickCount>
 8018eae:	4602      	mov	r2, r0
 8018eb0:	697b      	ldr	r3, [r7, #20]
 8018eb2:	1ad3      	subs	r3, r2, r3
 8018eb4:	e00f      	b.n	8018ed6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8018eba:	e00c      	b.n	8018ed6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	6818      	ldr	r0, [r3, #0]
 8018ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8018ec4:	2200      	movs	r2, #0
 8018ec6:	68b9      	ldr	r1, [r7, #8]
 8018ec8:	f7f2 fe7a 	bl	800bbc0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018ecc:	f7f2 face 	bl	800b46c <osKernelGetTickCount>
 8018ed0:	4602      	mov	r2, r0
 8018ed2:	697b      	ldr	r3, [r7, #20]
 8018ed4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	3718      	adds	r7, #24
 8018eda:	46bd      	mov	sp, r7
 8018edc:	bd80      	pop	{r7, pc}

08018ede <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018ede:	b480      	push	{r7}
 8018ee0:	b083      	sub	sp, #12
 8018ee2:	af00      	add	r7, sp, #0
 8018ee4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d101      	bne.n	8018ef2 <sys_mbox_valid+0x14>
    return 0;
 8018eee:	2300      	movs	r3, #0
 8018ef0:	e000      	b.n	8018ef4 <sys_mbox_valid+0x16>
  else
    return 1;
 8018ef2:	2301      	movs	r3, #1
}
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	370c      	adds	r7, #12
 8018ef8:	46bd      	mov	sp, r7
 8018efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018efe:	4770      	bx	lr

08018f00 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018f00:	b580      	push	{r7, lr}
 8018f02:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8018f04:	2000      	movs	r0, #0
 8018f06:	f7f2 fb71 	bl	800b5ec <osMutexNew>
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	4a01      	ldr	r2, [pc, #4]	@ (8018f14 <sys_init+0x14>)
 8018f0e:	6013      	str	r3, [r2, #0]
#endif
}
 8018f10:	bf00      	nop
 8018f12:	bd80      	pop	{r7, pc}
 8018f14:	20060ce8 	.word	0x20060ce8

08018f18 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	b082      	sub	sp, #8
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8018f20:	2000      	movs	r0, #0
 8018f22:	f7f2 fb63 	bl	800b5ec <osMutexNew>
 8018f26:	4602      	mov	r2, r0
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d102      	bne.n	8018f3a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018f34:	f04f 33ff 	mov.w	r3, #4294967295
 8018f38:	e000      	b.n	8018f3c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018f3a:	2300      	movs	r3, #0
}
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	3708      	adds	r7, #8
 8018f40:	46bd      	mov	sp, r7
 8018f42:	bd80      	pop	{r7, pc}

08018f44 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018f44:	b580      	push	{r7, lr}
 8018f46:	b082      	sub	sp, #8
 8018f48:	af00      	add	r7, sp, #0
 8018f4a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	f04f 31ff 	mov.w	r1, #4294967295
 8018f54:	4618      	mov	r0, r3
 8018f56:	f7f2 fbce 	bl	800b6f6 <osMutexAcquire>
#endif
}
 8018f5a:	bf00      	nop
 8018f5c:	3708      	adds	r7, #8
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	bd80      	pop	{r7, pc}

08018f62 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018f62:	b580      	push	{r7, lr}
 8018f64:	b082      	sub	sp, #8
 8018f66:	af00      	add	r7, sp, #0
 8018f68:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	4618      	mov	r0, r3
 8018f70:	f7f2 fc0b 	bl	800b78a <osMutexRelease>
}
 8018f74:	bf00      	nop
 8018f76:	3708      	adds	r7, #8
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	bd80      	pop	{r7, pc}

08018f7c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	b08e      	sub	sp, #56	@ 0x38
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	60f8      	str	r0, [r7, #12]
 8018f84:	60b9      	str	r1, [r7, #8]
 8018f86:	607a      	str	r2, [r7, #4]
 8018f88:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8018f8a:	f107 0314 	add.w	r3, r7, #20
 8018f8e:	2224      	movs	r2, #36	@ 0x24
 8018f90:	2100      	movs	r1, #0
 8018f92:	4618      	mov	r0, r3
 8018f94:	f000 f995 	bl	80192c2 <memset>
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	617b      	str	r3, [r7, #20]
 8018f9c:	683b      	ldr	r3, [r7, #0]
 8018f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018fa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8018fa4:	f107 0314 	add.w	r3, r7, #20
 8018fa8:	461a      	mov	r2, r3
 8018faa:	6879      	ldr	r1, [r7, #4]
 8018fac:	68b8      	ldr	r0, [r7, #8]
 8018fae:	f7f2 fa71 	bl	800b494 <osThreadNew>
 8018fb2:	4603      	mov	r3, r0
#endif
}
 8018fb4:	4618      	mov	r0, r3
 8018fb6:	3738      	adds	r7, #56	@ 0x38
 8018fb8:	46bd      	mov	sp, r7
 8018fba:	bd80      	pop	{r7, pc}

08018fbc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018fbc:	b580      	push	{r7, lr}
 8018fbe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8018fc0:	4b04      	ldr	r3, [pc, #16]	@ (8018fd4 <sys_arch_protect+0x18>)
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8018fc8:	4618      	mov	r0, r3
 8018fca:	f7f2 fb94 	bl	800b6f6 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8018fce:	2301      	movs	r3, #1
}
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	bd80      	pop	{r7, pc}
 8018fd4:	20060ce8 	.word	0x20060ce8

08018fd8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018fd8:	b580      	push	{r7, lr}
 8018fda:	b082      	sub	sp, #8
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018fe0:	4b04      	ldr	r3, [pc, #16]	@ (8018ff4 <sys_arch_unprotect+0x1c>)
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	f7f2 fbd0 	bl	800b78a <osMutexRelease>
}
 8018fea:	bf00      	nop
 8018fec:	3708      	adds	r7, #8
 8018fee:	46bd      	mov	sp, r7
 8018ff0:	bd80      	pop	{r7, pc}
 8018ff2:	bf00      	nop
 8018ff4:	20060ce8 	.word	0x20060ce8

08018ff8 <rand>:
 8018ff8:	4b16      	ldr	r3, [pc, #88]	@ (8019054 <rand+0x5c>)
 8018ffa:	b510      	push	{r4, lr}
 8018ffc:	681c      	ldr	r4, [r3, #0]
 8018ffe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019000:	b9b3      	cbnz	r3, 8019030 <rand+0x38>
 8019002:	2018      	movs	r0, #24
 8019004:	f000 fa48 	bl	8019498 <malloc>
 8019008:	4602      	mov	r2, r0
 801900a:	6320      	str	r0, [r4, #48]	@ 0x30
 801900c:	b920      	cbnz	r0, 8019018 <rand+0x20>
 801900e:	4b12      	ldr	r3, [pc, #72]	@ (8019058 <rand+0x60>)
 8019010:	2152      	movs	r1, #82	@ 0x52
 8019012:	4812      	ldr	r0, [pc, #72]	@ (801905c <rand+0x64>)
 8019014:	f000 f9d8 	bl	80193c8 <__assert_func>
 8019018:	4911      	ldr	r1, [pc, #68]	@ (8019060 <rand+0x68>)
 801901a:	4b12      	ldr	r3, [pc, #72]	@ (8019064 <rand+0x6c>)
 801901c:	e9c0 1300 	strd	r1, r3, [r0]
 8019020:	4b11      	ldr	r3, [pc, #68]	@ (8019068 <rand+0x70>)
 8019022:	2100      	movs	r1, #0
 8019024:	6083      	str	r3, [r0, #8]
 8019026:	230b      	movs	r3, #11
 8019028:	8183      	strh	r3, [r0, #12]
 801902a:	2001      	movs	r0, #1
 801902c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019030:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019032:	480e      	ldr	r0, [pc, #56]	@ (801906c <rand+0x74>)
 8019034:	690b      	ldr	r3, [r1, #16]
 8019036:	694c      	ldr	r4, [r1, #20]
 8019038:	4a0d      	ldr	r2, [pc, #52]	@ (8019070 <rand+0x78>)
 801903a:	4358      	muls	r0, r3
 801903c:	fb02 0004 	mla	r0, r2, r4, r0
 8019040:	fba3 3202 	umull	r3, r2, r3, r2
 8019044:	3301      	adds	r3, #1
 8019046:	eb40 0002 	adc.w	r0, r0, r2
 801904a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801904e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8019052:	bd10      	pop	{r4, pc}
 8019054:	20050040 	.word	0x20050040
 8019058:	0801cce2 	.word	0x0801cce2
 801905c:	0801ccf9 	.word	0x0801ccf9
 8019060:	abcd330e 	.word	0xabcd330e
 8019064:	e66d1234 	.word	0xe66d1234
 8019068:	0005deec 	.word	0x0005deec
 801906c:	5851f42d 	.word	0x5851f42d
 8019070:	4c957f2d 	.word	0x4c957f2d

08019074 <std>:
 8019074:	2300      	movs	r3, #0
 8019076:	b510      	push	{r4, lr}
 8019078:	4604      	mov	r4, r0
 801907a:	6083      	str	r3, [r0, #8]
 801907c:	8181      	strh	r1, [r0, #12]
 801907e:	4619      	mov	r1, r3
 8019080:	6643      	str	r3, [r0, #100]	@ 0x64
 8019082:	81c2      	strh	r2, [r0, #14]
 8019084:	2208      	movs	r2, #8
 8019086:	6183      	str	r3, [r0, #24]
 8019088:	e9c0 3300 	strd	r3, r3, [r0]
 801908c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019090:	305c      	adds	r0, #92	@ 0x5c
 8019092:	f000 f916 	bl	80192c2 <memset>
 8019096:	4b0d      	ldr	r3, [pc, #52]	@ (80190cc <std+0x58>)
 8019098:	6224      	str	r4, [r4, #32]
 801909a:	6263      	str	r3, [r4, #36]	@ 0x24
 801909c:	4b0c      	ldr	r3, [pc, #48]	@ (80190d0 <std+0x5c>)
 801909e:	62a3      	str	r3, [r4, #40]	@ 0x28
 80190a0:	4b0c      	ldr	r3, [pc, #48]	@ (80190d4 <std+0x60>)
 80190a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80190a4:	4b0c      	ldr	r3, [pc, #48]	@ (80190d8 <std+0x64>)
 80190a6:	6323      	str	r3, [r4, #48]	@ 0x30
 80190a8:	4b0c      	ldr	r3, [pc, #48]	@ (80190dc <std+0x68>)
 80190aa:	429c      	cmp	r4, r3
 80190ac:	d006      	beq.n	80190bc <std+0x48>
 80190ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80190b2:	4294      	cmp	r4, r2
 80190b4:	d002      	beq.n	80190bc <std+0x48>
 80190b6:	33d0      	adds	r3, #208	@ 0xd0
 80190b8:	429c      	cmp	r4, r3
 80190ba:	d105      	bne.n	80190c8 <std+0x54>
 80190bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80190c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190c4:	f000 b970 	b.w	80193a8 <__retarget_lock_init_recursive>
 80190c8:	bd10      	pop	{r4, pc}
 80190ca:	bf00      	nop
 80190cc:	0801921d 	.word	0x0801921d
 80190d0:	0801923f 	.word	0x0801923f
 80190d4:	08019277 	.word	0x08019277
 80190d8:	0801929b 	.word	0x0801929b
 80190dc:	20060cec 	.word	0x20060cec

080190e0 <stdio_exit_handler>:
 80190e0:	4a02      	ldr	r2, [pc, #8]	@ (80190ec <stdio_exit_handler+0xc>)
 80190e2:	4903      	ldr	r1, [pc, #12]	@ (80190f0 <stdio_exit_handler+0x10>)
 80190e4:	4803      	ldr	r0, [pc, #12]	@ (80190f4 <stdio_exit_handler+0x14>)
 80190e6:	f000 b869 	b.w	80191bc <_fwalk_sglue>
 80190ea:	bf00      	nop
 80190ec:	20050034 	.word	0x20050034
 80190f0:	08019cb5 	.word	0x08019cb5
 80190f4:	20050044 	.word	0x20050044

080190f8 <cleanup_stdio>:
 80190f8:	6841      	ldr	r1, [r0, #4]
 80190fa:	4b0c      	ldr	r3, [pc, #48]	@ (801912c <cleanup_stdio+0x34>)
 80190fc:	4299      	cmp	r1, r3
 80190fe:	b510      	push	{r4, lr}
 8019100:	4604      	mov	r4, r0
 8019102:	d001      	beq.n	8019108 <cleanup_stdio+0x10>
 8019104:	f000 fdd6 	bl	8019cb4 <_fflush_r>
 8019108:	68a1      	ldr	r1, [r4, #8]
 801910a:	4b09      	ldr	r3, [pc, #36]	@ (8019130 <cleanup_stdio+0x38>)
 801910c:	4299      	cmp	r1, r3
 801910e:	d002      	beq.n	8019116 <cleanup_stdio+0x1e>
 8019110:	4620      	mov	r0, r4
 8019112:	f000 fdcf 	bl	8019cb4 <_fflush_r>
 8019116:	68e1      	ldr	r1, [r4, #12]
 8019118:	4b06      	ldr	r3, [pc, #24]	@ (8019134 <cleanup_stdio+0x3c>)
 801911a:	4299      	cmp	r1, r3
 801911c:	d004      	beq.n	8019128 <cleanup_stdio+0x30>
 801911e:	4620      	mov	r0, r4
 8019120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019124:	f000 bdc6 	b.w	8019cb4 <_fflush_r>
 8019128:	bd10      	pop	{r4, pc}
 801912a:	bf00      	nop
 801912c:	20060cec 	.word	0x20060cec
 8019130:	20060d54 	.word	0x20060d54
 8019134:	20060dbc 	.word	0x20060dbc

08019138 <global_stdio_init.part.0>:
 8019138:	b510      	push	{r4, lr}
 801913a:	4b0b      	ldr	r3, [pc, #44]	@ (8019168 <global_stdio_init.part.0+0x30>)
 801913c:	2104      	movs	r1, #4
 801913e:	4c0b      	ldr	r4, [pc, #44]	@ (801916c <global_stdio_init.part.0+0x34>)
 8019140:	4a0b      	ldr	r2, [pc, #44]	@ (8019170 <global_stdio_init.part.0+0x38>)
 8019142:	4620      	mov	r0, r4
 8019144:	601a      	str	r2, [r3, #0]
 8019146:	2200      	movs	r2, #0
 8019148:	f7ff ff94 	bl	8019074 <std>
 801914c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019150:	2201      	movs	r2, #1
 8019152:	2109      	movs	r1, #9
 8019154:	f7ff ff8e 	bl	8019074 <std>
 8019158:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801915c:	2202      	movs	r2, #2
 801915e:	2112      	movs	r1, #18
 8019160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019164:	f7ff bf86 	b.w	8019074 <std>
 8019168:	20060e24 	.word	0x20060e24
 801916c:	20060cec 	.word	0x20060cec
 8019170:	080190e1 	.word	0x080190e1

08019174 <__sfp_lock_acquire>:
 8019174:	4801      	ldr	r0, [pc, #4]	@ (801917c <__sfp_lock_acquire+0x8>)
 8019176:	f000 b918 	b.w	80193aa <__retarget_lock_acquire_recursive>
 801917a:	bf00      	nop
 801917c:	20060e2d 	.word	0x20060e2d

08019180 <__sfp_lock_release>:
 8019180:	4801      	ldr	r0, [pc, #4]	@ (8019188 <__sfp_lock_release+0x8>)
 8019182:	f000 b913 	b.w	80193ac <__retarget_lock_release_recursive>
 8019186:	bf00      	nop
 8019188:	20060e2d 	.word	0x20060e2d

0801918c <__sinit>:
 801918c:	b510      	push	{r4, lr}
 801918e:	4604      	mov	r4, r0
 8019190:	f7ff fff0 	bl	8019174 <__sfp_lock_acquire>
 8019194:	6a23      	ldr	r3, [r4, #32]
 8019196:	b11b      	cbz	r3, 80191a0 <__sinit+0x14>
 8019198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801919c:	f7ff bff0 	b.w	8019180 <__sfp_lock_release>
 80191a0:	4b04      	ldr	r3, [pc, #16]	@ (80191b4 <__sinit+0x28>)
 80191a2:	6223      	str	r3, [r4, #32]
 80191a4:	4b04      	ldr	r3, [pc, #16]	@ (80191b8 <__sinit+0x2c>)
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d1f5      	bne.n	8019198 <__sinit+0xc>
 80191ac:	f7ff ffc4 	bl	8019138 <global_stdio_init.part.0>
 80191b0:	e7f2      	b.n	8019198 <__sinit+0xc>
 80191b2:	bf00      	nop
 80191b4:	080190f9 	.word	0x080190f9
 80191b8:	20060e24 	.word	0x20060e24

080191bc <_fwalk_sglue>:
 80191bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191c0:	4607      	mov	r7, r0
 80191c2:	4688      	mov	r8, r1
 80191c4:	4614      	mov	r4, r2
 80191c6:	2600      	movs	r6, #0
 80191c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80191cc:	f1b9 0901 	subs.w	r9, r9, #1
 80191d0:	d505      	bpl.n	80191de <_fwalk_sglue+0x22>
 80191d2:	6824      	ldr	r4, [r4, #0]
 80191d4:	2c00      	cmp	r4, #0
 80191d6:	d1f7      	bne.n	80191c8 <_fwalk_sglue+0xc>
 80191d8:	4630      	mov	r0, r6
 80191da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80191de:	89ab      	ldrh	r3, [r5, #12]
 80191e0:	2b01      	cmp	r3, #1
 80191e2:	d907      	bls.n	80191f4 <_fwalk_sglue+0x38>
 80191e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80191e8:	3301      	adds	r3, #1
 80191ea:	d003      	beq.n	80191f4 <_fwalk_sglue+0x38>
 80191ec:	4629      	mov	r1, r5
 80191ee:	4638      	mov	r0, r7
 80191f0:	47c0      	blx	r8
 80191f2:	4306      	orrs	r6, r0
 80191f4:	3568      	adds	r5, #104	@ 0x68
 80191f6:	e7e9      	b.n	80191cc <_fwalk_sglue+0x10>

080191f8 <iprintf>:
 80191f8:	b40f      	push	{r0, r1, r2, r3}
 80191fa:	b507      	push	{r0, r1, r2, lr}
 80191fc:	4906      	ldr	r1, [pc, #24]	@ (8019218 <iprintf+0x20>)
 80191fe:	ab04      	add	r3, sp, #16
 8019200:	6808      	ldr	r0, [r1, #0]
 8019202:	f853 2b04 	ldr.w	r2, [r3], #4
 8019206:	6881      	ldr	r1, [r0, #8]
 8019208:	9301      	str	r3, [sp, #4]
 801920a:	f000 fa25 	bl	8019658 <_vfiprintf_r>
 801920e:	b003      	add	sp, #12
 8019210:	f85d eb04 	ldr.w	lr, [sp], #4
 8019214:	b004      	add	sp, #16
 8019216:	4770      	bx	lr
 8019218:	20050040 	.word	0x20050040

0801921c <__sread>:
 801921c:	b510      	push	{r4, lr}
 801921e:	460c      	mov	r4, r1
 8019220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019224:	f000 f878 	bl	8019318 <_read_r>
 8019228:	2800      	cmp	r0, #0
 801922a:	bfab      	itete	ge
 801922c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801922e:	89a3      	ldrhlt	r3, [r4, #12]
 8019230:	181b      	addge	r3, r3, r0
 8019232:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019236:	bfac      	ite	ge
 8019238:	6563      	strge	r3, [r4, #84]	@ 0x54
 801923a:	81a3      	strhlt	r3, [r4, #12]
 801923c:	bd10      	pop	{r4, pc}

0801923e <__swrite>:
 801923e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019242:	461f      	mov	r7, r3
 8019244:	898b      	ldrh	r3, [r1, #12]
 8019246:	4605      	mov	r5, r0
 8019248:	460c      	mov	r4, r1
 801924a:	05db      	lsls	r3, r3, #23
 801924c:	4616      	mov	r6, r2
 801924e:	d505      	bpl.n	801925c <__swrite+0x1e>
 8019250:	2302      	movs	r3, #2
 8019252:	2200      	movs	r2, #0
 8019254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019258:	f000 f84c 	bl	80192f4 <_lseek_r>
 801925c:	89a3      	ldrh	r3, [r4, #12]
 801925e:	4632      	mov	r2, r6
 8019260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019264:	4628      	mov	r0, r5
 8019266:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801926a:	81a3      	strh	r3, [r4, #12]
 801926c:	463b      	mov	r3, r7
 801926e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019272:	f000 b863 	b.w	801933c <_write_r>

08019276 <__sseek>:
 8019276:	b510      	push	{r4, lr}
 8019278:	460c      	mov	r4, r1
 801927a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801927e:	f000 f839 	bl	80192f4 <_lseek_r>
 8019282:	1c43      	adds	r3, r0, #1
 8019284:	89a3      	ldrh	r3, [r4, #12]
 8019286:	bf15      	itete	ne
 8019288:	6560      	strne	r0, [r4, #84]	@ 0x54
 801928a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801928e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019292:	81a3      	strheq	r3, [r4, #12]
 8019294:	bf18      	it	ne
 8019296:	81a3      	strhne	r3, [r4, #12]
 8019298:	bd10      	pop	{r4, pc}

0801929a <__sclose>:
 801929a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801929e:	f000 b819 	b.w	80192d4 <_close_r>

080192a2 <memcmp>:
 80192a2:	3901      	subs	r1, #1
 80192a4:	4402      	add	r2, r0
 80192a6:	b510      	push	{r4, lr}
 80192a8:	4290      	cmp	r0, r2
 80192aa:	d101      	bne.n	80192b0 <memcmp+0xe>
 80192ac:	2000      	movs	r0, #0
 80192ae:	e005      	b.n	80192bc <memcmp+0x1a>
 80192b0:	7803      	ldrb	r3, [r0, #0]
 80192b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80192b6:	42a3      	cmp	r3, r4
 80192b8:	d001      	beq.n	80192be <memcmp+0x1c>
 80192ba:	1b18      	subs	r0, r3, r4
 80192bc:	bd10      	pop	{r4, pc}
 80192be:	3001      	adds	r0, #1
 80192c0:	e7f2      	b.n	80192a8 <memcmp+0x6>

080192c2 <memset>:
 80192c2:	4402      	add	r2, r0
 80192c4:	4603      	mov	r3, r0
 80192c6:	4293      	cmp	r3, r2
 80192c8:	d100      	bne.n	80192cc <memset+0xa>
 80192ca:	4770      	bx	lr
 80192cc:	f803 1b01 	strb.w	r1, [r3], #1
 80192d0:	e7f9      	b.n	80192c6 <memset+0x4>
	...

080192d4 <_close_r>:
 80192d4:	b538      	push	{r3, r4, r5, lr}
 80192d6:	2300      	movs	r3, #0
 80192d8:	4d05      	ldr	r5, [pc, #20]	@ (80192f0 <_close_r+0x1c>)
 80192da:	4604      	mov	r4, r0
 80192dc:	4608      	mov	r0, r1
 80192de:	602b      	str	r3, [r5, #0]
 80192e0:	f7e7 fde6 	bl	8000eb0 <_close>
 80192e4:	1c43      	adds	r3, r0, #1
 80192e6:	d102      	bne.n	80192ee <_close_r+0x1a>
 80192e8:	682b      	ldr	r3, [r5, #0]
 80192ea:	b103      	cbz	r3, 80192ee <_close_r+0x1a>
 80192ec:	6023      	str	r3, [r4, #0]
 80192ee:	bd38      	pop	{r3, r4, r5, pc}
 80192f0:	20060e28 	.word	0x20060e28

080192f4 <_lseek_r>:
 80192f4:	b538      	push	{r3, r4, r5, lr}
 80192f6:	4604      	mov	r4, r0
 80192f8:	4d06      	ldr	r5, [pc, #24]	@ (8019314 <_lseek_r+0x20>)
 80192fa:	4608      	mov	r0, r1
 80192fc:	4611      	mov	r1, r2
 80192fe:	2200      	movs	r2, #0
 8019300:	602a      	str	r2, [r5, #0]
 8019302:	461a      	mov	r2, r3
 8019304:	f7e7 fdfb 	bl	8000efe <_lseek>
 8019308:	1c43      	adds	r3, r0, #1
 801930a:	d102      	bne.n	8019312 <_lseek_r+0x1e>
 801930c:	682b      	ldr	r3, [r5, #0]
 801930e:	b103      	cbz	r3, 8019312 <_lseek_r+0x1e>
 8019310:	6023      	str	r3, [r4, #0]
 8019312:	bd38      	pop	{r3, r4, r5, pc}
 8019314:	20060e28 	.word	0x20060e28

08019318 <_read_r>:
 8019318:	b538      	push	{r3, r4, r5, lr}
 801931a:	4604      	mov	r4, r0
 801931c:	4d06      	ldr	r5, [pc, #24]	@ (8019338 <_read_r+0x20>)
 801931e:	4608      	mov	r0, r1
 8019320:	4611      	mov	r1, r2
 8019322:	2200      	movs	r2, #0
 8019324:	602a      	str	r2, [r5, #0]
 8019326:	461a      	mov	r2, r3
 8019328:	f7e7 fd89 	bl	8000e3e <_read>
 801932c:	1c43      	adds	r3, r0, #1
 801932e:	d102      	bne.n	8019336 <_read_r+0x1e>
 8019330:	682b      	ldr	r3, [r5, #0]
 8019332:	b103      	cbz	r3, 8019336 <_read_r+0x1e>
 8019334:	6023      	str	r3, [r4, #0]
 8019336:	bd38      	pop	{r3, r4, r5, pc}
 8019338:	20060e28 	.word	0x20060e28

0801933c <_write_r>:
 801933c:	b538      	push	{r3, r4, r5, lr}
 801933e:	4604      	mov	r4, r0
 8019340:	4d06      	ldr	r5, [pc, #24]	@ (801935c <_write_r+0x20>)
 8019342:	4608      	mov	r0, r1
 8019344:	4611      	mov	r1, r2
 8019346:	2200      	movs	r2, #0
 8019348:	602a      	str	r2, [r5, #0]
 801934a:	461a      	mov	r2, r3
 801934c:	f7e7 fd94 	bl	8000e78 <_write>
 8019350:	1c43      	adds	r3, r0, #1
 8019352:	d102      	bne.n	801935a <_write_r+0x1e>
 8019354:	682b      	ldr	r3, [r5, #0]
 8019356:	b103      	cbz	r3, 801935a <_write_r+0x1e>
 8019358:	6023      	str	r3, [r4, #0]
 801935a:	bd38      	pop	{r3, r4, r5, pc}
 801935c:	20060e28 	.word	0x20060e28

08019360 <__libc_init_array>:
 8019360:	b570      	push	{r4, r5, r6, lr}
 8019362:	4d0d      	ldr	r5, [pc, #52]	@ (8019398 <__libc_init_array+0x38>)
 8019364:	2600      	movs	r6, #0
 8019366:	4c0d      	ldr	r4, [pc, #52]	@ (801939c <__libc_init_array+0x3c>)
 8019368:	1b64      	subs	r4, r4, r5
 801936a:	10a4      	asrs	r4, r4, #2
 801936c:	42a6      	cmp	r6, r4
 801936e:	d109      	bne.n	8019384 <__libc_init_array+0x24>
 8019370:	4d0b      	ldr	r5, [pc, #44]	@ (80193a0 <__libc_init_array+0x40>)
 8019372:	2600      	movs	r6, #0
 8019374:	4c0b      	ldr	r4, [pc, #44]	@ (80193a4 <__libc_init_array+0x44>)
 8019376:	f000 fe57 	bl	801a028 <_init>
 801937a:	1b64      	subs	r4, r4, r5
 801937c:	10a4      	asrs	r4, r4, #2
 801937e:	42a6      	cmp	r6, r4
 8019380:	d105      	bne.n	801938e <__libc_init_array+0x2e>
 8019382:	bd70      	pop	{r4, r5, r6, pc}
 8019384:	f855 3b04 	ldr.w	r3, [r5], #4
 8019388:	3601      	adds	r6, #1
 801938a:	4798      	blx	r3
 801938c:	e7ee      	b.n	801936c <__libc_init_array+0xc>
 801938e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019392:	3601      	adds	r6, #1
 8019394:	4798      	blx	r3
 8019396:	e7f2      	b.n	801937e <__libc_init_array+0x1e>
 8019398:	0801cdc8 	.word	0x0801cdc8
 801939c:	0801cdc8 	.word	0x0801cdc8
 80193a0:	0801cdc8 	.word	0x0801cdc8
 80193a4:	0801cdcc 	.word	0x0801cdcc

080193a8 <__retarget_lock_init_recursive>:
 80193a8:	4770      	bx	lr

080193aa <__retarget_lock_acquire_recursive>:
 80193aa:	4770      	bx	lr

080193ac <__retarget_lock_release_recursive>:
 80193ac:	4770      	bx	lr

080193ae <memcpy>:
 80193ae:	440a      	add	r2, r1
 80193b0:	1e43      	subs	r3, r0, #1
 80193b2:	4291      	cmp	r1, r2
 80193b4:	d100      	bne.n	80193b8 <memcpy+0xa>
 80193b6:	4770      	bx	lr
 80193b8:	b510      	push	{r4, lr}
 80193ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80193be:	4291      	cmp	r1, r2
 80193c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80193c4:	d1f9      	bne.n	80193ba <memcpy+0xc>
 80193c6:	bd10      	pop	{r4, pc}

080193c8 <__assert_func>:
 80193c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80193ca:	4614      	mov	r4, r2
 80193cc:	461a      	mov	r2, r3
 80193ce:	4b09      	ldr	r3, [pc, #36]	@ (80193f4 <__assert_func+0x2c>)
 80193d0:	4605      	mov	r5, r0
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	68d8      	ldr	r0, [r3, #12]
 80193d6:	b954      	cbnz	r4, 80193ee <__assert_func+0x26>
 80193d8:	4b07      	ldr	r3, [pc, #28]	@ (80193f8 <__assert_func+0x30>)
 80193da:	461c      	mov	r4, r3
 80193dc:	9100      	str	r1, [sp, #0]
 80193de:	4907      	ldr	r1, [pc, #28]	@ (80193fc <__assert_func+0x34>)
 80193e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80193e4:	462b      	mov	r3, r5
 80193e6:	f000 fc8d 	bl	8019d04 <fiprintf>
 80193ea:	f000 fd4f 	bl	8019e8c <abort>
 80193ee:	4b04      	ldr	r3, [pc, #16]	@ (8019400 <__assert_func+0x38>)
 80193f0:	e7f4      	b.n	80193dc <__assert_func+0x14>
 80193f2:	bf00      	nop
 80193f4:	20050040 	.word	0x20050040
 80193f8:	0801cd8c 	.word	0x0801cd8c
 80193fc:	0801cd5e 	.word	0x0801cd5e
 8019400:	0801cd51 	.word	0x0801cd51

08019404 <_free_r>:
 8019404:	b538      	push	{r3, r4, r5, lr}
 8019406:	4605      	mov	r5, r0
 8019408:	2900      	cmp	r1, #0
 801940a:	d041      	beq.n	8019490 <_free_r+0x8c>
 801940c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019410:	1f0c      	subs	r4, r1, #4
 8019412:	2b00      	cmp	r3, #0
 8019414:	bfb8      	it	lt
 8019416:	18e4      	addlt	r4, r4, r3
 8019418:	f000 f8e8 	bl	80195ec <__malloc_lock>
 801941c:	4a1d      	ldr	r2, [pc, #116]	@ (8019494 <_free_r+0x90>)
 801941e:	6813      	ldr	r3, [r2, #0]
 8019420:	b933      	cbnz	r3, 8019430 <_free_r+0x2c>
 8019422:	6063      	str	r3, [r4, #4]
 8019424:	6014      	str	r4, [r2, #0]
 8019426:	4628      	mov	r0, r5
 8019428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801942c:	f000 b8e4 	b.w	80195f8 <__malloc_unlock>
 8019430:	42a3      	cmp	r3, r4
 8019432:	d908      	bls.n	8019446 <_free_r+0x42>
 8019434:	6820      	ldr	r0, [r4, #0]
 8019436:	1821      	adds	r1, r4, r0
 8019438:	428b      	cmp	r3, r1
 801943a:	bf01      	itttt	eq
 801943c:	6819      	ldreq	r1, [r3, #0]
 801943e:	685b      	ldreq	r3, [r3, #4]
 8019440:	1809      	addeq	r1, r1, r0
 8019442:	6021      	streq	r1, [r4, #0]
 8019444:	e7ed      	b.n	8019422 <_free_r+0x1e>
 8019446:	461a      	mov	r2, r3
 8019448:	685b      	ldr	r3, [r3, #4]
 801944a:	b10b      	cbz	r3, 8019450 <_free_r+0x4c>
 801944c:	42a3      	cmp	r3, r4
 801944e:	d9fa      	bls.n	8019446 <_free_r+0x42>
 8019450:	6811      	ldr	r1, [r2, #0]
 8019452:	1850      	adds	r0, r2, r1
 8019454:	42a0      	cmp	r0, r4
 8019456:	d10b      	bne.n	8019470 <_free_r+0x6c>
 8019458:	6820      	ldr	r0, [r4, #0]
 801945a:	4401      	add	r1, r0
 801945c:	1850      	adds	r0, r2, r1
 801945e:	6011      	str	r1, [r2, #0]
 8019460:	4283      	cmp	r3, r0
 8019462:	d1e0      	bne.n	8019426 <_free_r+0x22>
 8019464:	6818      	ldr	r0, [r3, #0]
 8019466:	685b      	ldr	r3, [r3, #4]
 8019468:	4408      	add	r0, r1
 801946a:	6053      	str	r3, [r2, #4]
 801946c:	6010      	str	r0, [r2, #0]
 801946e:	e7da      	b.n	8019426 <_free_r+0x22>
 8019470:	d902      	bls.n	8019478 <_free_r+0x74>
 8019472:	230c      	movs	r3, #12
 8019474:	602b      	str	r3, [r5, #0]
 8019476:	e7d6      	b.n	8019426 <_free_r+0x22>
 8019478:	6820      	ldr	r0, [r4, #0]
 801947a:	1821      	adds	r1, r4, r0
 801947c:	428b      	cmp	r3, r1
 801947e:	bf02      	ittt	eq
 8019480:	6819      	ldreq	r1, [r3, #0]
 8019482:	685b      	ldreq	r3, [r3, #4]
 8019484:	1809      	addeq	r1, r1, r0
 8019486:	6063      	str	r3, [r4, #4]
 8019488:	bf08      	it	eq
 801948a:	6021      	streq	r1, [r4, #0]
 801948c:	6054      	str	r4, [r2, #4]
 801948e:	e7ca      	b.n	8019426 <_free_r+0x22>
 8019490:	bd38      	pop	{r3, r4, r5, pc}
 8019492:	bf00      	nop
 8019494:	20060e34 	.word	0x20060e34

08019498 <malloc>:
 8019498:	4b02      	ldr	r3, [pc, #8]	@ (80194a4 <malloc+0xc>)
 801949a:	4601      	mov	r1, r0
 801949c:	6818      	ldr	r0, [r3, #0]
 801949e:	f000 b825 	b.w	80194ec <_malloc_r>
 80194a2:	bf00      	nop
 80194a4:	20050040 	.word	0x20050040

080194a8 <sbrk_aligned>:
 80194a8:	b570      	push	{r4, r5, r6, lr}
 80194aa:	4e0f      	ldr	r6, [pc, #60]	@ (80194e8 <sbrk_aligned+0x40>)
 80194ac:	460c      	mov	r4, r1
 80194ae:	4605      	mov	r5, r0
 80194b0:	6831      	ldr	r1, [r6, #0]
 80194b2:	b911      	cbnz	r1, 80194ba <sbrk_aligned+0x12>
 80194b4:	f000 fccc 	bl	8019e50 <_sbrk_r>
 80194b8:	6030      	str	r0, [r6, #0]
 80194ba:	4621      	mov	r1, r4
 80194bc:	4628      	mov	r0, r5
 80194be:	f000 fcc7 	bl	8019e50 <_sbrk_r>
 80194c2:	1c43      	adds	r3, r0, #1
 80194c4:	d103      	bne.n	80194ce <sbrk_aligned+0x26>
 80194c6:	f04f 34ff 	mov.w	r4, #4294967295
 80194ca:	4620      	mov	r0, r4
 80194cc:	bd70      	pop	{r4, r5, r6, pc}
 80194ce:	1cc4      	adds	r4, r0, #3
 80194d0:	f024 0403 	bic.w	r4, r4, #3
 80194d4:	42a0      	cmp	r0, r4
 80194d6:	d0f8      	beq.n	80194ca <sbrk_aligned+0x22>
 80194d8:	1a21      	subs	r1, r4, r0
 80194da:	4628      	mov	r0, r5
 80194dc:	f000 fcb8 	bl	8019e50 <_sbrk_r>
 80194e0:	3001      	adds	r0, #1
 80194e2:	d1f2      	bne.n	80194ca <sbrk_aligned+0x22>
 80194e4:	e7ef      	b.n	80194c6 <sbrk_aligned+0x1e>
 80194e6:	bf00      	nop
 80194e8:	20060e30 	.word	0x20060e30

080194ec <_malloc_r>:
 80194ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80194f0:	1ccd      	adds	r5, r1, #3
 80194f2:	4606      	mov	r6, r0
 80194f4:	f025 0503 	bic.w	r5, r5, #3
 80194f8:	3508      	adds	r5, #8
 80194fa:	2d0c      	cmp	r5, #12
 80194fc:	bf38      	it	cc
 80194fe:	250c      	movcc	r5, #12
 8019500:	2d00      	cmp	r5, #0
 8019502:	db01      	blt.n	8019508 <_malloc_r+0x1c>
 8019504:	42a9      	cmp	r1, r5
 8019506:	d904      	bls.n	8019512 <_malloc_r+0x26>
 8019508:	230c      	movs	r3, #12
 801950a:	6033      	str	r3, [r6, #0]
 801950c:	2000      	movs	r0, #0
 801950e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019512:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80195e8 <_malloc_r+0xfc>
 8019516:	f000 f869 	bl	80195ec <__malloc_lock>
 801951a:	f8d8 3000 	ldr.w	r3, [r8]
 801951e:	461c      	mov	r4, r3
 8019520:	bb44      	cbnz	r4, 8019574 <_malloc_r+0x88>
 8019522:	4629      	mov	r1, r5
 8019524:	4630      	mov	r0, r6
 8019526:	f7ff ffbf 	bl	80194a8 <sbrk_aligned>
 801952a:	1c43      	adds	r3, r0, #1
 801952c:	4604      	mov	r4, r0
 801952e:	d158      	bne.n	80195e2 <_malloc_r+0xf6>
 8019530:	f8d8 4000 	ldr.w	r4, [r8]
 8019534:	4627      	mov	r7, r4
 8019536:	2f00      	cmp	r7, #0
 8019538:	d143      	bne.n	80195c2 <_malloc_r+0xd6>
 801953a:	2c00      	cmp	r4, #0
 801953c:	d04b      	beq.n	80195d6 <_malloc_r+0xea>
 801953e:	6823      	ldr	r3, [r4, #0]
 8019540:	4639      	mov	r1, r7
 8019542:	4630      	mov	r0, r6
 8019544:	eb04 0903 	add.w	r9, r4, r3
 8019548:	f000 fc82 	bl	8019e50 <_sbrk_r>
 801954c:	4581      	cmp	r9, r0
 801954e:	d142      	bne.n	80195d6 <_malloc_r+0xea>
 8019550:	6821      	ldr	r1, [r4, #0]
 8019552:	4630      	mov	r0, r6
 8019554:	1a6d      	subs	r5, r5, r1
 8019556:	4629      	mov	r1, r5
 8019558:	f7ff ffa6 	bl	80194a8 <sbrk_aligned>
 801955c:	3001      	adds	r0, #1
 801955e:	d03a      	beq.n	80195d6 <_malloc_r+0xea>
 8019560:	6823      	ldr	r3, [r4, #0]
 8019562:	442b      	add	r3, r5
 8019564:	6023      	str	r3, [r4, #0]
 8019566:	f8d8 3000 	ldr.w	r3, [r8]
 801956a:	685a      	ldr	r2, [r3, #4]
 801956c:	bb62      	cbnz	r2, 80195c8 <_malloc_r+0xdc>
 801956e:	f8c8 7000 	str.w	r7, [r8]
 8019572:	e00f      	b.n	8019594 <_malloc_r+0xa8>
 8019574:	6822      	ldr	r2, [r4, #0]
 8019576:	1b52      	subs	r2, r2, r5
 8019578:	d420      	bmi.n	80195bc <_malloc_r+0xd0>
 801957a:	2a0b      	cmp	r2, #11
 801957c:	d917      	bls.n	80195ae <_malloc_r+0xc2>
 801957e:	1961      	adds	r1, r4, r5
 8019580:	42a3      	cmp	r3, r4
 8019582:	6025      	str	r5, [r4, #0]
 8019584:	bf18      	it	ne
 8019586:	6059      	strne	r1, [r3, #4]
 8019588:	6863      	ldr	r3, [r4, #4]
 801958a:	bf08      	it	eq
 801958c:	f8c8 1000 	streq.w	r1, [r8]
 8019590:	5162      	str	r2, [r4, r5]
 8019592:	604b      	str	r3, [r1, #4]
 8019594:	4630      	mov	r0, r6
 8019596:	f000 f82f 	bl	80195f8 <__malloc_unlock>
 801959a:	f104 000b 	add.w	r0, r4, #11
 801959e:	1d23      	adds	r3, r4, #4
 80195a0:	f020 0007 	bic.w	r0, r0, #7
 80195a4:	1ac2      	subs	r2, r0, r3
 80195a6:	bf1c      	itt	ne
 80195a8:	1a1b      	subne	r3, r3, r0
 80195aa:	50a3      	strne	r3, [r4, r2]
 80195ac:	e7af      	b.n	801950e <_malloc_r+0x22>
 80195ae:	6862      	ldr	r2, [r4, #4]
 80195b0:	42a3      	cmp	r3, r4
 80195b2:	bf0c      	ite	eq
 80195b4:	f8c8 2000 	streq.w	r2, [r8]
 80195b8:	605a      	strne	r2, [r3, #4]
 80195ba:	e7eb      	b.n	8019594 <_malloc_r+0xa8>
 80195bc:	4623      	mov	r3, r4
 80195be:	6864      	ldr	r4, [r4, #4]
 80195c0:	e7ae      	b.n	8019520 <_malloc_r+0x34>
 80195c2:	463c      	mov	r4, r7
 80195c4:	687f      	ldr	r7, [r7, #4]
 80195c6:	e7b6      	b.n	8019536 <_malloc_r+0x4a>
 80195c8:	461a      	mov	r2, r3
 80195ca:	685b      	ldr	r3, [r3, #4]
 80195cc:	42a3      	cmp	r3, r4
 80195ce:	d1fb      	bne.n	80195c8 <_malloc_r+0xdc>
 80195d0:	2300      	movs	r3, #0
 80195d2:	6053      	str	r3, [r2, #4]
 80195d4:	e7de      	b.n	8019594 <_malloc_r+0xa8>
 80195d6:	230c      	movs	r3, #12
 80195d8:	4630      	mov	r0, r6
 80195da:	6033      	str	r3, [r6, #0]
 80195dc:	f000 f80c 	bl	80195f8 <__malloc_unlock>
 80195e0:	e794      	b.n	801950c <_malloc_r+0x20>
 80195e2:	6005      	str	r5, [r0, #0]
 80195e4:	e7d6      	b.n	8019594 <_malloc_r+0xa8>
 80195e6:	bf00      	nop
 80195e8:	20060e34 	.word	0x20060e34

080195ec <__malloc_lock>:
 80195ec:	4801      	ldr	r0, [pc, #4]	@ (80195f4 <__malloc_lock+0x8>)
 80195ee:	f7ff bedc 	b.w	80193aa <__retarget_lock_acquire_recursive>
 80195f2:	bf00      	nop
 80195f4:	20060e2c 	.word	0x20060e2c

080195f8 <__malloc_unlock>:
 80195f8:	4801      	ldr	r0, [pc, #4]	@ (8019600 <__malloc_unlock+0x8>)
 80195fa:	f7ff bed7 	b.w	80193ac <__retarget_lock_release_recursive>
 80195fe:	bf00      	nop
 8019600:	20060e2c 	.word	0x20060e2c

08019604 <__sfputc_r>:
 8019604:	6893      	ldr	r3, [r2, #8]
 8019606:	3b01      	subs	r3, #1
 8019608:	2b00      	cmp	r3, #0
 801960a:	6093      	str	r3, [r2, #8]
 801960c:	b410      	push	{r4}
 801960e:	da08      	bge.n	8019622 <__sfputc_r+0x1e>
 8019610:	6994      	ldr	r4, [r2, #24]
 8019612:	42a3      	cmp	r3, r4
 8019614:	db01      	blt.n	801961a <__sfputc_r+0x16>
 8019616:	290a      	cmp	r1, #10
 8019618:	d103      	bne.n	8019622 <__sfputc_r+0x1e>
 801961a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801961e:	f000 bb83 	b.w	8019d28 <__swbuf_r>
 8019622:	6813      	ldr	r3, [r2, #0]
 8019624:	1c58      	adds	r0, r3, #1
 8019626:	6010      	str	r0, [r2, #0]
 8019628:	4608      	mov	r0, r1
 801962a:	7019      	strb	r1, [r3, #0]
 801962c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019630:	4770      	bx	lr

08019632 <__sfputs_r>:
 8019632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019634:	4606      	mov	r6, r0
 8019636:	460f      	mov	r7, r1
 8019638:	4614      	mov	r4, r2
 801963a:	18d5      	adds	r5, r2, r3
 801963c:	42ac      	cmp	r4, r5
 801963e:	d101      	bne.n	8019644 <__sfputs_r+0x12>
 8019640:	2000      	movs	r0, #0
 8019642:	e007      	b.n	8019654 <__sfputs_r+0x22>
 8019644:	463a      	mov	r2, r7
 8019646:	f814 1b01 	ldrb.w	r1, [r4], #1
 801964a:	4630      	mov	r0, r6
 801964c:	f7ff ffda 	bl	8019604 <__sfputc_r>
 8019650:	1c43      	adds	r3, r0, #1
 8019652:	d1f3      	bne.n	801963c <__sfputs_r+0xa>
 8019654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019658 <_vfiprintf_r>:
 8019658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801965c:	460d      	mov	r5, r1
 801965e:	b09d      	sub	sp, #116	@ 0x74
 8019660:	4614      	mov	r4, r2
 8019662:	4698      	mov	r8, r3
 8019664:	4606      	mov	r6, r0
 8019666:	b118      	cbz	r0, 8019670 <_vfiprintf_r+0x18>
 8019668:	6a03      	ldr	r3, [r0, #32]
 801966a:	b90b      	cbnz	r3, 8019670 <_vfiprintf_r+0x18>
 801966c:	f7ff fd8e 	bl	801918c <__sinit>
 8019670:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019672:	07d9      	lsls	r1, r3, #31
 8019674:	d405      	bmi.n	8019682 <_vfiprintf_r+0x2a>
 8019676:	89ab      	ldrh	r3, [r5, #12]
 8019678:	059a      	lsls	r2, r3, #22
 801967a:	d402      	bmi.n	8019682 <_vfiprintf_r+0x2a>
 801967c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801967e:	f7ff fe94 	bl	80193aa <__retarget_lock_acquire_recursive>
 8019682:	89ab      	ldrh	r3, [r5, #12]
 8019684:	071b      	lsls	r3, r3, #28
 8019686:	d501      	bpl.n	801968c <_vfiprintf_r+0x34>
 8019688:	692b      	ldr	r3, [r5, #16]
 801968a:	b99b      	cbnz	r3, 80196b4 <_vfiprintf_r+0x5c>
 801968c:	4629      	mov	r1, r5
 801968e:	4630      	mov	r0, r6
 8019690:	f000 fb88 	bl	8019da4 <__swsetup_r>
 8019694:	b170      	cbz	r0, 80196b4 <_vfiprintf_r+0x5c>
 8019696:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019698:	07dc      	lsls	r4, r3, #31
 801969a:	d504      	bpl.n	80196a6 <_vfiprintf_r+0x4e>
 801969c:	f04f 30ff 	mov.w	r0, #4294967295
 80196a0:	b01d      	add	sp, #116	@ 0x74
 80196a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196a6:	89ab      	ldrh	r3, [r5, #12]
 80196a8:	0598      	lsls	r0, r3, #22
 80196aa:	d4f7      	bmi.n	801969c <_vfiprintf_r+0x44>
 80196ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80196ae:	f7ff fe7d 	bl	80193ac <__retarget_lock_release_recursive>
 80196b2:	e7f3      	b.n	801969c <_vfiprintf_r+0x44>
 80196b4:	2300      	movs	r3, #0
 80196b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80196ba:	f04f 0901 	mov.w	r9, #1
 80196be:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8019874 <_vfiprintf_r+0x21c>
 80196c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80196c4:	2320      	movs	r3, #32
 80196c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80196ca:	2330      	movs	r3, #48	@ 0x30
 80196cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80196d0:	4623      	mov	r3, r4
 80196d2:	469a      	mov	sl, r3
 80196d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80196d8:	b10a      	cbz	r2, 80196de <_vfiprintf_r+0x86>
 80196da:	2a25      	cmp	r2, #37	@ 0x25
 80196dc:	d1f9      	bne.n	80196d2 <_vfiprintf_r+0x7a>
 80196de:	ebba 0b04 	subs.w	fp, sl, r4
 80196e2:	d00b      	beq.n	80196fc <_vfiprintf_r+0xa4>
 80196e4:	465b      	mov	r3, fp
 80196e6:	4622      	mov	r2, r4
 80196e8:	4629      	mov	r1, r5
 80196ea:	4630      	mov	r0, r6
 80196ec:	f7ff ffa1 	bl	8019632 <__sfputs_r>
 80196f0:	3001      	adds	r0, #1
 80196f2:	f000 80a7 	beq.w	8019844 <_vfiprintf_r+0x1ec>
 80196f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80196f8:	445a      	add	r2, fp
 80196fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80196fc:	f89a 3000 	ldrb.w	r3, [sl]
 8019700:	2b00      	cmp	r3, #0
 8019702:	f000 809f 	beq.w	8019844 <_vfiprintf_r+0x1ec>
 8019706:	2300      	movs	r3, #0
 8019708:	f04f 32ff 	mov.w	r2, #4294967295
 801970c:	f10a 0a01 	add.w	sl, sl, #1
 8019710:	9304      	str	r3, [sp, #16]
 8019712:	9307      	str	r3, [sp, #28]
 8019714:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019718:	931a      	str	r3, [sp, #104]	@ 0x68
 801971a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801971e:	4654      	mov	r4, sl
 8019720:	2205      	movs	r2, #5
 8019722:	4854      	ldr	r0, [pc, #336]	@ (8019874 <_vfiprintf_r+0x21c>)
 8019724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019728:	f000 fba2 	bl	8019e70 <memchr>
 801972c:	9a04      	ldr	r2, [sp, #16]
 801972e:	b9d8      	cbnz	r0, 8019768 <_vfiprintf_r+0x110>
 8019730:	06d1      	lsls	r1, r2, #27
 8019732:	bf44      	itt	mi
 8019734:	2320      	movmi	r3, #32
 8019736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801973a:	0713      	lsls	r3, r2, #28
 801973c:	bf44      	itt	mi
 801973e:	232b      	movmi	r3, #43	@ 0x2b
 8019740:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019744:	f89a 3000 	ldrb.w	r3, [sl]
 8019748:	2b2a      	cmp	r3, #42	@ 0x2a
 801974a:	d015      	beq.n	8019778 <_vfiprintf_r+0x120>
 801974c:	9a07      	ldr	r2, [sp, #28]
 801974e:	4654      	mov	r4, sl
 8019750:	2000      	movs	r0, #0
 8019752:	f04f 0c0a 	mov.w	ip, #10
 8019756:	4621      	mov	r1, r4
 8019758:	f811 3b01 	ldrb.w	r3, [r1], #1
 801975c:	3b30      	subs	r3, #48	@ 0x30
 801975e:	2b09      	cmp	r3, #9
 8019760:	d94b      	bls.n	80197fa <_vfiprintf_r+0x1a2>
 8019762:	b1b0      	cbz	r0, 8019792 <_vfiprintf_r+0x13a>
 8019764:	9207      	str	r2, [sp, #28]
 8019766:	e014      	b.n	8019792 <_vfiprintf_r+0x13a>
 8019768:	eba0 0308 	sub.w	r3, r0, r8
 801976c:	46a2      	mov	sl, r4
 801976e:	fa09 f303 	lsl.w	r3, r9, r3
 8019772:	4313      	orrs	r3, r2
 8019774:	9304      	str	r3, [sp, #16]
 8019776:	e7d2      	b.n	801971e <_vfiprintf_r+0xc6>
 8019778:	9b03      	ldr	r3, [sp, #12]
 801977a:	1d19      	adds	r1, r3, #4
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	2b00      	cmp	r3, #0
 8019780:	9103      	str	r1, [sp, #12]
 8019782:	bfbb      	ittet	lt
 8019784:	425b      	neglt	r3, r3
 8019786:	f042 0202 	orrlt.w	r2, r2, #2
 801978a:	9307      	strge	r3, [sp, #28]
 801978c:	9307      	strlt	r3, [sp, #28]
 801978e:	bfb8      	it	lt
 8019790:	9204      	strlt	r2, [sp, #16]
 8019792:	7823      	ldrb	r3, [r4, #0]
 8019794:	2b2e      	cmp	r3, #46	@ 0x2e
 8019796:	d10a      	bne.n	80197ae <_vfiprintf_r+0x156>
 8019798:	7863      	ldrb	r3, [r4, #1]
 801979a:	2b2a      	cmp	r3, #42	@ 0x2a
 801979c:	d132      	bne.n	8019804 <_vfiprintf_r+0x1ac>
 801979e:	9b03      	ldr	r3, [sp, #12]
 80197a0:	3402      	adds	r4, #2
 80197a2:	1d1a      	adds	r2, r3, #4
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80197aa:	9203      	str	r2, [sp, #12]
 80197ac:	9305      	str	r3, [sp, #20]
 80197ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019884 <_vfiprintf_r+0x22c>
 80197b2:	2203      	movs	r2, #3
 80197b4:	7821      	ldrb	r1, [r4, #0]
 80197b6:	4650      	mov	r0, sl
 80197b8:	f000 fb5a 	bl	8019e70 <memchr>
 80197bc:	b138      	cbz	r0, 80197ce <_vfiprintf_r+0x176>
 80197be:	eba0 000a 	sub.w	r0, r0, sl
 80197c2:	2240      	movs	r2, #64	@ 0x40
 80197c4:	9b04      	ldr	r3, [sp, #16]
 80197c6:	3401      	adds	r4, #1
 80197c8:	4082      	lsls	r2, r0
 80197ca:	4313      	orrs	r3, r2
 80197cc:	9304      	str	r3, [sp, #16]
 80197ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197d2:	2206      	movs	r2, #6
 80197d4:	4828      	ldr	r0, [pc, #160]	@ (8019878 <_vfiprintf_r+0x220>)
 80197d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80197da:	f000 fb49 	bl	8019e70 <memchr>
 80197de:	2800      	cmp	r0, #0
 80197e0:	d03f      	beq.n	8019862 <_vfiprintf_r+0x20a>
 80197e2:	4b26      	ldr	r3, [pc, #152]	@ (801987c <_vfiprintf_r+0x224>)
 80197e4:	bb1b      	cbnz	r3, 801982e <_vfiprintf_r+0x1d6>
 80197e6:	9b03      	ldr	r3, [sp, #12]
 80197e8:	3307      	adds	r3, #7
 80197ea:	f023 0307 	bic.w	r3, r3, #7
 80197ee:	3308      	adds	r3, #8
 80197f0:	9303      	str	r3, [sp, #12]
 80197f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80197f4:	443b      	add	r3, r7
 80197f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80197f8:	e76a      	b.n	80196d0 <_vfiprintf_r+0x78>
 80197fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80197fe:	460c      	mov	r4, r1
 8019800:	2001      	movs	r0, #1
 8019802:	e7a8      	b.n	8019756 <_vfiprintf_r+0xfe>
 8019804:	2300      	movs	r3, #0
 8019806:	3401      	adds	r4, #1
 8019808:	f04f 0c0a 	mov.w	ip, #10
 801980c:	4619      	mov	r1, r3
 801980e:	9305      	str	r3, [sp, #20]
 8019810:	4620      	mov	r0, r4
 8019812:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019816:	3a30      	subs	r2, #48	@ 0x30
 8019818:	2a09      	cmp	r2, #9
 801981a:	d903      	bls.n	8019824 <_vfiprintf_r+0x1cc>
 801981c:	2b00      	cmp	r3, #0
 801981e:	d0c6      	beq.n	80197ae <_vfiprintf_r+0x156>
 8019820:	9105      	str	r1, [sp, #20]
 8019822:	e7c4      	b.n	80197ae <_vfiprintf_r+0x156>
 8019824:	fb0c 2101 	mla	r1, ip, r1, r2
 8019828:	4604      	mov	r4, r0
 801982a:	2301      	movs	r3, #1
 801982c:	e7f0      	b.n	8019810 <_vfiprintf_r+0x1b8>
 801982e:	ab03      	add	r3, sp, #12
 8019830:	462a      	mov	r2, r5
 8019832:	a904      	add	r1, sp, #16
 8019834:	4630      	mov	r0, r6
 8019836:	9300      	str	r3, [sp, #0]
 8019838:	4b11      	ldr	r3, [pc, #68]	@ (8019880 <_vfiprintf_r+0x228>)
 801983a:	f3af 8000 	nop.w
 801983e:	4607      	mov	r7, r0
 8019840:	1c78      	adds	r0, r7, #1
 8019842:	d1d6      	bne.n	80197f2 <_vfiprintf_r+0x19a>
 8019844:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019846:	07d9      	lsls	r1, r3, #31
 8019848:	d405      	bmi.n	8019856 <_vfiprintf_r+0x1fe>
 801984a:	89ab      	ldrh	r3, [r5, #12]
 801984c:	059a      	lsls	r2, r3, #22
 801984e:	d402      	bmi.n	8019856 <_vfiprintf_r+0x1fe>
 8019850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019852:	f7ff fdab 	bl	80193ac <__retarget_lock_release_recursive>
 8019856:	89ab      	ldrh	r3, [r5, #12]
 8019858:	065b      	lsls	r3, r3, #25
 801985a:	f53f af1f 	bmi.w	801969c <_vfiprintf_r+0x44>
 801985e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019860:	e71e      	b.n	80196a0 <_vfiprintf_r+0x48>
 8019862:	ab03      	add	r3, sp, #12
 8019864:	462a      	mov	r2, r5
 8019866:	a904      	add	r1, sp, #16
 8019868:	4630      	mov	r0, r6
 801986a:	9300      	str	r3, [sp, #0]
 801986c:	4b04      	ldr	r3, [pc, #16]	@ (8019880 <_vfiprintf_r+0x228>)
 801986e:	f000 f87d 	bl	801996c <_printf_i>
 8019872:	e7e4      	b.n	801983e <_vfiprintf_r+0x1e6>
 8019874:	0801cd8d 	.word	0x0801cd8d
 8019878:	0801cd97 	.word	0x0801cd97
 801987c:	00000000 	.word	0x00000000
 8019880:	08019633 	.word	0x08019633
 8019884:	0801cd93 	.word	0x0801cd93

08019888 <_printf_common>:
 8019888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801988c:	4616      	mov	r6, r2
 801988e:	4698      	mov	r8, r3
 8019890:	688a      	ldr	r2, [r1, #8]
 8019892:	4607      	mov	r7, r0
 8019894:	690b      	ldr	r3, [r1, #16]
 8019896:	460c      	mov	r4, r1
 8019898:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801989c:	4293      	cmp	r3, r2
 801989e:	bfb8      	it	lt
 80198a0:	4613      	movlt	r3, r2
 80198a2:	6033      	str	r3, [r6, #0]
 80198a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80198a8:	b10a      	cbz	r2, 80198ae <_printf_common+0x26>
 80198aa:	3301      	adds	r3, #1
 80198ac:	6033      	str	r3, [r6, #0]
 80198ae:	6823      	ldr	r3, [r4, #0]
 80198b0:	0699      	lsls	r1, r3, #26
 80198b2:	bf42      	ittt	mi
 80198b4:	6833      	ldrmi	r3, [r6, #0]
 80198b6:	3302      	addmi	r3, #2
 80198b8:	6033      	strmi	r3, [r6, #0]
 80198ba:	6825      	ldr	r5, [r4, #0]
 80198bc:	f015 0506 	ands.w	r5, r5, #6
 80198c0:	d106      	bne.n	80198d0 <_printf_common+0x48>
 80198c2:	f104 0a19 	add.w	sl, r4, #25
 80198c6:	68e3      	ldr	r3, [r4, #12]
 80198c8:	6832      	ldr	r2, [r6, #0]
 80198ca:	1a9b      	subs	r3, r3, r2
 80198cc:	42ab      	cmp	r3, r5
 80198ce:	dc2b      	bgt.n	8019928 <_printf_common+0xa0>
 80198d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80198d4:	6822      	ldr	r2, [r4, #0]
 80198d6:	3b00      	subs	r3, #0
 80198d8:	bf18      	it	ne
 80198da:	2301      	movne	r3, #1
 80198dc:	0692      	lsls	r2, r2, #26
 80198de:	d430      	bmi.n	8019942 <_printf_common+0xba>
 80198e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80198e4:	4641      	mov	r1, r8
 80198e6:	4638      	mov	r0, r7
 80198e8:	47c8      	blx	r9
 80198ea:	3001      	adds	r0, #1
 80198ec:	d023      	beq.n	8019936 <_printf_common+0xae>
 80198ee:	6823      	ldr	r3, [r4, #0]
 80198f0:	341a      	adds	r4, #26
 80198f2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80198f6:	f003 0306 	and.w	r3, r3, #6
 80198fa:	2b04      	cmp	r3, #4
 80198fc:	bf0a      	itet	eq
 80198fe:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8019902:	2500      	movne	r5, #0
 8019904:	6833      	ldreq	r3, [r6, #0]
 8019906:	f04f 0600 	mov.w	r6, #0
 801990a:	bf08      	it	eq
 801990c:	1aed      	subeq	r5, r5, r3
 801990e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8019912:	bf08      	it	eq
 8019914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019918:	4293      	cmp	r3, r2
 801991a:	bfc4      	itt	gt
 801991c:	1a9b      	subgt	r3, r3, r2
 801991e:	18ed      	addgt	r5, r5, r3
 8019920:	42b5      	cmp	r5, r6
 8019922:	d11a      	bne.n	801995a <_printf_common+0xd2>
 8019924:	2000      	movs	r0, #0
 8019926:	e008      	b.n	801993a <_printf_common+0xb2>
 8019928:	2301      	movs	r3, #1
 801992a:	4652      	mov	r2, sl
 801992c:	4641      	mov	r1, r8
 801992e:	4638      	mov	r0, r7
 8019930:	47c8      	blx	r9
 8019932:	3001      	adds	r0, #1
 8019934:	d103      	bne.n	801993e <_printf_common+0xb6>
 8019936:	f04f 30ff 	mov.w	r0, #4294967295
 801993a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801993e:	3501      	adds	r5, #1
 8019940:	e7c1      	b.n	80198c6 <_printf_common+0x3e>
 8019942:	18e1      	adds	r1, r4, r3
 8019944:	1c5a      	adds	r2, r3, #1
 8019946:	2030      	movs	r0, #48	@ 0x30
 8019948:	3302      	adds	r3, #2
 801994a:	4422      	add	r2, r4
 801994c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019958:	e7c2      	b.n	80198e0 <_printf_common+0x58>
 801995a:	2301      	movs	r3, #1
 801995c:	4622      	mov	r2, r4
 801995e:	4641      	mov	r1, r8
 8019960:	4638      	mov	r0, r7
 8019962:	47c8      	blx	r9
 8019964:	3001      	adds	r0, #1
 8019966:	d0e6      	beq.n	8019936 <_printf_common+0xae>
 8019968:	3601      	adds	r6, #1
 801996a:	e7d9      	b.n	8019920 <_printf_common+0x98>

0801996c <_printf_i>:
 801996c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019970:	7e0f      	ldrb	r7, [r1, #24]
 8019972:	4691      	mov	r9, r2
 8019974:	4680      	mov	r8, r0
 8019976:	460c      	mov	r4, r1
 8019978:	2f78      	cmp	r7, #120	@ 0x78
 801997a:	469a      	mov	sl, r3
 801997c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801997e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019982:	d807      	bhi.n	8019994 <_printf_i+0x28>
 8019984:	2f62      	cmp	r7, #98	@ 0x62
 8019986:	d80a      	bhi.n	801999e <_printf_i+0x32>
 8019988:	2f00      	cmp	r7, #0
 801998a:	f000 80d2 	beq.w	8019b32 <_printf_i+0x1c6>
 801998e:	2f58      	cmp	r7, #88	@ 0x58
 8019990:	f000 80b9 	beq.w	8019b06 <_printf_i+0x19a>
 8019994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019998:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801999c:	e03a      	b.n	8019a14 <_printf_i+0xa8>
 801999e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80199a2:	2b15      	cmp	r3, #21
 80199a4:	d8f6      	bhi.n	8019994 <_printf_i+0x28>
 80199a6:	a101      	add	r1, pc, #4	@ (adr r1, 80199ac <_printf_i+0x40>)
 80199a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80199ac:	08019a05 	.word	0x08019a05
 80199b0:	08019a19 	.word	0x08019a19
 80199b4:	08019995 	.word	0x08019995
 80199b8:	08019995 	.word	0x08019995
 80199bc:	08019995 	.word	0x08019995
 80199c0:	08019995 	.word	0x08019995
 80199c4:	08019a19 	.word	0x08019a19
 80199c8:	08019995 	.word	0x08019995
 80199cc:	08019995 	.word	0x08019995
 80199d0:	08019995 	.word	0x08019995
 80199d4:	08019995 	.word	0x08019995
 80199d8:	08019b19 	.word	0x08019b19
 80199dc:	08019a43 	.word	0x08019a43
 80199e0:	08019ad3 	.word	0x08019ad3
 80199e4:	08019995 	.word	0x08019995
 80199e8:	08019995 	.word	0x08019995
 80199ec:	08019b3b 	.word	0x08019b3b
 80199f0:	08019995 	.word	0x08019995
 80199f4:	08019a43 	.word	0x08019a43
 80199f8:	08019995 	.word	0x08019995
 80199fc:	08019995 	.word	0x08019995
 8019a00:	08019adb 	.word	0x08019adb
 8019a04:	6833      	ldr	r3, [r6, #0]
 8019a06:	1d1a      	adds	r2, r3, #4
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	6032      	str	r2, [r6, #0]
 8019a0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019a10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019a14:	2301      	movs	r3, #1
 8019a16:	e09d      	b.n	8019b54 <_printf_i+0x1e8>
 8019a18:	6833      	ldr	r3, [r6, #0]
 8019a1a:	6820      	ldr	r0, [r4, #0]
 8019a1c:	1d19      	adds	r1, r3, #4
 8019a1e:	6031      	str	r1, [r6, #0]
 8019a20:	0606      	lsls	r6, r0, #24
 8019a22:	d501      	bpl.n	8019a28 <_printf_i+0xbc>
 8019a24:	681d      	ldr	r5, [r3, #0]
 8019a26:	e003      	b.n	8019a30 <_printf_i+0xc4>
 8019a28:	0645      	lsls	r5, r0, #25
 8019a2a:	d5fb      	bpl.n	8019a24 <_printf_i+0xb8>
 8019a2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019a30:	2d00      	cmp	r5, #0
 8019a32:	da03      	bge.n	8019a3c <_printf_i+0xd0>
 8019a34:	232d      	movs	r3, #45	@ 0x2d
 8019a36:	426d      	negs	r5, r5
 8019a38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019a3c:	4859      	ldr	r0, [pc, #356]	@ (8019ba4 <_printf_i+0x238>)
 8019a3e:	230a      	movs	r3, #10
 8019a40:	e011      	b.n	8019a66 <_printf_i+0xfa>
 8019a42:	6821      	ldr	r1, [r4, #0]
 8019a44:	6833      	ldr	r3, [r6, #0]
 8019a46:	0608      	lsls	r0, r1, #24
 8019a48:	f853 5b04 	ldr.w	r5, [r3], #4
 8019a4c:	d402      	bmi.n	8019a54 <_printf_i+0xe8>
 8019a4e:	0649      	lsls	r1, r1, #25
 8019a50:	bf48      	it	mi
 8019a52:	b2ad      	uxthmi	r5, r5
 8019a54:	2f6f      	cmp	r7, #111	@ 0x6f
 8019a56:	6033      	str	r3, [r6, #0]
 8019a58:	4852      	ldr	r0, [pc, #328]	@ (8019ba4 <_printf_i+0x238>)
 8019a5a:	bf14      	ite	ne
 8019a5c:	230a      	movne	r3, #10
 8019a5e:	2308      	moveq	r3, #8
 8019a60:	2100      	movs	r1, #0
 8019a62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019a66:	6866      	ldr	r6, [r4, #4]
 8019a68:	2e00      	cmp	r6, #0
 8019a6a:	60a6      	str	r6, [r4, #8]
 8019a6c:	bfa2      	ittt	ge
 8019a6e:	6821      	ldrge	r1, [r4, #0]
 8019a70:	f021 0104 	bicge.w	r1, r1, #4
 8019a74:	6021      	strge	r1, [r4, #0]
 8019a76:	b90d      	cbnz	r5, 8019a7c <_printf_i+0x110>
 8019a78:	2e00      	cmp	r6, #0
 8019a7a:	d04b      	beq.n	8019b14 <_printf_i+0x1a8>
 8019a7c:	4616      	mov	r6, r2
 8019a7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8019a82:	fb03 5711 	mls	r7, r3, r1, r5
 8019a86:	5dc7      	ldrb	r7, [r0, r7]
 8019a88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019a8c:	462f      	mov	r7, r5
 8019a8e:	460d      	mov	r5, r1
 8019a90:	42bb      	cmp	r3, r7
 8019a92:	d9f4      	bls.n	8019a7e <_printf_i+0x112>
 8019a94:	2b08      	cmp	r3, #8
 8019a96:	d10b      	bne.n	8019ab0 <_printf_i+0x144>
 8019a98:	6823      	ldr	r3, [r4, #0]
 8019a9a:	07df      	lsls	r7, r3, #31
 8019a9c:	d508      	bpl.n	8019ab0 <_printf_i+0x144>
 8019a9e:	6923      	ldr	r3, [r4, #16]
 8019aa0:	6861      	ldr	r1, [r4, #4]
 8019aa2:	4299      	cmp	r1, r3
 8019aa4:	bfde      	ittt	le
 8019aa6:	2330      	movle	r3, #48	@ 0x30
 8019aa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019aac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019ab0:	1b92      	subs	r2, r2, r6
 8019ab2:	6122      	str	r2, [r4, #16]
 8019ab4:	464b      	mov	r3, r9
 8019ab6:	aa03      	add	r2, sp, #12
 8019ab8:	4621      	mov	r1, r4
 8019aba:	4640      	mov	r0, r8
 8019abc:	f8cd a000 	str.w	sl, [sp]
 8019ac0:	f7ff fee2 	bl	8019888 <_printf_common>
 8019ac4:	3001      	adds	r0, #1
 8019ac6:	d14a      	bne.n	8019b5e <_printf_i+0x1f2>
 8019ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8019acc:	b004      	add	sp, #16
 8019ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ad2:	6823      	ldr	r3, [r4, #0]
 8019ad4:	f043 0320 	orr.w	r3, r3, #32
 8019ad8:	6023      	str	r3, [r4, #0]
 8019ada:	2778      	movs	r7, #120	@ 0x78
 8019adc:	4832      	ldr	r0, [pc, #200]	@ (8019ba8 <_printf_i+0x23c>)
 8019ade:	6823      	ldr	r3, [r4, #0]
 8019ae0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019ae4:	061f      	lsls	r7, r3, #24
 8019ae6:	6831      	ldr	r1, [r6, #0]
 8019ae8:	f851 5b04 	ldr.w	r5, [r1], #4
 8019aec:	d402      	bmi.n	8019af4 <_printf_i+0x188>
 8019aee:	065f      	lsls	r7, r3, #25
 8019af0:	bf48      	it	mi
 8019af2:	b2ad      	uxthmi	r5, r5
 8019af4:	6031      	str	r1, [r6, #0]
 8019af6:	07d9      	lsls	r1, r3, #31
 8019af8:	bf44      	itt	mi
 8019afa:	f043 0320 	orrmi.w	r3, r3, #32
 8019afe:	6023      	strmi	r3, [r4, #0]
 8019b00:	b11d      	cbz	r5, 8019b0a <_printf_i+0x19e>
 8019b02:	2310      	movs	r3, #16
 8019b04:	e7ac      	b.n	8019a60 <_printf_i+0xf4>
 8019b06:	4827      	ldr	r0, [pc, #156]	@ (8019ba4 <_printf_i+0x238>)
 8019b08:	e7e9      	b.n	8019ade <_printf_i+0x172>
 8019b0a:	6823      	ldr	r3, [r4, #0]
 8019b0c:	f023 0320 	bic.w	r3, r3, #32
 8019b10:	6023      	str	r3, [r4, #0]
 8019b12:	e7f6      	b.n	8019b02 <_printf_i+0x196>
 8019b14:	4616      	mov	r6, r2
 8019b16:	e7bd      	b.n	8019a94 <_printf_i+0x128>
 8019b18:	6833      	ldr	r3, [r6, #0]
 8019b1a:	6825      	ldr	r5, [r4, #0]
 8019b1c:	1d18      	adds	r0, r3, #4
 8019b1e:	6961      	ldr	r1, [r4, #20]
 8019b20:	6030      	str	r0, [r6, #0]
 8019b22:	062e      	lsls	r6, r5, #24
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	d501      	bpl.n	8019b2c <_printf_i+0x1c0>
 8019b28:	6019      	str	r1, [r3, #0]
 8019b2a:	e002      	b.n	8019b32 <_printf_i+0x1c6>
 8019b2c:	0668      	lsls	r0, r5, #25
 8019b2e:	d5fb      	bpl.n	8019b28 <_printf_i+0x1bc>
 8019b30:	8019      	strh	r1, [r3, #0]
 8019b32:	2300      	movs	r3, #0
 8019b34:	4616      	mov	r6, r2
 8019b36:	6123      	str	r3, [r4, #16]
 8019b38:	e7bc      	b.n	8019ab4 <_printf_i+0x148>
 8019b3a:	6833      	ldr	r3, [r6, #0]
 8019b3c:	2100      	movs	r1, #0
 8019b3e:	1d1a      	adds	r2, r3, #4
 8019b40:	6032      	str	r2, [r6, #0]
 8019b42:	681e      	ldr	r6, [r3, #0]
 8019b44:	6862      	ldr	r2, [r4, #4]
 8019b46:	4630      	mov	r0, r6
 8019b48:	f000 f992 	bl	8019e70 <memchr>
 8019b4c:	b108      	cbz	r0, 8019b52 <_printf_i+0x1e6>
 8019b4e:	1b80      	subs	r0, r0, r6
 8019b50:	6060      	str	r0, [r4, #4]
 8019b52:	6863      	ldr	r3, [r4, #4]
 8019b54:	6123      	str	r3, [r4, #16]
 8019b56:	2300      	movs	r3, #0
 8019b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019b5c:	e7aa      	b.n	8019ab4 <_printf_i+0x148>
 8019b5e:	6923      	ldr	r3, [r4, #16]
 8019b60:	4632      	mov	r2, r6
 8019b62:	4649      	mov	r1, r9
 8019b64:	4640      	mov	r0, r8
 8019b66:	47d0      	blx	sl
 8019b68:	3001      	adds	r0, #1
 8019b6a:	d0ad      	beq.n	8019ac8 <_printf_i+0x15c>
 8019b6c:	6823      	ldr	r3, [r4, #0]
 8019b6e:	079b      	lsls	r3, r3, #30
 8019b70:	d413      	bmi.n	8019b9a <_printf_i+0x22e>
 8019b72:	68e0      	ldr	r0, [r4, #12]
 8019b74:	9b03      	ldr	r3, [sp, #12]
 8019b76:	4298      	cmp	r0, r3
 8019b78:	bfb8      	it	lt
 8019b7a:	4618      	movlt	r0, r3
 8019b7c:	e7a6      	b.n	8019acc <_printf_i+0x160>
 8019b7e:	2301      	movs	r3, #1
 8019b80:	4632      	mov	r2, r6
 8019b82:	4649      	mov	r1, r9
 8019b84:	4640      	mov	r0, r8
 8019b86:	47d0      	blx	sl
 8019b88:	3001      	adds	r0, #1
 8019b8a:	d09d      	beq.n	8019ac8 <_printf_i+0x15c>
 8019b8c:	3501      	adds	r5, #1
 8019b8e:	68e3      	ldr	r3, [r4, #12]
 8019b90:	9903      	ldr	r1, [sp, #12]
 8019b92:	1a5b      	subs	r3, r3, r1
 8019b94:	42ab      	cmp	r3, r5
 8019b96:	dcf2      	bgt.n	8019b7e <_printf_i+0x212>
 8019b98:	e7eb      	b.n	8019b72 <_printf_i+0x206>
 8019b9a:	2500      	movs	r5, #0
 8019b9c:	f104 0619 	add.w	r6, r4, #25
 8019ba0:	e7f5      	b.n	8019b8e <_printf_i+0x222>
 8019ba2:	bf00      	nop
 8019ba4:	0801cd9e 	.word	0x0801cd9e
 8019ba8:	0801cdaf 	.word	0x0801cdaf

08019bac <__sflush_r>:
 8019bac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bb4:	0716      	lsls	r6, r2, #28
 8019bb6:	4605      	mov	r5, r0
 8019bb8:	460c      	mov	r4, r1
 8019bba:	d454      	bmi.n	8019c66 <__sflush_r+0xba>
 8019bbc:	684b      	ldr	r3, [r1, #4]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	dc02      	bgt.n	8019bc8 <__sflush_r+0x1c>
 8019bc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	dd48      	ble.n	8019c5a <__sflush_r+0xae>
 8019bc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019bca:	2e00      	cmp	r6, #0
 8019bcc:	d045      	beq.n	8019c5a <__sflush_r+0xae>
 8019bce:	2300      	movs	r3, #0
 8019bd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019bd4:	682f      	ldr	r7, [r5, #0]
 8019bd6:	6a21      	ldr	r1, [r4, #32]
 8019bd8:	602b      	str	r3, [r5, #0]
 8019bda:	d030      	beq.n	8019c3e <__sflush_r+0x92>
 8019bdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019bde:	89a3      	ldrh	r3, [r4, #12]
 8019be0:	0759      	lsls	r1, r3, #29
 8019be2:	d505      	bpl.n	8019bf0 <__sflush_r+0x44>
 8019be4:	6863      	ldr	r3, [r4, #4]
 8019be6:	1ad2      	subs	r2, r2, r3
 8019be8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019bea:	b10b      	cbz	r3, 8019bf0 <__sflush_r+0x44>
 8019bec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019bee:	1ad2      	subs	r2, r2, r3
 8019bf0:	2300      	movs	r3, #0
 8019bf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019bf4:	6a21      	ldr	r1, [r4, #32]
 8019bf6:	4628      	mov	r0, r5
 8019bf8:	47b0      	blx	r6
 8019bfa:	1c43      	adds	r3, r0, #1
 8019bfc:	89a3      	ldrh	r3, [r4, #12]
 8019bfe:	d106      	bne.n	8019c0e <__sflush_r+0x62>
 8019c00:	6829      	ldr	r1, [r5, #0]
 8019c02:	291d      	cmp	r1, #29
 8019c04:	d82b      	bhi.n	8019c5e <__sflush_r+0xb2>
 8019c06:	4a2a      	ldr	r2, [pc, #168]	@ (8019cb0 <__sflush_r+0x104>)
 8019c08:	410a      	asrs	r2, r1
 8019c0a:	07d6      	lsls	r6, r2, #31
 8019c0c:	d427      	bmi.n	8019c5e <__sflush_r+0xb2>
 8019c0e:	2200      	movs	r2, #0
 8019c10:	04d9      	lsls	r1, r3, #19
 8019c12:	6062      	str	r2, [r4, #4]
 8019c14:	6922      	ldr	r2, [r4, #16]
 8019c16:	6022      	str	r2, [r4, #0]
 8019c18:	d504      	bpl.n	8019c24 <__sflush_r+0x78>
 8019c1a:	1c42      	adds	r2, r0, #1
 8019c1c:	d101      	bne.n	8019c22 <__sflush_r+0x76>
 8019c1e:	682b      	ldr	r3, [r5, #0]
 8019c20:	b903      	cbnz	r3, 8019c24 <__sflush_r+0x78>
 8019c22:	6560      	str	r0, [r4, #84]	@ 0x54
 8019c24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019c26:	602f      	str	r7, [r5, #0]
 8019c28:	b1b9      	cbz	r1, 8019c5a <__sflush_r+0xae>
 8019c2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019c2e:	4299      	cmp	r1, r3
 8019c30:	d002      	beq.n	8019c38 <__sflush_r+0x8c>
 8019c32:	4628      	mov	r0, r5
 8019c34:	f7ff fbe6 	bl	8019404 <_free_r>
 8019c38:	2300      	movs	r3, #0
 8019c3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8019c3c:	e00d      	b.n	8019c5a <__sflush_r+0xae>
 8019c3e:	2301      	movs	r3, #1
 8019c40:	4628      	mov	r0, r5
 8019c42:	47b0      	blx	r6
 8019c44:	4602      	mov	r2, r0
 8019c46:	1c50      	adds	r0, r2, #1
 8019c48:	d1c9      	bne.n	8019bde <__sflush_r+0x32>
 8019c4a:	682b      	ldr	r3, [r5, #0]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d0c6      	beq.n	8019bde <__sflush_r+0x32>
 8019c50:	2b1d      	cmp	r3, #29
 8019c52:	d001      	beq.n	8019c58 <__sflush_r+0xac>
 8019c54:	2b16      	cmp	r3, #22
 8019c56:	d11d      	bne.n	8019c94 <__sflush_r+0xe8>
 8019c58:	602f      	str	r7, [r5, #0]
 8019c5a:	2000      	movs	r0, #0
 8019c5c:	e021      	b.n	8019ca2 <__sflush_r+0xf6>
 8019c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019c62:	b21b      	sxth	r3, r3
 8019c64:	e01a      	b.n	8019c9c <__sflush_r+0xf0>
 8019c66:	690f      	ldr	r7, [r1, #16]
 8019c68:	2f00      	cmp	r7, #0
 8019c6a:	d0f6      	beq.n	8019c5a <__sflush_r+0xae>
 8019c6c:	0793      	lsls	r3, r2, #30
 8019c6e:	680e      	ldr	r6, [r1, #0]
 8019c70:	600f      	str	r7, [r1, #0]
 8019c72:	bf0c      	ite	eq
 8019c74:	694b      	ldreq	r3, [r1, #20]
 8019c76:	2300      	movne	r3, #0
 8019c78:	eba6 0807 	sub.w	r8, r6, r7
 8019c7c:	608b      	str	r3, [r1, #8]
 8019c7e:	f1b8 0f00 	cmp.w	r8, #0
 8019c82:	ddea      	ble.n	8019c5a <__sflush_r+0xae>
 8019c84:	4643      	mov	r3, r8
 8019c86:	463a      	mov	r2, r7
 8019c88:	6a21      	ldr	r1, [r4, #32]
 8019c8a:	4628      	mov	r0, r5
 8019c8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019c8e:	47b0      	blx	r6
 8019c90:	2800      	cmp	r0, #0
 8019c92:	dc08      	bgt.n	8019ca6 <__sflush_r+0xfa>
 8019c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8019ca0:	81a3      	strh	r3, [r4, #12]
 8019ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ca6:	4407      	add	r7, r0
 8019ca8:	eba8 0800 	sub.w	r8, r8, r0
 8019cac:	e7e7      	b.n	8019c7e <__sflush_r+0xd2>
 8019cae:	bf00      	nop
 8019cb0:	dfbffffe 	.word	0xdfbffffe

08019cb4 <_fflush_r>:
 8019cb4:	b538      	push	{r3, r4, r5, lr}
 8019cb6:	690b      	ldr	r3, [r1, #16]
 8019cb8:	4605      	mov	r5, r0
 8019cba:	460c      	mov	r4, r1
 8019cbc:	b913      	cbnz	r3, 8019cc4 <_fflush_r+0x10>
 8019cbe:	2500      	movs	r5, #0
 8019cc0:	4628      	mov	r0, r5
 8019cc2:	bd38      	pop	{r3, r4, r5, pc}
 8019cc4:	b118      	cbz	r0, 8019cce <_fflush_r+0x1a>
 8019cc6:	6a03      	ldr	r3, [r0, #32]
 8019cc8:	b90b      	cbnz	r3, 8019cce <_fflush_r+0x1a>
 8019cca:	f7ff fa5f 	bl	801918c <__sinit>
 8019cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d0f3      	beq.n	8019cbe <_fflush_r+0xa>
 8019cd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019cd8:	07d0      	lsls	r0, r2, #31
 8019cda:	d404      	bmi.n	8019ce6 <_fflush_r+0x32>
 8019cdc:	0599      	lsls	r1, r3, #22
 8019cde:	d402      	bmi.n	8019ce6 <_fflush_r+0x32>
 8019ce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019ce2:	f7ff fb62 	bl	80193aa <__retarget_lock_acquire_recursive>
 8019ce6:	4628      	mov	r0, r5
 8019ce8:	4621      	mov	r1, r4
 8019cea:	f7ff ff5f 	bl	8019bac <__sflush_r>
 8019cee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019cf0:	4605      	mov	r5, r0
 8019cf2:	07da      	lsls	r2, r3, #31
 8019cf4:	d4e4      	bmi.n	8019cc0 <_fflush_r+0xc>
 8019cf6:	89a3      	ldrh	r3, [r4, #12]
 8019cf8:	059b      	lsls	r3, r3, #22
 8019cfa:	d4e1      	bmi.n	8019cc0 <_fflush_r+0xc>
 8019cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019cfe:	f7ff fb55 	bl	80193ac <__retarget_lock_release_recursive>
 8019d02:	e7dd      	b.n	8019cc0 <_fflush_r+0xc>

08019d04 <fiprintf>:
 8019d04:	b40e      	push	{r1, r2, r3}
 8019d06:	b503      	push	{r0, r1, lr}
 8019d08:	ab03      	add	r3, sp, #12
 8019d0a:	4601      	mov	r1, r0
 8019d0c:	4805      	ldr	r0, [pc, #20]	@ (8019d24 <fiprintf+0x20>)
 8019d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d12:	6800      	ldr	r0, [r0, #0]
 8019d14:	9301      	str	r3, [sp, #4]
 8019d16:	f7ff fc9f 	bl	8019658 <_vfiprintf_r>
 8019d1a:	b002      	add	sp, #8
 8019d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019d20:	b003      	add	sp, #12
 8019d22:	4770      	bx	lr
 8019d24:	20050040 	.word	0x20050040

08019d28 <__swbuf_r>:
 8019d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d2a:	460e      	mov	r6, r1
 8019d2c:	4614      	mov	r4, r2
 8019d2e:	4605      	mov	r5, r0
 8019d30:	b118      	cbz	r0, 8019d3a <__swbuf_r+0x12>
 8019d32:	6a03      	ldr	r3, [r0, #32]
 8019d34:	b90b      	cbnz	r3, 8019d3a <__swbuf_r+0x12>
 8019d36:	f7ff fa29 	bl	801918c <__sinit>
 8019d3a:	69a3      	ldr	r3, [r4, #24]
 8019d3c:	60a3      	str	r3, [r4, #8]
 8019d3e:	89a3      	ldrh	r3, [r4, #12]
 8019d40:	071a      	lsls	r2, r3, #28
 8019d42:	d501      	bpl.n	8019d48 <__swbuf_r+0x20>
 8019d44:	6923      	ldr	r3, [r4, #16]
 8019d46:	b943      	cbnz	r3, 8019d5a <__swbuf_r+0x32>
 8019d48:	4621      	mov	r1, r4
 8019d4a:	4628      	mov	r0, r5
 8019d4c:	f000 f82a 	bl	8019da4 <__swsetup_r>
 8019d50:	b118      	cbz	r0, 8019d5a <__swbuf_r+0x32>
 8019d52:	f04f 37ff 	mov.w	r7, #4294967295
 8019d56:	4638      	mov	r0, r7
 8019d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d5a:	6823      	ldr	r3, [r4, #0]
 8019d5c:	b2f6      	uxtb	r6, r6
 8019d5e:	6922      	ldr	r2, [r4, #16]
 8019d60:	4637      	mov	r7, r6
 8019d62:	1a98      	subs	r0, r3, r2
 8019d64:	6963      	ldr	r3, [r4, #20]
 8019d66:	4283      	cmp	r3, r0
 8019d68:	dc05      	bgt.n	8019d76 <__swbuf_r+0x4e>
 8019d6a:	4621      	mov	r1, r4
 8019d6c:	4628      	mov	r0, r5
 8019d6e:	f7ff ffa1 	bl	8019cb4 <_fflush_r>
 8019d72:	2800      	cmp	r0, #0
 8019d74:	d1ed      	bne.n	8019d52 <__swbuf_r+0x2a>
 8019d76:	68a3      	ldr	r3, [r4, #8]
 8019d78:	3b01      	subs	r3, #1
 8019d7a:	60a3      	str	r3, [r4, #8]
 8019d7c:	6823      	ldr	r3, [r4, #0]
 8019d7e:	1c5a      	adds	r2, r3, #1
 8019d80:	6022      	str	r2, [r4, #0]
 8019d82:	701e      	strb	r6, [r3, #0]
 8019d84:	1c43      	adds	r3, r0, #1
 8019d86:	6962      	ldr	r2, [r4, #20]
 8019d88:	429a      	cmp	r2, r3
 8019d8a:	d004      	beq.n	8019d96 <__swbuf_r+0x6e>
 8019d8c:	89a3      	ldrh	r3, [r4, #12]
 8019d8e:	07db      	lsls	r3, r3, #31
 8019d90:	d5e1      	bpl.n	8019d56 <__swbuf_r+0x2e>
 8019d92:	2e0a      	cmp	r6, #10
 8019d94:	d1df      	bne.n	8019d56 <__swbuf_r+0x2e>
 8019d96:	4621      	mov	r1, r4
 8019d98:	4628      	mov	r0, r5
 8019d9a:	f7ff ff8b 	bl	8019cb4 <_fflush_r>
 8019d9e:	2800      	cmp	r0, #0
 8019da0:	d0d9      	beq.n	8019d56 <__swbuf_r+0x2e>
 8019da2:	e7d6      	b.n	8019d52 <__swbuf_r+0x2a>

08019da4 <__swsetup_r>:
 8019da4:	b538      	push	{r3, r4, r5, lr}
 8019da6:	4b29      	ldr	r3, [pc, #164]	@ (8019e4c <__swsetup_r+0xa8>)
 8019da8:	4605      	mov	r5, r0
 8019daa:	460c      	mov	r4, r1
 8019dac:	6818      	ldr	r0, [r3, #0]
 8019dae:	b118      	cbz	r0, 8019db8 <__swsetup_r+0x14>
 8019db0:	6a03      	ldr	r3, [r0, #32]
 8019db2:	b90b      	cbnz	r3, 8019db8 <__swsetup_r+0x14>
 8019db4:	f7ff f9ea 	bl	801918c <__sinit>
 8019db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019dbc:	0719      	lsls	r1, r3, #28
 8019dbe:	d422      	bmi.n	8019e06 <__swsetup_r+0x62>
 8019dc0:	06da      	lsls	r2, r3, #27
 8019dc2:	d407      	bmi.n	8019dd4 <__swsetup_r+0x30>
 8019dc4:	2209      	movs	r2, #9
 8019dc6:	602a      	str	r2, [r5, #0]
 8019dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8019dd0:	81a3      	strh	r3, [r4, #12]
 8019dd2:	e033      	b.n	8019e3c <__swsetup_r+0x98>
 8019dd4:	0758      	lsls	r0, r3, #29
 8019dd6:	d512      	bpl.n	8019dfe <__swsetup_r+0x5a>
 8019dd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019dda:	b141      	cbz	r1, 8019dee <__swsetup_r+0x4a>
 8019ddc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019de0:	4299      	cmp	r1, r3
 8019de2:	d002      	beq.n	8019dea <__swsetup_r+0x46>
 8019de4:	4628      	mov	r0, r5
 8019de6:	f7ff fb0d 	bl	8019404 <_free_r>
 8019dea:	2300      	movs	r3, #0
 8019dec:	6363      	str	r3, [r4, #52]	@ 0x34
 8019dee:	89a3      	ldrh	r3, [r4, #12]
 8019df0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019df4:	81a3      	strh	r3, [r4, #12]
 8019df6:	2300      	movs	r3, #0
 8019df8:	6063      	str	r3, [r4, #4]
 8019dfa:	6923      	ldr	r3, [r4, #16]
 8019dfc:	6023      	str	r3, [r4, #0]
 8019dfe:	89a3      	ldrh	r3, [r4, #12]
 8019e00:	f043 0308 	orr.w	r3, r3, #8
 8019e04:	81a3      	strh	r3, [r4, #12]
 8019e06:	6923      	ldr	r3, [r4, #16]
 8019e08:	b94b      	cbnz	r3, 8019e1e <__swsetup_r+0x7a>
 8019e0a:	89a3      	ldrh	r3, [r4, #12]
 8019e0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019e14:	d003      	beq.n	8019e1e <__swsetup_r+0x7a>
 8019e16:	4621      	mov	r1, r4
 8019e18:	4628      	mov	r0, r5
 8019e1a:	f000 f863 	bl	8019ee4 <__smakebuf_r>
 8019e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e22:	f013 0201 	ands.w	r2, r3, #1
 8019e26:	d00a      	beq.n	8019e3e <__swsetup_r+0x9a>
 8019e28:	2200      	movs	r2, #0
 8019e2a:	60a2      	str	r2, [r4, #8]
 8019e2c:	6962      	ldr	r2, [r4, #20]
 8019e2e:	4252      	negs	r2, r2
 8019e30:	61a2      	str	r2, [r4, #24]
 8019e32:	6922      	ldr	r2, [r4, #16]
 8019e34:	b942      	cbnz	r2, 8019e48 <__swsetup_r+0xa4>
 8019e36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019e3a:	d1c5      	bne.n	8019dc8 <__swsetup_r+0x24>
 8019e3c:	bd38      	pop	{r3, r4, r5, pc}
 8019e3e:	0799      	lsls	r1, r3, #30
 8019e40:	bf58      	it	pl
 8019e42:	6962      	ldrpl	r2, [r4, #20]
 8019e44:	60a2      	str	r2, [r4, #8]
 8019e46:	e7f4      	b.n	8019e32 <__swsetup_r+0x8e>
 8019e48:	2000      	movs	r0, #0
 8019e4a:	e7f7      	b.n	8019e3c <__swsetup_r+0x98>
 8019e4c:	20050040 	.word	0x20050040

08019e50 <_sbrk_r>:
 8019e50:	b538      	push	{r3, r4, r5, lr}
 8019e52:	2300      	movs	r3, #0
 8019e54:	4d05      	ldr	r5, [pc, #20]	@ (8019e6c <_sbrk_r+0x1c>)
 8019e56:	4604      	mov	r4, r0
 8019e58:	4608      	mov	r0, r1
 8019e5a:	602b      	str	r3, [r5, #0]
 8019e5c:	f7e7 f85c 	bl	8000f18 <_sbrk>
 8019e60:	1c43      	adds	r3, r0, #1
 8019e62:	d102      	bne.n	8019e6a <_sbrk_r+0x1a>
 8019e64:	682b      	ldr	r3, [r5, #0]
 8019e66:	b103      	cbz	r3, 8019e6a <_sbrk_r+0x1a>
 8019e68:	6023      	str	r3, [r4, #0]
 8019e6a:	bd38      	pop	{r3, r4, r5, pc}
 8019e6c:	20060e28 	.word	0x20060e28

08019e70 <memchr>:
 8019e70:	b2c9      	uxtb	r1, r1
 8019e72:	4603      	mov	r3, r0
 8019e74:	4402      	add	r2, r0
 8019e76:	b510      	push	{r4, lr}
 8019e78:	4293      	cmp	r3, r2
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	d101      	bne.n	8019e82 <memchr+0x12>
 8019e7e:	2000      	movs	r0, #0
 8019e80:	e003      	b.n	8019e8a <memchr+0x1a>
 8019e82:	7804      	ldrb	r4, [r0, #0]
 8019e84:	3301      	adds	r3, #1
 8019e86:	428c      	cmp	r4, r1
 8019e88:	d1f6      	bne.n	8019e78 <memchr+0x8>
 8019e8a:	bd10      	pop	{r4, pc}

08019e8c <abort>:
 8019e8c:	2006      	movs	r0, #6
 8019e8e:	b508      	push	{r3, lr}
 8019e90:	f000 f88c 	bl	8019fac <raise>
 8019e94:	2001      	movs	r0, #1
 8019e96:	f7e6 ffc7 	bl	8000e28 <_exit>

08019e9a <__swhatbuf_r>:
 8019e9a:	b570      	push	{r4, r5, r6, lr}
 8019e9c:	460c      	mov	r4, r1
 8019e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ea2:	b096      	sub	sp, #88	@ 0x58
 8019ea4:	4615      	mov	r5, r2
 8019ea6:	2900      	cmp	r1, #0
 8019ea8:	461e      	mov	r6, r3
 8019eaa:	da0c      	bge.n	8019ec6 <__swhatbuf_r+0x2c>
 8019eac:	89a3      	ldrh	r3, [r4, #12]
 8019eae:	2100      	movs	r1, #0
 8019eb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019eb4:	bf14      	ite	ne
 8019eb6:	2340      	movne	r3, #64	@ 0x40
 8019eb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019ebc:	2000      	movs	r0, #0
 8019ebe:	6031      	str	r1, [r6, #0]
 8019ec0:	602b      	str	r3, [r5, #0]
 8019ec2:	b016      	add	sp, #88	@ 0x58
 8019ec4:	bd70      	pop	{r4, r5, r6, pc}
 8019ec6:	466a      	mov	r2, sp
 8019ec8:	f000 f878 	bl	8019fbc <_fstat_r>
 8019ecc:	2800      	cmp	r0, #0
 8019ece:	dbed      	blt.n	8019eac <__swhatbuf_r+0x12>
 8019ed0:	9901      	ldr	r1, [sp, #4]
 8019ed2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019ed6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019eda:	4259      	negs	r1, r3
 8019edc:	4159      	adcs	r1, r3
 8019ede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019ee2:	e7eb      	b.n	8019ebc <__swhatbuf_r+0x22>

08019ee4 <__smakebuf_r>:
 8019ee4:	898b      	ldrh	r3, [r1, #12]
 8019ee6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019ee8:	079d      	lsls	r5, r3, #30
 8019eea:	4606      	mov	r6, r0
 8019eec:	460c      	mov	r4, r1
 8019eee:	d507      	bpl.n	8019f00 <__smakebuf_r+0x1c>
 8019ef0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019ef4:	6023      	str	r3, [r4, #0]
 8019ef6:	6123      	str	r3, [r4, #16]
 8019ef8:	2301      	movs	r3, #1
 8019efa:	6163      	str	r3, [r4, #20]
 8019efc:	b003      	add	sp, #12
 8019efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f00:	ab01      	add	r3, sp, #4
 8019f02:	466a      	mov	r2, sp
 8019f04:	f7ff ffc9 	bl	8019e9a <__swhatbuf_r>
 8019f08:	9f00      	ldr	r7, [sp, #0]
 8019f0a:	4605      	mov	r5, r0
 8019f0c:	4630      	mov	r0, r6
 8019f0e:	4639      	mov	r1, r7
 8019f10:	f7ff faec 	bl	80194ec <_malloc_r>
 8019f14:	b948      	cbnz	r0, 8019f2a <__smakebuf_r+0x46>
 8019f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f1a:	059a      	lsls	r2, r3, #22
 8019f1c:	d4ee      	bmi.n	8019efc <__smakebuf_r+0x18>
 8019f1e:	f023 0303 	bic.w	r3, r3, #3
 8019f22:	f043 0302 	orr.w	r3, r3, #2
 8019f26:	81a3      	strh	r3, [r4, #12]
 8019f28:	e7e2      	b.n	8019ef0 <__smakebuf_r+0xc>
 8019f2a:	89a3      	ldrh	r3, [r4, #12]
 8019f2c:	6020      	str	r0, [r4, #0]
 8019f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019f32:	81a3      	strh	r3, [r4, #12]
 8019f34:	9b01      	ldr	r3, [sp, #4]
 8019f36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019f3a:	b15b      	cbz	r3, 8019f54 <__smakebuf_r+0x70>
 8019f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019f40:	4630      	mov	r0, r6
 8019f42:	f000 f84d 	bl	8019fe0 <_isatty_r>
 8019f46:	b128      	cbz	r0, 8019f54 <__smakebuf_r+0x70>
 8019f48:	89a3      	ldrh	r3, [r4, #12]
 8019f4a:	f023 0303 	bic.w	r3, r3, #3
 8019f4e:	f043 0301 	orr.w	r3, r3, #1
 8019f52:	81a3      	strh	r3, [r4, #12]
 8019f54:	89a3      	ldrh	r3, [r4, #12]
 8019f56:	431d      	orrs	r5, r3
 8019f58:	81a5      	strh	r5, [r4, #12]
 8019f5a:	e7cf      	b.n	8019efc <__smakebuf_r+0x18>

08019f5c <_raise_r>:
 8019f5c:	291f      	cmp	r1, #31
 8019f5e:	b538      	push	{r3, r4, r5, lr}
 8019f60:	4605      	mov	r5, r0
 8019f62:	460c      	mov	r4, r1
 8019f64:	d904      	bls.n	8019f70 <_raise_r+0x14>
 8019f66:	2316      	movs	r3, #22
 8019f68:	6003      	str	r3, [r0, #0]
 8019f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8019f6e:	bd38      	pop	{r3, r4, r5, pc}
 8019f70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019f72:	b112      	cbz	r2, 8019f7a <_raise_r+0x1e>
 8019f74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019f78:	b94b      	cbnz	r3, 8019f8e <_raise_r+0x32>
 8019f7a:	4628      	mov	r0, r5
 8019f7c:	f000 f852 	bl	801a024 <_getpid_r>
 8019f80:	4622      	mov	r2, r4
 8019f82:	4601      	mov	r1, r0
 8019f84:	4628      	mov	r0, r5
 8019f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f8a:	f000 b839 	b.w	801a000 <_kill_r>
 8019f8e:	2b01      	cmp	r3, #1
 8019f90:	d00a      	beq.n	8019fa8 <_raise_r+0x4c>
 8019f92:	1c59      	adds	r1, r3, #1
 8019f94:	d103      	bne.n	8019f9e <_raise_r+0x42>
 8019f96:	2316      	movs	r3, #22
 8019f98:	6003      	str	r3, [r0, #0]
 8019f9a:	2001      	movs	r0, #1
 8019f9c:	e7e7      	b.n	8019f6e <_raise_r+0x12>
 8019f9e:	2100      	movs	r1, #0
 8019fa0:	4620      	mov	r0, r4
 8019fa2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019fa6:	4798      	blx	r3
 8019fa8:	2000      	movs	r0, #0
 8019faa:	e7e0      	b.n	8019f6e <_raise_r+0x12>

08019fac <raise>:
 8019fac:	4b02      	ldr	r3, [pc, #8]	@ (8019fb8 <raise+0xc>)
 8019fae:	4601      	mov	r1, r0
 8019fb0:	6818      	ldr	r0, [r3, #0]
 8019fb2:	f7ff bfd3 	b.w	8019f5c <_raise_r>
 8019fb6:	bf00      	nop
 8019fb8:	20050040 	.word	0x20050040

08019fbc <_fstat_r>:
 8019fbc:	b538      	push	{r3, r4, r5, lr}
 8019fbe:	2300      	movs	r3, #0
 8019fc0:	4d06      	ldr	r5, [pc, #24]	@ (8019fdc <_fstat_r+0x20>)
 8019fc2:	4604      	mov	r4, r0
 8019fc4:	4608      	mov	r0, r1
 8019fc6:	4611      	mov	r1, r2
 8019fc8:	602b      	str	r3, [r5, #0]
 8019fca:	f7e6 ff7d 	bl	8000ec8 <_fstat>
 8019fce:	1c43      	adds	r3, r0, #1
 8019fd0:	d102      	bne.n	8019fd8 <_fstat_r+0x1c>
 8019fd2:	682b      	ldr	r3, [r5, #0]
 8019fd4:	b103      	cbz	r3, 8019fd8 <_fstat_r+0x1c>
 8019fd6:	6023      	str	r3, [r4, #0]
 8019fd8:	bd38      	pop	{r3, r4, r5, pc}
 8019fda:	bf00      	nop
 8019fdc:	20060e28 	.word	0x20060e28

08019fe0 <_isatty_r>:
 8019fe0:	b538      	push	{r3, r4, r5, lr}
 8019fe2:	2300      	movs	r3, #0
 8019fe4:	4d05      	ldr	r5, [pc, #20]	@ (8019ffc <_isatty_r+0x1c>)
 8019fe6:	4604      	mov	r4, r0
 8019fe8:	4608      	mov	r0, r1
 8019fea:	602b      	str	r3, [r5, #0]
 8019fec:	f7e6 ff7c 	bl	8000ee8 <_isatty>
 8019ff0:	1c43      	adds	r3, r0, #1
 8019ff2:	d102      	bne.n	8019ffa <_isatty_r+0x1a>
 8019ff4:	682b      	ldr	r3, [r5, #0]
 8019ff6:	b103      	cbz	r3, 8019ffa <_isatty_r+0x1a>
 8019ff8:	6023      	str	r3, [r4, #0]
 8019ffa:	bd38      	pop	{r3, r4, r5, pc}
 8019ffc:	20060e28 	.word	0x20060e28

0801a000 <_kill_r>:
 801a000:	b538      	push	{r3, r4, r5, lr}
 801a002:	2300      	movs	r3, #0
 801a004:	4d06      	ldr	r5, [pc, #24]	@ (801a020 <_kill_r+0x20>)
 801a006:	4604      	mov	r4, r0
 801a008:	4608      	mov	r0, r1
 801a00a:	4611      	mov	r1, r2
 801a00c:	602b      	str	r3, [r5, #0]
 801a00e:	f7e6 fef9 	bl	8000e04 <_kill>
 801a012:	1c43      	adds	r3, r0, #1
 801a014:	d102      	bne.n	801a01c <_kill_r+0x1c>
 801a016:	682b      	ldr	r3, [r5, #0]
 801a018:	b103      	cbz	r3, 801a01c <_kill_r+0x1c>
 801a01a:	6023      	str	r3, [r4, #0]
 801a01c:	bd38      	pop	{r3, r4, r5, pc}
 801a01e:	bf00      	nop
 801a020:	20060e28 	.word	0x20060e28

0801a024 <_getpid_r>:
 801a024:	f7e6 bee6 	b.w	8000df4 <_getpid>

0801a028 <_init>:
 801a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a02a:	bf00      	nop
 801a02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a02e:	bc08      	pop	{r3}
 801a030:	469e      	mov	lr, r3
 801a032:	4770      	bx	lr

0801a034 <_fini>:
 801a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a036:	bf00      	nop
 801a038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a03a:	bc08      	pop	{r3}
 801a03c:	469e      	mov	lr, r3
 801a03e:	4770      	bx	lr
