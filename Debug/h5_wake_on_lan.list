
h5_wake_on_lan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f648  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800f894  0800f894  0001f894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fab4  0800fab4  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800fab4  0800fab4  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fab4  0800fab4  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fab4  0800fab4  0001fab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fab8  0800fab8  0001fab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800fabc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000159fc  200000e8  0800fba4  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015ae4  0800fba4  00025ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002011e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000b5ed8  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000f1d6  00000000  00000000  000d6039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002128  00000000  00000000  000e5210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016e3  00000000  00000000  000e7338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00042bbe  00000000  00000000  000e8a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004c36e  00000000  00000000  0012b5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001558e3  00000000  00000000  00177947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006dc8  00000000  00000000  002cd22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000103  00000000  00000000  002d3ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	200000e8 	.word	0x200000e8
 8000268:	00000000 	.word	0x00000000
 800026c:	0800f87c 	.word	0x0800f87c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	200000ec 	.word	0x200000ec
 8000288:	0800f87c 	.word	0x0800f87c

0800028c <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 800028c:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800028e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000292:	4917      	ldr	r1, [pc, #92]	; (80002f0 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000294:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000298:	4816      	ldr	r0, [pc, #88]	; (80002f4 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029a:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 800029c:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a2:	4815      	ldr	r0, [pc, #84]	; (80002f8 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a4:	4912      	ldr	r1, [pc, #72]	; (80002f0 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002a6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002a8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002aa:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ae:	4913      	ldr	r1, [pc, #76]	; (80002fc <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002b6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002b8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002bc:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002c8:	490d      	ldr	r1, [pc, #52]	; (8000300 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ca:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_BadHandler>

080002d4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002dc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002de:	f000 f897 	bl	8000410 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002e6:	4770      	bx	lr

080002e8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002e8:	f7ff bffe 	b.w	80002e8 <__tx_NMIHandler>

080002ec <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f0:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f4:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002f8:	20014880 	.word	0x20014880
    LDR     r1, =SYSTICK_CYCLES
 80002fc:	0026259f 	.word	0x0026259f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000300:	40ff0000 	.word	0x40ff0000

08000304 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000304:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000308:	4a2d      	ldr	r2, [pc, #180]	; (80003c0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800030c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000310:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000314:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000318:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800031e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000322:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000326:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032a:	f3bf 8f6f 	isb	sy

0800032e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800032e:	e7fe      	b.n	800032e <__tx_wait_here>

08000330 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000330:	4824      	ldr	r0, [pc, #144]	; (80003c4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000332:	4a25      	ldr	r2, [pc, #148]	; (80003c8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000334:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000338:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033a:	b191      	cbz	r1, 8000362 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800033c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800033e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000342:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000346:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034a:	d101      	bne.n	8000350 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800034c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000350 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000350:	4c1e      	ldr	r4, [pc, #120]	; (80003cc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000352:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000356:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800035c:	b10d      	cbz	r5, 8000362 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800035e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000360:	6023      	str	r3, [r4, #0]

08000362 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000362:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000364:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000366:	b1d1      	cbz	r1, 800039e <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000368:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036a:	b662      	cpsie	i

0800036c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800036c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800036e:	4c17      	ldr	r4, [pc, #92]	; (80003cc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000370:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000372:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000376:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000378:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800037e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000382:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000386:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800038e:	d101      	bne.n	8000394 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000390:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000394 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000394:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000398:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 800039c:	4770      	bx	lr

0800039e <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800039e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a4:	b909      	cbnz	r1, 80003aa <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a8:	e7f9      	b.n	800039e <__tx_ts_wait>

080003aa <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003aa:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003ae:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b2:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b8:	e7d8      	b.n	800036c <__tx_ts_restore>
 80003ba:	bf00      	nop

080003bc <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003bc:	4770      	bx	lr
 80003be:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c0:	2001491c 	.word	0x2001491c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c4:	20014884 	.word	0x20014884
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c8:	20014888 	.word	0x20014888
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003cc:	20014e88 	.word	0x20014e88

080003d0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d6:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003da:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003de:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ea:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003ec:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ee:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f4:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f6:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003fc:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000402:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000404:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000406:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800040c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040e:	4770      	bx	lr

08000410 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000410:	4922      	ldr	r1, [pc, #136]	; (800049c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000412:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000414:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000418:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041a:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800041c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041e:	b13a      	cbz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000420:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000424:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000426:	b91a      	cbnz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000428:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042e:	6018      	str	r0, [r3, #0]

08000430 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000430:	491d      	ldr	r1, [pc, #116]	; (80004a8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000432:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000434:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000436:	b122      	cbz	r2, 8000442 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000438:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000440:	e008      	b.n	8000454 <__tx_timer_done>

08000442 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000442:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000448:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800044c:	d101      	bne.n	8000452 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044e:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000450:	6818      	ldr	r0, [r3, #0]

08000452 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000452:	6008      	str	r0, [r1, #0]

08000454 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000458:	b912      	cbnz	r2, 8000460 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045a:	4914      	ldr	r1, [pc, #80]	; (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800045c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045e:	b1c8      	cbz	r0, 8000494 <__tx_timer_nothing_expired>

08000460 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000460:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000462:	4912      	ldr	r1, [pc, #72]	; (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000464:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000466:	b108      	cbz	r0, 800046c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000468:	f00d faee 	bl	800da48 <_tx_timer_expiration_process>

0800046c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000470:	b172      	cbz	r2, 8000490 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000472:	f00d f9f7 	bl	800d864 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000476:	4810      	ldr	r0, [pc, #64]	; (80004b8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000478:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047a:	b949      	cbnz	r1, 8000490 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800047c:	480f      	ldr	r0, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000480:	4a0f      	ldr	r2, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000482:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000484:	480f      	ldr	r0, [pc, #60]	; (80004c4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800048c:	d000      	beq.n	8000490 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048e:	6002      	str	r2, [r0, #0]

08000490 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000490:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000494 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000494:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000498:	4770      	bx	lr
 800049a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800049c:	20014928 	.word	0x20014928
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a0:	20014e88 	.word	0x20014e88
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a4:	2001492c 	.word	0x2001492c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a8:	200149b8 	.word	0x200149b8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004ac:	200149bc 	.word	0x200149bc
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b0:	200149b4 	.word	0x200149b4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b4:	200149b0 	.word	0x200149b0
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b8:	2001491c 	.word	0x2001491c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004bc:	20014884 	.word	0x20014884
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c0:	20014888 	.word	0x20014888
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c4:	e000ed04 	.word	0xe000ed04

080004c8 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80004d4:	2334      	movs	r3, #52	; 0x34
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004dc:	4a15      	ldr	r2, [pc, #84]	; (8000534 <tx_application_define+0x6c>)
 80004de:	4916      	ldr	r1, [pc, #88]	; (8000538 <tx_application_define+0x70>)
 80004e0:	4816      	ldr	r0, [pc, #88]	; (800053c <tx_application_define+0x74>)
 80004e2:	f00d fd5b 	bl	800df9c <_txe_byte_pool_create>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d109      	bne.n	8000500 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <tx_application_define+0x74>)
 80004ee:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80004f0:	68b8      	ldr	r0, [r7, #8]
 80004f2:	f000 f82b 	bl	800054c <App_ThreadX_Init>
 80004f6:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d000      	beq.n	8000500 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80004fe:	e7fe      	b.n	80004fe <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000500:	2334      	movs	r3, #52	; 0x34
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <tx_application_define+0x78>)
 800050a:	490e      	ldr	r1, [pc, #56]	; (8000544 <tx_application_define+0x7c>)
 800050c:	480e      	ldr	r0, [pc, #56]	; (8000548 <tx_application_define+0x80>)
 800050e:	f00d fd45 	bl	800df9c <_txe_byte_pool_create>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d109      	bne.n	800052c <tx_application_define+0x64>
  {
    /* USER CODE BEGIN NX_Byte_Pool_Success */

    /* USER CODE END NX_Byte_Pool_Success */

    memory_ptr = (VOID *)&nx_app_byte_pool;
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <tx_application_define+0x80>)
 800051a:	60bb      	str	r3, [r7, #8]
    status = MX_NetXDuo_Init(memory_ptr);
 800051c:	68b8      	ldr	r0, [r7, #8]
 800051e:	f00d ff09 	bl	800e334 <MX_NetXDuo_Init>
 8000522:	60f8      	str	r0, [r7, #12]
    if (status != NX_SUCCESS)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d000      	beq.n	800052c <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_NetXDuo_Init_Error */
      while(1)
 800052a:	e7fe      	b.n	800052a <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000104 	.word	0x20000104
 8000538:	0800f894 	.word	0x0800f894
 800053c:	20000504 	.word	0x20000504
 8000540:	20000538 	.word	0x20000538
 8000544:	0800f8a8 	.word	0x0800f8a8
 8000548:	20007d38 	.word	0x20007d38

0800054c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000558:	68fb      	ldr	r3, [r7, #12]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800056a:	f00b fdf1 	bl	800c150 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fe81 	bl	8001280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f81b 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8d7 	bl	8000734 <MX_GPIO_Init>
  MX_ETH_Init();
 8000586:	f000 f87d 	bl	8000684 <MX_ETH_Init>
  MX_ICACHE_Init();
 800058a:	f000 f8c7 	bl	800071c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  // Inizializzazione dell'area di memoria con valori dummy
  for (ULONG i = 0; i < MEMORY_SIZE; i++)
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	e007      	b.n	80005a4 <main+0x30>
  {
    memory_area[i] = 'a';
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <main+0x40>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	2261      	movs	r2, #97	; 0x61
 800059c:	701a      	strb	r2, [r3, #0]
  for (ULONG i = 0; i < MEMORY_SIZE; i++)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3301      	adds	r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 80005aa:	d3f3      	bcc.n	8000594 <main+0x20>
  }
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80005ac:	f7ff ffdb 	bl	8000566 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x3c>
 80005b2:	bf00      	nop
 80005b4:	20007f14 	.word	0x20007f14

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b09c      	sub	sp, #112	; 0x70
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2250      	movs	r2, #80	; 0x50
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00e fb30 	bl	800ec2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
 80005dc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <SystemClock_Config+0xc8>)
 80005e0:	691b      	ldr	r3, [r3, #16]
 80005e2:	4a27      	ldr	r2, [pc, #156]	; (8000680 <SystemClock_Config+0xc8>)
 80005e4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80005e8:	6113      	str	r3, [r2, #16]
 80005ea:	4b25      	ldr	r3, [pc, #148]	; (8000680 <SystemClock_Config+0xc8>)
 80005ec:	691b      	ldr	r3, [r3, #16]
 80005ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f6:	bf00      	nop
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <SystemClock_Config+0xc8>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	f003 0308 	and.w	r3, r3, #8
 8000600:	2b08      	cmp	r3, #8
 8000602:	d1f9      	bne.n	80005f8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000608:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000612:	2303      	movs	r3, #3
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000616:	2304      	movs	r3, #4
 8000618:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 800061a:	23fa      	movs	r3, #250	; 0xfa
 800061c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 800062a:	2304      	movs	r3, #4
 800062c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800062e:	2300      	movs	r3, #0
 8000630:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fec4 	bl	80033c8 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000646:	f000 f93d 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	231f      	movs	r3, #31
 800064c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2303      	movs	r3, #3
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	2105      	movs	r1, #5
 8000668:	4618      	mov	r0, r3
 800066a:	f003 fae5 	bl	8003c38 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000674:	f000 f926 	bl	80008c4 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3770      	adds	r7, #112	; 0x70
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	44020800 	.word	0x44020800

08000684 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_ETH_Init+0x80>)
 800068a:	4a1f      	ldr	r2, [pc, #124]	; (8000708 <MX_ETH_Init+0x84>)
 800068c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_ETH_Init+0x88>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_ETH_Init+0x88>)
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_ETH_Init+0x88>)
 800069c:	22e1      	movs	r2, #225	; 0xe1
 800069e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_ETH_Init+0x88>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_ETH_Init+0x88>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_ETH_Init+0x88>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_ETH_Init+0x80>)
 80006b4:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_ETH_Init+0x88>)
 80006b6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_ETH_Init+0x80>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_ETH_Init+0x80>)
 80006c0:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_ETH_Init+0x8c>)
 80006c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_ETH_Init+0x80>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <MX_ETH_Init+0x90>)
 80006c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_ETH_Init+0x80>)
 80006cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006d2:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_ETH_Init+0x80>)
 80006d4:	f000 ff10 	bl	80014f8 <HAL_ETH_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80006de:	f000 f8f1 	bl	80008c4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006e2:	2238      	movs	r2, #56	; 0x38
 80006e4:	2100      	movs	r1, #0
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_ETH_Init+0x94>)
 80006e8:	f00e faa0 	bl	800ec2c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_ETH_Init+0x94>)
 80006ee:	2221      	movs	r2, #33	; 0x21
 80006f0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_ETH_Init+0x94>)
 80006f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006f8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_ETH_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20007e64 	.word	0x20007e64
 8000708:	40028000 	.word	0x40028000
 800070c:	20014714 	.word	0x20014714
 8000710:	20007e04 	.word	0x20007e04
 8000714:	20007da4 	.word	0x20007da4
 8000718:	20007d6c 	.word	0x20007d6c

0800071c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000720:	f002 fe00 	bl	8003324 <HAL_ICACHE_Enable>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800072a:	f000 f8cb 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b4b      	ldr	r3, [pc, #300]	; (8000878 <MX_GPIO_Init+0x144>)
 800074c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000750:	4a49      	ldr	r2, [pc, #292]	; (8000878 <MX_GPIO_Init+0x144>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800075a:	4b47      	ldr	r3, [pc, #284]	; (8000878 <MX_GPIO_Init+0x144>)
 800075c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000768:	4b43      	ldr	r3, [pc, #268]	; (8000878 <MX_GPIO_Init+0x144>)
 800076a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800076e:	4a42      	ldr	r2, [pc, #264]	; (8000878 <MX_GPIO_Init+0x144>)
 8000770:	f043 0320 	orr.w	r3, r3, #32
 8000774:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000778:	4b3f      	ldr	r3, [pc, #252]	; (8000878 <MX_GPIO_Init+0x144>)
 800077a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800077e:	f003 0320 	and.w	r3, r3, #32
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b3c      	ldr	r3, [pc, #240]	; (8000878 <MX_GPIO_Init+0x144>)
 8000788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800078c:	4a3a      	ldr	r2, [pc, #232]	; (8000878 <MX_GPIO_Init+0x144>)
 800078e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000792:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000796:	4b38      	ldr	r3, [pc, #224]	; (8000878 <MX_GPIO_Init+0x144>)
 8000798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800079c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b34      	ldr	r3, [pc, #208]	; (8000878 <MX_GPIO_Init+0x144>)
 80007a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007aa:	4a33      	ldr	r2, [pc, #204]	; (8000878 <MX_GPIO_Init+0x144>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007b4:	4b30      	ldr	r3, [pc, #192]	; (8000878 <MX_GPIO_Init+0x144>)
 80007b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <MX_GPIO_Init+0x144>)
 80007c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007c8:	4a2b      	ldr	r2, [pc, #172]	; (8000878 <MX_GPIO_Init+0x144>)
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <MX_GPIO_Init+0x144>)
 80007d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <MX_GPIO_Init+0x144>)
 80007e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007e6:	4a24      	ldr	r2, [pc, #144]	; (8000878 <MX_GPIO_Init+0x144>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <MX_GPIO_Init+0x144>)
 80007f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2110      	movs	r1, #16
 8000802:	481e      	ldr	r0, [pc, #120]	; (800087c <MX_GPIO_Init+0x148>)
 8000804:	f002 fd76 	bl	80032f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2101      	movs	r1, #1
 800080c:	481c      	ldr	r0, [pc, #112]	; (8000880 <MX_GPIO_Init+0x14c>)
 800080e:	f002 fd71 	bl	80032f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2110      	movs	r1, #16
 8000816:	481b      	ldr	r0, [pc, #108]	; (8000884 <MX_GPIO_Init+0x150>)
 8000818:	f002 fd6c 	bl	80032f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_YELLOW_Pin;
 800081c:	2310      	movs	r3, #16
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4812      	ldr	r0, [pc, #72]	; (800087c <MX_GPIO_Init+0x148>)
 8000834:	f002 fc0c 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000838:	2301      	movs	r3, #1
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	480c      	ldr	r0, [pc, #48]	; (8000880 <MX_GPIO_Init+0x14c>)
 8000850:	f002 fbfe 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000854:	2310      	movs	r3, #16
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_GPIO_Init+0x150>)
 800086c:	f002 fbf0 	bl	8003050 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000870:	bf00      	nop
 8000872:	3730      	adds	r7, #48	; 0x30
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	44020c00 	.word	0x44020c00
 800087c:	42021400 	.word	0x42021400
 8000880:	42020400 	.word	0x42020400
 8000884:	42021800 	.word	0x42021800

08000888 <standby>:

/* USER CODE BEGIN 4 */
void standby (void){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  HAL_PWR_DisableWakeUpPin(PWR_WKUP1);
 800088c:	2001      	movs	r0, #1
 800088e:	f002 fd6f 	bl	8003370 <HAL_PWR_DisableWakeUpPin>
  HAL_PWR_EnableWakeUpPin(PWR_WKUP1);
 8000892:	2001      	movs	r0, #1
 8000894:	f002 fd56 	bl	8003344 <HAL_PWR_EnableWakeUpPin>
  HAL_PWR_EnterSTANDBYMode();
 8000898:	f002 fd7e 	bl	8003398 <HAL_PWR_EnterSTANDBYMode>
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}

080008a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b2:	f000 fd0b 	bl	80012cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40001000 	.word	0x40001000

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  standby();
 80008c8:	f7ff ffde 	bl	8000888 <standby>
  /* USER CODE END Error_Handler_Debug */
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
	...

080008e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08e      	sub	sp, #56	; 0x38
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a61      	ldr	r2, [pc, #388]	; (8000a84 <HAL_ETH_MspInit+0x1a4>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	f040 80bb 	bne.w	8000a7a <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000904:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090a:	4a5f      	ldr	r2, [pc, #380]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 800090c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000914:	4b5c      	ldr	r3, [pc, #368]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800091e:	623b      	str	r3, [r7, #32]
 8000920:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8000922:	4b59      	ldr	r3, [pc, #356]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 8000924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000928:	4a57      	ldr	r2, [pc, #348]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 800092a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800092e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000932:	4b55      	ldr	r3, [pc, #340]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 8000934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800093c:	61fb      	str	r3, [r7, #28]
 800093e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8000940:	4b51      	ldr	r3, [pc, #324]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 8000942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000946:	4a50      	ldr	r2, [pc, #320]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 8000948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800094c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000950:	4b4d      	ldr	r3, [pc, #308]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 8000952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b4a      	ldr	r3, [pc, #296]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 8000960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000964:	4a48      	ldr	r2, [pc, #288]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800096e:	4b46      	ldr	r3, [pc, #280]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 8000970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b42      	ldr	r3, [pc, #264]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 800097e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000982:	4a41      	ldr	r2, [pc, #260]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800098c:	4b3e      	ldr	r3, [pc, #248]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 800098e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	4b3b      	ldr	r3, [pc, #236]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 800099c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009a0:	4a39      	ldr	r2, [pc, #228]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 80009a2:	f043 0302 	orr.w	r3, r3, #2
 80009a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009aa:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 80009ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b0:	f003 0302 	and.w	r3, r3, #2
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b8:	4b33      	ldr	r3, [pc, #204]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 80009ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009be:	4a32      	ldr	r2, [pc, #200]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 80009c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009c8:	4b2f      	ldr	r3, [pc, #188]	; (8000a88 <HAL_ETH_MspInit+0x1a8>)
 80009ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009d6:	2332      	movs	r3, #50	; 0x32
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e2:	2302      	movs	r3, #2
 80009e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009e6:	230b      	movs	r3, #11
 80009e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	4619      	mov	r1, r3
 80009f0:	4826      	ldr	r0, [pc, #152]	; (8000a8c <HAL_ETH_MspInit+0x1ac>)
 80009f2:	f002 fb2d 	bl	8003050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80009f6:	2386      	movs	r3, #134	; 0x86
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a02:	2302      	movs	r3, #2
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a06:	230b      	movs	r3, #11
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481f      	ldr	r0, [pc, #124]	; (8000a90 <HAL_ETH_MspInit+0x1b0>)
 8000a12:	f002 fb1d 	bl	8003050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a24:	2302      	movs	r3, #2
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a28:	230b      	movs	r3, #11
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4818      	ldr	r0, [pc, #96]	; (8000a94 <HAL_ETH_MspInit+0x1b4>)
 8000a34:	f002 fb0c 	bl	8003050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a38:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a46:	2302      	movs	r3, #2
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4a:	230b      	movs	r3, #11
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	4810      	ldr	r0, [pc, #64]	; (8000a98 <HAL_ETH_MspInit+0x1b8>)
 8000a56:	f002 fafb 	bl	8003050 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2107      	movs	r1, #7
 8000a5e:	206a      	movs	r0, #106	; 0x6a
 8000a60:	f000 fd22 	bl	80014a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000a64:	206a      	movs	r0, #106	; 0x6a
 8000a66:	f000 fd39 	bl	80014dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	206b      	movs	r0, #107	; 0x6b
 8000a70:	f000 fd1a 	bl	80014a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8000a74:	206b      	movs	r0, #107	; 0x6b
 8000a76:	f000 fd31 	bl	80014dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3738      	adds	r7, #56	; 0x38
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40028000 	.word	0x40028000
 8000a88:	44020c00 	.word	0x44020c00
 8000a8c:	42020800 	.word	0x42020800
 8000a90:	42020000 	.word	0x42020000
 8000a94:	42020400 	.word	0x42020400
 8000a98:	42021800 	.word	0x42021800

08000a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08e      	sub	sp, #56	; 0x38
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000aa4:	4b33      	ldr	r3, [pc, #204]	; (8000b74 <HAL_InitTick+0xd8>)
 8000aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000aaa:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <HAL_InitTick+0xd8>)
 8000aac:	f043 0310 	orr.w	r3, r3, #16
 8000ab0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <HAL_InitTick+0xd8>)
 8000ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000aba:	f003 0310 	and.w	r3, r3, #16
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac2:	f107 020c 	add.w	r2, r7, #12
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f003 fbc9 	bl	8004264 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d103      	bne.n	8000ae4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000adc:	f003 fbac 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 8000ae0:	6378      	str	r0, [r7, #52]	; 0x34
 8000ae2:	e004      	b.n	8000aee <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ae4:	f003 fba8 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af0:	095b      	lsrs	r3, r3, #5
 8000af2:	4a21      	ldr	r2, [pc, #132]	; (8000b78 <HAL_InitTick+0xdc>)
 8000af4:	fba2 2303 	umull	r2, r3, r2, r3
 8000af8:	09db      	lsrs	r3, r3, #7
 8000afa:	3b01      	subs	r3, #1
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <HAL_InitTick+0xe0>)
 8000b00:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <HAL_InitTick+0xe4>)
 8000b02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <HAL_InitTick+0xe0>)
 8000b06:	2263      	movs	r2, #99	; 0x63
 8000b08:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <HAL_InitTick+0xe0>)
 8000b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <HAL_InitTick+0xe0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HAL_InitTick+0xe0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000b1c:	4817      	ldr	r0, [pc, #92]	; (8000b7c <HAL_InitTick+0xe0>)
 8000b1e:	f003 fbd9 	bl	80042d4 <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d118      	bne.n	8000b62 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b30:	4812      	ldr	r0, [pc, #72]	; (8000b7c <HAL_InitTick+0xe0>)
 8000b32:	f003 fc31 	bl	8004398 <HAL_TIM_Base_Start_IT>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d10e      	bne.n	8000b62 <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b0f      	cmp	r3, #15
 8000b48:	d808      	bhi.n	8000b5c <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	2031      	movs	r0, #49	; 0x31
 8000b50:	f000 fcaa 	bl	80014a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <HAL_InitTick+0xe8>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	e002      	b.n	8000b62 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000b62:	2031      	movs	r0, #49	; 0x31
 8000b64:	f000 fcba 	bl	80014dc <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000b68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3738      	adds	r7, #56	; 0x38
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	44020c00 	.word	0x44020c00
 8000b78:	0a7c5ac5 	.word	0x0a7c5ac5
 8000b7c:	2001471c 	.word	0x2001471c
 8000b80:	40001000 	.word	0x40001000
 8000b84:	20000004 	.word	0x20000004

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <TIM6_IRQHandler+0x10>)
 8000bba:	f003 fc9b 	bl	80044f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2001471c 	.word	0x2001471c

08000bc8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <ETH_IRQHandler+0x10>)
 8000bce:	f001 f831 	bl	8001c34 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20007e64 	.word	0x20007e64

08000bdc <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet Wakeup global interrupt.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <ETH_WKUP_IRQHandler+0x10>)
 8000be2:	f001 f827 	bl	8001c34 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20007e64 	.word	0x20007e64

08000bf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return 1;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_kill>:

int _kill(int pid, int sig)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c0a:	f00e f85d 	bl	800ecc8 <__errno>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2216      	movs	r2, #22
 8000c12:	601a      	str	r2, [r3, #0]
  return -1;
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_exit>:

void _exit (int status)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ffe7 	bl	8000c00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c32:	e7fe      	b.n	8000c32 <_exit+0x12>

08000c34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e00a      	b.n	8000c5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c46:	f3af 8000 	nop.w
 8000c4a:	4601      	mov	r1, r0
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf0      	blt.n	8000c46 <_read+0x12>
  }

  return len;
 8000c64:	687b      	ldr	r3, [r7, #4]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e009      	b.n	8000c94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	60ba      	str	r2, [r7, #8]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf1      	blt.n	8000c80 <_write+0x12>
  }
  return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_close>:

int _close(int file)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cce:	605a      	str	r2, [r3, #4]
  return 0;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_isatty>:

int _isatty(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f00d ffc2 	bl	800ecc8 <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200a0000 	.word	0x200a0000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	20014768 	.word	0x20014768
 8000d78:	20015ae8 	.word	0x20015ae8

08000d7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d82:	4b35      	ldr	r3, [pc, #212]	; (8000e58 <SystemInit+0xdc>)
 8000d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d88:	4a33      	ldr	r2, [pc, #204]	; (8000e58 <SystemInit+0xdc>)
 8000d8a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000d92:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <SystemInit+0xe0>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000d98:	4b30      	ldr	r3, [pc, #192]	; (8000e5c <SystemInit+0xe0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <SystemInit+0xe0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000da4:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <SystemInit+0xe0>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	492c      	ldr	r1, [pc, #176]	; (8000e5c <SystemInit+0xe0>)
 8000daa:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <SystemInit+0xe4>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000db0:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <SystemInit+0xe0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000db6:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <SystemInit+0xe0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <SystemInit+0xe0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <SystemInit+0xe0>)
 8000dc4:	4a27      	ldr	r2, [pc, #156]	; (8000e64 <SystemInit+0xe8>)
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000dc8:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <SystemInit+0xe0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <SystemInit+0xe0>)
 8000dd0:	4a24      	ldr	r2, [pc, #144]	; (8000e64 <SystemInit+0xe8>)
 8000dd2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000dd4:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <SystemInit+0xe0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <SystemInit+0xe0>)
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <SystemInit+0xe8>)
 8000dde:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <SystemInit+0xe0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <SystemInit+0xe0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <SystemInit+0xe0>)
 8000dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <SystemInit+0xe0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <SystemInit+0xdc>)
 8000dfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dfe:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <SystemInit+0xec>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000e08:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000e10:	d003      	beq.n	8000e1a <SystemInit+0x9e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000e18:	d117      	bne.n	8000e4a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <SystemInit+0xec>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d005      	beq.n	8000e32 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <SystemInit+0xec>)
 8000e28:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <SystemInit+0xf0>)
 8000e2a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <SystemInit+0xec>)
 8000e2e:	4a10      	ldr	r2, [pc, #64]	; (8000e70 <SystemInit+0xf4>)
 8000e30:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <SystemInit+0xec>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	4a0c      	ldr	r2, [pc, #48]	; (8000e68 <SystemInit+0xec>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <SystemInit+0xec>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a09      	ldr	r2, [pc, #36]	; (8000e68 <SystemInit+0xec>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	61d3      	str	r3, [r2, #28]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00
 8000e5c:	44020c00 	.word	0x44020c00
 8000e60:	eae2eae3 	.word	0xeae2eae3
 8000e64:	01010280 	.word	0x01010280
 8000e68:	40022000 	.word	0x40022000
 8000e6c:	08192a3b 	.word	0x08192a3b
 8000e70:	4c5d6e7f 	.word	0x4c5d6e7f

08000e74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e78:	f7ff ff80 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e7e:	490d      	ldr	r1, [pc, #52]	; (8000eb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <LoopForever+0xe>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e94:	4c0a      	ldr	r4, [pc, #40]	; (8000ec0 <LoopForever+0x16>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ea2:	f00d ff17 	bl	800ecd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea6:	f7ff fb65 	bl	8000574 <main>

08000eaa <LoopForever>:

LoopForever:
    b LoopForever
 8000eaa:	e7fe      	b.n	8000eaa <LoopForever>
  ldr   r0, =_estack
 8000eac:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8000eb8:	0800fabc 	.word	0x0800fabc
  ldr r2, =_sbss
 8000ebc:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000ec0:	20015ae4 	.word	0x20015ae4

08000ec4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC1_IRQHandler>

08000ec6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00b      	beq.n	8000eee <LAN8742_RegisterBusIO+0x28>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d007      	beq.n	8000eee <LAN8742_RegisterBusIO+0x28>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <LAN8742_RegisterBusIO+0x28>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e014      	b.n	8000f1e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d17c      	bne.n	8001044 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	e01c      	b.n	8000f9e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	f107 0208 	add.w	r2, r7, #8
 8000f6c:	2112      	movs	r1, #18
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	4798      	blx	r3
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da03      	bge.n	8000f80 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000f78:	f06f 0304 	mvn.w	r3, #4
 8000f7c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000f7e:	e00b      	b.n	8000f98 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	f003 031f 	and.w	r3, r3, #31
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d105      	bne.n	8000f98 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
         break;
 8000f96:	e005      	b.n	8000fa4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2b1f      	cmp	r3, #31
 8000fa2:	d9df      	bls.n	8000f64 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b1f      	cmp	r3, #31
 8000faa:	d902      	bls.n	8000fb2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000fac:	f06f 0302 	mvn.w	r3, #2
 8000fb0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d145      	bne.n	8001044 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	6810      	ldr	r0, [r2, #0]
 8000fc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4798      	blx	r3
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db37      	blt.n	800103e <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	6810      	ldr	r0, [r2, #0]
 8000fd6:	f107 0208 	add.w	r2, r7, #8
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4798      	blx	r3
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db28      	blt.n	8001036 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4798      	blx	r3
 8000fea:	4603      	mov	r3, r0
 8000fec:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000fee:	e01c      	b.n	800102a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4798      	blx	r3
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001002:	d80e      	bhi.n	8001022 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6810      	ldr	r0, [r2, #0]
 800100c:	f107 0208 	add.w	r2, r7, #8
 8001010:	2100      	movs	r1, #0
 8001012:	4798      	blx	r3
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	da07      	bge.n	800102a <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 800101a:	f06f 0304 	mvn.w	r3, #4
 800101e:	613b      	str	r3, [r7, #16]
                 break;
 8001020:	e010      	b.n	8001044 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001022:	f06f 0301 	mvn.w	r3, #1
 8001026:	613b      	str	r3, [r7, #16]
               break;
 8001028:	e00c      	b.n	8001044 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1dd      	bne.n	8000ff0 <LAN8742_Init+0xc6>
 8001034:	e006      	b.n	8001044 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001036:	f06f 0304 	mvn.w	r3, #4
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	e002      	b.n	8001044 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800103e:	f06f 0303 	mvn.w	r3, #3
 8001042:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d112      	bne.n	8001070 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	4798      	blx	r3
 8001050:	4603      	mov	r3, r0
 8001052:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001054:	bf00      	nop
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4798      	blx	r3
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001068:	d9f5      	bls.n	8001056 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	605a      	str	r2, [r3, #4]
   }

   LAN8742_enable_wol(pObj);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f88c 	bl	800118e <LAN8742_enable_wol>

   return status;
 8001076:	693b      	ldr	r3, [r7, #16]
 }
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6810      	ldr	r0, [r2, #0]
 8001094:	f107 020c 	add.w	r2, r7, #12
 8001098:	2101      	movs	r1, #1
 800109a:	4798      	blx	r3
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da02      	bge.n	80010a8 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010a2:	f06f 0304 	mvn.w	r3, #4
 80010a6:	e06e      	b.n	8001186 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6810      	ldr	r0, [r2, #0]
 80010b0:	f107 020c 	add.w	r2, r7, #12
 80010b4:	2101      	movs	r1, #1
 80010b6:	4798      	blx	r3
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da02      	bge.n	80010c4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010be:	f06f 0304 	mvn.w	r3, #4
 80010c2:	e060      	b.n	8001186 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e059      	b.n	8001186 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6810      	ldr	r0, [r2, #0]
 80010da:	f107 020c 	add.w	r2, r7, #12
 80010de:	2100      	movs	r1, #0
 80010e0:	4798      	blx	r3
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	da02      	bge.n	80010ee <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010e8:	f06f 0304 	mvn.w	r3, #4
 80010ec:	e04b      	b.n	8001186 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d11b      	bne.n	8001130 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d006      	beq.n	8001110 <LAN8742_GetLinkState+0x90>
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800110c:	2302      	movs	r3, #2
 800110e:	e03a      	b.n	8001186 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800111a:	2303      	movs	r3, #3
 800111c:	e033      	b.n	8001186 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001128:	2304      	movs	r3, #4
 800112a:	e02c      	b.n	8001186 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800112c:	2305      	movs	r3, #5
 800112e:	e02a      	b.n	8001186 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	6810      	ldr	r0, [r2, #0]
 8001138:	f107 020c 	add.w	r2, r7, #12
 800113c:	211f      	movs	r1, #31
 800113e:	4798      	blx	r3
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	da02      	bge.n	800114c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001146:	f06f 0304 	mvn.w	r3, #4
 800114a:	e01c      	b.n	8001186 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001156:	2306      	movs	r3, #6
 8001158:	e015      	b.n	8001186 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f003 031c 	and.w	r3, r3, #28
 8001160:	2b18      	cmp	r3, #24
 8001162:	d101      	bne.n	8001168 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001164:	2302      	movs	r3, #2
 8001166:	e00e      	b.n	8001186 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 031c 	and.w	r3, r3, #28
 800116e:	2b08      	cmp	r3, #8
 8001170:	d101      	bne.n	8001176 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001172:	2303      	movs	r3, #3
 8001174:	e007      	b.n	8001186 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f003 031c 	and.w	r3, r3, #28
 800117c:	2b14      	cmp	r3, #20
 800117e:	d101      	bne.n	8001184 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001180:	2304      	movs	r3, #4
 8001182:	e000      	b.n	8001186 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001184:	2305      	movs	r3, #5
    }
  }
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <LAN8742_enable_wol>:
#define LAN8742_PME_ENABLE	((uint16_t)0x4000U)		/* Bit 14 to 1 to enable PME on Led1 (YELLOW) */
#define LAN8742_SELF_CLEAR	((uint16_t)0x0200U)		/* Bit 9 to 1 to enable self clear */
#define LAN8742_WOL_ENABLE	((uint16_t)0x0002U)		/* Bit 1 to 1 to enable wake on lan with magic packet */
#define LAN8742_MPR_RESET	((uint16_t)0x0020U)		/* The MAC sets this bit upon receiving a valid Magic Packet */

void LAN8742_enable_wol(lan8742_Object_t *pObj){
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 	 uint16_t val;

 	 val = LAN8742_PME_ENABLE;
 8001196:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800119a:	81fb      	strh	r3, [r7, #14]
 	 val |= LAN8742_SELF_CLEAR;
 800119c:	89fb      	ldrh	r3, [r7, #14]
 800119e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a2:	81fb      	strh	r3, [r7, #14]
 	 val |= LAN8742_WOL_ENABLE;
 80011a4:	89fb      	ldrh	r3, [r7, #14]
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	81fb      	strh	r3, [r7, #14]
 	 val |= LAN8742_MPR_RESET;
 80011ac:	89fb      	ldrh	r3, [r7, #14]
 80011ae:	f043 0320 	orr.w	r3, r3, #32
 80011b2:	81fb      	strh	r3, [r7, #14]
 	// abilitiamo anche il self clear ponendo il bit 9 a 1
 	// alzo il secondo bit a 1 per abilitare il wake on lan tramite magic packet
 	// alzo il bit Magic Packet Received (MPR) (bit 5)  a 1 per sollecitarne il reset
     // valore binario finale: 0100 0010 0010 0010
 	// hex: 0x4222
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_MMD_WOL_WUCSR, val);
 80011b4:	89fb      	ldrh	r3, [r7, #14]
 80011b6:	461a      	mov	r2, r3
 80011b8:	f248 0110 	movw	r1, #32784	; 0x8010
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f82a 	bl	8001216 <LAN8742_write_mmd>


 	 val = 0x1000;
 80011c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c6:	81fb      	strh	r3, [r7, #14]
 	// passo 1 impostiamo il tempo di reset per il self clear del bit PME
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_MCFGR, val);
 80011c8:	89fb      	ldrh	r3, [r7, #14]
 80011ca:	461a      	mov	r2, r3
 80011cc:	f248 0164 	movw	r1, #32868	; 0x8064
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 f820 	bl	8001216 <LAN8742_write_mmd>

 	 // imposto i registri ADDR per riconoscere il MAC nel magic packet
 	 // assumento che il MAC sia 00:80:E1:00:00:00

 	 // registro A:
 	 uint16_t A = 0x0000;
 80011d6:	2300      	movs	r3, #0
 80011d8:	81bb      	strh	r3, [r7, #12]
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_RX_ADDRA, A);
 80011da:	89bb      	ldrh	r3, [r7, #12]
 80011dc:	461a      	mov	r2, r3
 80011de:	f248 0161 	movw	r1, #32865	; 0x8061
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 f817 	bl	8001216 <LAN8742_write_mmd>
 	 // registro B:
 	 uint16_t B = 0x00E1;
 80011e8:	23e1      	movs	r3, #225	; 0xe1
 80011ea:	817b      	strh	r3, [r7, #10]
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_RX_ADDRB, B);
 80011ec:	897b      	ldrh	r3, [r7, #10]
 80011ee:	461a      	mov	r2, r3
 80011f0:	f248 0162 	movw	r1, #32866	; 0x8062
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f80e 	bl	8001216 <LAN8742_write_mmd>
 	 // registro C:
 	 uint16_t C = 0x8000;
 80011fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011fe:	813b      	strh	r3, [r7, #8]
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_RX_ADDRC, C);
 8001200:	893b      	ldrh	r3, [r7, #8]
 8001202:	461a      	mov	r2, r3
 8001204:	f248 0163 	movw	r1, #32867	; 0x8063
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f804 	bl	8001216 <LAN8742_write_mmd>
  }
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <LAN8742_write_mmd>:
  * @param pObj: device object LAN8742_Object_t.
  * @param target: address to write in.
  * @param content: content to write in target register
  *
  * */
 void LAN8742_write_mmd(lan8742_Object_t *pObj, uint16_t target, uint16_t content){
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	460b      	mov	r3, r1
 8001220:	807b      	strh	r3, [r7, #2]
 8001222:	4613      	mov	r3, r2
 8001224:	803b      	strh	r3, [r7, #0]

	 // Imposta funzione: bit 14-15 a 00 (MMD_ADDRESS)
	 uint16_t val = 0x00;
 8001226:	2300      	movs	r3, #0
 8001228:	81fb      	strh	r3, [r7, #14]

	 // imposto l'indirizzo del dispositivo (bit 0-4) a 00011 (3)
	 val |= 0x03;
 800122a:	89fb      	ldrh	r3, [r7, #14]
 800122c:	f043 0303 	orr.w	r3, r3, #3
 8001230:	81fb      	strh	r3, [r7, #14]

	 // scrivo nel registro Access control register
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDACR, val);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6810      	ldr	r0, [r2, #0]
 800123a:	89fa      	ldrh	r2, [r7, #14]
 800123c:	210d      	movs	r1, #13
 800123e:	4798      	blx	r3

	 // scrivo nel registro MMD ACCESS ADDRESS/DATA REGISTER l'indirizzo del registro target della scrittura
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDAADR, target);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	6810      	ldr	r0, [r2, #0]
 8001248:	887a      	ldrh	r2, [r7, #2]
 800124a:	210e      	movs	r1, #14
 800124c:	4798      	blx	r3

	 //------------ scrittura inizializzata --------------

	 //imposta funzione: bit 14-15 a 01
	 val = LAN8742_MMDACR_MMD_FUNCTION_DATA; // 0x4000U
 800124e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001252:	81fb      	strh	r3, [r7, #14]
	 val |= 0x03;
 8001254:	89fb      	ldrh	r3, [r7, #14]
 8001256:	f043 0303 	orr.w	r3, r3, #3
 800125a:	81fb      	strh	r3, [r7, #14]

	 // scrivo nel registro Access control register
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDACR, val);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	6810      	ldr	r0, [r2, #0]
 8001264:	89fa      	ldrh	r2, [r7, #14]
 8001266:	210d      	movs	r1, #13
 8001268:	4798      	blx	r3

	 // scrivo nel registro MMD ACCESS ADDRESS/DATA REGISTER i dati da inviare
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDAADR, content);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6810      	ldr	r0, [r2, #0]
 8001272:	883a      	ldrh	r2, [r7, #0]
 8001274:	210e      	movs	r1, #14
 8001276:	4798      	blx	r3
 }
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 f904 	bl	8001492 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800128a:	f002 fe8d 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 800128e:	4602      	mov	r2, r0
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_Init+0x40>)
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	f003 030f 	and.w	r3, r3, #15
 8001298:	490a      	ldr	r1, [pc, #40]	; (80012c4 <HAL_Init+0x44>)
 800129a:	5ccb      	ldrb	r3, [r1, r3]
 800129c:	fa22 f303 	lsr.w	r3, r2, r3
 80012a0:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <HAL_Init+0x48>)
 80012a2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a4:	200f      	movs	r0, #15
 80012a6:	f7ff fbf9 	bl	8000a9c <HAL_InitTick>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e002      	b.n	80012ba <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012b4:	f7ff fb0c 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	44020c00 	.word	0x44020c00
 80012c4:	0800f9bc 	.word	0x0800f9bc
 80012c8:	20000000 	.word	0x20000000

080012cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008
 80012f0:	2001476c 	.word	0x2001476c

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	2001476c 	.word	0x2001476c

0800130c <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001316:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800131a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800131e:	4905      	ldr	r1, [pc, #20]	; (8001334 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4313      	orrs	r3, r2
 8001324:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	44000400 	.word	0x44000400

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db0b      	blt.n	80013c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	f003 021f 	and.w	r2, r3, #31
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <__NVIC_EnableIRQ+0x38>)
 80013b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	2001      	movs	r0, #1
 80013be:	fa00 f202 	lsl.w	r2, r0, r2
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff4c 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b6:	f7ff ff63 	bl	8001380 <__NVIC_GetPriorityGrouping>
 80014ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	68b9      	ldr	r1, [r7, #8]
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f7ff ffb3 	bl	800142c <NVIC_EncodePriority>
 80014c6:	4602      	mov	r2, r0
 80014c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff82 	bl	80013d8 <__NVIC_SetPriority>
}
 80014d4:	bf00      	nop
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff56 	bl	800139c <__NVIC_EnableIRQ>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e0d2      	b.n	80016b0 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001510:	2b00      	cmp	r3, #0
 8001512:	d106      	bne.n	8001522 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2223      	movs	r2, #35	; 0x23
 8001518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff f9df 	bl	80008e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 8001522:	4b65      	ldr	r3, [pc, #404]	; (80016b8 <HAL_ETH_Init+0x1c0>)
 8001524:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001528:	4a63      	ldr	r2, [pc, #396]	; (80016b8 <HAL_ETH_Init+0x1c0>)
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001532:	4b61      	ldr	r3, [pc, #388]	; (80016b8 <HAL_ETH_Init+0x1c0>)
 8001534:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7a1b      	ldrb	r3, [r3, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d103      	bne.n	8001550 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff fedf 	bl	800130c <HAL_SBS_ETHInterfaceSelect>
 800154e:	e003      	b.n	8001558 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8001550:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001554:	f7ff feda 	bl	800130c <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8001558:	4b58      	ldr	r3, [pc, #352]	; (80016bc <HAL_ETH_Init+0x1c4>)
 800155a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001574:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001576:	f7ff febd 	bl	80012f4 <HAL_GetTick>
 800157a:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800157c:	e011      	b.n	80015a2 <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800157e:	f7ff feb9 	bl	80012f4 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800158c:	d909      	bls.n	80015a2 <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2204      	movs	r2, #4
 8001592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	22e0      	movs	r2, #224	; 0xe0
 800159a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e086      	b.n	80016b0 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1e4      	bne.n	800157e <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 ff25 	bl	8002404 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80015ba:	f002 fe21 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 80015be:	4603      	mov	r3, r0
 80015c0:	4a3f      	ldr	r2, [pc, #252]	; (80016c0 <HAL_ETH_Init+0x1c8>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0c9a      	lsrs	r2, r3, #18
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3a01      	subs	r2, #1
 80015ce:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f001 f96c 	bl	80028b0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80015e4:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015f4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d009      	beq.n	8001618 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	22e0      	movs	r2, #224	; 0xe0
 8001610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e04b      	b.n	80016b0 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001620:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001624:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001628:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6952      	ldr	r2, [r2, #20]
 8001630:	0051      	lsls	r1, r2, #1
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	430b      	orrs	r3, r1
 8001638:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800163c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f001 f9d2 	bl	80029ea <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f001 fa18 	bl	8002a7c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	3305      	adds	r3, #5
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	021a      	lsls	r2, r3, #8
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	3304      	adds	r3, #4
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	4619      	mov	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	3303      	adds	r3, #3
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	061a      	lsls	r2, r3, #24
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	3302      	adds	r3, #2
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	041b      	lsls	r3, r3, #16
 800167e:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	3301      	adds	r3, #1
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800168a:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001698:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800169a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2210      	movs	r2, #16
 80016aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	44020c00 	.word	0x44020c00
 80016bc:	44000400 	.word	0x44000400
 80016c0:	431bde83 	.word	0x431bde83

080016c4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016d2:	2b10      	cmp	r3, #16
 80016d4:	d17c      	bne.n	80017d0 <HAL_ETH_Start_IT+0x10c>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2223      	movs	r2, #35	; 0x23
 80016da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b3a      	ldr	r3, [pc, #232]	; (80017dc <HAL_ETH_Start_IT+0x118>)
 80016f2:	430b      	orrs	r3, r1
 80016f4:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	f043 6342 	orr.w	r3, r3, #203423744	; 0xc200000
 8001708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800170c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2204      	movs	r2, #4
 8001714:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f9c3 	bl	8001aa2 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0202 	orr.w	r2, r2, #2
 800172a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0201 	orr.w	r2, r2, #1
 800174c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001758:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001768:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001774:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001784:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001790:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800179c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017a0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	f443 4350 	orr.w	r3, r3, #53248	; 0xd000
 80017b8:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 80017bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017c0:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2223      	movs	r2, #35	; 0x23
 80017c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	e000      	b.n	80017d2 <HAL_ETH_Start_IT+0x10e>
  }
  else
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
  }
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	0c020060 	.word	0x0c020060

080017e0 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017ee:	2b23      	cmp	r3, #35	; 0x23
 80017f0:	d13f      	bne.n	8001872 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2223      	movs	r2, #35	; 0x23
 80017f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001802:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	f023 0301 	bic.w	r3, r3, #1
 800180e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001812:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800181e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800182e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0201 	bic.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0201 	orr.w	r2, r2, #1
 8001852:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0202 	bic.w	r2, r2, #2
 8001864:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2210      	movs	r2, #16
 800186a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e000      	b.n	8001874 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
  }
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d109      	bne.n	80018a4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	f043 0201 	orr.w	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e03a      	b.n	800191a <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018aa:	2b23      	cmp	r3, #35	; 0x23
 80018ac:	d134      	bne.n	8001918 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80018b6:	2201      	movs	r2, #1
 80018b8:	6839      	ldr	r1, [r7, #0]
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f001 f93b 	bl	8002b36 <ETH_Prepare_Tx_Descriptors>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018cc:	f043 0202 	orr.w	r2, r3, #2
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e01f      	b.n	800191a <HAL_ETH_Transmit_IT+0x9a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018da:	f3bf 8f4f 	dsb	sy
}
 80018de:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d904      	bls.n	80018fc <HAL_ETH_Transmit_IT+0x7c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	1f1a      	subs	r2, r3, #4
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3106      	adds	r1, #6
 8001908:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800190c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001910:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	e000      	b.n	800191a <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
  }
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b088      	sub	sp, #32
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001940:	f043 0201 	orr.w	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e0a5      	b.n	8001a9a <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001954:	2b23      	cmp	r3, #35	; 0x23
 8001956:	d001      	beq.n	800195c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e09e      	b.n	8001a9a <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001960:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	3212      	adds	r2, #18
 8001968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001972:	f1c3 0304 	rsb	r3, r3, #4
 8001976:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001978:	e067      	b.n	8001a4a <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d103      	bne.n	80019aa <HAL_ETH_ReadData+0x88>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d03d      	beq.n	8001a26 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00d      	beq.n	80019f0 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a00:	461a      	mov	r2, r3
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	f003 fe0f 	bl	8005628 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	441a      	add	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d902      	bls.n	8001a38 <HAL_ETH_ReadData+0x116>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3b04      	subs	r3, #4
 8001a36:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	3212      	adds	r2, #18
 8001a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a42:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	db06      	blt.n	8001a60 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d202      	bcs.n	8001a60 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d08c      	beq.n	800197a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	441a      	add	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f814 	bl	8001aa2 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d108      	bne.n	8001a98 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	e000      	b.n	8001a9a <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b088      	sub	sp, #32
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ab6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	3212      	adds	r2, #18
 8001abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac2:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ac8:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001aca:	e03b      	b.n	8001b44 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d112      	bne.n	8001afa <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 fd83 	bl	80055e4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	74fb      	strb	r3, [r7, #19]
 8001ae8:	e007      	b.n	8001afa <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	461a      	mov	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	461a      	mov	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001afa:	7cfb      	ldrb	r3, [r7, #19]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d021      	beq.n	8001b44 <ETH_UpdateDescriptor+0xa2>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b00:	f3bf 8f5f 	dmb	sy
}
 8001b04:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d004      	beq.n	8001b18 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	e003      	b.n	8001b20 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001b1e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	3301      	adds	r3, #1
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d902      	bls.n	8001b32 <ETH_UpdateDescriptor+0x90>
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	3212      	adds	r2, #18
 8001b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <ETH_UpdateDescriptor+0xae>
 8001b4a:	7cfb      	ldrb	r3, [r7, #19]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1bd      	bne.n	8001acc <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d00d      	beq.n	8001b76 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0U);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b62:	461a      	mov	r2, r3
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001b76:	bf00      	nop
 8001b78:	3720      	adds	r7, #32
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3318      	adds	r3, #24
 8001b8a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b9c:	e03f      	b.n	8001c1e <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	3304      	adds	r3, #4
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d106      	bne.n	8001bc6 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001bc6:	7bbb      	ldrb	r3, [r7, #14]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d028      	beq.n	8001c1e <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68d9      	ldr	r1, [r3, #12]
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	db1b      	blt.n	8001c1a <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	3304      	adds	r3, #4
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fcc2 	bl	8005578 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	2200      	movs	r2, #0
 8001c00:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	3301      	adds	r3, #1
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c18:	e001      	b.n	8001c1e <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <HAL_ETH_ReleaseTxPacket+0xac>
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1b9      	bne.n	8001b9e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;

  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c44:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4c:	2b40      	cmp	r3, #64	; 0x40
 8001c4e:	d115      	bne.n	8001c7c <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c58:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c60:	2b40      	cmp	r3, #64	; 0x40
 8001c62:	d10b      	bne.n	8001c7c <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	f248 0340 	movw	r3, #32832	; 0x8040
 8001c72:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f003 fd18 	bl	80056ac <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c84:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d115      	bne.n	8001cbc <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c98:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10b      	bne.n	8001cbc <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cac:	461a      	mov	r2, r3
 8001cae:	f248 0301 	movw	r3, #32769	; 0x8001
 8001cb2:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f003 fd14 	bl	80056e4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cd0:	d153      	bne.n	8001d7a <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cda:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ce6:	d148      	bne.n	8001d7a <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cee:	f043 0208 	orr.w	r2, r3, #8
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d00:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d0c:	d11e      	bne.n	8001d4c <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d16:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001d1a:	f241 1302 	movw	r3, #4354	; 0x1102
 8001d1e:	4013      	ands	r3, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d3e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	22e0      	movs	r2, #224	; 0xe0
 8001d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001d4a:	e013      	b.n	8001d74 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d54:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001d58:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001d70:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f86d 	bl	8001e54 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d82:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d104      	bne.n	8001d98 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d019      	beq.n	8001dcc <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9e:	f043 0210 	orr.w	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	22e0      	movs	r2, #224	; 0xe0
 8001dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f848 	bl	8001e54 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b10      	cmp	r3, #16
 8001dda:	d10f      	bne.n	8001dfc <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001de4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f83a 	bl	8001e68 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b20      	cmp	r3, #32
 8001e0a:	d10f      	bne.n	8001e2c <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e14:	f003 020f 	and.w	r2, r3, #15
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f82c 	bl	8001e7c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <HAL_ETH_IRQHandler+0x21c>)
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_ETH_IRQHandler+0x21c>)
 8001e3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f825 	bl	8001e90 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	44022000 	.word	0x44022000

08001e54 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e03e      	b.n	8001f44 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ece:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	055b      	lsls	r3, r3, #21
 8001eda:	4313      	orrs	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	041b      	lsls	r3, r3, #16
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f043 030c 	orr.w	r3, r3, #12
 8001ef2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001f06:	f7ff f9f5 	bl	80012f4 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f0c:	e009      	b.n	8001f22 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f0e:	f7ff f9f1 	bl	80012f4 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f1c:	d901      	bls.n	8001f22 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e010      	b.n	8001f44 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1ed      	bne.n	8001f0e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e03c      	b.n	8001fe8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f76:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	055b      	lsls	r3, r3, #21
 8001f82:	4313      	orrs	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	041b      	lsls	r3, r3, #16
 8001f90:	4313      	orrs	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f023 030c 	bic.w	r3, r3, #12
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_ETH_WritePHYRegister+0xa4>)
 8001fae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001fb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <HAL_ETH_WritePHYRegister+0xa4>)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001fba:	f7ff f99b 	bl	80012f4 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001fc0:	e009      	b.n	8001fd6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001fc2:	f7ff f997 	bl	80012f4 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fd0:	d901      	bls.n	8001fd6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e008      	b.n	8001fe8 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1ed      	bne.n	8001fc2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40028000 	.word	0x40028000

08001ff4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e1c3      	b.n	8002390 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 020c 	and.w	r2, r3, #12
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf14      	ite	ne
 8002024:	2301      	movne	r3, #1
 8002026:	2300      	moveq	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	bf0c      	ite	eq
 800204e:	2301      	moveq	r3, #1
 8002050:	2300      	movne	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf14      	ite	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2300      	moveq	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800209a:	2b00      	cmp	r3, #0
 800209c:	bf14      	ite	ne
 800209e:	2301      	movne	r3, #1
 80020a0:	2300      	moveq	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf14      	ite	ne
 80020ee:	2301      	movne	r3, #1
 80020f0:	2300      	moveq	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf0c      	ite	eq
 8002122:	2301      	moveq	r3, #1
 8002124:	2300      	movne	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf14      	ite	ne
 800213c:	2301      	movne	r3, #1
 800213e:	2300      	moveq	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002152:	2b00      	cmp	r3, #0
 8002154:	bf14      	ite	ne
 8002156:	2301      	movne	r3, #1
 8002158:	2300      	moveq	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002186:	2b00      	cmp	r3, #0
 8002188:	bf14      	ite	ne
 800218a:	2301      	movne	r3, #1
 800218c:	2300      	moveq	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bf14      	ite	ne
 80021b2:	2301      	movne	r3, #1
 80021b4:	2300      	moveq	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf14      	ite	ne
 8002220:	2301      	movne	r3, #1
 8002222:	2300      	moveq	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf14      	ite	ne
 800223c:	2301      	movne	r3, #1
 800223e:	2300      	moveq	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	0e5b      	lsrs	r3, r3, #25
 8002252:	f003 021f 	and.w	r2, r3, #31
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	63da      	str	r2, [r3, #60]	; 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 020f 	and.w	r2, r3, #15
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	bf14      	ite	ne
 8002292:	2301      	movne	r3, #1
 8002294:	2300      	moveq	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bf0c      	ite	eq
 80022ae:	2301      	moveq	r3, #1
 80022b0:	2300      	movne	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf14      	ite	ne
 80022e8:	2301      	movne	r3, #1
 80022ea:	2300      	moveq	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fe:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002302:	2b00      	cmp	r3, #0
 8002304:	bf14      	ite	ne
 8002306:	2301      	movne	r3, #1
 8002308:	2300      	moveq	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800231c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800232c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf14      	ite	ne
 8002344:	2301      	movne	r3, #1
 8002346:	2300      	moveq	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf14      	ite	ne
 8002362:	2301      	movne	r3, #1
 8002364:	2300      	moveq	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e00b      	b.n	80023c8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d105      	bne.n	80023c6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80023ba:	6839      	ldr	r1, [r7, #0]
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f8d5 	bl	800256c <ETH_SetMACConfig>

    return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e000      	b.n	80023c8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
  }
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e00b      	b.n	80023fc <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d105      	bne.n	80023fa <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 80023ee:	6839      	ldr	r1, [r7, #0]
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f9d7 	bl	80027a4 <ETH_SetDMAConfig>

    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e000      	b.n	80023fc <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002414:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800241c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800241e:	f001 feef 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 8002422:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4a25      	ldr	r2, [pc, #148]	; (80024bc <HAL_ETH_SetMDIOClockRange+0xb8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d908      	bls.n	800243e <HAL_ETH_SetMDIOClockRange+0x3a>
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4a24      	ldr	r2, [pc, #144]	; (80024c0 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d804      	bhi.n	800243e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e034      	b.n	80024a8 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	4a1f      	ldr	r2, [pc, #124]	; (80024c0 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d908      	bls.n	8002458 <HAL_ETH_SetMDIOClockRange+0x54>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <HAL_ETH_SetMDIOClockRange+0xc0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d204      	bcs.n	8002458 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	e027      	b.n	80024a8 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <HAL_ETH_SetMDIOClockRange+0xc0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d303      	bcc.n	8002468 <HAL_ETH_SetMDIOClockRange+0x64>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4a19      	ldr	r2, [pc, #100]	; (80024c8 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d91e      	bls.n	80024a6 <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4a17      	ldr	r2, [pc, #92]	; (80024c8 <HAL_ETH_SetMDIOClockRange+0xc4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d908      	bls.n	8002482 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4a16      	ldr	r2, [pc, #88]	; (80024cc <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d804      	bhi.n	8002482 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e012      	b.n	80024a8 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	4a11      	ldr	r2, [pc, #68]	; (80024cc <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d908      	bls.n	800249c <HAL_ETH_SetMDIOClockRange+0x98>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <HAL_ETH_SetMDIOClockRange+0xcc>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d804      	bhi.n	800249c <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	e005      	b.n	80024a8 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	e000      	b.n	80024a8 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80024a6:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	01312cff 	.word	0x01312cff
 80024c0:	02160ebf 	.word	0x02160ebf
 80024c4:	03938700 	.word	0x03938700
 80024c8:	05f5e0ff 	.word	0x05f5e0ff
 80024cc:	08f0d17f 	.word	0x08f0d17f
 80024d0:	0ee6b280 	.word	0x0ee6b280

080024d4 <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;

  if (pFilterConfig == NULL)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e039      	b.n	800255c <HAL_ETH_SetMACFilterConfig+0x88>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	78db      	ldrb	r3, [r3, #3]
 80024f2:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80024f4:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	791b      	ldrb	r3, [r3, #4]
 80024fa:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80024fc:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	7a1b      	ldrb	r3, [r3, #8]
 8002502:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8002504:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	795b      	ldrb	r3, [r3, #5]
 800250a:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 800250c:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	7a52      	ldrb	r2, [r2, #9]
 8002512:	2a00      	cmp	r2, #0
 8002514:	d101      	bne.n	800251a <HAL_ETH_SetMACFilterConfig+0x46>
 8002516:	2220      	movs	r2, #32
 8002518:	e000      	b.n	800251c <HAL_ETH_SetMACFilterConfig+0x48>
 800251a:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 800251c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	79db      	ldrb	r3, [r3, #7]
 8002522:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8002524:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	799b      	ldrb	r3, [r3, #6]
 800252a:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 800252c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	789b      	ldrb	r3, [r3, #2]
 8002532:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8002534:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	785b      	ldrb	r3, [r3, #1]
 800253a:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 800253c:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_ETH_SetMACFilterConfig+0x94>)
 800254e:	4013      	ands	r3, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	68f9      	ldr	r1, [r7, #12]
 8002556:	430b      	orrs	r3, r1
 8002558:	6093      	str	r3, [r2, #8]

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	7ffff800 	.word	0x7ffff800

0800256c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800257e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	791b      	ldrb	r3, [r3, #4]
 8002584:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002586:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	7b1b      	ldrb	r3, [r3, #12]
 800258c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800258e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	7b5b      	ldrb	r3, [r3, #13]
 8002594:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002596:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	7b9b      	ldrb	r3, [r3, #14]
 800259c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800259e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	7bdb      	ldrb	r3, [r3, #15]
 80025a4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80025a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	7c12      	ldrb	r2, [r2, #16]
 80025ac:	2a00      	cmp	r2, #0
 80025ae:	d102      	bne.n	80025b6 <ETH_SetMACConfig+0x4a>
 80025b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025b4:	e000      	b.n	80025b8 <ETH_SetMACConfig+0x4c>
 80025b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80025b8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	7c52      	ldrb	r2, [r2, #17]
 80025be:	2a00      	cmp	r2, #0
 80025c0:	d102      	bne.n	80025c8 <ETH_SetMACConfig+0x5c>
 80025c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025c6:	e000      	b.n	80025ca <ETH_SetMACConfig+0x5e>
 80025c8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80025ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	7c9b      	ldrb	r3, [r3, #18]
 80025d0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025d2:	431a      	orrs	r2, r3
               macconf->Speed |
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80025d8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80025de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	7f1b      	ldrb	r3, [r3, #28]
 80025e4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80025e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	7f5b      	ldrb	r3, [r3, #29]
 80025ec:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80025ee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	7f92      	ldrb	r2, [r2, #30]
 80025f4:	2a00      	cmp	r2, #0
 80025f6:	d102      	bne.n	80025fe <ETH_SetMACConfig+0x92>
 80025f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025fc:	e000      	b.n	8002600 <ETH_SetMACConfig+0x94>
 80025fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002600:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	7fdb      	ldrb	r3, [r3, #31]
 8002606:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002608:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002610:	2a00      	cmp	r2, #0
 8002612:	d102      	bne.n	800261a <ETH_SetMACConfig+0xae>
 8002614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002618:	e000      	b.n	800261c <ETH_SetMACConfig+0xb0>
 800261a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800261c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002622:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800262a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800262c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002632:	4313      	orrs	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b57      	ldr	r3, [pc, #348]	; (800279c <ETH_SetMACConfig+0x230>)
 800263e:	4013      	ands	r3, r2
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	68f9      	ldr	r1, [r7, #12]
 8002646:	430b      	orrs	r3, r1
 8002648:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002656:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002658:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002660:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002662:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800266a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800266c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002674:	2a00      	cmp	r2, #0
 8002676:	d102      	bne.n	800267e <ETH_SetMACConfig+0x112>
 8002678:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800267c:	e000      	b.n	8002680 <ETH_SetMACConfig+0x114>
 800267e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002680:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	4b43      	ldr	r3, [pc, #268]	; (80027a0 <ETH_SetMACConfig+0x234>)
 8002692:	4013      	ands	r3, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	68f9      	ldr	r1, [r7, #12]
 800269a:	430b      	orrs	r3, r1
 800269c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026a4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	430b      	orrs	r3, r1
 80026c4:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80026cc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80026da:	2a00      	cmp	r2, #0
 80026dc:	d101      	bne.n	80026e2 <ETH_SetMACConfig+0x176>
 80026de:	2280      	movs	r2, #128	; 0x80
 80026e0:	e000      	b.n	80026e4 <ETH_SetMACConfig+0x178>
 80026e2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80026e4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ea:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026f6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80026fa:	4013      	ands	r3, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	68f9      	ldr	r1, [r7, #12]
 8002702:	430b      	orrs	r3, r1
 8002704:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800270c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002714:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002722:	f023 0103 	bic.w	r1, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	430a      	orrs	r2, r1
 800272e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800273a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002756:	2a00      	cmp	r2, #0
 8002758:	d101      	bne.n	800275e <ETH_SetMACConfig+0x1f2>
 800275a:	2240      	movs	r2, #64	; 0x40
 800275c:	e000      	b.n	8002760 <ETH_SetMACConfig+0x1f4>
 800275e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002760:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002768:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800276a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002772:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002774:	4313      	orrs	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002780:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	430a      	orrs	r2, r1
 800278c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	00048083 	.word	0x00048083
 80027a0:	c0f88000 	.word	0xc0f88000

080027a4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80027bc:	f023 0302 	bic.w	r3, r3, #2
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	6811      	ldr	r1, [r2, #0]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	430b      	orrs	r3, r1
 80027ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027ce:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	791b      	ldrb	r3, [r3, #4]
 80027d4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027da:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	7b1b      	ldrb	r3, [r3, #12]
 80027e0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	68f9      	ldr	r1, [r7, #12]
 80027fe:	430b      	orrs	r3, r1
 8002800:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002804:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	7b5b      	ldrb	r3, [r3, #13]
 800280a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002820:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <ETH_SetDMAConfig+0x104>)
 8002822:	4013      	ands	r3, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	68f9      	ldr	r1, [r7, #12]
 800282a:	430b      	orrs	r3, r1
 800282c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002830:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	7d1b      	ldrb	r3, [r3, #20]
 800283c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800283e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	7f5b      	ldrb	r3, [r3, #29]
 8002844:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002852:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <ETH_SetDMAConfig+0x108>)
 8002858:	4013      	ands	r3, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	68f9      	ldr	r1, [r7, #12]
 8002860:	430b      	orrs	r3, r1
 8002862:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002866:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	7f1b      	ldrb	r3, [r3, #28]
 800286e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002874:	4313      	orrs	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002880:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002888:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	68f9      	ldr	r1, [r7, #12]
 8002892:	430b      	orrs	r3, r1
 8002894:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002898:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	fffec000 	.word	0xfffec000
 80028ac:	ffc0efef 	.word	0xffc0efef

080028b0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b0a4      	sub	sp, #144	; 0x90
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028be:	2300      	movs	r3, #0
 80028c0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80028d4:	2301      	movs	r3, #1
 80028d6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002908:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800290c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002914:	2300      	movs	r3, #0
 8002916:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002918:	2301      	movs	r3, #1
 800291a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800292a:	2300      	movs	r3, #0
 800292c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800292e:	2300      	movs	r3, #0
 8002930:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002932:	2300      	movs	r3, #0
 8002934:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002942:	2301      	movs	r3, #1
 8002944:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002948:	2320      	movs	r3, #32
 800294a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002954:	2300      	movs	r3, #0
 8002956:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800295a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002960:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002964:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800296c:	2302      	movs	r3, #2
 800296e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002978:	2300      	movs	r3, #0
 800297a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800297e:	2300      	movs	r3, #0
 8002980:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002984:	2301      	movs	r3, #1
 8002986:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800298a:	2300      	movs	r3, #0
 800298c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff fde6 	bl	800256c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80029a0:	2301      	movs	r3, #1
 80029a2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80029a4:	2301      	movs	r3, #1
 80029a6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029be:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029c8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80029d0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029d6:	f107 0308 	add.w	r3, r7, #8
 80029da:	4619      	mov	r1, r3
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff fee1 	bl	80027a4 <ETH_SetDMAConfig>
}
 80029e2:	bf00      	nop
 80029e4:	3790      	adds	r7, #144	; 0x90
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b085      	sub	sp, #20
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	e01d      	b.n	8002a34 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68d9      	ldr	r1, [r3, #12]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	440b      	add	r3, r1
 8002a08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2200      	movs	r2, #0
 8002a14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a22:	68b9      	ldr	r1, [r7, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	3206      	adds	r2, #6
 8002a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3301      	adds	r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d9de      	bls.n	80029f8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a6c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e023      	b.n	8002ad2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6919      	ldr	r1, [r3, #16]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	3212      	adds	r2, #18
 8002ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d9d8      	bls.n	8002a8a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002afe:	461a      	mov	r2, r3
 8002b00:	2303      	movs	r3, #3
 8002b02:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b12:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b26:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b08d      	sub	sp, #52	; 0x34
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3318      	adds	r3, #24
 8002b46:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b60:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b78:	d007      	beq.n	8002b8a <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7e:	3304      	adds	r3, #4
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e25a      	b.n	8003044 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d044      	beq.n	8002c24 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	0c1b      	lsrs	r3, r3, #16
 8002ba0:	041b      	lsls	r3, r3, #16
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bc6:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d027      	beq.n	8002c24 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	431a      	orrs	r2, r3
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c12:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c22:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d010      	beq.n	8002c52 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	6992      	ldr	r2, [r2, #24]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d105      	bne.n	8002c6a <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d036      	beq.n	8002cd8 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c76:	f3bf 8f5f 	dmb	sy
}
 8002c7a:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d902      	bls.n	8002c9a <ETH_Prepare_Tx_Descriptors+0x164>
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c96:	3b04      	subs	r3, #4
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca2:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cb6:	d10f      	bne.n	8002cd8 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002cc2:	f3bf 8f5f 	dmb	sy
}
 8002cc6:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e1b5      	b.n	8003044 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	3301      	adds	r3, #1
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	6852      	ldr	r2, [r2, #4]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d014      	beq.n	8002d30 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002d1e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	6852      	ldr	r2, [r2, #4]
 8002d26:	0412      	lsls	r2, r2, #16
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	e00a      	b.n	8002d46 <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	2200      	movs	r2, #0
 8002d34:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002d3e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002d42:	6a3a      	ldr	r2, [r7, #32]
 8002d44:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d019      	beq.n	8002d86 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	04db      	lsls	r3, r3, #19
 8002d60:	431a      	orrs	r2, r3
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	0c9b      	lsrs	r3, r3, #18
 8002d6c:	049b      	lsls	r3, r3, #18
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	69d2      	ldr	r2, [r2, #28]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	60da      	str	r2, [r3, #12]
 8002d84:	e028      	b.n	8002dd8 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	6852      	ldr	r2, [r2, #4]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	431a      	orrs	r2, r3
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e0e:	f3bf 8f5f 	dmb	sy
}
 8002e12:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80d9 	beq.w	8002fe0 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e40:	e0ce      	b.n	8002fe0 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	3301      	adds	r3, #1
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d902      	bls.n	8002e60 <ETH_Prepare_Tx_Descriptors+0x32a>
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	3b04      	subs	r3, #4
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e68:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e82:	d007      	beq.n	8002e94 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	3304      	adds	r3, #4
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d029      	beq.n	8002ee8 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ea6:	e019      	b.n	8002edc <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8002ea8:	f3bf 8f5f 	dmb	sy
}
 8002eac:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d902      	bls.n	8002ecc <ETH_Prepare_Tx_Descriptors+0x396>
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	3b04      	subs	r3, #4
 8002eca:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed8:	3301      	adds	r3, #1
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d3e1      	bcc.n	8002ea8 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e0ad      	b.n	8003044 <ETH_Prepare_Tx_Descriptors+0x50e>
    }

    descnbr += 1U;
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	3301      	adds	r3, #1
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	6852      	ldr	r2, [r2, #4]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d014      	beq.n	8002f46 <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002f34:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	6852      	ldr	r2, [r2, #4]
 8002f3c:	0412      	lsls	r2, r2, #16
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	e00a      	b.n	8002f5c <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002f54:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002f58:	6a3a      	ldr	r2, [r7, #32]
 8002f5a:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00f      	beq.n	8002f88 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	0c9b      	lsrs	r3, r3, #18
 8002f6e:	049b      	lsls	r3, r3, #18
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	69d2      	ldr	r2, [r2, #28]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	e019      	b.n	8002fbc <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	6852      	ldr	r2, [r2, #4]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002fc2:	f3bf 8f5f 	dmb	sy
}
 8002fc6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f47f af2c 	bne.w	8002e42 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d006      	beq.n	8002ffe <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	e005      	b.n	800300a <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800301a:	6979      	ldr	r1, [r7, #20]
 800301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301e:	3304      	adds	r3, #4
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800302a:	611a      	str	r2, [r3, #16]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800302c:	b672      	cpsid	i
}
 800302e:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	4413      	add	r3, r2
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800303e:	b662      	cpsie	i
}
 8003040:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3734      	adds	r7, #52	; 0x34
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800305e:	e136      	b.n	80032ce <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	2101      	movs	r1, #1
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	4013      	ands	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 8128 	beq.w	80032c8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x38>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b12      	cmp	r3, #18
 8003086:	d125      	bne.n	80030d4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	08da      	lsrs	r2, r3, #3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3208      	adds	r2, #8
 8003090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003094:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	220f      	movs	r2, #15
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4013      	ands	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f003 020f 	and.w	r2, r3, #15
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	08da      	lsrs	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3208      	adds	r2, #8
 80030ce:	6979      	ldr	r1, [r7, #20]
 80030d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4013      	ands	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0203 	and.w	r2, r3, #3
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d00b      	beq.n	8003128 <HAL_GPIO_Init+0xd8>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d007      	beq.n	8003128 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800311c:	2b11      	cmp	r3, #17
 800311e:	d003      	beq.n	8003128 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b12      	cmp	r3, #18
 8003126:	d130      	bne.n	800318a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2203      	movs	r2, #3
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4013      	ands	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800315e:	2201      	movs	r2, #1
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4013      	ands	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	f003 0201 	and.w	r2, r3, #1
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b03      	cmp	r3, #3
 8003190:	d017      	beq.n	80031c2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2203      	movs	r2, #3
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	4013      	ands	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d07c      	beq.n	80032c8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80031ce:	4a47      	ldr	r2, [pc, #284]	; (80032ec <HAL_GPIO_Init+0x29c>)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	089b      	lsrs	r3, r3, #2
 80031d4:	3318      	adds	r3, #24
 80031d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031da:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	220f      	movs	r2, #15
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4013      	ands	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	0a9a      	lsrs	r2, r3, #10
 80031f6:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <HAL_GPIO_Init+0x2a0>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	f002 0203 	and.w	r2, r2, #3
 8003200:	00d2      	lsls	r2, r2, #3
 8003202:	4093      	lsls	r3, r2
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800320a:	4938      	ldr	r1, [pc, #224]	; (80032ec <HAL_GPIO_Init+0x29c>)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	089b      	lsrs	r3, r3, #2
 8003210:	3318      	adds	r3, #24
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003218:	4b34      	ldr	r3, [pc, #208]	; (80032ec <HAL_GPIO_Init+0x29c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	43db      	mvns	r3, r3
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4013      	ands	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800323c:	4a2b      	ldr	r2, [pc, #172]	; (80032ec <HAL_GPIO_Init+0x29c>)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003242:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <HAL_GPIO_Init+0x29c>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	43db      	mvns	r3, r3
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4013      	ands	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003266:	4a21      	ldr	r2, [pc, #132]	; (80032ec <HAL_GPIO_Init+0x29c>)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800326c:	4b1f      	ldr	r3, [pc, #124]	; (80032ec <HAL_GPIO_Init+0x29c>)
 800326e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003272:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	43db      	mvns	r3, r3
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4013      	ands	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003292:	4a16      	ldr	r2, [pc, #88]	; (80032ec <HAL_GPIO_Init+0x29c>)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800329a:	4b14      	ldr	r3, [pc, #80]	; (80032ec <HAL_GPIO_Init+0x29c>)
 800329c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4013      	ands	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80032c0:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <HAL_GPIO_Init+0x29c>)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	3301      	adds	r3, #1
 80032cc:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f47f aec1 	bne.w	8003060 <HAL_GPIO_Init+0x10>
  }
}
 80032de:	bf00      	nop
 80032e0:	bf00      	nop
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	44022000 	.word	0x44022000
 80032f0:	002f7f7f 	.word	0x002f7f7f

080032f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
 8003300:	4613      	mov	r3, r2
 8003302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003304:	787b      	ldrb	r3, [r7, #1]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800330a:	887a      	ldrh	r2, [r7, #2]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003310:	e002      	b.n	8003318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_ICACHE_Enable+0x1c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a04      	ldr	r2, [pc, #16]	; (8003340 <HAL_ICACHE_Enable+0x1c>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	40030400 	.word	0x40030400

08003344 <HAL_PWR_EnableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN6_HIGH, PWR_WAKEUP_PIN6_LOW, PWR_WAKEUP_PIN7_HIGH, PWR_WAKEUP_PIN7_LOW,
  *         PWR_WAKEUP_PIN8_HIGH and PWR_WAKEUP_PIN8_LOW are not available for STM32H503xx devices.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /*
     Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge).
  */
  MODIFY_REG(PWR->WUCR, PWR_EWUP_MASK, WakeUpPinPolarity);
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_PWR_EnableWakeUpPin+0x24>)
 800334e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_PWR_EnableWakeUpPin+0x28>)
 8003352:	4013      	ands	r3, r2
 8003354:	4904      	ldr	r1, [pc, #16]	; (8003368 <HAL_PWR_EnableWakeUpPin+0x24>)
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	4313      	orrs	r3, r2
 800335a:	648b      	str	r3, [r1, #72]	; 0x48
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	44020800 	.word	0x44020800
 800336c:	f000c0c0 	.word	0xf000c0c0

08003370 <HAL_PWR_DisableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN6_HIGH, PWR_WAKEUP_PIN6_LOW, PWR_WAKEUP_PIN7_HIGH, PWR_WAKEUP_PIN7_LOW,
  *         PWR_WAKEUP_PIN8_HIGH and PWR_WAKEUP_PIN8_LOW are not available for STM32H503xx devices.
  * @retval None.
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT(PWR->WUCR, (PWR_WUCR_WUPEN & WakeUpPinx));
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_PWR_DisableWakeUpPin+0x24>)
 800337a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	4904      	ldr	r1, [pc, #16]	; (8003394 <HAL_PWR_DisableWakeUpPin+0x24>)
 8003384:	4013      	ands	r3, r2
 8003386:	648b      	str	r3, [r1, #72]	; 0x48
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	44020800 	.word	0x44020800

08003398 <HAL_PWR_EnterSTANDBYMode>:
  *         except for registers and backup SRAM in the Backup domain and
  *         STANDBY circuitry.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  SET_BIT(PWR->PMCR, PWR_PMCR_LPMS);
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80033ae:	f043 0304 	orr.w	r3, r3, #4
 80033b2:	6113      	str	r3, [r2, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Wait For Interrupt Request */
  __WFI();
 80033b4:	bf30      	wfi
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	44020800 	.word	0x44020800
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f000 bc28 	b.w	8003c2c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033dc:	4b94      	ldr	r3, [pc, #592]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	f003 0318 	and.w	r3, r3, #24
 80033e4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80033e6:	4b92      	ldr	r3, [pc, #584]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d05b      	beq.n	80034b4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d005      	beq.n	800340e <HAL_RCC_OscConfig+0x46>
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	2b18      	cmp	r3, #24
 8003406:	d114      	bne.n	8003432 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d111      	bne.n	8003432 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d102      	bne.n	800341c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	f000 bc08 	b.w	8003c2c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800341c:	4b84      	ldr	r3, [pc, #528]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	041b      	lsls	r3, r3, #16
 800342a:	4981      	ldr	r1, [pc, #516]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 800342c:	4313      	orrs	r3, r2
 800342e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003430:	e040      	b.n	80034b4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d023      	beq.n	8003482 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800343a:	4b7d      	ldr	r3, [pc, #500]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a7c      	ldr	r2, [pc, #496]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003446:	f7fd ff55 	bl	80012f4 <HAL_GetTick>
 800344a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800344e:	f7fd ff51 	bl	80012f4 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e3e5      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003460:	4b73      	ldr	r3, [pc, #460]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800346c:	4b70      	ldr	r3, [pc, #448]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	041b      	lsls	r3, r3, #16
 800347a:	496d      	ldr	r1, [pc, #436]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 800347c:	4313      	orrs	r3, r2
 800347e:	618b      	str	r3, [r1, #24]
 8003480:	e018      	b.n	80034b4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003482:	4b6b      	ldr	r3, [pc, #428]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a6a      	ldr	r2, [pc, #424]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800348c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348e:	f7fd ff31 	bl	80012f4 <HAL_GetTick>
 8003492:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003496:	f7fd ff2d 	bl	80012f4 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e3c1      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80034a8:	4b61      	ldr	r3, [pc, #388]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80a0 	beq.w	8003602 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_OscConfig+0x10c>
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b18      	cmp	r3, #24
 80034cc:	d109      	bne.n	80034e2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d106      	bne.n	80034e2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f040 8092 	bne.w	8003602 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e3a4      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x132>
 80034ec:	4b50      	ldr	r3, [pc, #320]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a4f      	ldr	r2, [pc, #316]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 80034f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	e058      	b.n	80035ac <HAL_RCC_OscConfig+0x1e4>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d112      	bne.n	8003528 <HAL_RCC_OscConfig+0x160>
 8003502:	4b4b      	ldr	r3, [pc, #300]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a4a      	ldr	r2, [pc, #296]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4b48      	ldr	r3, [pc, #288]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a47      	ldr	r2, [pc, #284]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003514:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	4b45      	ldr	r3, [pc, #276]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a44      	ldr	r2, [pc, #272]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e041      	b.n	80035ac <HAL_RCC_OscConfig+0x1e4>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003530:	d112      	bne.n	8003558 <HAL_RCC_OscConfig+0x190>
 8003532:	4b3f      	ldr	r3, [pc, #252]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a3e      	ldr	r2, [pc, #248]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b3c      	ldr	r3, [pc, #240]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a3b      	ldr	r2, [pc, #236]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003544:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b39      	ldr	r3, [pc, #228]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a38      	ldr	r2, [pc, #224]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e029      	b.n	80035ac <HAL_RCC_OscConfig+0x1e4>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003560:	d112      	bne.n	8003588 <HAL_RCC_OscConfig+0x1c0>
 8003562:	4b33      	ldr	r3, [pc, #204]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a32      	ldr	r2, [pc, #200]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b30      	ldr	r3, [pc, #192]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a2f      	ldr	r2, [pc, #188]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2c      	ldr	r2, [pc, #176]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e011      	b.n	80035ac <HAL_RCC_OscConfig+0x1e4>
 8003588:	4b29      	ldr	r3, [pc, #164]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a28      	ldr	r2, [pc, #160]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 800358e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	4b26      	ldr	r3, [pc, #152]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a25      	ldr	r2, [pc, #148]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 800359a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	4b23      	ldr	r3, [pc, #140]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a22      	ldr	r2, [pc, #136]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 80035a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80035aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fd fe9e 	bl	80012f4 <HAL_GetTick>
 80035b8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80035bc:	f7fd fe9a 	bl	80012f4 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	; 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e32e      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ce:	4b18      	ldr	r3, [pc, #96]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x1f4>
 80035da:	e012      	b.n	8003602 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fd fe8a 	bl	80012f4 <HAL_GetTick>
 80035e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80035e4:	f7fd fe86 	bl	80012f4 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	; 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e31a      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035f6:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <HAL_RCC_OscConfig+0x268>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 809a 	beq.w	8003744 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_RCC_OscConfig+0x25a>
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	2b18      	cmp	r3, #24
 800361a:	d149      	bne.n	80036b0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d146      	bne.n	80036b0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d104      	bne.n	8003634 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e2fe      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
 800362e:	bf00      	nop
 8003630:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d11c      	bne.n	8003674 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800363a:	4b9a      	ldr	r3, [pc, #616]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0218 	and.w	r2, r3, #24
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	429a      	cmp	r2, r3
 8003648:	d014      	beq.n	8003674 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800364a:	4b96      	ldr	r3, [pc, #600]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 0218 	bic.w	r2, r3, #24
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	4993      	ldr	r1, [pc, #588]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003658:	4313      	orrs	r3, r2
 800365a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800365c:	f000 fdd0 	bl	8004200 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003660:	4b91      	ldr	r3, [pc, #580]	; (80038a8 <HAL_RCC_OscConfig+0x4e0>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fd fa19 	bl	8000a9c <HAL_InitTick>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e2db      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003674:	f7fd fe3e 	bl	80012f4 <HAL_GetTick>
 8003678:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800367c:	f7fd fe3a 	bl	80012f4 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e2ce      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800368e:	4b85      	ldr	r3, [pc, #532]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800369a:	4b82      	ldr	r3, [pc, #520]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	497e      	ldr	r1, [pc, #504]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80036ae:	e049      	b.n	8003744 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d02c      	beq.n	8003712 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80036b8:	4b7a      	ldr	r3, [pc, #488]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 0218 	bic.w	r2, r3, #24
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	4977      	ldr	r1, [pc, #476]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80036ca:	4b76      	ldr	r3, [pc, #472]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a75      	ldr	r2, [pc, #468]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fd fe0d 	bl	80012f4 <HAL_GetTick>
 80036da:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80036de:	f7fd fe09 	bl	80012f4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e29d      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f0:	4b6c      	ldr	r3, [pc, #432]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80036fc:	4b69      	ldr	r3, [pc, #420]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	4966      	ldr	r1, [pc, #408]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 800370c:	4313      	orrs	r3, r2
 800370e:	610b      	str	r3, [r1, #16]
 8003710:	e018      	b.n	8003744 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003712:	4b64      	ldr	r3, [pc, #400]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a63      	ldr	r2, [pc, #396]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371e:	f7fd fde9 	bl	80012f4 <HAL_GetTick>
 8003722:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003726:	f7fd fde5 	bl	80012f4 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e279      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003738:	4b5a      	ldr	r3, [pc, #360]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f0      	bne.n	8003726 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d03c      	beq.n	80037ca <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01c      	beq.n	8003792 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003758:	4b52      	ldr	r3, [pc, #328]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 800375a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800375e:	4a51      	ldr	r2, [pc, #324]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003760:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003764:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fd fdc4 	bl	80012f4 <HAL_GetTick>
 800376c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003770:	f7fd fdc0 	bl	80012f4 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e254      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003782:	4b48      	ldr	r3, [pc, #288]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ef      	beq.n	8003770 <HAL_RCC_OscConfig+0x3a8>
 8003790:	e01b      	b.n	80037ca <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003792:	4b44      	ldr	r3, [pc, #272]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003798:	4a42      	ldr	r2, [pc, #264]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 800379a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800379e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fd fda7 	bl	80012f4 <HAL_GetTick>
 80037a6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80037aa:	f7fd fda3 	bl	80012f4 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e237      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037bc:	4b39      	ldr	r3, [pc, #228]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 80037be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1ef      	bne.n	80037aa <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80d2 	beq.w	800397c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80037d8:	4b34      	ldr	r3, [pc, #208]	; (80038ac <HAL_RCC_OscConfig+0x4e4>)
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d118      	bne.n	8003816 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80037e4:	4b31      	ldr	r3, [pc, #196]	; (80038ac <HAL_RCC_OscConfig+0x4e4>)
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	4a30      	ldr	r2, [pc, #192]	; (80038ac <HAL_RCC_OscConfig+0x4e4>)
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f0:	f7fd fd80 	bl	80012f4 <HAL_GetTick>
 80037f4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f8:	f7fd fd7c 	bl	80012f4 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e210      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800380a:	4b28      	ldr	r3, [pc, #160]	; (80038ac <HAL_RCC_OscConfig+0x4e4>)
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d108      	bne.n	8003830 <HAL_RCC_OscConfig+0x468>
 800381e:	4b21      	ldr	r3, [pc, #132]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003824:	4a1f      	ldr	r2, [pc, #124]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800382e:	e074      	b.n	800391a <HAL_RCC_OscConfig+0x552>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d118      	bne.n	800386a <HAL_RCC_OscConfig+0x4a2>
 8003838:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 800383a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800383e:	4a19      	ldr	r2, [pc, #100]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003848:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 800384a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800384e:	4a15      	ldr	r2, [pc, #84]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003854:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 800385a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800385e:	4a11      	ldr	r2, [pc, #68]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003868:	e057      	b.n	800391a <HAL_RCC_OscConfig+0x552>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b05      	cmp	r3, #5
 8003870:	d11e      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4e8>
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003878:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 800387a:	f043 0304 	orr.w	r3, r3, #4
 800387e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003888:	4a06      	ldr	r2, [pc, #24]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 800388a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800388e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003892:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 8003894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003898:	4a02      	ldr	r2, [pc, #8]	; (80038a4 <HAL_RCC_OscConfig+0x4dc>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038a2:	e03a      	b.n	800391a <HAL_RCC_OscConfig+0x552>
 80038a4:	44020c00 	.word	0x44020c00
 80038a8:	20000004 	.word	0x20000004
 80038ac:	44020800 	.word	0x44020800
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b85      	cmp	r3, #133	; 0x85
 80038b6:	d118      	bne.n	80038ea <HAL_RCC_OscConfig+0x522>
 80038b8:	4ba2      	ldr	r3, [pc, #648]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 80038ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038be:	4aa1      	ldr	r2, [pc, #644]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 80038c0:	f043 0304 	orr.w	r3, r3, #4
 80038c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038c8:	4b9e      	ldr	r3, [pc, #632]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 80038ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038ce:	4a9d      	ldr	r2, [pc, #628]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 80038d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038d8:	4b9a      	ldr	r3, [pc, #616]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 80038da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038de:	4a99      	ldr	r2, [pc, #612]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038e8:	e017      	b.n	800391a <HAL_RCC_OscConfig+0x552>
 80038ea:	4b96      	ldr	r3, [pc, #600]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 80038ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038f0:	4a94      	ldr	r2, [pc, #592]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038fa:	4b92      	ldr	r3, [pc, #584]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 80038fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003900:	4a90      	ldr	r2, [pc, #576]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003902:	f023 0304 	bic.w	r3, r3, #4
 8003906:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800390a:	4b8e      	ldr	r3, [pc, #568]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 800390c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003910:	4a8c      	ldr	r2, [pc, #560]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003916:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d016      	beq.n	8003950 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003922:	f7fd fce7 	bl	80012f4 <HAL_GetTick>
 8003926:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003928:	e00a      	b.n	8003940 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7fd fce3 	bl	80012f4 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	; 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e175      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003940:	4b80      	ldr	r3, [pc, #512]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0ed      	beq.n	800392a <HAL_RCC_OscConfig+0x562>
 800394e:	e015      	b.n	800397c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7fd fcd0 	bl	80012f4 <HAL_GetTick>
 8003954:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003956:	e00a      	b.n	800396e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003958:	f7fd fccc 	bl	80012f4 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e15e      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800396e:	4b75      	ldr	r3, [pc, #468]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1ed      	bne.n	8003958 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d036      	beq.n	80039f6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	2b00      	cmp	r3, #0
 800398e:	d019      	beq.n	80039c4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003990:	4b6c      	ldr	r3, [pc, #432]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a6b      	ldr	r2, [pc, #428]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003996:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800399a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399c:	f7fd fcaa 	bl	80012f4 <HAL_GetTick>
 80039a0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80039a4:	f7fd fca6 	bl	80012f4 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e13a      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80039b6:	4b63      	ldr	r3, [pc, #396]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x5dc>
 80039c2:	e018      	b.n	80039f6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039c4:	4b5f      	ldr	r3, [pc, #380]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a5e      	ldr	r2, [pc, #376]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 80039ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fd fc90 	bl	80012f4 <HAL_GetTick>
 80039d4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80039d8:	f7fd fc8c 	bl	80012f4 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e120      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80039ea:	4b56      	ldr	r3, [pc, #344]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 8115 	beq.w	8003c2a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	2b18      	cmp	r3, #24
 8003a04:	f000 80af 	beq.w	8003b66 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	f040 8086 	bne.w	8003b1e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003a12:	4b4c      	ldr	r3, [pc, #304]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a4b      	ldr	r2, [pc, #300]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1e:	f7fd fc69 	bl	80012f4 <HAL_GetTick>
 8003a22:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003a26:	f7fd fc65 	bl	80012f4 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e0f9      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a38:	4b42      	ldr	r3, [pc, #264]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f0      	bne.n	8003a26 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003a44:	4b3f      	ldr	r3, [pc, #252]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a4c:	f023 0303 	bic.w	r3, r3, #3
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a58:	0212      	lsls	r2, r2, #8
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	4939      	ldr	r1, [pc, #228]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	628b      	str	r3, [r1, #40]	; 0x28
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a66:	3b01      	subs	r3, #1
 8003a68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	3b01      	subs	r3, #1
 8003a72:	025b      	lsls	r3, r3, #9
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	041b      	lsls	r3, r3, #16
 8003a80:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a92:	492c      	ldr	r1, [pc, #176]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003a98:	4b2a      	ldr	r3, [pc, #168]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	4a29      	ldr	r2, [pc, #164]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003a9e:	f023 0310 	bic.w	r3, r3, #16
 8003aa2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa8:	4a26      	ldr	r2, [pc, #152]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003aae:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	4a24      	ldr	r2, [pc, #144]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003ab4:	f043 0310 	orr.w	r3, r3, #16
 8003ab8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003aba:	4b22      	ldr	r3, [pc, #136]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	f023 020c 	bic.w	r2, r3, #12
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	491f      	ldr	r1, [pc, #124]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	f023 0220 	bic.w	r2, r3, #32
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad8:	491a      	ldr	r1, [pc, #104]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ade:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003aea:	4b16      	ldr	r3, [pc, #88]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003af0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fd fbfd 	bl	80012f4 <HAL_GetTick>
 8003afa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003afe:	f7fd fbf9 	bl	80012f4 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e08d      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b10:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x736>
 8003b1c:	e085      	b.n	8003c2a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003b1e:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a08      	ldr	r2, [pc, #32]	; (8003b44 <HAL_RCC_OscConfig+0x77c>)
 8003b24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fd fbe3 	bl	80012f4 <HAL_GetTick>
 8003b2e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003b32:	f7fd fbdf 	bl	80012f4 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d903      	bls.n	8003b48 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e073      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
 8003b44:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b48:	4b3a      	ldr	r3, [pc, #232]	; (8003c34 <HAL_RCC_OscConfig+0x86c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1ee      	bne.n	8003b32 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003b54:	4b37      	ldr	r3, [pc, #220]	; (8003c34 <HAL_RCC_OscConfig+0x86c>)
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	4a36      	ldr	r2, [pc, #216]	; (8003c34 <HAL_RCC_OscConfig+0x86c>)
 8003b5a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	6293      	str	r3, [r2, #40]	; 0x28
 8003b64:	e061      	b.n	8003c2a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003b66:	4b33      	ldr	r3, [pc, #204]	; (8003c34 <HAL_RCC_OscConfig+0x86c>)
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b6c:	4b31      	ldr	r3, [pc, #196]	; (8003c34 <HAL_RCC_OscConfig+0x86c>)
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b70:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d031      	beq.n	8003bde <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f003 0203 	and.w	r2, r3, #3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d12a      	bne.n	8003bde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d122      	bne.n	8003bde <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d11a      	bne.n	8003bde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	0a5b      	lsrs	r3, r3, #9
 8003bac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d111      	bne.n	8003bde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d108      	bne.n	8003bde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	0e1b      	lsrs	r3, r3, #24
 8003bd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d001      	beq.n	8003be2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e024      	b.n	8003c2c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <HAL_RCC_OscConfig+0x86c>)
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	08db      	lsrs	r3, r3, #3
 8003be8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d01a      	beq.n	8003c2a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <HAL_RCC_OscConfig+0x86c>)
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	4a0e      	ldr	r2, [pc, #56]	; (8003c34 <HAL_RCC_OscConfig+0x86c>)
 8003bfa:	f023 0310 	bic.w	r3, r3, #16
 8003bfe:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fd fb78 	bl	80012f4 <HAL_GetTick>
 8003c04:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003c06:	bf00      	nop
 8003c08:	f7fd fb74 	bl	80012f4 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d0f9      	beq.n	8003c08 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c18:	4a06      	ldr	r2, [pc, #24]	; (8003c34 <HAL_RCC_OscConfig+0x86c>)
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003c1e:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <HAL_RCC_OscConfig+0x86c>)
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	4a04      	ldr	r2, [pc, #16]	; (8003c34 <HAL_RCC_OscConfig+0x86c>)
 8003c24:	f043 0310 	orr.w	r3, r3, #16
 8003c28:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3720      	adds	r7, #32
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	44020c00 	.word	0x44020c00

08003c38 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e19e      	b.n	8003f8a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b83      	ldr	r3, [pc, #524]	; (8003e5c <HAL_RCC_ClockConfig+0x224>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d910      	bls.n	8003c7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b80      	ldr	r3, [pc, #512]	; (8003e5c <HAL_RCC_ClockConfig+0x224>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 020f 	bic.w	r2, r3, #15
 8003c62:	497e      	ldr	r1, [pc, #504]	; (8003e5c <HAL_RCC_ClockConfig+0x224>)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b7c      	ldr	r3, [pc, #496]	; (8003e5c <HAL_RCC_ClockConfig+0x224>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e186      	b.n	8003f8a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d012      	beq.n	8003cae <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	4b74      	ldr	r3, [pc, #464]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d909      	bls.n	8003cae <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003c9a:	4b71      	ldr	r3, [pc, #452]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	496d      	ldr	r1, [pc, #436]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d012      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	4b68      	ldr	r3, [pc, #416]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d909      	bls.n	8003ce0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003ccc:	4b64      	ldr	r3, [pc, #400]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	4961      	ldr	r1, [pc, #388]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d010      	beq.n	8003d0e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	4b5b      	ldr	r3, [pc, #364]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d908      	bls.n	8003d0e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003cfc:	4b58      	ldr	r3, [pc, #352]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4955      	ldr	r1, [pc, #340]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d010      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	4b50      	ldr	r3, [pc, #320]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d908      	bls.n	8003d3c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003d2a:	4b4d      	ldr	r3, [pc, #308]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f023 020f 	bic.w	r2, r3, #15
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	494a      	ldr	r1, [pc, #296]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8093 	beq.w	8003e70 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d107      	bne.n	8003d62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003d52:	4b43      	ldr	r3, [pc, #268]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d121      	bne.n	8003da2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e113      	b.n	8003f8a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d107      	bne.n	8003d7a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d6a:	4b3d      	ldr	r3, [pc, #244]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d115      	bne.n	8003da2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e107      	b.n	8003f8a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d107      	bne.n	8003d92 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003d82:	4b37      	ldr	r3, [pc, #220]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e0fb      	b.n	8003f8a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d92:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e0f3      	b.n	8003f8a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003da2:	4b2f      	ldr	r3, [pc, #188]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f023 0203 	bic.w	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	492c      	ldr	r1, [pc, #176]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db4:	f7fd fa9e 	bl	80012f4 <HAL_GetTick>
 8003db8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d112      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc4:	f7fd fa96 	bl	80012f4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e0d7      	b.n	8003f8a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dda:	4b21      	ldr	r3, [pc, #132]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f003 0318 	and.w	r3, r3, #24
 8003de2:	2b18      	cmp	r3, #24
 8003de4:	d1ee      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x18c>
 8003de6:	e043      	b.n	8003e70 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d112      	bne.n	8003e16 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003df2:	f7fd fa7f 	bl	80012f4 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e0c0      	b.n	8003f8a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e08:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	f003 0318 	and.w	r3, r3, #24
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d1ee      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x1ba>
 8003e14:	e02c      	b.n	8003e70 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d122      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e1e:	e00a      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e20:	f7fd fa68 	bl	80012f4 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e0a9      	b.n	8003f8a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e36:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <HAL_RCC_ClockConfig+0x228>)
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f003 0318 	and.w	r3, r3, #24
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d1ee      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x1e8>
 8003e42:	e015      	b.n	8003e70 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e44:	f7fd fa56 	bl	80012f4 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d906      	bls.n	8003e64 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e097      	b.n	8003f8a <HAL_RCC_ClockConfig+0x352>
 8003e5a:	bf00      	nop
 8003e5c:	40022000 	.word	0x40022000
 8003e60:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e64:	4b4b      	ldr	r3, [pc, #300]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f003 0318 	and.w	r3, r3, #24
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e9      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d010      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	4b44      	ldr	r3, [pc, #272]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d208      	bcs.n	8003e9e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003e8c:	4b41      	ldr	r3, [pc, #260]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f023 020f 	bic.w	r2, r3, #15
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	493e      	ldr	r1, [pc, #248]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e9e:	4b3e      	ldr	r3, [pc, #248]	; (8003f98 <HAL_RCC_ClockConfig+0x360>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d210      	bcs.n	8003ece <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eac:	4b3a      	ldr	r3, [pc, #232]	; (8003f98 <HAL_RCC_ClockConfig+0x360>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 020f 	bic.w	r2, r3, #15
 8003eb4:	4938      	ldr	r1, [pc, #224]	; (8003f98 <HAL_RCC_ClockConfig+0x360>)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebc:	4b36      	ldr	r3, [pc, #216]	; (8003f98 <HAL_RCC_ClockConfig+0x360>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d001      	beq.n	8003ece <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e05d      	b.n	8003f8a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d010      	beq.n	8003efc <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d208      	bcs.n	8003efc <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003eea:	4b2a      	ldr	r3, [pc, #168]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	4927      	ldr	r1, [pc, #156]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d012      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d209      	bcs.n	8003f2e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	491a      	ldr	r1, [pc, #104]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d012      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d209      	bcs.n	8003f60 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003f4c:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	490e      	ldr	r1, [pc, #56]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003f60:	f000 f822 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_RCC_ClockConfig+0x35c>)
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	490b      	ldr	r1, [pc, #44]	; (8003f9c <HAL_RCC_ClockConfig+0x364>)
 8003f70:	5ccb      	ldrb	r3, [r1, r3]
 8003f72:	fa22 f303 	lsr.w	r3, r2, r3
 8003f76:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <HAL_RCC_ClockConfig+0x368>)
 8003f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <HAL_RCC_ClockConfig+0x36c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fc fd8c 	bl	8000a9c <HAL_InitTick>
 8003f84:	4603      	mov	r3, r0
 8003f86:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003f88:	7afb      	ldrb	r3, [r7, #11]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	44020c00 	.word	0x44020c00
 8003f98:	40022000 	.word	0x40022000
 8003f9c:	0800f9bc 	.word	0x0800f9bc
 8003fa0:	20000000 	.word	0x20000000
 8003fa4:	20000004 	.word	0x20000004

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b089      	sub	sp, #36	; 0x24
 8003fac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003fae:	4b8c      	ldr	r3, [pc, #560]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f003 0318 	and.w	r3, r3, #24
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d102      	bne.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003fba:	4b8a      	ldr	r3, [pc, #552]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	e107      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fc0:	4b87      	ldr	r3, [pc, #540]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	f003 0318 	and.w	r3, r3, #24
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d112      	bne.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003fcc:	4b84      	ldr	r3, [pc, #528]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fd8:	4b81      	ldr	r3, [pc, #516]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	08db      	lsrs	r3, r3, #3
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	4a81      	ldr	r2, [pc, #516]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x240>)
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	e0f1      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003fec:	4b7e      	ldr	r3, [pc, #504]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x240>)
 8003fee:	61fb      	str	r3, [r7, #28]
 8003ff0:	e0ee      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ff2:	4b7b      	ldr	r3, [pc, #492]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f003 0318 	and.w	r3, r3, #24
 8003ffa:	2b10      	cmp	r3, #16
 8003ffc:	d102      	bne.n	8004004 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ffe:	4b7b      	ldr	r3, [pc, #492]	; (80041ec <HAL_RCC_GetSysClockFreq+0x244>)
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	e0e5      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004004:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f003 0318 	and.w	r3, r3, #24
 800400c:	2b18      	cmp	r3, #24
 800400e:	f040 80dd 	bne.w	80041cc <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004012:	4b73      	ldr	r3, [pc, #460]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800401c:	4b70      	ldr	r3, [pc, #448]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	0a1b      	lsrs	r3, r3, #8
 8004022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004026:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004028:	4b6d      	ldr	r3, [pc, #436]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004034:	4b6a      	ldr	r3, [pc, #424]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004038:	08db      	lsrs	r3, r3, #3
 800403a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	fb02 f303 	mul.w	r3, r2, r3
 8004044:	ee07 3a90 	vmov	s15, r3
 8004048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 80b7 	beq.w	80041c6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d003      	beq.n	8004066 <HAL_RCC_GetSysClockFreq+0xbe>
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b03      	cmp	r3, #3
 8004062:	d056      	beq.n	8004112 <HAL_RCC_GetSysClockFreq+0x16a>
 8004064:	e077      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004066:	4b5e      	ldr	r3, [pc, #376]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d02d      	beq.n	80040ce <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004072:	4b5b      	ldr	r3, [pc, #364]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	08db      	lsrs	r3, r3, #3
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	4a5a      	ldr	r2, [pc, #360]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x240>)
 800407e:	fa22 f303 	lsr.w	r3, r2, r3
 8004082:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	ee07 3a90 	vmov	s15, r3
 8004094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800409c:	4b50      	ldr	r3, [pc, #320]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800409e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a4:	ee07 3a90 	vmov	s15, r3
 80040a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80040ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80040b0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80041f0 <HAL_RCC_GetSysClockFreq+0x248>
 80040b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80040bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80040cc:	e065      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	ee07 3a90 	vmov	s15, r3
 80040d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d8:	eddf 6a46 	vldr	s13, [pc, #280]	; 80041f4 <HAL_RCC_GetSysClockFreq+0x24c>
 80040dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040e0:	4b3f      	ldr	r3, [pc, #252]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80040e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e8:	ee07 3a90 	vmov	s15, r3
 80040ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80040f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80040f4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80041f0 <HAL_RCC_GetSysClockFreq+0x248>
 80040f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004100:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004104:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004110:	e043      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	ee07 3a90 	vmov	s15, r3
 8004118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411c:	eddf 6a36 	vldr	s13, [pc, #216]	; 80041f8 <HAL_RCC_GetSysClockFreq+0x250>
 8004120:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004124:	4b2e      	ldr	r3, [pc, #184]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8004126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412c:	ee07 3a90 	vmov	s15, r3
 8004130:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004134:	ed97 6a02 	vldr	s12, [r7, #8]
 8004138:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80041f0 <HAL_RCC_GetSysClockFreq+0x248>
 800413c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004140:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004144:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004148:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800414c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004150:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004154:	e021      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	ee07 3a90 	vmov	s15, r3
 800415c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004160:	eddf 6a26 	vldr	s13, [pc, #152]	; 80041fc <HAL_RCC_GetSysClockFreq+0x254>
 8004164:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004168:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800416a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004170:	ee07 3a90 	vmov	s15, r3
 8004174:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004178:	ed97 6a02 	vldr	s12, [r7, #8]
 800417c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80041f0 <HAL_RCC_GetSysClockFreq+0x248>
 8004180:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004184:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004188:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800418c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004194:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004198:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800419a:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800419c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419e:	0a5b      	lsrs	r3, r3, #9
 80041a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a4:	3301      	adds	r3, #1
 80041a6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041b2:	edd7 6a06 	vldr	s13, [r7, #24]
 80041b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041be:	ee17 3a90 	vmov	r3, s15
 80041c2:	61fb      	str	r3, [r7, #28]
 80041c4:	e004      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	e001      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x240>)
 80041ce:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80041d0:	69fb      	ldr	r3, [r7, #28]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3724      	adds	r7, #36	; 0x24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	44020c00 	.word	0x44020c00
 80041e4:	003d0900 	.word	0x003d0900
 80041e8:	03d09000 	.word	0x03d09000
 80041ec:	007a1200 	.word	0x007a1200
 80041f0:	46000000 	.word	0x46000000
 80041f4:	4c742400 	.word	0x4c742400
 80041f8:	4af42400 	.word	0x4af42400
 80041fc:	4a742400 	.word	0x4a742400

08004200 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004204:	f7ff fed0 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8004208:	4602      	mov	r2, r0
 800420a:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_RCC_GetHCLKFreq+0x2c>)
 800420c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800420e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004212:	4907      	ldr	r1, [pc, #28]	; (8004230 <HAL_RCC_GetHCLKFreq+0x30>)
 8004214:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004216:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800421a:	fa22 f303 	lsr.w	r3, r2, r3
 800421e:	4a05      	ldr	r2, [pc, #20]	; (8004234 <HAL_RCC_GetHCLKFreq+0x34>)
 8004220:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004222:	4b04      	ldr	r3, [pc, #16]	; (8004234 <HAL_RCC_GetHCLKFreq+0x34>)
 8004224:	681b      	ldr	r3, [r3, #0]
}
 8004226:	4618      	mov	r0, r3
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	44020c00 	.word	0x44020c00
 8004230:	0800f9bc 	.word	0x0800f9bc
 8004234:	20000000 	.word	0x20000000

08004238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800423c:	f7ff ffe0 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	091b      	lsrs	r3, r3, #4
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	4904      	ldr	r1, [pc, #16]	; (8004260 <HAL_RCC_GetPCLK1Freq+0x28>)
 800424e:	5ccb      	ldrb	r3, [r1, r3]
 8004250:	f003 031f 	and.w	r3, r3, #31
 8004254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004258:	4618      	mov	r0, r3
 800425a:	bd80      	pop	{r7, pc}
 800425c:	44020c00 	.word	0x44020c00
 8004260:	0800f9cc 	.word	0x0800f9cc

08004264 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	221f      	movs	r2, #31
 8004272:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004274:	4b15      	ldr	r3, [pc, #84]	; (80042cc <HAL_RCC_GetClockConfig+0x68>)
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f003 0203 	and.w	r2, r3, #3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8004280:	4b12      	ldr	r3, [pc, #72]	; (80042cc <HAL_RCC_GetClockConfig+0x68>)
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 020f 	and.w	r2, r3, #15
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042b2:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <HAL_RCC_GetClockConfig+0x6c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 020f 	and.w	r2, r3, #15
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	601a      	str	r2, [r3, #0]
}
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	44020c00 	.word	0x44020c00
 80042d0:	40022000 	.word	0x40022000

080042d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e049      	b.n	800437a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f841 	bl	8004382 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f000 fa60 	bl	80047d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d001      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e07c      	b.n	80044aa <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a3a      	ldr	r2, [pc, #232]	; (80044b8 <HAL_TIM_Base_Start_IT+0x120>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d04a      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xd0>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a39      	ldr	r2, [pc, #228]	; (80044bc <HAL_TIM_Base_Start_IT+0x124>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d045      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xd0>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e4:	d040      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xd0>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043ee:	d03b      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xd0>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a32      	ldr	r2, [pc, #200]	; (80044c0 <HAL_TIM_Base_Start_IT+0x128>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d036      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xd0>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a31      	ldr	r2, [pc, #196]	; (80044c4 <HAL_TIM_Base_Start_IT+0x12c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d031      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xd0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2f      	ldr	r2, [pc, #188]	; (80044c8 <HAL_TIM_Base_Start_IT+0x130>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d02c      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xd0>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a2e      	ldr	r2, [pc, #184]	; (80044cc <HAL_TIM_Base_Start_IT+0x134>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d027      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xd0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a2c      	ldr	r2, [pc, #176]	; (80044d0 <HAL_TIM_Base_Start_IT+0x138>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d022      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xd0>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a2b      	ldr	r2, [pc, #172]	; (80044d4 <HAL_TIM_Base_Start_IT+0x13c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d01d      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xd0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a29      	ldr	r2, [pc, #164]	; (80044d8 <HAL_TIM_Base_Start_IT+0x140>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d018      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xd0>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a28      	ldr	r2, [pc, #160]	; (80044dc <HAL_TIM_Base_Start_IT+0x144>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d013      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xd0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a26      	ldr	r2, [pc, #152]	; (80044e0 <HAL_TIM_Base_Start_IT+0x148>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00e      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xd0>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a25      	ldr	r2, [pc, #148]	; (80044e4 <HAL_TIM_Base_Start_IT+0x14c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d009      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xd0>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a23      	ldr	r2, [pc, #140]	; (80044e8 <HAL_TIM_Base_Start_IT+0x150>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d004      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xd0>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a22      	ldr	r2, [pc, #136]	; (80044ec <HAL_TIM_Base_Start_IT+0x154>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d115      	bne.n	8004494 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <HAL_TIM_Base_Start_IT+0x158>)
 8004470:	4013      	ands	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b06      	cmp	r3, #6
 8004478:	d015      	beq.n	80044a6 <HAL_TIM_Base_Start_IT+0x10e>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004480:	d011      	beq.n	80044a6 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0201 	orr.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004492:	e008      	b.n	80044a6 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	e000      	b.n	80044a8 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	50012c00 	.word	0x50012c00
 80044c0:	40000400 	.word	0x40000400
 80044c4:	50000400 	.word	0x50000400
 80044c8:	40000800 	.word	0x40000800
 80044cc:	50000800 	.word	0x50000800
 80044d0:	40000c00 	.word	0x40000c00
 80044d4:	50000c00 	.word	0x50000c00
 80044d8:	40013400 	.word	0x40013400
 80044dc:	50013400 	.word	0x50013400
 80044e0:	40001800 	.word	0x40001800
 80044e4:	50001800 	.word	0x50001800
 80044e8:	40014000 	.word	0x40014000
 80044ec:	50014000 	.word	0x50014000
 80044f0:	00010007 	.word	0x00010007

080044f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d020      	beq.n	8004558 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01b      	beq.n	8004558 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0202 	mvn.w	r2, #2
 8004528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f92c 	bl	800479c <HAL_TIM_IC_CaptureCallback>
 8004544:	e005      	b.n	8004552 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f91e 	bl	8004788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f92f 	bl	80047b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d020      	beq.n	80045a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01b      	beq.n	80045a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0204 	mvn.w	r2, #4
 8004574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2202      	movs	r2, #2
 800457a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f906 	bl	800479c <HAL_TIM_IC_CaptureCallback>
 8004590:	e005      	b.n	800459e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f8f8 	bl	8004788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f909 	bl	80047b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d020      	beq.n	80045f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01b      	beq.n	80045f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0208 	mvn.w	r2, #8
 80045c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2204      	movs	r2, #4
 80045c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f8e0 	bl	800479c <HAL_TIM_IC_CaptureCallback>
 80045dc:	e005      	b.n	80045ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f8d2 	bl	8004788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f8e3 	bl	80047b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d020      	beq.n	800463c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01b      	beq.n	800463c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0210 	mvn.w	r2, #16
 800460c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2208      	movs	r2, #8
 8004612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f8ba 	bl	800479c <HAL_TIM_IC_CaptureCallback>
 8004628:	e005      	b.n	8004636 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f8ac 	bl	8004788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f8bd 	bl	80047b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d007      	beq.n	8004660 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0201 	mvn.w	r2, #1
 8004658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fc f920 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00c      	beq.n	8004684 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800467c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f9d2 	bl	8004a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00c      	beq.n	80046a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f9ca 	bl	8004a3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00c      	beq.n	80046cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f87c 	bl	80047c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00c      	beq.n	80046f0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d007      	beq.n	80046f0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0220 	mvn.w	r2, #32
 80046e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f992 	bl	8004a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00c      	beq.n	8004714 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800470c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f99e 	bl	8004a50 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00c      	beq.n	8004738 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f996 	bl	8004a64 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00c      	beq.n	800475c <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d007      	beq.n	800475c <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f98e 	bl	8004a78 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00c      	beq.n	8004780 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f986 	bl	8004a8c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004780:	bf00      	nop
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a74      	ldr	r2, [pc, #464]	; (80049bc <TIM_Base_SetConfig+0x1e4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d02b      	beq.n	8004848 <TIM_Base_SetConfig+0x70>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a73      	ldr	r2, [pc, #460]	; (80049c0 <TIM_Base_SetConfig+0x1e8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d027      	beq.n	8004848 <TIM_Base_SetConfig+0x70>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fe:	d023      	beq.n	8004848 <TIM_Base_SetConfig+0x70>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004806:	d01f      	beq.n	8004848 <TIM_Base_SetConfig+0x70>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a6e      	ldr	r2, [pc, #440]	; (80049c4 <TIM_Base_SetConfig+0x1ec>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d01b      	beq.n	8004848 <TIM_Base_SetConfig+0x70>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a6d      	ldr	r2, [pc, #436]	; (80049c8 <TIM_Base_SetConfig+0x1f0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d017      	beq.n	8004848 <TIM_Base_SetConfig+0x70>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a6c      	ldr	r2, [pc, #432]	; (80049cc <TIM_Base_SetConfig+0x1f4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d013      	beq.n	8004848 <TIM_Base_SetConfig+0x70>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a6b      	ldr	r2, [pc, #428]	; (80049d0 <TIM_Base_SetConfig+0x1f8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00f      	beq.n	8004848 <TIM_Base_SetConfig+0x70>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a6a      	ldr	r2, [pc, #424]	; (80049d4 <TIM_Base_SetConfig+0x1fc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00b      	beq.n	8004848 <TIM_Base_SetConfig+0x70>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a69      	ldr	r2, [pc, #420]	; (80049d8 <TIM_Base_SetConfig+0x200>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d007      	beq.n	8004848 <TIM_Base_SetConfig+0x70>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a68      	ldr	r2, [pc, #416]	; (80049dc <TIM_Base_SetConfig+0x204>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_Base_SetConfig+0x70>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a67      	ldr	r2, [pc, #412]	; (80049e0 <TIM_Base_SetConfig+0x208>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d108      	bne.n	800485a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a57      	ldr	r2, [pc, #348]	; (80049bc <TIM_Base_SetConfig+0x1e4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d05b      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a56      	ldr	r2, [pc, #344]	; (80049c0 <TIM_Base_SetConfig+0x1e8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d057      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004870:	d053      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004878:	d04f      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a51      	ldr	r2, [pc, #324]	; (80049c4 <TIM_Base_SetConfig+0x1ec>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d04b      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a50      	ldr	r2, [pc, #320]	; (80049c8 <TIM_Base_SetConfig+0x1f0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d047      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a4f      	ldr	r2, [pc, #316]	; (80049cc <TIM_Base_SetConfig+0x1f4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d043      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a4e      	ldr	r2, [pc, #312]	; (80049d0 <TIM_Base_SetConfig+0x1f8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d03f      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a4d      	ldr	r2, [pc, #308]	; (80049d4 <TIM_Base_SetConfig+0x1fc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d03b      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a4c      	ldr	r2, [pc, #304]	; (80049d8 <TIM_Base_SetConfig+0x200>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d037      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a4b      	ldr	r2, [pc, #300]	; (80049dc <TIM_Base_SetConfig+0x204>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d033      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a4a      	ldr	r2, [pc, #296]	; (80049e0 <TIM_Base_SetConfig+0x208>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d02f      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a49      	ldr	r2, [pc, #292]	; (80049e4 <TIM_Base_SetConfig+0x20c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d02b      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a48      	ldr	r2, [pc, #288]	; (80049e8 <TIM_Base_SetConfig+0x210>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d027      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a47      	ldr	r2, [pc, #284]	; (80049ec <TIM_Base_SetConfig+0x214>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d023      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a46      	ldr	r2, [pc, #280]	; (80049f0 <TIM_Base_SetConfig+0x218>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d01f      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a45      	ldr	r2, [pc, #276]	; (80049f4 <TIM_Base_SetConfig+0x21c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01b      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a44      	ldr	r2, [pc, #272]	; (80049f8 <TIM_Base_SetConfig+0x220>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d017      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a43      	ldr	r2, [pc, #268]	; (80049fc <TIM_Base_SetConfig+0x224>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a42      	ldr	r2, [pc, #264]	; (8004a00 <TIM_Base_SetConfig+0x228>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00f      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a41      	ldr	r2, [pc, #260]	; (8004a04 <TIM_Base_SetConfig+0x22c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00b      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a40      	ldr	r2, [pc, #256]	; (8004a08 <TIM_Base_SetConfig+0x230>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d007      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a3f      	ldr	r2, [pc, #252]	; (8004a0c <TIM_Base_SetConfig+0x234>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d003      	beq.n	800491a <TIM_Base_SetConfig+0x142>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a3e      	ldr	r2, [pc, #248]	; (8004a10 <TIM_Base_SetConfig+0x238>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d108      	bne.n	800492c <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <TIM_Base_SetConfig+0x1e4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d023      	beq.n	80049a0 <TIM_Base_SetConfig+0x1c8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a19      	ldr	r2, [pc, #100]	; (80049c0 <TIM_Base_SetConfig+0x1e8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d01f      	beq.n	80049a0 <TIM_Base_SetConfig+0x1c8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a1e      	ldr	r2, [pc, #120]	; (80049dc <TIM_Base_SetConfig+0x204>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d01b      	beq.n	80049a0 <TIM_Base_SetConfig+0x1c8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a1d      	ldr	r2, [pc, #116]	; (80049e0 <TIM_Base_SetConfig+0x208>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d017      	beq.n	80049a0 <TIM_Base_SetConfig+0x1c8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a22      	ldr	r2, [pc, #136]	; (80049fc <TIM_Base_SetConfig+0x224>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d013      	beq.n	80049a0 <TIM_Base_SetConfig+0x1c8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a21      	ldr	r2, [pc, #132]	; (8004a00 <TIM_Base_SetConfig+0x228>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00f      	beq.n	80049a0 <TIM_Base_SetConfig+0x1c8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a20      	ldr	r2, [pc, #128]	; (8004a04 <TIM_Base_SetConfig+0x22c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00b      	beq.n	80049a0 <TIM_Base_SetConfig+0x1c8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a1f      	ldr	r2, [pc, #124]	; (8004a08 <TIM_Base_SetConfig+0x230>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d007      	beq.n	80049a0 <TIM_Base_SetConfig+0x1c8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a1e      	ldr	r2, [pc, #120]	; (8004a0c <TIM_Base_SetConfig+0x234>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_Base_SetConfig+0x1c8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a1d      	ldr	r2, [pc, #116]	; (8004a10 <TIM_Base_SetConfig+0x238>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d103      	bne.n	80049a8 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	615a      	str	r2, [r3, #20]
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40012c00 	.word	0x40012c00
 80049c0:	50012c00 	.word	0x50012c00
 80049c4:	40000400 	.word	0x40000400
 80049c8:	50000400 	.word	0x50000400
 80049cc:	40000800 	.word	0x40000800
 80049d0:	50000800 	.word	0x50000800
 80049d4:	40000c00 	.word	0x40000c00
 80049d8:	50000c00 	.word	0x50000c00
 80049dc:	40013400 	.word	0x40013400
 80049e0:	50013400 	.word	0x50013400
 80049e4:	40001800 	.word	0x40001800
 80049e8:	50001800 	.word	0x50001800
 80049ec:	40001c00 	.word	0x40001c00
 80049f0:	50001c00 	.word	0x50001c00
 80049f4:	40002000 	.word	0x40002000
 80049f8:	50002000 	.word	0x50002000
 80049fc:	40014000 	.word	0x40014000
 8004a00:	50014000 	.word	0x50014000
 8004a04:	40014400 	.word	0x40014400
 8004a08:	50014400 	.word	0x50014400
 8004a0c:	40014800 	.word	0x40014800
 8004a10:	50014800 	.word	0x50014800

08004a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <nx_eth_phy_init>:
  * @param  none
  * @retval ETH_PHY_STATUS_OK on success, ETH_PHY_STATUS_ERROR otherwise
  */

int32_t nx_eth_phy_init(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
    int32_t ret = ETH_PHY_STATUS_ERROR;
 8004aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aaa:	607b      	str	r3, [r7, #4]
    /* Set PHY IO functions */

    LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004aac:	4908      	ldr	r1, [pc, #32]	; (8004ad0 <nx_eth_phy_init+0x30>)
 8004aae:	4809      	ldr	r0, [pc, #36]	; (8004ad4 <nx_eth_phy_init+0x34>)
 8004ab0:	f7fc fa09 	bl	8000ec6 <LAN8742_RegisterBusIO>
    /* Initialize the LAN8742 ETH PHY */

    if (LAN8742_Init(&LAN8742) == LAN8742_STATUS_OK)
 8004ab4:	4807      	ldr	r0, [pc, #28]	; (8004ad4 <nx_eth_phy_init+0x34>)
 8004ab6:	f7fc fa38 	bl	8000f2a <LAN8742_Init>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <nx_eth_phy_init+0x24>
    {
        ret = ETH_PHY_STATUS_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	607b      	str	r3, [r7, #4]
    }

    return ret;
 8004ac4:	687b      	ldr	r3, [r7, #4]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	2000000c 	.word	0x2000000c
 8004ad4:	20014770 	.word	0x20014770

08004ad8 <nx_eth_phy_get_link_state>:
  * @param  none
  * @retval the link status.
  */

int32_t nx_eth_phy_get_link_state(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
    int32_t  linkstate = LAN8742_GetLinkState(&LAN8742);
 8004ade:	4804      	ldr	r0, [pc, #16]	; (8004af0 <nx_eth_phy_get_link_state+0x18>)
 8004ae0:	f7fc face 	bl	8001080 <LAN8742_GetLinkState>
 8004ae4:	6078      	str	r0, [r7, #4]

    return linkstate;
 8004ae6:	687b      	ldr	r3, [r7, #4]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20014770 	.word	0x20014770

08004af4 <lan8742_io_init>:
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */

int32_t lan8742_io_init(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&eth_handle);
 8004af8:	4802      	ldr	r0, [pc, #8]	; (8004b04 <lan8742_io_init+0x10>)
 8004afa:	f7fd fc83 	bl	8002404 <HAL_ETH_SetMDIOClockRange>

  return ETH_PHY_STATUS_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	20007e64 	.word	0x20007e64

08004b08 <lan8742_io_deinit>:
  * @brief  De-Initialize the MDIO interface
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t lan8742_io_deinit (void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
    return ETH_PHY_STATUS_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <lan8742_io_read_reg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t lan8742_io_read_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&eth_handle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	68f9      	ldr	r1, [r7, #12]
 8004b2a:	4807      	ldr	r0, [pc, #28]	; (8004b48 <lan8742_io_read_reg+0x30>)
 8004b2c:	f7fd f9ba 	bl	8001ea4 <HAL_ETH_ReadPHYRegister>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <lan8742_io_read_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3a:	e000      	b.n	8004b3e <lan8742_io_read_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20007e64 	.word	0x20007e64

08004b4c <lan8742_io_write_reg>:

int32_t lan8742_io_write_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&eth_handle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	68f9      	ldr	r1, [r7, #12]
 8004b5e:	4807      	ldr	r0, [pc, #28]	; (8004b7c <lan8742_io_write_reg+0x30>)
 8004b60:	f7fd f9f4 	bl	8001f4c <HAL_ETH_WritePHYRegister>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <lan8742_io_write_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8004b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b6e:	e000      	b.n	8004b72 <lan8742_io_write_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20007e64 	.word	0x20007e64

08004b80 <lan8742_io_get_tick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t lan8742_io_get_tick(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004b84:	f7fc fbb6 	bl	80012f4 <HAL_GetTick>
 8004b88:	4603      	mov	r3, r0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <nx_stm32_eth_driver>:
/*                                                                        */
/**************************************************************************/
/****** DRIVER SPECIFIC ****** Start of part/vendor specific global driver entry function name.  */
VOID  nx_stm32_eth_driver(NX_IP_DRIVER *driver_req_ptr)
/****** DRIVER SPECIFIC ****** End of part/vendor specific global driver entry function name.  */
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	605a      	str	r2, [r3, #4]

  /* Process according to the driver request type in the IP control
  block.  */
  switch (driver_req_ptr -> nx_ip_driver_command)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b16      	cmp	r3, #22
 8004ba4:	d85c      	bhi.n	8004c60 <nx_stm32_eth_driver+0xd0>
 8004ba6:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <nx_stm32_eth_driver+0x1c>)
 8004ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bac:	08004c29 	.word	0x08004c29
 8004bb0:	08004c11 	.word	0x08004c11
 8004bb4:	08004c19 	.word	0x08004c19
 8004bb8:	08004c21 	.word	0x08004c21
 8004bbc:	08004c29 	.word	0x08004c29
 8004bc0:	08004c29 	.word	0x08004c29
 8004bc4:	08004c29 	.word	0x08004c29
 8004bc8:	08004c29 	.word	0x08004c29
 8004bcc:	08004c31 	.word	0x08004c31
 8004bd0:	08004c39 	.word	0x08004c39
 8004bd4:	08004c41 	.word	0x08004c41
 8004bd8:	08004c61 	.word	0x08004c61
 8004bdc:	08004c61 	.word	0x08004c61
 8004be0:	08004c61 	.word	0x08004c61
 8004be4:	08004c61 	.word	0x08004c61
 8004be8:	08004c61 	.word	0x08004c61
 8004bec:	08004c61 	.word	0x08004c61
 8004bf0:	08004c61 	.word	0x08004c61
 8004bf4:	08004c49 	.word	0x08004c49
 8004bf8:	08004c09 	.word	0x08004c09
 8004bfc:	08004c61 	.word	0x08004c61
 8004c00:	08004c51 	.word	0x08004c51
 8004c04:	08004c59 	.word	0x08004c59
  {

  case NX_LINK_INTERFACE_ATTACH:

    /* Process link interface attach requests.  */
    _nx_driver_interface_attach(driver_req_ptr);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f835 	bl	8004c78 <_nx_driver_interface_attach>
    break;
 8004c0e:	e02e      	b.n	8004c6e <nx_stm32_eth_driver+0xde>

  case NX_LINK_INITIALIZE:
    {

      /* Process link initialize requests.  */
      _nx_driver_initialize(driver_req_ptr);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f849 	bl	8004ca8 <_nx_driver_initialize>
      break;
 8004c16:	e02a      	b.n	8004c6e <nx_stm32_eth_driver+0xde>

  case NX_LINK_ENABLE:
    {

      /* Process link enable requests.  */
      _nx_driver_enable(driver_req_ptr);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f8b9 	bl	8004d90 <_nx_driver_enable>
      break;
 8004c1e:	e026      	b.n	8004c6e <nx_stm32_eth_driver+0xde>

  case NX_LINK_DISABLE:
    {

      /* Process link disable requests.  */
      _nx_driver_disable(driver_req_ptr);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f93d 	bl	8004ea0 <_nx_driver_disable>
      break;
 8004c26:	e022      	b.n	8004c6e <nx_stm32_eth_driver+0xde>
  case NX_LINK_RARP_SEND:
  case NX_LINK_PACKET_SEND:
    {

      /* Process packet send requests.  */
      _nx_driver_packet_send(driver_req_ptr);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f963 	bl	8004ef4 <_nx_driver_packet_send>
      break;
 8004c2e:	e01e      	b.n	8004c6e <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_JOIN:
    {

      /* Process multicast join requests.  */
      _nx_driver_multicast_join(driver_req_ptr);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fa21 	bl	8005078 <_nx_driver_multicast_join>
      break;
 8004c36:	e01a      	b.n	8004c6e <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_LEAVE:
    {

      /* Process multicast leave requests.  */
      _nx_driver_multicast_leave(driver_req_ptr);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fa33 	bl	80050a4 <_nx_driver_multicast_leave>
      break;
 8004c3e:	e016      	b.n	8004c6e <nx_stm32_eth_driver+0xde>

  case NX_LINK_GET_STATUS:
    {

      /* Process get status requests.  */
      _nx_driver_get_status(driver_req_ptr);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fa45 	bl	80050d0 <_nx_driver_get_status>
      break;
 8004c46:	e012      	b.n	8004c6e <nx_stm32_eth_driver+0xde>
    {

      /* Process driver deferred requests.  */

      /* Process a device driver function on behave of the IP thread. */
      _nx_driver_deferred_processing(driver_req_ptr);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fa7f 	bl	800514c <_nx_driver_deferred_processing>

      break;
 8004c4e:	e00e      	b.n	8004c6e <nx_stm32_eth_driver+0xde>
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  case NX_INTERFACE_CAPABILITY_GET:
    {

      /* Process get capability requests.  */
      _nx_driver_capability_get(driver_req_ptr);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fa53 	bl	80050fc <_nx_driver_capability_get>
      break;
 8004c56:	e00a      	b.n	8004c6e <nx_stm32_eth_driver+0xde>

  case NX_INTERFACE_CAPABILITY_SET:
    {

      /* Process set capability requests.  */
      _nx_driver_capability_set(driver_req_ptr);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fa61 	bl	8005120 <_nx_driver_capability_set>
      break;
 8004c5e:	e006      	b.n	8004c6e <nx_stm32_eth_driver+0xde>


    /* Invalid driver request.  */

    /* Return the unhandled command status.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_UNHANDLED_COMMAND;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2244      	movs	r2, #68	; 0x44
 8004c64:	605a      	str	r2, [r3, #4]

    /* Default to successful return.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	225a      	movs	r2, #90	; 0x5a
 8004c6a:	605a      	str	r2, [r3, #4]
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop

08004c78 <_nx_driver_interface_attach>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_interface_attach(NX_IP_DRIVER *driver_req_ptr)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]


  /* Setup the driver's interface.  This example is for a simple one-interface
  Ethernet driver. Additional logic is necessary for multiple port devices.  */
  nx_driver_information.nx_driver_information_interface =  driver_req_ptr -> nx_ip_driver_interface;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	4a07      	ldr	r2, [pc, #28]	; (8004ca4 <_nx_driver_interface_attach+0x2c>)
 8004c86:	60d3      	str	r3, [r2, #12]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  driver_req_ptr -> nx_ip_driver_interface -> nx_interface_capability_flag = NX_DRIVER_CAPABILITY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  /* Return successful status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	605a      	str	r2, [r3, #4]
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	20014790 	.word	0x20014790

08004ca8 <_nx_driver_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UINT            status;
  CHAR           *payload_address;       /* Address of the first payload*/
  VOID           *rounded_pool_start;    /* Rounded stating address     */

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	61fb      	str	r3, [r7, #28]

  /* Setup interface pointer.  */
  interface_ptr = driver_req_ptr -> nx_ip_driver_interface;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	61bb      	str	r3, [r7, #24]

  /* Initialize the driver's information structure.  */

  /* Default IP pointer to NULL.  */
  nx_driver_information.nx_driver_information_ip_ptr =               NX_NULL;
 8004cbc:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <_nx_driver_initialize+0xdc>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]

  /* Setup the driver state to not initialized.  */
  nx_driver_information.nx_driver_information_state =                NX_DRIVER_STATE_NOT_INITIALIZED;
 8004cc2:	4b30      	ldr	r3, [pc, #192]	; (8004d84 <_nx_driver_initialize+0xdc>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	605a      	str	r2, [r3, #4]

  /* Setup the default packet pool for the driver's received packets.  */
  nx_driver_information.nx_driver_information_packet_pool_ptr = ip_ptr -> nx_ip_default_packet_pool;
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004cce:	4a2d      	ldr	r2, [pc, #180]	; (8004d84 <_nx_driver_initialize+0xdc>)
 8004cd0:	6093      	str	r3, [r2, #8]

  /* Get the rounded start pool start. */
  rounded_pool_start = nx_driver_information.nx_driver_information_packet_pool_ptr->nx_packet_pool_start;
 8004cd2:	4b2c      	ldr	r3, [pc, #176]	; (8004d84 <_nx_driver_initialize+0xdc>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Calculate the address of payload. */
  payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	333c      	adds	r3, #60	; 0x3c
 8004cde:	613b      	str	r3, [r7, #16]

  /* Align the address of payload. */
  payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	3303      	adds	r3, #3
 8004ce4:	f023 0303 	bic.w	r3, r3, #3
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Calculate the header size. */
  header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	4a25      	ldr	r2, [pc, #148]	; (8004d88 <_nx_driver_initialize+0xe0>)
 8004cf2:	6013      	str	r3, [r2, #0]

  /* Clear the deferred events for the driver.  */
  nx_driver_information.nx_driver_information_deferred_events =       0;
 8004cf4:	4b23      	ldr	r3, [pc, #140]	; (8004d84 <_nx_driver_initialize+0xdc>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	611a      	str	r2, [r3, #16]

  /* Call the hardware-specific ethernet controller initialization.  */
  status =  _nx_driver_hardware_initialize(driver_req_ptr);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fabc 	bl	8005278 <_nx_driver_hardware_initialize>
 8004d00:	60f8      	str	r0, [r7, #12]

  /* Determine if the request was successful.  */
  if (status == NX_SUCCESS)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d136      	bne.n	8004d76 <_nx_driver_initialize+0xce>
  {

    /* Successful hardware initialization.  */

    /* Setup driver information to point to IP pointer.  */
    nx_driver_information.nx_driver_information_ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <_nx_driver_initialize+0xdc>)
 8004d0e:	6013      	str	r3, [r2, #0]

    /* Setup the link maximum transfer unit. */
    interface_ptr -> nx_interface_ip_mtu_size =  NX_DRIVER_ETHERNET_MTU - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the physical address of this IP instance.  Increment the
    physical address lsw to simulate multiple nodes hanging on the
    ethernet.  */
    interface_ptr -> nx_interface_physical_address_msw =
      (ULONG)(( eth_handle.Init.MACAddr[0] << 8) | ( eth_handle.Init.MACAddr[1]));
 8004d18:	4b1c      	ldr	r3, [pc, #112]	; (8004d8c <_nx_driver_initialize+0xe4>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	4a1a      	ldr	r2, [pc, #104]	; (8004d8c <_nx_driver_initialize+0xe4>)
 8004d22:	6852      	ldr	r2, [r2, #4]
 8004d24:	3201      	adds	r2, #1
 8004d26:	7812      	ldrb	r2, [r2, #0]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_msw =
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	60da      	str	r2, [r3, #12]
    interface_ptr -> nx_interface_physical_address_lsw =
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8004d30:	4b16      	ldr	r3, [pc, #88]	; (8004d8c <_nx_driver_initialize+0xe4>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	3302      	adds	r3, #2
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	061a      	lsls	r2, r3, #24
 8004d3a:	4b14      	ldr	r3, [pc, #80]	; (8004d8c <_nx_driver_initialize+0xe4>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	3303      	adds	r3, #3
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	041b      	lsls	r3, r3, #16
 8004d44:	431a      	orrs	r2, r3
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8004d46:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <_nx_driver_initialize+0xe4>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	021b      	lsls	r3, r3, #8
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8004d50:	4313      	orrs	r3, r2
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8004d52:	4a0e      	ldr	r2, [pc, #56]	; (8004d8c <_nx_driver_initialize+0xe4>)
 8004d54:	6852      	ldr	r2, [r2, #4]
 8004d56:	3205      	adds	r2, #5
 8004d58:	7812      	ldrb	r2, [r2, #0]
 8004d5a:	4313      	orrs	r3, r2
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8004d5c:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_lsw =
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	611a      	str	r2, [r3, #16]

    /* Indicate to the IP software that IP to physical mapping
    is required.  */
    interface_ptr -> nx_interface_address_mapping_needed =  NX_TRUE;
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2201      	movs	r2, #1
 8004d66:	715a      	strb	r2, [r3, #5]

    /* Move the driver's state to initialized.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_INITIALIZED;
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <_nx_driver_initialize+0xdc>)
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	605a      	str	r2, [r3, #4]

    /* Indicate successful initialize.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	605a      	str	r2, [r3, #4]
  {

    /* Initialization failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
  }
}
 8004d74:	e002      	b.n	8004d7c <_nx_driver_initialize+0xd4>
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	225a      	movs	r2, #90	; 0x5a
 8004d7a:	605a      	str	r2, [r3, #4]
}
 8004d7c:	bf00      	nop
 8004d7e:	3720      	adds	r7, #32
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20014790 	.word	0x20014790
 8004d88:	200147dc 	.word	0x200147dc
 8004d8c:	20007e64 	.word	0x20007e64

08004d90 <_nx_driver_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b0a0      	sub	sp, #128	; 0x80
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]

  NX_IP           *ip_ptr;
  ETH_MACConfigTypeDef MACConf;
  UINT            status, duplex, speed = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	67bb      	str	r3, [r7, #120]	; 0x78
  INT             PHYLinkState;

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	677b      	str	r3, [r7, #116]	; 0x74

  /* See if we can honor the NX_LINK_ENABLE request.  */
  if (nx_driver_information.nx_driver_information_state < NX_DRIVER_STATE_INITIALIZED)
 8004da2:	4b3d      	ldr	r3, [pc, #244]	; (8004e98 <_nx_driver_enable+0x108>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d803      	bhi.n	8004db2 <_nx_driver_enable+0x22>
  {

    /* Mark the request as not successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	225a      	movs	r2, #90	; 0x5a
 8004dae:	605a      	str	r2, [r3, #4]
    return;
 8004db0:	e06e      	b.n	8004e90 <_nx_driver_enable+0x100>
  }

  /* Check if it is enabled by someone already */
  if (nx_driver_information.nx_driver_information_state >=  NX_DRIVER_STATE_LINK_ENABLED)
 8004db2:	4b39      	ldr	r3, [pc, #228]	; (8004e98 <_nx_driver_enable+0x108>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d903      	bls.n	8004dc2 <_nx_driver_enable+0x32>
  {

    /* Yes, the request has already been made.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_ALREADY_ENABLED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2215      	movs	r2, #21
 8004dbe:	605a      	str	r2, [r3, #4]
    return;
 8004dc0:	e066      	b.n	8004e90 <_nx_driver_enable+0x100>
  }

  if (nx_eth_phy_init() != ETH_PHY_STATUS_OK)
 8004dc2:	f7ff fe6d 	bl	8004aa0 <nx_eth_phy_init>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <_nx_driver_enable+0x44>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	225a      	movs	r2, #90	; 0x5a
 8004dd0:	605a      	str	r2, [r3, #4]
    return;
 8004dd2:	e05d      	b.n	8004e90 <_nx_driver_enable+0x100>
  }

  PHYLinkState = nx_eth_phy_get_link_state();
 8004dd4:	f7ff fe80 	bl	8004ad8 <nx_eth_phy_get_link_state>
 8004dd8:	6738      	str	r0, [r7, #112]	; 0x70

  /* Get link state */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 8004dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	dc03      	bgt.n	8004de8 <_nx_driver_enable+0x58>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	225a      	movs	r2, #90	; 0x5a
 8004de4:	605a      	str	r2, [r3, #4]
    return;
 8004de6:	e053      	b.n	8004e90 <_nx_driver_enable+0x100>
  }
  else
  {
    switch (PHYLinkState)
 8004de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dea:	3b02      	subs	r3, #2
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d823      	bhi.n	8004e38 <_nx_driver_enable+0xa8>
 8004df0:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <_nx_driver_enable+0x68>)
 8004df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df6:	bf00      	nop
 8004df8:	08004e09 	.word	0x08004e09
 8004dfc:	08004e17 	.word	0x08004e17
 8004e00:	08004e23 	.word	0x08004e23
 8004e04:	08004e2f 	.word	0x08004e2f
      duplex = ETH_HALFDUPLEX_MODE;
      speed = ETH_SPEED_1000M;
      break;
#endif
case ETH_PHY_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004e08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e0c:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8004e0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e12:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e14:	e017      	b.n	8004e46 <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8004e1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e1e:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e20:	e011      	b.n	8004e46 <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004e22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e26:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e2c:	e00b      	b.n	8004e46 <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 8004e32:	2300      	movs	r3, #0
 8004e34:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e36:	e006      	b.n	8004e46 <_nx_driver_enable+0xb6>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 8004e38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e3c:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8004e3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e42:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e44:	bf00      	nop
    }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&eth_handle, &MACConf);
 8004e46:	f107 0308 	add.w	r3, r7, #8
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4813      	ldr	r0, [pc, #76]	; (8004e9c <_nx_driver_enable+0x10c>)
 8004e4e:	f7fd f8d1 	bl	8001ff4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004e52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e54:	623b      	str	r3, [r7, #32]
    MACConf.Speed = speed;
 8004e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e58:	61fb      	str	r3, [r7, #28]
    MACConf.PortSelect = 0;
#else
    MACConf.PortSelect = 1;
#endif
#endif
    HAL_ETH_SetMACConfig(&eth_handle, &MACConf);
 8004e5a:	f107 0308 	add.w	r3, r7, #8
 8004e5e:	4619      	mov	r1, r3
 8004e60:	480e      	ldr	r0, [pc, #56]	; (8004e9c <_nx_driver_enable+0x10c>)
 8004e62:	f7fd fa9b 	bl	800239c <HAL_ETH_SetMACConfig>
  }

  /* Call hardware specific enable.  */
  status =  _nx_driver_hardware_enable(driver_req_ptr);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fa7e 	bl	8005368 <_nx_driver_hardware_enable>
 8004e6c:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* Was the hardware enable successful?  */
  if (status == NX_SUCCESS)
 8004e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <_nx_driver_enable+0xfa>
  {

    /* Update the driver state to link enabled.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_LINK_ENABLED;
 8004e74:	4b08      	ldr	r3, [pc, #32]	; (8004e98 <_nx_driver_enable+0x108>)
 8004e76:	2204      	movs	r2, #4
 8004e78:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	605a      	str	r2, [r3, #4]

    /* Mark the IP instance as link up.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_TRUE;
 8004e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
 8004e88:	e002      	b.n	8004e90 <_nx_driver_enable+0x100>
  }
  else
  {

    /* Enable failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	225a      	movs	r2, #90	; 0x5a
 8004e8e:	605a      	str	r2, [r3, #4]
  }
}
 8004e90:	3780      	adds	r7, #128	; 0x80
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20014790 	.word	0x20014790
 8004e9c:	20007e64 	.word	0x20007e64

08004ea0 <_nx_driver_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Check if the link is enabled.  */
  if (nx_driver_information.nx_driver_information_state !=  NX_DRIVER_STATE_LINK_ENABLED)
 8004eae:	4b10      	ldr	r3, [pc, #64]	; (8004ef0 <_nx_driver_disable+0x50>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d003      	beq.n	8004ebe <_nx_driver_disable+0x1e>
  {

    /* The link is not enabled, so just return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	225a      	movs	r2, #90	; 0x5a
 8004eba:	605a      	str	r2, [r3, #4]
    return;
 8004ebc:	e014      	b.n	8004ee8 <_nx_driver_disable+0x48>
  }

  /* Call hardware specific disable.  */
  status =  _nx_driver_hardware_disable(driver_req_ptr);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fa60 	bl	8005384 <_nx_driver_hardware_disable>
 8004ec4:	60b8      	str	r0, [r7, #8]

  /* Was the hardware disable successful?  */
  if (status == NX_SUCCESS)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10a      	bne.n	8004ee2 <_nx_driver_disable+0x42>
  {

    /* Mark the IP instance as link down.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_FALSE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726

    /* Update the driver state back to initialized.  */
    nx_driver_information.nx_driver_information_state =  NX_DRIVER_STATE_INITIALIZED;
 8004ed4:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <_nx_driver_disable+0x50>)
 8004ed6:	2203      	movs	r2, #3
 8004ed8:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	605a      	str	r2, [r3, #4]
 8004ee0:	e002      	b.n	8004ee8 <_nx_driver_disable+0x48>
  }
  else
  {

    /* Disable failed, return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	225a      	movs	r2, #90	; 0x5a
 8004ee6:	605a      	str	r2, [r3, #4]
  }
}
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20014790 	.word	0x20014790

08004ef4 <_nx_driver_packet_send>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_packet_send(NX_IP_DRIVER *driver_req_ptr)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  ULONG           *ethernet_frame_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	617b      	str	r3, [r7, #20]

  /* Check to make sure the link is up.  */
  if (nx_driver_information.nx_driver_information_state != NX_DRIVER_STATE_LINK_ENABLED)
 8004f02:	4b5c      	ldr	r3, [pc, #368]	; (8005074 <_nx_driver_packet_send+0x180>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d008      	beq.n	8004f1c <_nx_driver_packet_send+0x28>
  {

    /* Inidate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	225a      	movs	r2, #90	; 0x5a
 8004f0e:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(driver_req_ptr -> nx_ip_driver_packet);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3310      	adds	r3, #16
 8004f14:	4618      	mov	r0, r3
 8004f16:	f005 ff99 	bl	800ae4c <_nxe_packet_transmit_release>
    return;
 8004f1a:	e0a7      	b.n	800506c <_nx_driver_packet_send+0x178>
  }

  /* Process driver send packet.  */

  /* Place the ethernet frame at the front of the packet.  */
  packet_ptr =  driver_req_ptr -> nx_ip_driver_packet;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	60bb      	str	r3, [r7, #8]

  /* Adjust the prepend pointer.  */
  packet_ptr -> nx_packet_prepend_ptr =
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	689a      	ldr	r2, [r3, #8]
  packet_ptr -> nx_packet_prepend_ptr =
 8004f26:	68bb      	ldr	r3, [r7, #8]
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004f28:	3a0e      	subs	r2, #14
  packet_ptr -> nx_packet_prepend_ptr =
 8004f2a:	609a      	str	r2, [r3, #8]

  /* Adjust the packet length.  */
  packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	320e      	adds	r2, #14
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Setup the ethernet frame pointer to build the ethernet frame.  Backup another 2
  * bytes to get 32-bit word alignment.  */
  ethernet_frame_ptr =  (ULONG *) (packet_ptr -> nx_packet_prepend_ptr - 2);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	3b02      	subs	r3, #2
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Set up the hardware addresses in the Ethernet header. */
  *ethernet_frame_ptr       =  driver_req_ptr -> nx_ip_driver_physical_address_msw;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 1) =  driver_req_ptr -> nx_ip_driver_physical_address_lsw;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	3304      	adds	r3, #4
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	68d2      	ldr	r2, [r2, #12]
 8004f4e:	601a      	str	r2, [r3, #0]

  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8004f56:	0419      	lsls	r1, r3, #16
    (ip_ptr -> nx_ip_arp_physical_address_lsw >> 16);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f8d3 3730 	ldr.w	r3, [r3, #1840]	; 0x730
 8004f5e:	0c1a      	lsrs	r2, r3, #16
  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	3308      	adds	r3, #8
 8004f64:	430a      	orrs	r2, r1
 8004f66:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 3) =  (ip_ptr -> nx_ip_arp_physical_address_lsw << 16);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f8d3 2730 	ldr.w	r2, [r3, #1840]	; 0x730
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	330c      	adds	r3, #12
 8004f72:	0412      	lsls	r2, r2, #16
 8004f74:	601a      	str	r2, [r3, #0]

  /* Set up the frame type field in the Ethernet harder. */
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d003      	beq.n	8004f86 <_nx_driver_packet_send+0x92>
      (driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8004f82:	2b06      	cmp	r3, #6
 8004f84:	d10a      	bne.n	8004f9c <_nx_driver_packet_send+0xa8>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_ARP;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	320c      	adds	r2, #12
 8004f90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f94:	f043 0306 	orr.w	r3, r3, #6
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	e016      	b.n	8004fca <_nx_driver_packet_send+0xd6>
  }
  else if(driver_req_ptr -> nx_ip_driver_command == NX_LINK_RARP_SEND)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b07      	cmp	r3, #7
 8004fa2:	d10a      	bne.n	8004fba <_nx_driver_packet_send+0xc6>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_RARP;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	330c      	adds	r3, #12
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	320c      	adds	r2, #12
 8004fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb2:	f043 0335 	orr.w	r3, r3, #53	; 0x35
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	e007      	b.n	8004fca <_nx_driver_packet_send+0xd6>
#endif /* FEATURE_NX_IPV6 */

  else
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IP;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fc8:	601a      	str	r2, [r3, #0]
  }

  /* Endian swapping if NX_LITTLE_ENDIAN is defined.  */
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr));
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	ba1a      	rev	r2, r3
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 1));
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	ba12      	rev	r2, r2
 8004fe0:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	3308      	adds	r3, #8
 8004fec:	ba12      	rev	r2, r2
 8004fee:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 3));
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	330c      	adds	r3, #12
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	ba12      	rev	r2, r2
 8004ffc:	601a      	str	r2, [r3, #0]

  /* Determine if the packet exceeds the driver's MTU.  */
  if (packet_ptr -> nx_packet_length > NX_DRIVER_ETHERNET_MTU)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8005006:	4293      	cmp	r3, r2
 8005008:	d912      	bls.n	8005030 <_nx_driver_packet_send+0x13c>
  {

    /* This packet exceeds the size of the driver's MTU. Simply throw it away! */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	320e      	adds	r2, #14
 8005012:	609a      	str	r2, [r3, #8]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	3a0e      	subs	r2, #14
 800501c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	225a      	movs	r2, #90	; 0x5a
 8005022:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 8005024:	f107 0308 	add.w	r3, r7, #8
 8005028:	4618      	mov	r0, r3
 800502a:	f005 ff0f 	bl	800ae4c <_nxe_packet_transmit_release>
    return;
 800502e:	e01d      	b.n	800506c <_nx_driver_packet_send+0x178>
  }

  /* Transmit the packet through the Ethernet controller low level access routine. */
  status = _nx_driver_hardware_packet_send(packet_ptr);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 f9b4 	bl	80053a0 <_nx_driver_hardware_packet_send>
 8005038:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d012      	beq.n	8005066 <_nx_driver_packet_send+0x172>
  {

    /* Driver's hardware send packet routine failed to send the packet.  */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	320e      	adds	r2, #14
 8005048:	609a      	str	r2, [r3, #8]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	3a0e      	subs	r2, #14
 8005052:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	225a      	movs	r2, #90	; 0x5a
 8005058:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 800505a:	f107 0308 	add.w	r3, r7, #8
 800505e:	4618      	mov	r0, r3
 8005060:	f005 fef4 	bl	800ae4c <_nxe_packet_transmit_release>
 8005064:	e002      	b.n	800506c <_nx_driver_packet_send+0x178>
  }
  else
  {

    /* Set the status of the request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	605a      	str	r2, [r3, #4]
  }
}
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20014790 	.word	0x20014790

08005078 <_nx_driver_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast join function. */
  status =  _nx_driver_hardware_multicast_join(driver_req_ptr);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fa25 	bl	80054d0 <_nx_driver_hardware_multicast_join>
 8005086:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <_nx_driver_multicast_join+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	225a      	movs	r2, #90	; 0x5a
 8005092:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8005094:	e002      	b.n	800509c <_nx_driver_multicast_join+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	605a      	str	r2, [r3, #4]
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <_nx_driver_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast leave function. */
  status =  _nx_driver_hardware_multicast_leave(driver_req_ptr);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fa2b 	bl	8005508 <_nx_driver_hardware_multicast_leave>
 80050b2:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <_nx_driver_multicast_leave+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	225a      	movs	r2, #90	; 0x5a
 80050be:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80050c0:	e002      	b.n	80050c8 <_nx_driver_multicast_leave+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	605a      	str	r2, [r3, #4]
}
 80050c8:	bf00      	nop
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <_nx_driver_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_get_status(driver_req_ptr);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fa35 	bl	8005548 <_nx_driver_hardware_get_status>
 80050de:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <_nx_driver_get_status+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	225a      	movs	r2, #90	; 0x5a
 80050ea:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80050ec:	e002      	b.n	80050f4 <_nx_driver_get_status+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	605a      	str	r2, [r3, #4]
}
 80050f4:	bf00      	nop
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <_nx_driver_capability_get>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_get(NX_IP_DRIVER *driver_req_ptr)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]

  /* Return the capability of the Ethernet controller.  */
  *(driver_req_ptr -> nx_ip_driver_return_ptr) = NX_DRIVER_CAPABILITY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800510c:	601a      	str	r2, [r3, #0]

  /* Return the success status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	605a      	str	r2, [r3, #4]
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <_nx_driver_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_capability_set(driver_req_ptr);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fab3 	bl	8005694 <_nx_driver_hardware_capability_set>
 800512e:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <_nx_driver_capability_set+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	225a      	movs	r2, #90	; 0x5a
 800513a:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 800513c:	e002      	b.n	8005144 <_nx_driver_capability_set+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	605a      	str	r2, [r3, #4]
}
 8005144:	bf00      	nop
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <_nx_driver_deferred_processing>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_deferred_processing(NX_IP_DRIVER *driver_req_ptr)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005154:	f3ef 8310 	mrs	r3, PRIMASK
 8005158:	613b      	str	r3, [r7, #16]
#endif
    return(posture);
 800515a:	693b      	ldr	r3, [r7, #16]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800515c:	60fb      	str	r3, [r7, #12]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800515e:	b672      	cpsid	i
#endif
    return(int_posture);
 8005160:	68fb      	ldr	r3, [r7, #12]

    ULONG       deferred_events;


  /* Disable interrupts.  */
  TX_DISABLE
 8005162:	61fb      	str	r3, [r7, #28]

    /* Pickup deferred events.  */
    deferred_events =  nx_driver_information.nx_driver_information_deferred_events;
 8005164:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <_nx_driver_deferred_processing+0x5c>)
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	61bb      	str	r3, [r7, #24]
  nx_driver_information.nx_driver_information_deferred_events =  0;
 800516a:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <_nx_driver_deferred_processing+0x5c>)
 800516c:	2200      	movs	r2, #0
 800516e:	611a      	str	r2, [r3, #16]
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f383 8810 	msr	PRIMASK, r3
}
 800517a:	bf00      	nop

  /* Restore interrupts.  */
  TX_RESTORE
    /* Check for a transmit complete event.  */
    if(deferred_events & NX_DRIVER_DEFERRED_PACKET_TRANSMITTED)
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <_nx_driver_deferred_processing+0x40>
    {

      /* Process transmitted packet(s).  */
      HAL_ETH_ReleaseTxPacket(&eth_handle);
 8005186:	4809      	ldr	r0, [pc, #36]	; (80051ac <_nx_driver_deferred_processing+0x60>)
 8005188:	f7fc fcf9 	bl	8001b7e <HAL_ETH_ReleaseTxPacket>
    }
  /* Check for received packet.  */
  if(deferred_events & NX_DRIVER_DEFERRED_PACKET_RECEIVED)
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <_nx_driver_deferred_processing+0x4e>
  {

    /* Process received packet(s).  */
    _nx_driver_hardware_packet_received();
 8005196:	f000 fa09 	bl	80055ac <_nx_driver_hardware_packet_received>
  }

  /* Mark request as successful.  */
  driver_req_ptr->nx_ip_driver_status =  NX_SUCCESS;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	605a      	str	r2, [r3, #4]
}
 80051a0:	bf00      	nop
 80051a2:	3720      	adds	r7, #32
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	20014790 	.word	0x20014790
 80051ac:	20007e64 	.word	0x20007e64

080051b0 <_nx_driver_transfer_to_netx>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID _nx_driver_transfer_to_netx(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]

  USHORT    packet_type;


  /* Set the interface for the incoming packet.  */
  packet_ptr -> nx_packet_ip_interface = nx_driver_information.nx_driver_information_interface;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	4a2d      	ldr	r2, [pc, #180]	; (8005274 <_nx_driver_transfer_to_netx+0xc4>)
 80051be:	68d2      	ldr	r2, [r2, #12]
 80051c0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Pickup the packet header to determine where the packet needs to be
  sent.  */
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	330c      	adds	r3, #12
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	b29a      	uxth	r2, r3
    ((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+13)));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	330d      	adds	r3, #13
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 80051da:	4313      	orrs	r3, r2
 80051dc:	81fb      	strh	r3, [r7, #14]

  /* Route the incoming packet according to its ethernet type.  */
  if (packet_type == NX_DRIVER_ETHERNET_IP || packet_type == NX_DRIVER_ETHERNET_IPV6)
 80051de:	89fb      	ldrh	r3, [r7, #14]
 80051e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e4:	d004      	beq.n	80051f0 <_nx_driver_transfer_to_netx+0x40>
 80051e6:	89fb      	ldrh	r3, [r7, #14]
 80051e8:	f248 62dd 	movw	r2, #34525	; 0x86dd
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d10f      	bne.n	8005210 <_nx_driver_transfer_to_netx+0x60>
    cases, the actual packet length after the Ethernet header should
    be derived from the length in the IP header (lower 16 bits of
    the first 32-bit word).  */

    /* Clean off the Ethernet header.  */
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	320e      	adds	r2, #14
 80051f8:	609a      	str	r2, [r3, #8]

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	3a0e      	subs	r2, #14
 8005202:	625a      	str	r2, [r3, #36]	; 0x24

    /* Route to the ip receive function.  */
    _nx_ip_packet_deferred_receive(ip_ptr, packet_ptr);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	4619      	mov	r1, r3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f002 fccf 	bl	8007bac <_nx_ip_packet_deferred_receive>
  else
  {
    /* Invalid ethernet header... release the packet.  */
    nx_packet_release(packet_ptr);
  }
}
 800520e:	e02d      	b.n	800526c <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_ARP)
 8005210:	89fb      	ldrh	r3, [r7, #14]
 8005212:	f640 0206 	movw	r2, #2054	; 0x806
 8005216:	4293      	cmp	r3, r2
 8005218:	d10f      	bne.n	800523a <_nx_driver_transfer_to_netx+0x8a>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	320e      	adds	r2, #14
 8005222:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	3a0e      	subs	r2, #14
 800522c:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_arp_packet_deferred_receive(ip_ptr, packet_ptr);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fc0d 	bl	8005a52 <_nx_arp_packet_deferred_receive>
}
 8005238:	e018      	b.n	800526c <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_RARP)
 800523a:	89fb      	ldrh	r3, [r7, #14]
 800523c:	f248 0235 	movw	r2, #32821	; 0x8035
 8005240:	4293      	cmp	r3, r2
 8005242:	d10f      	bne.n	8005264 <_nx_driver_transfer_to_netx+0xb4>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	320e      	adds	r2, #14
 800524c:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	3a0e      	subs	r2, #14
 8005256:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_rarp_packet_deferred_receive(ip_ptr, packet_ptr);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	4619      	mov	r1, r3
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f004 f8bf 	bl	80093e0 <_nx_rarp_packet_deferred_receive>
}
 8005262:	e003      	b.n	800526c <_nx_driver_transfer_to_netx+0xbc>
    nx_packet_release(packet_ptr);
 8005264:	463b      	mov	r3, r7
 8005266:	4618      	mov	r0, r3
 8005268:	f005 fdb8 	bl	800addc <_nxe_packet_release>
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20014790 	.word	0x20014790

08005278 <_nx_driver_hardware_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08c      	sub	sp, #48	; 0x30
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	605a      	str	r2, [r3, #4]

  /* Setup indices.  */
  nx_driver_information.nx_driver_information_receive_current_index = 0;
 8005286:	4b34      	ldr	r3, [pc, #208]	; (8005358 <_nx_driver_hardware_initialize+0xe0>)
 8005288:	2200      	movs	r2, #0
 800528a:	615a      	str	r2, [r3, #20]
  nx_driver_information.nx_driver_information_transmit_current_index = 0;
 800528c:	4b32      	ldr	r3, [pc, #200]	; (8005358 <_nx_driver_hardware_initialize+0xe0>)
 800528e:	2200      	movs	r2, #0
 8005290:	619a      	str	r2, [r3, #24]
  nx_driver_information.nx_driver_information_transmit_release_index = 0;
 8005292:	4b31      	ldr	r3, [pc, #196]	; (8005358 <_nx_driver_hardware_initialize+0xe0>)
 8005294:	2200      	movs	r2, #0
 8005296:	61da      	str	r2, [r3, #28]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = 0;
 8005298:	4b2f      	ldr	r3, [pc, #188]	; (8005358 <_nx_driver_hardware_initialize+0xe0>)
 800529a:	2200      	movs	r2, #0
 800529c:	621a      	str	r2, [r3, #32]

  /* Make sure there are receive packets... otherwise, return an error.  */
  if (nx_driver_information.nx_driver_information_packet_pool_ptr == NULL)
 800529e:	4b2e      	ldr	r3, [pc, #184]	; (8005358 <_nx_driver_hardware_initialize+0xe0>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <_nx_driver_hardware_initialize+0x32>
  {

    /* There must be receive packets. If not, return an error!  */
    return(NX_DRIVER_ERROR);
 80052a6:	235a      	movs	r3, #90	; 0x5a
 80052a8:	e052      	b.n	8005350 <_nx_driver_hardware_initialize+0xd8>
#ifdef NX_DRIVER_ETH_HW_IP_INIT
  nx_eth_init();
#endif /* NX_DRIVER_ETH_HW_IP_INIT */

  ETH_DMAConfigTypeDef dmaDefaultConf;
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80052ae:	2301      	movs	r3, #1
 80052b0:	743b      	strb	r3, [r7, #16]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80052b2:	2301      	movs	r3, #1
 80052b4:	617b      	str	r3, [r7, #20]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80052b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052ba:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80052bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
#ifndef STM32_ETH_HAL_LEGACY
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80052c8:	2300      	movs	r3, #0
 80052ca:	767b      	strb	r3, [r7, #25]
#if defined(ETH_DMASBMR_BLEN4) /* ETH AXI support*/
  dmaDefaultConf.RxOSRLimit = ETH_RX_OSR_LIMIT_3;
  dmaDefaultConf.TxOSRLimit = ETH_TX_OSR_LIMIT_3;
  dmaDefaultConf.AXIBLENMaxSize = ETH_BLEN_MAX_SIZE_16;
#else
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80052cc:	2300      	movs	r3, #0
 80052ce:	763b      	strb	r3, [r7, #24]
#endif
  dmaDefaultConf.SecondPacketOperate = ENABLE;
 80052d0:	2301      	movs	r3, #1
 80052d2:	f887 3020 	strb.w	r3, [r7, #32]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80052d6:	2300      	movs	r3, #0
 80052d8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  dmaDefaultConf.MaximumSegmentSize = 536;
 80052dc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80052e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.SecondFrameOperate =  DISABLE;
  dmaDefaultConf.EnhancedDescriptorFormat =  DISABLE;
  dmaDefaultConf.DescriptorSkipLength =  DISABLE;
#endif
  /* enable OSF bit to enhance throughput */
  HAL_ETH_SetDMAConfig(&eth_handle, &dmaDefaultConf);
 80052e2:	f107 030c 	add.w	r3, r7, #12
 80052e6:	4619      	mov	r1, r3
 80052e8:	481c      	ldr	r0, [pc, #112]	; (800535c <_nx_driver_hardware_initialize+0xe4>)
 80052ea:	f7fd f871 	bl	80023d0 <HAL_ETH_SetDMAConfig>
#ifdef STM32_ETH_PROMISCUOUS_ENABLE
  FilterConfig.PromiscuousMode = ENABLE;
#else
  FilterConfig.PromiscuousMode = DISABLE;
 80052ee:	4b1c      	ldr	r3, [pc, #112]	; (8005360 <_nx_driver_hardware_initialize+0xe8>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]
#endif
  FilterConfig.HashUnicast = DISABLE;
 80052f4:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <_nx_driver_hardware_initialize+0xe8>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	70da      	strb	r2, [r3, #3]
  FilterConfig.HashMulticast = DISABLE;
 80052fa:	4b19      	ldr	r3, [pc, #100]	; (8005360 <_nx_driver_hardware_initialize+0xe8>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	711a      	strb	r2, [r3, #4]
  FilterConfig.DestAddrInverseFiltering = DISABLE;
 8005300:	4b17      	ldr	r3, [pc, #92]	; (8005360 <_nx_driver_hardware_initialize+0xe8>)
 8005302:	2200      	movs	r2, #0
 8005304:	721a      	strb	r2, [r3, #8]
  FilterConfig.PassAllMulticast = DISABLE;
 8005306:	4b16      	ldr	r3, [pc, #88]	; (8005360 <_nx_driver_hardware_initialize+0xe8>)
 8005308:	2200      	movs	r2, #0
 800530a:	715a      	strb	r2, [r3, #5]
  FilterConfig.BroadcastFilter = ENABLE;
 800530c:	4b14      	ldr	r3, [pc, #80]	; (8005360 <_nx_driver_hardware_initialize+0xe8>)
 800530e:	2201      	movs	r2, #1
 8005310:	725a      	strb	r2, [r3, #9]
  FilterConfig.SrcAddrInverseFiltering = DISABLE;
 8005312:	4b13      	ldr	r3, [pc, #76]	; (8005360 <_nx_driver_hardware_initialize+0xe8>)
 8005314:	2200      	movs	r2, #0
 8005316:	71da      	strb	r2, [r3, #7]
  FilterConfig.SrcAddrFiltering = DISABLE;
 8005318:	4b11      	ldr	r3, [pc, #68]	; (8005360 <_nx_driver_hardware_initialize+0xe8>)
 800531a:	2200      	movs	r2, #0
 800531c:	719a      	strb	r2, [r3, #6]
  FilterConfig.HachOrPerfectFilter = DISABLE;
 800531e:	4b10      	ldr	r3, [pc, #64]	; (8005360 <_nx_driver_hardware_initialize+0xe8>)
 8005320:	2200      	movs	r2, #0
 8005322:	709a      	strb	r2, [r3, #2]
  FilterConfig.ReceiveAllMode = DISABLE;
 8005324:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <_nx_driver_hardware_initialize+0xe8>)
 8005326:	2200      	movs	r2, #0
 8005328:	705a      	strb	r2, [r3, #1]
  FilterConfig.ControlPacketsFilter = 0x00;
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <_nx_driver_hardware_initialize+0xe8>)
 800532c:	2200      	movs	r2, #0
 800532e:	60da      	str	r2, [r3, #12]

  /* Set Tx packet config common parameters */
  memset(&TxPacketCfg, 0, sizeof(ETH_TxPacketConfig));
 8005330:	2238      	movs	r2, #56	; 0x38
 8005332:	2100      	movs	r1, #0
 8005334:	480b      	ldr	r0, [pc, #44]	; (8005364 <_nx_driver_hardware_initialize+0xec>)
 8005336:	f009 fc79 	bl	800ec2c <memset>
  TxPacketCfg.Attributes = ETH_TX_PACKETS_FEATURES_CSUM ;
 800533a:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <_nx_driver_hardware_initialize+0xec>)
 800533c:	2201      	movs	r2, #1
 800533e:	601a      	str	r2, [r3, #0]
  TxPacketCfg.CRCPadCtrl = ETH_CRC_PAD_DISABLE;
 8005340:	4b08      	ldr	r3, [pc, #32]	; (8005364 <_nx_driver_hardware_initialize+0xec>)
 8005342:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005346:	611a      	str	r2, [r3, #16]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_multicast_count = 0;
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <_nx_driver_hardware_initialize+0xe0>)
 800534a:	2200      	movs	r2, #0
 800534c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Return success!  */
  return(NX_SUCCESS);
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3730      	adds	r7, #48	; 0x30
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	20014790 	.word	0x20014790
 800535c:	20007e64 	.word	0x20007e64
 8005360:	20014818 	.word	0x20014818
 8005364:	200147e0 	.word	0x200147e0

08005368 <_nx_driver_hardware_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

  /* Call STM32 library to start Ethernet operation.  */
  HAL_ETH_Start_IT(&eth_handle);
 8005370:	4803      	ldr	r0, [pc, #12]	; (8005380 <_nx_driver_hardware_enable+0x18>)
 8005372:	f7fc f9a7 	bl	80016c4 <HAL_ETH_Start_IT>

  /* Return success!  */
  return(NX_SUCCESS);
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	20007e64 	.word	0x20007e64

08005384 <_nx_driver_hardware_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]

  HAL_ETH_Stop(&eth_handle);
 800538c:	4803      	ldr	r0, [pc, #12]	; (800539c <_nx_driver_hardware_disable+0x18>)
 800538e:	f7fc fa27 	bl	80017e0 <HAL_ETH_Stop>

  /* Return success!  */
  return(NX_SUCCESS);
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20007e64 	.word	0x20007e64

080053a0 <_nx_driver_hardware_packet_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/

static UINT  _nx_driver_hardware_packet_send(NX_PACKET *packet_ptr)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b092      	sub	sp, #72	; 0x48
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]

  NX_PACKET       *pktIdx;
  UINT            buffLen = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	643b      	str	r3, [r7, #64]	; 0x40

  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80053ac:	f107 030c 	add.w	r3, r7, #12
 80053b0:	2230      	movs	r2, #48	; 0x30
 80053b2:	2100      	movs	r1, #0
 80053b4:	4618      	mov	r0, r3
 80053b6:	f009 fc39 	bl	800ec2c <memset>


  int i = 0;
 80053ba:	2300      	movs	r3, #0
 80053bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	647b      	str	r3, [r7, #68]	; 0x44
 80053c2:	e050      	b.n	8005466 <_nx_driver_hardware_packet_send+0xc6>
  {
    if (i >= ETH_TX_DESC_CNT)
 80053c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d901      	bls.n	80053ce <_nx_driver_hardware_packet_send+0x2e>
    {
      return NX_DRIVER_ERROR;
 80053ca:	235a      	movs	r3, #90	; 0x5a
 80053cc:	e077      	b.n	80054be <_nx_driver_hardware_packet_send+0x11e>
    }

    Txbuffer[i].buffer = pktIdx->nx_packet_prepend_ptr;
 80053ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d0:	6899      	ldr	r1, [r3, #8]
 80053d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053d4:	4613      	mov	r3, r2
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	3348      	adds	r3, #72	; 0x48
 80053de:	443b      	add	r3, r7
 80053e0:	3b3c      	subs	r3, #60	; 0x3c
 80053e2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 80053e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	4619      	mov	r1, r3
 80053f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053f2:	4613      	mov	r3, r2
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	3348      	adds	r3, #72	; 0x48
 80053fc:	443b      	add	r3, r7
 80053fe:	3b38      	subs	r3, #56	; 0x38
 8005400:	6019      	str	r1, [r3, #0]
    buffLen += (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 8005402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	461a      	mov	r2, r3
 800540e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005410:	4413      	add	r3, r2
 8005412:	643b      	str	r3, [r7, #64]	; 0x40

    if(i>0)
 8005414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005416:	2b00      	cmp	r3, #0
 8005418:	dd11      	ble.n	800543e <_nx_driver_hardware_packet_send+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800541a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541c:	1e5a      	subs	r2, r3, #1
 800541e:	f107 000c 	add.w	r0, r7, #12
 8005422:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005424:	460b      	mov	r3, r1
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	440b      	add	r3, r1
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	18c1      	adds	r1, r0, r3
 800542e:	4613      	mov	r3, r2
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	3348      	adds	r3, #72	; 0x48
 8005438:	443b      	add	r3, r7
 800543a:	3b34      	subs	r3, #52	; 0x34
 800543c:	6019      	str	r1, [r3, #0]
    }

    if (pktIdx-> nx_packet_next ==NULL)
 800543e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <_nx_driver_hardware_packet_send+0xba>
    {
      Txbuffer[i].next = NULL;
 8005446:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005448:	4613      	mov	r3, r2
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	3348      	adds	r3, #72	; 0x48
 8005452:	443b      	add	r3, r7
 8005454:	3b34      	subs	r3, #52	; 0x34
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
    }

    i++;
 800545a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545c:	3301      	adds	r3, #1
 800545e:	63fb      	str	r3, [r7, #60]	; 0x3c
  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 8005460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	647b      	str	r3, [r7, #68]	; 0x44
 8005466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1ab      	bne.n	80053c4 <_nx_driver_hardware_packet_send+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)(pktIdx -> nx_packet_data_start), pktIdx -> nx_packet_data_end - pktIdx -> nx_packet_data_start);
#endif
  }

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  if (packet_ptr -> nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	f403 7315 	and.w	r3, r3, #596	; 0x254
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <_nx_driver_hardware_packet_send+0xe2>
                                                           NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM |
                                                             NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM |
                                                               NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM))
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005478:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <_nx_driver_hardware_packet_send+0x128>)
 800547a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800547e:	615a      	str	r2, [r3, #20]
 8005480:	e009      	b.n	8005496 <_nx_driver_hardware_packet_send+0xf6>
  }
  else if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <_nx_driver_hardware_packet_send+0xf6>
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_INSERT;
 800548e:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <_nx_driver_hardware_packet_send+0x128>)
 8005490:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005494:	615a      	str	r2, [r3, #20]
  }
#else
  TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  TxPacketCfg.Length = buffLen;
 8005496:	4a0c      	ldr	r2, [pc, #48]	; (80054c8 <_nx_driver_hardware_packet_send+0x128>)
 8005498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800549a:	6053      	str	r3, [r2, #4]
  TxPacketCfg.TxBuffer = Txbuffer;
 800549c:	4a0a      	ldr	r2, [pc, #40]	; (80054c8 <_nx_driver_hardware_packet_send+0x128>)
 800549e:	f107 030c 	add.w	r3, r7, #12
 80054a2:	6093      	str	r3, [r2, #8]
  TxPacketCfg.pData = (uint32_t *)packet_ptr;
 80054a4:	4a08      	ldr	r2, [pc, #32]	; (80054c8 <_nx_driver_hardware_packet_send+0x128>)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6353      	str	r3, [r2, #52]	; 0x34

  if(HAL_ETH_Transmit_IT(&eth_handle, &TxPacketCfg))
 80054aa:	4907      	ldr	r1, [pc, #28]	; (80054c8 <_nx_driver_hardware_packet_send+0x128>)
 80054ac:	4807      	ldr	r0, [pc, #28]	; (80054cc <_nx_driver_hardware_packet_send+0x12c>)
 80054ae:	f7fc f9e7 	bl	8001880 <HAL_ETH_Transmit_IT>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <_nx_driver_hardware_packet_send+0x11c>
  {
    return(NX_DRIVER_ERROR);
 80054b8:	235a      	movs	r3, #90	; 0x5a
 80054ba:	e000      	b.n	80054be <_nx_driver_hardware_packet_send+0x11e>
  }

  return(NX_SUCCESS);
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3748      	adds	r7, #72	; 0x48
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	200147e0 	.word	0x200147e0
 80054cc:	20007e64 	.word	0x20007e64

080054d0 <_nx_driver_hardware_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]


  /* Increase the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count++;
 80054d8:	4b08      	ldr	r3, [pc, #32]	; (80054fc <_nx_driver_hardware_multicast_join+0x2c>)
 80054da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054dc:	3301      	adds	r3, #1
 80054de:	4a07      	ldr	r2, [pc, #28]	; (80054fc <_nx_driver_hardware_multicast_join+0x2c>)
 80054e0:	6493      	str	r3, [r2, #72]	; 0x48

  /* Enable multicast frame reception.  */
  FilterConfig.PassAllMulticast = ENABLE;
 80054e2:	4b07      	ldr	r3, [pc, #28]	; (8005500 <_nx_driver_hardware_multicast_join+0x30>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	715a      	strb	r2, [r3, #5]
  HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 80054e8:	4905      	ldr	r1, [pc, #20]	; (8005500 <_nx_driver_hardware_multicast_join+0x30>)
 80054ea:	4806      	ldr	r0, [pc, #24]	; (8005504 <_nx_driver_hardware_multicast_join+0x34>)
 80054ec:	f7fc fff2 	bl	80024d4 <HAL_ETH_SetMACFilterConfig>

  /* Return success.  */
  return(NX_SUCCESS);
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20014790 	.word	0x20014790
 8005500:	20014818 	.word	0x20014818
 8005504:	20007e64 	.word	0x20007e64

08005508 <_nx_driver_hardware_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

  /* Decrease the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count--;
 8005510:	4b0a      	ldr	r3, [pc, #40]	; (800553c <_nx_driver_hardware_multicast_leave+0x34>)
 8005512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005514:	3b01      	subs	r3, #1
 8005516:	4a09      	ldr	r2, [pc, #36]	; (800553c <_nx_driver_hardware_multicast_leave+0x34>)
 8005518:	6493      	str	r3, [r2, #72]	; 0x48

  /* If multicast count reaches zero, disable multicast frame reception.  */
  if (nx_driver_information.nx_driver_information_multicast_count == 0)
 800551a:	4b08      	ldr	r3, [pc, #32]	; (800553c <_nx_driver_hardware_multicast_leave+0x34>)
 800551c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <_nx_driver_hardware_multicast_leave+0x28>
  {

    /* Disable multicast frame reception.  */
    FilterConfig.PassAllMulticast = DISABLE;
 8005522:	4b07      	ldr	r3, [pc, #28]	; (8005540 <_nx_driver_hardware_multicast_leave+0x38>)
 8005524:	2200      	movs	r2, #0
 8005526:	715a      	strb	r2, [r3, #5]
    HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8005528:	4905      	ldr	r1, [pc, #20]	; (8005540 <_nx_driver_hardware_multicast_leave+0x38>)
 800552a:	4806      	ldr	r0, [pc, #24]	; (8005544 <_nx_driver_hardware_multicast_leave+0x3c>)
 800552c:	f7fc ffd2 	bl	80024d4 <HAL_ETH_SetMACFilterConfig>
  }

  /* Return success.  */
  return(NX_SUCCESS);
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20014790 	.word	0x20014790
 8005540:	20014818 	.word	0x20014818
 8005544:	20007e64 	.word	0x20007e64

08005548 <_nx_driver_hardware_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  INT PHYLinkState;

  /* Get link status. */
  PHYLinkState = nx_eth_phy_get_link_state();
 8005550:	f7ff fac2 	bl	8004ad8 <nx_eth_phy_get_link_state>
 8005554:	60f8      	str	r0, [r7, #12]

  /* Check link status. */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b01      	cmp	r3, #1
 800555a:	dc04      	bgt.n	8005566 <_nx_driver_hardware_get_status+0x1e>
  {
    /* Update Link status if physical link is down. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_FALSE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e003      	b.n	800556e <_nx_driver_hardware_get_status+0x26>
  }
  else
  {
    /* Update Link status if physical link is up. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_TRUE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	2201      	movs	r2, #1
 800556c:	601a      	str	r2, [r3, #0]
  }

  /* Return success. */
  return NX_SUCCESS;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  NX_PACKET * release_packet = (NX_PACKET *) buff;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Remove the Ethernet header and release the packet.  */
  NX_DRIVER_ETHERNET_HEADER_REMOVE(release_packet);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	320e      	adds	r2, #14
 800558c:	609a      	str	r2, [r3, #8]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3a0e      	subs	r2, #14
 8005596:	625a      	str	r2, [r3, #36]	; 0x24

  /* Release the packet.  */
  nx_packet_transmit_release(release_packet);
 8005598:	f107 030c 	add.w	r3, r7, #12
 800559c:	4618      	mov	r0, r3
 800559e:	f005 fc55 	bl	800ae4c <_nxe_packet_transmit_release>
}
 80055a2:	bf00      	nop
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <_nx_driver_hardware_packet_received>:

static VOID  _nx_driver_hardware_packet_received(VOID)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
  NX_PACKET  *received_packet_ptr;

  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 80055b2:	e006      	b.n	80055c2 <_nx_driver_hardware_packet_received+0x16>
  {
      /* Transfer the packet to NetX.  */
      _nx_driver_transfer_to_netx(nx_driver_information.nx_driver_information_ip_ptr, received_packet_ptr);
 80055b4:	4b09      	ldr	r3, [pc, #36]	; (80055dc <_nx_driver_hardware_packet_received+0x30>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	4611      	mov	r1, r2
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff fdf7 	bl	80051b0 <_nx_driver_transfer_to_netx>
  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 80055c2:	1d3b      	adds	r3, r7, #4
 80055c4:	4619      	mov	r1, r3
 80055c6:	4806      	ldr	r0, [pc, #24]	; (80055e0 <_nx_driver_hardware_packet_received+0x34>)
 80055c8:	f7fc f9ab 	bl	8001922 <HAL_ETH_ReadData>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <_nx_driver_hardware_packet_received+0x8>
  }
}
 80055d2:	bf00      	nop
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	20014790 	.word	0x20014790
 80055e0:	20007e64 	.word	0x20007e64

080055e4 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t ** buff)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  NX_PACKET     *packet_ptr;
  if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 80055ec:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <HAL_ETH_RxAllocateCallback+0x40>)
 80055ee:	6898      	ldr	r0, [r3, #8]
 80055f0:	f107 010c 	add.w	r1, r7, #12
 80055f4:	2300      	movs	r3, #0
 80055f6:	2200      	movs	r2, #0
 80055f8:	f005 fa86 	bl	800ab08 <_nxe_packet_allocate>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <HAL_ETH_RxAllocateCallback+0x32>
                         NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
  {
    /* Adjust the packet.  */
    packet_ptr -> nx_packet_prepend_ptr += 2;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3202      	adds	r2, #2
 800560a:	609a      	str	r2, [r3, #8]
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_InvalidateDCache_by_Addr((uint32_t*)packet_ptr -> nx_packet_data_start, packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start);
#endif
    *buff = packet_ptr -> nx_packet_prepend_ptr;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	601a      	str	r2, [r3, #0]
  else
  {
    /* Rx Buffer Pool is exhausted. */
    *buff = NULL;
  }
}
 8005614:	e002      	b.n	800561c <HAL_ETH_RxAllocateCallback+0x38>
    *buff = NULL;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]
}
 800561c:	bf00      	nop
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20014790 	.word	0x20014790

08005628 <HAL_ETH_RxLinkCallback>:
/*                                                                        */
/*    HAL_ETH_ReadData              Read a received packet                */
/*                                                                        */
/**************************************************************************/
void HAL_ETH_RxLinkCallback(void **first_packet_ptr, void **last_packet_ptr, uint8_t *buff, uint16_t Length)
{
 8005628:	b480      	push	{r7}
 800562a:	b089      	sub	sp, #36	; 0x24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	807b      	strh	r3, [r7, #2]
  NX_PACKET **first_nx_packet_ptr = (NX_PACKET **)first_packet_ptr;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	61fb      	str	r3, [r7, #28]
  NX_PACKET **last_nx_packet_ptr = (NX_PACKET **)last_packet_ptr;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	61bb      	str	r3, [r7, #24]
  NX_PACKET  *received_packet_ptr;

  /* Indicate the offset of the received data.  */
  uint8_t *data_buffer_ptr = buff - 2U - header_size;
 800563e:	4b14      	ldr	r3, [pc, #80]	; (8005690 <HAL_ETH_RxLinkCallback+0x68>)
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	f06f 0301 	mvn.w	r3, #1
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	4413      	add	r3, r2
 800564c:	617b      	str	r3, [r7, #20]

  received_packet_ptr = (NX_PACKET *)data_buffer_ptr;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	613b      	str	r3, [r7, #16]
  received_packet_ptr->nx_packet_append_ptr = received_packet_ptr->nx_packet_prepend_ptr + Length;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	887b      	ldrh	r3, [r7, #2]
 8005658:	441a      	add	r2, r3
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	60da      	str	r2, [r3, #12]
  received_packet_ptr->nx_packet_length = Length;
 800565e:	887a      	ldrh	r2, [r7, #2]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check whether this is the first packet. */
  if (*first_nx_packet_ptr == NULL)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d103      	bne.n	8005674 <HAL_ETH_RxLinkCallback+0x4c>
  {
    /* Add the first buffer of the packet. */
    *first_nx_packet_ptr = received_packet_ptr;
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	e003      	b.n	800567c <HAL_ETH_RxLinkCallback+0x54>
  }
  /* This is not the first packet. */
  else
  {
    /* Add the rest of the buffer to the end of the packet. */
    (*last_nx_packet_ptr)->nx_packet_next = received_packet_ptr;
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	605a      	str	r2, [r3, #4]
  }
  /* Save the current packet in order to use it in the next iteration. */
  *last_nx_packet_ptr  = received_packet_ptr;
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	601a      	str	r2, [r3, #0]
}
 8005682:	bf00      	nop
 8005684:	3724      	adds	r7, #36	; 0x24
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	200147dc 	.word	0x200147dc

08005694 <_nx_driver_hardware_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT _nx_driver_hardware_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]

  return NX_SUCCESS;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
	...

080056ac <HAL_ETH_RxCpltCallback>:
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]

  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 80056b4:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <HAL_ETH_RxCpltCallback+0x34>)
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	60fb      	str	r3, [r7, #12]

  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_RECEIVED;
 80056ba:	4b09      	ldr	r3, [pc, #36]	; (80056e0 <HAL_ETH_RxCpltCallback+0x34>)
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f043 0301 	orr.w	r3, r3, #1
 80056c2:	4a07      	ldr	r2, [pc, #28]	; (80056e0 <HAL_ETH_RxCpltCallback+0x34>)
 80056c4:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d104      	bne.n	80056d6 <HAL_ETH_RxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 80056cc:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <HAL_ETH_RxCpltCallback+0x34>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 fdbf 	bl	8007254 <_nx_ip_driver_deferred_processing>
  }
}
 80056d6:	bf00      	nop
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20014790 	.word	0x20014790

080056e4 <HAL_ETH_TxCpltCallback>:

void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <HAL_ETH_TxCpltCallback+0x34>)
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	60fb      	str	r3, [r7, #12]


  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_TRANSMITTED;
 80056f2:	4b09      	ldr	r3, [pc, #36]	; (8005718 <HAL_ETH_TxCpltCallback+0x34>)
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f043 0304 	orr.w	r3, r3, #4
 80056fa:	4a07      	ldr	r2, [pc, #28]	; (8005718 <HAL_ETH_TxCpltCallback+0x34>)
 80056fc:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <HAL_ETH_TxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 8005704:	4b04      	ldr	r3, [pc, #16]	; (8005718 <HAL_ETH_TxCpltCallback+0x34>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4618      	mov	r0, r3
 800570a:	f001 fda3 	bl	8007254 <_nx_ip_driver_deferred_processing>
  }
}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20014790 	.word	0x20014790

0800571c <_nx_arp_dynamic_entry_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_dynamic_entry_delete(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_PACKET *packet_ptr, *next_packet_ptr;


    /* Determine if this ARP entry is already active.  */
    if (arp_ptr -> nx_arp_active_list_head)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d050      	beq.n	80057d0 <_nx_arp_dynamic_entry_delete+0xb4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800572e:	f3ef 8310 	mrs	r3, PRIMASK
 8005732:	613b      	str	r3, [r7, #16]
    return(posture);
 8005734:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8005736:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005738:	b672      	cpsid	i
    return(int_posture);
 800573a:	68fb      	ldr	r3, [r7, #12]
    {

        /* Remove this dynamic ARP entry from the associated list.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800573c:	61bb      	str	r3, [r7, #24]

        /* Determine if this is the only ARP entry on the list.  */
        if (arp_ptr == arp_ptr -> nx_arp_active_next)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d104      	bne.n	8005752 <_nx_arp_dynamic_entry_delete+0x36>
        {

            /* Remove the entry from the list.  */
            *(arp_ptr -> nx_arp_active_list_head) =  NX_NULL;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	e014      	b.n	800577c <_nx_arp_dynamic_entry_delete+0x60>
        {

            /* Remove the entry from a list of more than one entry.  */

            /* Update the list head pointer.  */
            if (*(arp_ptr -> nx_arp_active_list_head) == arp_ptr)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	429a      	cmp	r2, r3
 800575c:	d104      	bne.n	8005768 <_nx_arp_dynamic_entry_delete+0x4c>
            {
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	6952      	ldr	r2, [r2, #20]
 8005766:	601a      	str	r2, [r3, #0]
            }

            /* Update the links of the adjacent ARP entries.  */
            (arp_ptr -> nx_arp_active_next) -> nx_arp_active_previous = arp_ptr -> nx_arp_active_previous;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	6992      	ldr	r2, [r2, #24]
 8005770:	619a      	str	r2, [r3, #24]
            (arp_ptr -> nx_arp_active_previous) -> nx_arp_active_next =  arp_ptr -> nx_arp_active_next;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	6952      	ldr	r2, [r2, #20]
 800577a:	615a      	str	r2, [r3, #20]
        }

        /* No longer active, clear the active list head.  */
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2200      	movs	r2, #0
 8005780:	61da      	str	r2, [r3, #28]

        /* Decrease the number of active ARP entries.  */
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8005788:	1e5a      	subs	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

        /* Pickup the queued packets head pointer.  */
        next_packet_ptr =  arp_ptr -> nx_arp_packets_waiting;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005794:	61fb      	str	r3, [r7, #28]

        /* Clear the queued packets head pointer.  */
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2200      	movs	r2, #0
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f383 8810 	msr	PRIMASK, r3
}
 80057a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Loop to remove all queued packets.  */
        while (next_packet_ptr)
 80057a8:	e00f      	b.n	80057ca <_nx_arp_dynamic_entry_delete+0xae>
        {

            /* Pickup the packet pointer at the head of the queue.  */
            packet_ptr =  next_packet_ptr;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	617b      	str	r3, [r7, #20]

            /* Move to the next packet in the queue.  */
            next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	61fb      	str	r3, [r7, #28]

            /* Clear the next packet queue pointer.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2200      	movs	r2, #0
 80057b8:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	655a      	str	r2, [r3, #84]	; 0x54
#endif

            /* Release the packet that was queued from the previous ARP entry.  */
            _nx_packet_transmit_release(packet_ptr);
 80057c4:	6978      	ldr	r0, [r7, #20]
 80057c6:	f003 fdc5 	bl	8009354 <_nx_packet_transmit_release>
        while (next_packet_ptr)
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1ec      	bne.n	80057aa <_nx_arp_dynamic_entry_delete+0x8e>
        }
    }

    return(NX_SUCCESS);
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3720      	adds	r7, #32
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <_nx_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ARP_ENABLE, ip_ptr, arp_cache_memory, arp_cache_size, 0, NX_TRACE_ARP_EVENTS, 0, 0);

    /* Clear the entire ARP cache.  */
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	2100      	movs	r1, #0
 80057ec:	68b8      	ldr	r0, [r7, #8]
 80057ee:	f009 fa1d 	bl	800ec2c <memset>

    /* Pickup starting address of ARP entry array.  */
    entry_ptr =  (NX_ARP *)arp_cache_memory;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	61bb      	str	r3, [r7, #24]

    /* Determine how many ARP entries will fit in this cache area.  */
    arp_entries =  arp_cache_size / sizeof(NX_ARP);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a2d      	ldr	r2, [pc, #180]	; (80058b0 <_nx_arp_enable+0xd4>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	091b      	lsrs	r3, r3, #4
 8005800:	617b      	str	r3, [r7, #20]

    /* Initialize the forward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	e00a      	b.n	800581e <_nx_arp_enable+0x42>
    {
        /* Setup each entry to point to the next entry.  */
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	60da      	str	r2, [r3, #12]
        entry_ptr++;
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	3334      	adds	r3, #52	; 0x34
 8005816:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	3301      	adds	r3, #1
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	3b01      	subs	r3, #1
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	429a      	cmp	r2, r3
 8005826:	d3ef      	bcc.n	8005808 <_nx_arp_enable+0x2c>
    }

    /* The entry now points to the last entry in the ARP array.  Set its
       next pointer to the first entry.  */
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	60da      	str	r2, [r3, #12]

    /* Initialize the backward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	e00a      	b.n	800584a <_nx_arp_enable+0x6e>
    {
        /* Setup each entry to point to the previous entry.  */
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	f1a3 0234 	sub.w	r2, r3, #52	; 0x34
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	611a      	str	r2, [r3, #16]
        entry_ptr--;
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	3b34      	subs	r3, #52	; 0x34
 8005842:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	3301      	adds	r3, #1
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	3b01      	subs	r3, #1
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	429a      	cmp	r2, r3
 8005852:	d3ef      	bcc.n	8005834 <_nx_arp_enable+0x58>
    }

    /* The entry now points to the first entry, set the previous pointer
       to the last entry.  */
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2234      	movs	r2, #52	; 0x34
 8005858:	fb02 f303 	mul.w	r3, r2, r3
 800585c:	3b34      	subs	r3, #52	; 0x34
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	441a      	add	r2, r3
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	611a      	str	r2, [r3, #16]
       information in the IP structure.  */

    /* Setup the list head pointers in the IP instance.  At first all ARP
       entries are associated with the dynamic ARP list.  The static ARP list
       is NULL until static ARP entry calls are made.  */
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
    ip_ptr -> nx_ip_arp_dynamic_list =  (NX_ARP *)arp_cache_memory;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4

    /* Store the initial ARP cache information in the IP control block.  */
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	f8c3 26f8 	str.w	r2, [r3, #1784]	; 0x6f8
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc

    /* Setup the ARP periodic update routine.  */
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a0a      	ldr	r2, [pc, #40]	; (80058b4 <_nx_arp_enable+0xd8>)
 800588a:	f8c3 26e8 	str.w	r2, [r3, #1768]	; 0x6e8

    /* Setup the ARP queue process routine.  */
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4a09      	ldr	r2, [pc, #36]	; (80058b8 <_nx_arp_enable+0xdc>)
 8005892:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec

    /* Setup the ARP send packet routine.  */
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4a08      	ldr	r2, [pc, #32]	; (80058bc <_nx_arp_enable+0xe0>)
 800589a:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0

    /* Setup the ARP allocate service request pointer.  */
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4a07      	ldr	r2, [pc, #28]	; (80058c0 <_nx_arp_enable+0xe4>)
 80058a2:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4

    /* Return successful completion.  */
    return(NX_SUCCESS);
 80058a6:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3720      	adds	r7, #32
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	4ec4ec4f 	.word	0x4ec4ec4f
 80058b4:	08006091 	.word	0x08006091
 80058b8:	08006293 	.word	0x08006293
 80058bc:	08005f4d 	.word	0x08005f4d
 80058c0:	080058c5 	.word	0x080058c5

080058c4 <_nx_arp_entry_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_entry_allocate(NX_IP *ip_ptr, NX_ARP **arp_list_ptr, UINT is_static)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	; 0x28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
NX_ARP *arp_entry;
UINT    status;


    /* Determine if there is an ARP entry available in the dynamic list.  */
    if (ip_ptr -> nx_ip_arp_dynamic_list)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80b4 	beq.w	8005a44 <_nx_arp_entry_allocate+0x180>
    {

        /* Yes there are one or more free entries.  */

        /* Pickup pointer to last used dynamic ARP entry.  */
        arp_entry =  (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	623b      	str	r3, [r7, #32]

        /* Remove from the dynamic list. */
        _nx_arp_dynamic_entry_delete(ip_ptr, arp_entry);
 80058e6:	6a39      	ldr	r1, [r7, #32]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f7ff ff17 	bl	800571c <_nx_arp_dynamic_entry_delete>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80058ee:	f3ef 8310 	mrs	r3, PRIMASK
 80058f2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80058f4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80058f6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80058f8:	b672      	cpsid	i
    return(int_posture);
 80058fa:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts temporarily.  */
        TX_DISABLE
 80058fc:	61fb      	str	r3, [r7, #28]

        /* Link the ARP entry at the head of the IP list.  */

        /* Determine if the ARP entry is being added to an empty list.  */
        if (*arp_list_ptr)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d014      	beq.n	8005930 <_nx_arp_entry_allocate+0x6c>
        {

            /* Add the ARP entry to the beginning of the nonempty ARP
               list.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =      *arp_list_ptr;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	619a      	str	r2, [r3, #24]
            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =  arp_entry;
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	6a3a      	ldr	r2, [r7, #32]
 8005924:	615a      	str	r2, [r3, #20]
            (*arp_list_ptr) -> nx_arp_active_previous =  arp_entry;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6a3a      	ldr	r2, [r7, #32]
 800592c:	619a      	str	r2, [r3, #24]
 800592e:	e00b      	b.n	8005948 <_nx_arp_entry_allocate+0x84>
        }
        else
        {
            /* Empty list, just put the ARP entry at the beginning.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =       arp_entry;
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	6a3a      	ldr	r2, [r7, #32]
 800593a:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =   arp_entry;
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	6a3a      	ldr	r2, [r7, #32]
 8005940:	619a      	str	r2, [r3, #24]

            /* Now setup the list head.  */
            *arp_list_ptr =  arp_entry;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6a3a      	ldr	r2, [r7, #32]
 8005946:	601a      	str	r2, [r3, #0]
        }

        /* Determine if this is a static entry. */
        if (is_static == NX_TRUE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d141      	bne.n	80059d2 <_nx_arp_entry_allocate+0x10e>
        {

            /* Remove this entry from the ARP dynamic list.  */

            /* Determine if this is the only ARP entry on the dynamic list.  */
            if (arp_entry == arp_entry -> nx_arp_pool_next)
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	6a3a      	ldr	r2, [r7, #32]
 8005954:	429a      	cmp	r2, r3
 8005956:	d104      	bne.n	8005962 <_nx_arp_entry_allocate+0x9e>
            {

                /* Remove the sole entry from the dynamic list head.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  NX_NULL;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
 8005960:	e009      	b.n	8005976 <_nx_arp_entry_allocate+0xb2>
            {

                /* Remove the entry from a list of more than one entry.  */

                /* Update the links of the adjacent ARP dynamic pool entries.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	6a3a      	ldr	r2, [r7, #32]
 8005968:	6912      	ldr	r2, [r2, #16]
 800596a:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	6a3a      	ldr	r2, [r7, #32]
 8005972:	68d2      	ldr	r2, [r2, #12]
 8005974:	60da      	str	r2, [r3, #12]
            }

            /* Add the entry to the ARP static list.  */

            /* Determine if the ARP static list is empty.  */
            if (ip_ptr -> nx_ip_arp_static_list == NX_NULL)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10a      	bne.n	8005996 <_nx_arp_entry_allocate+0xd2>
            {

                /* Just place this single ARP entry on the list.  */
                arp_entry -> nx_arp_pool_next =     arp_entry;
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	6a3a      	ldr	r2, [r7, #32]
 8005984:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = arp_entry;
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	6a3a      	ldr	r2, [r7, #32]
 800598a:	611a      	str	r2, [r3, #16]
                ip_ptr -> nx_ip_arp_static_list =   arp_entry;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a3a      	ldr	r2, [r7, #32]
 8005990:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
 8005994:	e015      	b.n	80059c2 <_nx_arp_entry_allocate+0xfe>
            }
            else
            {

                /* Add to the end of the ARP static list.  */
                arp_entry -> nx_arp_pool_next = ip_ptr -> nx_ip_arp_static_list;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8d3 26d0 	ldr.w	r2, [r3, #1744]	; 0x6d0
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	611a      	str	r2, [r3, #16]
                ((ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	6a3a      	ldr	r2, [r7, #32]
 80059b6:	60da      	str	r2, [r3, #12]
                (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous = arp_entry;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80059be:	6a3a      	ldr	r2, [r7, #32]
 80059c0:	611a      	str	r2, [r3, #16]
            }

#ifndef NX_DISABLE_ARP_INFO
            /* Increment the ARP static entry count.  */
            ip_ptr -> nx_ip_arp_static_entries++;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80059d0:	e02c      	b.n	8005a2c <_nx_arp_entry_allocate+0x168>
        }
        else  /* Allocate entry from dynamic list. */
        {

            /* Move this ARP entry to the front of the general ARP dynamic entry pool.  */
            if (arp_entry != ip_ptr -> nx_ip_arp_dynamic_list)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80059d8:	6a3a      	ldr	r2, [r7, #32]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d01f      	beq.n	8005a1e <_nx_arp_entry_allocate+0x15a>

                /* The current ARP entry is not at the front of the list, so it
                   must be moved.  */

                /* Link up the neighbors first.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	6a3a      	ldr	r2, [r7, #32]
 80059e4:	6912      	ldr	r2, [r2, #16]
 80059e6:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	6a3a      	ldr	r2, [r7, #32]
 80059ee:	68d2      	ldr	r2, [r2, #12]
 80059f0:	60da      	str	r2, [r3, #12]

                /* Now link this ARP entry to the head of the list.  */
                arp_entry -> nx_arp_pool_next =  ip_ptr -> nx_ip_arp_dynamic_list;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f8d3 26d4 	ldr.w	r2, [r3, #1748]	; 0x6d4
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =  arp_entry;
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	60da      	str	r2, [r3, #12]
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =  arp_entry;
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	6a3a      	ldr	r2, [r7, #32]
 8005a14:	611a      	str	r2, [r3, #16]

                /* Now set the list head to this ARP entry.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a3a      	ldr	r2, [r7, #32]
 8005a1a:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
            }

            /* Increment the number of active dynamic entries.  */
            ip_ptr -> nx_ip_arp_dynamic_active_count++;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8
        }

        /* Set the entry type.  */
        arp_entry -> nx_arp_route_static = is_static;
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f383 8810 	msr	PRIMASK, r3
}
 8005a3c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Setup a successful status return.  */
        status =  NX_SUCCESS;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
 8005a42:	e001      	b.n	8005a48 <_nx_arp_entry_allocate+0x184>
    else
    {

        /* No more ARP entries are available, all the ARP entries must be
           allocated on the static list.  */
        status =  NX_NO_MORE_ENTRIES;
 8005a44:	2317      	movs	r3, #23
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return status to the caller.  */
    return(status);
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3728      	adds	r7, #40	; 0x28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <_nx_arp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b088      	sub	sp, #32
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a60:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005a62:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005a64:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005a66:	b672      	cpsid	i
    return(int_posture);
 8005a68:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8005a6a:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if ARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_arp_queue_process)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d110      	bne.n	8005a98 <_nx_arp_packet_deferred_receive+0x46>

        /* ARP is not enabled.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count...  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f383 8810 	msr	PRIMASK, r3
}
 8005a8e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since ARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8005a90:	6838      	ldr	r0, [r7, #0]
 8005a92:	f003 fba7 	bl	80091e4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8005a96:	e02f      	b.n	8005af8 <_nx_arp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the ARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d011      	beq.n	8005ac6 <_nx_arp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the ARP deferred queue.  */
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f383 8810 	msr	PRIMASK, r3
}
 8005ac4:	e018      	b.n	8005af8 <_nx_arp_packet_deferred_receive+0xa6>
    {

        /* Empty ARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the ARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
        packet_ptr -> nx_packet_queue_next =                 NX_NULL;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	61da      	str	r2, [r3, #28]
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f383 8810 	msr	PRIMASK, r3
}
 8005ae6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the ARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005aee:	2200      	movs	r2, #0
 8005af0:	2110      	movs	r1, #16
 8005af2:	4618      	mov	r0, r3
 8005af4:	f006 f8d8 	bl	800bca8 <_tx_event_flags_set>
    }
}
 8005af8:	3720      	adds	r7, #32
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <_nx_arp_packet_receive>:
/*                                            fixed compiler errors,      */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8005afe:	b590      	push	{r4, r7, lr}
 8005b00:	b097      	sub	sp, #92	; 0x5c
 8005b02:	af02      	add	r7, sp, #8
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
ULONG         sender_physical_lsw;
ULONG         sender_ip_address;
ULONG         target_ip_address;
ULONG         message_type;
ULONG         index;
UCHAR         consumed = NX_FALSE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
NX_INTERFACE *interface_ptr;


#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Determine if the packet length is valid.  */
    if (packet_ptr -> nx_packet_length < NX_ARP_MESSAGE_SIZE)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	2b1b      	cmp	r3, #27
 8005b14:	d80a      	bhi.n	8005b2c <_nx_arp_packet_receive+0x2e>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8005b24:	6838      	ldr	r0, [r7, #0]
 8005b26:	f003 fb5d 	bl	80091e4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8005b2a:	e20b      	b.n	8005f44 <_nx_arp_packet_receive+0x446>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING  */

    /* Setup a pointer to the ARP message.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	643b      	str	r3, [r7, #64]	; 0x40

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b34:	3304      	adds	r3, #4
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	ba12      	rev	r2, r2
 8005b3e:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b42:	3308      	adds	r3, #8
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b48:	3308      	adds	r3, #8
 8005b4a:	ba12      	rev	r2, r2
 8005b4c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b50:	330c      	adds	r3, #12
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b56:	330c      	adds	r3, #12
 8005b58:	ba12      	rev	r2, r2
 8005b5a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5e:	3310      	adds	r3, #16
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b64:	3310      	adds	r3, #16
 8005b66:	ba12      	rev	r2, r2
 8005b68:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8005b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6c:	3314      	adds	r3, #20
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b72:	3314      	adds	r3, #20
 8005b74:	ba12      	rev	r2, r2
 8005b76:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b7a:	3318      	adds	r3, #24
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b80:	3318      	adds	r3, #24
 8005b82:	ba12      	rev	r2, r2
 8005b84:	601a      	str	r2, [r3, #0]

    /* Pickup the ARP message type.  */
    message_type =  (ULONG)(*(message_ptr + 1) & 0xFFFF);
 8005b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b88:	3304      	adds	r3, #4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the ARP message type is valid.  */
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 8005b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d00d      	beq.n	8005bb2 <_nx_arp_packet_receive+0xb4>
 8005b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d00a      	beq.n	8005bb2 <_nx_arp_packet_receive+0xb4>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8005baa:	6838      	ldr	r0, [r7, #0]
 8005bac:	f003 fb1a 	bl	80091e4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8005bb0:	e1c8      	b.n	8005f44 <_nx_arp_packet_receive+0x446>
    }

    /* Pick up the sender's physical address from the message.  */
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
 8005bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb4:	3308      	adds	r3, #8
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	0c1b      	lsrs	r3, r3, #16
 8005bba:	63bb      	str	r3, [r7, #56]	; 0x38
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 8005bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	041a      	lsls	r2, r3, #16
 8005bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	0c1b      	lsrs	r3, r3, #16
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 8005bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd2:	330c      	adds	r3, #12
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	041a      	lsls	r2, r3, #16
 8005bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bda:	3310      	adds	r3, #16
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	0c1b      	lsrs	r3, r3, #16
 8005be0:	4313      	orrs	r3, r2
 8005be2:	633b      	str	r3, [r7, #48]	; 0x30
    target_ip_address =    *(message_ptr + 6);
 8005be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Does the packet have an interface assigned? */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d104      	bne.n	8005bfc <_nx_arp_packet_receive+0xfe>
    {

        /* No, so default it to the primary interface. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f503 62e4 	add.w	r2, r3, #1824	; 0x720
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Pickup the interface information from the incoming packet. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c00:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if it is an IP address conflict when IP address probing.  */
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d12e      	bne.n	8005c68 <_nx_arp_packet_receive+0x16a>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d02a      	beq.n	8005c68 <_nx_arp_packet_receive+0x16a>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8005c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d007      	beq.n	8005c2c <_nx_arp_packet_receive+0x12e>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d122      	bne.n	8005c68 <_nx_arp_packet_receive+0x16a>
         ((sender_ip_address == 0) && (target_ip_address == interface_ptr -> nx_interface_ip_probe_address))))
 8005c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d11d      	bne.n	8005c68 <_nx_arp_packet_receive+0x16a>
    {

        /* Make sure the sender physical address is not ours.  */
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d104      	bne.n	8005c40 <_nx_arp_packet_receive+0x142>
            (sender_physical_lsw != interface_ptr -> nx_interface_physical_address_lsw))
 8005c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c38:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 8005c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d00f      	beq.n	8005c60 <_nx_arp_packet_receive+0x162>
        {

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00b      	beq.n	8005c60 <_nx_arp_packet_receive+0x162>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	79db      	ldrb	r3, [r3, #7]
 8005c50:	4619      	mov	r1, r3
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	47a0      	blx	r4
                                                                           sender_physical_msw, sender_physical_lsw);
            }
        }

        /* Release the packet. */
        _nx_packet_release(packet_ptr);
 8005c60:	6838      	ldr	r0, [r7, #0]
 8005c62:	f003 fabf 	bl	80091e4 <_nx_packet_release>

        return;
 8005c66:	e16d      	b.n	8005f44 <_nx_arp_packet_receive+0x446>
    }

    /* Determine if it is an address conflict packet after set the IP address.  */
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d040      	beq.n	8005cf0 <_nx_arp_packet_receive+0x1f2>
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d13b      	bne.n	8005cf0 <_nx_arp_packet_receive+0x1f2>
    {

        /* Is it sent from other devices. */
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d105      	bne.n	8005c90 <_nx_arp_packet_receive+0x192>
            (sender_physical_lsw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw))
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8005c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d02b      	beq.n	8005ce8 <_nx_arp_packet_receive+0x1ea>
        {

            /* Yes it is.  */
            if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout == 0)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10a      	bne.n	8005cb0 <_nx_arp_packet_receive+0x1b2>
            {

                /* Set defend timeout. */
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9e:	220a      	movs	r2, #10
 8005ca0:	645a      	str	r2, [r3, #68]	; 0x44

                /* Send the announcement. */
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f94e 	bl	8005f4c <_nx_arp_packet_send>
            }

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00b      	beq.n	8005cd0 <_nx_arp_packet_receive+0x1d2>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	79db      	ldrb	r3, [r3, #7]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	47a0      	blx	r4

            /* This is likely in response to our previous gratuitous ARP from another entity on the
               network has the same IP address.  */

            /* Determine if there is a gratuitous ARP response handler.  */
            if (ip_ptr -> nx_ip_arp_gratuitous_response_handler)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d006      	beq.n	8005ce8 <_nx_arp_packet_receive+0x1ea>
            {

                /* Yes, call the gratuitous ARP response handler. Note that it is responsible
                   for releasing the packet!  */
                (ip_ptr -> nx_ip_arp_gratuitous_response_handler)(ip_ptr, packet_ptr);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	4798      	blx	r3

                return;
 8005ce6:	e12d      	b.n	8005f44 <_nx_arp_packet_receive+0x446>
            return;
#endif /* NX_ARP_DEFEND_BY_REPLY */
        }

        /* Release the conflict packet. */
        _nx_packet_release(packet_ptr);
 8005ce8:	6838      	ldr	r0, [r7, #0]
 8005cea:	f003 fa7b 	bl	80091e4 <_nx_packet_release>

        return;
 8005cee:	e129      	b.n	8005f44 <_nx_arp_packet_receive+0x446>
    }

    /* Determine what type of ARP message this is.  Note that ARP requests must
       also specify this IP instance's IP address.  */
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 8005cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	f040 808f 	bne.w	8005e16 <_nx_arp_packet_receive+0x318>
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d00:	429a      	cmp	r2, r3
 8005d02:	f040 8088 	bne.w	8005e16 <_nx_arp_packet_receive+0x318>
    {

#ifndef NX_DISABLE_ARP_INFO

        /* Increment the ARP requests received count.  */
        ip_ptr -> nx_ip_arp_requests_received++;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Increment the ARP responses sent count.  */
        ip_ptr -> nx_ip_arp_responses_sent++;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	675a      	str	r2, [r3, #116]	; 0x74

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_RESPONSE_SEND, ip_ptr, sender_ip_address, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the ARP message type to ARP response.  */
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 8005d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	041b      	lsls	r3, r3, #16
 8005d24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d26:	3204      	adds	r2, #4
 8005d28:	f043 0302 	orr.w	r3, r3, #2
 8005d2c:	6013      	str	r3, [r2, #0]


        /* Now fill in the new source and destination information for the ARP response.  */
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw >> 16);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8005d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d40:	3308      	adds	r3, #8
 8005d42:	430a      	orrs	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address >> 16);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8005d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d58:	330c      	adds	r3, #12
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	0419      	lsls	r1, r3, #16
 8005d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d68:	3310      	adds	r3, #16
 8005d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	601a      	str	r2, [r3, #0]
        *(message_ptr + 5) =  (ULONG)sender_physical_lsw;
 8005d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d72:	3314      	adds	r3, #20
 8005d74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d76:	601a      	str	r2, [r3, #0]
        *(message_ptr + 6) =  (ULONG)sender_ip_address;
 8005d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d7a:	3318      	adds	r3, #24
 8005d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d7e:	601a      	str	r2, [r3, #0]

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the ARP message.  */
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d82:	3304      	adds	r3, #4
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d88:	3304      	adds	r3, #4
 8005d8a:	ba12      	rev	r2, r2
 8005d8c:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d90:	3308      	adds	r3, #8
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d96:	3308      	adds	r3, #8
 8005d98:	ba12      	rev	r2, r2
 8005d9a:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d9e:	330c      	adds	r3, #12
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da4:	330c      	adds	r3, #12
 8005da6:	ba12      	rev	r2, r2
 8005da8:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dac:	3310      	adds	r3, #16
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db2:	3310      	adds	r3, #16
 8005db4:	ba12      	rev	r2, r2
 8005db6:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8005db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dba:	3314      	adds	r3, #20
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc0:	3314      	adds	r3, #20
 8005dc2:	ba12      	rev	r2, r2
 8005dc4:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc8:	3318      	adds	r3, #24
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dce:	3318      	adds	r3, #24
 8005dd0:	ba12      	rev	r2, r2
 8005dd2:	601a      	str	r2, [r3, #0]

        /* Make sure the packet length is set properly.  */
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	221c      	movs	r2, #28
 8005dd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup the append pointer, since the received ARP packet can be padded
           with unnecessary bytes.  */
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f103 021c 	add.w	r2, r3, #28
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	60da      	str	r2, [r3, #12]

        /* Send the ARP request to the driver.  */
        driver_request.nx_ip_driver_ptr =      ip_ptr;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 8005dea:	2306      	movs	r3, #6
 8005dec:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet =   packet_ptr;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_physical_address_msw =  sender_physical_msw;
 8005df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df4:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  sender_physical_lsw;
 8005df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df8:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	627b      	str	r3, [r7, #36]	; 0x24

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_ARP_RESPONSE_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* No need to update interface.  When responding to an ARP request, use the same interface where the request was received. */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e06:	f107 0208 	add.w	r2, r7, #8
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	4798      	blx	r3

        /* Set the consumed as NX_TRUE, do not need to release the packet.  */
        consumed = NX_TRUE;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005e14:	e00d      	b.n	8005e32 <_nx_arp_packet_receive+0x334>
        /* We have a response to a previous ARP request or Gratuitous ARP from another network entity.  */

#ifndef NX_DISABLE_ARP_INFO

        /* Check for the message type to see which counter to increment.  */
        if (message_type == NX_ARP_OPTION_REQUEST)
 8005e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d105      	bne.n	8005e28 <_nx_arp_packet_receive+0x32a>
        {

            /* Increment the ARP requests received count.  */
            ip_ptr -> nx_ip_arp_requests_received++;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	671a      	str	r2, [r3, #112]	; 0x70
 8005e26:	e004      	b.n	8005e32 <_nx_arp_packet_receive+0x334>
        }
        else
        {

            /* Increment the ARP responses received count.  */
            ip_ptr -> nx_ip_arp_responses_received++;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Now we need to search through the active ARP list for the IP address
       to see if there is a matching entry.  */

    /* Calculate the hash index for the sender IP address.  */
    index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	0a1a      	lsrs	r2, r3, #8
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	4413      	add	r3, r2
 8005e3a:	f003 031f 	and.w	r3, r3, #31
 8005e3e:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup the first ARP entry.  */
    arp_ptr = NX_NULL;
 8005e40:	2300      	movs	r3, #0
 8005e42:	647b      	str	r3, [r7, #68]	; 0x44

    /* Ignore anything from any ARP packet with a zero sender IP address. */
    if (sender_ip_address != 0)
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d03a      	beq.n	8005ec0 <_nx_arp_packet_receive+0x3c2>
    {
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ROUTE_TABLE_MASK);
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	0a1a      	lsrs	r2, r3, #8
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	4413      	add	r3, r2
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the first ARP entry.  */
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e5c:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e64:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Loop to look for an ARP match.  */
    while (arp_ptr)
 8005e66:	e02b      	b.n	8005ec0 <_nx_arp_packet_receive+0x3c2>
    {

        /* Check for an IP match.  */
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 8005e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d117      	bne.n	8005ea2 <_nx_arp_packet_receive+0x3a4>
                }
            }
#endif /* NX_ENABLE_ARP_MAC_CHANGE_NOTIFICATION */

            /* No need to update the static ARP entry. */
            if (arp_ptr -> nx_arp_route_static)
 8005e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d126      	bne.n	8005ec8 <_nx_arp_packet_receive+0x3ca>
            {
                break;
            }

            /* Save the physical address found in this ARP response.  */
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8005e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e7e:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8005e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e84:	629a      	str	r2, [r3, #40]	; 0x28

            /* Set the update rate to the expiration rate since we now have an ARP
               response.  */
            arp_ptr -> nx_arp_entry_next_update =  NX_ARP_EXPIRATION_RATE;
 8005e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e88:	2200      	movs	r2, #0
 8005e8a:	605a      	str	r2, [r3, #4]

            /* Reset the retry counter for this ARP entry.  */
            arp_ptr -> nx_arp_retries =  0;
 8005e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e8e:	2200      	movs	r2, #0
 8005e90:	609a      	str	r2, [r3, #8]

            /* Set the interface attached to this packet. */
            arp_ptr -> nx_arp_ip_interface = interface_ptr;
 8005e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e96:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Call queue send function to send the packet queued up.  */
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 8005e98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fa2c 	bl	80062f8 <_nx_arp_queue_send>

            /* Yes, we found a match.  Get out of the loop!  */
            break;
 8005ea0:	e013      	b.n	8005eca <_nx_arp_packet_receive+0x3cc>
        }

        /* Move to the next active ARP entry.  */
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 8005ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	647b      	str	r3, [r7, #68]	; 0x44

        /* Determine if we are at the end of the ARP list.  */
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005eac:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d102      	bne.n	8005ec0 <_nx_arp_packet_receive+0x3c2>
        {

            /* Clear the ARP pointer.  */
            arp_ptr =  NX_NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 8005ebe:	e004      	b.n	8005eca <_nx_arp_packet_receive+0x3cc>
    while (arp_ptr)
 8005ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1d0      	bne.n	8005e68 <_nx_arp_packet_receive+0x36a>
 8005ec6:	e000      	b.n	8005eca <_nx_arp_packet_receive+0x3cc>
                break;
 8005ec8:	bf00      	nop
        }
    }

    /* Determine if we have a packet to release. */
    if (consumed == NX_FALSE)
 8005eca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d102      	bne.n	8005ed8 <_nx_arp_packet_receive+0x3da>
    {
        _nx_packet_release(packet_ptr);
 8005ed2:	6838      	ldr	r0, [r7, #0]
 8005ed4:	f003 f986 	bl	80091e4 <_nx_packet_release>
    }

#ifndef NX_DISABLE_ARP_AUTO_ENTRY

    /* Determine if anything was found.  Ignore ARP messages with a zero IP sender address.   */
    if ((arp_ptr == NX_NULL) && (sender_ip_address != 0))
 8005ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d132      	bne.n	8005f44 <_nx_arp_packet_receive+0x446>
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d02f      	beq.n	8005f44 <_nx_arp_packet_receive+0x446>
    {

        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	0a1a      	lsrs	r2, r3, #8
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	4413      	add	r3, r2
 8005eec:	f003 031f 	and.w	r3, r3, #31
 8005ef0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Allocate a new ARP entry in advance of the need to send to the IP
           address.  */
        if (((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)) == NX_SUCCESS)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 8005ef8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005efa:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005efe:	0092      	lsls	r2, r2, #2
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4411      	add	r1, r2
 8005f04:	2200      	movs	r2, #0
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d119      	bne.n	8005f44 <_nx_arp_packet_receive+0x446>
        {

            /* Setup a pointer to the new ARP entry.  */
            arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f14:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	647b      	str	r3, [r7, #68]	; 0x44

            /* Setup the IP address and clear the physical mapping.  */
            arp_ptr -> nx_arp_ip_address =            sender_ip_address;
 8005f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f24:	621a      	str	r2, [r3, #32]
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8005f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f2a:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8005f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f30:	629a      	str	r2, [r3, #40]	; 0x28
            arp_ptr -> nx_arp_entry_next_update =     NX_ARP_EXPIRATION_RATE;
 8005f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f34:	2200      	movs	r2, #0
 8005f36:	605a      	str	r2, [r3, #4]
            arp_ptr -> nx_arp_retries =               0;
 8005f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	609a      	str	r2, [r3, #8]
            arp_ptr -> nx_arp_ip_interface         =  interface_ptr;
 8005f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f42:	62da      	str	r2, [r3, #44]	; 0x2c
        }
    }
#endif /* NX_DISABLE_ARP_AUTO_ENTRY */
}
 8005f44:	3754      	adds	r7, #84	; 0x54
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd90      	pop	{r4, r7, pc}
	...

08005f4c <_nx_arp_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_send(NX_IP *ip_ptr, ULONG destination_ip, NX_INTERFACE *nx_interface)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08e      	sub	sp, #56	; 0x38
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
NX_PACKET   *request_ptr;
ULONG       *message_ptr;
NX_IP_DRIVER driver_request;

    /* nx_interface must not be NX_NULL. */
    NX_ASSERT(nx_interface != NX_NULL);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d104      	bne.n	8005f68 <_nx_arp_packet_send+0x1c>
 8005f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f62:	f007 f9ad 	bl	800d2c0 <_tx_thread_sleep>
 8005f66:	e7fa      	b.n	8005f5e <_nx_arp_packet_send+0x12>
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 8005f6e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005f72:	2300      	movs	r3, #0
 8005f74:	222c      	movs	r2, #44	; 0x2c
 8005f76:	f002 fdd3 	bl	8008b20 <_nx_packet_allocate>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f040 8081 	bne.w	8006084 <_nx_arp_packet_send+0x138>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Stamp the packet with the outgoing interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "request_ptr" was initialized in _nx_packet_allocate. */
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef NX_DISABLE_ARP_INFO
    /* Increment the ARP requests sent count.  */
    ip_ptr -> nx_ip_arp_requests_sent++;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	66da      	str	r2, [r3, #108]	; 0x6c
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_REQUEST_SEND, ip_ptr, destination_ip, request_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Build the ARP request packet.  */

    /* Setup the size of the ARP message.  */
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	221c      	movs	r2, #28
 8005f96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the prepend pointer.  */
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	3a1c      	subs	r2, #28
 8005fa0:	609a      	str	r2, [r3, #8]

    /* Setup the pointer to the message area.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)request_ptr -> nx_packet_prepend_ptr;
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Write the Hardware type into the message.  */
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 8005fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005faa:	f44f 3284 	mov.w	r2, #67584	; 0x10800
 8005fae:	601a      	str	r2, [r3, #0]
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4a35      	ldr	r2, [pc, #212]	; (800608c <_nx_arp_packet_send+0x140>)
 8005fb6:	601a      	str	r2, [r3, #0]
        NX_ARP_OPTION_REQUEST;

    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_physical_address_lsw >> 16);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8005fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc6:	3308      	adds	r3, #8
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	601a      	str	r2, [r3, #0]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_ip_address >> 16);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fda:	330c      	adds	r3, #12
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	601a      	str	r2, [r3, #0]
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	695a      	ldr	r2, [r3, #20]
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe6:	3310      	adds	r3, #16
 8005fe8:	0412      	lsls	r2, r2, #16
 8005fea:	601a      	str	r2, [r3, #0]
    *(message_ptr + 5) =  (ULONG)0;
 8005fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fee:	3314      	adds	r3, #20
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
    *(message_ptr + 6) =  (ULONG)destination_ip;
 8005ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff6:	3318      	adds	r3, #24
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	601a      	str	r2, [r3, #0]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 8005ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	ba1a      	rev	r2, r3
 8006002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006004:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8006006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006008:	3304      	adds	r3, #4
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	3304      	adds	r3, #4
 8006010:	ba12      	rev	r2, r2
 8006012:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	3308      	adds	r3, #8
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	3308      	adds	r3, #8
 800601e:	ba12      	rev	r2, r2
 8006020:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8006022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006024:	330c      	adds	r3, #12
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602a:	330c      	adds	r3, #12
 800602c:	ba12      	rev	r2, r2
 800602e:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8006030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006032:	3310      	adds	r3, #16
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006038:	3310      	adds	r3, #16
 800603a:	ba12      	rev	r2, r2
 800603c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800603e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006040:	3314      	adds	r3, #20
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006046:	3314      	adds	r3, #20
 8006048:	ba12      	rev	r2, r2
 800604a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 800604c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604e:	3318      	adds	r3, #24
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006054:	3318      	adds	r3, #24
 8006056:	ba12      	rev	r2, r2
 8006058:	601a      	str	r2, [r3, #0]

    /* Set up the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 800605e:	2305      	movs	r3, #5
 8006060:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_packet =                request_ptr;
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8006066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800606a:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 800606c:	f04f 33ff 	mov.w	r3, #4294967295
 8006070:	61fb      	str	r3, [r7, #28]
    driver_request.nx_ip_driver_interface            =  nx_interface;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Send the ARP request to the driver.  */
    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607a:	f107 0210 	add.w	r2, r7, #16
 800607e:	4610      	mov	r0, r2
 8006080:	4798      	blx	r3
 8006082:	e000      	b.n	8006086 <_nx_arp_packet_send+0x13a>
                return;
 8006084:	bf00      	nop
}
 8006086:	3738      	adds	r7, #56	; 0x38
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	06040001 	.word	0x06040001

08006090 <_nx_arp_periodic_update>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_periodic_update(NX_IP *ip_ptr)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	; 0x28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Pickup pointer to ARP dynamic list.  */
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 800609e:	623b      	str	r3, [r7, #32]

    /* Loop through the active ARP entries to see if they need updating.  */
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 80060a0:	2300      	movs	r3, #0
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
 80060a4:	e0af      	b.n	8006206 <_nx_arp_periodic_update+0x176>
    {

        /* Check this ARP entry to see if it need updating.  */
        if (arp_entry -> nx_arp_entry_next_update)
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 80a5 	beq.w	80061fa <_nx_arp_periodic_update+0x16a>
        {

            /* Decrement the next update field.  */
            arp_entry -> nx_arp_entry_next_update--;
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	1e5a      	subs	r2, r3, #1
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	605a      	str	r2, [r3, #4]

            /* Determine if an ARP expiration is present.  */
            if (!arp_entry -> nx_arp_entry_next_update)
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f040 809b 	bne.w	80061fa <_nx_arp_periodic_update+0x16a>
            {

                /* Yes, an ARP expiration is present.   */

                /* Determine if the retry counter has been exceeded.  */
                if (arp_entry -> nx_arp_retries == NX_ARP_MAXIMUM_RETRIES)
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	2b12      	cmp	r3, #18
 80060ca:	f040 8086 	bne.w	80061da <_nx_arp_periodic_update+0x14a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80060ce:	f3ef 8310 	mrs	r3, PRIMASK
 80060d2:	613b      	str	r3, [r7, #16]
    return(posture);
 80060d4:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80060d6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80060d8:	b672      	cpsid	i
    return(int_posture);
 80060da:	68fb      	ldr	r3, [r7, #12]

                    /* The number of retries has been exceeded. The entry is removed
                       from the active list and any queued packet is released.  */

                    /* Disable interrupts.  */
                    TX_DISABLE
 80060dc:	61bb      	str	r3, [r7, #24]

                    /* This ARP entry has expired, remove it from the active ARP list.  Check to make
                       sure it is still active.  */
                    if (arp_entry -> nx_arp_active_list_head)
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d028      	beq.n	8006138 <_nx_arp_periodic_update+0xa8>
                    {

                        /* Determine if this is the only ARP entry on the list.  */
                        if (arp_entry == arp_entry -> nx_arp_active_next)
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	6a3a      	ldr	r2, [r7, #32]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d104      	bne.n	80060fa <_nx_arp_periodic_update+0x6a>
                        {

                            /* Remove the entry from the list.  */
                            *(arp_entry -> nx_arp_active_list_head) =  NX_NULL;
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	e014      	b.n	8006124 <_nx_arp_periodic_update+0x94>
                        {

                            /* Remove the entry from a list of more than one entry.  */

                            /* Update the list head pointer.  */
                            if (*(arp_entry -> nx_arp_active_list_head) == arp_entry)
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6a3a      	ldr	r2, [r7, #32]
 8006102:	429a      	cmp	r2, r3
 8006104:	d104      	bne.n	8006110 <_nx_arp_periodic_update+0x80>
                            {
                                *(arp_entry -> nx_arp_active_list_head) =  arp_entry -> nx_arp_active_next;
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	6a3a      	ldr	r2, [r7, #32]
 800610c:	6952      	ldr	r2, [r2, #20]
 800610e:	601a      	str	r2, [r3, #0]
                            }

                            /* Update the links of the adjacent ARP entries.  */
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	695b      	ldr	r3, [r3, #20]
                                arp_entry -> nx_arp_active_previous;
 8006114:	6a3a      	ldr	r2, [r7, #32]
 8006116:	6992      	ldr	r2, [r2, #24]
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8006118:	619a      	str	r2, [r3, #24]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	699b      	ldr	r3, [r3, #24]
                                arp_entry -> nx_arp_active_next;
 800611e:	6a3a      	ldr	r2, [r7, #32]
 8006120:	6952      	ldr	r2, [r2, #20]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 8006122:	615a      	str	r2, [r3, #20]
                        }

                        /* Decrease the number of active ARP entries.  */
                        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 800612a:	1e5a      	subs	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

                        /* Clear the active head pointer.  */
                        arp_entry -> nx_arp_active_list_head =  NX_NULL;
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	2200      	movs	r2, #0
 8006136:	61da      	str	r2, [r3, #28]
                    }

                    /* Determine if this is the only ARP entry on the dynamic list.  */
                    if (arp_entry != arp_entry -> nx_arp_pool_next)
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	6a3a      	ldr	r2, [r7, #32]
 800613e:	429a      	cmp	r2, r3
 8006140:	d02a      	beq.n	8006198 <_nx_arp_periodic_update+0x108>
                        /* No. Place the ARP entry at the end of the dynamic ARP pool, which is where new
                           ARP requests are allocated from.  */

                        /* Remove the entry from a list of more than one entry.  */
                        /* Update the links of the adjacent ARP dynamic pool entries.  */
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	68db      	ldr	r3, [r3, #12]
                            arp_entry -> nx_arp_pool_previous;
 8006146:	6a3a      	ldr	r2, [r7, #32]
 8006148:	6912      	ldr	r2, [r2, #16]
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 800614a:	611a      	str	r2, [r3, #16]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	691b      	ldr	r3, [r3, #16]
                            arp_entry -> nx_arp_pool_next;
 8006150:	6a3a      	ldr	r2, [r7, #32]
 8006152:	68d2      	ldr	r2, [r2, #12]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8006154:	60da      	str	r2, [r3, #12]

                        /* Update the list head pointer.  */
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 800615c:	6a3a      	ldr	r2, [r7, #32]
 800615e:	429a      	cmp	r2, r3
 8006160:	d104      	bne.n	800616c <_nx_arp_periodic_update+0xdc>
                        {
                            ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry -> nx_arp_pool_next;
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
                        }


                        /* Add ARP entry to the end of the list.  */
                        arp_entry -> nx_arp_pool_next =
                            ip_ptr -> nx_ip_arp_dynamic_list;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 26d4 	ldr.w	r2, [r3, #1748]	; 0x6d4
                        arp_entry -> nx_arp_pool_next =
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	60da      	str	r2, [r3, #12]
                        arp_entry -> nx_arp_pool_previous =
                            (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 800617c:	691a      	ldr	r2, [r3, #16]
                        arp_entry -> nx_arp_pool_previous =
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	611a      	str	r2, [r3, #16]
                        ((ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	6a3a      	ldr	r2, [r7, #32]
 800618c:	60da      	str	r2, [r3, #12]
                            arp_entry;
                        (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous =   arp_entry;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8006194:	6a3a      	ldr	r2, [r7, #32]
 8006196:	611a      	str	r2, [r3, #16]
                    }

                    /* Pickup the queued packets head pointer.  */
                    next_packet_ptr =  arp_entry -> nx_arp_packets_waiting;
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619c:	61fb      	str	r3, [r7, #28]

                    /* Clear the queued packets head pointer.  */
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	2200      	movs	r2, #0
 80061a2:	631a      	str	r2, [r3, #48]	; 0x30
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f383 8810 	msr	PRIMASK, r3
}
 80061ae:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Loop to remove all queued packets.  */
                    while (next_packet_ptr)
 80061b0:	e00f      	b.n	80061d2 <_nx_arp_periodic_update+0x142>
                    {

                        /* Pickup the packet pointer at the head of the queue.  */
                        packet_ptr =  next_packet_ptr;
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	617b      	str	r3, [r7, #20]

                        /* Move to the next packet in the queue.  */
                        next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	61fb      	str	r3, [r7, #28]

                        /* Clear the next packet queue pointer.  */
                        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	2200      	movs	r2, #0
 80061c0:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                        /* Release the packet that was queued for the expired ARP entry.  */
                        _nx_packet_transmit_release(packet_ptr);
 80061cc:	6978      	ldr	r0, [r7, #20]
 80061ce:	f003 f8c1 	bl	8009354 <_nx_packet_transmit_release>
                    while (next_packet_ptr)
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1ec      	bne.n	80061b2 <_nx_arp_periodic_update+0x122>
 80061d8:	e00f      	b.n	80061fa <_nx_arp_periodic_update+0x16a>
                {

                    /* We haven't yet had a response to this ARP request so send it again!  */

                    /* Increment the ARP retry counter.  */
                    arp_entry -> nx_arp_retries++;
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	609a      	str	r2, [r3, #8]

                    /* Setup the ARP update rate to the maximum value again.  */
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	220a      	movs	r2, #10
 80061e8:	605a      	str	r2, [r3, #4]

                    /* Send the ARP request out.  */
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	6a19      	ldr	r1, [r3, #32]
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	461a      	mov	r2, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff fea9 	bl	8005f4c <_nx_arp_packet_send>
                }
            }
        }

        /* Move to the next ARP entry.  */
        arp_entry =  arp_entry -> nx_arp_pool_next;
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	623b      	str	r3, [r7, #32]
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	3301      	adds	r3, #1
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 800620c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620e:	429a      	cmp	r2, r3
 8006210:	f4ff af49 	bcc.w	80060a6 <_nx_arp_periodic_update+0x16>
    }


    /* Reduce the defend timeout of interfaces.  */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8006214:	2300      	movs	r3, #0
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
 8006218:	e033      	b.n	8006282 <_nx_arp_periodic_update+0x1f2>
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_FALSE)
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800621e:	4613      	mov	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	440b      	add	r3, r1
 8006228:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d021      	beq.n	8006276 <_nx_arp_periodic_update+0x1e6>
        {
            continue;
        }

        if (ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout == 0)
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	440b      	add	r3, r1
 8006240:	f203 7364 	addw	r3, r3, #1892	; 0x764
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d017      	beq.n	800627a <_nx_arp_periodic_update+0x1ea>
        {
            continue;
        }

        ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout--;
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	440b      	add	r3, r1
 8006258:	f203 7364 	addw	r3, r3, #1892	; 0x764
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	1e59      	subs	r1, r3, #1
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006264:	4613      	mov	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	4403      	add	r3, r0
 800626e:	f203 7364 	addw	r3, r3, #1892	; 0x764
 8006272:	6019      	str	r1, [r3, #0]
 8006274:	e002      	b.n	800627c <_nx_arp_periodic_update+0x1ec>
            continue;
 8006276:	bf00      	nop
 8006278:	e000      	b.n	800627c <_nx_arp_periodic_update+0x1ec>
            continue;
 800627a:	bf00      	nop
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	3301      	adds	r3, #1
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0c8      	beq.n	800621a <_nx_arp_periodic_update+0x18a>
    }
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	3728      	adds	r7, #40	; 0x28
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <_nx_arp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_process(NX_IP *ip_ptr)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b088      	sub	sp, #32
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]

NX_PACKET *packet_ptr;


    /* Loop to process all ARP deferred packet requests.  */
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 800629a:	e023      	b.n	80062e4 <_nx_arp_queue_process+0x52>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800629c:	f3ef 8310 	mrs	r3, PRIMASK
 80062a0:	617b      	str	r3, [r7, #20]
    return(posture);
 80062a2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80062a4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80062a6:	b672      	cpsid	i
    return(int_posture);
 80062a8:	693b      	ldr	r3, [r7, #16]
    {

        /* Remove the first packet and process it!  */

        /* Disable interrupts.  */
        TX_DISABLE
 80062aa:	61fb      	str	r3, [r7, #28]

        /* Pickup the first packet.  */
        packet_ptr =  ip_ptr -> nx_ip_arp_deferred_received_packet_head;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 80062b2:	61bb      	str	r3, [r7, #24]

        /* Move the head pointer to the next packet.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	69da      	ldr	r2, [r3, #28]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc

        /* Check for end of ARP deferred processing queue.  */
        if (ip_ptr -> nx_ip_arp_deferred_received_packet_head == NX_NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d103      	bne.n	80062d0 <_nx_arp_queue_process+0x3e>
        {

            /* Yes, the ARP deferred queue is empty.  Set the tail pointer to NULL.  */
            ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  NX_NULL;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f383 8810 	msr	PRIMASK, r3
}
 80062da:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual ARP packet receive function.  */
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 80062dc:	69b9      	ldr	r1, [r7, #24]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff fc0d 	bl	8005afe <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1d6      	bne.n	800629c <_nx_arp_queue_process+0xa>
    }
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	3720      	adds	r7, #32
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <_nx_arp_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_send(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b090      	sub	sp, #64	; 0x40
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
NX_PACKET   *queued_list_head;
NX_PACKET   *packet_ptr;
NX_IP_DRIVER driver_request;

    /* Initialize the queued list head to NULL.  */
    queued_list_head =  NX_NULL;
 8006302:	2300      	movs	r3, #0
 8006304:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006306:	f3ef 8310 	mrs	r3, PRIMASK
 800630a:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8006310:	b672      	cpsid	i
    return(int_posture);
 8006312:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Determine if this ARP entry has a packet queued up for sending.  */

    /* Disable interrupts before checking.  */
    TX_DISABLE
 8006314:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Look at the ARP packet queue pointer.  */
    if (arp_ptr -> nx_arp_packets_waiting)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631a:	2b00      	cmp	r3, #0
 800631c:	d005      	beq.n	800632a <_nx_arp_queue_send+0x32>
    {

        /* Pickup the packet pointer and clear the ARP queue pointer.  */
        queued_list_head =  arp_ptr -> nx_arp_packets_waiting;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	63fb      	str	r3, [r7, #60]	; 0x3c
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2200      	movs	r2, #0
 8006328:	631a      	str	r2, [r3, #48]	; 0x30
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	f383 8810 	msr	PRIMASK, r3
}
 8006334:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Are there any packets queued to send?  */
    while (queued_list_head)
 8006336:	e04c      	b.n	80063d2 <_nx_arp_queue_send+0xda>
    {

        /* Pickup the first entry on the list.  */
        packet_ptr =  queued_list_head;
 8006338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Move to the next entry on the ARP packet queue.  */
        queued_list_head =  queued_list_head -> nx_packet_queue_next;
 800633c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the packet's queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8006342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006344:	2200      	movs	r2, #0
 8006346:	61da      	str	r2, [r3, #28]

        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Build the driver request packet.  */
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635a:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 8006360:	2300      	movs	r3, #0
 8006362:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet               =  packet_ptr;
 8006364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006366:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8006368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 800636e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	429a      	cmp	r2, r3
 800637a:	d915      	bls.n	80063a8 <_nx_arp_queue_send+0xb0>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Fragmentation is needed, call the fragment routine if available. */
            if (ip_ptr -> nx_ip_fragment_processing)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006382:	2b00      	cmp	r3, #0
 8006384:	d007      	beq.n	8006396 <_nx_arp_queue_send+0x9e>
            {

                /* Call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800638c:	f107 0208 	add.w	r2, r7, #8
 8006390:	4610      	mov	r0, r2
 8006392:	4798      	blx	r3
 8006394:	e01d      	b.n	80063d2 <_nx_arp_queue_send+0xda>
#endif /* NX_DISABLE_FRAGMENTATION */

#ifndef NX_DISABLE_IP_INFO

                /* Increment the IP send packets dropped count.  */
                ip_ptr -> nx_ip_send_packets_dropped++;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
 80063a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80063a2:	f002 ffd7 	bl	8009354 <_nx_packet_transmit_release>
 80063a6:	e014      	b.n	80063d2 <_nx_arp_queue_send+0xda>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	4413      	add	r3, r2
 80063bc:	f1a3 0214 	sub.w	r2, r3, #20
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	619a      	str	r2, [r3, #24]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_PACKET_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 80063c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ca:	f107 0208 	add.w	r2, r7, #8
 80063ce:	4610      	mov	r0, r2
 80063d0:	4798      	blx	r3
    while (queued_list_head)
 80063d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1af      	bne.n	8006338 <_nx_arp_queue_send+0x40>
        }
    }
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	3740      	adds	r7, #64	; 0x40
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <_nx_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_icmp_enable(NX_IP *ip_ptr)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ICMP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_ICMP_EVENTS, 0, 0);

    /* Setup the ICMP packet queue processing routine.  */
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a09      	ldr	r2, [pc, #36]	; (8006414 <_nx_icmp_enable+0x30>)
 80063f0:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c

    /* Setup the ICMP packet receiving routine, thereby enabling ICMP traffic.  */
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a08      	ldr	r2, [pc, #32]	; (8006418 <_nx_icmp_enable+0x34>)
 80063f8:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368

    /* Setup the ICMPv4 packet process routine */
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a07      	ldr	r2, [pc, #28]	; (800641c <_nx_icmp_enable+0x38>)
 8006400:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370

    /* Return a successful status!  */
    return(NX_SUCCESS);
 8006404:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	0800651d 	.word	0x0800651d
 8006418:	0800645d 	.word	0x0800645d
 800641c:	0800657b 	.word	0x0800657b

08006420 <_nx_icmp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* FEATURE_NX_IPV6 not defined */
    if (ip_ptr -> nx_ip_icmpv4_packet_process)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 8006430:	2b00      	cmp	r3, #0
 8006432:	d006      	beq.n	8006442 <_nx_icmp_packet_process+0x22>
    {
        ip_ptr -> nx_ip_icmpv4_packet_process(ip_ptr, packet_ptr);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
        return;
 8006440:	e009      	b.n	8006456 <_nx_icmp_packet_process+0x36>
    }

#ifndef NX_DISABLE_ICMP_INFO
    ip_ptr -> nx_ip_icmp_invalid_packets++;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

    _nx_packet_release(packet_ptr);
 8006450:	6838      	ldr	r0, [r7, #0]
 8006452:	f002 fec7 	bl	80091e4 <_nx_packet_release>
}
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <_nx_icmp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP total messages received counter.  */
    ip_ptr -> nx_ip_icmp_total_messages_received++;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_ICMP_HEADER))
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	2b07      	cmp	r3, #7
 800647a:	d80a      	bhi.n	8006492 <_nx_icmp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error.  */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800648a:	6838      	ldr	r0, [r7, #0]
 800648c:	f002 feaa 	bl	80091e4 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8006490:	e03c      	b.n	800650c <_nx_icmp_packet_receive+0xb0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006492:	f3ef 8305 	mrs	r3, IPSR
 8006496:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8006498:	69ba      	ldr	r2, [r7, #24]
        return;
    }
#endif /* NX_ENABLE_ICMP_ADDRESS_CHECK  */

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 800649a:	4b1e      	ldr	r3, [pc, #120]	; (8006514 <_nx_icmp_packet_receive+0xb8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4313      	orrs	r3, r2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d106      	bne.n	80064b2 <_nx_icmp_packet_receive+0x56>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 80064aa:	4b1b      	ldr	r3, [pc, #108]	; (8006518 <_nx_icmp_packet_receive+0xbc>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d028      	beq.n	8006504 <_nx_icmp_packet_receive+0xa8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80064b2:	f3ef 8310 	mrs	r3, PRIMASK
 80064b6:	617b      	str	r3, [r7, #20]
    return(posture);
 80064b8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80064ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80064bc:	b672      	cpsid	i
    return(int_posture);
 80064be:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback. Just place the message at the
           end of the ICMP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 80064c0:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the ICMP message queue.  */
        if (ip_ptr -> nx_ip_icmp_queue_head)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <_nx_icmp_packet_receive+0x7c>
        {

            /* Link the current packet to the list head.  */
            packet_ptr -> nx_packet_queue_next =  ip_ptr -> nx_ip_icmp_queue_head;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 2374 	ldr.w	r2, [r3, #884]	; 0x374
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	61da      	str	r2, [r3, #28]
 80064d6:	e002      	b.n	80064de <_nx_icmp_packet_receive+0x82>
        }
        else
        {

            /* Empty queue, add to the head of the ICMP message queue.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2200      	movs	r2, #0
 80064dc:	61da      	str	r2, [r3, #28]
        }

        /* Update the queue head pointer.  */
        ip_ptr -> nx_ip_icmp_queue_head =  packet_ptr;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f383 8810 	msr	PRIMASK, r3
}
 80064f0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the ICMP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ICMP_EVENT, TX_OR);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80064f8:	2200      	movs	r2, #0
 80064fa:	2104      	movs	r1, #4
 80064fc:	4618      	mov	r0, r3
 80064fe:	f005 fbd3 	bl	800bca8 <_tx_event_flags_set>
 8006502:	e003      	b.n	800650c <_nx_icmp_packet_receive+0xb0>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the ICMP processing directly.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff ff8a 	bl	8006420 <_nx_icmp_packet_process>
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* NX_DISABLE_IPV4 */
}
 800650c:	3720      	adds	r7, #32
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000088 	.word	0x20000088
 8006518:	20014884 	.word	0x20014884

0800651c <_nx_icmp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_queue_process(NX_IP *ip_ptr)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006524:	f3ef 8310 	mrs	r3, PRIMASK
 8006528:	60fb      	str	r3, [r7, #12]
    return(posture);
 800652a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800652c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800652e:	b672      	cpsid	i
    return(int_posture);
 8006530:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 8006532:	61bb      	str	r3, [r7, #24]

    /* Remove the ICMP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_icmp_queue_head;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800653a:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_icmp_queue_head =  NX_NULL;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f383 8810 	msr	PRIMASK, r3
}
 800654e:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire ICMP message queue and process packets
       one by one.  */
    while (queue_head)
 8006550:	e00b      	b.n	800656a <_nx_icmp_queue_process+0x4e>
    {

        /* Pickup the first queued ICMP message and remove it from the
           ICMP queue.  */
        packet_ptr =  queue_head;
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2200      	movs	r2, #0
 8006560:	61da      	str	r2, [r3, #28]

        /* Process the packet.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8006562:	6979      	ldr	r1, [r7, #20]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff ff5b 	bl	8006420 <_nx_icmp_packet_process>
    while (queue_head)
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1f0      	bne.n	8006552 <_nx_icmp_queue_process+0x36>
    }
}
 8006570:	bf00      	nop
 8006572:	bf00      	nop
 8006574:	3720      	adds	r7, #32
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <_nx_icmpv4_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b088      	sub	sp, #32
 800657e:	af02      	add	r7, sp, #8
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
USHORT            checksum;
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT              compute_checksum = 1;
 8006584:	2301      	movs	r3, #1
 8006586:	617b      	str	r3, [r7, #20]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	613b      	str	r3, [r7, #16]
#ifdef NX_DISABLE_ICMPV4_RX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_RX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_RX_CHECKSUM)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <_nx_icmpv4_packet_process+0x26>
    {
        compute_checksum = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	617b      	str	r3, [r7, #20]
    {
        compute_checksum = 1;
    }
#endif
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d023      	beq.n	80065ee <_nx_icmpv4_packet_process+0x74>
#endif /* defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Calculate the ICMP message checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
                                            (UINT)packet_ptr -> nx_packet_length,
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 80065aa:	2300      	movs	r3, #0
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	2300      	movs	r3, #0
 80065b0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80065b4:	6838      	ldr	r0, [r7, #0]
 80065b6:	f000 fb14 	bl	8006be2 <_nx_ip_checksum_compute>
 80065ba:	4603      	mov	r3, r0
 80065bc:	81fb      	strh	r3, [r7, #14]
                                            /* ICMPv4 checksum does not include
                                               src/dest addresses */
                                            NX_NULL, NX_NULL);

        checksum =  ((USHORT) ~checksum) & NX_LOWER_16_MASK;
 80065be:	89fb      	ldrh	r3, [r7, #14]
 80065c0:	43db      	mvns	r3, r3
 80065c2:	81fb      	strh	r3, [r7, #14]

        /* Determine if the checksum is valid.  */
        if (checksum)
 80065c4:	89fb      	ldrh	r3, [r7, #14]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d011      	beq.n	80065ee <_nx_icmpv4_packet_process+0x74>
        {

#ifndef NX_DISABLE_ICMP_INFO

            /* Increment the ICMP invalid packet error.  */
            ip_ptr -> nx_ip_icmp_invalid_packets++;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

            /* Increment the ICMP checksum error count.  */
            ip_ptr -> nx_ip_icmp_checksum_errors++;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
#endif

            /* Nope, the checksum is invalid.  Toss this ICMP packet out.  */
            _nx_packet_release(packet_ptr);
 80065e6:	6838      	ldr	r0, [r7, #0]
 80065e8:	f002 fdfc 	bl	80091e4 <_nx_packet_release>
            return;
 80065ec:	e01b      	b.n	8006626 <_nx_icmpv4_packet_process+0xac>
        }
    }

    /* Determine the message type and call the appropriate handler.  */
    if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REPLY_TYPE)
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d104      	bne.n	8006600 <_nx_icmpv4_packet_process+0x86>
    {
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f817 	bl	800662c <_nx_icmpv4_process_echo_reply>
 80065fe:	e012      	b.n	8006626 <_nx_icmpv4_packet_process+0xac>
    }
    else if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REQUEST_TYPE)
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d104      	bne.n	8006612 <_nx_icmpv4_packet_process+0x98>
    {
        _nx_icmpv4_process_echo_request(ip_ptr, packet_ptr);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f8cc 	bl	80067a8 <_nx_icmpv4_process_echo_request>
 8006610:	e009      	b.n	8006626 <_nx_icmpv4_packet_process+0xac>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP unhandled message count.  */
        ip_ptr -> nx_ip_icmp_unhandled_messages++;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);
#endif /* TX_ENABLE_EVENT_TRACE  */

        /* Unhandled ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
 8006620:	6838      	ldr	r0, [r7, #0]
 8006622:	f002 fddf 	bl	80091e4 <_nx_packet_release>
    }
}
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <_nx_icmpv4_process_echo_reply>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_reply(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b090      	sub	sp, #64	; 0x40
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    echo_ptr =  (NX_ICMPV4_ECHO *)packet_ptr -> nx_packet_prepend_ptr;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	637b      	str	r3, [r7, #52]	; 0x34

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP responses received count.  */
    ip_ptr -> nx_ip_ping_responses_received++;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#endif

    /* Pickup sequence number.  */
    sequence_num = echo_ptr -> nx_icmpv4_echo_sequence_num;
 800664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664c:	88db      	ldrh	r3, [r3, #6]
 800664e:	867b      	strh	r3, [r7, #50]	; 0x32

    /* Convert to host byte order, if little endian taget. */
    NX_CHANGE_USHORT_ENDIAN(sequence_num);
 8006650:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006652:	ba5b      	rev16	r3, r3
 8006654:	867b      	strh	r3, [r7, #50]	; 0x32
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006656:	f3ef 8310 	mrs	r3, PRIMASK
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800665e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006660:	b672      	cpsid	i
    return(int_posture);
 8006662:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts.  */
    TX_DISABLE
 8006664:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup the head pointer and the suspended count.  */
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800666c:	63fb      	str	r3, [r7, #60]	; 0x3c
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006674:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8006676:	4b4b      	ldr	r3, [pc, #300]	; (80067a4 <_nx_icmpv4_process_echo_reply+0x178>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3301      	adds	r3, #1
 800667c:	4a49      	ldr	r2, [pc, #292]	; (80067a4 <_nx_icmpv4_process_echo_reply+0x178>)
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006686:	f383 8810 	msr	PRIMASK, r3
}
 800668a:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Search through the suspended threads waiting for a ECHO (ping) response
       in an attempt to find a matching sequence number.  */
    while (suspended--)
 800668c:	e05e      	b.n	800674c <_nx_icmpv4_process_echo_reply+0x120>
    {

        /* Determine if the sequence number matches a suspended thread.  */
        if ((USHORT)(thread_ptr ->  tx_thread_suspend_info) == sequence_num)
 800668e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006692:	b29b      	uxth	r3, r3
 8006694:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8006696:	429a      	cmp	r2, r3
 8006698:	d155      	bne.n	8006746 <_nx_icmpv4_process_echo_reply+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800669a:	f3ef 8310 	mrs	r3, PRIMASK
 800669e:	61fb      	str	r3, [r7, #28]
    return(posture);
 80066a0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80066a2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80066a4:	b672      	cpsid	i
    return(int_posture);
 80066a6:	69bb      	ldr	r3, [r7, #24]
        {

            /* Disable interrupts.  */
            TX_DISABLE
 80066a8:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80066aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d104      	bne.n	80066be <_nx_icmpv4_process_echo_reply+0x92>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  NX_NULL;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 80066bc:	e014      	b.n	80066e8 <_nx_icmpv4_process_echo_reply+0xbc>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d104      	bne.n	80066d4 <_nx_icmpv4_process_echo_reply+0xa8>
                {
                    ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80066ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
                }

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80066d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 80066d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066da:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80066dc:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80066de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 80066e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066e4:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80066e6:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066ee:	1e5a      	subs	r2, r3, #1
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80066f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f8:	2200      	movs	r2, #0
 80066fa:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80066fc:	4b29      	ldr	r3, [pc, #164]	; (80067a4 <_nx_icmpv4_process_echo_reply+0x178>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3301      	adds	r3, #1
 8006702:	4a28      	ldr	r2, [pc, #160]	; (80067a4 <_nx_icmpv4_process_echo_reply+0x178>)
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f383 8810 	msr	PRIMASK, r3
}
 8006710:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to remove the ICMP header that is still in front of
               the response message.  */
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006716:	f1a3 0208 	sub.w	r2, r3, #8
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f103 0208 	add.w	r2, r3, #8
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	609a      	str	r2, [r3, #8]

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800672a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	601a      	str	r2, [r3, #0]

            /* Clear packet pointer so we don't try to release it below.  */
            packet_ptr =  NX_NULL;
 8006732:	2300      	movs	r3, #0
 8006734:	603b      	str	r3, [r7, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8006736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006738:	2200      	movs	r2, #0
 800673a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800673e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006740:	f006 fe78 	bl	800d434 <_tx_thread_system_resume>

            /* Get out of the loop.  */
            break;
 8006744:	e007      	b.n	8006756 <_nx_icmpv4_process_echo_reply+0x12a>
        }
        else
        {
            /* Just move to the next suspended thread.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8006746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (suspended--)
 800674c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674e:	1e5a      	subs	r2, r3, #1
 8006750:	63ba      	str	r2, [r7, #56]	; 0x38
 8006752:	2b00      	cmp	r3, #0
 8006754:	d19b      	bne.n	800668e <_nx_icmpv4_process_echo_reply+0x62>
        }
    }

    /* Determine if no match was made and we just have to release the packet.  */
    if (packet_ptr)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <_nx_icmpv4_process_echo_reply+0x144>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

        /* Yes, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800676a:	6838      	ldr	r0, [r7, #0]
 800676c:	f002 fd3a 	bl	80091e4 <_nx_packet_release>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006770:	f3ef 8310 	mrs	r3, PRIMASK
 8006774:	60fb      	str	r3, [r7, #12]
    return(posture);
 8006776:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8006778:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800677a:	b672      	cpsid	i
    return(int_posture);
 800677c:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800677e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release preemption disable.  */
    _tx_thread_preempt_disable--;
 8006780:	4b08      	ldr	r3, [pc, #32]	; (80067a4 <_nx_icmpv4_process_echo_reply+0x178>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3b01      	subs	r3, #1
 8006786:	4a07      	ldr	r2, [pc, #28]	; (80067a4 <_nx_icmpv4_process_echo_reply+0x178>)
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f383 8810 	msr	PRIMASK, r3
}
 8006794:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8006796:	f006 fe13 	bl	800d3c0 <_tx_thread_system_preempt_check>
}
 800679a:	bf00      	nop
 800679c:	3740      	adds	r7, #64	; 0x40
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	2001491c 	.word	0x2001491c

080067a8 <_nx_icmpv4_process_echo_request>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_request(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08c      	sub	sp, #48	; 0x30
 80067ac:	af04      	add	r7, sp, #16
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
ULONG             checksum;
ULONG             old_m;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
ULONG             compute_checksum = 1;
 80067b2:	2301      	movs	r3, #1
 80067b4:	61fb      	str	r3, [r7, #28]
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
NX_IPV4_HEADER   *ipv4_header;
ULONG             next_hop_address = NX_NULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	60bb      	str	r3, [r7, #8]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	61bb      	str	r3, [r7, #24]

    /* Pickup the return IP address.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c4:	617b      	str	r3, [r7, #20]

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings received count.  */
    ip_ptr -> nx_ip_pings_received++;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#endif

    /* Change the type to Echo Reply and send back the message to the caller.  */
    header_ptr -> nx_icmpv4_header_type = NX_ICMP_ECHO_REPLY_TYPE;
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	2200      	movs	r2, #0
 80067d8:	701a      	strb	r2, [r3, #0]
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <_nx_icmpv4_process_echo_request+0x44>
    {
        compute_checksum = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	61fb      	str	r3, [r7, #28]
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d02c      	beq.n	800684c <_nx_icmpv4_process_echo_request+0xa4>
           m'  - new value of a 16-bit field
           HC' = ~(C + (-m) + m')
           = ~(~HC + ~m + m') */

        /* Endian swapping logic.  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	885b      	ldrh	r3, [r3, #2]
 80067f6:	ba5b      	rev16	r3, r3
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	805a      	strh	r2, [r3, #2]

        /* Get the old checksum (HC) in header. */
        checksum = header_ptr -> nx_icmpv4_header_checksum;
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	885b      	ldrh	r3, [r3, #2]
 8006802:	613b      	str	r3, [r7, #16]

        /* Get the old type(m). */
        old_m = (ULONG)(NX_ICMP_ECHO_REQUEST_TYPE << 8);
 8006804:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006808:	60fb      	str	r3, [r7, #12]

        /* Update the checksum, get the new checksum(HC'). */
        /* The m' is value of echo reply type. It is zero so can be ignored. */
        checksum = ((~checksum) & 0xFFFF) + ((~old_m) & 0xFFFF);
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	43db      	mvns	r3, r3
 800680e:	b29a      	uxth	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	43db      	mvns	r3, r3
 8006814:	b29b      	uxth	r3, r3
 8006816:	4413      	add	r3, r2
 8006818:	613b      	str	r3, [r7, #16]

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	0c1a      	lsrs	r2, r3, #16
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	b29b      	uxth	r3, r3
 8006822:	4413      	add	r3, r2
 8006824:	613b      	str	r3, [r7, #16]

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	0c1a      	lsrs	r2, r3, #16
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	b29b      	uxth	r3, r3
 800682e:	4413      	add	r3, r2
 8006830:	613b      	str	r3, [r7, #16]

        /* Store the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = (~checksum & NX_LOWER_16_MASK);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	b29b      	uxth	r3, r3
 8006836:	43db      	mvns	r3, r3
 8006838:	b29a      	uxth	r2, r3
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	805a      	strh	r2, [r3, #2]

        /* If NX_LITTLE_ENDIAN is defined, the header need to be swapped back
           for output (network byte order).  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	885b      	ldrh	r3, [r3, #2]
 8006842:	ba5b      	rev16	r3, r3
 8006844:	b29a      	uxth	r2, r3
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	805a      	strh	r2, [r3, #2]
 800684a:	e008      	b.n	800685e <_nx_icmpv4_process_echo_request+0xb6>
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    else
    {

        /* Clear the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = 0;
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	2200      	movs	r2, #0
 8006850:	805a      	strh	r2, [r3, #2]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
    }
#endif

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	68d9      	ldr	r1, [r3, #12]
                      &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 8006868:	f107 0308 	add.w	r3, r7, #8
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f001 fa97 	bl	8007da0 <_nx_ip_route_find>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ipv4_header -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings responded to count.  */
    ip_ptr -> nx_ip_pings_responded_to++;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

    /* Send the ICMP packet to the IP component.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, packet_ptr, ipv4_header -> nx_ip_header_source_ip,
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	9303      	str	r3, [sp, #12]
 8006888:	2300      	movs	r3, #0
 800688a:	9302      	str	r3, [sp, #8]
 800688c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	2380      	movs	r3, #128	; 0x80
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	2300      	movs	r3, #0
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 fa0a 	bl	8007cb4 <_nx_ip_packet_send>
                       NX_IP_NORMAL, NX_IP_TIME_TO_LIVE, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);
}
 80068a0:	bf00      	nop
 80068a2:	3720      	adds	r7, #32
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <_nx_icmpv4_send_error_message>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv4_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b096      	sub	sp, #88	; 0x58
 80068ac:	af04      	add	r7, sp, #16
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]

NX_PACKET       *pkt_ptr;
USHORT           checksum;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT             compute_checksum = 1;
 80068b6:	2301      	movs	r3, #1
 80068b8:	647b      	str	r3, [r7, #68]	; 0x44
NX_ICMPV4_ERROR *icmpv4_error;
NX_IPV4_HEADER  *ip_header_ptr;
UINT             ip_header_size;
UINT             bytes_to_copy, i;
ULONG            src_ip;
ULONG            next_hop_address = NX_NULL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv4 error message if ICMPv4 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8113 	beq.w	8006af0 <_nx_icmpv4_send_error_message+0x248>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(offending_packet -> nx_packet_ip_header);
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ce:	633b      	str	r3, [r7, #48]	; 0x30
    src_ip = ip_header_ptr -> nx_ip_header_source_ip;
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the incoming interface. */
    if_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28

    /* An ICMP error message MUST NOT be sent as the result of receiving:
       RFC1122, Section3.2.2, Page39.  */

    /* A datagram destined to an IP broadcast or IP multicast address.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e4:	f000 8106 	beq.w	8006af4 <_nx_icmpv4_send_error_message+0x24c>
        ((ip_header_ptr -> nx_ip_header_destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 80068f0:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80068f4:	f000 80fe 	beq.w	8006af4 <_nx_icmpv4_send_error_message+0x24c>
    {
        return;
    }

    /* A datagram sent as a link-layer broadcast.  */
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	401a      	ands	r2, r3
         if_ptr -> nx_interface_ip_network) &&
 8006902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006904:	69db      	ldr	r3, [r3, #28]
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8006906:	429a      	cmp	r2, r3
 8006908:	d10b      	bne.n	8006922 <_nx_icmpv4_send_error_message+0x7a>
        ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	691a      	ldr	r2, [r3, #16]
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	43db      	mvns	r3, r3
 8006914:	401a      	ands	r2, r3
         ~(if_ptr -> nx_interface_ip_network_mask)))
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	43db      	mvns	r3, r3
         if_ptr -> nx_interface_ip_network) &&
 800691c:	429a      	cmp	r2, r3
 800691e:	f000 80eb 	beq.w	8006af8 <_nx_icmpv4_send_error_message+0x250>
    {
        return;
    }

    /* A non-initial fragment.  */
    if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_OFFSET_MASK)
 8006922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800692a:	2b00      	cmp	r3, #0
 800692c:	f040 80e6 	bne.w	8006afc <_nx_icmpv4_send_error_message+0x254>
    }

    /* A datagram whose source address does not define a single host,
       e.g., a zero address, a loopback address, a broadcast address,
       a multicast address, or a Class E address.  */
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 80e3 	beq.w	8006b00 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	68db      	ldr	r3, [r3, #12]
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 800693e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8006942:	d304      	bcc.n	800694e <_nx_icmpv4_send_error_message+0xa6>
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	68db      	ldr	r3, [r3, #12]
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 8006948:	2b00      	cmp	r3, #0
 800694a:	f280 80d9 	bge.w	8006b00 <_nx_icmpv4_send_error_message+0x258>
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	68db      	ldr	r3, [r3, #12]
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8006952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006956:	f000 80d3 	beq.w	8006b00 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 8006962:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8006966:	f000 80cb 	beq.w	8006b00 <_nx_icmpv4_send_error_message+0x258>
    {
        return;
    }

    /* Allocate a packet to build the ICMPv4 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv4_ICMP_PACKET, NX_NO_WAIT))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 8006970:	f107 0118 	add.w	r1, r7, #24
 8006974:	2300      	movs	r3, #0
 8006976:	2224      	movs	r2, #36	; 0x24
 8006978:	f002 f8d2 	bl	8008b20 <_nx_packet_allocate>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	f040 80c0 	bne.w	8006b04 <_nx_icmpv4_send_error_message+0x25c>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv4. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	2204      	movs	r2, #4
 8006988:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Size of the message is ICMPv4 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	0e1b      	lsrs	r3, r3, #24
 8006996:	b2da      	uxtb	r2, r3
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	701a      	strb	r2, [r3, #0]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	0c1b      	lsrs	r3, r3, #16
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	705a      	strb	r2, [r3, #1]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	2200      	movs	r2, #0
 80069aa:	805a      	strh	r2, [r3, #2]
    icmpv4_error -> nx_icmpv4_error_pointer = (error_pointer << 24);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	061a      	lsls	r2, r3, #24
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	605a      	str	r2, [r3, #4]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	ba1a      	rev	r2, r3
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	605a      	str	r2, [r3, #4]

    /* IP Header + 64 bits (64 bits = 2 ULONGs) of Data Datagram.  */
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	0e1b      	lsrs	r3, r3, #24
 80069c4:	f003 030f 	and.w	r3, r3, #15
 80069c8:	623b      	str	r3, [r7, #32]
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	3302      	adds	r3, #2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the packet length and pointers.  The length will be increased to include
       the IPv4 header in the IP send function.  The Prepend function will be similarly
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069d6:	3208      	adds	r2, #8
 80069d8:	625a      	str	r2, [r3, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	6899      	ldr	r1, [r3, #8]
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	440a      	add	r2, r1
 80069e6:	60da      	str	r2, [r3, #12]

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ec:	63bb      	str	r3, [r7, #56]	; 0x38

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv4_error, sizeof(NX_ICMPV4_ERROR));
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	3308      	adds	r3, #8
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Endian swap the incoming IPv4 normal header to network byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 80069f4:	2300      	movs	r3, #0
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069f8:	e00a      	b.n	8006a10 <_nx_icmpv4_send_error_message+0x168>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 80069fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	ba1a      	rev	r2, r3
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	601a      	str	r2, [r3, #0]
        src_packet++;
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	3304      	adds	r3, #4
 8006a08:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8006a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d9f1      	bls.n	80069fa <_nx_icmpv4_send_error_message+0x152>
    }

    /* Reset the packet pointer to the received packet IP header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a1a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Copy the data from the received packet to the ICMPv4 error packet. */
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 8006a1c:	e00a      	b.n	8006a34 <_nx_icmpv4_send_error_message+0x18c>
    {

        *dest_packet++ = *src_packet++;
 8006a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a20:	1d13      	adds	r3, r2, #4
 8006a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a26:	1d19      	adds	r1, r3, #4
 8006a28:	6379      	str	r1, [r7, #52]	; 0x34
 8006a2a:	6812      	ldr	r2, [r2, #0]
 8006a2c:	601a      	str	r2, [r3, #0]
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 8006a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a30:	3b04      	subs	r3, #4
 8006a32:	643b      	str	r3, [r7, #64]	; 0x40
 8006a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f1      	bne.n	8006a1e <_nx_icmpv4_send_error_message+0x176>
    }

    /* Get the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Endian swap the IPv4 normal header back to host byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8006a40:	2300      	movs	r3, #0
 8006a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a44:	e00a      	b.n	8006a5c <_nx_icmpv4_send_error_message+0x1b4>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	ba1a      	rev	r2, r3
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4e:	601a      	str	r2, [r3, #0]
        src_packet++;
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	3304      	adds	r3, #4
 8006a54:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8006a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a58:	3301      	adds	r3, #1
 8006a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d9f1      	bls.n	8006a46 <_nx_icmpv4_send_error_message+0x19e>
    }

    /* Use the corresponding interface address as sender's address. */
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006a68:	631a      	str	r2, [r3, #48]	; 0x30

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, src_ip,
                      &pkt_ptr -> nx_packet_address.nx_packet_interface_ptr,
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, src_ip,
 8006a70:	f107 0314 	add.w	r3, r7, #20
 8006a74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f001 f992 	bl	8007da0 <_nx_ip_route_find>
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (pkt_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <_nx_icmpv4_send_error_message+0x1e6>
    {
        compute_checksum = 0;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	647b      	str	r3, [r7, #68]	; 0x44
    {
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 8006a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d017      	beq.n	8006ac4 <_nx_icmpv4_send_error_message+0x21c>
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Compute the checksum of the ICMP packet.  */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 8006a94:	69b8      	ldr	r0, [r7, #24]
                                           (UINT)pkt_ptr -> nx_packet_length,
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006aa4:	f000 f89d 	bl	8006be2 <_nx_ip_checksum_compute>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	83fb      	strh	r3, [r7, #30]
                                           /* ICMPV4 checksum does not include
                                              src/dest addresses */
                                           NX_NULL, NX_NULL);

        icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = (USHORT)(~checksum);
 8006aac:	8bfb      	ldrh	r3, [r7, #30]
 8006aae:	43db      	mvns	r3, r3
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	805a      	strh	r2, [r3, #2]

        /* Swap to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	885b      	ldrh	r3, [r3, #2]
 8006aba:	ba5b      	rev16	r3, r3
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	805a      	strh	r2, [r3, #2]
 8006ac2:	e005      	b.n	8006ad0 <_nx_icmpv4_send_error_message+0x228>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Send the ICMP packet to the IP component. The time to live is set to 255.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, pkt_ptr, src_ip,
 8006ad0:	69b9      	ldr	r1, [r7, #24]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	9303      	str	r3, [sp, #12]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	9302      	str	r3, [sp, #8]
 8006ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	23ff      	movs	r3, #255	; 0xff
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f001 f8e3 	bl	8007cb4 <_nx_ip_packet_send>
                       NX_IP_NORMAL, 255, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);

    return;
 8006aee:	e00a      	b.n	8006b06 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006af0:	bf00      	nop
 8006af2:	e008      	b.n	8006b06 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006af4:	bf00      	nop
 8006af6:	e006      	b.n	8006b06 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006af8:	bf00      	nop
 8006afa:	e004      	b.n	8006b06 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006afc:	bf00      	nop
 8006afe:	e002      	b.n	8006b06 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006b00:	bf00      	nop
 8006b02:	e000      	b.n	8006b06 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006b04:	bf00      	nop
}
 8006b06:	3748      	adds	r7, #72	; 0x48
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <_nx_igmp_multicast_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_igmp_multicast_check(NX_IP *ip_ptr, ULONG group, NX_INTERFACE *nx_interface)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]

UINT i;

    /* Check for "all hosts" group.  We always assume all hosts membership.  */
    /*lint -e{835} -e{845} suppress operating on zero. */
    if (group ==  NX_ALL_HOSTS_ADDRESS)
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4a18      	ldr	r2, [pc, #96]	; (8006b7c <_nx_igmp_multicast_check+0x70>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d101      	bne.n	8006b24 <_nx_igmp_multicast_check+0x18>
    {
        return(NX_TRUE);
 8006b20:	2301      	movs	r3, #1
 8006b22:	e025      	b.n	8006b70 <_nx_igmp_multicast_check+0x64>
    }

    /* Loop through the IP multicast join list to find the matching group that is being
       responded to by another host on this same network.  */

    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 8006b24:	2300      	movs	r3, #0
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	e01e      	b.n	8006b68 <_nx_igmp_multicast_check+0x5c>
    {

        /* Check for a match.  */
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8006b2a:	68f9      	ldr	r1, [r7, #12]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	440b      	add	r3, r1
 8006b38:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d10e      	bne.n	8006b62 <_nx_igmp_multicast_check+0x56>
            (nx_interface == ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_interface_list))
 8006b44:	68f9      	ldr	r1, [r7, #12]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8006b56:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d101      	bne.n	8006b62 <_nx_igmp_multicast_check+0x56>
        {
            return(NX_TRUE);
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e006      	b.n	8006b70 <_nx_igmp_multicast_check+0x64>
    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	3301      	adds	r3, #1
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2b06      	cmp	r3, #6
 8006b6c:	d9dd      	bls.n	8006b2a <_nx_igmp_multicast_check+0x1e>
        }
    }

    /* Otherwise, we have searched the entire list, return false.  */
    return(NX_FALSE);
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	e0000001 	.word	0xe0000001

08006b80 <_nx_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]

#ifndef NX_DISABLE_IPV4
TX_INTERRUPT_SAVE_AREA

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006b92:	f04f 31ff 	mov.w	r1, #4294967295
 8006b96:	4618      	mov	r0, r3
 8006b98:	f005 fc1e 	bl	800c3d8 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ba0:	617b      	str	r3, [r7, #20]
    return(posture);
 8006ba2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8006ba4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006ba6:	b672      	cpsid	i
    return(int_posture);
 8006ba8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8006baa:	61fb      	str	r3, [r7, #28]

    /* Pickup the IP address and the network mask.  This service assumes
       the operation on the primary interface. */
    *ip_address =    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8d3 2734 	ldr.w	r2, [r3, #1844]	; 0x734
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8d3 2738 	ldr.w	r2, [r3, #1848]	; 0x738
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	f383 8810 	msr	PRIMASK, r3
}
 8006bca:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f005 fe78 	bl	800c8c8 <_tx_mutex_put>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_GET, ip_ptr, ip_ptr -> nx_ip_interface[0].nx_interface_ip_address,
                            ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Return completion status.  */
    return(NX_SUCCESS);
 8006bd8:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3720      	adds	r7, #32
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <_nx_ip_checksum_compute>:
/*                                                                        */
/**************************************************************************/
USHORT  _nx_ip_checksum_compute(NX_PACKET *packet_ptr, ULONG protocol,
                                UINT data_length, ULONG *src_ip_addr,
                                ULONG *dest_ip_addr)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b08e      	sub	sp, #56	; 0x38
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	607a      	str	r2, [r7, #4]
 8006bee:	603b      	str	r3, [r7, #0]

ULONG      checksum = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	637b      	str	r3, [r7, #52]	; 0x34
UINT       i;
#endif

    /* For computing TCP/UDP/ICMPv6, we need to include the pseudo header.
       The ICMPv4 checksum does not cover the pseudo header. */
    if ((protocol == NX_PROTOCOL_UDP) ||
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2b11      	cmp	r3, #17
 8006bf8:	d002      	beq.n	8006c00 <_nx_ip_checksum_compute+0x1e>
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	2b06      	cmp	r3, #6
 8006bfe:	d141      	bne.n	8006c84 <_nx_ip_checksum_compute+0xa2>
        (protocol == NX_PROTOCOL_TCP))
    {

    USHORT *src_ip_short, *dest_ip_short;

        checksum = protocol;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	637b      	str	r3, [r7, #52]	; 0x34

        /* The addresses must not be null.  */
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d002      	beq.n	8006c10 <_nx_ip_checksum_compute+0x2e>
 8006c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <_nx_ip_checksum_compute+0x38>
 8006c10:	f04f 30ff 	mov.w	r0, #4294967295
 8006c14:	f006 fb54 	bl	800d2c0 <_tx_thread_sleep>
 8006c18:	e7fa      	b.n	8006c10 <_nx_ip_checksum_compute+0x2e>

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        src_ip_short = (USHORT *)src_ip_addr;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	623b      	str	r3, [r7, #32]

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        dest_ip_short = (USHORT *)dest_ip_addr;
 8006c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c20:	61fb      	str	r3, [r7, #28]


        checksum += src_ip_short[0];
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2a:	4413      	add	r3, r2
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += src_ip_short[1];
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	3302      	adds	r3, #2
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c38:	4413      	add	r3, r2
 8006c3a:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[0];
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	461a      	mov	r2, r3
 8006c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c44:	4413      	add	r3, r2
 8006c46:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[1];
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	3302      	adds	r3, #2
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c52:	4413      	add	r3, r2
 8006c54:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif /* FEATURE_NX_IPV6 */

        /* Take care of data length */
        checksum += data_length;
 8006c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c60:	0c1a      	lsrs	r2, r3, #16
 8006c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	4413      	add	r3, r2
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6c:	0c1a      	lsrs	r2, r3, #16
 8006c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	4413      	add	r3, r2
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34

        /* Convert to network byte order. */
        tmp = (USHORT)checksum;
 8006c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c78:	837b      	strh	r3, [r7, #26]
        NX_CHANGE_USHORT_ENDIAN(tmp);
 8006c7a:	8b7b      	ldrh	r3, [r7, #26]
 8006c7c:	ba5b      	rev16	r3, r3
 8006c7e:	837b      	strh	r3, [r7, #26]
        checksum = tmp;
 8006c80:	8b7b      	ldrh	r3, [r7, #26]
 8006c82:	637b      	str	r3, [r7, #52]	; 0x34

    /* Now we need to go through the payloads */

    /* Setup the pointer to the start of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    long_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize the current packet to the input packet pointer.  */
    current_packet =  packet_ptr;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop the packet. */
    while (current_packet)
 8006c8e:	e058      	b.n	8006d42 <_nx_ip_checksum_compute+0x160>
    {

        /* Calculate current packet size. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	617b      	str	r3, [r7, #20]

        /* Calculate the end address in this packet. */
        if (data_length > (UINT)packet_size)
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d905      	bls.n	8006cb0 <_nx_ip_checksum_compute+0xce>
        {

            /*lint -e{927} -e{923} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = ((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3);
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f023 0303 	bic.w	r3, r3, #3
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24
 8006cae:	e006      	b.n	8006cbe <_nx_ip_checksum_compute+0xdc>
        }
        else
        {
#endif /* NX_DISABLE_PACKET_CHAIN */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr + data_length - 3;
 8006cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4413      	add	r3, r2
 8006cba:	3b03      	subs	r3, #3
 8006cbc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Set the start address in this packet. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        long_ptr = (ULONG *)current_packet -> nx_packet_prepend_ptr;
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ALIGN_TYPE)long_ptr < end_ptr)
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d91c      	bls.n	8006d06 <_nx_ip_checksum_compute+0x124>
        {

            /* Calculate the data_length. */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            data_length -= (UINT)(((end_ptr + 3) & (ALIGN_TYPE)(~3llu)) - (ALIGN_TYPE)long_ptr);
 8006ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	3303      	adds	r3, #3
 8006cd2:	f023 0303 	bic.w	r3, r3, #3
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	4413      	add	r3, r2
 8006cdc:	607b      	str	r3, [r7, #4]

            /* Loop to calculate the packet's checksum.  */
            /*lint -e{946} suppress pointer subtraction, since it is necessary. */
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8006cde:	e00e      	b.n	8006cfe <_nx_ip_checksum_compute+0x11c>
            {
                checksum += (*long_ptr & NX_LOWER_16_MASK);
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ce8:	4413      	add	r3, r2
 8006cea:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 8006cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	0c1b      	lsrs	r3, r3, #16
 8006cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf4:	4413      	add	r3, r2
 8006cf6:	637b      	str	r3, [r7, #52]	; 0x34
                long_ptr++;
 8006cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d8ec      	bhi.n	8006ce0 <_nx_ip_checksum_compute+0xfe>
            }
        }
#ifndef NX_DISABLE_PACKET_CHAIN

        /* Determine if we are at the end of the current packet.  */
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d018      	beq.n	8006d3e <_nx_ip_checksum_compute+0x15c>
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d014      	beq.n	8006d3e <_nx_ip_checksum_compute+0x15c>
        {

            /* Is append_ptr two bytes aligned but not four bytes aligned? */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            if ((((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & 3) == 2)
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f003 0303 	and.w	r3, r3, #3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d10a      	bne.n	8006d36 <_nx_ip_checksum_compute+0x154>
            {

                /* Yes it is. Process the last two bytes in chaining packets. */
                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                short_ptr = (USHORT *)long_ptr;
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	633b      	str	r3, [r7, #48]	; 0x30

                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                checksum += *short_ptr;
 8006d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2c:	4413      	add	r3, r2
 8006d2e:	637b      	str	r3, [r7, #52]	; 0x34
                data_length -= 2;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3b02      	subs	r3, #2
 8006d34:	607b      	str	r3, [r7, #4]
            }

            /* We have crossed the packet boundary.  Move to the next packet
               structure.  */
            current_packet =  current_packet -> nx_packet_next;
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d3c:	e001      	b.n	8006d42 <_nx_ip_checksum_compute+0x160>
        }
        else
        {

            /* End the loop.  */
            current_packet = NX_NULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28
    while (current_packet)
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1a3      	bne.n	8006c90 <_nx_ip_checksum_compute+0xae>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if there is only one byte left. */
    if (data_length)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d01f      	beq.n	8006d8e <_nx_ip_checksum_compute+0x1ac>
    {

        /* Set the short_ptr. */
        short_ptr = (USHORT *)(long_ptr);
 8006d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d50:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the data length.  */
        if (data_length == 1)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d104      	bne.n	8006d62 <_nx_ip_checksum_compute+0x180>
        {
            *((UCHAR *)short_ptr + 1) = 0;
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	701a      	strb	r2, [r3, #0]
 8006d60:	e00f      	b.n	8006d82 <_nx_ip_checksum_compute+0x1a0>
        }
        else if (data_length == 3)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d10c      	bne.n	8006d82 <_nx_ip_checksum_compute+0x1a0>
        {
            checksum += *short_ptr;
 8006d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d70:	4413      	add	r3, r2
 8006d72:	637b      	str	r3, [r7, #52]	; 0x34
            short_ptr++;
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	3302      	adds	r3, #2
 8006d78:	633b      	str	r3, [r7, #48]	; 0x30

            *((UCHAR *)short_ptr + 1) = 0;
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	2200      	movs	r2, #0
 8006d80:	701a      	strb	r2, [r3, #0]
        }

        checksum += *short_ptr;
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8a:	4413      	add	r3, r2
 8006d8c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Fold a 4-byte value into a two byte value */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d90:	0c1a      	lsrs	r2, r3, #16
 8006d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	4413      	add	r3, r2
 8006d98:	637b      	str	r3, [r7, #52]	; 0x34

    /* Do it again in case previous operation generates an overflow */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9c:	0c1a      	lsrs	r2, r3, #16
 8006d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	4413      	add	r3, r2
 8006da4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Convert to host byte order. */
    tmp = (USHORT)checksum;
 8006da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da8:	837b      	strh	r3, [r7, #26]
    NX_CHANGE_USHORT_ENDIAN(tmp);
 8006daa:	8b7b      	ldrh	r3, [r7, #26]
 8006dac:	ba5b      	rev16	r3, r3
 8006dae:	837b      	strh	r3, [r7, #26]

    /* Return the computed checksum.  */
    return(tmp);
 8006db0:	8b7b      	ldrh	r3, [r7, #26]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3738      	adds	r7, #56	; 0x38
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <_nx_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                    NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                    VOID *memory_ptr, ULONG memory_size, UINT priority)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b092      	sub	sp, #72	; 0x48
 8006dc0:	af06      	add	r7, sp, #24
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_IP     *tail_ptr;
UINT       i;
UINT       old_threshold = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	613b      	str	r3, [r7, #16]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);
#endif /* NX_DISABLE_IPV4 */

    /* Reference the version ID and option words to ensure they are linked in.  */
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8006dce:	4b8a      	ldr	r3, [pc, #552]	; (8006ff8 <_nx_ip_create+0x23c>)
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4b8a      	ldr	r3, [pc, #552]	; (8006ffc <_nx_ip_create+0x240>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	4b89      	ldr	r3, [pc, #548]	; (8007000 <_nx_ip_create+0x244>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8006dde:	4b89      	ldr	r3, [pc, #548]	; (8007004 <_nx_ip_create+0x248>)
 8006de0:	681b      	ldr	r3, [r3, #0]
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8006de2:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8006de4:	4b88      	ldr	r3, [pc, #544]	; (8007008 <_nx_ip_create+0x24c>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	4a88      	ldr	r2, [pc, #544]	; (800700c <_nx_ip_create+0x250>)
 8006dec:	7812      	ldrb	r2, [r2, #0]
 8006dee:	4313      	orrs	r3, r2
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <_nx_ip_create+0x3c>
    {

        /* We should never get here!  */
        return(NX_NOT_IMPLEMENTED);
 8006df4:	234a      	movs	r3, #74	; 0x4a
 8006df6:	e0fb      	b.n	8006ff0 <_nx_ip_create+0x234>
    }

    /* Initialize the IP control block to zero.  */
    memset((void *)ip_ptr, 0, sizeof(NX_IP));
 8006df8:	f44f 62f9 	mov.w	r2, #1992	; 0x7c8
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f007 ff14 	bl	800ec2c <memset>

    /* Configure the primary interface. */
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724

#ifndef NX_DISABLE_IPV4
    /* Save the IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address =   ip_address;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734

    /* Save the network mask.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	f8c3 2738 	str.w	r2, [r3, #1848]	; 0x738

    /* Derive the network bits of this IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	401a      	ands	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_arp_defend_timeout = 0;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
#endif /* !NX_DISABLE_IPV4  */

    /* Setup the link driver address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e34:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c

    /* Set the device interface name to "PRI". */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4a75      	ldr	r2, [pc, #468]	; (8007010 <_nx_ip_create+0x254>)
 8006e3c:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720

    /* Set index of each interface. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8006e40:	2300      	movs	r3, #0
 8006e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e44:	e00f      	b.n	8006e66 <_nx_ip_create+0xaa>
    {
        ip_ptr -> nx_ip_interface[i].nx_interface_index = (UCHAR)i;
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	b2d8      	uxtb	r0, r3
 8006e4a:	68f9      	ldr	r1, [r7, #12]
 8006e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	011b      	lsls	r3, r3, #4
 8006e56:	440b      	add	r3, r1
 8006e58:	f203 7327 	addw	r3, r3, #1831	; 0x727
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	3301      	adds	r3, #1
 8006e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d9ec      	bls.n	8006e46 <_nx_ip_create+0x8a>

#ifndef NX_DISABLE_LOOPBACK_INTERFACE

    /* Set the Loopback interface name. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4a69      	ldr	r2, [pc, #420]	; (8007014 <_nx_ip_create+0x258>)
 8006e70:	f8c3 2770 	str.w	r2, [r3, #1904]	; 0x770


    /* Mark the loopback interface as valid. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774

#ifndef NX_DISABLE_IPV4
    /* Set the loopback interface address. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4a66      	ldr	r2, [pc, #408]	; (8007018 <_nx_ip_create+0x25c>)
 8006e80:	f8c3 2784 	str.w	r2, [r3, #1924]	; 0x784
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8006e8a:	f8c3 2788 	str.w	r2, [r3, #1928]	; 0x788
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f04f 42fe 	mov.w	r2, #2130706432	; 0x7f000000
 8006e94:	f8c3 278c 	str.w	r2, [r3, #1932]	; 0x78c
#endif /* !NX_DISABLE_IPV4  */

    /* Loopback interface is a special case. Therefore no dedicated link driver needed. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_driver_entry = NX_NULL;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8c3 27ac 	str.w	r2, [r3, #1964]	; 0x7ac

    /* Loopback interface does not need IP/MAC address mapping. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_address_mapping_needed = 0;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2775 	strb.w	r2, [r3, #1909]	; 0x775

    /* There is actually no MTU limit for the loopback interface. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eae:	f8c3 2794 	str.w	r2, [r3, #1940]	; 0x794

    /* Mark the loopback interface as LINK UP */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_up = 1;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776

    /* Set all the link capability. */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_capability_flag = (NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM |
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006ec0:	f8c3 27b0 	str.w	r2, [r3, #1968]	; 0x7b0
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#endif /* !NX_DISABLE_LOOPBACK_INTERFACE */

    /* Save the supplied IP name.  */
    ip_ptr -> nx_ip_name =  name;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	605a      	str	r2, [r3, #4]

    /* Set the initial IP packet ID.  */
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    /* Setup the default packet pool for this IP instance.  */
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ed6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    /* Setup the auxiliary packet pool for this IP instance. By default it pointers to default pool. */
    ip_ptr -> nx_ip_auxiliary_packet_pool = default_pool;
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Create the internal IP protection mutex.  */
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	68b9      	ldr	r1, [r7, #8]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f005 fa1d 	bl	800c324 <_tx_mutex_create>

    /* Create the internal IP event flag object.  */
    tx_event_flags_create(&(ip_ptr -> nx_ip_events), name);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f004 fda0 	bl	800ba38 <_tx_event_flags_create>

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8006ef8:	f006 f802 	bl	800cf00 <_tx_thread_identify>
 8006efc:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Disable preemption temporarily.  */
    if (current_thread)
 8006efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d006      	beq.n	8006f12 <_nx_ip_create+0x156>
    {
        tx_thread_preemption_change(current_thread, priority, &old_threshold);
 8006f04:	f107 0310 	add.w	r3, r7, #16
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f0e:	f006 f851 	bl	800cfb4 <_tx_thread_preemption_change>
    }

    /* Create the internal IP thread for handling more processing intensive
       duties.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_thread_create(&(ip_ptr -> nx_ip_thread), name, _nx_ip_thread_entry, (ULONG)(ALIGN_TYPE)(ip_ptr),
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	9305      	str	r3, [sp, #20]
 8006f1e:	2301      	movs	r3, #1
 8006f20:	9304      	str	r3, [sp, #16]
 8006f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f24:	9303      	str	r3, [sp, #12]
 8006f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f28:	9302      	str	r3, [sp, #8]
 8006f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f2c:	9301      	str	r3, [sp, #4]
 8006f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	4613      	mov	r3, r2
 8006f34:	4a39      	ldr	r2, [pc, #228]	; (800701c <_nx_ip_create+0x260>)
 8006f36:	68b9      	ldr	r1, [r7, #8]
 8006f38:	f005 feec 	bl	800cd14 <_tx_thread_create>

    NX_THREAD_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_thread), ip_ptr)

    /* Create the periodic timer for this IP instance.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_periodic_timer), name,
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	9202      	str	r2, [sp, #8]
 8006f48:	2264      	movs	r2, #100	; 0x64
 8006f4a:	9201      	str	r2, [sp, #4]
 8006f4c:	2264      	movs	r2, #100	; 0x64
 8006f4e:	9200      	str	r2, [sp, #0]
 8006f50:	4a33      	ldr	r2, [pc, #204]	; (8007020 <_nx_ip_create+0x264>)
 8006f52:	68b9      	ldr	r1, [r7, #8]
 8006f54:	f006 fd14 	bl	800d980 <_tx_timer_create>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_CREATE, ip_ptr, ip_address, network_mask, default_pool, NX_TRACE_IP_EVENTS, 0, 0);

#ifndef NX_DISABLE_IPV4
    /* Install IPv4 packet receive processing function pointer */
    ip_ptr -> nx_ipv4_packet_receive = _nx_ipv4_packet_receive;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4a32      	ldr	r2, [pc, #200]	; (8007024 <_nx_ip_create+0x268>)
 8006f5c:	f8c3 27c0 	str.w	r2, [r3, #1984]	; 0x7c0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006f60:	f3ef 8310 	mrs	r3, PRIMASK
 8006f64:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006f66:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006f68:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006f6a:	b672      	cpsid	i
    return(int_posture);
 8006f6c:	69bb      	ldr	r3, [r7, #24]
#endif

    /* Otherwise, the IP initialization was successful.  Place the
       IP control block on the list of created IP instances.  */
    TX_DISABLE
 8006f6e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the IP ID field in the IP control block.  */
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a2d      	ldr	r2, [pc, #180]	; (8007028 <_nx_ip_create+0x26c>)
 8006f74:	601a      	str	r2, [r3, #0]

    /* Place the new IP control block on the list of created IPs.  First,
       check for an empty list.  */
    if (_nx_ip_created_ptr)
 8006f76:	4b2d      	ldr	r3, [pc, #180]	; (800702c <_nx_ip_create+0x270>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d017      	beq.n	8006fae <_nx_ip_create+0x1f2>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_ip_created_ptr -> nx_ip_created_previous;
 8006f7e:	4b2b      	ldr	r3, [pc, #172]	; (800702c <_nx_ip_create+0x270>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8006f86:	623b      	str	r3, [r7, #32]

        /* Place the new IP control block in the list.  */
        _nx_ip_created_ptr -> nx_ip_created_previous =  ip_ptr;
 8006f88:	4b28      	ldr	r3, [pc, #160]	; (800702c <_nx_ip_create+0x270>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        tail_ptr -> nx_ip_created_next =  ip_ptr;
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710

        /* Setup this IP's created links.  */
        ip_ptr -> nx_ip_created_previous =  tail_ptr;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a3a      	ldr	r2, [r7, #32]
 8006f9e:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        ip_ptr -> nx_ip_created_next =      _nx_ip_created_ptr;
 8006fa2:	4b22      	ldr	r3, [pc, #136]	; (800702c <_nx_ip_create+0x270>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
 8006fac:	e00a      	b.n	8006fc4 <_nx_ip_create+0x208>
    }
    else
    {

        /* The created IP list is empty.  Add IP control block to empty list.  */
        _nx_ip_created_ptr =                ip_ptr;
 8006fae:	4a1f      	ldr	r2, [pc, #124]	; (800702c <_nx_ip_create+0x270>)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6013      	str	r3, [r2, #0]
        ip_ptr -> nx_ip_created_next =      ip_ptr;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
    }

    /* Increment the created IP counter.  */
    _nx_ip_created_count++;
 8006fc4:	4b1a      	ldr	r3, [pc, #104]	; (8007030 <_nx_ip_create+0x274>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	4a19      	ldr	r2, [pc, #100]	; (8007030 <_nx_ip_create+0x274>)
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f383 8810 	msr	PRIMASK, r3
}
 8006fd8:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Restore preemption.  */
    if (current_thread)
 8006fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d006      	beq.n	8006fee <_nx_ip_create+0x232>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized in previous tx_thread_preemption_change call. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f107 0210 	add.w	r2, r7, #16
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fea:	f005 ffe3 	bl	800cfb4 <_tx_thread_preemption_change>
    }

    /* Return success to the caller.  */
    return(NX_SUCCESS);
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3730      	adds	r7, #48	; 0x30
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20014838 	.word	0x20014838
 8006ffc:	2001483c 	.word	0x2001483c
 8007000:	20014840 	.word	0x20014840
 8007004:	20014844 	.word	0x20014844
 8007008:	20014848 	.word	0x20014848
 800700c:	20000020 	.word	0x20000020
 8007010:	0800f8bc 	.word	0x0800f8bc
 8007014:	0800f8c0 	.word	0x0800f8c0
 8007018:	7f000001 	.word	0x7f000001
 800701c:	0800809d 	.word	0x0800809d
 8007020:	08007d7d 	.word	0x08007d7d
 8007024:	0800865d 	.word	0x0800865d
 8007028:	49502020 	.word	0x49502020
 800702c:	20014828 	.word	0x20014828
 8007030:	2001482c 	.word	0x2001482c

08007034 <_nx_ip_deferred_link_status_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_deferred_link_status_process(NX_IP *ip_ptr)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08c      	sub	sp, #48	; 0x30
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]

UINT         i;
NX_IP_DRIVER driver_request;
ULONG        link_up;

    if (ip_ptr -> nx_ip_link_status_change_callback == NX_NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 8007042:	2b00      	cmp	r3, #0
 8007044:	d052      	beq.n	80070ec <_nx_ip_deferred_link_status_process+0xb8>

        /* Callback function is not set. */
        return;
    }

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8007046:	2300      	movs	r3, #0
 8007048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800704a:	e04b      	b.n	80070e4 <_nx_ip_deferred_link_status_process+0xb0>
    {
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007050:	4613      	mov	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	440b      	add	r3, r1
 800705a:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d03c      	beq.n	80070de <_nx_ip_deferred_link_status_process+0xaa>
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change))
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007068:	4613      	mov	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	440b      	add	r3, r1
 8007072:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8007076:	781b      	ldrb	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8007078:	2b00      	cmp	r3, #0
 800707a:	d030      	beq.n	80070de <_nx_ip_deferred_link_status_process+0xaa>
        {

            /* Reset the flag. */
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 800707c:	6879      	ldr	r1, [r7, #4]
 800707e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007080:	4613      	mov	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	440b      	add	r3, r1
 800708a:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]

            driver_request.nx_ip_driver_ptr       = ip_ptr;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 8007096:	230a      	movs	r3, #10
 8007098:	60fb      	str	r3, [r7, #12]
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 800709a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	4413      	add	r3, r2
 80070ac:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_return_ptr = &link_up;
 80070ae:	f107 0308 	add.w	r3, r7, #8
 80070b2:	623b      	str	r3, [r7, #32]

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b8:	4613      	mov	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	440b      	add	r3, r1
 80070c2:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f107 020c 	add.w	r2, r7, #12
 80070cc:	4610      	mov	r0, r2
 80070ce:	4798      	blx	r3

            /* Invoke the callback function. */
            /*lint -e{644} suppress variable might not be initialized, since "link_up" was initialized in nx_interface_link_driver_entry. */
            ip_ptr -> nx_ip_link_status_change_callback(ip_ptr, i, link_up);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80070de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e0:	3301      	adds	r3, #1
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0b0      	beq.n	800704c <_nx_ip_deferred_link_status_process+0x18>
 80070ea:	e000      	b.n	80070ee <_nx_ip_deferred_link_status_process+0xba>
        return;
 80070ec:	bf00      	nop
        }
    }
}
 80070ee:	3730      	adds	r7, #48	; 0x30
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <_nx_ip_dispatch_process>:
/*                                            packet,                     */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT _nx_ip_dispatch_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UINT protocol)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
#endif /* FEATURE_NX_IPV6 */
#endif /* NX_IPSEC_ENABLE */


    /* Initialize local variables. */
    drop_packet = 0;
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]
    next_option_offset = (UINT)sizeof(NX_IPV6_HEADER);
    incoming_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
#endif /* FEATURE_NX_IPV6 */

    /* Parse all options in the packet till we're done or an error is encountered. */
    while (!drop_packet)
 8007104:	e09a      	b.n	800723c <_nx_ip_dispatch_process+0x148>

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* Set a local variable for convenience. */
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
#endif /* defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE) */
        switch (protocol)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b32      	cmp	r3, #50	; 0x32
 800710a:	d005      	beq.n	8007118 <_nx_ip_dispatch_process+0x24>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b33      	cmp	r3, #51	; 0x33
 8007110:	d104      	bne.n	800711c <_nx_ip_dispatch_process+0x28>
                /* Continue processing the packet if status = NX_IPSEC_PKT_CONT */
            }
#else /* NX_IPSEC_ENABLE */

            /* Drop this packet if IPsec module is not present. */
            drop_packet = 1;
 8007112:	2301      	movs	r3, #1
 8007114:	617b      	str	r3, [r7, #20]
#endif /* NX_IPSEC_ENABLE */

            break;
 8007116:	e07d      	b.n	8007214 <_nx_ip_dispatch_process+0x120>
            }
            break;

#else /* NX_IPSEC_ENABLE */
            /* Drop this packet if IPsec module is not present. */
            return(1);
 8007118:	2301      	movs	r3, #1
 800711a:	e094      	b.n	8007246 <_nx_ip_dispatch_process+0x152>
                    return(0);
                }
            }
#endif /* defined(NX_ENABLE_IP_RAW_PACKET_ALL_STACK) && defined(NX_ENABLE_IP_RAW_PACKET_FILTER) */

            if (protocol == NX_PROTOCOL_TCP)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b06      	cmp	r3, #6
 8007120:	d10f      	bne.n	8007142 <_nx_ip_dispatch_process+0x4e>
                     (incoming_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)))
                {
#endif /* FEATURE_NX_IPV6 */

                    /* Check that the host is enabled for TCP. */
                    if (ip_ptr -> nx_ip_tcp_packet_receive)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007128:	2b00      	cmp	r3, #0
 800712a:	d007      	beq.n	800713c <_nx_ip_dispatch_process+0x48>
                    {

                        /* Dispatch the packet to the TCP packet handler. */
                        (ip_ptr -> nx_ip_tcp_packet_receive)(ip_ptr, packet_ptr);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007132:	68b9      	ldr	r1, [r7, #8]
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	4798      	blx	r3

                        /* No need to free the packet as it is consumed by TCP packet receive.  */
                        return(0);
 8007138:	2300      	movs	r3, #0
 800713a:	e084      	b.n	8007246 <_nx_ip_dispatch_process+0x152>
#ifdef FEATURE_NX_IPV6
                }
#endif /* FEATURE_NX_IPV6 */

                /* TCP is not enabled.  Drop the packet. */
                drop_packet = 1;
 800713c:	2301      	movs	r3, #1
 800713e:	617b      	str	r3, [r7, #20]
#endif /* NX_DISABLE_IP_INFO */


                drop_packet = 1;
            }
            break;
 8007140:	e067      	b.n	8007212 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007148:	2b04      	cmp	r3, #4
 800714a:	d112      	bne.n	8007172 <_nx_ip_dispatch_process+0x7e>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d10f      	bne.n	8007172 <_nx_ip_dispatch_process+0x7e>
                if (ip_ptr -> nx_ip_icmp_packet_receive != NX_NULL)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 8007158:	2b00      	cmp	r3, #0
 800715a:	d007      	beq.n	800716c <_nx_ip_dispatch_process+0x78>
                    ip_ptr -> nx_ip_icmp_packet_receive(ip_ptr, packet_ptr);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 8007162:	68b9      	ldr	r1, [r7, #8]
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	4798      	blx	r3
                    return(0);
 8007168:	2300      	movs	r3, #0
 800716a:	e06c      	b.n	8007246 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 800716c:	2301      	movs	r3, #1
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	e04f      	b.n	8007212 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007178:	2b04      	cmp	r3, #4
 800717a:	d112      	bne.n	80071a2 <_nx_ip_dispatch_process+0xae>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b02      	cmp	r3, #2
 8007180:	d10f      	bne.n	80071a2 <_nx_ip_dispatch_process+0xae>
                if (ip_ptr -> nx_ip_igmp_packet_receive != NX_NULL)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8007188:	2b00      	cmp	r3, #0
 800718a:	d007      	beq.n	800719c <_nx_ip_dispatch_process+0xa8>
                    ip_ptr -> nx_ip_igmp_packet_receive(ip_ptr, packet_ptr);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8007192:	68b9      	ldr	r1, [r7, #8]
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	4798      	blx	r3
                    return(0);
 8007198:	2300      	movs	r3, #0
 800719a:	e054      	b.n	8007246 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 800719c:	2301      	movs	r3, #1
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	e037      	b.n	8007212 <_nx_ip_dispatch_process+0x11e>
            else if (protocol == NX_PROTOCOL_UDP)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b11      	cmp	r3, #17
 80071a6:	d10f      	bne.n	80071c8 <_nx_ip_dispatch_process+0xd4>
                    if (ip_ptr -> nx_ip_udp_packet_receive)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d007      	beq.n	80071c2 <_nx_ip_dispatch_process+0xce>
                        (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	4798      	blx	r3
                        return(0);
 80071be:	2300      	movs	r3, #0
 80071c0:	e041      	b.n	8007246 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 80071c2:	2301      	movs	r3, #1
 80071c4:	617b      	str	r3, [r7, #20]
            break;
 80071c6:	e024      	b.n	8007212 <_nx_ip_dispatch_process+0x11e>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00c      	beq.n	80071ec <_nx_ip_dispatch_process+0xf8>
                        if ((ip_ptr -> nx_ip_raw_ip_processing)(ip_ptr, protocol << 16, packet_ptr) == NX_SUCCESS)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	0411      	lsls	r1, r2, #16
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	4798      	blx	r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <_nx_ip_dispatch_process+0xf8>
                            return(0);
 80071e8:	2300      	movs	r3, #0
 80071ea:	e02c      	b.n	8007246 <_nx_ip_dispatch_process+0x152>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d105      	bne.n	8007202 <_nx_ip_dispatch_process+0x10e>
                    NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PROTOCOL_UNREACH_CODE);
 80071f6:	2300      	movs	r3, #0
 80071f8:	4a15      	ldr	r2, [pc, #84]	; (8007250 <_nx_ip_dispatch_process+0x15c>)
 80071fa:	68b9      	ldr	r1, [r7, #8]
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7ff fb53 	bl	80068a8 <_nx_icmpv4_send_error_message>
                ip_ptr -> nx_ip_unknown_protocols_received++;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	641a      	str	r2, [r3, #64]	; 0x40
                drop_packet = 1;
 800720c:	2301      	movs	r3, #1
 800720e:	617b      	str	r3, [r7, #20]
            break;
 8007210:	e7ff      	b.n	8007212 <_nx_ip_dispatch_process+0x11e>
 8007212:	bf00      	nop
        }


        /* If the previous header is processed without errors, move on to the next optional
           header. */
        if (!drop_packet)
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d010      	beq.n	800723c <_nx_ip_dispatch_process+0x148>
        else
        {
#ifndef NX_DISABLE_IP_INFO

            /* Decrement the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	1e5a      	subs	r2, r3, #1
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	621a      	str	r2, [r3, #32]

            /* Decrement the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	1ad2      	subs	r2, r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	625a      	str	r2, [r3, #36]	; 0x24

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	64da      	str	r2, [r3, #76]	; 0x4c
    while (!drop_packet)
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f43f af61 	beq.w	8007106 <_nx_ip_dispatch_process+0x12>
#endif /* NX_DISABLE_IP_INFO */
        }
    }

    return(drop_packet);
 8007244:	697b      	ldr	r3, [r7, #20]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	03020000 	.word	0x03020000

08007254 <_nx_ip_driver_deferred_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_deferred_processing(NX_IP *ip_ptr)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]

    /* Set event flags to wake the IP helper thread, which will in turn
       call the driver with the NX_LINK_DEFERRED_PROCESSING command.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_DRIVER_DEFERRED_EVENT, TX_OR);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007262:	2200      	movs	r2, #0
 8007264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007268:	4618      	mov	r0, r3
 800726a:	f004 fd1d 	bl	800bca8 <_tx_event_flags_set>
}
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <_nx_ip_driver_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip, ULONG fragment, ULONG next_hop_address)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b09e      	sub	sp, #120	; 0x78
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_IP_DRIVER driver_request;
UINT         index;
ULONG        network_mask;
ULONG        network;
UCHAR        loopback = NX_FALSE;
 8007284:	2300      	movs	r3, #0
 8007286:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	633b      	str	r3, [r7, #48]	; 0x30
    driver_request.nx_ip_driver_packet =                packet_ptr;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007296:	637b      	str	r3, [r7, #52]	; 0x34
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 8007298:	2300      	movs	r3, #0
 800729a:	61bb      	str	r3, [r7, #24]

    /* Determine if physical mapping is needed by the link driver.  */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_address_mapping_needed)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a0:	795b      	ldrb	r3, [r3, #5]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 8174 	beq.w	8007590 <_nx_ip_driver_packet_send+0x31a>
    {

        /* Get the network and network mask.*/
        network_mask = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network_mask;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	65fb      	str	r3, [r7, #92]	; 0x5c
        network = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Determine if an IP limited or directed broadcast is requested.  */
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072be:	d00d      	beq.n	80072dc <_nx_ip_driver_packet_send+0x66>
            (((destination_ip & network_mask) == network) &&
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c4:	4013      	ands	r3, r2
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 80072c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d110      	bne.n	80072ee <_nx_ip_driver_packet_send+0x78>
             ((destination_ip & ~network_mask) == ~network_mask)))
 80072cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ce:	43da      	mvns	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	401a      	ands	r2, r3
 80072d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072d6:	43db      	mvns	r3, r3
            (((destination_ip & network_mask) == network) &&
 80072d8:	429a      	cmp	r2, r3
 80072da:	d108      	bne.n	80072ee <_nx_ip_driver_packet_send+0x78>
        {

            /* Build the driver request.  */
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 80072dc:	2304      	movs	r3, #4
 80072de:	61bb      	str	r3, [r7, #24]
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 80072e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072e4:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 80072e6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24
 80072ec:	e162      	b.n	80075b4 <_nx_ip_driver_packet_send+0x33e>
        }
        /* Determine if we have a loopback address.  */
        else if (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d105      	bne.n	8007306 <_nx_ip_driver_packet_send+0x90>
        {
            loopback = NX_TRUE;
 80072fa:	2301      	movs	r3, #1
 80072fc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 8007300:	2300      	movs	r3, #0
 8007302:	637b      	str	r3, [r7, #52]	; 0x34
 8007304:	e156      	b.n	80075b4 <_nx_ip_driver_packet_send+0x33e>
        }
        /* Determine if we have a class D multicast address.  */
        else if ((destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800730c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8007310:	d133      	bne.n	800737a <_nx_ip_driver_packet_send+0x104>

            /* Yes, we have a class D multicast address.  Derive the physical mapping from
               the class D address.  */

            /* Determine if the group address has been joined in this IP instance.  */
            index =  0;
 8007312:	2300      	movs	r3, #0
 8007314:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 8007316:	e00f      	b.n	8007338 <_nx_ip_driver_packet_send+0xc2>
            {

                /* Determine if the destination address matches the requested address.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_join_list == destination_ip)
 8007318:	68f9      	ldr	r1, [r7, #12]
 800731a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800731c:	4613      	mov	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	440b      	add	r3, r1
 8007326:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	429a      	cmp	r2, r3
 8007330:	d006      	beq.n	8007340 <_nx_ip_driver_packet_send+0xca>
                    /* Yes, break the loop!  */
                    break;
                }

                /* Increment the join list index.  */
                index++;
 8007332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007334:	3301      	adds	r3, #1
 8007336:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 8007338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800733a:	2b06      	cmp	r3, #6
 800733c:	d9ec      	bls.n	8007318 <_nx_ip_driver_packet_send+0xa2>
 800733e:	e000      	b.n	8007342 <_nx_ip_driver_packet_send+0xcc>
                    break;
 8007340:	bf00      	nop
            }

            /* Determine if the group was joined by this IP instance.  */
            if (index < NX_MAX_MULTICAST_GROUPS)
 8007342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007344:	2b06      	cmp	r3, #6
 8007346:	d80e      	bhi.n	8007366 <_nx_ip_driver_packet_send+0xf0>
            {

                /* Determine if the group has loopback enabled.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_loopback_enable)
 8007348:	68f9      	ldr	r1, [r7, #12]
 800734a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800734c:	4613      	mov	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	440b      	add	r3, r1
 8007356:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <_nx_ip_driver_packet_send+0xf0>
                {
                    loopback = NX_TRUE;
 8007360:	2301      	movs	r3, #1
 8007362:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                }
            }

            /* Build the driver request. Derive the physical mapping from
               the class D address.  */
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 8007366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800736a:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007372:	f043 43bc 	orr.w	r3, r3, #1577058304	; 0x5e000000
 8007376:	627b      	str	r3, [r7, #36]	; 0x24
 8007378:	e11c      	b.n	80075b4 <_nx_ip_driver_packet_send+0x33e>

            NX_PARAMETER_NOT_USED(fragment);
            /* Look into the ARP Routing Table to derive the physical address.  */

            /* If we get here, the packet destination is a unicast address.  */
            destination_ip = next_hop_address;
 800737a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800737e:	607b      	str	r3, [r7, #4]

            /* Calculate the hash index for the destination IP address.  */
            index =  (UINT)((destination_ip + (destination_ip >> 8)) & NX_ARP_TABLE_MASK);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	0a1a      	lsrs	r2, r3, #8
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4413      	add	r3, r2
 8007388:	f003 031f 	and.w	r3, r3, #31
 800738c:	677b      	str	r3, [r7, #116]	; 0x74

            /* Determine if there is an entry for this IP address.  */
            arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007392:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8007396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739a:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Loop to look for an ARP match.  */
            while (arp_ptr)
 800739c:	e013      	b.n	80073c6 <_nx_ip_driver_packet_send+0x150>
            {

                /* Determine if this arp entry matches the destination IP address.  */
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 800739e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d012      	beq.n	80073ce <_nx_ip_driver_packet_send+0x158>
                    /* Yes, we found a match.  Get out of the loop!  */
                    break;
                }

                /* Move to the next active ARP entry.  */
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 80073a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Determine if we are at the end of the ARP list.  */
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80073b2:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 80073b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073bc:	429a      	cmp	r2, r3
 80073be:	d102      	bne.n	80073c6 <_nx_ip_driver_packet_send+0x150>
                {
                    /* Clear the ARP pointer.  */
                    arp_ptr =  NX_NULL;
 80073c0:	2300      	movs	r3, #0
 80073c2:	66fb      	str	r3, [r7, #108]	; 0x6c
                    break;
 80073c4:	e004      	b.n	80073d0 <_nx_ip_driver_packet_send+0x15a>
            while (arp_ptr)
 80073c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e8      	bne.n	800739e <_nx_ip_driver_packet_send+0x128>
 80073cc:	e000      	b.n	80073d0 <_nx_ip_driver_packet_send+0x15a>
                    break;
 80073ce:	bf00      	nop
                }
            }

            /* Determine if we actually found a matching and effective ARP entry.  */
            if ((arp_ptr) && (arp_ptr -> nx_arp_physical_address_msw | arp_ptr -> nx_arp_physical_address_lsw))
 80073d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d022      	beq.n	800741c <_nx_ip_driver_packet_send+0x1a6>
 80073d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073de:	4313      	orrs	r3, r2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01b      	beq.n	800741c <_nx_ip_driver_packet_send+0x1a6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80073e4:	f3ef 8310 	mrs	r3, PRIMASK
 80073e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 80073ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 80073ec:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 80073ee:	b672      	cpsid	i
    return(int_posture);
 80073f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
            {

                /* Disable interrupts temporarily.  */
                TX_DISABLE
 80073f2:	657b      	str	r3, [r7, #84]	; 0x54

                /* Yes, we have a physical mapping.  Copy the physical address into the driver
                   request structure.  */
                driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 80073f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	623b      	str	r3, [r7, #32]
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 80073fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	627b      	str	r3, [r7, #36]	; 0x24

                /* Move this ARP entry to the head of the list.  */
                ip_ptr -> nx_ip_arp_table[index] =  arp_ptr;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007404:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8007408:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800740a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800740e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007410:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007414:	f383 8810 	msr	PRIMASK, r3
}
 8007418:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE
 800741a:	e0cb      	b.n	80075b4 <_nx_ip_driver_packet_send+0x33e>
            }
            else
            {

                /* Determine if fragmentation is needed before queue the packet on the ARP waiting queue.  */
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	429a      	cmp	r2, r3
 8007428:	d910      	bls.n	800744c <_nx_ip_driver_packet_send+0x1d6>
                {

#ifndef NX_DISABLE_FRAGMENTATION
                    /* Check the DF bit flag.  */
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <_nx_ip_driver_packet_send+0x1c4>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d008      	beq.n	800744c <_nx_ip_driver_packet_send+0x1d6>
                    {

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	655a      	str	r2, [r3, #84]	; 0x54
#endif
                        /* Just release the packet.  */
                        _nx_packet_transmit_release(packet_ptr);
 8007444:	68b8      	ldr	r0, [r7, #8]
 8007446:	f001 ff85 	bl	8009354 <_nx_packet_transmit_release>

                        /* Return... nothing more can be done!  */
                        return;
 800744a:	e132      	b.n	80076b2 <_nx_ip_driver_packet_send+0x43c>
                    }
                }

                /* Determine if we actually found a matching ARP entry.  */
                if (arp_ptr)
 800744c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744e:	2b00      	cmp	r3, #0
 8007450:	d052      	beq.n	80074f8 <_nx_ip_driver_packet_send+0x282>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007452:	f3ef 8310 	mrs	r3, PRIMASK
 8007456:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 8007458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    int_posture = __get_interrupt_posture();
 800745a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 800745c:	b672      	cpsid	i
    return(int_posture);
 800745e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                {

                    /* Yes, we have an existing ARP mapping entry.  */

                    /* Disable interrupts temporarily.  */
                    TX_DISABLE
 8007460:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Ensure the current packet's queue next pointer to NULL.  */
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2200      	movs	r2, #0
 8007466:	61da      	str	r2, [r3, #28]

                    /* Determine if the queue is empty.  */
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 8007468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800746a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746c:	2b00      	cmp	r3, #0
 800746e:	d109      	bne.n	8007484 <_nx_ip_driver_packet_send+0x20e>
                    {

                        /* Yes, we have an empty ARP packet queue.  Simply place the
                           packet at the head of the list.  */
                        arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 8007470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	631a      	str	r2, [r3, #48]	; 0x30
 8007476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007478:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800747a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747c:	f383 8810 	msr	PRIMASK, r3
}
 8007480:	bf00      	nop
                    /* Call ARP send to send an ARP request.  */
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
                }

                /* Just return!  */
                return;
 8007482:	e115      	b.n	80076b0 <_nx_ip_driver_packet_send+0x43a>
                        last_packet =  arp_ptr -> nx_arp_packets_waiting;
 8007484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007488:	66bb      	str	r3, [r7, #104]	; 0x68
                        queued_count = 1;
 800748a:	2301      	movs	r3, #1
 800748c:	663b      	str	r3, [r7, #96]	; 0x60
                        while (last_packet -> nx_packet_queue_next)
 800748e:	e005      	b.n	800749c <_nx_ip_driver_packet_send+0x226>
                            queued_count++;
 8007490:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007492:	3301      	adds	r3, #1
 8007494:	663b      	str	r3, [r7, #96]	; 0x60
                            last_packet =  last_packet -> nx_packet_queue_next;
 8007496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	66bb      	str	r3, [r7, #104]	; 0x68
                        while (last_packet -> nx_packet_queue_next)
 800749c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1f5      	bne.n	8007490 <_nx_ip_driver_packet_send+0x21a>
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 80074a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	61da      	str	r2, [r3, #28]
                        remove_packet =  NX_NULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	667b      	str	r3, [r7, #100]	; 0x64
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 80074ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d913      	bls.n	80074dc <_nx_ip_driver_packet_send+0x266>
                            remove_packet =  arp_ptr -> nx_arp_packets_waiting;
 80074b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b8:	667b      	str	r3, [r7, #100]	; 0x64
                            arp_ptr -> nx_arp_packets_waiting =  remove_packet -> nx_packet_queue_next;
 80074ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074bc:	69da      	ldr	r2, [r3, #28]
 80074be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c0:	631a      	str	r2, [r3, #48]	; 0x30
                            remove_packet -> nx_packet_queue_next =  NX_NULL;
 80074c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074c4:	2200      	movs	r2, #0
 80074c6:	61da      	str	r2, [r3, #28]
                            ip_ptr -> nx_ip_transmit_resource_errors++;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	645a      	str	r2, [r3, #68]	; 0x44
                            ip_ptr -> nx_ip_send_packets_dropped++;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	655a      	str	r2, [r3, #84]	; 0x54
 80074dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074de:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	f383 8810 	msr	PRIMASK, r3
}
 80074e6:	bf00      	nop
                        if (remove_packet)
 80074e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 80e0 	beq.w	80076b0 <_nx_ip_driver_packet_send+0x43a>
                            _nx_packet_transmit_release(remove_packet);
 80074f0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80074f2:	f001 ff2f 	bl	8009354 <_nx_packet_transmit_release>
                return;
 80074f6:	e0db      	b.n	80076b0 <_nx_ip_driver_packet_send+0x43a>
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00e      	beq.n	8007520 <_nx_ip_driver_packet_send+0x2aa>
                        ((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 8007508:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800750a:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 800750e:	0092      	lsls	r2, r2, #2
 8007510:	68f9      	ldr	r1, [r7, #12]
 8007512:	4411      	add	r1, r2
 8007514:	2200      	movs	r2, #0
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	4798      	blx	r3
 800751a:	4603      	mov	r3, r0
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00d      	beq.n	800753c <_nx_ip_driver_packet_send+0x2c6>
                        ip_ptr -> nx_ip_transmit_resource_errors++;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007524:	1c5a      	adds	r2, r3, #1
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	645a      	str	r2, [r3, #68]	; 0x44
                        ip_ptr -> nx_ip_send_packets_dropped++;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	655a      	str	r2, [r3, #84]	; 0x54
                        _nx_packet_transmit_release(packet_ptr);
 8007534:	68b8      	ldr	r0, [r7, #8]
 8007536:	f001 ff0d 	bl	8009354 <_nx_packet_transmit_release>
                        return;
 800753a:	e0ba      	b.n	80076b2 <_nx_ip_driver_packet_send+0x43c>
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007540:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8007544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	66fb      	str	r3, [r7, #108]	; 0x6c
                    arp_ptr -> nx_arp_ip_address =            destination_ip;
 800754c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	621a      	str	r2, [r3, #32]
                    arp_ptr -> nx_arp_physical_address_msw =  0;
 8007552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007554:	2200      	movs	r2, #0
 8007556:	625a      	str	r2, [r3, #36]	; 0x24
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
 8007558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800755a:	2200      	movs	r2, #0
 800755c:	629a      	str	r2, [r3, #40]	; 0x28
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 800755e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007560:	220a      	movs	r2, #10
 8007562:	605a      	str	r2, [r3, #4]
                    arp_ptr -> nx_arp_retries =               0;
 8007564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007566:	2200      	movs	r2, #0
 8007568:	609a      	str	r2, [r3, #8]
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800756e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007570:	62da      	str	r2, [r3, #44]	; 0x2c
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2200      	movs	r2, #0
 8007576:	61da      	str	r2, [r3, #28]
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 8007578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	631a      	str	r2, [r3, #48]	; 0x30
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007588:	6879      	ldr	r1, [r7, #4]
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	4798      	blx	r3
                return;
 800758e:	e08f      	b.n	80076b0 <_nx_ip_driver_packet_send+0x43a>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */

        /* Determine if we have a loopback address.  */
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007596:	d302      	bcc.n	800759e <_nx_ip_driver_packet_send+0x328>
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 8007598:	687b      	ldr	r3, [r7, #4]
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800759a:	2b00      	cmp	r3, #0
 800759c:	da05      	bge.n	80075aa <_nx_ip_driver_packet_send+0x334>
            (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address))
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	695b      	ldr	r3, [r3, #20]
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d104      	bne.n	80075b4 <_nx_ip_driver_packet_send+0x33e>
        {

            /* Yes, we have an internal loopback address.  */
            loopback = NX_TRUE;
 80075aa:	2301      	movs	r3, #1
 80075ac:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Check whether the packet should be loop back. */
    if (loopback == NX_TRUE)
 80075b4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d131      	bne.n	8007620 <_nx_ip_driver_packet_send+0x3aa>
    {

        /* Copy the packet so it can be enqueued properly by the receive
           processing.  */
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 80075c2:	f107 0114 	add.w	r1, r7, #20
 80075c6:	2300      	movs	r3, #0
 80075c8:	68b8      	ldr	r0, [r7, #8]
 80075ca:	f001 fb73 	bl	8008cb4 <_nx_packet_copy>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d11b      	bne.n	800760c <_nx_ip_driver_packet_send+0x396>

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

            /* Compute checksum for upper layer protocol. */
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            if (packet_copy -> nx_packet_interface_capability_flag)
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <_nx_ip_driver_packet_send+0x36e>
            {
                _nx_ip_packet_checksum_compute(packet_copy);
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 f958 	bl	8007894 <_nx_ip_packet_checksum_compute>
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	699a      	ldr	r2, [r3, #24]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	4413      	add	r3, r2
 80075f8:	f1a3 0214 	sub.w	r2, r3, #20
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	619a      	str	r2, [r3, #24]
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_copy);

            /* Send the packet to this IP's receive processing like it came in from the
               driver.  */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	4619      	mov	r1, r3
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 fad1 	bl	8007bac <_nx_ip_packet_deferred_receive>
 800760a:	e009      	b.n	8007620 <_nx_ip_driver_packet_send+0x3aa>
#ifndef NX_DISABLE_IP_INFO
        else
        {

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	655a      	str	r2, [r3, #84]	; 0x54

            /* Increment the IP transmit resource error count.  */
            ip_ptr -> nx_ip_transmit_resource_errors++;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	645a      	str	r2, [r3, #68]	; 0x44
        }
#endif
    }

    /* Check whether the packet should be sent through driver. */
    if (driver_request.nx_ip_driver_interface)
 8007620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007622:	2b00      	cmp	r3, #0
 8007624:	d040      	beq.n	80076a8 <_nx_ip_driver_packet_send+0x432>
    {

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	429a      	cmp	r2, r3
 8007632:	d919      	bls.n	8007668 <_nx_ip_driver_packet_send+0x3f2>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Check the DF bit flag.  */
            if ((ip_ptr -> nx_ip_fragment_processing) && (fragment != NX_DONT_FRAGMENT))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <_nx_ip_driver_packet_send+0x3e0>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007644:	d007      	beq.n	8007656 <_nx_ip_driver_packet_send+0x3e0>
            {

                /* Fragmentation is needed, call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800764c:	f107 0218 	add.w	r2, r7, #24
 8007650:	4610      	mov	r0, r2
 8007652:	4798      	blx	r3
                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
            }

            /* In either case, this packet send is complete, just return.  */
            return;
 8007654:	e02d      	b.n	80076b2 <_nx_ip_driver_packet_send+0x43c>
                ip_ptr -> nx_ip_send_packets_dropped++;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	655a      	str	r2, [r3, #84]	; 0x54
                _nx_packet_transmit_release(packet_ptr);
 8007660:	68b8      	ldr	r0, [r7, #8]
 8007662:	f001 fe77 	bl	8009354 <_nx_packet_transmit_release>
            return;
 8007666:	e024      	b.n	80076b2 <_nx_ip_driver_packet_send+0x43c>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packet sent count.  */
        ip_ptr -> nx_ip_total_packets_sent++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	615a      	str	r2, [r3, #20]

        /* Increment the IP bytes sent count.  */
        ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	699a      	ldr	r2, [r3, #24]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	4413      	add	r3, r2
 800767c:	f1a3 0214 	sub.w	r2, r3, #20
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	619a      	str	r2, [r3, #24]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Driver entry must not be NULL. */
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768a:	2b00      	cmp	r3, #0
 800768c:	d104      	bne.n	8007698 <_nx_ip_driver_packet_send+0x422>
 800768e:	f04f 30ff 	mov.w	r0, #4294967295
 8007692:	f005 fe15 	bl	800d2c0 <_tx_thread_sleep>
 8007696:	e7fa      	b.n	800768e <_nx_ip_driver_packet_send+0x418>

        /* Broadcast packet.  */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769e:	f107 0218 	add.w	r2, r7, #24
 80076a2:	4610      	mov	r0, r2
 80076a4:	4798      	blx	r3
 80076a6:	e004      	b.n	80076b2 <_nx_ip_driver_packet_send+0x43c>
    }
    else
    {

        /* Release the transmit packet.  */
        _nx_packet_transmit_release(packet_ptr);
 80076a8:	68b8      	ldr	r0, [r7, #8]
 80076aa:	f001 fe53 	bl	8009354 <_nx_packet_transmit_release>
 80076ae:	e000      	b.n	80076b2 <_nx_ip_driver_packet_send+0x43c>
                return;
 80076b0:	bf00      	nop
    }
}
 80076b2:	3778      	adds	r7, #120	; 0x78
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <_nx_ip_header_add>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_header_add(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG source_ip, ULONG destination_ip,
                        ULONG type_of_service, ULONG time_to_live,  ULONG protocol, ULONG fragment)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08c      	sub	sp, #48	; 0x30
 80076bc:	af02      	add	r7, sp, #8
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	603b      	str	r3, [r7, #0]
ULONG           router_alert = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
NX_IPV4_HEADER *ip_header_ptr;
ULONG           checksum;
#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT            compute_checksum = 1;
 80076ca:	2301      	movs	r3, #1
 80076cc:	623b      	str	r3, [r7, #32]
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
ULONG           val;

#ifndef NX_DISABLE_IGMPV2
    /* Check IGMPv2 protocol. */
    if ((protocol == NX_IP_IGMP) && (ip_ptr -> nx_ip_igmp_router_version == NX_IGMP_HOST_VERSION_2))
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076d4:	d106      	bne.n	80076e4 <_nx_ip_header_add+0x2c>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d101      	bne.n	80076e4 <_nx_ip_header_add+0x2c>
    {
        router_alert = 4;
 80076e0:	2304      	movs	r3, #4
 80076e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076ea:	f06f 0313 	mvn.w	r3, #19
 80076ee:	1a5b      	subs	r3, r3, r1
 80076f0:	441a      	add	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	4413      	add	r3, r2
 80076fe:	f103 0214 	add.w	r2, r3, #20
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	625a      	str	r2, [r3, #36]	; 0x24

    /* Assert prepend pointer is no less than data start pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	429a      	cmp	r2, r3
 8007710:	d204      	bcs.n	800771c <_nx_ip_header_add+0x64>
 8007712:	f04f 30ff 	mov.w	r0, #4294967295
 8007716:	f005 fdd3 	bl	800d2c0 <_tx_thread_sleep>
 800771a:	e7fa      	b.n	8007712 <_nx_ip_header_add+0x5a>

    /* Setup the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	61fb      	str	r3, [r7, #28]
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	689a      	ldr	r2, [r3, #8]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	635a      	str	r2, [r3, #52]	; 0x34
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
                                                       sizeof(NX_IPV4_HEADER) + router_alert);
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	b2db      	uxtb	r3, r3
 8007734:	4413      	add	r3, r2
 8007736:	b2db      	uxtb	r3, r3
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 8007738:	3314      	adds	r3, #20
 800773a:	b2da      	uxtb	r2, r3
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    /* Determine if this is an identical copy for TCP retransmission.
       RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007748:	2b01      	cmp	r3, #1
 800774a:	d101      	bne.n	8007750 <_nx_ip_header_add+0x98>
    {

        /* Yes, this an identical copy for TCP retransmission.
           The IP header has been added, return.  */
        return(NX_SUCCESS);
 800774c:	2300      	movs	r3, #0
 800774e:	e089      	b.n	8007864 <_nx_ip_header_add+0x1ac>
    }

    /* Build the IP header.  */

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	2b00      	cmp	r3, #0
 8007754:	d009      	beq.n	800776a <_nx_ip_header_add+0xb2>

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
                                                        (NX_IP_HEADER_LENGTH_ENCODE_6 << 24) |
                                                        type_of_service |
                                                        (0xFFFF & packet_ptr -> nx_packet_length));
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	b29a      	uxth	r2, r3
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	4313      	orrs	r3, r2
 8007760:	f043 428c 	orr.w	r2, r3, #1174405120	; 0x46000000
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	601a      	str	r2, [r3, #0]
 8007768:	e008      	b.n	800777c <_nx_ip_header_add+0xc4>
    else
#endif
    {

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	b29a      	uxth	r2, r3
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	4313      	orrs	r3, r2
 8007774:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	601a      	str	r2, [r3, #0]
    }

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8007782:	1c59      	adds	r1, r3, #1
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	f8c2 1134 	str.w	r1, [r2, #308]	; 0x134
 800778a:	041a      	lsls	r2, r3, #16
 800778c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778e:	431a      	orrs	r2, r3
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 8007794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007796:	061a      	lsls	r2, r3, #24
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	431a      	orrs	r2, r3
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  source_ip;
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  destination_ip;
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	683a      	ldr	r2, [r7, #0]
 80077aa:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d004      	beq.n	80077bc <_nx_ip_header_add+0x104>
    {

        /* Append Router Alert Option. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))) = (NX_IP_OPTION_COPY_FLAG |
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	3314      	adds	r3, #20
 80077b8:	4a2c      	ldr	r2, [pc, #176]	; (800786c <_nx_ip_header_add+0x1b4>)
 80077ba:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	ba1a      	rev	r2, r3
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	ba1a      	rev	r2, r3
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	ba1a      	rev	r2, r3
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	ba1a      	rev	r2, r3
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	ba1a      	rev	r2, r3
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	611a      	str	r2, [r3, #16]
#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d008      	beq.n	8007806 <_nx_ip_header_add+0x14e>
    {

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_CHANGE_ULONG_ENDIAN(*((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))));
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	3314      	adds	r3, #20
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	3314      	adds	r3, #20
 8007802:	ba12      	rev	r2, r2
 8007804:	601a      	str	r2, [r3, #0]

#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_IP_TX_CHECKSUM */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <_nx_ip_header_add+0x160>
    {
        compute_checksum = 0;
 8007814:	2300      	movs	r3, #0
 8007816:	623b      	str	r3, [r7, #32]
    }

#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d01b      	beq.n	8007856 <_nx_ip_header_add+0x19e>
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* Length is the size of IP header, including options */
                                           (UINT)(20 + router_alert),
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	f103 0214 	add.w	r2, r3, #20
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8007824:	2300      	movs	r3, #0
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	2300      	movs	r3, #0
 800782a:	2104      	movs	r1, #4
 800782c:	68b8      	ldr	r0, [r7, #8]
 800782e:	f7ff f9d8 	bl	8006be2 <_nx_ip_checksum_compute>
 8007832:	4603      	mov	r3, r0
 8007834:	61bb      	str	r3, [r7, #24]
                                           /* IPv4 header checksum does not use src/dest addresses */
                                           NULL, NULL);

        val = (ULONG)(~checksum);
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	43db      	mvns	r3, r3
 800783a:	617b      	str	r3, [r7, #20]
        val = val & NX_LOWER_16_MASK;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	b29b      	uxth	r3, r3
 8007840:	617b      	str	r3, [r7, #20]

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	ba1b      	rev	r3, r3
 8007846:	617b      	str	r3, [r7, #20]

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	431a      	orrs	r2, r3
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	609a      	str	r2, [r3, #8]
 8007854:	e005      	b.n	8007862 <_nx_ip_header_add+0x1aa>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	f043 0201 	orr.w	r2, r3, #1
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Return...  */
    return(NX_SUCCESS);
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3728      	adds	r7, #40	; 0x28
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	94040000 	.word	0x94040000

08007870 <_nx_ip_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_initialize(VOID)
{
 8007870:	b480      	push	{r7}
 8007872:	af00      	add	r7, sp, #0

    /* Initialize the created IP instance variables.  */
    _nx_ip_created_ptr =     NX_NULL;
 8007874:	4b05      	ldr	r3, [pc, #20]	; (800788c <_nx_ip_initialize+0x1c>)
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]
    _nx_ip_created_count =   0;
 800787a:	4b05      	ldr	r3, [pc, #20]	; (8007890 <_nx_ip_initialize+0x20>)
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]
}
 8007880:	bf00      	nop
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	20014828 	.word	0x20014828
 8007890:	2001482c 	.word	0x2001482c

08007894 <_nx_ip_packet_checksum_compute>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_checksum_compute(NX_PACKET *packet_ptr)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b098      	sub	sp, #96	; 0x60
 8007898:	af02      	add	r7, sp, #8
 800789a:	6078      	str	r0, [r7, #4]
ULONG             next_protocol;
UCHAR            *org_prepend_ptr;
ULONG             checksum;
ULONG             val;
UCHAR             is_done = NX_FALSE;
 800789c:	2300      	movs	r3, #0
 800789e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
ULONG             ip_header_length;
ULONG             ip_src_addr[4];
ULONG             ip_dst_addr[4];
ULONG             data_length = 0;
 80078a2:	2300      	movs	r3, #0
 80078a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Get IP version. */
#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
    {
#endif
        next_protocol = NX_PROTOCOL_IPV4;
 80078a6:	2304      	movs	r3, #4
 80078a8:	657b      	str	r3, [r7, #84]	; 0x54
        next_protocol = NX_PROTOCOL_IPV6;
    }
#endif

    /* Store original prepend_ptr. */
    org_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Loop to process headers. */
    while (!is_done)
 80078b0:	e170      	b.n	8007b94 <_nx_ip_packet_checksum_compute+0x300>
    {
        switch (next_protocol)
 80078b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b4:	3b01      	subs	r3, #1
 80078b6:	2b10      	cmp	r3, #16
 80078b8:	f200 8168 	bhi.w	8007b8c <_nx_ip_packet_checksum_compute+0x2f8>
 80078bc:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <_nx_ip_packet_checksum_compute+0x30>)
 80078be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c2:	bf00      	nop
 80078c4:	08007a87 	.word	0x08007a87
 80078c8:	08007ae7 	.word	0x08007ae7
 80078cc:	08007b8d 	.word	0x08007b8d
 80078d0:	08007909 	.word	0x08007909
 80078d4:	08007b8d 	.word	0x08007b8d
 80078d8:	080079b9 	.word	0x080079b9
 80078dc:	08007b8d 	.word	0x08007b8d
 80078e0:	08007b8d 	.word	0x08007b8d
 80078e4:	08007b8d 	.word	0x08007b8d
 80078e8:	08007b8d 	.word	0x08007b8d
 80078ec:	08007b8d 	.word	0x08007b8d
 80078f0:	08007b8d 	.word	0x08007b8d
 80078f4:	08007b8d 	.word	0x08007b8d
 80078f8:	08007b8d 	.word	0x08007b8d
 80078fc:	08007b8d 	.word	0x08007b8d
 8007900:	08007b8d 	.word	0x08007b8d
 8007904:	08007a23 	.word	0x08007a23
        {

            /* It's assumed that the IP link driver has positioned the top pointer in the
               packet to the start of the IP address... so that's where we will start.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Pick up the first word in the IP header. */
            val = ip_header_ptr -> nx_ip_header_word_0;
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	637b      	str	r3, [r7, #52]	; 0x34

            /* Convert to host byte order. */
            NX_CHANGE_ULONG_ENDIAN(val);
 8007914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007916:	ba1b      	rev	r3, r3
 8007918:	637b      	str	r3, [r7, #52]	; 0x34

            /* Obtain IP header length. */
            ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 800791a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791c:	0e1b      	lsrs	r3, r3, #24
 800791e:	f003 030f 	and.w	r3, r3, #15
 8007922:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check if IPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01f      	beq.n	8007970 <_nx_ip_packet_checksum_compute+0xdc>
            {

                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                                   /* length is the size of IP header, including options */
                                                   ip_header_length << 2,
 8007930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007932:	009a      	lsls	r2, r3, #2
                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8007934:	2300      	movs	r3, #0
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	2300      	movs	r3, #0
 800793a:	2104      	movs	r1, #4
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7ff f950 	bl	8006be2 <_nx_ip_checksum_compute>
 8007942:	4603      	mov	r3, r0
 8007944:	647b      	str	r3, [r7, #68]	; 0x44
                                                   /* IPv4 header checksum doesn't care src/dest addresses */
                                                   NULL, NULL);

                val = (ULONG)(~checksum);
 8007946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007948:	43db      	mvns	r3, r3
 800794a:	637b      	str	r3, [r7, #52]	; 0x34
                val = val & NX_LOWER_16_MASK;
 800794c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794e:	b29b      	uxth	r3, r3
 8007950:	637b      	str	r3, [r7, #52]	; 0x34

                /* Convert to network byte order. */
                NX_CHANGE_ULONG_ENDIAN(val);
 8007952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007954:	ba1b      	rev	r3, r3
 8007956:	637b      	str	r3, [r7, #52]	; 0x34

                /* Now store the checksum in the IP header.  */
                ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8007958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795e:	431a      	orrs	r2, r3
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	609a      	str	r2, [r3, #8]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007968:	f023 0201 	bic.w	r2, r3, #1
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	639a      	str	r2, [r3, #56]	; 0x38
            }


            /* Get src and dst addresses. */
            ip_src_addr[0] = ip_header_ptr -> nx_ip_header_source_ip;
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	61bb      	str	r3, [r7, #24]
            ip_dst_addr[0] = ip_header_ptr -> nx_ip_header_destination_ip;
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	60bb      	str	r3, [r7, #8]
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	ba1b      	rev	r3, r3
 8007980:	61bb      	str	r3, [r7, #24]
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	ba1b      	rev	r3, r3
 8007986:	60bb      	str	r3, [r7, #8]

            /* Get next protocol. */
            val = ip_header_ptr -> nx_ip_header_word_2;
 8007988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	637b      	str	r3, [r7, #52]	; 0x34
            NX_CHANGE_ULONG_ENDIAN(val);
 800798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007990:	ba1b      	rev	r3, r3
 8007992:	637b      	str	r3, [r7, #52]	; 0x34
            next_protocol = (val >> 16) & 0xFF;
 8007994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007996:	0c1b      	lsrs	r3, r3, #16
 8007998:	b2db      	uxtb	r3, r3
 800799a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Remove IPv4 header. */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + (ip_header_length << 2);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	441a      	add	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	609a      	str	r2, [r3, #8]
            data_length = packet_ptr -> nx_packet_length - (ip_header_length << 2);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	64fb      	str	r3, [r7, #76]	; 0x4c
            break;
 80079b6:	e0ed      	b.n	8007b94 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_TCP:
        {

            /* Check if TCP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d02a      	beq.n	8007a1a <_nx_ip_packet_checksum_compute+0x186>
            {

                /* Calculate the TCP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 80079c4:	f107 0218 	add.w	r2, r7, #24
 80079c8:	f107 0308 	add.w	r3, r7, #8
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	4613      	mov	r3, r2
 80079d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079d2:	2106      	movs	r1, #6
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff f904 	bl	8006be2 <_nx_ip_checksum_compute>
 80079da:	4603      	mov	r3, r0
 80079dc:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the TCP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c

                checksum = ~checksum & NX_LOWER_16_MASK;
 80079e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079e6:	43db      	mvns	r3, r3
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	647b      	str	r3, [r7, #68]	; 0x44

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 80079ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	ba1a      	rev	r2, r3
 80079f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f4:	611a      	str	r2, [r3, #16]
                tcp_header_ptr -> nx_tcp_header_word_4 |=  (checksum << NX_SHIFT_BY_16);
 80079f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f8:	691a      	ldr	r2, [r3, #16]
 80079fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079fc:	041b      	lsls	r3, r3, #16
 80079fe:	431a      	orrs	r2, r3
 8007a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a02:	611a      	str	r2, [r3, #16]
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	ba1a      	rev	r2, r3
 8007a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a0c:	611a      	str	r2, [r3, #16]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	f023 0204 	bic.w	r2, r3, #4
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007a20:	e0b8      	b.n	8007b94 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_UDP:
        {

            /* Check if UDP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	f003 0310 	and.w	r3, r3, #16
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d027      	beq.n	8007a7e <_nx_ip_packet_checksum_compute+0x1ea>
            {

                /* Calculate the UDP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_UDP,
 8007a2e:	f107 0218 	add.w	r2, r7, #24
 8007a32:	f107 0308 	add.w	r3, r7, #8
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a3c:	2111      	movs	r1, #17
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff f8cf 	bl	8006be2 <_nx_ip_checksum_compute>
 8007a44:	4603      	mov	r3, r0
 8007a46:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the UDP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8007a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	ba1a      	rev	r2, r3
 8007a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a56:	605a      	str	r2, [r3, #4]
                udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | (~checksum & NX_LOWER_16_MASK);
 8007a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a5e:	43db      	mvns	r3, r3
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	431a      	orrs	r2, r3
 8007a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a66:	605a      	str	r2, [r3, #4]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8007a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	ba1a      	rev	r2, r3
 8007a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a70:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a76:	f023 0210 	bic.w	r2, r3, #16
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007a84:	e086      	b.n	8007b94 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_ICMP:
        {

            /* Check if ICMPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d025      	beq.n	8007ade <_nx_ip_packet_checksum_compute+0x24a>
            {

                /* Calculate the ICMPv4 checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 8007a92:	2300      	movs	r3, #0
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	2300      	movs	r3, #0
 8007a98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a9a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff f89f 	bl	8006be2 <_nx_ip_checksum_compute>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	647b      	str	r3, [r7, #68]	; 0x44
                                                    /* ICMPV4 header checksum doesn't care src/dest addresses */
                                                    NULL, NULL);

                /* Pickup the pointer to the head of the ICMPv4 packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                icmpv4_header_ptr =  (NX_ICMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 8007aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	ba1a      	rev	r2, r3
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	601a      	str	r2, [r3, #0]
                icmpv4_header_ptr -> nx_icmp_header_word_0 =  icmpv4_header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 8007ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007abe:	43db      	mvns	r3, r3
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	ba1a      	rev	r2, r3
 8007ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad0:	601a      	str	r2, [r3, #0]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007ae4:	e056      	b.n	8007b94 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_IGMP:
        {

            /* Check if IGMP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d048      	beq.n	8007b84 <_nx_ip_packet_checksum_compute+0x2f0>
            {

                /* Pickup the pointer to the head of the IGMP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                igmp_header_ptr =  (NX_IGMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	ba1a      	rev	r2, r3
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	ba1a      	rev	r2, r3
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	605a      	str	r2, [r3, #4]

                /* Calculate the checksum.  */
                val =       igmp_header_ptr -> nx_igmp_header_word_0;
 8007b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	637b      	str	r3, [r7, #52]	; 0x34
                checksum =  (val >> NX_SHIFT_BY_16);
 8007b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b14:	0c1b      	lsrs	r3, r3, #16
 8007b16:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 8007b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b1e:	4413      	add	r3, r2
 8007b20:	647b      	str	r3, [r7, #68]	; 0x44
                val =      igmp_header_ptr -> nx_igmp_header_word_1;
 8007b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (val >> NX_SHIFT_BY_16);
 8007b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2a:	0c1b      	lsrs	r3, r3, #16
 8007b2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b2e:	4413      	add	r3, r2
 8007b30:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 8007b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b38:	4413      	add	r3, r2
 8007b3a:	647b      	str	r3, [r7, #68]	; 0x44

                /* Add in the carry bits into the checksum.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 8007b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b3e:	0c1a      	lsrs	r2, r3, #16
 8007b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	4413      	add	r3, r2
 8007b46:	647b      	str	r3, [r7, #68]	; 0x44

                /* Do it again in case previous operation generates an overflow.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 8007b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b4a:	0c1a      	lsrs	r2, r3, #16
 8007b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	4413      	add	r3, r2
 8007b52:	647b      	str	r3, [r7, #68]	; 0x44

                /* Place the checksum into the first header word.  */
                igmp_header_ptr -> nx_igmp_header_word_0 =  igmp_header_ptr -> nx_igmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b5a:	43db      	mvns	r3, r3
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b62:	601a      	str	r2, [r3, #0]

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 8007b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	ba1a      	rev	r2, r3
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8007b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	ba1a      	rev	r2, r3
 8007b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b76:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007b84:	2301      	movs	r3, #1
 8007b86:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007b8a:	e003      	b.n	8007b94 <_nx_ip_packet_checksum_compute+0x300>
        }
#endif

        default:
            /* Unsupported protocol. */
            is_done = NX_TRUE;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007b92:	bf00      	nop
    while (!is_done)
 8007b94:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f43f ae8a 	beq.w	80078b2 <_nx_ip_packet_checksum_compute+0x1e>
        }
    }


    /* Restore origianl prepend_ptr. */
    packet_ptr -> nx_packet_prepend_ptr = org_prepend_ptr;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ba2:	609a      	str	r2, [r3, #8]
    return;
 8007ba4:	bf00      	nop
}
 8007ba6:	3758      	adds	r7, #88	; 0x58
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <_nx_ip_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b088      	sub	sp, #32
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8007bba:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007bbc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007bbe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007bc0:	b672      	cpsid	i
    return(int_posture);
 8007bc2:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8007bc4:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if the deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_deferred_received_packet_head)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d011      	beq.n	8007bf4 <_nx_ip_packet_deferred_receive+0x48>
    {

        /* Not empty, just place the packet at the end of the queue.  */
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f383 8810 	msr	PRIMASK, r3
}
 8007bf2:	e019      	b.n	8007c28 <_nx_ip_packet_deferred_receive+0x7c>
    {

        /* Empty deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the deferred processing
           queue.  */
        ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        packet_ptr -> nx_packet_queue_next =             NX_NULL;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2200      	movs	r2, #0
 8007c08:	61da      	str	r2, [r3, #28]
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f383 8810 	msr	PRIMASK, r3
}
 8007c14:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the IP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	2108      	movs	r1, #8
 8007c20:	4618      	mov	r0, r3
 8007c22:	f004 f841 	bl	800bca8 <_tx_event_flags_set>
    }
}
 8007c26:	bf00      	nop
 8007c28:	bf00      	nop
 8007c2a:	3720      	adds	r7, #32
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <_nx_ip_packet_receive>:
/*                                            added new ip filter,        */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
UCHAR version_byte;


#ifndef NX_DISABLE_IP_INFO
    /* Increment the IP packet count.  */
    ip_ptr -> nx_ip_total_packets_received++;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	61da      	str	r2, [r3, #28]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* If packet_ptr -> nx_packet_interface_ptr is not set, stamp the packet with interface[0].
       Legacy Ethernet drivers do not stamp incoming packets. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <_nx_ip_packet_receive+0x26>
    {
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f503 62e4 	add.w	r2, r3, #1824	; 0x720
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    version_byte =  *(packet_ptr -> nx_packet_prepend_ptr);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	73fb      	strb	r3, [r7, #15]

    /* Check the version number */
    ip_version = (version_byte >> 4);
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
 8007c60:	091b      	lsrs	r3, r3, #4
 8007c62:	73bb      	strb	r3, [r7, #14]

    packet_ptr -> nx_packet_ip_version = ip_version;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	7bba      	ldrb	r2, [r7, #14]
 8007c68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	689a      	ldr	r2, [r3, #8]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* NX_ENABLE_IP_PACKET_FILTER */

#ifndef NX_DISABLE_IPV4

    /* Process the packet according to IP version. */
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 8007c74:	7bbb      	ldrb	r3, [r7, #14]
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d10b      	bne.n	8007c92 <_nx_ip_packet_receive+0x62>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d006      	beq.n	8007c92 <_nx_ip_packet_receive+0x62>
    {

        /* Call the IPv4 packet handler. */
        (ip_ptr -> nx_ipv4_packet_receive)(ip_ptr, packet_ptr);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	4798      	blx	r3
        return;
 8007c90:	e00d      	b.n	8007cae <_nx_ip_packet_receive+0x7e>
        not defined.  In this case, the packet is reclaimed. */

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP invalid packet error.  */
    ip_ptr -> nx_ip_invalid_packets++;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c96:	1c5a      	adds	r2, r3, #1
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment the IP receive packets dropped count.  */
    ip_ptr -> nx_ip_receive_packets_dropped++;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

    _nx_packet_release(packet_ptr);
 8007ca6:	6838      	ldr	r0, [r7, #0]
 8007ca8:	f001 fa9c 	bl	80091e4 <_nx_packet_release>

    return;
 8007cac:	bf00      	nop
}
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <_nx_ip_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                         ULONG destination_ip, ULONG type_of_service, ULONG time_to_live,
                         ULONG protocol, ULONG fragment, ULONG next_hop_address)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af04      	add	r7, sp, #16
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IP_INFO

    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	611a      	str	r2, [r3, #16]
#endif

    /* Make sure the packet interface is set. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d114      	bne.n	8007cfe <_nx_ip_packet_send+0x4a>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_transmit_packets++;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

        /* Prepend the IP header to the packet.  First, make room for the IP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f1a3 0214 	sub.w	r2, r3, #20
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	609a      	str	r2, [r3, #8]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cee:	f103 0214 	add.w	r2, r3, #20
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Release the packet.  */
        _nx_packet_transmit_release(packet_ptr);
 8007cf6:	68b8      	ldr	r0, [r7, #8]
 8007cf8:	f001 fb2c 	bl	8009354 <_nx_packet_transmit_release>

        /* Return... nothing more can be done!  */
        return;
 8007cfc:	e03b      	b.n	8007d76 <_nx_ip_packet_send+0xc2>
    if (!is_hw_processed)
#endif /* NX_IPSEC_ENABLE  */
    {

        /* Add the IP Header to the packet.  */
        _nx_ip_header_add(ip_ptr, packet_ptr, packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address,
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d02:	695a      	ldr	r2, [r3, #20]
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	9303      	str	r3, [sp, #12]
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	9302      	str	r3, [sp, #8]
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	9301      	str	r3, [sp, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f7ff fccd 	bl	80076b8 <_nx_ip_header_add>
    }

#endif

    /* If the next hop address is null, indicates the specified interface is unreached.  */
    if (next_hop_address == 0)
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d120      	bne.n	8007d66 <_nx_ip_packet_send+0xb2>
    {

        /* Check whether the forward feature is enabled.  */
        if (ip_ptr -> nx_ip_forward_packet_process)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00b      	beq.n	8007d46 <_nx_ip_packet_send+0x92>
        {

            /* Initialize the interface.  */
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2200      	movs	r2, #0
 8007d32:	631a      	str	r2, [r3, #48]	; 0x30

            /* Figure out the best interface to send the packet on. */
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d3e:	6879      	ldr	r1, [r7, #4]
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f82d 	bl	8007da0 <_nx_ip_route_find>
        }

        /* Make sure the packet interface and next hop address are set. */
        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        if ((packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL) || (next_hop_address == 0))
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d002      	beq.n	8007d54 <_nx_ip_packet_send+0xa0>
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d108      	bne.n	8007d66 <_nx_ip_packet_send+0xb2>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_transmit_packets++;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	1c5a      	adds	r2, r3, #1
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

            /* Release the packet.  */
            _nx_packet_transmit_release(packet_ptr);
 8007d5e:	68b8      	ldr	r0, [r7, #8]
 8007d60:	f001 faf8 	bl	8009354 <_nx_packet_transmit_release>

            /* Return... nothing more can be done!  */
            return;
 8007d64:	e007      	b.n	8007d76 <_nx_ip_packet_send+0xc2>
        }
    }

    /* Directly send the packet.  */
    _nx_ip_driver_packet_send(ip_ptr, packet_ptr, destination_ip, fragment, next_hop_address);
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	68b9      	ldr	r1, [r7, #8]
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f7ff fa80 	bl	8007276 <_nx_ip_driver_packet_send>
}
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <_nx_ip_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_periodic_timer_entry(ULONG ip_address)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_PERIODIC_EVENT, TX_OR);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2101      	movs	r1, #1
 8007d92:	4618      	mov	r0, r3
 8007d94:	f003 ff88 	bl	800bca8 <_tx_event_flags_set>
}
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <_nx_ip_route_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _nx_ip_route_find(NX_IP *ip_ptr, ULONG destination_address, NX_INTERFACE **ip_interface_ptr, ULONG *next_hop_address)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
 8007dac:	603b      	str	r3, [r7, #0]

NX_INTERFACE *interface_ptr;
ULONG         i;

    /* Initialize the next hop address. */
    *next_hop_address = 0;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]

    /* Determine if the destination_address is multicast or directed broadcast. */
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007dba:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8007dbe:	d003      	beq.n	8007dc8 <_nx_ip_route_find+0x28>
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc6:	d132      	bne.n	8007e2e <_nx_ip_route_find+0x8e>
        (destination_address  == NX_IP_LIMITED_BROADCAST))
    {

        *next_hop_address = destination_address;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	601a      	str	r2, [r3, #0]

        /* If the caller did not set the ip_interface value, find a link enabled 
           interface, starting with the primary interface, for transmission.  */
        if (*ip_interface_ptr == NX_NULL)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d122      	bne.n	8007e1c <_nx_ip_route_find+0x7c>
        {

            /* Find an interface whose link is up. */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	617b      	str	r3, [r7, #20]
 8007dda:	e01b      	b.n	8007e14 <_nx_ip_route_find+0x74>
            {

                if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up)
 8007ddc:	68f9      	ldr	r1, [r7, #12]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	4613      	mov	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	011b      	lsls	r3, r3, #4
 8007de8:	440b      	add	r3, r1
 8007dea:	f203 7326 	addw	r3, r3, #1830	; 0x726
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00c      	beq.n	8007e0e <_nx_ip_route_find+0x6e>
                {
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	4613      	mov	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	011b      	lsls	r3, r3, #4
 8007dfe:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	441a      	add	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	601a      	str	r2, [r3, #0]
                    return(NX_SUCCESS);
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e13d      	b.n	800808a <_nx_ip_route_find+0x2ea>
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	3301      	adds	r3, #1
 8007e12:	617b      	str	r3, [r7, #20]
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0e0      	beq.n	8007ddc <_nx_ip_route_find+0x3c>
 8007e1a:	e006      	b.n	8007e2a <_nx_ip_route_find+0x8a>
                }
            }
        }
        /* If the specified interface is up, return success. */
        else if ((*ip_interface_ptr) -> nx_interface_link_up)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	799b      	ldrb	r3, [r3, #6]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <_nx_ip_route_find+0x8a>
        {
            return(NX_SUCCESS);
 8007e26:	2300      	movs	r3, #0
 8007e28:	e12f      	b.n	800808a <_nx_ip_route_find+0x2ea>
        }

        /* No available interface. */
        return(NX_IP_ADDRESS_ERROR);
 8007e2a:	2321      	movs	r3, #33	; 0x21
 8007e2c:	e12d      	b.n	800808a <_nx_ip_route_find+0x2ea>
    }

    /* Search through the interfaces associated with the IP instance,
       check if the the destination address is one of the local interface addresses. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8007e2e:	2300      	movs	r3, #0
 8007e30:	617b      	str	r3, [r7, #20]
 8007e32:	e02a      	b.n	8007e8a <_nx_ip_route_find+0xea>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	4613      	mov	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	011b      	lsls	r3, r3, #4
 8007e3e:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	4413      	add	r3, r2
 8007e46:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	791b      	ldrb	r3, [r3, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d019      	beq.n	8007e84 <_nx_ip_route_find+0xe4>
            (interface_ptr -> nx_interface_link_up) &&
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d015      	beq.n	8007e84 <_nx_ip_route_find+0xe4>
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	695b      	ldr	r3, [r3, #20]
            (interface_ptr -> nx_interface_link_up) &&
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d110      	bne.n	8007e84 <_nx_ip_route_find+0xe4>
            ((*ip_interface_ptr == NX_NULL) ||
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d004      	beq.n	8007e74 <_nx_ip_route_find+0xd4>
             (*ip_interface_ptr == interface_ptr)))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
            ((*ip_interface_ptr == NX_NULL) ||
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d107      	bne.n	8007e84 <_nx_ip_route_find+0xe4>
        {

            /* Yes, use the entry information for interface and next hop. */
            *ip_interface_ptr = interface_ptr;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	601a      	str	r2, [r3, #0]
            *next_hop_address = destination_address;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 8007e80:	2300      	movs	r3, #0
 8007e82:	e102      	b.n	800808a <_nx_ip_route_find+0x2ea>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	3301      	adds	r3, #1
 8007e88:	617b      	str	r3, [r7, #20]
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d0d1      	beq.n	8007e34 <_nx_ip_route_find+0x94>

#endif /* NX_ENABLE_IP_STATIC_ROUTING */

    /* Search through the interfaces associated with the IP instance,
       check if the entry exists. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8007e90:	2300      	movs	r3, #0
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	e036      	b.n	8007f04 <_nx_ip_route_find+0x164>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	791b      	ldrb	r3, [r3, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d025      	beq.n	8007efe <_nx_ip_route_find+0x15e>
            (interface_ptr -> nx_interface_link_up) &&
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d021      	beq.n	8007efe <_nx_ip_route_find+0x15e>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	401a      	ands	r2, r3
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	69db      	ldr	r3, [r3, #28]
            (interface_ptr -> nx_interface_link_up) &&
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d119      	bne.n	8007efe <_nx_ip_route_find+0x15e>
        {

            /* Yes, use the entry information for interface and next hop. */
            if (*ip_interface_ptr == NX_NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d103      	bne.n	8007eda <_nx_ip_route_find+0x13a>
            {
                *ip_interface_ptr = interface_ptr;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	e00b      	b.n	8007ef2 <_nx_ip_route_find+0x152>
            }
            /* Match loopback interface.  */
            /* Suppress constant value, since "NX_MAX_IP_INTERFACES" can be redefined. */
#if (NX_MAX_IP_INTERFACES == (NX_MAX_PHYSICAL_INTERFACES + 1))
            else if (i == NX_MAX_PHYSICAL_INTERFACES)
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d103      	bne.n	8007ee8 <_nx_ip_route_find+0x148>
            {
                *ip_interface_ptr = interface_ptr;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	e004      	b.n	8007ef2 <_nx_ip_route_find+0x152>
            }
#endif
            else if (*ip_interface_ptr != interface_ptr)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d104      	bne.n	8007efc <_nx_ip_route_find+0x15c>
            {
                continue;
            }

            *next_hop_address = destination_address;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e0c6      	b.n	800808a <_nx_ip_route_find+0x2ea>
                continue;
 8007efc:	bf00      	nop
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	3301      	adds	r3, #1
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d9c5      	bls.n	8007e96 <_nx_ip_route_find+0xf6>
        }
    }

    /* Search the interfaces for IPv4 Link-Local Address according to RFC3927, section2.6.  */
    /* Determine if destination addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if ((destination_address & 0xFFFF0000) == 0xA9FE0000)
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	0c1b      	lsrs	r3, r3, #16
 8007f0e:	041b      	lsls	r3, r3, #16
 8007f10:	4a61      	ldr	r2, [pc, #388]	; (8008098 <_nx_ip_route_find+0x2f8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d143      	bne.n	8007f9e <_nx_ip_route_find+0x1fe>
    {

        /* Yes, check if the interface is set.  */
        if (*ip_interface_ptr)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00e      	beq.n	8007f3c <_nx_ip_route_find+0x19c>
        {

            /* Determine if the interface is valid.  */
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	791b      	ldrb	r3, [r3, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d03a      	beq.n	8007f9e <_nx_ip_route_find+0x1fe>
                ((*ip_interface_ptr) -> nx_interface_link_up))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	799b      	ldrb	r3, [r3, #6]
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d035      	beq.n	8007f9e <_nx_ip_route_find+0x1fe>
            {

                /* Set the next hop address.  */
                *next_hop_address = destination_address;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 8007f38:	2300      	movs	r3, #0
 8007f3a:	e0a6      	b.n	800808a <_nx_ip_route_find+0x2ea>
        }
        else
        {

            /* Search through the interfaces associated with the IP instance, set the inteface as first valid interface.  */
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	617b      	str	r3, [r7, #20]
 8007f40:	e02a      	b.n	8007f98 <_nx_ip_route_find+0x1f8>
            {

                /* Check for a valid interface that the address is link-local address.  */
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8007f42:	68f9      	ldr	r1, [r7, #12]
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	440b      	add	r3, r1
 8007f50:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d01b      	beq.n	8007f92 <_nx_ip_route_find+0x1f2>
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_up))
 8007f5a:	68f9      	ldr	r1, [r7, #12]
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	011b      	lsls	r3, r3, #4
 8007f66:	440b      	add	r3, r1
 8007f68:	f203 7326 	addw	r3, r3, #1830	; 0x726
 8007f6c:	781b      	ldrb	r3, [r3, #0]
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00f      	beq.n	8007f92 <_nx_ip_route_find+0x1f2>
                {

                    /* Yes, use the entry information for interface and next hop. */
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	4613      	mov	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	011b      	lsls	r3, r3, #4
 8007f7c:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	441a      	add	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	601a      	str	r2, [r3, #0]
                    *next_hop_address = destination_address;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	601a      	str	r2, [r3, #0]

                    return(NX_SUCCESS);
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e07b      	b.n	800808a <_nx_ip_route_find+0x2ea>
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	3301      	adds	r3, #1
 8007f96:	617b      	str	r3, [r7, #20]
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d9d1      	bls.n	8007f42 <_nx_ip_route_find+0x1a2>
            }
        }
    }

    /* Does the IP instance have a gateway? */
    if ((ip_ptr -> nx_ip_gateway_address) &&
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d02b      	beq.n	8007ffe <_nx_ip_route_find+0x25e>
        (ip_ptr -> nx_ip_gateway_interface) &&
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	68db      	ldr	r3, [r3, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d027      	beq.n	8007ffe <_nx_ip_route_find+0x25e>
        (ip_ptr -> nx_ip_gateway_interface -> nx_interface_link_up))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	799b      	ldrb	r3, [r3, #6]
        (ip_ptr -> nx_ip_gateway_interface) &&
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d022      	beq.n	8007ffe <_nx_ip_route_find+0x25e>
    {

        /* Get the interface. */
        interface_ptr = ip_ptr -> nx_ip_gateway_interface;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	613b      	str	r3, [r7, #16]

        /* Yes, is gateway address still reachable? */
        if (interface_ptr -> nx_interface_ip_network !=
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	69da      	ldr	r2, [r3, #28]
            (ip_ptr -> nx_ip_gateway_address &
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6899      	ldr	r1, [r3, #8]
             interface_ptr -> nx_interface_ip_network_mask))
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	699b      	ldr	r3, [r3, #24]
            (ip_ptr -> nx_ip_gateway_address &
 8007fca:	400b      	ands	r3, r1
        if (interface_ptr -> nx_interface_ip_network !=
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d001      	beq.n	8007fd4 <_nx_ip_route_find+0x234>
        {
            return(NX_IP_ADDRESS_ERROR);
 8007fd0:	2321      	movs	r3, #33	; 0x21
 8007fd2:	e05a      	b.n	800808a <_nx_ip_route_find+0x2ea>
        }

        /* Use the gateway as default. */
        if (*ip_interface_ptr == NX_NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d103      	bne.n	8007fe4 <_nx_ip_route_find+0x244>
        {
            *ip_interface_ptr = interface_ptr;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e006      	b.n	8007ff2 <_nx_ip_route_find+0x252>
        }
        else if (*ip_interface_ptr != interface_ptr)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d001      	beq.n	8007ff2 <_nx_ip_route_find+0x252>
        {
            return(NX_IP_ADDRESS_ERROR);
 8007fee:	2321      	movs	r3, #33	; 0x21
 8007ff0:	e04b      	b.n	800808a <_nx_ip_route_find+0x2ea>
        }

        *next_hop_address = ip_ptr -> nx_ip_gateway_address;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	689a      	ldr	r2, [r3, #8]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	601a      	str	r2, [r3, #0]

        return(NX_SUCCESS);
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e045      	b.n	800808a <_nx_ip_route_find+0x2ea>
    }

    /* Determine if source addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if (*ip_interface_ptr)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d016      	beq.n	8008034 <_nx_ip_route_find+0x294>
    {

        /* Determine if the interface is valid and the address of interface is link-local address.  */
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	791b      	ldrb	r3, [r3, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d03b      	beq.n	8008088 <_nx_ip_route_find+0x2e8>
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	799b      	ldrb	r3, [r3, #6]
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 8008016:	2b00      	cmp	r3, #0
 8008018:	d036      	beq.n	8008088 <_nx_ip_route_find+0x2e8>
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	0c1b      	lsrs	r3, r3, #16
 8008022:	041b      	lsls	r3, r3, #16
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 8008024:	4a1c      	ldr	r2, [pc, #112]	; (8008098 <_nx_ip_route_find+0x2f8>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d12e      	bne.n	8008088 <_nx_ip_route_find+0x2e8>
        {

            /* Set the next hop address.  */
            *next_hop_address = destination_address;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 8008030:	2300      	movs	r3, #0
 8008032:	e02a      	b.n	800808a <_nx_ip_route_find+0x2ea>
    else
    {

        /* Search through the interfaces associated with the IP instance,
           check if interface is valid and the address of interface is link-local address. */
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8008034:	2300      	movs	r3, #0
 8008036:	617b      	str	r3, [r7, #20]
 8008038:	e023      	b.n	8008082 <_nx_ip_route_find+0x2e2>
        {

            /* Use a local variable for convenience. */
            interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4613      	mov	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	4413      	add	r3, r2
 800804c:	613b      	str	r3, [r7, #16]

            /* Check for a valid interface that the address is link-local address.  */
            if ((interface_ptr -> nx_interface_valid) &&
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	791b      	ldrb	r3, [r3, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d012      	beq.n	800807c <_nx_ip_route_find+0x2dc>
                (interface_ptr -> nx_interface_link_up) &&
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	799b      	ldrb	r3, [r3, #6]
            if ((interface_ptr -> nx_interface_valid) &&
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00e      	beq.n	800807c <_nx_ip_route_find+0x2dc>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	0c1b      	lsrs	r3, r3, #16
 8008064:	041b      	lsls	r3, r3, #16
                (interface_ptr -> nx_interface_link_up) &&
 8008066:	4a0c      	ldr	r2, [pc, #48]	; (8008098 <_nx_ip_route_find+0x2f8>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d107      	bne.n	800807c <_nx_ip_route_find+0x2dc>
            {

                /* Yes, use the entry information for interface and next hop. */
                *ip_interface_ptr = interface_ptr;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	601a      	str	r2, [r3, #0]
                *next_hop_address = destination_address;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 8008078:	2300      	movs	r3, #0
 800807a:	e006      	b.n	800808a <_nx_ip_route_find+0x2ea>
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	3301      	adds	r3, #1
 8008080:	617b      	str	r3, [r7, #20]
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d9d8      	bls.n	800803a <_nx_ip_route_find+0x29a>
        }
    }

    /* Cannot find a proper way to transmit this packet.
       Return the error status. */
    return(NX_IP_ADDRESS_ERROR);
 8008088:	2321      	movs	r3, #33	; 0x21
}
 800808a:	4618      	mov	r0, r3
 800808c:	371c      	adds	r7, #28
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	a9fe0000 	.word	0xa9fe0000

0800809c <_nx_ip_thread_entry>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_thread_entry(ULONG ip_ptr_value)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b096      	sub	sp, #88	; 0x58
 80080a0:	af02      	add	r7, sp, #8
 80080a2:	6078      	str	r0, [r7, #4]
NXD_IPV6_ADDRESS *interface_ipv6_address;
#endif /* FEATURE_NX_IPV6 */


    /* Setup IP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_ptr_value)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain the IP internal mutex before calling the driver.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80080a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080aa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80080ae:	f04f 31ff 	mov.w	r1, #4294967295
 80080b2:	4618      	mov	r0, r3
 80080b4:	f004 f990 	bl	800c3d8 <_tx_mutex_get>

    /* Set the IP initialization done flag to true.  */
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 80080b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ba:	2201      	movs	r2, #1
 80080bc:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    /* Loop through all physical interfaces to initialize and enable the hardware. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80080c0:	2300      	movs	r3, #0
 80080c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080c4:	e070      	b.n	80081a8 <_nx_ip_thread_entry+0x10c>
    {

        /* Is this a valid interface with a link driver associated with it? */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 80080c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080ca:	4613      	mov	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	011b      	lsls	r3, r3, #4
 80080d2:	440b      	add	r3, r1
 80080d4:	f203 7324 	addw	r3, r3, #1828	; 0x724
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d061      	beq.n	80081a2 <_nx_ip_thread_entry+0x106>
 80080de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080e2:	4613      	mov	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	011b      	lsls	r3, r3, #4
 80080ea:	440b      	add	r3, r1
 80080ec:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d055      	beq.n	80081a2 <_nx_ip_thread_entry+0x106>
        {

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            /* Clear capability flag first.  */
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
 80080f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080fa:	4613      	mov	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	011b      	lsls	r3, r3, #4
 8008102:	440b      	add	r3, r1
 8008104:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8008108:	2200      	movs	r2, #0
 800810a:	601a      	str	r2, [r3, #0]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


            ip_ptr -> nx_ip_interface[i].nx_interface_link_up = NX_TRUE;
 800810c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800810e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008110:	4613      	mov	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	011b      	lsls	r3, r3, #4
 8008118:	440b      	add	r3, r1
 800811a:	f203 7326 	addw	r3, r3, #1830	; 0x726
 800811e:	2201      	movs	r2, #1
 8008120:	701a      	strb	r2, [r3, #0]

            /* Yes; attach the interface to the device. */
            driver_request.nx_ip_driver_ptr        =  ip_ptr;
 8008122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008124:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 8008126:	2313      	movs	r3, #19
 8008128:	613b      	str	r3, [r7, #16]
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 800812a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008138:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800813a:	4413      	add	r3, r2
 800813c:	62fb      	str	r3, [r7, #44]	; 0x2c
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800813e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008140:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	011b      	lsls	r3, r3, #4
 800814a:	440b      	add	r3, r1
 800814c:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f107 0210 	add.w	r2, r7, #16
 8008156:	4610      	mov	r0, r2
 8008158:	4798      	blx	r3
            /* Call the link driver to initialize the hardware. Among other
               responsibilities, the driver is required to provide the
               Maximum Transfer Unit (MTU) for the physical layer. The MTU
               should represent the actual physical layer transfer size
               less the physical layer headers and trailers.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800815a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800815c:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_INITIALIZE;
 800815e:	2301      	movs	r3, #1
 8008160:	613b      	str	r3, [r7, #16]
               When an IP instance is created, the first interface (nx_ip_interface[0]) is configured using parameters
               provided in the IP create call.

               When IP thread runs, it invokes the first interface link driver for link initialization.
             */
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8008162:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008166:	4613      	mov	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	011b      	lsls	r3, r3, #4
 800816e:	440b      	add	r3, r1
 8008170:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f107 0210 	add.w	r2, r7, #16
 800817a:	4610      	mov	r0, r2
 800817c:	4798      	blx	r3

            /* Call the link driver again to enable the interface.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800817e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008180:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 8008182:	2302      	movs	r3, #2
 8008184:	613b      	str	r3, [r7, #16]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_LINK_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8008186:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800818a:	4613      	mov	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	440b      	add	r3, r1
 8008194:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f107 0210 	add.w	r2, r7, #16
 800819e:	4610      	mov	r0, r2
 80081a0:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80081a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a4:	3301      	adds	r3, #1
 80081a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d08b      	beq.n	80080c6 <_nx_ip_thread_entry+0x2a>
    /* Loop to process events for this IP instance.  */
    for (;;)
    {

        /* Release the IP internal mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80081ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081b0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80081b4:	4618      	mov	r0, r3
 80081b6:	f004 fb87 	bl	800c8c8 <_tx_mutex_put>

        /* Pickup IP event flags.  */
        tx_event_flags_get(&(ip_ptr -> nx_ip_events), NX_IP_ALL_EVENTS, TX_OR_CLEAR, &ip_events, TX_WAIT_FOREVER);
 80081ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081bc:	f503 7012 	add.w	r0, r3, #584	; 0x248
 80081c0:	f107 030c 	add.w	r3, r7, #12
 80081c4:	f04f 32ff 	mov.w	r2, #4294967295
 80081c8:	9200      	str	r2, [sp, #0]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f04f 31ff 	mov.w	r1, #4294967295
 80081d0:	f003 fc80 	bl	800bad4 <_tx_event_flags_get>

        /* Obtain the IP internal mutex before processing the IP event.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80081d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80081da:	f04f 31ff 	mov.w	r1, #4294967295
 80081de:	4618      	mov	r0, r3
 80081e0:	f004 f8fa 	bl	800c3d8 <_tx_mutex_get>
        }
#endif

        /* Check for an IP receive packet event.  */
        /*lint -e{644} suppress variable might not be initialized, since "ip_events" was initialized by tx_event_flags_get. */
        if (ip_events & NX_IP_RECEIVE_EVENT)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f003 0308 	and.w	r3, r3, #8
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d031      	beq.n	8008252 <_nx_ip_thread_entry+0x1b6>
        {

            /* Loop to process all deferred packet requests.  */
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 80081ee:	e023      	b.n	8008238 <_nx_ip_thread_entry+0x19c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80081f0:	f3ef 8310 	mrs	r3, PRIMASK
 80081f4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80081f8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80081fa:	b672      	cpsid	i
    return(int_posture);
 80081fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
            {

                /* Remove the first packet and process it!  */

                /* Disable interrupts.  */
                TX_DISABLE
 80081fe:	643b      	str	r3, [r7, #64]	; 0x40

                /* Pickup the first packet.  */
                packet_ptr =  ip_ptr -> nx_ip_deferred_received_packet_head;
 8008200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008202:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008206:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Move the head pointer to the next packet.  */
                ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 8008208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800820a:	69da      	ldr	r2, [r3, #28]
 800820c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800820e:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

                /* Check for end of deferred processing queue.  */
                if (ip_ptr -> nx_ip_deferred_received_packet_head == NX_NULL)
 8008212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008214:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008218:	2b00      	cmp	r3, #0
 800821a:	d103      	bne.n	8008224 <_nx_ip_thread_entry+0x188>
                {

                    /* Yes, the queue is empty.  Set the tail pointer to NULL.  */
                    ip_ptr -> nx_ip_deferred_received_packet_tail =  NX_NULL;
 800821c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800821e:	2200      	movs	r2, #0
 8008220:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8008224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008226:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	f383 8810 	msr	PRIMASK, r3
}
 800822e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call the actual IP packet receive function.  */
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 8008230:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008232:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008234:	f7ff fcfc 	bl	8007c30 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 8008238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800823a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1d6      	bne.n	80081f0 <_nx_ip_thread_entry+0x154>
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_RECEIVE_EVENT);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f023 0308 	bic.w	r3, r3, #8
 8008248:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 8131 	beq.w	80084b4 <_nx_ip_thread_entry+0x418>
                continue;
            }
        }

        /* Check for a TCP message event.  */
        if (ip_events & NX_IP_TCP_EVENT)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00c      	beq.n	8008276 <_nx_ip_thread_entry+0x1da>
        {

            /* Process the TCP packet queue.  */
            (ip_ptr -> nx_ip_tcp_queue_process)(ip_ptr);
 800825c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800825e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008262:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008264:	4798      	blx	r3

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_TCP_EVENT);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800826c:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 8121 	beq.w	80084b8 <_nx_ip_thread_entry+0x41c>
                continue;
            }
        }

        /* Check for a fast TCP event.  */
        if (ip_events & NX_IP_FAST_EVENT)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827c:	2b00      	cmp	r3, #0
 800827e:	d011      	beq.n	80082a4 <_nx_ip_thread_entry+0x208>
            }

#endif /* FEATURE_NX_IPV6 */

            /* Process the fast TCP processing.  */
            if (ip_ptr -> nx_ip_tcp_fast_periodic_processing)
 8008280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008282:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8008286:	2b00      	cmp	r3, #0
 8008288:	d004      	beq.n	8008294 <_nx_ip_thread_entry+0x1f8>
            {
                (ip_ptr -> nx_ip_tcp_fast_periodic_processing)(ip_ptr);
 800828a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800828c:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8008290:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008292:	4798      	blx	r3
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_FAST_EVENT);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800829a:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 810c 	beq.w	80084bc <_nx_ip_thread_entry+0x420>
                continue;
            }
        }

        /* Check for a periodic events.  */
        if (ip_events & NX_IP_PERIODIC_EVENT)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d039      	beq.n	8008322 <_nx_ip_thread_entry+0x286>
        {

#ifndef NX_DISABLE_IPV4
            /* Process the ARP periodic update, if ARP has been enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 80082ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082b0:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d004      	beq.n	80082c2 <_nx_ip_thread_entry+0x226>
            {
                (ip_ptr -> nx_ip_arp_periodic_update)(ip_ptr);
 80082b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082ba:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 80082be:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80082c0:	4798      	blx	r3
            }

            /* Process the RARP periodic update, if RARP has been enabled.  */
            if (ip_ptr -> nx_ip_rarp_periodic_update)
 80082c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082c4:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d004      	beq.n	80082d6 <_nx_ip_thread_entry+0x23a>
            {
                (ip_ptr -> nx_ip_rarp_periodic_update)(ip_ptr);
 80082cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082ce:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 80082d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80082d4:	4798      	blx	r3
            }

            /* Process IGMP periodic events, if IGMP has been enabled.  */
            if (ip_ptr -> nx_ip_igmp_periodic_processing)
 80082d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082d8:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d004      	beq.n	80082ea <_nx_ip_thread_entry+0x24e>
            {
                (ip_ptr -> nx_ip_igmp_periodic_processing)(ip_ptr);
 80082e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082e2:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 80082e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80082e8:	4798      	blx	r3
            }
#endif /* !NX_DISABLE_IPV4  */

            /* Process IP fragmentation timeouts, if IP fragmenting has been
               enabled.  */
            if (ip_ptr -> nx_ip_fragment_timeout_check)
 80082ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082ec:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d004      	beq.n	80082fe <_nx_ip_thread_entry+0x262>
            {
                (ip_ptr -> nx_ip_fragment_timeout_check)(ip_ptr);
 80082f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082f6:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 80082fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80082fc:	4798      	blx	r3
            }

            /* Process TCP periodic events, if TCP has been enabled.  */
            if (ip_ptr -> nx_ip_tcp_periodic_processing)
 80082fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008300:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8008304:	2b00      	cmp	r3, #0
 8008306:	d004      	beq.n	8008312 <_nx_ip_thread_entry+0x276>
            {
                (ip_ptr -> nx_ip_tcp_periodic_processing)(ip_ptr);
 8008308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800830a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800830e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008310:	4798      	blx	r3
            }
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

#endif /* FEATURE_NX_IPV6 */
            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_PERIODIC_EVENT);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f023 0301 	bic.w	r3, r3, #1
 8008318:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 80cf 	beq.w	80084c0 <_nx_ip_thread_entry+0x424>
        }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Check for an ARP receive packet event.  */
        if ((ip_events & NX_IP_ARP_REC_EVENT) && (ip_ptr -> nx_ip_arp_queue_process))
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f003 0310 	and.w	r3, r3, #16
 8008328:	2b00      	cmp	r3, #0
 800832a:	d009      	beq.n	8008340 <_nx_ip_thread_entry+0x2a4>
 800832c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800832e:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8008332:	2b00      	cmp	r3, #0
 8008334:	d004      	beq.n	8008340 <_nx_ip_thread_entry+0x2a4>
        {

            /* Process the ARP queue.  */
            (ip_ptr -> nx_ip_arp_queue_process)(ip_ptr);
 8008336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008338:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 800833c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800833e:	4798      	blx	r3
        }

        /* Check for an RARP receive packet event.  */
        if ((ip_events & NX_IP_RARP_REC_EVENT) && (ip_ptr -> nx_ip_rarp_queue_process))
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f003 0320 	and.w	r3, r3, #32
 8008346:	2b00      	cmp	r3, #0
 8008348:	d009      	beq.n	800835e <_nx_ip_thread_entry+0x2c2>
 800834a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800834c:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 8008350:	2b00      	cmp	r3, #0
 8008352:	d004      	beq.n	800835e <_nx_ip_thread_entry+0x2c2>
        {

            /* Process the RARP queue.  */
            (ip_ptr -> nx_ip_rarp_queue_process)(ip_ptr);
 8008354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008356:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 800835a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800835c:	4798      	blx	r3
        }

        /* Check for an IGMP message event.  */
        if (ip_events & NX_IP_IGMP_EVENT)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008364:	2b00      	cmp	r3, #0
 8008366:	d004      	beq.n	8008372 <_nx_ip_thread_entry+0x2d6>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_igmp_queue_process)(ip_ptr);
 8008368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800836a:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 800836e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008370:	4798      	blx	r3
        }

        /* Check for an IGMP enable event.  */
        if (ip_events & NX_IP_IGMP_ENABLE_EVENT)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008378:	2b00      	cmp	r3, #0
 800837a:	d035      	beq.n	80083e8 <_nx_ip_thread_entry+0x34c>
        {

            /* Call the associated driver for this IP instance to register the "all hosts"
               multicast address.  */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800837c:	2300      	movs	r3, #0
 800837e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008380:	e02f      	b.n	80083e2 <_nx_ip_thread_entry+0x346>
            {
                /* Enable the hardware for IGMP for all valid interfaces. */
                if (ip_ptr -> nx_ip_interface[i].nx_interface_valid)
 8008382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008384:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008386:	4613      	mov	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	440b      	add	r3, r1
 8008390:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d020      	beq.n	80083dc <_nx_ip_thread_entry+0x340>
                {
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
 800839a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800839c:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 800839e:	2308      	movs	r3, #8
 80083a0:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 80083a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083a6:	61bb      	str	r3, [r7, #24]
                    /*lint -e{835} -e{845} suppress operating on zero. */
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 80083a8:	4b46      	ldr	r3, [pc, #280]	; (80084c4 <_nx_ip_thread_entry+0x428>)
 80083aa:	61fb      	str	r3, [r7, #28]
                    driver_request.nx_ip_driver_interface            =   &(ip_ptr -> nx_ip_interface[i]);
 80083ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083ae:	4613      	mov	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	011b      	lsls	r3, r3, #4
 80083b6:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80083ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083bc:	4413      	add	r3, r2
 80083be:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_MULTICAST_JOIN, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80083c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083c4:	4613      	mov	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	440b      	add	r3, r1
 80083ce:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f107 0210 	add.w	r2, r7, #16
 80083d8:	4610      	mov	r0, r2
 80083da:	4798      	blx	r3
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80083dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083de:	3301      	adds	r3, #1
 80083e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0cc      	beq.n	8008382 <_nx_ip_thread_entry+0x2e6>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        /* Check for an IP unfragment event.  */
        if (ip_events & NX_IP_UNFRAG_EVENT)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d009      	beq.n	8008406 <_nx_ip_thread_entry+0x36a>
        {

            /* Process the IP fragment reassemble, if fragment has been enabled.  */
            if (ip_ptr -> nx_ip_fragment_assembly)
 80083f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083f4:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d004      	beq.n	8008406 <_nx_ip_thread_entry+0x36a>
            {
                (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
 80083fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083fe:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8008402:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008404:	4798      	blx	r3
            }
        }

#ifndef NX_DISABLE_IPV4
        /* Check for an ICMP message event.  */
        if (ip_events & NX_IP_ICMP_EVENT)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d004      	beq.n	800841a <_nx_ip_thread_entry+0x37e>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_icmp_queue_process)(ip_ptr);
 8008410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008412:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8008416:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008418:	4798      	blx	r3
        }
#endif /* NX_DISABLE_IPV4 */

        /* Check for a deferred processing request from the driver.  */
        if (ip_events & NX_IP_DRIVER_DEFERRED_EVENT)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008420:	2b00      	cmp	r3, #0
 8008422:	d033      	beq.n	800848c <_nx_ip_thread_entry+0x3f0>
        {

            /* Go through each valid interface. */
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 8008424:	2300      	movs	r3, #0
 8008426:	64bb      	str	r3, [r7, #72]	; 0x48
 8008428:	e02d      	b.n	8008486 <_nx_ip_thread_entry+0x3ea>
            {
                if (ip_ptr -> nx_ip_interface[index].nx_interface_valid)
 800842a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800842c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800842e:	4613      	mov	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	011b      	lsls	r3, r3, #4
 8008436:	440b      	add	r3, r1
 8008438:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d01e      	beq.n	8008480 <_nx_ip_thread_entry+0x3e4>
                {

                    /* Yes, there is a deferred processing event from the driver. The only valid information
                       fields are the IP pointer and the command.  */
                    driver_request.nx_ip_driver_ptr =        ip_ptr;
 8008442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008444:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 8008446:	2312      	movs	r3, #18
 8008448:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[index]);
 800844a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800844c:	4613      	mov	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800845a:	4413      	add	r3, r2
 800845c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    driver_request.nx_ip_driver_return_ptr = &foo;
 800845e:	f107 0308 	add.w	r3, r7, #8
 8008462:	627b      	str	r3, [r7, #36]	; 0x24

                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 8008464:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008468:	4613      	mov	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	011b      	lsls	r3, r3, #4
 8008470:	440b      	add	r3, r1
 8008472:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f107 0210 	add.w	r2, r7, #16
 800847c:	4610      	mov	r0, r2
 800847e:	4798      	blx	r3
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 8008480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008482:	3301      	adds	r3, #1
 8008484:	64bb      	str	r3, [r7, #72]	; 0x48
 8008486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008488:	2b00      	cmp	r3, #0
 800848a:	d0ce      	beq.n	800842a <_nx_ip_thread_entry+0x38e>
                }
            }
        }

        /* Check for a deferred TCP cleanup processing request from the driver.  */
        if (ip_events & NX_IP_TCP_CLEANUP_DEFERRED)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d004      	beq.n	80084a0 <_nx_ip_thread_entry+0x404>
        {

            /* Yes, there is a deferred cleanup processing event. Call the TCP deferred cleanup
               processing function.  */
            (ip_ptr -> nx_tcp_deferred_cleanup_check)(ip_ptr);
 8008496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008498:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 800849c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800849e:	4798      	blx	r3
        }

        /* Check for a link status change request from the driver.  */
        if (ip_events & NX_IP_LINK_STATUS_EVENT)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f43f ae81 	beq.w	80081ae <_nx_ip_thread_entry+0x112>
        {

            /* Yes, there is a link status change  event. Call the deferred link status processing function. */
            _nx_ip_deferred_link_status_process(ip_ptr);
 80084ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80084ae:	f7fe fdc1 	bl	8007034 <_nx_ip_deferred_link_status_process>
 80084b2:	e67c      	b.n	80081ae <_nx_ip_thread_entry+0x112>
                continue;
 80084b4:	bf00      	nop
 80084b6:	e67a      	b.n	80081ae <_nx_ip_thread_entry+0x112>
                continue;
 80084b8:	bf00      	nop
 80084ba:	e678      	b.n	80081ae <_nx_ip_thread_entry+0x112>
                continue;
 80084bc:	bf00      	nop
 80084be:	e676      	b.n	80081ae <_nx_ip_thread_entry+0x112>
                continue;
 80084c0:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80084c2:	e674      	b.n	80081ae <_nx_ip_thread_entry+0x112>
 80084c4:	5e000001 	.word	0x5e000001

080084c8 <_nx_ipv4_option_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ipv4_option_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08a      	sub	sp, #40	; 0x28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]

NX_IPV4_HEADER *ip_header_ptr;
UCHAR          *option_ptr;
ULONG           ip_option_length;
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
ULONG           ip_normal_length = 20;
 80084d2:	2314      	movs	r3, #20
 80084d4:	61bb      	str	r3, [r7, #24]
#endif /* NX_DISABLE_ICMPV4_ERROR_MESSAGE */
UINT            index = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	623b      	str	r3, [r7, #32]
UCHAR           op_type;
UCHAR           op_length;
UCHAR           op_timestamp_offset;
UCHAR           op_timestamp_overflow;
UCHAR           op_timestamp_flags;
UINT            op_timestamp_counter = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	61fb      	str	r3, [r7, #28]

    /* Set the IPv4 header and IPv4 option pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	617b      	str	r3, [r7, #20]
    option_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	3314      	adds	r3, #20
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate the IPv4 option length.  */
    ip_option_length = ((((ip_header_ptr -> nx_ip_header_word_0 & NX_IP_LENGTH_MASK) >> 24) - NX_IP_NORMAL_LENGTH) & 0xFF) * (ULONG)sizeof(ULONG);
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	0e1b      	lsrs	r3, r3, #24
 80084f2:	f003 030f 	and.w	r3, r3, #15
 80084f6:	3b05      	subs	r3, #5
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	613b      	str	r3, [r7, #16]

    /* Loop to process the IPv4 option.  */
    while (index < ip_option_length)
 80084fe:	e0a3      	b.n	8008648 <_nx_ipv4_option_process+0x180>
    {

        /* Get the option type.  */
        op_type = *option_ptr;
 8008500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	73fb      	strb	r3, [r7, #15]

        /* Process the option type. */
        switch (op_type)
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	2b44      	cmp	r3, #68	; 0x44
 800850a:	d010      	beq.n	800852e <_nx_ipv4_option_process+0x66>
 800850c:	2b44      	cmp	r3, #68	; 0x44
 800850e:	f300 8082 	bgt.w	8008616 <_nx_ipv4_option_process+0x14e>
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <_nx_ipv4_option_process+0x54>
 8008516:	2b01      	cmp	r3, #1
 8008518:	d002      	beq.n	8008520 <_nx_ipv4_option_process+0x58>
                return(NX_FALSE);
            }
            break;
        }
        default:
            break;
 800851a:	e07c      	b.n	8008616 <_nx_ipv4_option_process+0x14e>
            return(NX_TRUE);
 800851c:	2301      	movs	r3, #1
 800851e:	e099      	b.n	8008654 <_nx_ipv4_option_process+0x18c>
            option_ptr++;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	3301      	adds	r3, #1
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
            index++;
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	3301      	adds	r3, #1
 800852a:	623b      	str	r3, [r7, #32]
            continue;
 800852c:	e08c      	b.n	8008648 <_nx_ipv4_option_process+0x180>
            op_timestamp_counter++;
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	3301      	adds	r3, #1
 8008532:	61fb      	str	r3, [r7, #28]
            if (op_timestamp_counter > 1)
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d90b      	bls.n	8008552 <_nx_ipv4_option_process+0x8a>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	4413      	add	r3, r2
 8008540:	3302      	adds	r3, #2
 8008542:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7fe f9ad 	bl	80068a8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800854e:	2300      	movs	r3, #0
 8008550:	e080      	b.n	8008654 <_nx_ipv4_option_process+0x18c>
            op_length = *(option_ptr + 1);
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	73bb      	strb	r3, [r7, #14]
            op_timestamp_offset = *(option_ptr + 2);
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	789b      	ldrb	r3, [r3, #2]
 800855c:	737b      	strb	r3, [r7, #13]
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	3303      	adds	r3, #3
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	091b      	lsrs	r3, r3, #4
 8008566:	733b      	strb	r3, [r7, #12]
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	3303      	adds	r3, #3
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	f003 030f 	and.w	r3, r3, #15
 8008572:	72fb      	strb	r3, [r7, #11]
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	2b07      	cmp	r3, #7
 8008578:	d908      	bls.n	800858c <_nx_ipv4_option_process+0xc4>
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	2b28      	cmp	r3, #40	; 0x28
 800857e:	d805      	bhi.n	800858c <_nx_ipv4_option_process+0xc4>
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <_nx_ipv4_option_process+0xdc>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	4413      	add	r3, r2
 8008592:	3302      	adds	r3, #2
 8008594:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7fe f984 	bl	80068a8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 80085a0:	2300      	movs	r3, #0
 80085a2:	e057      	b.n	8008654 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_offset < 5) || ((op_timestamp_offset % 2) == 0))
 80085a4:	7b7b      	ldrb	r3, [r7, #13]
 80085a6:	2b04      	cmp	r3, #4
 80085a8:	d905      	bls.n	80085b6 <_nx_ipv4_option_process+0xee>
 80085aa:	7b7b      	ldrb	r3, [r7, #13]
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10b      	bne.n	80085ce <_nx_ipv4_option_process+0x106>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 3));
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	4413      	add	r3, r2
 80085bc:	3303      	adds	r3, #3
 80085be:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7fe f96f 	bl	80068a8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 80085ca:	2300      	movs	r3, #0
 80085cc:	e042      	b.n	8008654 <_nx_ipv4_option_process+0x18c>
            if (op_timestamp_overflow == 15)
 80085ce:	7b3b      	ldrb	r3, [r7, #12]
 80085d0:	2b0f      	cmp	r3, #15
 80085d2:	d10b      	bne.n	80085ec <_nx_ipv4_option_process+0x124>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	4413      	add	r3, r2
 80085da:	3304      	adds	r3, #4
 80085dc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7fe f960 	bl	80068a8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 80085e8:	2300      	movs	r3, #0
 80085ea:	e033      	b.n	8008654 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_flags != 0) && (op_timestamp_flags != 1) && (op_timestamp_flags != 3))
 80085ec:	7afb      	ldrb	r3, [r7, #11]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d013      	beq.n	800861a <_nx_ipv4_option_process+0x152>
 80085f2:	7afb      	ldrb	r3, [r7, #11]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d010      	beq.n	800861a <_nx_ipv4_option_process+0x152>
 80085f8:	7afb      	ldrb	r3, [r7, #11]
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d00d      	beq.n	800861a <_nx_ipv4_option_process+0x152>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	4413      	add	r3, r2
 8008604:	3304      	adds	r3, #4
 8008606:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7fe f94b 	bl	80068a8 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8008612:	2300      	movs	r3, #0
 8008614:	e01e      	b.n	8008654 <_nx_ipv4_option_process+0x18c>
            break;
 8008616:	bf00      	nop
 8008618:	e000      	b.n	800861c <_nx_ipv4_option_process+0x154>
            break;
 800861a:	bf00      	nop
        }

        /* Get the option length.  */
        op_length = *(option_ptr + 1);
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	785b      	ldrb	r3, [r3, #1]
 8008620:	73bb      	strb	r3, [r7, #14]

        /* Check for invalid option length.
           RFC 791: The option-length octet counts the option-type octet and the 
           option-length octet as well as the option-data octets.  */
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d905      	bls.n	8008634 <_nx_ipv4_option_process+0x16c>
 8008628:	7bba      	ldrb	r2, [r7, #14]
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	4413      	add	r3, r2
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	429a      	cmp	r2, r3
 8008632:	d201      	bcs.n	8008638 <_nx_ipv4_option_process+0x170>
        {
            return(NX_FALSE);
 8008634:	2300      	movs	r3, #0
 8008636:	e00d      	b.n	8008654 <_nx_ipv4_option_process+0x18c>
        }

        /* Move to the next top level option. */
        option_ptr += op_length;
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863c:	4413      	add	r3, r2
 800863e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Update the index.  */
        index += op_length;
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	6a3a      	ldr	r2, [r7, #32]
 8008644:	4413      	add	r3, r2
 8008646:	623b      	str	r3, [r7, #32]
    while (index < ip_option_length)
 8008648:	6a3a      	ldr	r2, [r7, #32]
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	429a      	cmp	r2, r3
 800864e:	f4ff af57 	bcc.w	8008500 <_nx_ipv4_option_process+0x38>
    }

    /* Return NX_TRUE.  */
    return(NX_TRUE);
 8008652:	2301      	movs	r3, #1
}
 8008654:	4618      	mov	r0, r3
 8008656:	3728      	adds	r7, #40	; 0x28
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <_nx_ipv4_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv4_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b098      	sub	sp, #96	; 0x60
 8008660:	af02      	add	r7, sp, #8
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
NX_INTERFACE   *if_ptr;
NX_UDP_HEADER  *udp_header_ptr;
UINT            dest_port;
UINT            option_processed;
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
UINT            compute_checksum = 1;
 8008666:	2301      	movs	r3, #1
 8008668:	64bb      	str	r3, [r7, #72]	; 0x48
#endif /* NX_DISABLE_IP_RX_CHECKSUM */

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	653b      	str	r3, [r7, #80]	; 0x50
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, packet_ptr -> nx_packet_length, NX_TRACE_INTERNAL_EVENTS, 0, 0);


    /* Pick up the first word in the IP header. */
    val = ip_header_ptr -> nx_ip_header_word_0;
 8008670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	647b      	str	r3, [r7, #68]	; 0x44

    /* Convert to host byte order. */
    NX_CHANGE_ULONG_ENDIAN(val);
 8008676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008678:	ba1b      	rev	r3, r3
 800867a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain packet length. */
    pkt_length = val & NX_LOWER_16_MASK;
 800867c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800867e:	b29b      	uxth	r3, r3
 8008680:	643b      	str	r3, [r7, #64]	; 0x40

    /* Make sure the IP length matches the packet length.  Some Ethernet devices
       add padding to small packets, which results in a discrepancy between the
       packet length and the IP header length.  */
    if (packet_ptr -> nx_packet_length != pkt_length)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008688:	429a      	cmp	r2, r3
 800868a:	d066      	beq.n	800875a <_nx_ipv4_packet_receive+0xfe>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < pkt_length)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008692:	429a      	cmp	r2, r3
 8008694:	d90d      	bls.n	80086b2 <_nx_ipv4_packet_receive+0x56>
            /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800869a:	1c5a      	adds	r2, r3, #1
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a4:	1c5a      	adds	r2, r3, #1
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Invalid packet length, just release it.  */
            _nx_packet_release(packet_ptr);
 80086aa:	6838      	ldr	r0, [r7, #0]
 80086ac:	f000 fd9a 	bl	80091e4 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 80086b0:	e233      	b.n	8008b1a <_nx_ipv4_packet_receive+0x4be>
        }

        /* Calculate the difference in the length.  */
        delta =  packet_ptr -> nx_packet_length - pkt_length;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Adjust the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086c2:	1ad2      	subs	r2, r2, r3
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 80086c8:	e044      	b.n	8008754 <_nx_ipv4_packet_receive+0xf8>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d107      	bne.n	80086e2 <_nx_ipv4_packet_receive+0x86>
            {

                /* No, packet is not chained, simply adjust the append pointer in the packet.  */
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	68da      	ldr	r2, [r3, #12]
 80086d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d8:	425b      	negs	r3, r3
 80086da:	441a      	add	r2, r3
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	60da      	str	r2, [r3, #12]

                /* Break out of the loop, since the adjustment is complete.  */
                break;
 80086e0:	e03b      	b.n	800875a <_nx_ipv4_packet_receive+0xfe>
            }

            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 80086e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	461a      	mov	r2, r3
 80086f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d207      	bcs.n	800870a <_nx_ipv4_packet_receive+0xae>
            {

                /* Yes, simply adjust the append pointer of the last packet in the chain.  */
                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 80086fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008700:	425b      	negs	r3, r3
 8008702:	441a      	add	r2, r3
 8008704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008706:	60da      	str	r2, [r3, #12]

                /* Get out of the loop, since the adjustment is complete.  */
                break;
 8008708:	e027      	b.n	800875a <_nx_ipv4_packet_receive+0xfe>
            }
            else
            {

                /* Adjust the delta by the amount in the last packet.  */
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 800870a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	461a      	mov	r2, r3
 8008716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008718:	1a9b      	subs	r3, r3, r2
 800871a:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Find the packet before the last packet.  */
                before_last_packet =  packet_ptr;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 8008720:	e002      	b.n	8008728 <_nx_ipv4_packet_receive+0xcc>
                {

                    /* Move to the next packet in the chain.  */
                    before_last_packet =  before_last_packet -> nx_packet_next;
 8008722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 8008728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800872e:	429a      	cmp	r2, r3
 8008730:	d1f7      	bne.n	8008722 <_nx_ipv4_packet_receive+0xc6>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 8008732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008734:	2200      	movs	r2, #0
 8008736:	605a      	str	r2, [r3, #4]

                /* Determine if the packet is still chained.  */
                if (packet_ptr != before_last_packet)
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800873c:	429a      	cmp	r2, r3
 800873e:	d003      	beq.n	8008748 <_nx_ipv4_packet_receive+0xec>
                {

                    /* Yes, the packet is still chained, setup the last packet pointer.  */
                    packet_ptr -> nx_packet_last =  before_last_packet;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008744:	619a      	str	r2, [r3, #24]
 8008746:	e002      	b.n	800874e <_nx_ipv4_packet_receive+0xf2>
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2200      	movs	r2, #0
 800874c:	619a      	str	r2, [r3, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 800874e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008750:	f000 fd48 	bl	80091e4 <_nx_packet_release>
        while (delta)
 8008754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1b7      	bne.n	80086ca <_nx_ipv4_packet_receive+0x6e>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Get the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Obtain IP header length. */
    ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 8008760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008762:	0e1b      	lsrs	r3, r3, #24
 8008764:	f003 030f 	and.w	r3, r3, #15
 8008768:	637b      	str	r3, [r7, #52]	; 0x34
    /* Check for minimal packet length. The check is done after the endian swapping
       since the compiler may possibly be able to optimize the lookup of
       "nx_packet_length" and therefore reduce the amount of work performing these
       size checks. The endian logic is okay since packets must always have
       payloads greater than the IP header in size.  */
    if ((packet_ptr -> nx_packet_length <= (ip_header_length << 2)) ||
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800876e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	429a      	cmp	r2, r3
 8008774:	d902      	bls.n	800877c <_nx_ipv4_packet_receive+0x120>
 8008776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008778:	2b04      	cmp	r3, #4
 800877a:	d80d      	bhi.n	8008798 <_nx_ipv4_packet_receive+0x13c>
        /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_packets++;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008780:	1c5a      	adds	r2, r3, #1
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	635a      	str	r2, [r3, #52]	; 0x34

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8008790:	6838      	ldr	r0, [r7, #0]
 8008792:	f000 fd27 	bl	80091e4 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8008796:	e1c0      	b.n	8008b1a <_nx_ipv4_packet_receive+0x4be>
    }
#endif

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (if_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_RX_CHECKSUM)
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <_nx_ipv4_packet_receive+0x14c>
    {
        compute_checksum = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	64bb      	str	r3, [r7, #72]	; 0x48
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    if (compute_checksum == 1)
 80087a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d124      	bne.n	80087f8 <_nx_ipv4_packet_receive+0x19c>
    {


        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* length is the size of IP header, including options */
                                           (UINT)(ip_header_length << 2),
 80087ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b0:	009a      	lsls	r2, r3, #2
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 80087b2:	2300      	movs	r3, #0
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	2300      	movs	r3, #0
 80087b8:	2104      	movs	r1, #4
 80087ba:	6838      	ldr	r0, [r7, #0]
 80087bc:	f7fe fa11 	bl	8006be2 <_nx_ip_checksum_compute>
 80087c0:	4603      	mov	r3, r0
 80087c2:	633b      	str	r3, [r7, #48]	; 0x30
                                           /* IPv4 header checksum doesn't care src/dest addresses */
                                           NULL, NULL);
        checksum =  ~checksum & NX_LOWER_16_MASK;
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	43db      	mvns	r3, r3
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the checksum again.  */
        if (checksum)
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d012      	beq.n	80087f8 <_nx_ipv4_packet_receive+0x19c>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP checksum error.  */
            ip_ptr -> nx_ip_receive_checksum_errors++;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Checksum error, just release it.  */
            _nx_packet_release(packet_ptr);
 80087f0:	6838      	ldr	r0, [r7, #0]
 80087f2:	f000 fcf7 	bl	80091e4 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 80087f6:	e190      	b.n	8008b1a <_nx_ipv4_packet_receive+0x4be>
    /* IP receive checksum processing is disabled... just check for and remove if
       necessary the IP option words.  */

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 80087f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	ba1a      	rev	r2, r3
 80087fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008800:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8008802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	ba1a      	rev	r2, r3
 8008808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800880a:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800880c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	ba1a      	rev	r2, r3
 8008812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008814:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8008816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	ba1a      	rev	r2, r3
 800881c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800881e:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8008820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	ba1a      	rev	r2, r3
 8008826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008828:	611a      	str	r2, [r3, #16]
    }
#endif /* NX_ENABLE_SOURCE_ADDRESS_CHECK */

    /* Determine if there are options in the IP header that make the length greater
       than the default length.  */
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 800882a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882c:	2b05      	cmp	r3, #5
 800882e:	d949      	bls.n	80088c4 <_nx_ipv4_packet_receive+0x268>
    {

        /* Process the IPv4 option.  */
        option_processed = _nx_ipv4_option_process(ip_ptr, packet_ptr);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7ff fe48 	bl	80084c8 <_nx_ipv4_option_process>
 8008838:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the status.  */
        if (option_processed == NX_FALSE)
 800883a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883c:	2b00      	cmp	r3, #0
 800883e:	d108      	bne.n	8008852 <_nx_ipv4_packet_receive+0x1f6>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008844:	1c5a      	adds	r2, r3, #1
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* IPv4 option error, toss the packet!  */
            _nx_packet_release(packet_ptr);
 800884a:	6838      	ldr	r0, [r7, #0]
 800884c:	f000 fcca 	bl	80091e4 <_nx_packet_release>

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 8008850:	e163      	b.n	8008b1a <_nx_ipv4_packet_receive+0x4be>
        }

        /* Setup a pointer to the last option word.  */
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 8008852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008854:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008858:	3b01      	subs	r3, #1
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800885e:	4413      	add	r3, r2
 8008860:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Remove the option words prior to handling the IP header.  */
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	1f1a      	subs	r2, r3, #4
 8008866:	62ba      	str	r2, [r7, #40]	; 0x28
 8008868:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800886a:	6912      	ldr	r2, [r2, #16]
 800886c:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 800886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008870:	1f1a      	subs	r2, r3, #4
 8008872:	62ba      	str	r2, [r7, #40]	; 0x28
 8008874:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008876:	68d2      	ldr	r2, [r2, #12]
 8008878:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_2;
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	1f1a      	subs	r2, r3, #4
 800887e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008880:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008882:	6892      	ldr	r2, [r2, #8]
 8008884:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	1f1a      	subs	r2, r3, #4
 800888a:	62ba      	str	r2, [r7, #40]	; 0x28
 800888c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800888e:	6852      	ldr	r2, [r2, #4]
 8008890:	601a      	str	r2, [r3, #0]
        *word_ptr = (ULONG)(((ip_header_ptr -> nx_ip_header_word_0) & (~NX_IP_LENGTH_MASK)) | NX_IP_VERSION);
 8008892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f023 439e 	bic.w	r3, r3, #1325400064	; 0x4f000000
 800889a:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 800889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a0:	601a      	str	r2, [r3, #0]

        /* Update the ip_header_ptr and the packet and the packet prepend pointer, ip header pointer and length.  */
        /*lint -e{929} -e{740} -e{826} suppress cast from pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)word_ptr;
 80088a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a4:	653b      	str	r3, [r7, #80]	; 0x50

        /*lint -e{928} suppress cast from pointer to pointer, since it is necessary  */
        packet_ptr -> nx_packet_prepend_ptr = (UCHAR *)word_ptr;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088aa:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	635a      	str	r2, [r3, #52]	; 0x34
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ba:	3b05      	subs	r3, #5
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	1ad2      	subs	r2, r2, r3
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	625a      	str	r2, [r3, #36]	; 0x24
    }
#endif

    /* Determine if the IP datagram is for this IP address or a broadcast IP on this
       network.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 80088c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088c6:	691a      	ldr	r2, [r3, #16]
 80088c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d02f      	beq.n	8008930 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for incoming IP address of zero.  Incoming IP address of zero should
           be received regardless of our current IP address.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 80088d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088d2:	691b      	ldr	r3, [r3, #16]
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d02b      	beq.n	8008930 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for IP broadcast.  */
        (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 80088d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088da:	691a      	ldr	r2, [r3, #16]
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	401a      	ands	r2, r3
          if_ptr -> nx_interface_ip_network) &&
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	69db      	ldr	r3, [r3, #28]
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d10a      	bne.n	8008900 <_nx_ipv4_packet_receive+0x2a4>
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 80088ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088ec:	691a      	ldr	r2, [r3, #16]
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	43db      	mvns	r3, r3
 80088f4:	401a      	ands	r2, r3
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 80088f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	43db      	mvns	r3, r3
          if_ptr -> nx_interface_ip_network) &&
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d017      	beq.n	8008930 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for limited broadcast.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8008900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008902:	691b      	ldr	r3, [r3, #16]
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 8008904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008908:	d012      	beq.n	8008930 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for loopback address.  */
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800890a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800890c:	691b      	ldr	r3, [r3, #16]
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800890e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8008912:	d303      	bcc.n	800891c <_nx_ipv4_packet_receive+0x2c0>
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 8008914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008916:	691b      	ldr	r3, [r3, #16]
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8008918:	2b00      	cmp	r3, #0
 800891a:	da09      	bge.n	8008930 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for valid Multicast address.  */
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
 800891c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7fe f8f1 	bl	8006b0c <_nx_igmp_multicast_check>
 800892a:	4603      	mov	r3, r0
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 800892c:	2b00      	cmp	r3, #0
 800892e:	d076      	beq.n	8008a1e <_nx_ipv4_packet_receive+0x3c2>
    {

        /* Determine if this packet is fragmented.  If so, place it on the deferred processing
           queue.  The input packet will then be processed by an IP system thread.  */
        if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_FRAGMENT_MASK)
 8008930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008938:	2b00      	cmp	r3, #0
 800893a:	d046      	beq.n	80089ca <_nx_ipv4_packet_receive+0x36e>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive fragments count.  */
            ip_ptr -> nx_ip_total_fragments_received++;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008940:	1c5a      	adds	r2, r3, #1
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	669a      	str	r2, [r3, #104]	; 0x68
#ifdef NX_ENABLE_LOW_WATERMARK
            if (ip_ptr -> nx_ip_fragment_assembly &&
                (packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_available >=
                 packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_low_watermark))
#else
            if (ip_ptr -> nx_ip_fragment_assembly)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d033      	beq.n	80089b8 <_nx_ipv4_packet_receive+0x35c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008950:	f3ef 8310 	mrs	r3, PRIMASK
 8008954:	617b      	str	r3, [r7, #20]
    return(posture);
 8008956:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008958:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800895a:	b672      	cpsid	i
    return(int_posture);
 800895c:	693b      	ldr	r3, [r7, #16]

                /* Yes, fragmenting is available.  Place the packet on the incoming
                   fragment queue.  */

                /* Disable interrupts.  */
                TX_DISABLE
 800895e:	61bb      	str	r3, [r7, #24]

                /* Determine if the queue is empty.  */
                if (ip_ptr -> nx_ip_received_fragment_head)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00c      	beq.n	8008984 <_nx_ipv4_packet_receive+0x328>
                {

                    /* Reassembly queue is not empty, add this packet to the end of
                       the queue.  */
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	61da      	str	r2, [r3, #28]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	2200      	movs	r2, #0
 8008978:	61da      	str	r2, [r3, #28]
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 8008982:	e00a      	b.n	800899a <_nx_ipv4_packet_receive+0x33e>
                else
                {

                    /* Reassembly queue is empty.  Just setup the head and tail pointers
                       to point to this packet.  */
                    ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                    packet_ptr -> nx_packet_queue_next =      NX_NULL;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2200      	movs	r2, #0
 8008998:	61da      	str	r2, [r3, #28]
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f383 8810 	msr	PRIMASK, r3
}
 80089a4:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
                /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80089ac:	2200      	movs	r2, #0
 80089ae:	2102      	movs	r1, #2
 80089b0:	4618      	mov	r0, r3
 80089b2:	f003 f979 	bl	800bca8 <_tx_event_flags_set>
                /* Fragmentation has not been enabled, toss the packet!  */
                _nx_packet_release(packet_ptr);
            }

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 80089b6:	e0b0      	b.n	8008b1a <_nx_ipv4_packet_receive+0x4be>
                ip_ptr -> nx_ip_receive_packets_dropped++;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089bc:	1c5a      	adds	r2, r3, #1
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	64da      	str	r2, [r3, #76]	; 0x4c
                _nx_packet_release(packet_ptr);
 80089c2:	6838      	ldr	r0, [r7, #0]
 80089c4:	f000 fc0e 	bl	80091e4 <_nx_packet_release>
            return;
 80089c8:	e0a7      	b.n	8008b1a <_nx_ipv4_packet_receive+0x4be>
        }

        /* Determine what protocol the current IP datagram is.  */
        protocol =  (ip_header_ptr -> nx_ip_header_word_2 >> 16) & 0xFF;
 80089ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	0c1b      	lsrs	r3, r3, #16
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the IP header from the packet.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f103 0214 	add.w	r2, r3, #20
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	609a      	str	r2, [r3, #8]

        /* Adjust the length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e4:	f1a3 0214 	sub.w	r2, r3, #20
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

        /* Increment the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered++;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	1c5a      	adds	r2, r3, #1
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	621a      	str	r2, [r3, #32]

        /* Increment the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	441a      	add	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	625a      	str	r2, [r3, #36]	; 0x24
#endif
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 8008a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7fe fb73 	bl	80070f4 <_nx_ip_dispatch_process>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 8082 	beq.w	8008b1a <_nx_ipv4_packet_receive+0x4be>
        {
            _nx_packet_release(packet_ptr);
 8008a16:	6838      	ldr	r0, [r7, #0]
 8008a18:	f000 fbe4 	bl	80091e4 <_nx_packet_release>
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 8008a1c:	e07d      	b.n	8008b1a <_nx_ipv4_packet_receive+0x4be>
    }
    /* Try to receive the DHCP message before release this packet.
       NetX should receive the unicast DHCP message when interface IP address is zero.  */

    /* Check if this IP interface has IP address.  */
    else if (if_ptr -> nx_interface_ip_address == 0)
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d15a      	bne.n	8008adc <_nx_ipv4_packet_receive+0x480>
    {

        /* Determine what protocol the current IP datagram is.  */
        protocol =  ip_header_ptr -> nx_ip_header_word_2 & NX_IP_PROTOCOL_MASK;
 8008a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check if this packet is UDP message.  */
        if (protocol == NX_IP_UDP)
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8008a36:	d137      	bne.n	8008aa8 <_nx_ipv4_packet_receive+0x44c>
        {

            /* Remove the IP header from the packet.  */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f103 0214 	add.w	r2, r3, #20
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	609a      	str	r2, [r3, #8]

            /* Adjust the length.  */
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	f1a3 0214 	sub.w	r2, r3, #20
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

            /* Increment the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered++;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	621a      	str	r2, [r3, #32]

            /* Increment the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	441a      	add	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	625a      	str	r2, [r3, #36]	; 0x24
#endif

            /* Pickup the pointer to the head of the UDP packet.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	623b      	str	r3, [r7, #32]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	ba1a      	rev	r2, r3
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	601a      	str	r2, [r3, #0]

            /* Pickup the destination UDP port.  */
            dest_port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	61fb      	str	r3, [r7, #28]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	ba1a      	rev	r2, r3
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	601a      	str	r2, [r3, #0]

            /* Check if this packet is DHCP message.  */
            if (dest_port == 68)
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	2b44      	cmp	r3, #68	; 0x44
 8008a8e:	d10b      	bne.n	8008aa8 <_nx_ipv4_packet_receive+0x44c>
            {
                if (ip_ptr -> nx_ip_udp_packet_receive)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d006      	beq.n	8008aa8 <_nx_ipv4_packet_receive+0x44c>
                {

                    /* Yes, dispatch it to the appropriate UDP handler if present.  */
                    (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4798      	blx	r3

                    return;
 8008aa6:	e038      	b.n	8008b1a <_nx_ipv4_packet_receive+0x4be>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Decrement the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered--;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
 8008aac:	1e5a      	subs	r2, r3, #1
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	621a      	str	r2, [r3, #32]

        /* Decrement the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	1ad2      	subs	r2, r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac4:	1c5a      	adds	r2, r3, #1
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 8008ad4:	6838      	ldr	r0, [r7, #0]
 8008ad6:	f000 fb85 	bl	80091e4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8008ada:	e01e      	b.n	8008b1a <_nx_ipv4_packet_receive+0x4be>
    }
    else if (ip_ptr -> nx_ip_forward_packet_process)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00b      	beq.n	8008afe <_nx_ipv4_packet_receive+0x4a2>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packets forwarded counter.  */
        ip_ptr -> nx_ip_packets_forwarded++;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aea:	1c5a      	adds	r2, r3, #1
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	629a      	str	r2, [r3, #40]	; 0x28
#endif

        /* The packet is not for this IP instance so call the
           forward IP packet processing routine.  */
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	4798      	blx	r3
 8008afc:	e00d      	b.n	8008b1a <_nx_ipv4_packet_receive+0x4be>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 8008b12:	6838      	ldr	r0, [r7, #0]
 8008b14:	f000 fb66 	bl	80091e4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8008b18:	bf00      	nop
    }
}
 8008b1a:	3758      	adds	r7, #88	; 0x58
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <_nx_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                          ULONG packet_type, ULONG wait_option)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b08c      	sub	sp, #48	; 0x30
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	603b      	str	r3, [r7, #0]
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Make sure the packet_type does not go beyond nx_packet_data_end. */
    if (pool_ptr -> nx_packet_pool_payload_size < packet_type)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d901      	bls.n	8008b3c <_nx_packet_allocate+0x1c>
    {
        return(NX_INVALID_PARAMETERS);
 8008b38:	234d      	movs	r3, #77	; 0x4d
 8008b3a:	e0b1      	b.n	8008ca0 <_nx_packet_allocate+0x180>
    }

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b42:	f3ef 8310 	mrs	r3, PRIMASK
 8008b46:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008b48:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8008b4a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008b4c:	b672      	cpsid	i
    return(int_posture);
 8008b4e:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_ALLOCATE, pool_ptr, 0, packet_type, pool_ptr -> nx_packet_pool_available, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Disable interrupts to get a packet from the pool.  */
    TX_DISABLE
 8008b50:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there is an available packet.  */
    if (pool_ptr -> nx_packet_pool_available)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d03d      	beq.n	8008bd6 <_nx_packet_allocate+0xb6>
    {

        /* Yes, a packet is available.  Decrement the available count.  */
        pool_ptr -> nx_packet_pool_available--;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	1e5a      	subs	r2, r3, #1
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	609a      	str	r2, [r3, #8]

        /* Pickup the current packet pointer.  */
        work_ptr =  pool_ptr -> nx_packet_pool_available_list;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	623b      	str	r3, [r7, #32]

        /* Modify the available list to point at the next packet in the pool. */
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	69da      	ldr	r2, [r3, #28]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	61da      	str	r2, [r3, #28]

        /* Setup various fields for this packet.  */
        work_ptr -> nx_packet_queue_next =   NX_NULL;
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	2200      	movs	r2, #0
 8008b76:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
        work_ptr -> nx_packet_next =         NX_NULL;
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	605a      	str	r2, [r3, #4]
        work_ptr -> nx_packet_last =         NX_NULL;
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	2200      	movs	r2, #0
 8008b82:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr -> nx_packet_length =       0;
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	2200      	movs	r2, #0
 8008b88:	625a      	str	r2, [r3, #36]	; 0x24
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	691a      	ldr	r2, [r3, #16]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	441a      	add	r2, r3
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	609a      	str	r2, [r3, #8]
        work_ptr -> nx_packet_append_ptr =   work_ptr -> nx_packet_prepend_ptr;
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	689a      	ldr	r2, [r3, #8]
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	60da      	str	r2, [r3, #12]
        work_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        work_ptr -> nx_packet_interface_capability_flag = 0;
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
        /* Set the TCP queue to the value that indicates it has been allocated.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8008bb0:	621a      	str	r2, [r3, #32]
        work_ptr -> nx_packet_ipsec_sa_ptr = NX_NULL;
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Initialize the IP version field */
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8008bb2:	6a3b      	ldr	r3, [r7, #32]
 8008bb4:	2204      	movs	r2, #4
 8008bb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#endif /* !NX_DISABLE_IPV4  */

        /* Initialize the IP identification flag.  */
        work_ptr -> nx_packet_identical_copy = NX_FALSE;
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Initialize the IP header length. */
        work_ptr -> nx_packet_ip_header_length = 0;
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
#ifdef NX_ENABLE_THREAD
        work_ptr -> nx_packet_type = 0;
#endif /* NX_ENABLE_THREAD  */

        /* Place the new packet pointer in the return destination.  */
        *packet_ptr =  work_ptr;
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	6a3a      	ldr	r2, [r7, #32]
 8008bce:	601a      	str	r2, [r3, #0]

        /* Set status to success.  */
        status =  NX_SUCCESS;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bd4:	e05d      	b.n	8008c92 <_nx_packet_allocate+0x172>
    else
    {

#ifndef NX_DISABLE_PACKET_INFO
        /* Increment the packet pool empty request count.  */
        pool_ptr -> nx_packet_pool_empty_requests++;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	1c5a      	adds	r2, r3, #1
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	611a      	str	r2, [r3, #16]
#endif

        /* Determine if the request specifies suspension.  */
        if (wait_option)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d053      	beq.n	8008c8e <_nx_packet_allocate+0x16e>

            /* Prepare for suspension of this thread.  */

#ifndef NX_DISABLE_PACKET_INFO
            /* Increment the packet pool empty request suspension count.  */
            pool_ptr -> nx_packet_pool_empty_suspensions++;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	615a      	str	r2, [r3, #20]
#endif

            /* Pickup thread pointer.  */
            thread_ptr =  _tx_thread_current_ptr;
 8008bf0:	4b2d      	ldr	r3, [pc, #180]	; (8008ca8 <_nx_packet_allocate+0x188>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	4a2c      	ldr	r2, [pc, #176]	; (8008cac <_nx_packet_allocate+0x18c>)
 8008bfa:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this pool control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (void *)pool_ptr;
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Save the return packet pointer address as well.  */
            thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 8008c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	67da      	str	r2, [r3, #124]	; 0x7c

            /* Save the packet type (or prepend offset) so this can be added
               after a new packet becomes available.  */
            thread_ptr -> tx_thread_suspend_info =  packet_type;
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	679a      	str	r2, [r3, #120]	; 0x78

            /* Setup suspension list.  */
            if (pool_ptr -> nx_packet_pool_suspension_list)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d012      	beq.n	8008c3c <_nx_packet_allocate+0x11c>
            {

                /* This list is not NULL, add current thread to the end. */
                thread_ptr -> tx_thread_suspended_next =
                    pool_ptr -> nx_packet_pool_suspension_list;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =
                    (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c22:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	675a      	str	r2, [r3, #116]	; 0x74
                ((pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c30:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr;
                (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c38:	675a      	str	r2, [r3, #116]	; 0x74
 8008c3a:	e008      	b.n	8008c4e <_nx_packet_allocate+0x12e>
            else
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c40:	62da      	str	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =            thread_ptr;
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c46:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =        thread_ptr;
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4c:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            pool_ptr -> nx_packet_pool_suspended_count++;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	220c      	movs	r2, #12
 8008c5c:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	2201      	movs	r2, #1
 8008c62:	639a      	str	r2, [r3, #56]	; 0x38

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008c64:	4b12      	ldr	r3, [pc, #72]	; (8008cb0 <_nx_packet_allocate+0x190>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	4a11      	ldr	r2, [pc, #68]	; (8008cb0 <_nx_packet_allocate+0x190>)
 8008c6c:	6013      	str	r3, [r2, #0]

            /* Save the timeout value.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	64da      	str	r2, [r3, #76]	; 0x4c
 8008c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c76:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	f383 8810 	msr	PRIMASK, r3
}
 8008c7e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8008c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c82:	f004 fcd7 	bl	800d634 <_tx_thread_system_suspend>
                NX_PACKET_DEBUG(__FILE__, __LINE__, *packet_ptr);
            }
#endif /* NX_ENABLE_PACKET_DEBUG_INFO */

            /* Return the completion status.  */
            return(thread_ptr -> tx_thread_suspend_status);
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c8c:	e008      	b.n	8008ca0 <_nx_packet_allocate+0x180>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  NX_NO_PACKET;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c94:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f383 8810 	msr	PRIMASK, r3
}
 8008c9c:	bf00      	nop

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_ALLOCATE, 0, *packet_ptr, 0, 0);

    /* Return completion status.  */
    return(status);
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3730      	adds	r7, #48	; 0x30
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	20014884 	.word	0x20014884
 8008cac:	08008f59 	.word	0x08008f59
 8008cb0:	2001491c 	.word	0x2001491c

08008cb4 <_nx_packet_copy>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_copy(NX_PACKET *packet_ptr, NX_PACKET **new_packet_ptr,
                      NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b08e      	sub	sp, #56	; 0x38
 8008cb8:	af02      	add	r7, sp, #8
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
 8008cc0:	603b      	str	r3, [r7, #0]
ULONG                  trace_timestamp;
#endif


    /* Default the return packet pointer to NULL.  */
    *new_packet_ptr =  NX_NULL;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	601a      	str	r2, [r3, #0]

    /* Default the first packet to TRUE.  */
    first_packet = NX_TRUE;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	62bb      	str	r3, [r7, #40]	; 0x28

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_COPY, packet_ptr, 0, pool_ptr, wait_option, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Determine if there is anything to copy.  */
    if (packet_ptr -> nx_packet_length == 0)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <_nx_packet_copy+0x24>
    {

        /* Empty source packet, return an error.  */
        return(NX_INVALID_PACKET);
 8008cd4:	2312      	movs	r3, #18
 8008cd6:	e079      	b.n	8008dcc <_nx_packet_copy+0x118>
    }

    /* Allocate a new packet from the default packet pool supplied.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 8008cd8:	f107 0114 	add.w	r1, r7, #20
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7ff ff1d 	bl	8008b20 <_nx_packet_allocate>
 8008ce6:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the packet was not allocated.  */
    if (status != NX_SUCCESS)
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <_nx_packet_copy+0x3e>
    {

        /* Return the error code from the packet allocate routine.  */
        return(status);
 8008cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf0:	e06c      	b.n	8008dcc <_nx_packet_copy+0x118>
    }

    /* Copy the packet interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized by _nx_packet_allocate. */
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008cf8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* FEATURE_NX_IPV6 */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

    /* Copy the packet interface capability. */
    work_ptr -> nx_packet_interface_capability_flag = packet_ptr -> nx_packet_interface_capability_flag;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008d00:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef NX_IPSEC_ENABLE
    work_ptr -> nx_packet_ipsec_sa_ptr = packet_ptr -> nx_packet_ipsec_sa_ptr;
#endif /* NX_IPSEC_ENABLE */

    /* Save the source packet pointer.  */
    source_ptr =  packet_ptr;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
    do
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check if it is the first packet.  */
        if (first_packet == NX_TRUE)
 8008d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d110      	bne.n	8008d2e <_nx_packet_copy+0x7a>

            /* Yes, it is, copied the data beginning at data starting position.  */

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	68da      	ldr	r2, [r3, #12]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 8008d18:	6978      	ldr	r0, [r7, #20]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6919      	ldr	r1, [r3, #16]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a3a      	ldr	r2, [r7, #32]
 8008d26:	f000 f855 	bl	8008dd4 <_nx_packet_data_append>
 8008d2a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008d2c:	e00f      	b.n	8008d4e <_nx_packet_copy+0x9a>
        else
        {

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68da      	ldr	r2, [r3, #12]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 8008d3a:	6978      	ldr	r0, [r7, #20]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6899      	ldr	r1, [r3, #8]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a3a      	ldr	r2, [r7, #32]
 8008d48:	f000 f844 	bl	8008dd4 <_nx_packet_data_append>
 8008d4c:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        /* Determine if there was an error in the data append.  */
        if (status != NX_SUCCESS)
 8008d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d005      	beq.n	8008d60 <_nx_packet_copy+0xac>
        {

            /* An error is present, release the new packet.  */
            _nx_packet_release(work_ptr);
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 fa44 	bl	80091e4 <_nx_packet_release>

            /* Return the error code from the packet data append service.  */
            return(status);
 8008d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5e:	e035      	b.n	8008dcc <_nx_packet_copy+0x118>
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the packet chain.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	60fb      	str	r3, [r7, #12]

        /* Set the first packet to FALSE.  */
        first_packet = NX_FALSE;
 8008d66:	2300      	movs	r3, #0
 8008d68:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (packet_ptr);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1ca      	bne.n	8008d06 <_nx_packet_copy+0x52>
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Adjust the prepend pointer and data length.  */
    /*lint --e{946} --e{947} --e{732} suppress pointer subtraction, since it is necessary. */
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	61fb      	str	r3, [r7, #28]
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	6919      	ldr	r1, [r3, #16]
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	69fa      	ldr	r2, [r7, #28]
 8008d84:	440a      	add	r2, r1
 8008d86:	609a      	str	r2, [r3, #8]
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	69fa      	ldr	r2, [r7, #28]
 8008d90:	1a8a      	subs	r2, r1, r2
 8008d92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the ip_header information. */
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	61bb      	str	r3, [r7, #24]
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	6919      	ldr	r1, [r3, #16]
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	440a      	add	r2, r1
 8008daa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Determine if the packet copy was successful.  */
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d005      	beq.n	8008dc4 <_nx_packet_copy+0x110>
    {

        /* An error is present, release the new packet.  */
        _nx_packet_release(work_ptr);
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 fa12 	bl	80091e4 <_nx_packet_release>

        /* Return an error code.  */
        return(NX_INVALID_PACKET);
 8008dc0:	2312      	movs	r3, #18
 8008dc2:	e003      	b.n	8008dcc <_nx_packet_copy+0x118>
    }
    else
    {

        /* Everything is okay, return the new packet pointer.  */
        *new_packet_ptr =  work_ptr;
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	601a      	str	r2, [r3, #0]

        /* Update the trace event with the status.  */
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_COPY, 0, work_ptr, 0, 0);

        /* Return success status.  */
        return(NX_SUCCESS);
 8008dca:	2300      	movs	r3, #0
    }
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3730      	adds	r7, #48	; 0x30
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <_nx_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                             NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08c      	sub	sp, #48	; 0x30
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
 8008de0:	603b      	str	r3, [r7, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
UINT       status;                 /* Return status              */
NX_PACKET *new_list_ptr;           /* Head of new list pointer   */
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 8008de2:	2300      	movs	r3, #0
 8008de4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_APPEND, packet_ptr, data_start, data_size, pool_ptr, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Calculate the number of bytes available at the end of the supplied packet.  */
    if (packet_ptr -> nx_packet_last)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d016      	beq.n	8008e1c <_nx_packet_data_append+0x48>
    {

        /* More than one packet.  Walk the packet chain starting at the last packet
           to calculate the remaining bytes.  */
        available_bytes =  0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	627b      	str	r3, [r7, #36]	; 0x24
        work_ptr =  packet_ptr -> nx_packet_last;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	617b      	str	r3, [r7, #20]

            /* Calculate the available bytes in this packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	695a      	ldr	r2, [r3, #20]
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	4413      	add	r3, r2
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24

            /* Remember the last packet.  */
            last_packet =  work_ptr;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Move to the next packet.   There typically won't be another packet, but just in
               case the logic is here for it!  */
            work_ptr =  work_ptr -> nx_packet_next;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	617b      	str	r3, [r7, #20]
        } while (work_ptr);
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1ee      	bne.n	8008df8 <_nx_packet_data_append+0x24>
 8008e1a:	e005      	b.n	8008e28 <_nx_packet_data_append+0x54>
#endif /* NX_DISABLE_PACKET_CHAIN */
    {

        /* Just calculate the number of bytes available in the first packet.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	695a      	ldr	r2, [r3, #20]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Determine if any new packets are required to satisfy this request. */
    if (available_bytes < data_size)
 8008e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d247      	bcs.n	8008ec0 <_nx_packet_data_append+0xec>
    {

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Setup a temporary head pointer.  */
        new_list_ptr =  NX_NULL;
 8008e30:	2300      	movs	r3, #0
 8008e32:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Loop to pickup enough packets to complete the append request.  */
        while (available_bytes < data_size)
 8008e34:	e033      	b.n	8008e9e <_nx_packet_data_append+0xca>
        {

            /* Allocate a new packet.  */
            status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 8008e36:	f107 0114 	add.w	r1, r7, #20
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	6838      	ldr	r0, [r7, #0]
 8008e40:	f7ff fe6e 	bl	8008b20 <_nx_packet_allocate>
 8008e44:	61b8      	str	r0, [r7, #24]

            /* Determine if an error is present.  */
            if (status)
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d007      	beq.n	8008e5c <_nx_packet_data_append+0x88>
            {

                /* Yes, an error is present.   */

                /* First release any packets that have been allocated so far.  */
                if (new_list_ptr)
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d002      	beq.n	8008e58 <_nx_packet_data_append+0x84>
                {
                    _nx_packet_release(new_list_ptr);
 8008e52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e54:	f000 f9c6 	bl	80091e4 <_nx_packet_release>
                }

                /* Return the error status to the caller of this service.  */
                return(status);
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	e078      	b.n	8008f4e <_nx_packet_data_append+0x17a>

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, work_ptr);

            /* No error is present.  Link the new packet to the temporary list being built.  */
            if (new_list_ptr)
 8008e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d012      	beq.n	8008e88 <_nx_packet_data_append+0xb4>
            {

                /* Determine if there is already more than one packet on the list.  */
                if (new_list_ptr -> nx_packet_last)
 8008e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d007      	beq.n	8008e7a <_nx_packet_data_append+0xa6>
                {

                    /* Yes, link up the last packet to the new packet and update the
                       last pointer.  */
                    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized in _nx_packet_allocate. */
                    (new_list_ptr -> nx_packet_last) -> nx_packet_next =  work_ptr;
 8008e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	605a      	str	r2, [r3, #4]
                    new_list_ptr -> nx_packet_last =  work_ptr;
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e76:	619a      	str	r2, [r3, #24]
 8008e78:	e008      	b.n	8008e8c <_nx_packet_data_append+0xb8>
                else
                {

                    /* Second packet allocated.  Just setup the last and next in the
                       head pointer.  */
                    new_list_ptr -> nx_packet_last =  work_ptr;
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7e:	619a      	str	r2, [r3, #24]
                    new_list_ptr -> nx_packet_next =  work_ptr;
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e84:	605a      	str	r2, [r3, #4]
 8008e86:	e001      	b.n	8008e8c <_nx_packet_data_append+0xb8>
            }
            else
            {

                /* Just setup the temporary list head.  */
                new_list_ptr =  work_ptr;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
               is in the new packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            /*lint -e{613} suppress possible use of null pointer, since "work_ptr" was set in _nx_packet_allocate. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	695a      	ldr	r2, [r3, #20]
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	4413      	add	r3, r2
 8008e9c:	627b      	str	r3, [r7, #36]	; 0x24
        while (available_bytes < data_size)
 8008e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d3c7      	bcc.n	8008e36 <_nx_packet_data_append+0x62>
        }

        /* At this point, all the necessary packets have been allocated and are present
           on the temporary list.  We need to link this new list to the end of the supplied
           packet.  */
        if (last_packet)
 8008ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <_nx_packet_data_append+0xe0>
        {

            /* Already more than one packet.  Add the new packet list to the end.  */
            last_packet -> nx_packet_next =  new_list_ptr;
 8008eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb0:	605a      	str	r2, [r3, #4]
 8008eb2:	e002      	b.n	8008eba <_nx_packet_data_append+0xe6>
        }
        else
        {

            /* Link the new packet list to the head packet.  */
            packet_ptr -> nx_packet_next =  new_list_ptr;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb8:	605a      	str	r2, [r3, #4]
        }

        /* Clear the last packet that was used to maintain the new list.  */
        /*lint -e{613} suppress possible use of null pointer, since "new_list_ptr" was set in previous loop. */
        new_list_ptr -> nx_packet_last =  NX_NULL;
 8008eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	619a      	str	r2, [r3, #24]
        return(NX_SIZE_ERROR);
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Setup the new data length in the packet.  */
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	441a      	add	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Now copy the supplied data buffer at the end of the packet.  */
    source_ptr =  (UCHAR *)data_start;
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	61fb      	str	r3, [r7, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
    if (packet_ptr -> nx_packet_last)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d003      	beq.n	8008ee0 <_nx_packet_data_append+0x10c>
    {
        work_ptr =    packet_ptr -> nx_packet_last;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	617b      	str	r3, [r7, #20]
 8008ede:	e032      	b.n	8008f46 <_nx_packet_data_append+0x172>
    }
    else
    {
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr =    packet_ptr;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	617b      	str	r3, [r7, #20]
#ifndef NX_DISABLE_PACKET_CHAIN
    }
    while (data_size)
 8008ee4:	e02f      	b.n	8008f46 <_nx_packet_data_append+0x172>
    {

        /* Determine the amount of memory to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	695a      	ldr	r2, [r3, #20]
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d202      	bcs.n	8008efe <_nx_packet_data_append+0x12a>
        {
            copy_size =  data_size;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	623b      	str	r3, [r7, #32]
 8008efc:	e005      	b.n	8008f0a <_nx_packet_data_append+0x136>
        }
        else
        {

            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            copy_size =  (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	695a      	ldr	r2, [r3, #20]
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	623b      	str	r3, [r7, #32]
#else
        copy_size = data_size;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Copy the data into the current packet buffer.  */
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size); /* Use case of memcpy is verified.  lgtm[cpp/banned-api-usage-required-any] */
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	6a3a      	ldr	r2, [r7, #32]
 8008f10:	69f9      	ldr	r1, [r7, #28]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f005 ff05 	bl	800ed22 <memcpy>

        /* Adjust the remaining data size.  */
        data_size =  data_size - copy_size;
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	607b      	str	r3, [r7, #4]

        /* Update this packets append pointer.  */
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	68d9      	ldr	r1, [r3, #12]
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	6a3a      	ldr	r2, [r7, #32]
 8008f28:	440a      	add	r2, r1
 8008f2a:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Any more data left to append?  */
        if (data_size)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d009      	beq.n	8008f46 <_nx_packet_data_append+0x172>
        {

            /* Yes, there is more to move.  Update the source pointer, move the work pointer
               to the next packet in the chain and update the last packet pointer.  */
            source_ptr =  source_ptr + copy_size;
 8008f32:	69fa      	ldr	r2, [r7, #28]
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	4413      	add	r3, r2
 8008f38:	61fb      	str	r3, [r7, #28]
            work_ptr =  work_ptr -> nx_packet_next;
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	617b      	str	r3, [r7, #20]
            packet_ptr -> nx_packet_last =  work_ptr;
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	619a      	str	r2, [r3, #24]
    while (data_size)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1cc      	bne.n	8008ee6 <_nx_packet_data_append+0x112>

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Return successful status.  */
    return(NX_SUCCESS);
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3730      	adds	r7, #48	; 0x30
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
	...

08008f58 <_nx_packet_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_packet_pool_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
NX_PACKET_POOL *pool_ptr;   /* Working packet pool pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to packet pool control block.  */
    pool_ptr =  (NX_PACKET_POOL *)thread_ptr -> tx_thread_suspend_control_block;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f66:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008f68:	f3ef 8310 	mrs	r3, PRIMASK
 8008f6c:	617b      	str	r3, [r7, #20]
    return(posture);
 8008f6e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008f70:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008f72:	b672      	cpsid	i
    return(int_posture);
 8008f74:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE
 8008f76:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d042      	beq.n	8009006 <_nx_packet_pool_cleanup+0xae>
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d03f      	beq.n	8009006 <_nx_packet_pool_cleanup+0xae>
        (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 8008f8a:	4a23      	ldr	r2, [pc, #140]	; (8009018 <_nx_packet_pool_cleanup+0xc0>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d13a      	bne.n	8009006 <_nx_packet_pool_cleanup+0xae>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d103      	bne.n	8008fa8 <_nx_packet_pool_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008fa6:	e012      	b.n	8008fce <_nx_packet_pool_cleanup+0x76>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer if necessary.  */
            if (pool_ptr -> nx_packet_pool_suspension_list == thread_ptr)
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d103      	bne.n	8008fba <_nx_packet_pool_cleanup+0x62>
            {
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	62da      	str	r2, [r3, #44]	; 0x2c
            }

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8008fc2:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008fcc:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd2:	1e5a      	subs	r2, r3, #1
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fdc:	2b0c      	cmp	r3, #12
 8008fde:	d112      	bne.n	8009006 <_nx_packet_pool_cleanup+0xae>

            /* Thread still suspended on the packet pool.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008fe8:	4b0c      	ldr	r3, [pc, #48]	; (800901c <_nx_packet_pool_cleanup+0xc4>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3301      	adds	r3, #1
 8008fee:	4a0b      	ldr	r2, [pc, #44]	; (800901c <_nx_packet_pool_cleanup+0xc4>)
 8008ff0:	6013      	str	r3, [r2, #0]
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f383 8810 	msr	PRIMASK, r3
}
 8008ffc:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f004 fa18 	bl	800d434 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8009004:	e005      	b.n	8009012 <_nx_packet_pool_cleanup+0xba>
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	f383 8810 	msr	PRIMASK, r3
}
 8009010:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009012:	3720      	adds	r7, #32
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	5041434b 	.word	0x5041434b
 800901c:	2001491c 	.word	0x2001491c

08009020 <_nx_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                             VOID *pool_start, ULONG pool_size)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b092      	sub	sp, #72	; 0x48
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	603b      	str	r3, [r7, #0]
CHAR           *payload_address;       /* Address of the first payload*/
VOID           *rounded_pool_start;    /* Rounded stating address     */


    /* Save the original payload size.  */
    original_payload_size =  payload_size;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	3303      	adds	r3, #3
 8009036:	f023 0303 	bic.w	r3, r3, #3
 800903a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009040:	1ad2      	subs	r2, r2, r3
 8009042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009044:	4413      	add	r3, r2
 8009046:	f023 0303 	bic.w	r3, r3, #3
 800904a:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the pool starting address. */
    pool_start = rounded_pool_start;
 800904c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904e:	603b      	str	r3, [r7, #0]

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 8009050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009052:	333c      	adds	r3, #60	; 0x3c
 8009054:	633b      	str	r3, [r7, #48]	; 0x30

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	3303      	adds	r3, #3
 800905a:	f023 0303 	bic.w	r3, r3, #3
 800905e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 8009060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 8009068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4413      	add	r3, r2
 800906e:	3303      	adds	r3, #3
 8009070:	f023 0203 	bic.w	r2, r3, #3
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	607b      	str	r3, [r7, #4]

    /* Clear pool fields. */
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 800907a:	223c      	movs	r2, #60	; 0x3c
 800907c:	2100      	movs	r1, #0
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f005 fdd4 	bl	800ec2c <memset>

    /* Setup the basic packet pool fields.  */
    pool_ptr -> nx_packet_pool_name =             name_ptr;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	605a      	str	r2, [r3, #4]
    pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	62da      	str	r2, [r3, #44]	; 0x2c
    pool_ptr -> nx_packet_pool_suspended_count =  0;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	631a      	str	r2, [r3, #48]	; 0x30
    pool_ptr -> nx_packet_pool_start =            (CHAR *)pool_start;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	621a      	str	r2, [r3, #32]
    pool_ptr -> nx_packet_pool_size =             pool_size;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090a0:	625a      	str	r2, [r3, #36]	; 0x24
    pool_ptr -> nx_packet_pool_payload_size =     original_payload_size;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Calculate the end of the pool's memory area.  */
    end_of_pool =  ((CHAR *)pool_start) + pool_size;
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090ac:	4413      	add	r3, r2
 80090ae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Walk through the pool area, setting up the available packet list.  */
    packets =            0;
 80090b0:	2300      	movs	r3, #0
 80090b2:	647b      	str	r3, [r7, #68]	; 0x44
    packet_ptr =         (CHAR *)rounded_pool_start;
 80090b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b6:	643b      	str	r3, [r7, #64]	; 0x40
    next_packet_ptr =    packet_ptr + (payload_size + header_size);
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	4413      	add	r3, r2
 80090be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090c0:	4413      	add	r3, r2
 80090c2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    while (next_packet_ptr <= end_of_pool)
 80090c4:	e023      	b.n	800910e <_nx_packet_pool_create+0xee>
    {

        /* Yes, we have another packet.  Increment the packet count.  */
        packets++;
 80090c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090c8:	3301      	adds	r3, #1
 80090ca:	647b      	str	r3, [r7, #68]	; 0x44

        /* Setup the link to the next packet.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  (NX_PACKET *)next_packet_ptr;
 80090cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090d0:	61da      	str	r2, [r3, #28]

        /* Remember that this packet pool is the owner.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_pool_owner =  pool_ptr;
 80090d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	601a      	str	r2, [r3, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Clear the next packet pointer.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 80090d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090da:	2200      	movs	r2, #0
 80090dc:	605a      	str	r2, [r3, #4]
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Mark the packet as free.  */
        /*lint -e{929} -e{923} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 80090de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090e0:	f04f 32ff 	mov.w	r2, #4294967295
 80090e4:	621a      	str	r2, [r3, #32]

        /* Setup the packet data pointers.  */
        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);
 80090e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ea:	441a      	add	r2, r3
 80090ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090ee:	611a      	str	r2, [r3, #16]

        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 80090f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f4:	4413      	add	r3, r2
 80090f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090f8:	441a      	add	r2, r3
 80090fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090fc:	615a      	str	r2, [r3, #20]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, (NX_PACKET *)packet_ptr);

        /* Advance to the next packet.  */
        packet_ptr =   next_packet_ptr;
 80090fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009100:	643b      	str	r3, [r7, #64]	; 0x40

        /* Update the next packet pointer.  */
        next_packet_ptr =  packet_ptr + (payload_size + header_size);
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009106:	4413      	add	r3, r2
 8009108:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800910a:	4413      	add	r3, r2
 800910c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (next_packet_ptr <= end_of_pool)
 800910e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009112:	429a      	cmp	r2, r3
 8009114:	d9d7      	bls.n	80090c6 <_nx_packet_pool_create+0xa6>
    }

    /* Backup to the last packet in the pool.  */
    packet_ptr =  packet_ptr - (payload_size + header_size);
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911a:	4413      	add	r3, r2
 800911c:	425b      	negs	r3, r3
 800911e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009120:	4413      	add	r3, r2
 8009122:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the last packet's forward pointer to NULL.  */
    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  NX_NULL;
 8009124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009126:	2200      	movs	r2, #0
 8009128:	61da      	str	r2, [r3, #28]

    /* Save the remaining information in the pool control packet.  */
    pool_ptr -> nx_packet_pool_available =  packets;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800912e:	609a      	str	r2, [r3, #8]
    pool_ptr -> nx_packet_pool_total =      packets;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009134:	60da      	str	r2, [r3, #12]

    /* Set the packet pool available list.  */
    pool_ptr -> nx_packet_pool_available_list =  (NX_PACKET *)pool_start;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	61da      	str	r2, [r3, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800913c:	f3ef 8310 	mrs	r3, PRIMASK
 8009140:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009142:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009144:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009146:	b672      	cpsid	i
    return(int_posture);
 8009148:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_POOL_CREATE, pool_ptr, payload_size, pool_start, pool_size, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts to place the packet pool on the created list.  */
    TX_DISABLE
 800914a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the packet pool ID to make it valid.  */
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4a19      	ldr	r2, [pc, #100]	; (80091b4 <_nx_packet_pool_create+0x194>)
 8009150:	601a      	str	r2, [r3, #0]

    /* Place the packet pool on the list of created packet pools.  First,
       check for an empty list.  */
    if (_nx_packet_pool_created_ptr)
 8009152:	4b19      	ldr	r3, [pc, #100]	; (80091b8 <_nx_packet_pool_create+0x198>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d012      	beq.n	8009180 <_nx_packet_pool_create+0x160>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous;
 800915a:	4b17      	ldr	r3, [pc, #92]	; (80091b8 <_nx_packet_pool_create+0x198>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009160:	623b      	str	r3, [r7, #32]

        /* Place the new packet pool in the list.  */
        _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 8009162:	4b15      	ldr	r3, [pc, #84]	; (80091b8 <_nx_packet_pool_create+0x198>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	639a      	str	r2, [r3, #56]	; 0x38
        tail_ptr -> nx_packet_pool_created_next =  pool_ptr;
 800916a:	6a3b      	ldr	r3, [r7, #32]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup this packet pool's created links.  */
        pool_ptr -> nx_packet_pool_created_previous =  tail_ptr;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6a3a      	ldr	r2, [r7, #32]
 8009174:	639a      	str	r2, [r3, #56]	; 0x38
        pool_ptr -> nx_packet_pool_created_next =      _nx_packet_pool_created_ptr;
 8009176:	4b10      	ldr	r3, [pc, #64]	; (80091b8 <_nx_packet_pool_create+0x198>)
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	635a      	str	r2, [r3, #52]	; 0x34
 800917e:	e008      	b.n	8009192 <_nx_packet_pool_create+0x172>
    }
    else
    {

        /* The created packet pool list is empty.  Add packet pool to empty list.  */
        _nx_packet_pool_created_ptr =                  pool_ptr;
 8009180:	4a0d      	ldr	r2, [pc, #52]	; (80091b8 <_nx_packet_pool_create+0x198>)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6013      	str	r3, [r2, #0]
        pool_ptr -> nx_packet_pool_created_next =      pool_ptr;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	635a      	str	r2, [r3, #52]	; 0x34
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Increment the number of packet pools created.  */
    _nx_packet_pool_created_count++;
 8009192:	4b0a      	ldr	r3, [pc, #40]	; (80091bc <_nx_packet_pool_create+0x19c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3301      	adds	r3, #1
 8009198:	4a08      	ldr	r2, [pc, #32]	; (80091bc <_nx_packet_pool_create+0x19c>)
 800919a:	6013      	str	r3, [r2, #0]
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	f383 8810 	msr	PRIMASK, r3
}
 80091a6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3748      	adds	r7, #72	; 0x48
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	5041434b 	.word	0x5041434b
 80091b8:	20014830 	.word	0x20014830
 80091bc:	20014834 	.word	0x20014834

080091c0 <_nx_packet_pool_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _nx_packet_pool_initialize(VOID)
{
 80091c0:	b480      	push	{r7}
 80091c2:	af00      	add	r7, sp, #0

    /* Initialize the head pointer of the created packet pools list and the
       number of packet pools created.  */
    _nx_packet_pool_created_ptr =        NX_NULL;
 80091c4:	4b05      	ldr	r3, [pc, #20]	; (80091dc <_nx_packet_pool_initialize+0x1c>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	601a      	str	r2, [r3, #0]
    _nx_packet_pool_created_count =      0;
 80091ca:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <_nx_packet_pool_initialize+0x20>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	601a      	str	r2, [r3, #0]
}
 80091d0:	bf00      	nop
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	20014830 	.word	0x20014830
 80091e0:	20014834 	.word	0x20014834

080091e4 <_nx_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_release(NX_PACKET *packet_ptr)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b08a      	sub	sp, #40	; 0x28
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to free all packets chained together, not assuming they are
       from the same pool.  */
    while (packet_ptr)
 80091ec:	e0a5      	b.n	800933a <_nx_packet_release+0x156>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check to see if the packet is releasable.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 80091f6:	d011      	beq.n	800921c <_nx_packet_release+0x38>
        {

#ifndef NX_DISABLE_PACKET_INFO
            /* Pickup the pool pointer.  */
            pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	61fb      	str	r3, [r7, #28]

            /* Check for a good pool pointer...  error must be the packet!  */
            if ((pool_ptr) && (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d009      	beq.n	8009218 <_nx_packet_release+0x34>
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a50      	ldr	r2, [pc, #320]	; (800934c <_nx_packet_release+0x168>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d104      	bne.n	8009218 <_nx_packet_release+0x34>
            {

                /* Increment the packet pool invalid release error count.  */
                pool_ptr -> nx_packet_pool_invalid_releases++;
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	1c5a      	adds	r2, r3, #1
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	619a      	str	r2, [r3, #24]
            }
#endif

            /* Return an error indicating the packet could not be released.  */
            return(NX_PTR_ERROR);
 8009218:	2307      	movs	r3, #7
 800921a:	e093      	b.n	8009344 <_nx_packet_release+0x160>
        }
        /* End of packet check.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Pickup the next packet. */
        next_packet =  packet_ptr -> nx_packet_next;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009222:	f3ef 8310 	mrs	r3, PRIMASK
 8009226:	617b      	str	r3, [r7, #20]
    return(posture);
 8009228:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800922a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800922c:	b672      	cpsid	i
    return(int_posture);
 800922e:	693b      	ldr	r3, [r7, #16]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Disable interrupts to put this packet back in the packet pool.  */
        TX_DISABLE
 8009230:	623b      	str	r3, [r7, #32]

        /* Pickup the pool pointer.  */
        pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	61fb      	str	r3, [r7, #28]

        /* Determine if there are any threads suspended on the block pool.  */
        thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	61bb      	str	r3, [r7, #24]
        if (thread_ptr)
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d062      	beq.n	800930a <_nx_packet_release+0x126>
        {

            /* Remove the suspended thread from the list.  */

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009248:	69ba      	ldr	r2, [r7, #24]
 800924a:	429a      	cmp	r2, r3
 800924c:	d103      	bne.n	8009256 <_nx_packet_release+0x72>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  NX_NULL;
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	2200      	movs	r2, #0
 8009252:	62da      	str	r2, [r3, #44]	; 0x2c
 8009254:	e00d      	b.n	8009272 <_nx_packet_release+0x8e>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 8009262:	69ba      	ldr	r2, [r7, #24]
 8009264:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009266:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 800926c:	69ba      	ldr	r2, [r7, #24]
 800926e:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009270:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            pool_ptr -> nx_packet_pool_suspended_count--;
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009276:	1e5a      	subs	r2, r3, #1
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	631a      	str	r2, [r3, #48]	; 0x30

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	2200      	movs	r2, #0
 8009280:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009282:	4b33      	ldr	r3, [pc, #204]	; (8009350 <_nx_packet_release+0x16c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3301      	adds	r3, #1
 8009288:	4a31      	ldr	r2, [pc, #196]	; (8009350 <_nx_packet_release+0x16c>)
 800928a:	6013      	str	r3, [r2, #0]
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f383 8810 	msr	PRIMASK, r3
}
 8009296:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to look just like a new packet.  */
            packet_ptr -> nx_packet_queue_next  =  NX_NULL;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
            packet_ptr -> nx_packet_next        =  NX_NULL;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	605a      	str	r2, [r3, #4]
            packet_ptr -> nx_packet_last        =  NX_NULL;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
            packet_ptr -> nx_packet_length      =  0;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092b8:	441a      	add	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	609a      	str	r2, [r3, #8]
            packet_ptr -> nx_packet_append_ptr  =  packet_ptr -> nx_packet_prepend_ptr;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	689a      	ldr	r2, [r3, #8]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	60da      	str	r2, [r3, #12]
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            packet_ptr -> nx_packet_interface_capability_flag = 0;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
            /* Set the TCP queue to the value that indicates it has been allocated.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80092d8:	621a      	str	r2, [r3, #32]
            /* Clear the ipsec state. */
            packet_ptr -> nx_packet_ipsec_state = 0;
#endif /* NX_IPSEC_ENABLE */

            /* Clear the IP version.  */
            packet_ptr -> nx_packet_ip_version  =  0;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            /* Clear the IP identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_FALSE;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

            /* Initialize the IP header length. */
            packet_ptr -> nx_packet_ip_header_length = 0;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	601a      	str	r2, [r3, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8009302:	69b8      	ldr	r0, [r7, #24]
 8009304:	f004 f896 	bl	800d434 <_tx_thread_system_resume>
 8009308:	e015      	b.n	8009336 <_nx_packet_release+0x152>

            /* No thread is suspended for a memory block.  */

            /* Mark the packet as free.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f04f 32ff 	mov.w	r2, #4294967295
 8009310:	621a      	str	r2, [r3, #32]

            /* Put the packet back in the available list.  */
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	69da      	ldr	r2, [r3, #28]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	61da      	str	r2, [r3, #28]

            /* Adjust the head pointer.  */
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	61da      	str	r2, [r3, #28]

            /* Increment the count of available blocks.  */
            pool_ptr -> nx_packet_pool_available++;
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	609a      	str	r2, [r3, #8]
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	f383 8810 	msr	PRIMASK, r3
}
 8009334:	bf00      	nop
            TX_RESTORE
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the list.  */
        packet_ptr =  next_packet;
 8009336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009338:	607b      	str	r3, [r7, #4]
    while (packet_ptr)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	f47f af56 	bne.w	80091ee <_nx_packet_release+0xa>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Return completion status.  */
    return(NX_SUCCESS);
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3728      	adds	r7, #40	; 0x28
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	5041434b 	.word	0x5041434b
 8009350:	2001491c 	.word	0x2001491c

08009354 <_nx_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_transmit_release(NX_PACKET *packet_ptr)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b088      	sub	sp, #32
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800935c:	f3ef 8310 	mrs	r3, PRIMASK
 8009360:	617b      	str	r3, [r7, #20]
    return(posture);
 8009362:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009364:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009366:	b672      	cpsid	i
    return(int_posture);
 8009368:	693b      	ldr	r3, [r7, #16]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_TRANSMIT_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 800936a:	61bb      	str	r3, [r7, #24]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the packet is a queued TCP data packet.  Such packets cannot be released
       immediately, since they may need to be resent.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a1b      	ldr	r3, [r3, #32]
 8009370:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8009374:	d025      	beq.n	80093c2 <_nx_packet_transmit_release+0x6e>
        (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_FREE)))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a1b      	ldr	r3, [r3, #32]
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 800937a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800937e:	d020      	beq.n	80093c2 <_nx_packet_transmit_release+0x6e>
    {

        /* Yes, this is indeed a TCP packet.  Just mark this with the NX_DRIVER_TX_DONE
           value to let the TCP layer know it is no longer queued up.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f04f 32dd 	mov.w	r2, #3722304989	; 0xdddddddd
 8009386:	61da      	str	r2, [r3, #28]

        /* Remove the IP header and adjust the length.  */
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8009392:	441a      	add	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80093a2:	1a9a      	subs	r2, r3, r2
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Reset the IP header length. */
        packet_ptr -> nx_packet_ip_header_length = 0;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f383 8810 	msr	PRIMASK, r3
}
 80093ba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  NX_SUCCESS;
 80093bc:	2300      	movs	r3, #0
 80093be:	61fb      	str	r3, [r7, #28]
 80093c0:	e009      	b.n	80093d6 <_nx_packet_transmit_release+0x82>
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	f383 8810 	msr	PRIMASK, r3
}
 80093cc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual packet release function.  */
        status =  _nx_packet_release(packet_ptr);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7ff ff08 	bl	80091e4 <_nx_packet_release>
 80093d4:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80093d6:	69fb      	ldr	r3, [r7, #28]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3720      	adds	r7, #32
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <_nx_rarp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_rarp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80093ea:	f3ef 8310 	mrs	r3, PRIMASK
 80093ee:	61bb      	str	r3, [r7, #24]
    return(posture);
 80093f0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80093f2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80093f4:	b672      	cpsid	i
    return(int_posture);
 80093f6:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80093f8:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if RARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_rarp_queue_process)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 8009400:	2b00      	cmp	r3, #0
 8009402:	d110      	bne.n	8009426 <_nx_rarp_packet_deferred_receive+0x46>

        /* RARP is not enabled.  */

#ifndef NX_DISABLE_RARP_INFO
        /* Increment the RARP invalid messages count...  */
        ip_ptr -> nx_ip_rarp_invalid_messages++;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	f383 8810 	msr	PRIMASK, r3
}
 800941c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since RARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800941e:	6838      	ldr	r0, [r7, #0]
 8009420:	f7ff fee0 	bl	80091e4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8009424:	e02f      	b.n	8009486 <_nx_rarp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the RARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_rarp_deferred_received_packet_head)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 800942c:	2b00      	cmp	r3, #0
 800942e:	d011      	beq.n	8009454 <_nx_rarp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the RARP deferred queue.  */
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2200      	movs	r2, #0
 800943e:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f383 8810 	msr	PRIMASK, r3
}
 8009452:	e018      	b.n	8009486 <_nx_rarp_packet_deferred_receive+0xa6>
    {

        /* Empty RARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the RARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_rarp_deferred_received_packet_head =  packet_ptr;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        packet_ptr -> nx_packet_queue_next =                  NX_NULL;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	2200      	movs	r2, #0
 8009468:	61da      	str	r2, [r3, #28]
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	f383 8810 	msr	PRIMASK, r3
}
 8009474:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the RARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800947c:	2200      	movs	r2, #0
 800947e:	2120      	movs	r1, #32
 8009480:	4618      	mov	r0, r3
 8009482:	f002 fc11 	bl	800bca8 <_tx_event_flags_set>
    }
}
 8009486:	3720      	adds	r7, #32
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <_nx_system_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_system_initialize(VOID)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	af00      	add	r7, sp, #0

    /* Check whether or not system has been initialized? */
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 8009490:	4b38      	ldr	r3, [pc, #224]	; (8009574 <_nx_system_initialize+0xe8>)
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	4b38      	ldr	r3, [pc, #224]	; (8009578 <_nx_system_initialize+0xec>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	431a      	orrs	r2, r3
 800949a:	4b38      	ldr	r3, [pc, #224]	; (800957c <_nx_system_initialize+0xf0>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	431a      	orrs	r2, r3
        _nx_system_build_options_3 | _nx_system_build_options_4 | _nx_system_build_options_5)
 80094a0:	4b37      	ldr	r3, [pc, #220]	; (8009580 <_nx_system_initialize+0xf4>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	431a      	orrs	r2, r3
 80094a6:	4b37      	ldr	r3, [pc, #220]	; (8009584 <_nx_system_initialize+0xf8>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4313      	orrs	r3, r2
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d15e      	bne.n	800956e <_nx_system_initialize+0xe2>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Call the packet pool initialization component for NetX.  */
    _nx_packet_pool_initialize();
 80094b0:	f7ff fe86 	bl	80091c0 <_nx_packet_pool_initialize>

    /* Call the IP component initialization.  */
    _nx_ip_initialize();
 80094b4:	f7fe f9dc 	bl	8007870 <_nx_ip_initialize>

    /* Call the TCP component initialization.  */
    /*lint -e{522} suppress lack of side-effects.  */
    _nx_tcp_initialize();
 80094b8:	f000 f866 	bl	8009588 <_nx_tcp_initialize>

    /* Setup the build options variables.  */
    _nx_system_build_options_1 = 0
 80094bc:	4b2d      	ldr	r3, [pc, #180]	; (8009574 <_nx_system_initialize+0xe8>)
 80094be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80094c2:	601a      	str	r2, [r3, #0]

    /* Add the retry shift value to the options.  */
#if (NX_TCP_RETRY_SHIFT > 0xF)
    _nx_system_build_options_1 |=  0xF;
#else
    _nx_system_build_options_1 |=  NX_TCP_RETRY_SHIFT;
 80094c4:	4b2b      	ldr	r3, [pc, #172]	; (8009574 <_nx_system_initialize+0xe8>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a2a      	ldr	r2, [pc, #168]	; (8009574 <_nx_system_initialize+0xe8>)
 80094ca:	6013      	str	r3, [r2, #0]
#endif

#if (NX_IP_PERIODIC_RATE > 0xFFFFUL)
    _nx_system_build_options_2 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_2 =  ((ULONG)NX_IP_PERIODIC_RATE) << 16;
 80094cc:	4b2a      	ldr	r3, [pc, #168]	; (8009578 <_nx_system_initialize+0xec>)
 80094ce:	f44f 02c8 	mov.w	r2, #6553600	; 0x640000
 80094d2:	601a      	str	r2, [r3, #0]
#endif

#if (NX_ARP_EXPIRATION_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_EXPIRATION_RATE) << 8;
 80094d4:	4b28      	ldr	r3, [pc, #160]	; (8009578 <_nx_system_initialize+0xec>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a27      	ldr	r2, [pc, #156]	; (8009578 <_nx_system_initialize+0xec>)
 80094da:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_UPDATE_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_UPDATE_RATE);
 80094dc:	4b26      	ldr	r3, [pc, #152]	; (8009578 <_nx_system_initialize+0xec>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f043 030a 	orr.w	r3, r3, #10
 80094e4:	4a24      	ldr	r2, [pc, #144]	; (8009578 <_nx_system_initialize+0xec>)
 80094e6:	6013      	str	r3, [r2, #0]

    /* Setup third option word.  */
#if (NX_TCP_ACK_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_3 =  ((ULONG)NX_TCP_ACK_TIMER_RATE) << 24;
 80094e8:	4b24      	ldr	r3, [pc, #144]	; (800957c <_nx_system_initialize+0xf0>)
 80094ea:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
 80094ee:	601a      	str	r2, [r3, #0]
#endif
#if (NX_TCP_FAST_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_FAST_TIMER_RATE) << 16;
 80094f0:	4b22      	ldr	r3, [pc, #136]	; (800957c <_nx_system_initialize+0xf0>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80094f8:	4a20      	ldr	r2, [pc, #128]	; (800957c <_nx_system_initialize+0xf0>)
 80094fa:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_TRANSMIT_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_TRANSMIT_TIMER_RATE) << 8;
 80094fc:	4b1f      	ldr	r3, [pc, #124]	; (800957c <_nx_system_initialize+0xf0>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009504:	4a1d      	ldr	r2, [pc, #116]	; (800957c <_nx_system_initialize+0xf0>)
 8009506:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRY > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRY);
 8009508:	4b1c      	ldr	r3, [pc, #112]	; (800957c <_nx_system_initialize+0xf0>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f043 034b 	orr.w	r3, r3, #75	; 0x4b
 8009510:	4a1a      	ldr	r2, [pc, #104]	; (800957c <_nx_system_initialize+0xf0>)
 8009512:	6013      	str	r3, [r2, #0]

    /* Setup the fourth option word.  */
#if (NX_TCP_KEEPALIVE_INITIAL > 0xFFFFUL)
    _nx_system_build_options_4 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_4 =  ((ULONG)NX_TCP_KEEPALIVE_INITIAL) << 16;
 8009514:	4b1a      	ldr	r3, [pc, #104]	; (8009580 <_nx_system_initialize+0xf4>)
 8009516:	f04f 52e1 	mov.w	r2, #471859200	; 0x1c200000
 800951a:	601a      	str	r2, [r3, #0]
#endif
#if (NX_ARP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_4 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAXIMUM_RETRIES) << 8;
 800951c:	4b18      	ldr	r3, [pc, #96]	; (8009580 <_nx_system_initialize+0xf4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 8009524:	4a16      	ldr	r2, [pc, #88]	; (8009580 <_nx_system_initialize+0xf4>)
 8009526:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_MAX_QUEUE_DEPTH > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF) << 4;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAX_QUEUE_DEPTH) << 4;
 8009528:	4b15      	ldr	r3, [pc, #84]	; (8009580 <_nx_system_initialize+0xf4>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009530:	4a13      	ldr	r2, [pc, #76]	; (8009580 <_nx_system_initialize+0xf4>)
 8009532:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRIES > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF);
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRIES);
 8009534:	4b12      	ldr	r3, [pc, #72]	; (8009580 <_nx_system_initialize+0xf4>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f043 030a 	orr.w	r3, r3, #10
 800953c:	4a10      	ldr	r2, [pc, #64]	; (8009580 <_nx_system_initialize+0xf4>)
 800953e:	6013      	str	r3, [r2, #0]

    /* Setup the fifth option word.  */
#if (NX_MAX_MULTICAST_GROUPS > 0xFF)
    _nx_system_build_options_5 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_5 =  ((ULONG)NX_MAX_MULTICAST_GROUPS) << 24;
 8009540:	4b10      	ldr	r3, [pc, #64]	; (8009584 <_nx_system_initialize+0xf8>)
 8009542:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8009546:	601a      	str	r2, [r3, #0]
#endif
#if (NX_MAX_LISTEN_REQUESTS > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_MAX_LISTEN_REQUESTS) << 16;
 8009548:	4b0e      	ldr	r3, [pc, #56]	; (8009584 <_nx_system_initialize+0xf8>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8009550:	4a0c      	ldr	r2, [pc, #48]	; (8009584 <_nx_system_initialize+0xf8>)
 8009552:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_RETRIES) << 8;
 8009554:	4b0b      	ldr	r3, [pc, #44]	; (8009584 <_nx_system_initialize+0xf8>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800955c:	4a09      	ldr	r2, [pc, #36]	; (8009584 <_nx_system_initialize+0xf8>)
 800955e:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_TX_QUEUE > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_TX_QUEUE);
 8009560:	4b08      	ldr	r3, [pc, #32]	; (8009584 <_nx_system_initialize+0xf8>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f043 0314 	orr.w	r3, r3, #20
 8009568:	4a06      	ldr	r2, [pc, #24]	; (8009584 <_nx_system_initialize+0xf8>)
 800956a:	6013      	str	r3, [r2, #0]
 800956c:	e000      	b.n	8009570 <_nx_system_initialize+0xe4>
        return;
 800956e:	bf00      	nop
#endif
}
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	20014838 	.word	0x20014838
 8009578:	2001483c 	.word	0x2001483c
 800957c:	20014840 	.word	0x20014840
 8009580:	20014844 	.word	0x20014844
 8009584:	20014848 	.word	0x20014848

08009588 <_nx_tcp_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_initialize(VOID)
{
 8009588:	b480      	push	{r7}
 800958a:	af00      	add	r7, sp, #0
}
 800958c:	bf00      	nop
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
	...

08009598 <_nx_udp_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b08a      	sub	sp, #40	; 0x28
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80095a8:	f3ef 8310 	mrs	r3, PRIMASK
 80095ac:	61bb      	str	r3, [r7, #24]
    return(posture);
 80095ae:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80095b0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80095b2:	b672      	cpsid	i
    return(int_posture);
 80095b4:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 80095b6:	623b      	str	r3, [r7, #32]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d043      	beq.n	8009648 <_nx_udp_bind_cleanup+0xb0>
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d040      	beq.n	8009648 <_nx_udp_bind_cleanup+0xb0>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 80095ca:	4a24      	ldr	r2, [pc, #144]	; (800965c <_nx_udp_bind_cleanup+0xc4>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d13b      	bne.n	8009648 <_nx_udp_bind_cleanup+0xb0>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	2200      	movs	r2, #0
 80095d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_udp_socket_bound_previous;
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e0:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d103      	bne.n	80095f4 <_nx_udp_bind_cleanup+0x5c>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	2200      	movs	r2, #0
 80095f0:	661a      	str	r2, [r3, #96]	; 0x60
 80095f2:	e00d      	b.n	8009610 <_nx_udp_bind_cleanup+0x78>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009604:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800960e:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009614:	1e5a      	subs	r2, r3, #1
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	665a      	str	r2, [r3, #100]	; 0x64

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961e:	2b0c      	cmp	r3, #12
 8009620:	d112      	bne.n	8009648 <_nx_udp_bind_cleanup+0xb0>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2223      	movs	r2, #35	; 0x23
 8009626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800962a:	4b0d      	ldr	r3, [pc, #52]	; (8009660 <_nx_udp_bind_cleanup+0xc8>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	3301      	adds	r3, #1
 8009630:	4a0b      	ldr	r2, [pc, #44]	; (8009660 <_nx_udp_bind_cleanup+0xc8>)
 8009632:	6013      	str	r3, [r2, #0]
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	f383 8810 	msr	PRIMASK, r3
}
 800963e:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f003 fef7 	bl	800d434 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8009646:	e005      	b.n	8009654 <_nx_udp_bind_cleanup+0xbc>
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f383 8810 	msr	PRIMASK, r3
}
 8009652:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009654:	3728      	adds	r7, #40	; 0x28
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	55445020 	.word	0x55445020
 8009660:	2001491c 	.word	0x2001491c

08009664 <_nx_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_enable(NX_IP *ip_ptr)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Set the UDP packet receive function in the IP structure to indicate
       we are ready to receive UDP packets.  */
    ip_ptr -> nx_ip_udp_packet_receive =  _nx_udp_packet_receive;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a05      	ldr	r2, [pc, #20]	; (8009684 <_nx_udp_enable+0x20>)
 8009670:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	08009731 	.word	0x08009731

08009688 <_nx_udp_free_port_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08a      	sub	sp, #40	; 0x28
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_FREE_PORT_FIND, ip_ptr, port, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Save the original port.  */
    starting_port =  port;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	61fb      	str	r3, [r7, #28]
    /* Loop through the UDP ports until a free entry is found.  */
    do
    {

        /* Calculate the hash index in the UDP port array of the associated IP instance.  */
        index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	0a1a      	lsrs	r2, r3, #8
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	4413      	add	r3, r2
 80096a0:	f003 031f 	and.w	r3, r3, #31
 80096a4:	61bb      	str	r3, [r7, #24]

        /* Obtain the IP mutex so we can figure out whether or not the port has already
           been bound to.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80096ac:	f04f 31ff 	mov.w	r1, #4294967295
 80096b0:	4618      	mov	r0, r3
 80096b2:	f002 fe91 	bl	800c3d8 <_tx_mutex_get>

        /* Pickup the head of the UDP ports bound list.  */
        search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	32e0      	adds	r2, #224	; 0xe0
 80096bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c0:	623b      	str	r3, [r7, #32]

        /* Set the bound flag to false.  */
        bound =  NX_FALSE;
 80096c2:	2300      	movs	r3, #0
 80096c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if we need to perform a list search.  */
        if (search_ptr)
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d010      	beq.n	80096ee <_nx_udp_free_port_find+0x66>
        {

            /* Walk through the circular list of UDP sockets that are already
               bound.  */
            end_ptr =     search_ptr;
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	617b      	str	r3, [r7, #20]
            do
            {

                /* Determine if this entry is the same as the requested port.  */
                if (search_ptr -> nx_udp_socket_port == port)
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d102      	bne.n	80096e0 <_nx_udp_free_port_find+0x58>
                {

                    /* Set the bound flag.  */
                    bound =  NX_TRUE;
 80096da:	2301      	movs	r3, #1
 80096dc:	627b      	str	r3, [r7, #36]	; 0x24

                    /* Get out of the loop.  */
                    break;
 80096de:	e006      	b.n	80096ee <_nx_udp_free_port_find+0x66>
                }

                /* Move to the next entry in the list.  */
                search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096e4:	623b      	str	r3, [r7, #32]
            } while (search_ptr != end_ptr);
 80096e6:	6a3a      	ldr	r2, [r7, #32]
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d1f0      	bne.n	80096d0 <_nx_udp_free_port_find+0x48>
            }
        }
#endif

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80096f4:	4618      	mov	r0, r3
 80096f6:	f003 f8e7 	bl	800c8c8 <_tx_mutex_put>

        /* Determine if the port is available.  */
        if (!bound)
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d104      	bne.n	800970a <_nx_udp_free_port_find+0x82>
        {

            /* Setup the return port number.  */
            *free_port_ptr =  port;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	601a      	str	r2, [r3, #0]

            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_FREE_PORT_FIND, 0, 0, port, 0);

            /* Return success.  */
            return(NX_SUCCESS);
 8009706:	2300      	movs	r3, #0
 8009708:	e00e      	b.n	8009728 <_nx_udp_free_port_find+0xa0>
        }

        /* Move to the next port.  */
        port++;
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	3301      	adds	r3, #1
 800970e:	60bb      	str	r3, [r7, #8]

        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009716:	d302      	bcc.n	800971e <_nx_udp_free_port_find+0x96>
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 8009718:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800971c:	60bb      	str	r3, [r7, #8]
        }
    } while (starting_port != port);
 800971e:	69fa      	ldr	r2, [r7, #28]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	429a      	cmp	r2, r3
 8009724:	d1b8      	bne.n	8009698 <_nx_udp_free_port_find+0x10>

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
 8009726:	2345      	movs	r3, #69	; 0x45
}
 8009728:	4618      	mov	r0, r3
 800972a:	3728      	adds	r7, #40	; 0x28
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <_nx_udp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b094      	sub	sp, #80	; 0x50
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_UDP_INFO

    /* Increment the total UDP receive packets count.  */
    ip_ptr -> nx_ip_udp_packets_received++;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009740:	1c5a      	adds	r2, r3, #1
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_UDP_HEADER))
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974c:	2b07      	cmp	r3, #7
 800974e:	d80a      	bhi.n	8009766 <_nx_udp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800975e:	6838      	ldr	r0, [r7, #0]
 8009760:	f7ff fd40 	bl	80091e4 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8009764:	e1d4      	b.n	8009b10 <_nx_udp_packet_receive+0x3e0>
    }
#endif

    /* Pickup the pointer to the head of the UDP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800976c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	ba1a      	rev	r2, r3
 8009772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009774:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	ba1a      	rev	r2, r3
 800977c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800977e:	605a      	str	r2, [r3, #4]

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK))
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	0c1b      	lsrs	r3, r3, #16
 800978a:	429a      	cmp	r2, r3
 800978c:	d20a      	bcs.n	80097a4 <_nx_udp_packet_receive+0x74>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009794:	1c5a      	adds	r2, r3, #1
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800979c:	6838      	ldr	r0, [r7, #0]
 800979e:	f7ff fd21 	bl	80091e4 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 80097a2:	e1b5      	b.n	8009b10 <_nx_udp_packet_receive+0x3e0>
    /* Recompute the packet length in case TFC padding is present. */
    packet_ptr -> nx_packet_length = (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK);
#endif /* NX_IPSEC_ENABLE */

    /* Pickup the destination UDP port.  */
    port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 80097a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	647b      	str	r3, [r7, #68]	; 0x44

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 80097ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097ae:	0a1a      	lsrs	r2, r3, #8
 80097b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097b2:	4413      	add	r3, r2
 80097b4:	f003 031f 	and.w	r3, r3, #31
 80097b8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if the caller is a thread. If so, we should use the protection mutex
       to avoid having the port list examined while we are traversing it. If this routine
       is called from an ISR nothing needs to be done since bind/unbind are not allowed
       from ISRs.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 80097ba:	4b8d      	ldr	r3, [pc, #564]	; (80099f0 <_nx_udp_packet_receive+0x2c0>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d010      	beq.n	80097e4 <_nx_udp_packet_receive+0xb4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80097c2:	f3ef 8305 	mrs	r3, IPSR
 80097c6:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 80097c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ca:	4b8a      	ldr	r3, [pc, #552]	; (80099f4 <_nx_udp_packet_receive+0x2c4>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d107      	bne.n	80097e4 <_nx_udp_packet_receive+0xb4>
    {

        /* Get mutex protection.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80097da:	f04f 31ff 	mov.w	r1, #4294967295
 80097de:	4618      	mov	r0, r3
 80097e0:	f002 fdfa 	bl	800c3d8 <_tx_mutex_get>
    }

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097e8:	32e0      	adds	r2, #224	; 0xe0
 80097ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ee:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Determine if there are any sockets bound on this port index.  */
    if (!socket_ptr)
 80097f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d13e      	bne.n	8009874 <_nx_udp_packet_receive+0x144>
    {

#ifndef NX_DISABLE_IPV4
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80097fc:	2b04      	cmp	r3, #4
 80097fe:	d114      	bne.n	800982a <_nx_udp_packet_receive+0xfa>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00f      	beq.n	800982a <_nx_udp_packet_receive+0xfa>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800980a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	ba1a      	rev	r2, r3
 8009810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009812:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	ba1a      	rev	r2, r3
 800981a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800981c:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800981e:	2300      	movs	r3, #0
 8009820:	4a75      	ldr	r2, [pc, #468]	; (80099f8 <_nx_udp_packet_receive+0x2c8>)
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7fd f83f 	bl	80068a8 <_nx_icmpv4_send_error_message>
#endif /* FEATURE_NX_IPV6 */

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009830:	1c5a      	adds	r2, r3, #1
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800983e:	1c5a      	adds	r2, r3, #1
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

        /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
        if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8009846:	4b6a      	ldr	r3, [pc, #424]	; (80099f0 <_nx_udp_packet_receive+0x2c0>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00e      	beq.n	800986c <_nx_udp_packet_receive+0x13c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800984e:	f3ef 8305 	mrs	r3, IPSR
 8009852:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8009854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009856:	4b67      	ldr	r3, [pc, #412]	; (80099f4 <_nx_udp_packet_receive+0x2c4>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4313      	orrs	r3, r2
 800985c:	2b00      	cmp	r3, #0
 800985e:	d105      	bne.n	800986c <_nx_udp_packet_receive+0x13c>
        {

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009866:	4618      	mov	r0, r3
 8009868:	f003 f82e 	bl	800c8c8 <_tx_mutex_put>
        }

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800986c:	6838      	ldr	r0, [r7, #0]
 800986e:	f7ff fcb9 	bl	80091e4 <_nx_packet_release>

        /* Just return.  */
        return;
 8009872:	e14d      	b.n	8009b10 <_nx_udp_packet_receive+0x3e0>
    /*  Loop to examine the list of bound ports on this index.  */
    do
    {

        /* Determine if the port has been found.  */
        if (socket_ptr -> nx_udp_socket_port == port)
 8009874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800987a:	429a      	cmp	r2, r3
 800987c:	d119      	bne.n	80098b2 <_nx_udp_packet_receive+0x182>
            /* Yes, we have a match.  */

#ifndef NX_DISABLE_UDP_INFO

            /* Increment the total number of packets received for this socket.  */
            socket_ptr -> nx_udp_socket_packets_received++;
 800987e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	1c5a      	adds	r2, r3, #1
 8009884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009886:	619a      	str	r2, [r3, #24]

            /* Increment the total UDP receive bytes.  */
            ip_ptr -> nx_ip_udp_bytes_received +=          packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009892:	4413      	add	r3, r2
 8009894:	f1a3 0208 	sub.w	r2, r3, #8
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            socket_ptr -> nx_udp_socket_bytes_received +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800989e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a0:	69da      	ldr	r2, [r3, #28]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a6:	4413      	add	r3, r2
 80098a8:	f1a3 0208 	sub.w	r2, r3, #8
 80098ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ae:	61da      	str	r2, [r3, #28]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_RECEIVE, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Get out of the search loop.  */
            break;
 80098b0:	e00a      	b.n	80098c8 <_nx_udp_packet_receive+0x198>
        }
        else
        {

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_udp_socket_bound_next;
 80098b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098b6:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
    } while (socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098bc:	32e0      	adds	r2, #224	; 0xe0
 80098be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d1d5      	bne.n	8009874 <_nx_udp_packet_receive+0x144>

    /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 80098c8:	4b49      	ldr	r3, [pc, #292]	; (80099f0 <_nx_udp_packet_receive+0x2c0>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00e      	beq.n	80098ee <_nx_udp_packet_receive+0x1be>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80098d0:	f3ef 8305 	mrs	r3, IPSR
 80098d4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80098d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098d8:	4b46      	ldr	r3, [pc, #280]	; (80099f4 <_nx_udp_packet_receive+0x2c4>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4313      	orrs	r3, r2
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d105      	bne.n	80098ee <_nx_udp_packet_receive+0x1be>
    {

        /* Release mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80098e8:	4618      	mov	r0, r3
 80098ea:	f002 ffed 	bl	800c8c8 <_tx_mutex_put>
    }

    /* Determine if a match was found.  */
    if (socket_ptr -> nx_udp_socket_port != port)
 80098ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d02b      	beq.n	8009950 <_nx_udp_packet_receive+0x220>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098fe:	1c5a      	adds	r2, r3, #1
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800990c:	1c5a      	adds	r2, r3, #1
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

#if !defined(NX_DISABLE_IPV4) && !defined(NX_DISABLE_ICMPV4_ERROR_MESSAGE)
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800991a:	2b04      	cmp	r3, #4
 800991c:	d114      	bne.n	8009948 <_nx_udp_packet_receive+0x218>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00f      	beq.n	8009948 <_nx_udp_packet_receive+0x218>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8009928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	ba1a      	rev	r2, r3
 800992e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009930:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	ba1a      	rev	r2, r3
 8009938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800993a:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800993c:	2300      	movs	r3, #0
 800993e:	4a2e      	ldr	r2, [pc, #184]	; (80099f8 <_nx_udp_packet_receive+0x2c8>)
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7fc ffb0 	bl	80068a8 <_nx_icmpv4_send_error_message>
            }
        }
#endif /* FEATURE_NX_IPV6 && !NX_DISABLE_ICMPV6_ERROR_MESSAGE  */

        /* No socket structure bound to this port, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8009948:	6838      	ldr	r0, [r7, #0]
 800994a:	f7ff fc4b 	bl	80091e4 <_nx_packet_release>
        return;
 800994e:	e0df      	b.n	8009b10 <_nx_udp_packet_receive+0x3e0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009950:	f3ef 8310 	mrs	r3, PRIMASK
 8009954:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8009956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8009958:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800995a:	b672      	cpsid	i
    return(int_posture);
 800995c:	6a3b      	ldr	r3, [r7, #32]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800995e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the socket is still valid.  */
    if (socket_ptr -> nx_udp_socket_id != NX_UDP_ID)
 8009960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a25      	ldr	r2, [pc, #148]	; (80099fc <_nx_udp_packet_receive+0x2cc>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d01c      	beq.n	80099a4 <_nx_udp_packet_receive+0x274>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009970:	1c5a      	adds	r2, r3, #1
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800997e:	1c5a      	adds	r2, r3, #1
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Increment the total UDP receive packets dropped count for this socket.  */
        socket_ptr -> nx_udp_socket_packets_dropped++;
 8009986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800998e:	625a      	str	r2, [r3, #36]	; 0x24
 8009990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009992:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	f383 8810 	msr	PRIMASK, r3
}
 800999a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800999c:	6838      	ldr	r0, [r7, #0]
 800999e:	f7ff fc21 	bl	80091e4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 80099a2:	e0b5      	b.n	8009b10 <_nx_udp_packet_receive+0x3e0>
    }

    /* Pickup the receive notify function.  */
    receive_callback =  socket_ptr -> nx_udp_receive_callback;
 80099a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if we need to update the UDP port head pointer.  This should
       only be done if the found socket pointer is not the head pointer and
       the mutex for this IP instance is available.  */
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099ae:	32e0      	adds	r2, #224	; 0xe0
 80099b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d00a      	beq.n	80099d0 <_nx_udp_packet_receive+0x2a0>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d105      	bne.n	80099d0 <_nx_udp_packet_receive+0x2a0>
    {

        /* Move the port head pointer to this socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099c8:	32e0      	adds	r2, #224	; 0xe0
 80099ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80099cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    /* Determine if there is thread waiting for a packet from this port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 80099d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099d4:	637b      	str	r3, [r7, #52]	; 0x34
    if (thread_ptr)
 80099d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d03e      	beq.n	8009a5a <_nx_udp_packet_receive+0x32a>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80099dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d10c      	bne.n	8009a00 <_nx_udp_packet_receive+0x2d0>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 80099e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099e8:	2200      	movs	r2, #0
 80099ea:	659a      	str	r2, [r3, #88]	; 0x58
 80099ec:	e016      	b.n	8009a1c <_nx_udp_packet_receive+0x2ec>
 80099ee:	bf00      	nop
 80099f0:	20014884 	.word	0x20014884
 80099f4:	20000088 	.word	0x20000088
 80099f8:	03030000 	.word	0x03030000
 80099fc:	55445020 	.word	0x55445020
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8009a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a06:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8009a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a0e:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009a10:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8009a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a18:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009a1a:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8009a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a20:	1e5a      	subs	r2, r3, #1
 8009a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a24:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a28:	2200      	movs	r2, #0
 8009a2a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8009a2c:	4b3a      	ldr	r3, [pc, #232]	; (8009b18 <_nx_udp_packet_receive+0x3e8>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	3301      	adds	r3, #1
 8009a32:	4a39      	ldr	r2, [pc, #228]	; (8009b18 <_nx_udp_packet_receive+0x3e8>)
 8009a34:	6013      	str	r3, [r2, #0]

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8009a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a40:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	f383 8810 	msr	PRIMASK, r3
}
 8009a48:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8009a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009a52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009a54:	f003 fcee 	bl	800d434 <_tx_thread_system_resume>
 8009a58:	e054      	b.n	8009b04 <_nx_udp_packet_receive+0x3d4>
            return;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Place the packet at the end of the socket's receive queue.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 8009a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d03c      	beq.n	8009adc <_nx_udp_packet_receive+0x3ac>
        {

            /* Add the new packet to a nonempty list.  */
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 8009a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	61da      	str	r2, [r3, #28]
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 8009a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2200      	movs	r2, #0
 8009a74:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 8009a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a7a:	1c5a      	adds	r2, r3, #1
 8009a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a7e:	63da      	str	r2, [r3, #60]	; 0x3c

            /* Determine if the maximum queue depth has been reached.  */
            if (socket_ptr -> nx_udp_socket_receive_count >
 8009a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                socket_ptr -> nx_udp_socket_queue_maximum)
 8009a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            if (socket_ptr -> nx_udp_socket_receive_count >
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d921      	bls.n	8009ad0 <_nx_udp_packet_receive+0x3a0>
            {

                /* We have exceeded the queue depth, so remove the first item
                   in the queue (which is the oldest).  */
                packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8009a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a90:	603b      	str	r3, [r7, #0]
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	69da      	ldr	r2, [r3, #28]
 8009a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a98:	645a      	str	r2, [r3, #68]	; 0x44

                /* Decrement the number of packets queued.  */
                socket_ptr -> nx_udp_socket_receive_count--;
 8009a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a9e:	1e5a      	subs	r2, r3, #1
 8009aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa2:	63da      	str	r2, [r3, #60]	; 0x3c

#ifndef NX_DISABLE_UDP_INFO

                /* Increment the total UDP receive packets dropped count.  */
                ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                /* Increment the total UDP receive packets dropped count for this socket.  */
                socket_ptr -> nx_udp_socket_packets_dropped++;
 8009ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aba:	625a      	str	r2, [r3, #36]	; 0x24
 8009abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009abe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f383 8810 	msr	PRIMASK, r3
}
 8009ac6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 8009ac8:	6838      	ldr	r0, [r7, #0]
 8009aca:	f7ff fb8b 	bl	80091e4 <_nx_packet_release>
 8009ace:	e019      	b.n	8009b04 <_nx_udp_packet_receive+0x3d4>
 8009ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ad2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	f383 8810 	msr	PRIMASK, r3
}
 8009ada:	e013      	b.n	8009b04 <_nx_udp_packet_receive+0x3d4>
        }
        else
        {

            /* Add the new packet to an empty list.  */
            socket_ptr -> nx_udp_socket_receive_head =  packet_ptr;
 8009adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ade:	683a      	ldr	r2, [r7, #0]
 8009ae0:	645a      	str	r2, [r3, #68]	; 0x44
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 8009ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	2200      	movs	r2, #0
 8009aec:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 8009aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009af6:	63da      	str	r2, [r3, #60]	; 0x3c
 8009af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009afa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f383 8810 	msr	PRIMASK, r3
}
 8009b02:	bf00      	nop
        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_UDP_RECEIVE_QUEUE, __LINE__, packet_ptr);
    }

    /* Determine if there is a socket receive notification function specified.  */
    if (receive_callback)
 8009b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d002      	beq.n	8009b10 <_nx_udp_packet_receive+0x3e0>
    {

        /* Yes, notification is requested.  Call the application's receive notification
           function for this socket.  */
        (receive_callback)(socket_ptr);
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009b0e:	4798      	blx	r3
    }
}
 8009b10:	3750      	adds	r7, #80	; 0x50
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	2001491c 	.word	0x2001491c

08009b1c <_nx_udp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b2a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8009b30:	617b      	str	r3, [r7, #20]
    return(posture);
 8009b32:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009b34:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b36:	b672      	cpsid	i
    return(int_posture);
 8009b38:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 8009b3a:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d03d      	beq.n	8009bc0 <_nx_udp_receive_cleanup+0xa4>
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d03a      	beq.n	8009bc0 <_nx_udp_receive_cleanup+0xa4>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 8009b4e:	4a21      	ldr	r2, [pc, #132]	; (8009bd4 <_nx_udp_receive_cleanup+0xb8>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d135      	bne.n	8009bc0 <_nx_udp_receive_cleanup+0xa4>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d103      	bne.n	8009b6c <_nx_udp_receive_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	2200      	movs	r2, #0
 8009b68:	659a      	str	r2, [r3, #88]	; 0x58
 8009b6a:	e00d      	b.n	8009b88 <_nx_udp_receive_cleanup+0x6c>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009b7c:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009b86:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b8c:	1e5a      	subs	r2, r3, #1
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b96:	2b0c      	cmp	r3, #12
 8009b98:	d112      	bne.n	8009bc0 <_nx_udp_receive_cleanup+0xa4>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009ba2:	4b0d      	ldr	r3, [pc, #52]	; (8009bd8 <_nx_udp_receive_cleanup+0xbc>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	4a0b      	ldr	r2, [pc, #44]	; (8009bd8 <_nx_udp_receive_cleanup+0xbc>)
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f383 8810 	msr	PRIMASK, r3
}
 8009bb6:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f003 fc3b 	bl	800d434 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8009bbe:	e005      	b.n	8009bcc <_nx_udp_receive_cleanup+0xb0>
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	f383 8810 	msr	PRIMASK, r3
}
 8009bca:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009bcc:	3720      	adds	r7, #32
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	55445020 	.word	0x55445020
 8009bd8:	2001491c 	.word	0x2001491c

08009bdc <_nx_udp_socket_bind>:
/*                                            corrected the random value, */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b092      	sub	sp, #72	; 0x48
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
#endif /* NX_NAT_ENABLE */
NX_IP         *ip_ptr;
TX_THREAD     *thread_ptr;
NX_UDP_SOCKET *search_ptr;
NX_UDP_SOCKET *end_ptr;
UINT           status = NX_SUCCESS;
 8009be8:	2300      	movs	r3, #0
 8009bea:	643b      	str	r3, [r7, #64]	; 0x40


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f002 fbeb 	bl	800c3d8 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d103      	bne.n	8009c12 <_nx_udp_socket_bind+0x36>
        (socket_ptr -> nx_udp_socket_bind_in_progress))
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d007      	beq.n	8009c22 <_nx_udp_socket_bind+0x46>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c14:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f002 fe55 	bl	800c8c8 <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 8009c1e:	2322      	movs	r3, #34	; 0x22
 8009c20:	e0f4      	b.n	8009e0c <_nx_udp_socket_bind+0x230>
    }

    /* Determine if the port needs to be allocated.  */
    if (port == NX_ANY_PORT)
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d119      	bne.n	8009c5c <_nx_udp_socket_bind+0x80>
    {

        /* Call the find routine to allocate a UDP port.  */
        port = NX_SEARCH_PORT_START + (UINT)(((ULONG)NX_RAND()) % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 8009c28:	f004 fdba 	bl	800e7a0 <rand>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009c32:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8009c36:	60bb      	str	r3, [r7, #8]
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f107 0208 	add.w	r2, r7, #8
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009c42:	f7ff fd21 	bl	8009688 <_nx_udp_free_port_find>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d007      	beq.n	8009c5c <_nx_udp_socket_bind+0x80>
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c4e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009c52:	4618      	mov	r0, r3
 8009c54:	f002 fe38 	bl	800c8c8 <_tx_mutex_put>

            /* There was no free port, return an error code.  */
            return(NX_NO_FREE_PORTS);
 8009c58:	2345      	movs	r3, #69	; 0x45
 8009c5a:	e0d7      	b.n	8009e0c <_nx_udp_socket_bind+0x230>
        }
    }
#endif

    /* Save the port number in the UDP socket structure.  */
    socket_ptr -> nx_udp_socket_port =  port;
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	609a      	str	r2, [r3, #8]

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	0a1a      	lsrs	r2, r3, #8
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	4413      	add	r3, r2
 8009c6a:	f003 031f 	and.w	r3, r3, #31
 8009c6e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Pickup the head of the UDP ports bound list.  */
    search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8009c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c74:	32e0      	adds	r2, #224	; 0xe0
 8009c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c7a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if we need to perform a list search.  */
    if (search_ptr)
 8009c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00f      	beq.n	8009ca2 <_nx_udp_socket_bind+0xc6>
    {

        /* Walk through the circular list of UDP sockets that are already
           bound.  */
        end_ptr = search_ptr;
 8009c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c84:	637b      	str	r3, [r7, #52]	; 0x34
        do
        {

            /* Determine if this entry is the same as the requested port.  */
            if (search_ptr -> nx_udp_socket_port == port)
 8009c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c88:	689a      	ldr	r2, [r3, #8]
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d007      	beq.n	8009ca0 <_nx_udp_socket_bind+0xc4>
                /* Yes, the port has already been allocated.  */
                break;
            }

            /* Move to the next entry in the list.  */
            search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 8009c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c94:	647b      	str	r3, [r7, #68]	; 0x44
        } while (search_ptr != end_ptr);
 8009c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d1f3      	bne.n	8009c86 <_nx_udp_socket_bind+0xaa>
 8009c9e:	e000      	b.n	8009ca2 <_nx_udp_socket_bind+0xc6>
                break;
 8009ca0:	bf00      	nop
    }

    /* Now determine if the port is available.  */
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_udp_socket_port != port))
 8009ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d004      	beq.n	8009cb2 <_nx_udp_socket_bind+0xd6>
 8009ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009caa:	689a      	ldr	r2, [r3, #8]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d042      	beq.n	8009d38 <_nx_udp_socket_bind+0x15c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8009cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8009cba:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8009cbc:	b672      	cpsid	i
    return(int_posture);
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {

        /* Place this UDP socket structure on the list of bound ports.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8009cc0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if the list is NULL.  */
        if (search_ptr)
 8009cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d01e      	beq.n	8009d06 <_nx_udp_socket_bind+0x12a>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            socket_ptr -> nx_udp_socket_bound_next =       ip_ptr -> nx_ip_udp_port_table[index];
 8009cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ccc:	32e0      	adds	r2, #224	; 0xe0
 8009cce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =   (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 8009cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cda:	32e0      	adds	r2, #224	; 0xe0
 8009cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next = socket_ptr;
 8009ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cea:	32e0      	adds	r2, #224	; 0xe0
 8009cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	64da      	str	r2, [r3, #76]	; 0x4c
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   socket_ptr;
 8009cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cfa:	32e0      	adds	r2, #224	; 0xe0
 8009cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	651a      	str	r2, [r3, #80]	; 0x50
 8009d04:	e00b      	b.n	8009d1e <_nx_udp_socket_bind+0x142>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            socket_ptr -> nx_udp_socket_bound_next =      socket_ptr;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =  socket_ptr;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =       socket_ptr;
 8009d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d16:	32e0      	adds	r2, #224	; 0xe0
 8009d18:	68f9      	ldr	r1, [r7, #12]
 8009d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d20:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d22:	6a3b      	ldr	r3, [r7, #32]
 8009d24:	f383 8810 	msr	PRIMASK, r3
}
 8009d28:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d2c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009d30:	4618      	mov	r0, r3
 8009d32:	f002 fdc9 	bl	800c8c8 <_tx_mutex_put>
 8009d36:	e068      	b.n	8009e0a <_nx_udp_socket_bind+0x22e>
    }
    else if (wait_option)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d05d      	beq.n	8009dfa <_nx_udp_socket_bind+0x21e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8009d42:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009d44:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009d46:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009d48:	b672      	cpsid	i
    return(int_posture);
 8009d4a:	69bb      	ldr	r3, [r7, #24]
    {

        /* Prepare for suspension of this thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8009d4c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Pickup thread pointer.  */
        thread_ptr =  _tx_thread_current_ptr;
 8009d4e:	4b31      	ldr	r3, [pc, #196]	; (8009e14 <_nx_udp_socket_bind+0x238>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Setup cleanup routine pointer.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 8009d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d56:	4a30      	ldr	r2, [pc, #192]	; (8009e18 <_nx_udp_socket_bind+0x23c>)
 8009d58:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup cleanup information, i.e. this socket control
           block.  */
        thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 8009d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Also remember the socket that has bound to the port, since the thread
           is going to be suspended on that socket.  */
        socket_ptr -> nx_udp_socket_bound_previous =  search_ptr;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d64:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the socket bind in progress flag (thread pointer).  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  thread_ptr;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d6a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Setup suspension list.  */
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 8009d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d012      	beq.n	8009d9a <_nx_udp_socket_bind+0x1be>
        {

            /* This list is not NULL, add current thread to the end. */
            thread_ptr -> tx_thread_suspended_next =       search_ptr -> nx_udp_socket_bind_suspension_list;
 8009d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7a:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =  (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous;
 8009d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d84:	675a      	str	r2, [r3, #116]	; 0x74
            ((search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 8009d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d8e:	671a      	str	r2, [r3, #112]	; 0x70
            (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8009d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d96:	675a      	str	r2, [r3, #116]	; 0x74
 8009d98:	e008      	b.n	8009dac <_nx_udp_socket_bind+0x1d0>
        else
        {

            /* No other threads are suspended.  Setup the head pointer and
               just setup this threads pointers to itself.  */
            search_ptr -> nx_udp_socket_bind_suspension_list =         thread_ptr;
 8009d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d9e:	661a      	str	r2, [r3, #96]	; 0x60
            thread_ptr -> tx_thread_suspended_next =                   thread_ptr;
 8009da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009da4:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =               thread_ptr;
 8009da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009daa:	675a      	str	r2, [r3, #116]	; 0x74
        }

        /* Increment the suspended thread count.  */
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 8009dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009db4:	665a      	str	r2, [r3, #100]	; 0x64

        /* Set the state to suspended.  */
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8009db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db8:	220c      	movs	r2, #12
 8009dba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8009dc2:	4b16      	ldr	r3, [pc, #88]	; (8009e1c <_nx_udp_socket_bind+0x240>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	4a14      	ldr	r2, [pc, #80]	; (8009e1c <_nx_udp_socket_bind+0x240>)
 8009dca:	6013      	str	r3, [r2, #0]

        /* Save the timeout value.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	64da      	str	r2, [r3, #76]	; 0x4c
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	f383 8810 	msr	PRIMASK, r3
}
 8009ddc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009de4:	4618      	mov	r0, r3
 8009de6:	f002 fd6f 	bl	800c8c8 <_tx_mutex_put>

        /* Call actual thread suspension routine.  */
        _tx_thread_system_suspend(thread_ptr);
 8009dea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dec:	f003 fc22 	bl	800d634 <_tx_thread_system_suspend>

        /* Return the completion status.  */
        status = thread_ptr -> tx_thread_suspend_status;
 8009df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009df6:	643b      	str	r3, [r7, #64]	; 0x40
 8009df8:	e007      	b.n	8009e0a <_nx_udp_socket_bind+0x22e>
    }
    else
    {

        /* Release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009e00:	4618      	mov	r0, r3
 8009e02:	f002 fd61 	bl	800c8c8 <_tx_mutex_put>

        /* Return the port unavailable error.  */
        status = NX_PORT_UNAVAILABLE;
 8009e06:	2323      	movs	r3, #35	; 0x23
 8009e08:	643b      	str	r3, [r7, #64]	; 0x40
        status = _nx_udp_socket_driver_bind(socket_ptr, port, wait_option);
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Return success to the caller.  */
    return(status);
 8009e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3748      	adds	r7, #72	; 0x48
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	20014884 	.word	0x20014884
 8009e18:	08009599 	.word	0x08009599
 8009e1c:	2001491c 	.word	0x2001491c

08009e20 <_nx_udp_socket_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG queue_maximum)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08a      	sub	sp, #40	; 0x28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	603b      	str	r3, [r7, #0]

NX_UDP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 8009e2e:	2278      	movs	r2, #120	; 0x78
 8009e30:	2100      	movs	r1, #0
 8009e32:	68b8      	ldr	r0, [r7, #8]
 8009e34:	f004 fefa 	bl	800ec2c <memset>

    /* Fill in the basic information in the new UDP socket structure.  */

    /* Remember the associated IP structure.  */
    socket_ptr -> nx_udp_socket_ip_ptr =  ip_ptr;
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	60da      	str	r2, [r3, #12]

    /* Save the UDP socket's name.  */
    socket_ptr -> nx_udp_socket_name =  name;
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	605a      	str	r2, [r3, #4]

    /* Save the type of service input parameter.  */
    socket_ptr -> nx_udp_socket_type_of_service =  type_of_service;
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	683a      	ldr	r2, [r7, #0]
 8009e48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 8009e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e58:	631a      	str	r2, [r3, #48]	; 0x30

    /* By default, have UDP checksum logic enabled.  To disable checksum logic, the
       application must call the nx_udp_checksum disable function for this UDP socket.  */
    socket_ptr -> nx_udp_socket_disable_checksum =  NX_FALSE;
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Clear the socket bind in progress flag.  */
    socket_ptr -> nx_udp_socket_bind_in_progress =  NX_FALSE;
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2200      	movs	r2, #0
 8009e64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set various list pointers to NULL.  */
    socket_ptr -> nx_udp_socket_bound_next =            NX_NULL;
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	64da      	str	r2, [r3, #76]	; 0x4c
    socket_ptr -> nx_udp_socket_bound_previous =        NX_NULL;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	651a      	str	r2, [r3, #80]	; 0x50
    socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2200      	movs	r2, #0
 8009e76:	661a      	str	r2, [r3, #96]	; 0x60
    socket_ptr -> nx_udp_socket_bind_suspended_count =  0;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize the receive queue parameters.  */
    socket_ptr -> nx_udp_socket_receive_count =         0;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2200      	movs	r2, #0
 8009e82:	63da      	str	r2, [r3, #60]	; 0x3c
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e88:	641a      	str	r2, [r3, #64]	; 0x40
    socket_ptr -> nx_udp_socket_receive_head =          NX_NULL;
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	645a      	str	r2, [r3, #68]	; 0x44
    socket_ptr -> nx_udp_socket_receive_tail =          NX_NULL;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	2200      	movs	r2, #0
 8009e94:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =             NX_NULL;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	671a      	str	r2, [r3, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, queue_maximum, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can add socket to IP structure.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f002 fa96 	bl	800c3d8 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009eac:	f3ef 8310 	mrs	r3, PRIMASK
 8009eb0:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009eb2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009eb4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009eb6:	b672      	cpsid	i
    return(int_posture);
 8009eb8:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts while we link the new UDP socket to the IP structure.  */
    TX_DISABLE
 8009eba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the UDP ID field in the UDP control block.  */
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	4a1f      	ldr	r2, [pc, #124]	; (8009f3c <_nx_udp_socket_create+0x11c>)
 8009ec0:	601a      	str	r2, [r3, #0]

    /* Place the new UDP control block on the list of created UDP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d015      	beq.n	8009ef8 <_nx_udp_socket_create+0xd8>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ed4:	623b      	str	r3, [r7, #32]

        /* Place the new UDP socket control block in the list.  */
        (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous =  socket_ptr;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	66da      	str	r2, [r3, #108]	; 0x6c
        tail_ptr ->  nx_udp_socket_created_next =  socket_ptr;
 8009ee0:	6a3b      	ldr	r3, [r7, #32]
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup this UDP socket's created links.  */
        socket_ptr -> nx_udp_socket_created_previous =  tail_ptr;
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	6a3a      	ldr	r2, [r7, #32]
 8009eea:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      ip_ptr -> nx_ip_udp_created_sockets_ptr;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	669a      	str	r2, [r3, #104]	; 0x68
 8009ef6:	e009      	b.n	8009f0c <_nx_udp_socket_create+0xec>
    }
    else
    {

        /* The created UDP socket list is empty.  Add UDP socket control block to empty list.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =       socket_ptr;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        socket_ptr -> nx_udp_socket_created_previous =  socket_ptr;
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	669a      	str	r2, [r3, #104]	; 0x68
    }

    /* Increment the created UDP socket counter.  */
    ip_ptr -> nx_ip_udp_created_sockets_count++;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f383 8810 	msr	PRIMASK, r3
}
 8009f24:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f002 fccb 	bl	800c8c8 <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3728      	adds	r7, #40	; 0x28
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	55445020 	.word	0x55445020

08009f40 <_nx_udp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b088      	sub	sp, #32
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	61fb      	str	r3, [r7, #28]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_DELETE, ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can process the socket delete request.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009f54:	f04f 31ff 	mov.w	r1, #4294967295
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f002 fa3d 	bl	800c3d8 <_tx_mutex_get>

    /* Determine if the socket is still bound to port.  */
    if (socket_ptr -> nx_udp_socket_bound_next)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d007      	beq.n	8009f76 <_nx_udp_socket_delete+0x36>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f002 fcab 	bl	800c8c8 <_tx_mutex_put>

        /* Return a still bound error code.  */
        return(NX_STILL_BOUND);
 8009f72:	2342      	movs	r3, #66	; 0x42
 8009f74:	e03f      	b.n	8009ff6 <_nx_udp_socket_delete+0xb6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f76:	f3ef 8310 	mrs	r3, PRIMASK
 8009f7a:	617b      	str	r3, [r7, #20]
    return(posture);
 8009f7c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009f7e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f80:	b672      	cpsid	i
    return(int_posture);
 8009f82:	693b      	ldr	r3, [r7, #16]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8009f84:	61bb      	str	r3, [r7, #24]

    /* Now, remove the UDP socket from the created socket list.  */

    /* Clear the socket ID to make it invalid.  */
    socket_ptr -> nx_udp_socket_id =  0;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	601a      	str	r2, [r3, #0]

    /* See if the socket is the only one on the list.  */
    if (socket_ptr == socket_ptr -> nx_udp_socket_created_next)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d104      	bne.n	8009fa0 <_nx_udp_socket_delete+0x60>
    {

        /* Only created socket, just set the created list to NULL.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =  NX_NULL;
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8009f9e:	e014      	b.n	8009fca <_nx_udp_socket_delete+0x8a>
    }
    else
    {

        /* Link-up the neighbors.  */
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            socket_ptr -> nx_udp_socket_created_previous;
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 8009fa8:	66da      	str	r2, [r3, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
            socket_ptr -> nx_udp_socket_created_next;
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	6e92      	ldr	r2, [r2, #104]	; 0x68
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 8009fb2:	669a      	str	r2, [r3, #104]	; 0x68

        /* See if we have to update the created list head pointer.  */
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d104      	bne.n	8009fca <_nx_udp_socket_delete+0x8a>
        {

            /* Yes, move the head pointer to the next link. */
            ip_ptr -> nx_ip_udp_created_sockets_ptr =  socket_ptr -> nx_udp_socket_created_next;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        }
    }

    /* Decrease the created sockets count.  */
    ip_ptr -> nx_ip_udp_created_sockets_count--;
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009fd0:	1e5a      	subs	r2, r3, #1
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f383 8810 	msr	PRIMASK, r3
}
 8009fe2:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(socket_ptr);

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009fea:	4618      	mov	r0, r3
 8009fec:	f002 fc6c 	bl	800c8c8 <_tx_mutex_put>

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8009ff0:	f003 f9e6 	bl	800d3c0 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3720      	adds	r7, #32
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
	...

0800a000 <_nx_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b09a      	sub	sp, #104	; 0x68
 800a004:	af02      	add	r7, sp, #8
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
TX_INTERRUPT_SAVE_AREA

ULONG                 *temp_ptr;
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
NX_INTERFACE          *interface_ptr = NX_NULL;
 800a00c:	2300      	movs	r3, #0
 800a00e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT                   compute_checksum = 1;
 800a010:	2301      	movs	r3, #1
 800a012:	65bb      	str	r3, [r7, #88]	; 0x58

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2200      	movs	r2, #0
 800a018:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a01a:	f3ef 8310 	mrs	r3, PRIMASK
 800a01e:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800a020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800a022:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800a024:	b672      	cpsid	i
    return(int_posture);
 800a026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* Loop to retrieve a packet from the interface.  */
    for (;;)
    {

        /* Lockout interrupts.  */
        TX_DISABLE
 800a028:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the socket is currently bound.  */
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d107      	bne.n	800a042 <_nx_udp_socket_receive+0x42>
 800a032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a034:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	f383 8810 	msr	PRIMASK, r3
}
 800a03c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Socket is not bound, return an error message.  */
            return(NX_NOT_BOUND);
 800a03e:	2324      	movs	r3, #36	; 0x24
 800a040:	e142      	b.n	800a2c8 <_nx_udp_socket_receive+0x2c8>
        }

        /* Determine if there is a packet already queued up for this socket.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a046:	2b00      	cmp	r3, #0
 800a048:	d01a      	beq.n	800a080 <_nx_udp_socket_receive+0x80>
        {

            /* Yes, there is a packet waiting.  */

            /* Remove it and place it in the thread's destination.  */
            *packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	601a      	str	r2, [r3, #0]
            socket_ptr -> nx_udp_socket_receive_head =  (*packet_ptr) -> nx_packet_queue_next;
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	69da      	ldr	r2, [r3, #28]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	645a      	str	r2, [r3, #68]	; 0x44

            /* If this was the last packet, set the tail pointer to NULL.  */
            if (socket_ptr -> nx_udp_socket_receive_head == NX_NULL)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a060:	2b00      	cmp	r3, #0
 800a062:	d102      	bne.n	800a06a <_nx_udp_socket_receive+0x6a>
            {
                socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	649a      	str	r2, [r3, #72]	; 0x48
            }

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06e:	1e5a      	subs	r2, r3, #1
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	63da      	str	r2, [r3, #60]	; 0x3c
 800a074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a076:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	f383 8810 	msr	PRIMASK, r3
}
 800a07e:	e05e      	b.n	800a13e <_nx_udp_socket_receive+0x13e>
        }
        else
        {

            /* Determine if the request specifies suspension.  */
            if (wait_option)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d050      	beq.n	800a128 <_nx_udp_socket_receive+0x128>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup thread pointer.  */
                thread_ptr =  _tx_thread_current_ptr;
 800a086:	4b92      	ldr	r3, [pc, #584]	; (800a2d0 <_nx_udp_socket_receive+0x2d0>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_receive_cleanup;
 800a08c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a08e:	4a91      	ldr	r2, [pc, #580]	; (800a2d4 <_nx_udp_socket_receive+0x2d4>)
 800a090:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 800a092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return packet pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 800a098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup suspension list.  */
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d012      	beq.n	800a0cc <_nx_udp_socket_receive+0xcc>
                {

                    /* This list is not NULL, add current thread to the end. */
                    thread_ptr -> tx_thread_suspended_next =
                        socket_ptr -> nx_udp_socket_receive_suspension_list;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next =
 800a0aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ac:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =
                        (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0b2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =
 800a0b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0b6:	675a      	str	r2, [r3, #116]	; 0x74
                    ((socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0c0:	671a      	str	r2, [r3, #112]	; 0x70
                        thread_ptr;
                    (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0c8:	675a      	str	r2, [r3, #116]	; 0x74
 800a0ca:	e008      	b.n	800a0de <_nx_udp_socket_receive+0xde>
                else
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    socket_ptr -> nx_udp_socket_receive_suspension_list =   thread_ptr;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0d0:	659a      	str	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next              =   thread_ptr;
 800a0d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0d6:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous          =   thread_ptr;
 800a0d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0dc:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspended thread count.  */
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0e2:	1c5a      	adds	r2, r3, #1
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	65da      	str	r2, [r3, #92]	; 0x5c

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800a0e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ea:	220c      	movs	r2, #12
 800a0ec:	631a      	str	r2, [r3, #48]	; 0x30

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a0ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	639a      	str	r2, [r3, #56]	; 0x38

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800a0f4:	4b78      	ldr	r3, [pc, #480]	; (800a2d8 <_nx_udp_socket_receive+0x2d8>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	4a77      	ldr	r2, [pc, #476]	; (800a2d8 <_nx_udp_socket_receive+0x2d8>)
 800a0fc:	6013      	str	r3, [r2, #0]

                /* Save the timeout value.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a0fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	64da      	str	r2, [r3, #76]	; 0x4c
 800a104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a106:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a108:	6a3b      	ldr	r3, [r7, #32]
 800a10a:	f383 8810 	msr	PRIMASK, r3
}
 800a10e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a110:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a112:	f003 fa8f 	bl	800d634 <_tx_thread_system_suspend>

                /* Determine if a packet was received successfully.  */
                if (thread_ptr -> tx_thread_suspend_status != NX_SUCCESS)
 800a116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00e      	beq.n	800a13e <_nx_udp_socket_receive+0x13e>
                {

                    /* If not, just return the error code.  */
                    return(thread_ptr -> tx_thread_suspend_status);
 800a120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a126:	e0cf      	b.n	800a2c8 <_nx_udp_socket_receive+0x2c8>
 800a128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a12a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	f383 8810 	msr	PRIMASK, r3
}
 800a132:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Set the return pointer to NULL in case it was set but released due to checksum error.  */
                *packet_ptr =   NX_NULL;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2200      	movs	r2, #0
 800a138:	601a      	str	r2, [r3, #0]

                /* Immediate return, return error completion.  */
                return(NX_NO_PACKET);
 800a13a:	2301      	movs	r3, #1
 800a13c:	e0c4      	b.n	800a2c8 <_nx_udp_socket_receive+0x2c8>
            }
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        /* Get the packet interface. */
#ifndef NX_DISABLE_IPV4
        if ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a146:	2b04      	cmp	r3, #4
 800a148:	d103      	bne.n	800a152 <_nx_udp_socket_receive+0x152>
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_interface_ptr;
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a150:	65fb      	str	r3, [r7, #92]	; 0x5c
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
        }
#endif /* FEATURE_NX_IPV6 */

        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_RX_CHECKSUM)
 800a152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a156:	f003 0320 	and.w	r3, r3, #32
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <_nx_udp_socket_receive+0x162>
        {
            compute_checksum = 0;
 800a15e:	2300      	movs	r3, #0
 800a160:	65bb      	str	r3, [r7, #88]	; 0x58
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 800a162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 809d 	beq.w	800a2a4 <_nx_udp_socket_receive+0x2a4>

            /* Determine if we need to compute the UDP checksum.  If it is disabled for this socket
               or if the UDP packet has a zero in the checksum field (indicating it was not computed
               by the sender, skip the checksum processing.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            temp_ptr =  (ULONG *)(*packet_ptr) -> nx_packet_prepend_ptr;
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	647b      	str	r3, [r7, #68]	; 0x44
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a176:	2b00      	cmp	r3, #0
 800a178:	d105      	bne.n	800a186 <_nx_udp_socket_receive+0x186>
 800a17a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a17c:	3304      	adds	r3, #4
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	b29b      	uxth	r3, r3
 800a182:	2b00      	cmp	r3, #0
 800a184:	d106      	bne.n	800a194 <_nx_udp_socket_receive+0x194>
                ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V6))                               /* It is IPv6 packet */
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 800a18e:	2b06      	cmp	r3, #6
 800a190:	f040 808b 	bne.w	800a2aa <_nx_udp_socket_receive+0x2aa>
            {
            ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800a194:	2300      	movs	r3, #0
 800a196:	657b      	str	r3, [r7, #84]	; 0x54
 800a198:	2300      	movs	r3, #0
 800a19a:	653b      	str	r3, [r7, #80]	; 0x50
            ULONG          checksum;
            NX_PACKET     *current_ptr = *packet_ptr;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	643b      	str	r3, [r7, #64]	; 0x40
#ifdef NX_LITTLE_ENDIAN
            NX_UDP_HEADER *udp_header_ptr;

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(current_ptr -> nx_packet_prepend_ptr);
 800a1a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* NX_LITTLE_ENDIAN */

#ifndef NX_DISABLE_IPV4
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800a1a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a1ae:	2b04      	cmp	r3, #4
 800a1b0:	d108      	bne.n	800a1c4 <_nx_udp_socket_receive+0x1c4>
                {
                NX_IPV4_HEADER *ipv4_header;

                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    ipv4_header = (NX_IPV4_HEADER *)(current_ptr -> nx_packet_ip_header);
 800a1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b6:	63bb      	str	r3, [r7, #56]	; 0x38
                    ip_src_addr = &(ipv4_header -> nx_ip_header_source_ip);
 800a1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ba:	330c      	adds	r3, #12
 800a1bc:	657b      	str	r3, [r7, #84]	; 0x54
                    ip_dest_addr = &(ipv4_header -> nx_ip_header_destination_ip);
 800a1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c0:	3310      	adds	r3, #16
 800a1c2:	653b      	str	r3, [r7, #80]	; 0x50

#endif /* FEATURE_NX_IPV6 */

#ifdef NX_LITTLE_ENDIAN
                /* Restore UDP header to network byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800a1c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	ba1a      	rev	r2, r3
 800a1ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1cc:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	ba1a      	rev	r2, r3
 800a1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1d6:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* nx_ip_checksum_compute takes care of both even number length and odd number length */
                /* Compute the checksum of the first packet */
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
                                                   (UINT)current_ptr -> nx_packet_length,
 800a1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 800a1dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1e2:	2111      	movs	r1, #17
 800a1e4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a1e6:	f7fc fcfc 	bl	8006be2 <_nx_ip_checksum_compute>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	637b      	str	r3, [r7, #52]	; 0x34
                                                   ip_src_addr,
                                                   ip_dest_addr);

#ifdef NX_LITTLE_ENDIAN
                /* Convert UDP header to host byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800a1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	ba1a      	rev	r2, r3
 800a1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1f6:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	ba1a      	rev	r2, r3
 800a1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a200:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* Perform the one's complement processing on the checksum.  */
                checksum =  NX_LOWER_16_MASK & ~checksum;
 800a202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a204:	43db      	mvns	r3, r3
 800a206:	b29b      	uxth	r3, r3
 800a208:	637b      	str	r3, [r7, #52]	; 0x34

                /* Determine if it is valid.  */
                if (checksum == 0)
 800a20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d04b      	beq.n	800a2a8 <_nx_udp_socket_receive+0x2a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a210:	f3ef 8310 	mrs	r3, PRIMASK
 800a214:	617b      	str	r3, [r7, #20]
    return(posture);
 800a216:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a218:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a21a:	b672      	cpsid	i
    return(int_posture);
 800a21c:	693b      	ldr	r3, [r7, #16]
                {

#ifndef NX_DISABLE_UDP_INFO

                    /* Disable interrupts.  */
                    TX_DISABLE
 800a21e:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Increment the UDP checksum error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_checksum_errors++;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a228:	3201      	adds	r2, #1
 800a22a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

                    /* Increment the UDP invalid packets error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a236:	3201      	adds	r2, #1
 800a238:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                    /* Increment the UDP checksum error count for this socket.  */
                    socket_ptr -> nx_udp_socket_checksum_errors++;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Decrement the total UDP receive packets count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packets_received--;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a24e:	3a01      	subs	r2, #1
 800a250:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

                    /* Decrement the total UDP receive bytes.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a262:	1ad2      	subs	r2, r2, r3
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	3208      	adds	r2, #8
 800a26a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

                    /* Decrement the total UDP receive packets count.  */
                    socket_ptr -> nx_udp_socket_packets_received--;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	1e5a      	subs	r2, r3, #1
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	619a      	str	r2, [r3, #24]

                    /* Decrement the total UDP receive bytes.  */
                    socket_ptr -> nx_udp_socket_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	69da      	ldr	r2, [r3, #28]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	f103 0208 	add.w	r2, r3, #8
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	61da      	str	r2, [r3, #28]
 800a28c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a28e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	f383 8810 	msr	PRIMASK, r3
}
 800a296:	bf00      	nop
                    /* Restore interrupts.  */
                    TX_RESTORE
#endif

                    /* Bad UDP checksum.  Release the packet. */
                    _nx_packet_release(*packet_ptr);
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7fe ffa1 	bl	80091e4 <_nx_packet_release>
        TX_DISABLE
 800a2a2:	e6ba      	b.n	800a01a <_nx_udp_socket_receive+0x1a>
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        else
        {

            /* Simply break - checksum logic is conditionally disabled.  */
            break;
 800a2a4:	bf00      	nop
 800a2a6:	e000      	b.n	800a2aa <_nx_udp_socket_receive+0x2aa>
                    break;
 800a2a8:	bf00      	nop
    /* At this point, we have a valid UDP packet for the caller.  */

    /* Remove the UDP header.  */

    /* Decrease the packet length.  */
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3a08      	subs	r2, #8
 800a2b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Position past the UDP header pointer.  */
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689a      	ldr	r2, [r3, #8]
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3208      	adds	r2, #8
 800a2c4:	609a      	str	r2, [r3, #8]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_SOCKET_RECEIVE, 0, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length);

    /* Return a successful status to the caller.  */
    return(NX_SUCCESS);
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3760      	adds	r7, #96	; 0x60
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	20014884 	.word	0x20014884
 800a2d4:	08009b1d 	.word	0x08009b1d
 800a2d8:	2001491c 	.word	0x2001491c

0800a2dc <_nx_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                          ULONG ip_address, UINT port)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b088      	sub	sp, #32
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	603b      	str	r3, [r7, #0]
UINT        status;

NXD_ADDRESS dual_ip_address;

    /* build up the IP Address structure. */
    dual_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 800a2ea:	2304      	movs	r3, #4
 800a2ec:	617b      	str	r3, [r7, #20]
    dual_ip_address.nxd_ip_address.v4 = ip_address;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	61bb      	str	r3, [r7, #24]

    /* Call the actual udp socket send routine. */
    status = _nxd_udp_socket_send(socket_ptr, packet_ptr, &dual_ip_address, port);
 800a2f2:	f107 0214 	add.w	r2, r7, #20
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	68b9      	ldr	r1, [r7, #8]
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f000 f968 	bl	800a5d0 <_nxd_udp_socket_send>
 800a300:	61f8      	str	r0, [r7, #28]

    return(status);
 800a302:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 800a304:	4618      	mov	r0, r3
 800a306:	3720      	adds	r7, #32
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <_nx_udp_socket_unbind>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b094      	sub	sp, #80	; 0x50
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
NX_PACKET     *packet_ptr;
NX_PACKET     *next_packet_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	647b      	str	r3, [r7, #68]	; 0x44
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_UNBIND, ip_ptr, socket_ptr, socket_ptr -> nx_udp_socket_port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a31a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a31c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a320:	f04f 31ff 	mov.w	r1, #4294967295
 800a324:	4618      	mov	r0, r3
 800a326:	f002 f857 	bl	800c3d8 <_tx_mutex_get>

    /* Determine if the socket is bound to port.  */
    if (!socket_ptr -> nx_udp_socket_bound_next)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d119      	bne.n	800a366 <_nx_udp_socket_unbind+0x5a>
    {

        /* Determine if there is a special condition for the socket not being in
           a bound condition...  i.e. the socket is in a pending-to-be-bound condition
           in a call from a different thread.  */
        if (socket_ptr -> nx_udp_socket_bind_in_progress)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00d      	beq.n	800a356 <_nx_udp_socket_unbind+0x4a>
        {

            /* Execute the bind suspension cleanup routine.  */
            _nx_udp_bind_cleanup(socket_ptr -> nx_udp_socket_bind_in_progress NX_CLEANUP_ARGUMENT);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33e:	2100      	movs	r1, #0
 800a340:	4618      	mov	r0, r3
 800a342:	f7ff f929 	bl	8009598 <_nx_udp_bind_cleanup>

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a348:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a34c:	4618      	mov	r0, r3
 800a34e:	f002 fabb 	bl	800c8c8 <_tx_mutex_put>

            /* Return success.  */
            return(NX_SUCCESS);
 800a352:	2300      	movs	r3, #0
 800a354:	e135      	b.n	800a5c2 <_nx_udp_socket_unbind+0x2b6>
        }
        else
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a358:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a35c:	4618      	mov	r0, r3
 800a35e:	f002 fab3 	bl	800c8c8 <_tx_mutex_put>

            /* Return a not bound error code.  */
            return(NX_NOT_BOUND);
 800a362:	2324      	movs	r3, #36	; 0x24
 800a364:	e12d      	b.n	800a5c2 <_nx_udp_socket_unbind+0x2b6>

    /* Otherwise, the socket is bound.  We need to remove this socket from the
       port and check for any other UDP socket bind requests that are queued.  */

    /* Pickup the port number in the UDP socket structure.  */
    port =  socket_ptr -> nx_udp_socket_port;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800a36c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a36e:	0a1a      	lsrs	r2, r3, #8
 800a370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a372:	4413      	add	r3, r2
 800a374:	f003 031f 	and.w	r3, r3, #31
 800a378:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a37a:	f3ef 8310 	mrs	r3, PRIMASK
 800a37e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a382:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a384:	b672      	cpsid	i
    return(int_posture);
 800a386:	6abb      	ldr	r3, [r7, #40]	; 0x28
#ifdef NX_ENABLE_TCPIP_OFFLOAD
    _nx_udp_socket_driver_unbind(socket_ptr);
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Disable interrupts while we unlink the current socket.  */
    TX_DISABLE
 800a388:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if this is the only socket bound on this port list.  */
    if (socket_ptr -> nx_udp_socket_bound_next == socket_ptr)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	429a      	cmp	r2, r3
 800a392:	d109      	bne.n	800a3a8 <_nx_udp_socket_unbind+0x9c>
    {

        /* Yes, this is the only socket on the port list.  */

        /* Clear the list head pointer and the next pointer in the socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =   NX_NULL;
 800a394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a396:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a398:	32e0      	adds	r2, #224	; 0xe0
 800a39a:	2100      	movs	r1, #0
 800a39c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	64da      	str	r2, [r3, #76]	; 0x4c
 800a3a6:	e01b      	b.n	800a3e0 <_nx_udp_socket_unbind+0xd4>
    {

        /* Relink the neighbors of this UDP socket.  */

        /* Update the links of the adjacent sockets.  */
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous;
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 800a3b0:	651a      	str	r2, [r3, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            socket_ptr -> nx_udp_socket_bound_next;
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800a3ba:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Determine if the head of the port list points to the socket being removed.
           If so, we need to move the head pointer.  */
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 800a3bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3c0:	32e0      	adds	r2, #224	; 0xe0
 800a3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d106      	bne.n	800a3da <_nx_udp_socket_unbind+0xce>
        {

            /* Yes, we need to move the port list head pointer.  */
            ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr -> nx_udp_socket_bound_next;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a3d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3d4:	32e0      	adds	r2, #224	; 0xe0
 800a3d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        /* Clear the next pointer in the socket to indicate it is no longer bound.  */
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	64da      	str	r2, [r3, #76]	; 0x4c
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e6:	f383 8810 	msr	PRIMASK, r3
}
 800a3ea:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* The socket is off the bound list...  we need to check for queued packets and possible
       receive suspension.  We need to clean up either of these conditions.  */
    if (socket_ptr -> nx_udp_socket_receive_count)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d01b      	beq.n	800a42c <_nx_udp_socket_unbind+0x120>
    {

        /* Setup packet pointer.  */
        packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3f8:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Clear the head and the tail pointers.  */
        socket_ptr -> nx_udp_socket_receive_head =  NX_NULL;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	645a      	str	r2, [r3, #68]	; 0x44
        socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	649a      	str	r2, [r3, #72]	; 0x48

        /* Loop to clear all the packets out.  */
        while (socket_ptr -> nx_udp_socket_receive_count)
 800a406:	e00c      	b.n	800a422 <_nx_udp_socket_unbind+0x116>
        {

            /* Pickup the next queued packet.  */
            next_packet_ptr =  packet_ptr -> nx_packet_queue_next;
 800a408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a40a:	69db      	ldr	r3, [r3, #28]
 800a40c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800a40e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a410:	f7fe fee8 	bl	80091e4 <_nx_packet_release>

            /* Move to the next packet.  */
            packet_ptr =  next_packet_ptr;
 800a414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a416:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a41c:	1e5a      	subs	r2, r3, #1
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	63da      	str	r2, [r3, #60]	; 0x3c
        while (socket_ptr -> nx_udp_socket_receive_count)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1ee      	bne.n	800a408 <_nx_udp_socket_unbind+0xfc>
 800a42a:	e035      	b.n	800a498 <_nx_udp_socket_unbind+0x18c>
        }
    }
    else if (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a430:	2b00      	cmp	r3, #0
 800a432:	d031      	beq.n	800a498 <_nx_udp_socket_unbind+0x18c>
    {

        /* Clear out all threads suspended on this socket.  */

        /* Pickup the first suspended thread.  */
        thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a438:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Clear the thread receive suspension list.  */
        socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Walk through the queue list to resume any and all threads suspended
           on this queue.  */
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800a440:	e026      	b.n	800a490 <_nx_udp_socket_unbind+0x184>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a442:	f3ef 8310 	mrs	r3, PRIMASK
 800a446:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a448:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a44a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a44c:	b672      	cpsid	i
    return(int_posture);
 800a44e:	69bb      	ldr	r3, [r7, #24]
        {

            /* Lockout interrupts.  */
            TX_DISABLE
 800a450:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a454:	2200      	movs	r2, #0
 800a456:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800a458:	4b5c      	ldr	r3, [pc, #368]	; (800a5cc <_nx_udp_socket_unbind+0x2c0>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	3301      	adds	r3, #1
 800a45e:	4a5b      	ldr	r2, [pc, #364]	; (800a5cc <_nx_udp_socket_unbind+0x2c0>)
 800a460:	6013      	str	r3, [r2, #0]
 800a462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a464:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	f383 8810 	msr	PRIMASK, r3
}
 800a46c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set the return status in the thread to NX_SOCKET_UNBOUND.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SOCKET_UNBOUND;
 800a46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a470:	2226      	movs	r2, #38	; 0x26
 800a472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800a476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a47a:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800a47c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a47e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a480:	4618      	mov	r0, r3
 800a482:	f002 ffd7 	bl	800d434 <_tx_thread_system_resume>

            /* Decrease the suspended count.  */
            socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a48a:	1e5a      	subs	r2, r3, #1
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	65da      	str	r2, [r3, #92]	; 0x5c
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1d4      	bne.n	800a442 <_nx_udp_socket_unbind+0x136>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a498:	f3ef 8310 	mrs	r3, PRIMASK
 800a49c:	617b      	str	r3, [r7, #20]
    return(posture);
 800a49e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a4a0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a4a2:	b672      	cpsid	i
    return(int_posture);
 800a4a4:	693b      	ldr	r3, [r7, #16]
        }
    }

    /* Disable interrupts again.  */
    TX_DISABLE
 800a4a6:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there are any threads suspended on trying to bind to the
       same port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_bind_suspension_list;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (thread_ptr)
 800a4ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d079      	beq.n	800a5a8 <_nx_udp_socket_unbind+0x29c>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800a4b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d103      	bne.n	800a4c6 <_nx_udp_socket_unbind+0x1ba>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	661a      	str	r2, [r3, #96]	; 0x60
 800a4c4:	e00d      	b.n	800a4e2 <_nx_udp_socket_unbind+0x1d6>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800a4c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800a4ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800a4d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800a4d6:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a4d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800a4dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4de:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a4e0:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4e6:	1e5a      	subs	r2, r3, #1
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	665a      	str	r2, [r3, #100]	; 0x64

        /* Pickup the new socket structure to link to the port list.  */
        new_socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800a4ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4f0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Clear the new socket's bind in progress flag.  */
        new_socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Inherit the suspension list from the previously bound socket.  */
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
            socket_ptr -> nx_udp_socket_bind_suspension_list;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	661a      	str	r2, [r3, #96]	; 0x60
        socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	661a      	str	r2, [r3, #96]	; 0x60

        /* Link the new socket to the bound list.  */
        if (ip_ptr -> nx_ip_udp_port_table[index])
 800a506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a508:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a50a:	32e0      	adds	r2, #224	; 0xe0
 800a50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d01e      	beq.n	800a552 <_nx_udp_socket_unbind+0x246>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            new_socket_ptr -> nx_udp_socket_bound_next =
                ip_ptr -> nx_ip_udp_port_table[index];
 800a514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a516:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a518:	32e0      	adds	r2, #224	; 0xe0
 800a51a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            new_socket_ptr -> nx_udp_socket_bound_next =
 800a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a520:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =
                (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 800a522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a526:	32e0      	adds	r2, #224	; 0xe0
 800a528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a52c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            new_socket_ptr -> nx_udp_socket_bound_previous =
 800a52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a530:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800a532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a534:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a536:	32e0      	adds	r2, #224	; 0xe0
 800a538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a53c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a53e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a540:	64da      	str	r2, [r3, #76]	; 0x4c
                new_socket_ptr;
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   new_socket_ptr;
 800a542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a546:	32e0      	adds	r2, #224	; 0xe0
 800a548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a54c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a54e:	651a      	str	r2, [r3, #80]	; 0x50
 800a550:	e00b      	b.n	800a56a <_nx_udp_socket_unbind+0x25e>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            new_socket_ptr -> nx_udp_socket_bound_next =      new_socket_ptr;
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a556:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =  new_socket_ptr;
 800a558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a55c:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =           new_socket_ptr;
 800a55e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a562:	32e0      	adds	r2, #224	; 0xe0
 800a564:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a56c:	2200      	movs	r2, #0
 800a56e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800a570:	4b16      	ldr	r3, [pc, #88]	; (800a5cc <_nx_udp_socket_unbind+0x2c0>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	3301      	adds	r3, #1
 800a576:	4a15      	ldr	r2, [pc, #84]	; (800a5cc <_nx_udp_socket_unbind+0x2c0>)
 800a578:	6013      	str	r3, [r2, #0]
 800a57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f383 8810 	msr	PRIMASK, r3
}
 800a584:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800a586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a588:	2200      	movs	r2, #0
 800a58a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a58e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a590:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a594:	4618      	mov	r0, r3
 800a596:	f002 f997 	bl	800c8c8 <_tx_mutex_put>

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800a59a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a59c:	f002 ff4a 	bl	800d434 <_tx_thread_system_resume>
        /* Return success to the caller.  */
        return(NX_SUCCESS);
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800a5a0:	f002 ff0e 	bl	800d3c0 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	e00c      	b.n	800a5c2 <_nx_udp_socket_unbind+0x2b6>
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	f383 8810 	msr	PRIMASK, r3
}
 800a5b2:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a5b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5b6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f002 f984 	bl	800c8c8 <_tx_mutex_put>
        return(NX_SUCCESS);
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3750      	adds	r7, #80	; 0x50
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	2001491c 	.word	0x2001491c

0800a5d0 <_nxd_udp_socket_send>:
/**************************************************************************/
UINT  _nxd_udp_socket_send(NX_UDP_SOCKET *socket_ptr,
                           NX_PACKET     *packet_ptr,
                           NXD_ADDRESS   *ip_address,
                           UINT           port)
{
 800a5d0:	b590      	push	{r4, r7, lr}
 800a5d2:	b097      	sub	sp, #92	; 0x5c
 800a5d4:	af04      	add	r7, sp, #16
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
 800a5dc:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

NX_IP         *ip_ptr;
NX_UDP_HEADER *udp_header_ptr;
ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	647b      	str	r3, [r7, #68]	; 0x44
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef NX_DISABLE_IPV4
ULONG          next_hop_address = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	617b      	str	r3, [r7, #20]
#endif /* !NX_DISABLE_IPV4  */
#if !defined(NX_DISABLE_IPV4) || (defined(FEATURE_NX_IPV6) && defined(NX_ENABLE_INTERFACE_CAPABILITY))
NX_INTERFACE  *interface_ptr = NX_NULL;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifdef TX_ENABLE_EVENT_TRACE
UINT           ip_address_log = 0;
#endif /* TX_ENABLE_EVENT_TRACE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT           compute_checksum = 1;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a5f2:	f3ef 8310 	mrs	r3, PRIMASK
 800a5f6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800a5fa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a5fc:	b672      	cpsid	i
    return(int_posture);
 800a5fe:	6a3b      	ldr	r3, [r7, #32]
    /* Disable UDP TX checksum. */
    compute_checksum = 0;
#endif /* NX_DISABLE_UDP_TX_CHECKSUM */

    /* Lockout interrupts.  */
    TX_DISABLE
 800a600:	633b      	str	r3, [r7, #48]	; 0x30

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the socket is currently bound to a UDP port.  */
    if (!socket_ptr ->  nx_udp_socket_bound_next)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a606:	2b00      	cmp	r3, #0
 800a608:	d107      	bne.n	800a61a <_nxd_udp_socket_send+0x4a>
 800a60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	f383 8810 	msr	PRIMASK, r3
}
 800a614:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
 800a616:	2324      	movs	r3, #36	; 0x24
 800a618:	e0d3      	b.n	800a7c2 <_nxd_udp_socket_send+0x1f2>
    }

    /* Pickup the important information from the socket.  */

    /* Set up the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a622:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	f383 8810 	msr	PRIMASK, r3
}
 800a62a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_DISABLE_IPV4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b04      	cmp	r3, #4
 800a632:	d118      	bne.n	800a666 <_nxd_udp_socket_send+0x96>
    {

        /* Look for a suitable interface. */
        _nx_ip_route_find(ip_ptr, ip_address -> nxd_ip_address.v4, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6859      	ldr	r1, [r3, #4]
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a63e:	f107 0314 	add.w	r3, r7, #20
 800a642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a644:	f7fd fbac 	bl	8007da0 <_nx_ip_route_find>
                          &next_hop_address);

        /* Check the packet interface.  */
        if (!packet_ptr -> nx_packet_address.nx_packet_interface_ptr)
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <_nxd_udp_socket_send+0x84>
        {

            /* None found; return the error status. */
            return(NX_IP_ADDRESS_ERROR);
 800a650:	2321      	movs	r3, #33	; 0x21
 800a652:	e0b6      	b.n	800a7c2 <_nxd_udp_socket_send+0x1f2>
        }

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a658:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Fill in the IP src/dest address */
        ip_dest_addr = &ip_address -> nxd_ip_address.v4;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	3304      	adds	r3, #4
 800a65e:	643b      	str	r3, [r7, #64]	; 0x40
        ip_src_addr = &interface_ptr -> nx_interface_ip_address;
 800a660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a662:	3314      	adds	r3, #20
 800a664:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }
#endif /* NX_IPSEC_ENABLE */
        
    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f1a3 0208 	sub.w	r2, r3, #8
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(ip_address -> nxd_ip_version);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	b2da      	uxtb	r2, r3
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 800a67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a684:	1c5a      	adds	r2, r3, #1
 800a686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	441a      	add	r2, r3
 800a698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	1c5a      	adds	r2, r3, #1
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	695a      	ldr	r2, [r3, #20]
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b0:	441a      	add	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ba:	f103 0208 	add.w	r2, r3, #8
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the UDP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 =
        (((ULONG)socket_ptr -> nx_udp_socket_port) << NX_SHIFT_BY_16) | (ULONG)port;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	041a      	lsls	r2, r3, #16
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	431a      	orrs	r2, r3
    udp_header_ptr -> nx_udp_header_word_0 =
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6da:	041a      	lsls	r2, r3, #16
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	605a      	str	r2, [r3, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_SEND, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
    swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	ba1a      	rev	r2, r3
 800a6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e8:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	ba1a      	rev	r2, r3
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	605a      	str	r2, [r3, #4]
    Note that with IPv6, UDP packet checksum is mandatory. However if the underly device
    driver is able to compute UDP checksum in hardware, let the driver handle the checksum
    computation.
    */

    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d003      	beq.n	800a704 <_nxd_udp_socket_send+0x134>
        (ip_address -> nxd_ip_version == NX_IP_VERSION_V6))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800a700:	2b06      	cmp	r3, #6
 800a702:	d136      	bne.n	800a772 <_nxd_udp_socket_send+0x1a2>
    {
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 800a704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a708:	f003 0310 	and.w	r3, r3, #16
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d001      	beq.n	800a714 <_nxd_udp_socket_send+0x144>
        {
            compute_checksum = 0;
 800a710:	2300      	movs	r3, #0
 800a712:	63bb      	str	r3, [r7, #56]	; 0x38
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 800a714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a716:	2b00      	cmp	r3, #0
 800a718:	d025      	beq.n	800a766 <_nxd_udp_socket_send+0x196>
        ULONG checksum;

            /* Yes, we need to compute the UDP checksum.  */
            checksum = _nx_ip_checksum_compute(packet_ptr,
                                               NX_PROTOCOL_UDP,
                                               (UINT)packet_ptr -> nx_packet_length,
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            checksum = _nx_ip_checksum_compute(packet_ptr,
 800a71e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a724:	2111      	movs	r1, #17
 800a726:	68b8      	ldr	r0, [r7, #8]
 800a728:	f7fc fa5b 	bl	8006be2 <_nx_ip_checksum_compute>
 800a72c:	4603      	mov	r3, r0
 800a72e:	637b      	str	r3, [r7, #52]	; 0x34
                                               ip_src_addr,
                                               ip_dest_addr);
            checksum = ~checksum & NX_LOWER_16_MASK;
 800a730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a732:	43db      	mvns	r3, r3
 800a734:	b29b      	uxth	r3, r3
 800a736:	637b      	str	r3, [r7, #52]	; 0x34

            /* If the computed checksum is zero, it will be transmitted as all ones. */
            /* RFC 768, page 2. */
            if (checksum == 0)
 800a738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d102      	bne.n	800a744 <_nxd_udp_socket_send+0x174>
            {
                checksum = 0xFFFF;
 800a73e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a742:	637b      	str	r3, [r7, #52]	; 0x34
            }

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	ba1a      	rev	r2, r3
 800a74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74c:	605a      	str	r2, [r3, #4]

            udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 800a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a754:	431a      	orrs	r2, r3
 800a756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a758:	605a      	str	r2, [r3, #4]

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	ba1a      	rev	r2, r3
 800a760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a762:	605a      	str	r2, [r3, #4]
 800a764:	e005      	b.n	800a772 <_nxd_udp_socket_send+0x1a2>
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        else
        {
            /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76a:	f043 0210 	orr.w	r2, r3, #16
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	639a      	str	r2, [r3, #56]	; 0x38
        }
#endif
    }

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a774:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a778:	f04f 31ff 	mov.w	r1, #4294967295
 800a77c:	4618      	mov	r0, r3
 800a77e:	f001 fe2b 	bl	800c3d8 <_tx_mutex_get>
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

#ifndef NX_DISABLE_IPV4
    /* Send the UDP packet to the IPv4 component.  */
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2b04      	cmp	r3, #4
 800a788:	d114      	bne.n	800a7b4 <_nxd_udp_socket_send+0x1e4>
    {

        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6858      	ldr	r0, [r3, #4]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6adc      	ldr	r4, [r3, #44]	; 0x2c
                           socket_ptr -> nx_udp_socket_type_of_service,
                           socket_ptr -> nx_udp_socket_time_to_live,
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a79a:	6979      	ldr	r1, [r7, #20]
 800a79c:	9103      	str	r1, [sp, #12]
 800a79e:	9202      	str	r2, [sp, #8]
 800a7a0:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800a7a4:	9201      	str	r2, [sp, #4]
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	4623      	mov	r3, r4
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	68b9      	ldr	r1, [r7, #8]
 800a7ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7b0:	f7fd fa80 	bl	8007cb4 <_nx_ip_packet_send>
                             ip_dest_addr);
    }
#endif /* FEATURE_NX_IPV6 */

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f002 f884 	bl	800c8c8 <_tx_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	374c      	adds	r7, #76	; 0x4c
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd90      	pop	{r4, r7, pc}
	...

0800a7cc <_nxe_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b088      	sub	sp, #32
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (arp_cache_memory == NX_NULL))
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d007      	beq.n	800a7ee <_nxe_arp_enable+0x22>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a1c      	ldr	r2, [pc, #112]	; (800a854 <_nxe_arp_enable+0x88>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d102      	bne.n	800a7ee <_nxe_arp_enable+0x22>
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <_nxe_arp_enable+0x26>
    {
        return(NX_PTR_ERROR);
 800a7ee:	2307      	movs	r3, #7
 800a7f0:	e02c      	b.n	800a84c <_nxe_arp_enable+0x80>
    }

    /* Check to see if ARP is already enabled.  */
    if (ip_ptr -> nx_ip_arp_allocate)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <_nxe_arp_enable+0x34>
    {
        return(NX_ALREADY_ENABLED);
 800a7fc:	2315      	movs	r3, #21
 800a7fe:	e025      	b.n	800a84c <_nxe_arp_enable+0x80>
    }

    /* Check for invalid ARP cache size.  */
    if (arp_cache_size < sizeof(NX_ARP))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b33      	cmp	r3, #51	; 0x33
 800a804:	d801      	bhi.n	800a80a <_nxe_arp_enable+0x3e>
    {
        return(NX_SIZE_ERROR);
 800a806:	2309      	movs	r3, #9
 800a808:	e020      	b.n	800a84c <_nxe_arp_enable+0x80>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a80a:	f3ef 8305 	mrs	r3, IPSR
 800a80e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a810:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800a812:	4b11      	ldr	r3, [pc, #68]	; (800a858 <_nxe_arp_enable+0x8c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4313      	orrs	r3, r2
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d009      	beq.n	800a830 <_nxe_arp_enable+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a81c:	f3ef 8305 	mrs	r3, IPSR
 800a820:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a822:	697a      	ldr	r2, [r7, #20]
 800a824:	4b0c      	ldr	r3, [pc, #48]	; (800a858 <_nxe_arp_enable+0x8c>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4313      	orrs	r3, r2
 800a82a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a82e:	d304      	bcc.n	800a83a <_nxe_arp_enable+0x6e>
 800a830:	4b0a      	ldr	r3, [pc, #40]	; (800a85c <_nxe_arp_enable+0x90>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a0a      	ldr	r2, [pc, #40]	; (800a860 <_nxe_arp_enable+0x94>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d101      	bne.n	800a83e <_nxe_arp_enable+0x72>
 800a83a:	2311      	movs	r3, #17
 800a83c:	e006      	b.n	800a84c <_nxe_arp_enable+0x80>

    /* Call actual ARP enable function.  */
    status =  _nx_arp_enable(ip_ptr, arp_cache_memory, arp_cache_size);
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	68b9      	ldr	r1, [r7, #8]
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f7fa ffca 	bl	80057dc <_nx_arp_enable>
 800a848:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800a84a:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3720      	adds	r7, #32
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	49502020 	.word	0x49502020
 800a858:	20000088 	.word	0x20000088
 800a85c:	20014884 	.word	0x20014884
 800a860:	200149cc 	.word	0x200149cc

0800a864 <_nxe_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_icmp_enable(NX_IP *ip_ptr)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b086      	sub	sp, #24
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d004      	beq.n	800a87c <_nxe_icmp_enable+0x18>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a17      	ldr	r2, [pc, #92]	; (800a8d4 <_nxe_icmp_enable+0x70>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d001      	beq.n	800a880 <_nxe_icmp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 800a87c:	2307      	movs	r3, #7
 800a87e:	e025      	b.n	800a8cc <_nxe_icmp_enable+0x68>
    }

    /* Check to see if ICMP is enabled.  */
    if (ip_ptr -> nx_ip_icmp_packet_receive)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 800a886:	2b00      	cmp	r3, #0
 800a888:	d001      	beq.n	800a88e <_nxe_icmp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 800a88a:	2315      	movs	r3, #21
 800a88c:	e01e      	b.n	800a8cc <_nxe_icmp_enable+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a88e:	f3ef 8305 	mrs	r3, IPSR
 800a892:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a894:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800a896:	4b10      	ldr	r3, [pc, #64]	; (800a8d8 <_nxe_icmp_enable+0x74>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d009      	beq.n	800a8b4 <_nxe_icmp_enable+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a8a0:	f3ef 8305 	mrs	r3, IPSR
 800a8a4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	4b0b      	ldr	r3, [pc, #44]	; (800a8d8 <_nxe_icmp_enable+0x74>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a8b2:	d304      	bcc.n	800a8be <_nxe_icmp_enable+0x5a>
 800a8b4:	4b09      	ldr	r3, [pc, #36]	; (800a8dc <_nxe_icmp_enable+0x78>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a09      	ldr	r2, [pc, #36]	; (800a8e0 <_nxe_icmp_enable+0x7c>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d101      	bne.n	800a8c2 <_nxe_icmp_enable+0x5e>
 800a8be:	2311      	movs	r3, #17
 800a8c0:	e004      	b.n	800a8cc <_nxe_icmp_enable+0x68>

    /* Call actual ICMP enable function.  */
    status =  _nx_icmp_enable(ip_ptr);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7fb fd8e 	bl	80063e4 <_nx_icmp_enable>
 800a8c8:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800a8ca:	697b      	ldr	r3, [r7, #20]
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3718      	adds	r7, #24
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	49502020 	.word	0x49502020
 800a8d8:	20000088 	.word	0x20000088
 800a8dc:	20014884 	.word	0x20014884
 800a8e0:	200149cc 	.word	0x200149cc

0800a8e4 <_nxe_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b088      	sub	sp, #32
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (ip_address == NX_NULL) || (network_mask == NX_NULL))
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00a      	beq.n	800a90c <_nxe_ip_address_get+0x28>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a18      	ldr	r2, [pc, #96]	; (800a95c <_nxe_ip_address_get+0x78>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d105      	bne.n	800a90c <_nxe_ip_address_get+0x28>
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <_nxe_ip_address_get+0x28>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d101      	bne.n	800a910 <_nxe_ip_address_get+0x2c>
    {
        return(NX_PTR_ERROR);
 800a90c:	2307      	movs	r3, #7
 800a90e:	e020      	b.n	800a952 <_nxe_ip_address_get+0x6e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a910:	f3ef 8305 	mrs	r3, IPSR
 800a914:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a916:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800a918:	4b11      	ldr	r3, [pc, #68]	; (800a960 <_nxe_ip_address_get+0x7c>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d009      	beq.n	800a936 <_nxe_ip_address_get+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a922:	f3ef 8305 	mrs	r3, IPSR
 800a926:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	4b0d      	ldr	r3, [pc, #52]	; (800a960 <_nxe_ip_address_get+0x7c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4313      	orrs	r3, r2
 800a930:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a934:	d304      	bcc.n	800a940 <_nxe_ip_address_get+0x5c>
 800a936:	4b0b      	ldr	r3, [pc, #44]	; (800a964 <_nxe_ip_address_get+0x80>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a0b      	ldr	r2, [pc, #44]	; (800a968 <_nxe_ip_address_get+0x84>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d101      	bne.n	800a944 <_nxe_ip_address_get+0x60>
 800a940:	2311      	movs	r3, #17
 800a942:	e006      	b.n	800a952 <_nxe_ip_address_get+0x6e>

    /* Call actual IP address get function.  */
    status =  _nx_ip_address_get(ip_ptr, ip_address, network_mask);
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	68b9      	ldr	r1, [r7, #8]
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f7fc f919 	bl	8006b80 <_nx_ip_address_get>
 800a94e:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800a950:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a952:	4618      	mov	r0, r3
 800a954:	3720      	adds	r7, #32
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	49502020 	.word	0x49502020
 800a960:	20000088 	.word	0x20000088
 800a964:	20014884 	.word	0x20014884
 800a968:	200149cc 	.word	0x200149cc

0800a96c <_nxe_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                     NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                     VOID *memory_ptr, ULONG memory_size, UINT priority, UINT ip_control_block_size)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b092      	sub	sp, #72	; 0x48
 800a970:	af06      	add	r7, sp, #24
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
 800a978:	603b      	str	r3, [r7, #0]

UINT       status;
UINT       old_threshold = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	613b      	str	r3, [r7, #16]
UCHAR     *end_stack;
TX_THREAD *current_thread;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d011      	beq.n	800a9a8 <_nxe_ip_create+0x3c>
 800a984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00e      	beq.n	800a9a8 <_nxe_ip_create+0x3c>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800a98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98c:	681b      	ldr	r3, [r3, #0]
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800a98e:	4a58      	ldr	r2, [pc, #352]	; (800aaf0 <_nxe_ip_create+0x184>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d109      	bne.n	800a9a8 <_nxe_ip_create+0x3c>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800a994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a996:	2b00      	cmp	r3, #0
 800a998:	d006      	beq.n	800a9a8 <_nxe_ip_create+0x3c>
 800a99a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d003      	beq.n	800a9a8 <_nxe_ip_create+0x3c>
        (memory_ptr == NX_NULL) || (ip_control_block_size != (UINT)sizeof(NX_IP)))
 800a9a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9a2:	f5b3 6ff9 	cmp.w	r3, #1992	; 0x7c8
 800a9a6:	d001      	beq.n	800a9ac <_nxe_ip_create+0x40>
    {
        return(NX_PTR_ERROR);
 800a9a8:	2307      	movs	r3, #7
 800a9aa:	e09d      	b.n	800aae8 <_nxe_ip_create+0x17c>
    }

    /* Check for a memory size error.  */
    if (memory_size < TX_MINIMUM_STACK)
 800a9ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9ae:	2bc7      	cmp	r3, #199	; 0xc7
 800a9b0:	d801      	bhi.n	800a9b6 <_nxe_ip_create+0x4a>
    {
        return(NX_SIZE_ERROR);
 800a9b2:	2309      	movs	r3, #9
 800a9b4:	e098      	b.n	800aae8 <_nxe_ip_create+0x17c>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 800a9b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9b8:	2b1f      	cmp	r3, #31
 800a9ba:	d901      	bls.n	800a9c0 <_nxe_ip_create+0x54>
    {
        return(NX_OPTION_ERROR);
 800a9bc:	230a      	movs	r3, #10
 800a9be:	e093      	b.n	800aae8 <_nxe_ip_create+0x17c>
    }

    /* Calculate the end of the stack area.  */
    end_stack =  ((UCHAR *)memory_ptr) + (memory_size - 1);
 800a9c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9c6:	4413      	add	r3, r2
 800a9c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800a9ca:	f002 fa99 	bl	800cf00 <_tx_thread_identify>
 800a9ce:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    if (current_thread)
 800a9d0:	6a3b      	ldr	r3, [r7, #32]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d006      	beq.n	800a9e4 <_nxe_ip_create+0x78>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800a9d6:	f107 0310 	add.w	r3, r7, #16
 800a9da:	461a      	mov	r2, r3
 800a9dc:	2100      	movs	r1, #0
 800a9de:	6a38      	ldr	r0, [r7, #32]
 800a9e0:	f002 fae8 	bl	800cfb4 <_tx_thread_preemption_change>
    }

    /* Loop to check for the IP instance already created.  */
    created_ip =     _nx_ip_created_ptr;
 800a9e4:	4b43      	ldr	r3, [pc, #268]	; (800aaf4 <_nxe_ip_create+0x188>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    created_count =  _nx_ip_created_count;
 800a9ea:	4b43      	ldr	r3, [pc, #268]	; (800aaf8 <_nxe_ip_create+0x18c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	62bb      	str	r3, [r7, #40]	; 0x28
    while (created_count--)
 800a9f0:	e02b      	b.n	800aa4a <_nxe_ip_create+0xde>
    {

        /* Is the new ip already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ip_ptr == created_ip) ||
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d017      	beq.n	800aa2a <_nxe_ip_create+0xbe>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800a9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
        if ((ip_ptr == created_ip) ||
 800aa00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d305      	bcc.n	800aa12 <_nxe_ip_create+0xa6>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800aa06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa08:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800aa0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d30b      	bcc.n	800aa2a <_nxe_ip_create+0xbe>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800aa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa14:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800aa18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d311      	bcc.n	800aa42 <_nxe_ip_create+0xd6>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800aa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa20:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800aa24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d20b      	bcs.n	800aa42 <_nxe_ip_create+0xd6>
        {

            /* Restore preemption.  */
            if (current_thread)
 800aa2a:	6a3b      	ldr	r3, [r7, #32]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d006      	beq.n	800aa3e <_nxe_ip_create+0xd2>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	f107 0210 	add.w	r2, r7, #16
 800aa36:	4619      	mov	r1, r3
 800aa38:	6a38      	ldr	r0, [r7, #32]
 800aa3a:	f002 fabb 	bl	800cfb4 <_tx_thread_preemption_change>
            }

            /* Duplicate ip created, return an error!  */
            return(NX_PTR_ERROR);
 800aa3e:	2307      	movs	r3, #7
 800aa40:	e052      	b.n	800aae8 <_nxe_ip_create+0x17c>
        }

        /* Move to next entry.  */
        created_ip =  created_ip -> nx_ip_created_next;
 800aa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa44:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 800aa48:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (created_count--)
 800aa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4c:	1e5a      	subs	r2, r3, #1
 800aa4e:	62ba      	str	r2, [r7, #40]	; 0x28
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1ce      	bne.n	800a9f2 <_nxe_ip_create+0x86>
    }

    /* Restore preemption.  */
    if (current_thread)
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d006      	beq.n	800aa68 <_nxe_ip_create+0xfc>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	f107 0210 	add.w	r2, r7, #16
 800aa60:	4619      	mov	r1, r3
 800aa62:	6a38      	ldr	r0, [r7, #32]
 800aa64:	f002 faa6 	bl	800cfb4 <_tx_thread_preemption_change>
    }

    /* Check for invalid IP address.  Note that Interface with DHCP enabled
       would start with 0.0.0.0.  Therefore the 0 IP address is allowed. */
    if ((ip_address != 0) &&
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d010      	beq.n	800aa90 <_nxe_ip_create+0x124>
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800aa6e:	687b      	ldr	r3, [r7, #4]
    if ((ip_address != 0) &&
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	da0d      	bge.n	800aa90 <_nxe_ip_create+0x124>
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800aa7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa7e:	d007      	beq.n	800aa90 <_nxe_ip_create+0x124>
        ((ip_address & NX_IP_CLASS_C_MASK) != NX_IP_CLASS_C_TYPE))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800aa86:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800aa8a:	d001      	beq.n	800aa90 <_nxe_ip_create+0x124>
    {
        return(NX_IP_ADDRESS_ERROR);
 800aa8c:	2321      	movs	r3, #33	; 0x21
 800aa8e:	e02b      	b.n	800aae8 <_nxe_ip_create+0x17c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aa90:	f3ef 8305 	mrs	r3, IPSR
 800aa94:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800aa96:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800aa98:	4b18      	ldr	r3, [pc, #96]	; (800aafc <_nxe_ip_create+0x190>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d009      	beq.n	800aab6 <_nxe_ip_create+0x14a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aaa2:	f3ef 8305 	mrs	r3, IPSR
 800aaa6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800aaa8:	697a      	ldr	r2, [r7, #20]
 800aaaa:	4b14      	ldr	r3, [pc, #80]	; (800aafc <_nxe_ip_create+0x190>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800aab4:	d304      	bcc.n	800aac0 <_nxe_ip_create+0x154>
 800aab6:	4b12      	ldr	r3, [pc, #72]	; (800ab00 <_nxe_ip_create+0x194>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a12      	ldr	r2, [pc, #72]	; (800ab04 <_nxe_ip_create+0x198>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d101      	bne.n	800aac4 <_nxe_ip_create+0x158>
 800aac0:	2311      	movs	r3, #17
 800aac2:	e011      	b.n	800aae8 <_nxe_ip_create+0x17c>

    /* Call actual IP instance create function.  */
    status =  _nx_ip_create(ip_ptr, name, ip_address, network_mask, default_pool, ip_link_driver,
 800aac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aac6:	9304      	str	r3, [sp, #16]
 800aac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaca:	9303      	str	r3, [sp, #12]
 800aacc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aace:	9302      	str	r3, [sp, #8]
 800aad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad2:	9301      	str	r3, [sp, #4]
 800aad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	68b9      	ldr	r1, [r7, #8]
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f7fc f96c 	bl	8006dbc <_nx_ip_create>
 800aae4:	61f8      	str	r0, [r7, #28]
                            memory_ptr, memory_size, priority);

    /* Return completion status.  */
    return(status);
 800aae6:	69fb      	ldr	r3, [r7, #28]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3730      	adds	r7, #48	; 0x30
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	5041434b 	.word	0x5041434b
 800aaf4:	20014828 	.word	0x20014828
 800aaf8:	2001482c 	.word	0x2001482c
 800aafc:	20000088 	.word	0x20000088
 800ab00:	20014884 	.word	0x20014884
 800ab04:	200149cc 	.word	0x200149cc

0800ab08 <_nxe_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                           ULONG packet_type, ULONG wait_option)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b086      	sub	sp, #24
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
 800ab14:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (packet_ptr == NX_NULL))
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d007      	beq.n	800ab2c <_nxe_packet_allocate+0x24>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a18      	ldr	r2, [pc, #96]	; (800ab84 <_nxe_packet_allocate+0x7c>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d102      	bne.n	800ab2c <_nxe_packet_allocate+0x24>
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <_nxe_packet_allocate+0x28>
    {
        return(NX_PTR_ERROR);
 800ab2c:	2307      	movs	r3, #7
 800ab2e:	e025      	b.n	800ab7c <_nxe_packet_allocate+0x74>
    }

    /* Check for an invalid packet type - for alignment purposes, it must be evenly divisible by the size
       of a ULONG.  */
    if (packet_type % sizeof(ULONG))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f003 0303 	and.w	r3, r3, #3
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d001      	beq.n	800ab3e <_nxe_packet_allocate+0x36>
    {
        return(NX_OPTION_ERROR);
 800ab3a:	230a      	movs	r3, #10
 800ab3c:	e01e      	b.n	800ab7c <_nxe_packet_allocate+0x74>
    }

    /* Check for a thread caller if the wait option specifies suspension.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d013      	beq.n	800ab6c <_nxe_packet_allocate+0x64>
 800ab44:	4b10      	ldr	r3, [pc, #64]	; (800ab88 <_nxe_packet_allocate+0x80>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00d      	beq.n	800ab68 <_nxe_packet_allocate+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ab4c:	f3ef 8305 	mrs	r3, IPSR
 800ab50:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ab52:	693a      	ldr	r2, [r7, #16]
 800ab54:	4b0d      	ldr	r3, [pc, #52]	; (800ab8c <_nxe_packet_allocate+0x84>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d104      	bne.n	800ab68 <_nxe_packet_allocate+0x60>
 800ab5e:	4b0a      	ldr	r3, [pc, #40]	; (800ab88 <_nxe_packet_allocate+0x80>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a0b      	ldr	r2, [pc, #44]	; (800ab90 <_nxe_packet_allocate+0x88>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d101      	bne.n	800ab6c <_nxe_packet_allocate+0x64>
 800ab68:	2311      	movs	r3, #17
 800ab6a:	e007      	b.n	800ab7c <_nxe_packet_allocate+0x74>

    /* Call actual packet allocate function.  */
    status =  _nx_packet_allocate(pool_ptr,  packet_ptr, packet_type, wait_option);
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	68b9      	ldr	r1, [r7, #8]
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f7fd ffd4 	bl	8008b20 <_nx_packet_allocate>
 800ab78:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800ab7a:	697b      	ldr	r3, [r7, #20]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	5041434b 	.word	0x5041434b
 800ab88:	20014884 	.word	0x20014884
 800ab8c:	20000088 	.word	0x20000088
 800ab90:	200149cc 	.word	0x200149cc

0800ab94 <_nxe_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                              NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b088      	sub	sp, #32
 800ab98:	af02      	add	r7, sp, #8
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
 800aba0:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) ||
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00a      	beq.n	800abbe <_nxe_packet_data_append+0x2a>
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a22      	ldr	r2, [pc, #136]	; (800ac38 <_nxe_packet_data_append+0xa4>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d105      	bne.n	800abbe <_nxe_packet_data_append+0x2a>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <_nxe_packet_data_append+0x2a>
        (packet_ptr == NX_NULL) || (data_start == NX_NULL))
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <_nxe_packet_data_append+0x2e>
    {
        return(NX_PTR_ERROR);
 800abbe:	2307      	movs	r3, #7
 800abc0:	e035      	b.n	800ac2e <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid size of data to append.  */
    if (!data_size)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <_nxe_packet_data_append+0x38>
    {
        return(NX_SIZE_ERROR);
 800abc8:	2309      	movs	r3, #9
 800abca:	e030      	b.n	800ac2e <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	689a      	ldr	r2, [r3, #8]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d201      	bcs.n	800abdc <_nxe_packet_data_append+0x48>
    {
        return(NX_UNDERFLOW);
 800abd8:	2302      	movs	r3, #2
 800abda:	e028      	b.n	800ac2e <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	68da      	ldr	r2, [r3, #12]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	695b      	ldr	r3, [r3, #20]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d901      	bls.n	800abec <_nxe_packet_data_append+0x58>
    {
        return(NX_OVERFLOW);
 800abe8:	2303      	movs	r3, #3
 800abea:	e020      	b.n	800ac2e <_nxe_packet_data_append+0x9a>
    }

    /* Check for appropriate caller.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 800abec:	6a3b      	ldr	r3, [r7, #32]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d013      	beq.n	800ac1a <_nxe_packet_data_append+0x86>
 800abf2:	4b12      	ldr	r3, [pc, #72]	; (800ac3c <_nxe_packet_data_append+0xa8>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00d      	beq.n	800ac16 <_nxe_packet_data_append+0x82>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800abfa:	f3ef 8305 	mrs	r3, IPSR
 800abfe:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	4b0f      	ldr	r3, [pc, #60]	; (800ac40 <_nxe_packet_data_append+0xac>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d104      	bne.n	800ac16 <_nxe_packet_data_append+0x82>
 800ac0c:	4b0b      	ldr	r3, [pc, #44]	; (800ac3c <_nxe_packet_data_append+0xa8>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a0c      	ldr	r2, [pc, #48]	; (800ac44 <_nxe_packet_data_append+0xb0>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d101      	bne.n	800ac1a <_nxe_packet_data_append+0x86>
 800ac16:	2311      	movs	r3, #17
 800ac18:	e009      	b.n	800ac2e <_nxe_packet_data_append+0x9a>

    /* Call actual packet data append function.  */
    status =  _nx_packet_data_append(packet_ptr, data_start, data_size, pool_ptr, wait_option);
 800ac1a:	6a3b      	ldr	r3, [r7, #32]
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	68b9      	ldr	r1, [r7, #8]
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f7fe f8d5 	bl	8008dd4 <_nx_packet_data_append>
 800ac2a:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800ac2c:	697b      	ldr	r3, [r7, #20]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3718      	adds	r7, #24
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	5041434b 	.word	0x5041434b
 800ac3c:	20014884 	.word	0x20014884
 800ac40:	20000088 	.word	0x20000088
 800ac44:	200149cc 	.word	0x200149cc

0800ac48 <_nxe_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                              VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b094      	sub	sp, #80	; 0x50
 800ac4c:	af02      	add	r7, sp, #8
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
 800ac54:	603b      	str	r3, [r7, #0]

UINT            status;
ULONG           rounded_payload_size;
ULONG           rounded_pool_size;
ULONG           header_size;
UINT            old_threshold = 0;
 800ac56:	2300      	movs	r3, #0
 800ac58:	613b      	str	r3, [r7, #16]
VOID           *rounded_pool_start;
TX_THREAD      *current_thread;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_start == NX_NULL) || (pool_control_block_size != (UINT)sizeof(NX_PACKET_POOL)))
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d005      	beq.n	800ac6c <_nxe_packet_pool_create+0x24>
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d002      	beq.n	800ac6c <_nxe_packet_pool_create+0x24>
 800ac66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac68:	2b3c      	cmp	r3, #60	; 0x3c
 800ac6a:	d001      	beq.n	800ac70 <_nxe_packet_pool_create+0x28>
    {
        return(NX_PTR_ERROR);
 800ac6c:	2307      	movs	r3, #7
 800ac6e:	e0a7      	b.n	800adc0 <_nxe_packet_pool_create+0x178>
    }

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	3303      	adds	r3, #3
 800ac74:	f023 0303 	bic.w	r3, r3, #3
 800ac78:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac7e:	1ad2      	subs	r2, r2, r3
 800ac80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac82:	4413      	add	r3, r2
 800ac84:	f023 0303 	bic.w	r3, r3, #3
 800ac88:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 800ac8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac8c:	333c      	adds	r3, #60	; 0x3c
 800ac8e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800ac90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac92:	3303      	adds	r3, #3
 800ac94:	f023 0303 	bic.w	r3, r3, #3
 800ac98:	637b      	str	r3, [r7, #52]	; 0x34

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 800ac9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    rounded_payload_size =  (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800aca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4413      	add	r3, r2
 800aca8:	3303      	adds	r3, #3
 800acaa:	f023 0203 	bic.w	r2, r3, #3
 800acae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check for an invalid pool and payload size.  */
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800acb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acb6:	2b04      	cmp	r3, #4
 800acb8:	d908      	bls.n	800accc <_nxe_packet_pool_create+0x84>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d005      	beq.n	800accc <_nxe_packet_pool_create+0x84>
        ((rounded_payload_size + header_size) > rounded_pool_size))
 800acc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc4:	4413      	add	r3, r2
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800acc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acc8:	429a      	cmp	r2, r3
 800acca:	d201      	bcs.n	800acd0 <_nxe_packet_pool_create+0x88>
    {
        return(NX_SIZE_ERROR);
 800accc:	2309      	movs	r3, #9
 800acce:	e077      	b.n	800adc0 <_nxe_packet_pool_create+0x178>
    }

    /* Calculate the end of the pool memory area.  */
    end_memory =  ((CHAR *)pool_start) + (pool_size - 1);
 800acd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acd2:	3b01      	subs	r3, #1
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	4413      	add	r3, r2
 800acd8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800acda:	f002 f911 	bl	800cf00 <_tx_thread_identify>
 800acde:	6278      	str	r0, [r7, #36]	; 0x24

    /* Disable preemption temporarily.  */
    if (current_thread)
 800ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d006      	beq.n	800acf4 <_nxe_packet_pool_create+0xac>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800ace6:	f107 0310 	add.w	r3, r7, #16
 800acea:	461a      	mov	r2, r3
 800acec:	2100      	movs	r1, #0
 800acee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acf0:	f002 f960 	bl	800cfb4 <_tx_thread_preemption_change>
    }

    /* Loop to check for the pool instance already created.  */
    created_pool =   _nx_packet_pool_created_ptr;
 800acf4:	4b34      	ldr	r3, [pc, #208]	; (800adc8 <_nxe_packet_pool_create+0x180>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	647b      	str	r3, [r7, #68]	; 0x44
    created_count =  _nx_packet_pool_created_count;
 800acfa:	4b34      	ldr	r3, [pc, #208]	; (800adcc <_nxe_packet_pool_create+0x184>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	643b      	str	r3, [r7, #64]	; 0x40
    while (created_count--)
 800ad00:	e02b      	b.n	800ad5a <_nxe_packet_pool_create+0x112>
    {

        /* Calculate the created pool's end of memory.  */
        created_end =  created_pool -> nx_packet_pool_start + (created_pool -> nx_packet_pool_size - 1);
 800ad02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad04:	6a1a      	ldr	r2, [r3, #32]
 800ad06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	4413      	add	r3, r2
 800ad0e:	61fb      	str	r3, [r7, #28]

        /* Is the new pool already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((pool_ptr == created_pool) ||
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d011      	beq.n	800ad3c <_nxe_packet_pool_create+0xf4>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800ad18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad1a:	6a1b      	ldr	r3, [r3, #32]
        if ((pool_ptr == created_pool) ||
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d303      	bcc.n	800ad2a <_nxe_packet_pool_create+0xe2>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d308      	bcc.n	800ad3c <_nxe_packet_pool_create+0xf4>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800ad2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad2c:	6a1b      	ldr	r3, [r3, #32]
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800ad2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d30f      	bcc.n	800ad54 <_nxe_packet_pool_create+0x10c>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800ad34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d20b      	bcs.n	800ad54 <_nxe_packet_pool_create+0x10c>
        {

            /* Restore preemption.  */
            if (current_thread)
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d006      	beq.n	800ad50 <_nxe_packet_pool_create+0x108>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	f107 0210 	add.w	r2, r7, #16
 800ad48:	4619      	mov	r1, r3
 800ad4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad4c:	f002 f932 	bl	800cfb4 <_tx_thread_preemption_change>
            }

            /* Duplicate packet pool created, return an error!  */
            return(NX_PTR_ERROR);
 800ad50:	2307      	movs	r3, #7
 800ad52:	e035      	b.n	800adc0 <_nxe_packet_pool_create+0x178>
        }

        /* Move to next entry.  */
        created_pool =  created_pool -> nx_packet_pool_created_next;
 800ad54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad58:	647b      	str	r3, [r7, #68]	; 0x44
    while (created_count--)
 800ad5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad5c:	1e5a      	subs	r2, r3, #1
 800ad5e:	643a      	str	r2, [r7, #64]	; 0x40
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1ce      	bne.n	800ad02 <_nxe_packet_pool_create+0xba>
    }

    /* Restore preemption.  */
    if (current_thread)
 800ad64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d006      	beq.n	800ad78 <_nxe_packet_pool_create+0x130>
    {
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	f107 0210 	add.w	r2, r7, #16
 800ad70:	4619      	mov	r1, r3
 800ad72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad74:	f002 f91e 	bl	800cfb4 <_tx_thread_preemption_change>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ad78:	f3ef 8305 	mrs	r3, IPSR
 800ad7c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ad7e:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800ad80:	4b13      	ldr	r3, [pc, #76]	; (800add0 <_nxe_packet_pool_create+0x188>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d009      	beq.n	800ad9e <_nxe_packet_pool_create+0x156>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ad8a:	f3ef 8305 	mrs	r3, IPSR
 800ad8e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ad90:	697a      	ldr	r2, [r7, #20]
 800ad92:	4b0f      	ldr	r3, [pc, #60]	; (800add0 <_nxe_packet_pool_create+0x188>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ad9c:	d304      	bcc.n	800ada8 <_nxe_packet_pool_create+0x160>
 800ad9e:	4b0d      	ldr	r3, [pc, #52]	; (800add4 <_nxe_packet_pool_create+0x18c>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a0d      	ldr	r2, [pc, #52]	; (800add8 <_nxe_packet_pool_create+0x190>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d101      	bne.n	800adac <_nxe_packet_pool_create+0x164>
 800ada8:	2311      	movs	r3, #17
 800adaa:	e009      	b.n	800adc0 <_nxe_packet_pool_create+0x178>

    /* Call actual packet pool create function.  */
    status =  _nx_packet_pool_create(pool_ptr, name_ptr, payload_size, pool_start, pool_size);
 800adac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	68b9      	ldr	r1, [r7, #8]
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f7fe f932 	bl	8009020 <_nx_packet_pool_create>
 800adbc:	6238      	str	r0, [r7, #32]

    /* Return completion status.  */
    return(status);
 800adbe:	6a3b      	ldr	r3, [r7, #32]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3748      	adds	r7, #72	; 0x48
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	20014830 	.word	0x20014830
 800adcc:	20014834 	.word	0x20014834
 800add0:	20000088 	.word	0x20000088
 800add4:	20014884 	.word	0x20014884
 800add8:	200149cc 	.word	0x200149cc

0800addc <_nxe_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_release(NX_PACKET **packet_ptr_ptr)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d009      	beq.n	800ae04 <_nxe_packet_release+0x28>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d005      	beq.n	800ae04 <_nxe_packet_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800adfe:	4a12      	ldr	r2, [pc, #72]	; (800ae48 <_nxe_packet_release+0x6c>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d001      	beq.n	800ae08 <_nxe_packet_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800ae04:	2307      	movs	r3, #7
 800ae06:	e01a      	b.n	800ae3e <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	689a      	ldr	r2, [r3, #8]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d201      	bcs.n	800ae18 <_nxe_packet_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800ae14:	2302      	movs	r3, #2
 800ae16:	e012      	b.n	800ae3e <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	68da      	ldr	r2, [r3, #12]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	695b      	ldr	r3, [r3, #20]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d901      	bls.n	800ae28 <_nxe_packet_release+0x4c>
    {
        return(NX_OVERFLOW);
 800ae24:	2303      	movs	r3, #3
 800ae26:	e00a      	b.n	800ae3e <_nxe_packet_release+0x62>
    }

    /* Call actual packet release function.  */
    status =  _nx_packet_release(packet_ptr);
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f7fe f9db 	bl	80091e4 <_nx_packet_release>
 800ae2e:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d102      	bne.n	800ae3c <_nxe_packet_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800ae3c:	68bb      	ldr	r3, [r7, #8]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	5041434b 	.word	0x5041434b

0800ae4c <_nxe_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_transmit_release(NX_PACKET **packet_ptr_ptr)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d009      	beq.n	800ae74 <_nxe_packet_transmit_release+0x28>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d005      	beq.n	800ae74 <_nxe_packet_transmit_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800ae6e:	4a12      	ldr	r2, [pc, #72]	; (800aeb8 <_nxe_packet_transmit_release+0x6c>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d001      	beq.n	800ae78 <_nxe_packet_transmit_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800ae74:	2307      	movs	r3, #7
 800ae76:	e01a      	b.n	800aeae <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	689a      	ldr	r2, [r3, #8]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d201      	bcs.n	800ae88 <_nxe_packet_transmit_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800ae84:	2302      	movs	r3, #2
 800ae86:	e012      	b.n	800aeae <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	68da      	ldr	r2, [r3, #12]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	695b      	ldr	r3, [r3, #20]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d901      	bls.n	800ae98 <_nxe_packet_transmit_release+0x4c>
    {
        return(NX_OVERFLOW);
 800ae94:	2303      	movs	r3, #3
 800ae96:	e00a      	b.n	800aeae <_nxe_packet_transmit_release+0x62>
    }

    /* Call actual packet transmit release function.  */
    status =  _nx_packet_transmit_release(packet_ptr);
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f7fe fa5b 	bl	8009354 <_nx_packet_transmit_release>
 800ae9e:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d102      	bne.n	800aeac <_nxe_packet_transmit_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800aeac:	68bb      	ldr	r3, [r7, #8]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	5041434b 	.word	0x5041434b

0800aebc <_nxe_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_enable(NX_IP *ip_ptr)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d004      	beq.n	800aed4 <_nxe_udp_enable+0x18>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a15      	ldr	r2, [pc, #84]	; (800af24 <_nxe_udp_enable+0x68>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d001      	beq.n	800aed8 <_nxe_udp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 800aed4:	2307      	movs	r3, #7
 800aed6:	e020      	b.n	800af1a <_nxe_udp_enable+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (ip_ptr -> nx_ip_udp_packet_receive)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <_nxe_udp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 800aee2:	2315      	movs	r3, #21
 800aee4:	e019      	b.n	800af1a <_nxe_udp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aee6:	f3ef 8305 	mrs	r3, IPSR
 800aeea:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800aeec:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 800aeee:	4b0e      	ldr	r3, [pc, #56]	; (800af28 <_nxe_udp_enable+0x6c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00b      	beq.n	800af10 <_nxe_udp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aef8:	f3ef 8305 	mrs	r3, IPSR
 800aefc:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	4b09      	ldr	r3, [pc, #36]	; (800af28 <_nxe_udp_enable+0x6c>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4313      	orrs	r3, r2
 800af06:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800af0a:	d201      	bcs.n	800af10 <_nxe_udp_enable+0x54>
 800af0c:	2311      	movs	r3, #17
 800af0e:	e004      	b.n	800af1a <_nxe_udp_enable+0x5e>

    /* Call actual UDP enable function.  */
    status =  _nx_udp_enable(ip_ptr);
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7fe fba7 	bl	8009664 <_nx_udp_enable>
 800af16:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800af18:	697b      	ldr	r3, [r7, #20]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3718      	adds	r7, #24
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	49502020 	.word	0x49502020
 800af28:	20000088 	.word	0x20000088

0800af2c <_nxe_udp_socket_bind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b086      	sub	sp, #24
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d004      	beq.n	800af48 <_nxe_udp_socket_bind+0x1c>
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a19      	ldr	r2, [pc, #100]	; (800afa8 <_nxe_udp_socket_bind+0x7c>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d001      	beq.n	800af4c <_nxe_udp_socket_bind+0x20>
    {
        return(NX_PTR_ERROR);
 800af48:	2307      	movs	r3, #7
 800af4a:	e028      	b.n	800af9e <_nxe_udp_socket_bind+0x72>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <_nxe_udp_socket_bind+0x30>
    {
        return(NX_NOT_ENABLED);
 800af58:	2314      	movs	r3, #20
 800af5a:	e020      	b.n	800af9e <_nxe_udp_socket_bind+0x72>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af62:	d301      	bcc.n	800af68 <_nxe_udp_socket_bind+0x3c>
    {
        return(NX_INVALID_PORT);
 800af64:	2346      	movs	r3, #70	; 0x46
 800af66:	e01a      	b.n	800af9e <_nxe_udp_socket_bind+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800af68:	f3ef 8305 	mrs	r3, IPSR
 800af6c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800af6e:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800af70:	4b0e      	ldr	r3, [pc, #56]	; (800afac <_nxe_udp_socket_bind+0x80>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4313      	orrs	r3, r2
 800af76:	2b00      	cmp	r3, #0
 800af78:	d108      	bne.n	800af8c <_nxe_udp_socket_bind+0x60>
 800af7a:	4b0d      	ldr	r3, [pc, #52]	; (800afb0 <_nxe_udp_socket_bind+0x84>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d004      	beq.n	800af8c <_nxe_udp_socket_bind+0x60>
 800af82:	4b0b      	ldr	r3, [pc, #44]	; (800afb0 <_nxe_udp_socket_bind+0x84>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a0b      	ldr	r2, [pc, #44]	; (800afb4 <_nxe_udp_socket_bind+0x88>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d101      	bne.n	800af90 <_nxe_udp_socket_bind+0x64>
 800af8c:	2311      	movs	r3, #17
 800af8e:	e006      	b.n	800af9e <_nxe_udp_socket_bind+0x72>

    /* Call actual UDP socket bind function.  */
    status =  _nx_udp_socket_bind(socket_ptr, port, wait_option);
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	68b9      	ldr	r1, [r7, #8]
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f7fe fe21 	bl	8009bdc <_nx_udp_socket_bind>
 800af9a:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800af9c:	697b      	ldr	r3, [r7, #20]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3718      	adds	r7, #24
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	55445020 	.word	0x55445020
 800afac:	20000088 	.word	0x20000088
 800afb0:	20014884 	.word	0x20014884
 800afb4:	200149cc 	.word	0x200149cc

0800afb8 <_nxe_udp_socket_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                             ULONG type_of_service, ULONG fragment, UINT time_to_live,
                             ULONG queue_maximum, UINT udp_socket_size)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b08e      	sub	sp, #56	; 0x38
 800afbc:	af04      	add	r7, sp, #16
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
 800afc4:	603b      	str	r3, [r7, #0]
NX_UDP_SOCKET *created_socket;
ULONG          created_count;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) ||
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00a      	beq.n	800afe2 <_nxe_udp_socket_create+0x2a>
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a3f      	ldr	r2, [pc, #252]	; (800b0d0 <_nxe_udp_socket_create+0x118>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d105      	bne.n	800afe2 <_nxe_udp_socket_create+0x2a>
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <_nxe_udp_socket_create+0x2a>
        (socket_ptr == NX_NULL) || (udp_socket_size != (UINT)sizeof(NX_UDP_SOCKET)))
 800afdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afde:	2b78      	cmp	r3, #120	; 0x78
 800afe0:	d001      	beq.n	800afe6 <_nxe_udp_socket_create+0x2e>
    {
        return(NX_PTR_ERROR);
 800afe2:	2307      	movs	r3, #7
 800afe4:	e06f      	b.n	800b0c6 <_nxe_udp_socket_create+0x10e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800afe6:	f3ef 8305 	mrs	r3, IPSR
 800afea:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800afec:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800afee:	4b39      	ldr	r3, [pc, #228]	; (800b0d4 <_nxe_udp_socket_create+0x11c>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d009      	beq.n	800b00c <_nxe_udp_socket_create+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aff8:	f3ef 8305 	mrs	r3, IPSR
 800affc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800affe:	697a      	ldr	r2, [r7, #20]
 800b000:	4b34      	ldr	r3, [pc, #208]	; (800b0d4 <_nxe_udp_socket_create+0x11c>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4313      	orrs	r3, r2
 800b006:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b00a:	d304      	bcc.n	800b016 <_nxe_udp_socket_create+0x5e>
 800b00c:	4b32      	ldr	r3, [pc, #200]	; (800b0d8 <_nxe_udp_socket_create+0x120>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a32      	ldr	r2, [pc, #200]	; (800b0dc <_nxe_udp_socket_create+0x124>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d101      	bne.n	800b01a <_nxe_udp_socket_create+0x62>
 800b016:	2311      	movs	r3, #17
 800b018:	e055      	b.n	800b0c6 <_nxe_udp_socket_create+0x10e>

    /* Get protection mutex.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b020:	f04f 31ff 	mov.w	r1, #4294967295
 800b024:	4618      	mov	r0, r3
 800b026:	f001 f9d7 	bl	800c3d8 <_tx_mutex_get>

    /* Pickup created count and created socket pointer.  */
    created_count =   ip_ptr -> nx_ip_udp_created_sockets_count;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b030:	623b      	str	r3, [r7, #32]
    created_socket =  ip_ptr -> nx_ip_udp_created_sockets_ptr;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b038:	627b      	str	r3, [r7, #36]	; 0x24

    /* Loop to look for socket already created.  */
    while (created_count--)
 800b03a:	e00e      	b.n	800b05a <_nxe_udp_socket_create+0xa2>
    {

        /* Compare the new socket with the already created socket.  */
        if (socket_ptr == created_socket)
 800b03c:	68ba      	ldr	r2, [r7, #8]
 800b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b040:	429a      	cmp	r2, r3
 800b042:	d107      	bne.n	800b054 <_nxe_udp_socket_create+0x9c>
        {

            /* Error, socket already created!  */

            /* Release protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b04a:	4618      	mov	r0, r3
 800b04c:	f001 fc3c 	bl	800c8c8 <_tx_mutex_put>

            /* Return error.  */
            return(NX_PTR_ERROR);
 800b050:	2307      	movs	r3, #7
 800b052:	e038      	b.n	800b0c6 <_nxe_udp_socket_create+0x10e>
        }

        /* Move to next created socket.  */
        created_socket =  created_socket -> nx_udp_socket_created_next;
 800b054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b058:	627b      	str	r3, [r7, #36]	; 0x24
    while (created_count--)
 800b05a:	6a3b      	ldr	r3, [r7, #32]
 800b05c:	1e5a      	subs	r2, r3, #1
 800b05e:	623a      	str	r2, [r7, #32]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1eb      	bne.n	800b03c <_nxe_udp_socket_create+0x84>
    }

    /* Release protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b06a:	4618      	mov	r0, r3
 800b06c:	f001 fc2c 	bl	800c8c8 <_tx_mutex_put>

    /* Check to see if UDP is enabled.  */
    if (!ip_ptr -> nx_ip_udp_packet_receive)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b076:	2b00      	cmp	r3, #0
 800b078:	d101      	bne.n	800b07e <_nxe_udp_socket_create+0xc6>
    {
        return(NX_NOT_ENABLED);
 800b07a:	2314      	movs	r3, #20
 800b07c:	e023      	b.n	800b0c6 <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid type of service.  */
    if (type_of_service & ~(NX_IP_TOS_MASK))
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <_nxe_udp_socket_create+0xd4>
    {
        return(NX_OPTION_ERROR);
 800b088:	230a      	movs	r3, #10
 800b08a:	e01c      	b.n	800b0c6 <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid fragment option.  */
    if ((fragment != NX_FRAGMENT_OKAY) &&
 800b08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d005      	beq.n	800b09e <_nxe_udp_socket_create+0xe6>
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b098:	d001      	beq.n	800b09e <_nxe_udp_socket_create+0xe6>
        (fragment != NX_DONT_FRAGMENT))
    {
        return(NX_OPTION_ERROR);
 800b09a:	230a      	movs	r3, #10
 800b09c:	e013      	b.n	800b0c6 <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid time to live option.  */
    if (((ULONG)time_to_live) > NX_IP_TIME_TO_LIVE_MASK)
 800b09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800b0a4:	d901      	bls.n	800b0aa <_nxe_udp_socket_create+0xf2>
    {
        return(NX_OPTION_ERROR);
 800b0a6:	230a      	movs	r3, #10
 800b0a8:	e00d      	b.n	800b0c6 <_nxe_udp_socket_create+0x10e>
    }

    /* Call actual UDP socket create function.  */
    status =  _nx_udp_socket_create(ip_ptr, socket_ptr, name, type_of_service,
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ac:	9302      	str	r3, [sp, #8]
 800b0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0b0:	9301      	str	r3, [sp, #4]
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	68b9      	ldr	r1, [r7, #8]
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f7fe feaf 	bl	8009e20 <_nx_udp_socket_create>
 800b0c2:	61f8      	str	r0, [r7, #28]
                                    fragment, time_to_live, queue_maximum);

    /* Return completion status.  */
    return(status);
 800b0c4:	69fb      	ldr	r3, [r7, #28]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3728      	adds	r7, #40	; 0x28
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	49502020 	.word	0x49502020
 800b0d4:	20000088 	.word	0x20000088
 800b0d8:	20014884 	.word	0x20014884
 800b0dc:	200149cc 	.word	0x200149cc

0800b0e0 <_nxe_udp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d004      	beq.n	800b0f8 <_nxe_udp_socket_delete+0x18>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a15      	ldr	r2, [pc, #84]	; (800b148 <_nxe_udp_socket_delete+0x68>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d001      	beq.n	800b0fc <_nxe_udp_socket_delete+0x1c>
    {
        return(NX_PTR_ERROR);
 800b0f8:	2307      	movs	r3, #7
 800b0fa:	e020      	b.n	800b13e <_nxe_udp_socket_delete+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b104:	2b00      	cmp	r3, #0
 800b106:	d101      	bne.n	800b10c <_nxe_udp_socket_delete+0x2c>
    {
        return(NX_NOT_ENABLED);
 800b108:	2314      	movs	r3, #20
 800b10a:	e018      	b.n	800b13e <_nxe_udp_socket_delete+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b10c:	f3ef 8305 	mrs	r3, IPSR
 800b110:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800b112:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800b114:	4b0d      	ldr	r3, [pc, #52]	; (800b14c <_nxe_udp_socket_delete+0x6c>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4313      	orrs	r3, r2
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d108      	bne.n	800b130 <_nxe_udp_socket_delete+0x50>
 800b11e:	4b0c      	ldr	r3, [pc, #48]	; (800b150 <_nxe_udp_socket_delete+0x70>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d004      	beq.n	800b130 <_nxe_udp_socket_delete+0x50>
 800b126:	4b0a      	ldr	r3, [pc, #40]	; (800b150 <_nxe_udp_socket_delete+0x70>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a0a      	ldr	r2, [pc, #40]	; (800b154 <_nxe_udp_socket_delete+0x74>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d101      	bne.n	800b134 <_nxe_udp_socket_delete+0x54>
 800b130:	2311      	movs	r3, #17
 800b132:	e004      	b.n	800b13e <_nxe_udp_socket_delete+0x5e>

    /* Call actual UDP socket delete function.  */
    status =  _nx_udp_socket_delete(socket_ptr);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f7fe ff03 	bl	8009f40 <_nx_udp_socket_delete>
 800b13a:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800b13c:	68fb      	ldr	r3, [r7, #12]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	55445020 	.word	0x55445020
 800b14c:	20000088 	.word	0x20000088
 800b150:	20014884 	.word	0x20014884
 800b154:	200149cc 	.word	0x200149cc

0800b158 <_nxe_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID) || (packet_ptr == NX_NULL))
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d007      	beq.n	800b17a <_nxe_udp_socket_receive+0x22>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a17      	ldr	r2, [pc, #92]	; (800b1cc <_nxe_udp_socket_receive+0x74>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d102      	bne.n	800b17a <_nxe_udp_socket_receive+0x22>
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d101      	bne.n	800b17e <_nxe_udp_socket_receive+0x26>
    {
        return(NX_PTR_ERROR);
 800b17a:	2307      	movs	r3, #7
 800b17c:	e022      	b.n	800b1c4 <_nxe_udp_socket_receive+0x6c>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <_nxe_udp_socket_receive+0x36>
    {
        return(NX_NOT_ENABLED);
 800b18a:	2314      	movs	r3, #20
 800b18c:	e01a      	b.n	800b1c4 <_nxe_udp_socket_receive+0x6c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b18e:	f3ef 8305 	mrs	r3, IPSR
 800b192:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b194:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800b196:	4b0e      	ldr	r3, [pc, #56]	; (800b1d0 <_nxe_udp_socket_receive+0x78>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d108      	bne.n	800b1b2 <_nxe_udp_socket_receive+0x5a>
 800b1a0:	4b0c      	ldr	r3, [pc, #48]	; (800b1d4 <_nxe_udp_socket_receive+0x7c>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d004      	beq.n	800b1b2 <_nxe_udp_socket_receive+0x5a>
 800b1a8:	4b0a      	ldr	r3, [pc, #40]	; (800b1d4 <_nxe_udp_socket_receive+0x7c>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a0a      	ldr	r2, [pc, #40]	; (800b1d8 <_nxe_udp_socket_receive+0x80>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d101      	bne.n	800b1b6 <_nxe_udp_socket_receive+0x5e>
 800b1b2:	2311      	movs	r3, #17
 800b1b4:	e006      	b.n	800b1c4 <_nxe_udp_socket_receive+0x6c>

    /* Call actual UDP socket receive function.  */
    status =  _nx_udp_socket_receive(socket_ptr, packet_ptr, wait_option);
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	68b9      	ldr	r1, [r7, #8]
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	f7fe ff20 	bl	800a000 <_nx_udp_socket_receive>
 800b1c0:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800b1c2:	697b      	ldr	r3, [r7, #20]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3718      	adds	r7, #24
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	55445020 	.word	0x55445020
 800b1d0:	20000088 	.word	0x20000088
 800b1d4:	20014884 	.word	0x20014884
 800b1d8:	200149cc 	.word	0x200149cc

0800b1dc <_nxe_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr_ptr,
                           ULONG ip_address, UINT port)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	607a      	str	r2, [r7, #4]
 800b1e8:	603b      	str	r3, [r7, #0]
NX_PACKET *packet_ptr;
UINT       status;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	61fb      	str	r3, [r7, #28]

    /* Check for invalid input pointers.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID) ||
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00c      	beq.n	800b210 <_nxe_udp_socket_send+0x34>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a37      	ldr	r2, [pc, #220]	; (800b2d8 <_nxe_udp_socket_send+0xfc>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d107      	bne.n	800b210 <_nxe_udp_socket_send+0x34>
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d004      	beq.n	800b210 <_nxe_udp_socket_send+0x34>
        (packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)))
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	6a1b      	ldr	r3, [r3, #32]
 800b20a:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800b20e:	d001      	beq.n	800b214 <_nxe_udp_socket_send+0x38>
    {

        return(NX_PTR_ERROR);
 800b210:	2307      	movs	r3, #7
 800b212:	e05d      	b.n	800b2d0 <_nxe_udp_socket_send+0xf4>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <_nxe_udp_socket_send+0x48>
    {
        return(NX_NOT_ENABLED);
 800b220:	2314      	movs	r3, #20
 800b222:	e055      	b.n	800b2d0 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for invalid IP address.  */
    if (ip_address == NX_NULL)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d101      	bne.n	800b22e <_nxe_udp_socket_send+0x52>
    {
        return(NX_IP_ADDRESS_ERROR);
 800b22a:	2321      	movs	r3, #33	; 0x21
 800b22c:	e050      	b.n	800b2d0 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b234:	d301      	bcc.n	800b23a <_nxe_udp_socket_send+0x5e>
    {
        return(NX_INVALID_PORT);
 800b236:	2346      	movs	r3, #70	; 0x46
 800b238:	e04a      	b.n	800b2d0 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((INT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_data_start) < (INT)(sizeof(NX_IPV4_HEADER) + sizeof(NX_UDP_HEADER)))
 800b23a:	69fb      	ldr	r3, [r7, #28]
 800b23c:	689a      	ldr	r2, [r3, #8]
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	2b1b      	cmp	r3, #27
 800b246:	dc0d      	bgt.n	800b264 <_nxe_udp_socket_send+0x88>
    {

#ifndef NX_DISABLE_UDP_INFO
        /* Increment the total UDP invalid packet count.  */
        (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b250:	3201      	adds	r2, #1
 800b252:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Increment the total UDP invalid packet count for this socket.  */
        socket_ptr -> nx_udp_socket_invalid_packets++;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6a1b      	ldr	r3, [r3, #32]
 800b25a:	1c5a      	adds	r2, r3, #1
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	621a      	str	r2, [r3, #32]
#endif

        /* Return error code.  */
        return(NX_UNDERFLOW);
 800b260:	2302      	movs	r3, #2
 800b262:	e035      	b.n	800b2d0 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	68da      	ldr	r2, [r3, #12]
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	695b      	ldr	r3, [r3, #20]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d90d      	bls.n	800b28c <_nxe_udp_socket_send+0xb0>
    {

#ifndef NX_DISABLE_UDP_INFO
        /* Increment the total UDP invalid packet count.  */
        (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b278:	3201      	adds	r2, #1
 800b27a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Increment the total UDP invalid packet count for this socket.  */
        socket_ptr -> nx_udp_socket_invalid_packets++;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	1c5a      	adds	r2, r3, #1
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	621a      	str	r2, [r3, #32]
#endif

        /* Return error code.  */
        return(NX_OVERFLOW);
 800b288:	2303      	movs	r3, #3
 800b28a:	e021      	b.n	800b2d0 <_nxe_udp_socket_send+0xf4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b28c:	f3ef 8305 	mrs	r3, IPSR
 800b290:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b292:	697a      	ldr	r2, [r7, #20]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800b294:	4b11      	ldr	r3, [pc, #68]	; (800b2dc <_nxe_udp_socket_send+0x100>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4313      	orrs	r3, r2
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d108      	bne.n	800b2b0 <_nxe_udp_socket_send+0xd4>
 800b29e:	4b10      	ldr	r3, [pc, #64]	; (800b2e0 <_nxe_udp_socket_send+0x104>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d004      	beq.n	800b2b0 <_nxe_udp_socket_send+0xd4>
 800b2a6:	4b0e      	ldr	r3, [pc, #56]	; (800b2e0 <_nxe_udp_socket_send+0x104>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a0e      	ldr	r2, [pc, #56]	; (800b2e4 <_nxe_udp_socket_send+0x108>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d101      	bne.n	800b2b4 <_nxe_udp_socket_send+0xd8>
 800b2b0:	2311      	movs	r3, #17
 800b2b2:	e00d      	b.n	800b2d0 <_nxe_udp_socket_send+0xf4>

    /* Call actual UDP socket send function.  */
    status =  _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	69f9      	ldr	r1, [r7, #28]
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f7ff f80e 	bl	800a2dc <_nx_udp_socket_send>
 800b2c0:	61b8      	str	r0, [r7, #24]

    /* Determine if the packet send was successful.  */
    if (status == NX_SUCCESS)
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d102      	bne.n	800b2ce <_nxe_udp_socket_send+0xf2>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800b2ce:	69bb      	ldr	r3, [r7, #24]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3720      	adds	r7, #32
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	55445020 	.word	0x55445020
 800b2dc:	20000088 	.word	0x20000088
 800b2e0:	20014884 	.word	0x20014884
 800b2e4:	200149cc 	.word	0x200149cc

0800b2e8 <_nxe_udp_socket_unbind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d004      	beq.n	800b300 <_nxe_udp_socket_unbind+0x18>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a15      	ldr	r2, [pc, #84]	; (800b350 <_nxe_udp_socket_unbind+0x68>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d001      	beq.n	800b304 <_nxe_udp_socket_unbind+0x1c>
    {
        return(NX_PTR_ERROR);
 800b300:	2307      	movs	r3, #7
 800b302:	e020      	b.n	800b346 <_nxe_udp_socket_unbind+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d101      	bne.n	800b314 <_nxe_udp_socket_unbind+0x2c>
    {
        return(NX_NOT_ENABLED);
 800b310:	2314      	movs	r3, #20
 800b312:	e018      	b.n	800b346 <_nxe_udp_socket_unbind+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b314:	f3ef 8305 	mrs	r3, IPSR
 800b318:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800b31a:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800b31c:	4b0d      	ldr	r3, [pc, #52]	; (800b354 <_nxe_udp_socket_unbind+0x6c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4313      	orrs	r3, r2
 800b322:	2b00      	cmp	r3, #0
 800b324:	d108      	bne.n	800b338 <_nxe_udp_socket_unbind+0x50>
 800b326:	4b0c      	ldr	r3, [pc, #48]	; (800b358 <_nxe_udp_socket_unbind+0x70>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d004      	beq.n	800b338 <_nxe_udp_socket_unbind+0x50>
 800b32e:	4b0a      	ldr	r3, [pc, #40]	; (800b358 <_nxe_udp_socket_unbind+0x70>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a0a      	ldr	r2, [pc, #40]	; (800b35c <_nxe_udp_socket_unbind+0x74>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d101      	bne.n	800b33c <_nxe_udp_socket_unbind+0x54>
 800b338:	2311      	movs	r3, #17
 800b33a:	e004      	b.n	800b346 <_nxe_udp_socket_unbind+0x5e>

    /* Call actual UDP socket unbind function.  */
    status =  _nx_udp_socket_unbind(socket_ptr);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f7fe ffe5 	bl	800a30c <_nx_udp_socket_unbind>
 800b342:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800b344:	68fb      	ldr	r3, [r7, #12]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	55445020 	.word	0x55445020
 800b354:	20000088 	.word	0x20000088
 800b358:	20014884 	.word	0x20014884
 800b35c:	200149cc 	.word	0x200149cc

0800b360 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b096      	sub	sp, #88	; 0x58
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	607a      	str	r2, [r7, #4]
 800b36c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	3303      	adds	r3, #3
 800b372:	f023 0303 	bic.w	r3, r3, #3
 800b376:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b378:	f3ef 8310 	mrs	r3, PRIMASK
 800b37c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800b37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800b380:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800b382:	b672      	cpsid	i
    return(int_posture);
 800b384:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800b386:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b388:	4b55      	ldr	r3, [pc, #340]	; (800b4e0 <_tx_byte_allocate+0x180>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800b38e:	2300      	movs	r3, #0
 800b390:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b396:	621a      	str	r2, [r3, #32]
 800b398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b39a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39e:	f383 8810 	msr	PRIMASK, r3
}
 800b3a2:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800b3a4:	6879      	ldr	r1, [r7, #4]
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f000 f9b2 	bl	800b710 <_tx_byte_pool_search>
 800b3ac:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3ae:	f3ef 8310 	mrs	r3, PRIMASK
 800b3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800b3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800b3b6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3b8:	b672      	cpsid	i
    return(int_posture);
 800b3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800b3bc:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800b3be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d002      	beq.n	800b3ca <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3c8:	e006      	b.n	800b3d8 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	6a1b      	ldr	r3, [r3, #32]
 800b3ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d101      	bne.n	800b3d8 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800b3d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d0d9      	beq.n	800b392 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3e2:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800b3e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d008      	beq.n	800b3fc <_tx_byte_allocate+0x9c>
 800b3ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3ec:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3ee:	6a3b      	ldr	r3, [r7, #32]
 800b3f0:	f383 8810 	msr	PRIMASK, r3
}
 800b3f4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	653b      	str	r3, [r7, #80]	; 0x50
 800b3fa:	e06c      	b.n	800b4d6 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d061      	beq.n	800b4c6 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800b402:	4b38      	ldr	r3, [pc, #224]	; (800b4e4 <_tx_byte_allocate+0x184>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d007      	beq.n	800b41a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800b40a:	2310      	movs	r3, #16
 800b40c:	653b      	str	r3, [r7, #80]	; 0x50
 800b40e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b410:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	f383 8810 	msr	PRIMASK, r3
}
 800b418:	e05d      	b.n	800b4d6 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800b41a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b41c:	4a32      	ldr	r2, [pc, #200]	; (800b4e8 <_tx_byte_allocate+0x188>)
 800b41e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800b420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800b426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800b42c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800b432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b434:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b43c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b444:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44a:	1c5a      	adds	r2, r3, #1
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b452:	2b00      	cmp	r3, #0
 800b454:	d109      	bne.n	800b46a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b45a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800b45c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b45e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b460:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800b462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b466:	675a      	str	r2, [r3, #116]	; 0x74
 800b468:	e011      	b.n	800b48e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b472:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b474:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b47a:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b47c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b47e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b480:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b484:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b486:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b48a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b48c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800b48e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b490:	2209      	movs	r2, #9
 800b492:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b496:	2201      	movs	r2, #1
 800b498:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b49a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b49c:	683a      	ldr	r2, [r7, #0]
 800b49e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b4a0:	4b10      	ldr	r3, [pc, #64]	; (800b4e4 <_tx_byte_allocate+0x184>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	4a0f      	ldr	r2, [pc, #60]	; (800b4e4 <_tx_byte_allocate+0x184>)
 800b4a8:	6013      	str	r3, [r2, #0]
 800b4aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4ac:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	f383 8810 	msr	PRIMASK, r3
}
 800b4b4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800b4b6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b4b8:	f002 f8bc 	bl	800d634 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800b4bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4c2:	653b      	str	r3, [r7, #80]	; 0x50
 800b4c4:	e007      	b.n	800b4d6 <_tx_byte_allocate+0x176>
 800b4c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4c8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f383 8810 	msr	PRIMASK, r3
}
 800b4d0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800b4d2:	2310      	movs	r3, #16
 800b4d4:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800b4d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3758      	adds	r7, #88	; 0x58
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	20014884 	.word	0x20014884
 800b4e4:	2001491c 	.word	0x2001491c
 800b4e8:	0800b4ed 	.word	0x0800b4ed

0800b4ec <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b08e      	sub	sp, #56	; 0x38
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4f6:	f3ef 8310 	mrs	r3, PRIMASK
 800b4fa:	623b      	str	r3, [r7, #32]
    return(posture);
 800b4fc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b4fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b500:	b672      	cpsid	i
    return(int_posture);
 800b502:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800b504:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b50a:	4a33      	ldr	r2, [pc, #204]	; (800b5d8 <_tx_byte_pool_cleanup+0xec>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d158      	bne.n	800b5c2 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b516:	683a      	ldr	r2, [r7, #0]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d152      	bne.n	800b5c2 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b520:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800b522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b524:	2b00      	cmp	r3, #0
 800b526:	d04c      	beq.n	800b5c2 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800b528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a2b      	ldr	r2, [pc, #172]	; (800b5dc <_tx_byte_pool_cleanup+0xf0>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d147      	bne.n	800b5c2 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800b532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b536:	2b00      	cmp	r3, #0
 800b538:	d043      	beq.n	800b5c2 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800b540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b544:	1e5a      	subs	r2, r3, #1
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b552:	2b00      	cmp	r3, #0
 800b554:	d103      	bne.n	800b55e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800b556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b558:	2200      	movs	r2, #0
 800b55a:	625a      	str	r2, [r3, #36]	; 0x24
 800b55c:	e013      	b.n	800b586 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b562:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b568:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b574:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800b576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d102      	bne.n	800b586 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800b580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b584:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58a:	2b09      	cmp	r3, #9
 800b58c:	d119      	bne.n	800b5c2 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2210      	movs	r2, #16
 800b592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b596:	4b12      	ldr	r3, [pc, #72]	; (800b5e0 <_tx_byte_pool_cleanup+0xf4>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	3301      	adds	r3, #1
 800b59c:	4a10      	ldr	r2, [pc, #64]	; (800b5e0 <_tx_byte_pool_cleanup+0xf4>)
 800b59e:	6013      	str	r3, [r2, #0]
 800b5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	f383 8810 	msr	PRIMASK, r3
}
 800b5aa:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f001 ff41 	bl	800d434 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b5b6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b5b8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b5ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5bc:	b672      	cpsid	i
    return(int_posture);
 800b5be:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b5c0:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f383 8810 	msr	PRIMASK, r3
}
 800b5cc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b5ce:	bf00      	nop
 800b5d0:	3738      	adds	r7, #56	; 0x38
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	0800b4ed 	.word	0x0800b4ed
 800b5dc:	42595445 	.word	0x42595445
 800b5e0:	2001491c 	.word	0x2001491c

0800b5e4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b08e      	sub	sp, #56	; 0x38
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]
 800b5f0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b5f2:	2234      	movs	r2, #52	; 0x34
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f003 fb18 	bl	800ec2c <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	f023 0303 	bic.w	r3, r3, #3
 800b602:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	68ba      	ldr	r2, [r7, #8]
 800b608:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	f1a3 0208 	sub.w	r2, r3, #8
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2202      	movs	r2, #2
 800b630:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	4413      	add	r3, r2
 800b63c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b640:	3b04      	subs	r3, #4
 800b642:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b64a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800b64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b650:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b654:	3b04      	subs	r3, #4
 800b656:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b65a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800b66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b66e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b676:	3304      	adds	r3, #4
 800b678:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b67c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b680:	4a1f      	ldr	r2, [pc, #124]	; (800b700 <_tx_byte_pool_create+0x11c>)
 800b682:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b68a:	f3ef 8310 	mrs	r3, PRIMASK
 800b68e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b690:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b692:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b694:	b672      	cpsid	i
    return(int_posture);
 800b696:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b698:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	4a19      	ldr	r2, [pc, #100]	; (800b704 <_tx_byte_pool_create+0x120>)
 800b69e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b6a0:	4b19      	ldr	r3, [pc, #100]	; (800b708 <_tx_byte_pool_create+0x124>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d109      	bne.n	800b6bc <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b6a8:	4a18      	ldr	r2, [pc, #96]	; (800b70c <_tx_byte_pool_create+0x128>)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	68fa      	ldr	r2, [r7, #12]
 800b6b2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	631a      	str	r2, [r3, #48]	; 0x30
 800b6ba:	e011      	b.n	800b6e0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b6bc:	4b13      	ldr	r3, [pc, #76]	; (800b70c <_tx_byte_pool_create+0x128>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b6c8:	6a3b      	ldr	r3, [r7, #32]
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	69fa      	ldr	r2, [r7, #28]
 800b6d8:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6a3a      	ldr	r2, [r7, #32]
 800b6de:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b6e0:	4b09      	ldr	r3, [pc, #36]	; (800b708 <_tx_byte_pool_create+0x124>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	4a08      	ldr	r2, [pc, #32]	; (800b708 <_tx_byte_pool_create+0x124>)
 800b6e8:	6013      	str	r3, [r2, #0]
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ec:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	f383 8810 	msr	PRIMASK, r3
}
 800b6f4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3738      	adds	r7, #56	; 0x38
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	ffffeeee 	.word	0xffffeeee
 800b704:	42595445 	.word	0x42595445
 800b708:	20014878 	.word	0x20014878
 800b70c:	20014874 	.word	0x20014874

0800b710 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800b710:	b480      	push	{r7}
 800b712:	b097      	sub	sp, #92	; 0x5c
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800b71a:	2300      	movs	r3, #0
 800b71c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b71e:	f3ef 8310 	mrs	r3, PRIMASK
 800b722:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800b726:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b728:	b672      	cpsid	i
    return(int_posture);
 800b72a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800b72c:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	689a      	ldr	r2, [r3, #8]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	3b02      	subs	r3, #2
 800b738:	00db      	lsls	r3, r3, #3
 800b73a:	4413      	add	r3, r2
 800b73c:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b742:	429a      	cmp	r2, r3
 800b744:	d308      	bcc.n	800b758 <_tx_byte_pool_search+0x48>
 800b746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b748:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	f383 8810 	msr	PRIMASK, r3
}
 800b750:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800b752:	2300      	movs	r3, #0
 800b754:	653b      	str	r3, [r7, #80]	; 0x50
 800b756:	e0dd      	b.n	800b914 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800b758:	4b72      	ldr	r3, [pc, #456]	; (800b924 <_tx_byte_pool_search+0x214>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b762:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	695b      	ldr	r3, [r3, #20]
 800b768:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	3301      	adds	r3, #1
 800b770:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800b772:	2300      	movs	r3, #0
 800b774:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b778:	3304      	adds	r3, #4
 800b77a:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77e:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a68      	ldr	r2, [pc, #416]	; (800b928 <_tx_byte_pool_search+0x218>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d143      	bne.n	800b812 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800b78a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d104      	bne.n	800b79a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b794:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800b796:	2301      	movs	r3, #1
 800b798:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b79a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b79c:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800b79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800b7a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b7ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ae:	3b08      	subs	r3, #8
 800b7b0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800b7b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d257      	bcs.n	800b86a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c6:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a56      	ldr	r2, [pc, #344]	; (800b928 <_tx_byte_pool_search+0x218>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d113      	bne.n	800b7fa <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d4:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800b7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7dc:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	1e5a      	subs	r2, r3, #1
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	695b      	ldr	r3, [r3, #20]
 800b7ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d114      	bne.n	800b81c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7f6:	615a      	str	r2, [r3, #20]
 800b7f8:	e010      	b.n	800b81c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fc:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800b7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800b804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b806:	2b00      	cmp	r3, #0
 800b808:	d008      	beq.n	800b81c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800b80a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b80c:	3b01      	subs	r3, #1
 800b80e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b810:	e004      	b.n	800b81c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b814:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800b816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800b81c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d002      	beq.n	800b828 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800b822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b824:	3b01      	subs	r3, #1
 800b826:	64bb      	str	r3, [r7, #72]	; 0x48
 800b828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b82a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	f383 8810 	msr	PRIMASK, r3
}
 800b832:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b834:	f3ef 8310 	mrs	r3, PRIMASK
 800b838:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b83a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b83c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b83e:	b672      	cpsid	i
    return(int_posture);
 800b840:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800b842:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a1b      	ldr	r3, [r3, #32]
 800b848:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d009      	beq.n	800b862 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	695b      	ldr	r3, [r3, #20]
 800b852:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	68db      	ldr	r3, [r3, #12]
 800b858:	3301      	adds	r3, #1
 800b85a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b860:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800b862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b864:	2b00      	cmp	r3, #0
 800b866:	d186      	bne.n	800b776 <_tx_byte_pool_search+0x66>
 800b868:	e000      	b.n	800b86c <_tx_byte_pool_search+0x15c>
                    break;
 800b86a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800b86c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d048      	beq.n	800b904 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800b872:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	2b13      	cmp	r3, #19
 800b87a:	d91e      	bls.n	800b8ba <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	3308      	adds	r3, #8
 800b880:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b882:	4413      	add	r3, r2
 800b884:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b888:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b88a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b88c:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800b88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b894:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b898:	3304      	adds	r3, #4
 800b89a:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89e:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800b8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a2:	4a21      	ldr	r2, [pc, #132]	; (800b928 <_tx_byte_pool_search+0x218>)
 800b8a4:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	1c5a      	adds	r2, r3, #1
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800b8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8b4:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b8ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8bc:	3304      	adds	r3, #4
 800b8be:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c2:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	689a      	ldr	r2, [r3, #8]
 800b8ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	f1a3 0208 	sub.w	r2, r3, #8
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	695b      	ldr	r3, [r3, #20]
 800b8de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d105      	bne.n	800b8f0 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b8e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8e6:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	615a      	str	r2, [r3, #20]
 800b8f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8f2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f383 8810 	msr	PRIMASK, r3
}
 800b8fa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b8fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8fe:	3308      	adds	r3, #8
 800b900:	653b      	str	r3, [r7, #80]	; 0x50
 800b902:	e007      	b.n	800b914 <_tx_byte_pool_search+0x204>
 800b904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b906:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	f383 8810 	msr	PRIMASK, r3
}
 800b90e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800b910:	2300      	movs	r3, #0
 800b912:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800b914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b916:	4618      	mov	r0, r3
 800b918:	375c      	adds	r7, #92	; 0x5c
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	20014884 	.word	0x20014884
 800b928:	ffffeeee 	.word	0xffffeeee

0800b92c <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b08e      	sub	sp, #56	; 0x38
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b936:	f3ef 8310 	mrs	r3, PRIMASK
 800b93a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b93c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b93e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b940:	b672      	cpsid	i
    return(int_posture);
 800b942:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 800b944:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b94a:	4a38      	ldr	r2, [pc, #224]	; (800ba2c <_tx_event_flags_cleanup+0x100>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d162      	bne.n	800ba16 <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b956:	683a      	ldr	r2, [r7, #0]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d15c      	bne.n	800ba16 <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b960:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800b962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b964:	2b00      	cmp	r3, #0
 800b966:	d056      	beq.n	800ba16 <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800b968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a30      	ldr	r2, [pc, #192]	; (800ba30 <_tx_event_flags_cleanup+0x104>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d151      	bne.n	800ba16 <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	695b      	ldr	r3, [r3, #20]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d04d      	beq.n	800ba16 <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800b980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b982:	695b      	ldr	r3, [r3, #20]
 800b984:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800b986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b988:	691b      	ldr	r3, [r3, #16]
 800b98a:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 800b98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d020      	beq.n	800b9d4 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800b992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b994:	3b01      	subs	r3, #1
 800b996:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800b998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b99c:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800b99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d103      	bne.n	800b9ac <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800b9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	611a      	str	r2, [r3, #16]
 800b9aa:	e016      	b.n	800b9da <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b0:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9b6:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	6a3a      	ldr	r2, [r7, #32]
 800b9bc:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800b9be:	6a3b      	ldr	r3, [r7, #32]
 800b9c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c2:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 800b9c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d106      	bne.n	800b9da <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800b9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9d0:	611a      	str	r2, [r3, #16]
 800b9d2:	e002      	b.n	800b9da <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800b9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9de:	2b07      	cmp	r3, #7
 800b9e0:	d119      	bne.n	800ba16 <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2207      	movs	r2, #7
 800b9e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b9ea:	4b12      	ldr	r3, [pc, #72]	; (800ba34 <_tx_event_flags_cleanup+0x108>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	4a10      	ldr	r2, [pc, #64]	; (800ba34 <_tx_event_flags_cleanup+0x108>)
 800b9f2:	6013      	str	r3, [r2, #0]
 800b9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f383 8810 	msr	PRIMASK, r3
}
 800b9fe:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f001 fd17 	bl	800d434 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba06:	f3ef 8310 	mrs	r3, PRIMASK
 800ba0a:	617b      	str	r3, [r7, #20]
    return(posture);
 800ba0c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ba0e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba10:	b672      	cpsid	i
    return(int_posture);
 800ba12:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ba14:	637b      	str	r3, [r7, #52]	; 0x34
 800ba16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba18:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	f383 8810 	msr	PRIMASK, r3
}
 800ba20:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ba22:	bf00      	nop
 800ba24:	3738      	adds	r7, #56	; 0x38
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	0800b92d 	.word	0x0800b92d
 800ba30:	4456444e 	.word	0x4456444e
 800ba34:	2001491c 	.word	0x2001491c

0800ba38 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b088      	sub	sp, #32
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800ba42:	2224      	movs	r2, #36	; 0x24
 800ba44:	2100      	movs	r1, #0
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f003 f8f0 	bl	800ec2c <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba52:	f3ef 8310 	mrs	r3, PRIMASK
 800ba56:	613b      	str	r3, [r7, #16]
    return(posture);
 800ba58:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ba5a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba5c:	b672      	cpsid	i
    return(int_posture);
 800ba5e:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800ba60:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4a18      	ldr	r2, [pc, #96]	; (800bac8 <_tx_event_flags_create+0x90>)
 800ba66:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800ba68:	4b18      	ldr	r3, [pc, #96]	; (800bacc <_tx_event_flags_create+0x94>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d109      	bne.n	800ba84 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800ba70:	4a17      	ldr	r2, [pc, #92]	; (800bad0 <_tx_event_flags_create+0x98>)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	61da      	str	r2, [r3, #28]
 800ba82:	e011      	b.n	800baa8 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800ba84:	4b12      	ldr	r3, [pc, #72]	; (800bad0 <_tx_event_flags_create+0x98>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	69db      	ldr	r3, [r3, #28]
 800ba8e:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	69ba      	ldr	r2, [r7, #24]
 800baa6:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800baa8:	4b08      	ldr	r3, [pc, #32]	; (800bacc <_tx_event_flags_create+0x94>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	3301      	adds	r3, #1
 800baae:	4a07      	ldr	r2, [pc, #28]	; (800bacc <_tx_event_flags_create+0x94>)
 800bab0:	6013      	str	r3, [r2, #0]
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	f383 8810 	msr	PRIMASK, r3
}
 800babc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3720      	adds	r7, #32
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	4456444e 	.word	0x4456444e
 800bacc:	20014860 	.word	0x20014860
 800bad0:	2001485c 	.word	0x2001485c

0800bad4 <_tx_event_flags_get>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b096      	sub	sp, #88	; 0x58
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
 800bae0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bae2:	f3ef 8310 	mrs	r3, PRIMASK
 800bae6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800bae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800baea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800baec:	b672      	cpsid	i
    return(int_posture);
 800baee:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 800baf0:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return the actual event flags and apply delayed clearing.  */
    *actual_flags_ptr =  current_flags & ~group_ptr -> tx_event_flags_group_delayed_clear;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	43da      	mvns	r2, r3
 800bafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb00:	401a      	ands	r2, r3
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	601a      	str	r2, [r3, #0]

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f003 0302 	and.w	r3, r3, #2
 800bb0c:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6a1b      	ldr	r3, [r3, #32]
 800bb12:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800bb14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d004      	beq.n	800bb24 <_tx_event_flags_get+0x50>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800bb1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb1c:	43db      	mvns	r3, r3
 800bb1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb20:	4013      	ands	r3, r2
 800bb22:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 800bb24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	d10a      	bne.n	800bb40 <_tx_event_flags_get+0x6c>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800bb2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	4013      	ands	r3, r2
 800bb30:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800bb32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d006      	beq.n	800bb48 <_tx_event_flags_get+0x74>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb3e:	e003      	b.n	800bb48 <_tx_event_flags_get+0x74>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800bb40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	4013      	ands	r3, r2
 800bb46:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 800bb48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d026      	beq.n	800bb9c <_tx_event_flags_get+0xc8>
    {

        /* Yes, this request can be handled immediately.  */

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f003 0301 	and.w	r3, r3, #1
 800bb54:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 800bb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d11c      	bne.n	800bb96 <_tx_event_flags_get+0xc2>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	695b      	ldr	r3, [r3, #20]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d005      	beq.n	800bb74 <_tx_event_flags_get+0xa0>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	691b      	ldr	r3, [r3, #16]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d101      	bne.n	800bb74 <_tx_event_flags_get+0xa0>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 800bb70:	2301      	movs	r3, #1
 800bb72:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 800bb74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d106      	bne.n	800bb88 <_tx_event_flags_get+0xb4>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	6a1a      	ldr	r2, [r3, #32]
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	621a      	str	r2, [r3, #32]
 800bb86:	e006      	b.n	800bb96 <_tx_event_flags_get+0xc2>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	689a      	ldr	r2, [r3, #8]
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	43db      	mvns	r3, r3
 800bb90:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800bb96:	2300      	movs	r3, #0
 800bb98:	653b      	str	r3, [r7, #80]	; 0x50
 800bb9a:	e073      	b.n	800bc84 <_tx_event_flags_get+0x1b0>
#endif
    else
    {
        /* flags_satisfied is 0.  */
        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800bb9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d06e      	beq.n	800bc80 <_tx_event_flags_get+0x1ac>
        {

            /* Determine if the preempt disable flag is non-zero OR the requested events is 0.  */
            if ((_tx_thread_preempt_disable != ((UINT) 0)) || (requested_flags == (UINT) 0))
 800bba2:	4b3e      	ldr	r3, [pc, #248]	; (800bc9c <_tx_event_flags_get+0x1c8>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d102      	bne.n	800bbb0 <_tx_event_flags_get+0xdc>
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d102      	bne.n	800bbb6 <_tx_event_flags_get+0xe2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
                   or if requested_flags is 0, return error completion.  */
                status =  TX_NO_EVENTS;
 800bbb0:	2307      	movs	r3, #7
 800bbb2:	653b      	str	r3, [r7, #80]	; 0x50
 800bbb4:	e066      	b.n	800bc84 <_tx_event_flags_get+0x1b0>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 800bbb6:	4b3a      	ldr	r3, [pc, #232]	; (800bca0 <_tx_event_flags_get+0x1cc>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 800bbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbe:	4a39      	ldr	r2, [pc, #228]	; (800bca4 <_tx_event_flags_get+0x1d0>)
 800bbc0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 800bbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc4:	68ba      	ldr	r2, [r7, #8]
 800bbc6:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 800bbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 800bbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 800bbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bbe2:	1c5a      	adds	r2, r3, #1
 800bbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	695b      	ldr	r3, [r3, #20]
 800bbee:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bbf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d109      	bne.n	800bc0a <_tx_event_flags_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbfa:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc00:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 800bc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc06:	675a      	str	r2, [r3, #116]	; 0x74
 800bc08:	e011      	b.n	800bc2e <_tx_event_flags_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	691b      	ldr	r3, [r3, #16]
 800bc0e:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800bc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc14:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800bc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800bc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc20:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800bc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc26:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800bc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc2c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	695b      	ldr	r3, [r3, #20]
 800bc32:	1c5a      	adds	r2, r3, #1
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800bc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3a:	2207      	movs	r2, #7
 800bc3c:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc40:	2201      	movs	r2, #1
 800bc42:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800bc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc48:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bc4a:	4b14      	ldr	r3, [pc, #80]	; (800bc9c <_tx_event_flags_get+0x1c8>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	4a12      	ldr	r2, [pc, #72]	; (800bc9c <_tx_event_flags_get+0x1c8>)
 800bc52:	6013      	str	r3, [r2, #0]
 800bc54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc56:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	f383 8810 	msr	PRIMASK, r3
}
 800bc5e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800bc60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc62:	f001 fce7 	bl	800d634 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc66:	f3ef 8310 	mrs	r3, PRIMASK
 800bc6a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bc6c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bc6e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc70:	b672      	cpsid	i
    return(int_posture);
 800bc72:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 800bc74:	657b      	str	r3, [r7, #84]	; 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800bc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc7c:	653b      	str	r3, [r7, #80]	; 0x50
 800bc7e:	e001      	b.n	800bc84 <_tx_event_flags_get+0x1b0>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 800bc80:	2307      	movs	r3, #7
 800bc82:	653b      	str	r3, [r7, #80]	; 0x50
 800bc84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc86:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	f383 8810 	msr	PRIMASK, r3
}
 800bc8e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800bc90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3758      	adds	r7, #88	; 0x58
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	2001491c 	.word	0x2001491c
 800bca0:	20014884 	.word	0x20014884
 800bca4:	0800b92d 	.word	0x0800b92d

0800bca8 <_tx_event_flags_set>:
/*                                            check logic, resulting in   */
/*                                            version 6.1.11              */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b0a6      	sub	sp, #152	; 0x98
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcb4:	f3ef 8310 	mrs	r3, PRIMASK
 800bcb8:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800bcba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800bcbc:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800bcbe:	b672      	cpsid	i
    return(int_posture);
 800bcc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800bcc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f003 0302 	and.w	r3, r3, #2
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d023      	beq.n	800bd18 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	695b      	ldr	r3, [r3, #20]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d005      	beq.n	800bce8 <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d101      	bne.n	800bce8 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800bce4:	2301      	movs	r3, #1
 800bce6:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800bce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d107      	bne.n	800bcfe <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6a1a      	ldr	r2, [r3, #32]
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	43db      	mvns	r3, r3
 800bcf6:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	621a      	str	r2, [r3, #32]
 800bcfc:	e005      	b.n	800bd0a <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	689a      	ldr	r2, [r3, #8]
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	609a      	str	r2, [r3, #8]
 800bd0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bd0e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd12:	f383 8810 	msr	PRIMASK, r3
}
 800bd16:	e1d2      	b.n	800c0be <_tx_event_flags_set+0x416>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	689a      	ldr	r2, [r3, #8]
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6a1b      	ldr	r3, [r3, #32]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d006      	beq.n	800bd3a <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6a1a      	ldr	r2, [r3, #32]
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	43db      	mvns	r3, r3
 800bd34:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	695b      	ldr	r3, [r3, #20]
 800bd42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f000 81a4 	beq.w	800c098 <_tx_event_flags_set+0x3f0>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 800bd50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d167      	bne.n	800be28 <_tx_event_flags_set+0x180>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800bd66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd6c:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800bd6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd76:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 800bd78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd7a:	f003 0302 	and.w	r3, r3, #2
 800bd7e:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800bd80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d10a      	bne.n	800bd9c <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800bd86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bd88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd8a:	4013      	ands	r3, r2
 800bd8c:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800bd8e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d006      	beq.n	800bda4 <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 800bd96:	2300      	movs	r3, #0
 800bd98:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd9a:	e003      	b.n	800bda4 <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800bd9c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bd9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bda0:	4013      	ands	r3, r2
 800bda2:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 800bda4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f000 817d 	beq.w	800c0a6 <_tx_event_flags_set+0x3fe>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bdac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bdb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdb2:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 800bdb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdb6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bdb8:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800bdba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdbc:	f003 0301 	and.w	r3, r3, #1
 800bdc0:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 800bdc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d106      	bne.n	800bdd6 <_tx_event_flags_set+0x12e>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	689a      	ldr	r2, [r3, #8]
 800bdcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdce:	43db      	mvns	r3, r3
 800bdd0:	401a      	ands	r2, r3
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bde2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bde6:	2200      	movs	r2, #0
 800bde8:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bdea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800bdf4:	4ba7      	ldr	r3, [pc, #668]	; (800c094 <_tx_event_flags_set+0x3ec>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	4aa6      	ldr	r2, [pc, #664]	; (800c094 <_tx_event_flags_set+0x3ec>)
 800bdfc:	6013      	str	r3, [r2, #0]
 800bdfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800be02:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be06:	f383 8810 	msr	PRIMASK, r3
}
 800be0a:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800be0c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800be10:	f001 fb10 	bl	800d434 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be14:	f3ef 8310 	mrs	r3, PRIMASK
 800be18:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800be1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800be1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800be1e:	b672      	cpsid	i
    return(int_posture);
 800be20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800be22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800be26:	e13e      	b.n	800c0a6 <_tx_event_flags_set+0x3fe>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	691b      	ldr	r3, [r3, #16]
 800be2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 800be30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2200      	movs	r2, #0
 800be3c:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800be3e:	2300      	movs	r3, #0
 800be40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 800be44:	2300      	movs	r3, #0
 800be46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 800be50:	4b90      	ldr	r3, [pc, #576]	; (800c094 <_tx_event_flags_set+0x3ec>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	3301      	adds	r3, #1
 800be56:	4a8f      	ldr	r2, [pc, #572]	; (800c094 <_tx_event_flags_set+0x3ec>)
 800be58:	6013      	str	r3, [r2, #0]

                /* Since we have temporarily disabled preemption globally, set the preempt 
                   check flag to check for any preemption condition - including from 
                   unrelated ISR processing.  */
                preempt_check =  TX_TRUE;
 800be5a:	2301      	movs	r3, #1
 800be5c:	677b      	str	r3, [r7, #116]	; 0x74
 800be5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800be62:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be66:	f383 8810 	msr	PRIMASK, r3
}
 800be6a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be6c:	f3ef 8310 	mrs	r3, PRIMASK
 800be70:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800be72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800be74:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800be76:	b672      	cpsid	i
    return(int_posture);
 800be78:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800be7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00f      	beq.n	800bea6 <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2200      	movs	r2, #0
 800be8a:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800be8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	695b      	ldr	r3, [r3, #20]
 800be98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bea2:	4313      	orrs	r3, r2
 800bea4:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800bea6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800beaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beac:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800beae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800beb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beb4:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800beb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800beba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bebe:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800bec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bec2:	f003 0302 	and.w	r3, r3, #2
 800bec6:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800bec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800beca:	2b02      	cmp	r3, #2
 800becc:	d10a      	bne.n	800bee4 <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800bece:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bed2:	4013      	ands	r3, r2
 800bed4:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800bed6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800beda:	429a      	cmp	r2, r3
 800bedc:	d006      	beq.n	800beec <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 800bede:	2300      	movs	r3, #0
 800bee0:	67bb      	str	r3, [r7, #120]	; 0x78
 800bee2:	e003      	b.n	800beec <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800bee4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bee6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bee8:	4013      	ands	r3, r2
 800beea:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800beec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef2:	2b07      	cmp	r3, #7
 800bef4:	d001      	beq.n	800befa <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800bef6:	2301      	movs	r3, #1
 800bef8:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800befa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800befc:	2b00      	cmp	r3, #0
 800befe:	d069      	beq.n	800bfd4 <_tx_event_flags_set+0x32c>

                        /* Yes, this request can be handled now.  */

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800bf00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf06:	2b07      	cmp	r3, #7
 800bf08:	d11d      	bne.n	800bf46 <_tx_event_flags_set+0x29e>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bf0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf10:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 800bf12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf14:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bf16:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800bf18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf1a:	f003 0301 	and.w	r3, r3, #1
 800bf1e:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800bf20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d106      	bne.n	800bf34 <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	689a      	ldr	r2, [r3, #8]
 800bf2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf2c:	43db      	mvns	r3, r3
 800bf2e:	401a      	ands	r2, r3
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bf34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf38:	2200      	movs	r2, #0
 800bf3a:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bf3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf40:	2200      	movs	r2, #0
 800bf42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800bf46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf4c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d103      	bne.n	800bf5c <_tx_event_flags_set+0x2b4>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800bf54:	2300      	movs	r3, #0
 800bf56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf5a:	e018      	b.n	800bf8e <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800bf5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf62:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800bf64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf6a:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800bf6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf70:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800bf72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf76:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 800bf78:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bf7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d104      	bne.n	800bf8e <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800bf84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	695b      	ldr	r3, [r3, #20]
 800bf92:	1e5a      	subs	r2, r3, #1
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 800bf98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d10c      	bne.n	800bfba <_tx_event_flags_set+0x312>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 800bfa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bfa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 800bfa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bfac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 800bfb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	671a      	str	r2, [r3, #112]	; 0x70
 800bfb8:	e00c      	b.n	800bfd4 <_tx_event_flags_set+0x32c>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800bfba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bfbe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bfc2:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800bfc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bfc8:	2200      	movs	r2, #0
 800bfca:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 800bfcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bfd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 800bfd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 800bfda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 800bfe4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f47f af38 	bne.w	800be5e <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bff4:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6a1b      	ldr	r3, [r3, #32]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00a      	beq.n	800c014 <_tx_event_flags_set+0x36c>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	689a      	ldr	r2, [r3, #8]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6a1b      	ldr	r3, [r3, #32]
 800c006:	43db      	mvns	r3, r3
 800c008:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2200      	movs	r2, #0
 800c012:	621a      	str	r2, [r3, #32]
 800c014:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c018:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01c:	f383 8810 	msr	PRIMASK, r3
}
 800c020:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 800c022:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800c02a:	e01f      	b.n	800c06c <_tx_event_flags_set+0x3c4>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c02c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c032:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c034:	f3ef 8310 	mrs	r3, PRIMASK
 800c038:	623b      	str	r3, [r7, #32]
    return(posture);
 800c03a:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c03c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c03e:	b672      	cpsid	i
    return(int_posture);
 800c040:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800c042:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800c046:	4b13      	ldr	r3, [pc, #76]	; (800c094 <_tx_event_flags_set+0x3ec>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	3301      	adds	r3, #1
 800c04c:	4a11      	ldr	r2, [pc, #68]	; (800c094 <_tx_event_flags_set+0x3ec>)
 800c04e:	6013      	str	r3, [r2, #0]
 800c050:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c054:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c058:	f383 8810 	msr	PRIMASK, r3
}
 800c05c:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800c05e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c062:	f001 f9e7 	bl	800d434 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 800c066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c068:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800c06c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1db      	bne.n	800c02c <_tx_event_flags_set+0x384>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c074:	f3ef 8310 	mrs	r3, PRIMASK
 800c078:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c07a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c07c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c07e:	b672      	cpsid	i
    return(int_posture);
 800c080:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 800c082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 800c086:	4b03      	ldr	r3, [pc, #12]	; (800c094 <_tx_event_flags_set+0x3ec>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	3b01      	subs	r3, #1
 800c08c:	4a01      	ldr	r2, [pc, #4]	; (800c094 <_tx_event_flags_set+0x3ec>)
 800c08e:	6013      	str	r3, [r2, #0]
 800c090:	e009      	b.n	800c0a6 <_tx_event_flags_set+0x3fe>
 800c092:	bf00      	nop
 800c094:	2001491c 	.word	0x2001491c
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	695b      	ldr	r3, [r3, #20]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <_tx_event_flags_set+0x3fe>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	60da      	str	r2, [r3, #12]
 800c0a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c0aa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	f383 8810 	msr	PRIMASK, r3
}
 800c0b2:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 800c0b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d101      	bne.n	800c0be <_tx_event_flags_set+0x416>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 800c0ba:	f001 f981 	bl	800d3c0 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3798      	adds	r7, #152	; 0x98
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800c0cc:	f000 ff36 	bl	800cf3c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800c0d0:	f001 fcdc 	bl	800da8c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800c0d4:	4b12      	ldr	r3, [pc, #72]	; (800c120 <_tx_initialize_high_level+0x58>)
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	601a      	str	r2, [r3, #0]
 800c0da:	4b12      	ldr	r3, [pc, #72]	; (800c124 <_tx_initialize_high_level+0x5c>)
 800c0dc:	2200      	movs	r2, #0
 800c0de:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800c0e0:	4b11      	ldr	r3, [pc, #68]	; (800c128 <_tx_initialize_high_level+0x60>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	601a      	str	r2, [r3, #0]
 800c0e6:	4b11      	ldr	r3, [pc, #68]	; (800c12c <_tx_initialize_high_level+0x64>)
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800c0ec:	4b10      	ldr	r3, [pc, #64]	; (800c130 <_tx_initialize_high_level+0x68>)
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	601a      	str	r2, [r3, #0]
 800c0f2:	4b10      	ldr	r3, [pc, #64]	; (800c134 <_tx_initialize_high_level+0x6c>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800c0f8:	4b0f      	ldr	r3, [pc, #60]	; (800c138 <_tx_initialize_high_level+0x70>)
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	601a      	str	r2, [r3, #0]
 800c0fe:	4b0f      	ldr	r3, [pc, #60]	; (800c13c <_tx_initialize_high_level+0x74>)
 800c100:	2200      	movs	r2, #0
 800c102:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800c104:	4b0e      	ldr	r3, [pc, #56]	; (800c140 <_tx_initialize_high_level+0x78>)
 800c106:	2200      	movs	r2, #0
 800c108:	601a      	str	r2, [r3, #0]
 800c10a:	4b0e      	ldr	r3, [pc, #56]	; (800c144 <_tx_initialize_high_level+0x7c>)
 800c10c:	2200      	movs	r2, #0
 800c10e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800c110:	4b0d      	ldr	r3, [pc, #52]	; (800c148 <_tx_initialize_high_level+0x80>)
 800c112:	2200      	movs	r2, #0
 800c114:	601a      	str	r2, [r3, #0]
 800c116:	4b0d      	ldr	r3, [pc, #52]	; (800c14c <_tx_initialize_high_level+0x84>)
 800c118:	2200      	movs	r2, #0
 800c11a:	601a      	str	r2, [r3, #0]
#endif
}
 800c11c:	bf00      	nop
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	2001484c 	.word	0x2001484c
 800c124:	20014850 	.word	0x20014850
 800c128:	20014854 	.word	0x20014854
 800c12c:	20014858 	.word	0x20014858
 800c130:	2001485c 	.word	0x2001485c
 800c134:	20014860 	.word	0x20014860
 800c138:	2001486c 	.word	0x2001486c
 800c13c:	20014870 	.word	0x20014870
 800c140:	20014874 	.word	0x20014874
 800c144:	20014878 	.word	0x20014878
 800c148:	20014864 	.word	0x20014864
 800c14c:	20014868 	.word	0x20014868

0800c150 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800c154:	4b10      	ldr	r3, [pc, #64]	; (800c198 <_tx_initialize_kernel_enter+0x48>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800c15c:	d00c      	beq.n	800c178 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800c15e:	4b0e      	ldr	r3, [pc, #56]	; (800c198 <_tx_initialize_kernel_enter+0x48>)
 800c160:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800c164:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800c166:	f7f4 f891 	bl	800028c <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800c16a:	f7ff ffad 	bl	800c0c8 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800c16e:	4b0b      	ldr	r3, [pc, #44]	; (800c19c <_tx_initialize_kernel_enter+0x4c>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	3301      	adds	r3, #1
 800c174:	4a09      	ldr	r2, [pc, #36]	; (800c19c <_tx_initialize_kernel_enter+0x4c>)
 800c176:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800c178:	4b07      	ldr	r3, [pc, #28]	; (800c198 <_tx_initialize_kernel_enter+0x48>)
 800c17a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800c17e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800c180:	4b07      	ldr	r3, [pc, #28]	; (800c1a0 <_tx_initialize_kernel_enter+0x50>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4618      	mov	r0, r3
 800c186:	f7f4 f99f 	bl	80004c8 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800c18a:	4b03      	ldr	r3, [pc, #12]	; (800c198 <_tx_initialize_kernel_enter+0x48>)
 800c18c:	2200      	movs	r2, #0
 800c18e:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800c190:	f7f4 f8b8 	bl	8000304 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800c194:	bf00      	nop
 800c196:	bd80      	pop	{r7, pc}
 800c198:	20000088 	.word	0x20000088
 800c19c:	2001491c 	.word	0x2001491c
 800c1a0:	2001487c 	.word	0x2001487c

0800c1a4 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b08e      	sub	sp, #56	; 0x38
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c1ae:	f3ef 8310 	mrs	r3, PRIMASK
 800c1b2:	623b      	str	r3, [r7, #32]
    return(posture);
 800c1b4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c1b6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c1b8:	b672      	cpsid	i
    return(int_posture);
 800c1ba:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 800c1bc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1c2:	4a33      	ldr	r2, [pc, #204]	; (800c290 <_tx_mutex_cleanup+0xec>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d158      	bne.n	800c27a <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d152      	bne.n	800c27a <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1d8:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 800c1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d04c      	beq.n	800c27a <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a2b      	ldr	r2, [pc, #172]	; (800c294 <_tx_mutex_cleanup+0xf0>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d147      	bne.n	800c27a <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800c1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ec:	69db      	ldr	r3, [r3, #28]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d043      	beq.n	800c27a <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 800c1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fa:	69db      	ldr	r3, [r3, #28]
 800c1fc:	1e5a      	subs	r2, r3, #1
 800c1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c200:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800c202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c204:	69db      	ldr	r3, [r3, #28]
 800c206:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d103      	bne.n	800c216 <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	2200      	movs	r2, #0
 800c212:	619a      	str	r2, [r3, #24]
 800c214:	e013      	b.n	800c23e <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c21a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c220:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c226:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c22c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800c22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c230:	699b      	ldr	r3, [r3, #24]
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	429a      	cmp	r2, r3
 800c236:	d102      	bne.n	800c23e <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800c238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c23c:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c242:	2b0d      	cmp	r3, #13
 800c244:	d119      	bne.n	800c27a <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	221d      	movs	r2, #29
 800c24a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c24e:	4b12      	ldr	r3, [pc, #72]	; (800c298 <_tx_mutex_cleanup+0xf4>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	3301      	adds	r3, #1
 800c254:	4a10      	ldr	r2, [pc, #64]	; (800c298 <_tx_mutex_cleanup+0xf4>)
 800c256:	6013      	str	r3, [r2, #0]
 800c258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	f383 8810 	msr	PRIMASK, r3
}
 800c262:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f001 f8e5 	bl	800d434 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c26a:	f3ef 8310 	mrs	r3, PRIMASK
 800c26e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c270:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c272:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c274:	b672      	cpsid	i
    return(int_posture);
 800c276:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c278:	637b      	str	r3, [r7, #52]	; 0x34
 800c27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f383 8810 	msr	PRIMASK, r3
}
 800c284:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c286:	bf00      	nop
 800c288:	3738      	adds	r7, #56	; 0x38
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	0800c1a5 	.word	0x0800c1a5
 800c294:	4d555445 	.word	0x4d555445
 800c298:	2001491c 	.word	0x2001491c

0800c29c <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b08a      	sub	sp, #40	; 0x28
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2a4:	f3ef 8310 	mrs	r3, PRIMASK
 800c2a8:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c2aa:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c2ac:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c2ae:	b672      	cpsid	i
    return(int_posture);
 800c2b0:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800c2b2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800c2b4:	4b1a      	ldr	r3, [pc, #104]	; (800c320 <_tx_mutex_thread_release+0x84>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	4a19      	ldr	r2, [pc, #100]	; (800c320 <_tx_mutex_thread_release+0x84>)
 800c2bc:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c2c4:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 800c2c6:	6a3b      	ldr	r3, [r7, #32]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d017      	beq.n	800c2fc <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	609a      	str	r2, [r3, #8]
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f383 8810 	msr	PRIMASK, r3
}
 800c2dc:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800c2de:	6a38      	ldr	r0, [r7, #32]
 800c2e0:	f000 faf2 	bl	800c8c8 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2e4:	f3ef 8310 	mrs	r3, PRIMASK
 800c2e8:	617b      	str	r3, [r7, #20]
    return(posture);
 800c2ea:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c2ec:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c2ee:	b672      	cpsid	i
    return(int_posture);
 800c2f0:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 800c2f2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c2fa:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 800c2fc:	6a3b      	ldr	r3, [r7, #32]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1dd      	bne.n	800c2be <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800c302:	4b07      	ldr	r3, [pc, #28]	; (800c320 <_tx_mutex_thread_release+0x84>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	3b01      	subs	r3, #1
 800c308:	4a05      	ldr	r2, [pc, #20]	; (800c320 <_tx_mutex_thread_release+0x84>)
 800c30a:	6013      	str	r3, [r2, #0]
 800c30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	f383 8810 	msr	PRIMASK, r3
}
 800c316:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 800c318:	bf00      	nop
 800c31a:	3728      	adds	r7, #40	; 0x28
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	2001491c 	.word	0x2001491c

0800c324 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b08a      	sub	sp, #40	; 0x28
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800c330:	2234      	movs	r2, #52	; 0x34
 800c332:	2100      	movs	r1, #0
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f002 fc79 	bl	800ec2c <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c346:	f3ef 8310 	mrs	r3, PRIMASK
 800c34a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c34c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c34e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c350:	b672      	cpsid	i
    return(int_posture);
 800c352:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 800c354:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	4a1a      	ldr	r2, [pc, #104]	; (800c3c4 <_tx_mutex_create+0xa0>)
 800c35a:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800c35c:	4b1a      	ldr	r3, [pc, #104]	; (800c3c8 <_tx_mutex_create+0xa4>)
 800c35e:	4a1b      	ldr	r2, [pc, #108]	; (800c3cc <_tx_mutex_create+0xa8>)
 800c360:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800c362:	4b1b      	ldr	r3, [pc, #108]	; (800c3d0 <_tx_mutex_create+0xac>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d109      	bne.n	800c37e <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800c36a:	4a1a      	ldr	r2, [pc, #104]	; (800c3d4 <_tx_mutex_create+0xb0>)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	625a      	str	r2, [r3, #36]	; 0x24
 800c37c:	e011      	b.n	800c3a2 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800c37e:	4b15      	ldr	r3, [pc, #84]	; (800c3d4 <_tx_mutex_create+0xb0>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800c384:	6a3b      	ldr	r3, [r7, #32]
 800c386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c388:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800c38a:	6a3b      	ldr	r3, [r7, #32]
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	68fa      	ldr	r2, [r7, #12]
 800c394:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	69fa      	ldr	r2, [r7, #28]
 800c39a:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6a3a      	ldr	r2, [r7, #32]
 800c3a0:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800c3a2:	4b0b      	ldr	r3, [pc, #44]	; (800c3d0 <_tx_mutex_create+0xac>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	4a09      	ldr	r2, [pc, #36]	; (800c3d0 <_tx_mutex_create+0xac>)
 800c3aa:	6013      	str	r3, [r2, #0]
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	f383 8810 	msr	PRIMASK, r3
}
 800c3b6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3728      	adds	r7, #40	; 0x28
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	4d555445 	.word	0x4d555445
 800c3c8:	20014920 	.word	0x20014920
 800c3cc:	0800c29d 	.word	0x0800c29d
 800c3d0:	20014868 	.word	0x20014868
 800c3d4:	20014864 	.word	0x20014864

0800c3d8 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b092      	sub	sp, #72	; 0x48
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c3e2:	f3ef 8310 	mrs	r3, PRIMASK
 800c3e6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c3ea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c3ec:	b672      	cpsid	i
    return(int_posture);
 800c3ee:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800c3f0:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c3f2:	4b7a      	ldr	r3, [pc, #488]	; (800c5dc <_tx_mutex_get+0x204>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d144      	bne.n	800c48a <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2201      	movs	r2, #1
 800c404:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c40a:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800c40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d032      	beq.n	800c478 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	691b      	ldr	r3, [r3, #16]
 800c416:	2b01      	cmp	r3, #1
 800c418:	d106      	bne.n	800c428 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800c41a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2220      	movs	r2, #32
 800c426:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800c428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c42a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c42e:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800c430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00f      	beq.n	800c456 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800c436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c43a:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800c43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800c442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c44c:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c452:	62da      	str	r2, [r3, #44]	; 0x2c
 800c454:	e009      	b.n	800c46a <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800c456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800c46a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c46c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c470:	1c5a      	adds	r2, r3, #1
 800c472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c474:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800c478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c47a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	f383 8810 	msr	PRIMASK, r3
}
 800c482:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800c484:	2300      	movs	r3, #0
 800c486:	647b      	str	r3, [r7, #68]	; 0x44
 800c488:	e0a2      	b.n	800c5d0 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c490:	429a      	cmp	r2, r3
 800c492:	d10d      	bne.n	800c4b0 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	1c5a      	adds	r2, r3, #1
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	609a      	str	r2, [r3, #8]
 800c49e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4a0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	f383 8810 	msr	PRIMASK, r3
}
 800c4a8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	647b      	str	r3, [r7, #68]	; 0x44
 800c4ae:	e08f      	b.n	800c5d0 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f000 8084 	beq.w	800c5c0 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800c4b8:	4b49      	ldr	r3, [pc, #292]	; (800c5e0 <_tx_mutex_get+0x208>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d008      	beq.n	800c4d2 <_tx_mutex_get+0xfa>
 800c4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	f383 8810 	msr	PRIMASK, r3
}
 800c4ca:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800c4cc:	231d      	movs	r3, #29
 800c4ce:	647b      	str	r3, [r7, #68]	; 0x44
 800c4d0:	e07e      	b.n	800c5d0 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800c4d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4da:	4a42      	ldr	r2, [pc, #264]	; (800c5e4 <_tx_mutex_get+0x20c>)
 800c4dc:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800c4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800c4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c4ea:	1c5a      	adds	r2, r3, #1
 800c4ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	69db      	ldr	r3, [r3, #28]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d109      	bne.n	800c50e <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4fe:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c502:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c504:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c508:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c50a:	675a      	str	r2, [r3, #116]	; 0x74
 800c50c:	e011      	b.n	800c532 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	699b      	ldr	r3, [r3, #24]
 800c512:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c518:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c51c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c51e:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c524:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c528:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c52a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c52e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c530:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	69db      	ldr	r3, [r3, #28]
 800c536:	1c5a      	adds	r2, r3, #1
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800c53c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c53e:	220d      	movs	r2, #13
 800c540:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c544:	2201      	movs	r2, #1
 800c546:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c54a:	683a      	ldr	r2, [r7, #0]
 800c54c:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800c54e:	4b24      	ldr	r3, [pc, #144]	; (800c5e0 <_tx_mutex_get+0x208>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	3301      	adds	r3, #1
 800c554:	4a22      	ldr	r2, [pc, #136]	; (800c5e0 <_tx_mutex_get+0x208>)
 800c556:	6013      	str	r3, [r2, #0]
 800c558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c55a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	f383 8810 	msr	PRIMASK, r3
}
 800c562:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d121      	bne.n	800c5b0 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c574:	429a      	cmp	r2, r3
 800c576:	d903      	bls.n	800c580 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800c578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800c580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c586:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d204      	bcs.n	800c598 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800c58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c594:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800c598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d905      	bls.n	800c5b0 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800c5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5ac:	f000 f8ce 	bl	800c74c <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800c5b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c5b2:	f001 f83f 	bl	800d634 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800c5b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5bc:	647b      	str	r3, [r7, #68]	; 0x44
 800c5be:	e007      	b.n	800c5d0 <_tx_mutex_get+0x1f8>
 800c5c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5c2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f383 8810 	msr	PRIMASK, r3
}
 800c5ca:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800c5cc:	231d      	movs	r3, #29
 800c5ce:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 800c5d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3748      	adds	r7, #72	; 0x48
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	20014884 	.word	0x20014884
 800c5e0:	2001491c 	.word	0x2001491c
 800c5e4:	0800c1a5 	.word	0x0800c1a5

0800c5e8 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b092      	sub	sp, #72	; 0x48
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c5f0:	f3ef 8310 	mrs	r3, PRIMASK
 800c5f4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c5f8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c5fa:	b672      	cpsid	i
    return(int_posture);
 800c5fc:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800c5fe:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	69db      	ldr	r3, [r3, #28]
 800c604:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800c606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d805      	bhi.n	800c618 <_tx_mutex_prioritize+0x30>
 800c60c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c60e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	f383 8810 	msr	PRIMASK, r3
}
 800c616:	e092      	b.n	800c73e <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800c618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61a:	2b02      	cmp	r3, #2
 800c61c:	d114      	bne.n	800c648 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	699b      	ldr	r3, [r3, #24]
 800c622:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800c624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c628:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800c62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c632:	429a      	cmp	r2, r3
 800c634:	d202      	bcs.n	800c63c <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c63a:	619a      	str	r2, [r3, #24]
 800c63c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c63e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	f383 8810 	msr	PRIMASK, r3
}
 800c646:	e07a      	b.n	800c73e <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	699b      	ldr	r3, [r3, #24]
 800c64c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800c652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c656:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800c658:	4b3b      	ldr	r3, [pc, #236]	; (800c748 <_tx_mutex_prioritize+0x160>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3301      	adds	r3, #1
 800c65e:	4a3a      	ldr	r2, [pc, #232]	; (800c748 <_tx_mutex_prioritize+0x160>)
 800c660:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800c662:	2300      	movs	r3, #0
 800c664:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800c666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66e:	429a      	cmp	r2, r3
 800c670:	d201      	bcs.n	800c676 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800c672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c674:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c678:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f383 8810 	msr	PRIMASK, r3
}
 800c680:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c682:	f3ef 8310 	mrs	r3, PRIMASK
 800c686:	617b      	str	r3, [r7, #20]
    return(posture);
 800c688:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c68a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c68c:	b672      	cpsid	i
    return(int_posture);
 800c68e:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800c690:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	699b      	ldr	r3, [r3, #24]
 800c696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c698:	429a      	cmp	r2, r3
 800c69a:	d002      	beq.n	800c6a2 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800c69c:	2301      	movs	r3, #1
 800c69e:	633b      	str	r3, [r7, #48]	; 0x30
 800c6a0:	e006      	b.n	800c6b0 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	69db      	ldr	r3, [r3, #28]
 800c6a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d001      	beq.n	800c6b0 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800c6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d103      	bne.n	800c6be <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c6b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ba:	643b      	str	r3, [r7, #64]	; 0x40
 800c6bc:	e00c      	b.n	800c6d8 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	699b      	ldr	r3, [r3, #24]
 800c6c2:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	69db      	ldr	r3, [r3, #28]
 800c6c8:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800c6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6cc:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800c6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6d2:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 800c6d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d1c2      	bne.n	800c666 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800c6e0:	4b19      	ldr	r3, [pc, #100]	; (800c748 <_tx_mutex_prioritize+0x160>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	4a18      	ldr	r2, [pc, #96]	; (800c748 <_tx_mutex_prioritize+0x160>)
 800c6e8:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800c6ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d01d      	beq.n	800c72e <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800c6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800c6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6fc:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800c6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c702:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800c704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c708:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800c70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c70e:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800c710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c714:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800c716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c71a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800c71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c720:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800c722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c726:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c72c:	619a      	str	r2, [r3, #24]
 800c72e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c730:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	f383 8810 	msr	PRIMASK, r3
}
 800c738:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c73a:	f000 fe41 	bl	800d3c0 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800c73e:	2300      	movs	r3, #0
#endif
}
 800c740:	4618      	mov	r0, r3
 800c742:	3748      	adds	r7, #72	; 0x48
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	2001491c 	.word	0x2001491c

0800c74c <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b090      	sub	sp, #64	; 0x40
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c756:	f3ef 8310 	mrs	r3, PRIMASK
 800c75a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c75e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c760:	b672      	cpsid	i
    return(int_posture);
 800c762:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800c764:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d017      	beq.n	800c79e <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	683a      	ldr	r2, [r7, #0]
 800c772:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c77a:	683a      	ldr	r2, [r7, #0]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d905      	bls.n	800c78c <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	63da      	str	r2, [r3, #60]	; 0x3c
 800c78a:	e002      	b.n	800c792 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	683a      	ldr	r2, [r7, #0]
 800c790:	63da      	str	r2, [r3, #60]	; 0x3c
 800c792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c794:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c798:	f383 8810 	msr	PRIMASK, r3
}
 800c79c:	e089      	b.n	800c8b2 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800c79e:	4b47      	ldr	r3, [pc, #284]	; (800c8bc <_tx_mutex_priority_change+0x170>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a8:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800c7aa:	4b45      	ldr	r3, [pc, #276]	; (800c8c0 <_tx_mutex_priority_change+0x174>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	3302      	adds	r3, #2
 800c7b0:	4a43      	ldr	r2, [pc, #268]	; (800c8c0 <_tx_mutex_priority_change+0x174>)
 800c7b2:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	220e      	movs	r2, #14
 800c7b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2201      	movs	r2, #1
 800c7be:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	64da      	str	r2, [r3, #76]	; 0x4c
 800c7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	f383 8810 	msr	PRIMASK, r3
}
 800c7d0:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 ff2e 	bl	800d634 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c7d8:	f3ef 8310 	mrs	r3, PRIMASK
 800c7dc:	623b      	str	r3, [r7, #32]
    return(posture);
 800c7de:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c7e0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c7e2:	b672      	cpsid	i
    return(int_posture);
 800c7e4:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 800c7e6:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	683a      	ldr	r2, [r7, #0]
 800c7ec:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c7f4:	683a      	ldr	r2, [r7, #0]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d905      	bls.n	800c806 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	63da      	str	r2, [r3, #60]	; 0x3c
 800c804:	e002      	b.n	800c80c <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	683a      	ldr	r2, [r7, #0]
 800c80a:	63da      	str	r2, [r3, #60]	; 0x3c
 800c80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c80e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f383 8810 	msr	PRIMASK, r3
}
 800c816:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fe0b 	bl	800d434 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c81e:	f3ef 8310 	mrs	r3, PRIMASK
 800c822:	617b      	str	r3, [r7, #20]
    return(posture);
 800c824:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c826:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c828:	b672      	cpsid	i
    return(int_posture);
 800c82a:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800c82c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800c82e:	4b23      	ldr	r3, [pc, #140]	; (800c8bc <_tx_mutex_priority_change+0x170>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c838:	429a      	cmp	r2, r3
 800c83a:	d034      	beq.n	800c8a6 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c840:	2b00      	cmp	r3, #0
 800c842:	d130      	bne.n	800c8a6 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d811      	bhi.n	800c874 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c854:	429a      	cmp	r2, r3
 800c856:	d126      	bne.n	800c8a6 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800c858:	4a18      	ldr	r2, [pc, #96]	; (800c8bc <_tx_mutex_priority_change+0x170>)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800c85e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	429a      	cmp	r2, r3
 800c864:	d21f      	bcs.n	800c8a6 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c86a:	4916      	ldr	r1, [pc, #88]	; (800c8c4 <_tx_mutex_priority_change+0x178>)
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c872:	e018      	b.n	800c8a6 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d212      	bcs.n	800c8a6 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c888:	429a      	cmp	r2, r3
 800c88a:	d80c      	bhi.n	800c8a6 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800c88c:	4a0b      	ldr	r2, [pc, #44]	; (800c8bc <_tx_mutex_priority_change+0x170>)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800c892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	429a      	cmp	r2, r3
 800c898:	d205      	bcs.n	800c8a6 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89e:	4909      	ldr	r1, [pc, #36]	; (800c8c4 <_tx_mutex_priority_change+0x178>)
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8a8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	f383 8810 	msr	PRIMASK, r3
}
 800c8b0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800c8b2:	bf00      	nop
 800c8b4:	3740      	adds	r7, #64	; 0x40
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	20014888 	.word	0x20014888
 800c8c0:	2001491c 	.word	0x2001491c
 800c8c4:	2001489c 	.word	0x2001489c

0800c8c8 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b0a6      	sub	sp, #152	; 0x98
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800c8d0:	2320      	movs	r3, #32
 800c8d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8d6:	f3ef 8310 	mrs	r3, PRIMASK
 800c8da:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 800c8dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 800c8de:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800c8e0:	b672      	cpsid	i
    return(int_posture);
 800c8e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800c8e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f000 81ff 	beq.w	800ccf0 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800c8f8:	4ba3      	ldr	r3, [pc, #652]	; (800cb88 <_tx_mutex_put+0x2c0>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c904:	429a      	cmp	r2, r3
 800c906:	d00d      	beq.n	800c924 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800c908:	4ba0      	ldr	r3, [pc, #640]	; (800cb8c <_tx_mutex_put+0x2c4>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d109      	bne.n	800c924 <_tx_mutex_put+0x5c>
 800c910:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c914:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c918:	f383 8810 	msr	PRIMASK, r3
}
 800c91c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800c91e:	231e      	movs	r3, #30
 800c920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800c924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c928:	2b20      	cmp	r3, #32
 800c92a:	f040 81eb 	bne.w	800cd04 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	1e5a      	subs	r2, r3, #1
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00a      	beq.n	800c956 <_tx_mutex_put+0x8e>
 800c940:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c944:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c948:	f383 8810 	msr	PRIMASK, r3
}
 800c94c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800c94e:	2300      	movs	r3, #0
 800c950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c954:	e1d6      	b.n	800cd04 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800c956:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10a      	bne.n	800c972 <_tx_mutex_put+0xaa>
 800c95c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c960:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c964:	f383 8810 	msr	PRIMASK, r3
}
 800c968:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800c96a:	2300      	movs	r3, #0
 800c96c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c970:	e1c8      	b.n	800cd04 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800c972:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c974:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c978:	1e5a      	subs	r2, r3, #1
 800c97a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c97c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800c980:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c982:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d104      	bne.n	800c994 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800c98a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c98c:	2200      	movs	r2, #0
 800c98e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800c992:	e019      	b.n	800c9c8 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a0:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800c9a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c9a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c9a8:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800c9aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c9b0:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800c9b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c9b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d104      	bne.n	800c9c8 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800c9be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c9c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c9c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	699b      	ldr	r3, [r3, #24]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d110      	bne.n	800c9f2 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	691b      	ldr	r3, [r3, #16]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10c      	bne.n	800c9f2 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	60da      	str	r2, [r3, #12]
 800c9de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c9e2:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9e6:	f383 8810 	msr	PRIMASK, r3
}
 800c9ea:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800c9f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c9f6:	2b20      	cmp	r3, #32
 800c9f8:	f040 8184 	bne.w	800cd04 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800ca02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d155      	bne.n	800cac0 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ca14:	4b5d      	ldr	r3, [pc, #372]	; (800cb8c <_tx_mutex_put+0x2c4>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	4a5c      	ldr	r2, [pc, #368]	; (800cb8c <_tx_mutex_put+0x2c4>)
 800ca1c:	6013      	str	r3, [r2, #0]
 800ca1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca22:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca26:	f383 8810 	msr	PRIMASK, r3
}
 800ca2a:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800ca2c:	2320      	movs	r3, #32
 800ca2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800ca32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ca38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800ca3c:	e01f      	b.n	800ca7e <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800ca3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca42:	691b      	ldr	r3, [r3, #16]
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d10b      	bne.n	800ca60 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800ca48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d904      	bls.n	800ca60 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800ca56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800ca60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800ca6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ca70:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d102      	bne.n	800ca7e <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800ca7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d1db      	bne.n	800ca3e <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ca86:	f3ef 8310 	mrs	r3, PRIMASK
 800ca8a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800ca8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800ca8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800ca90:	b672      	cpsid	i
    return(int_posture);
 800ca92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ca94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800ca98:	4b3c      	ldr	r3, [pc, #240]	; (800cb8c <_tx_mutex_put+0x2c4>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	4a3b      	ldr	r2, [pc, #236]	; (800cb8c <_tx_mutex_put+0x2c4>)
 800caa0:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800caa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800caa4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800caa8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800caac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d203      	bcs.n	800cac0 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 800cab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cabc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	69db      	ldr	r3, [r3, #28]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d920      	bls.n	800cb0a <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	691b      	ldr	r3, [r3, #16]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d11c      	bne.n	800cb0a <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800cad0:	4b2e      	ldr	r3, [pc, #184]	; (800cb8c <_tx_mutex_put+0x2c4>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	3301      	adds	r3, #1
 800cad6:	4a2d      	ldr	r2, [pc, #180]	; (800cb8c <_tx_mutex_put+0x2c4>)
 800cad8:	6013      	str	r3, [r2, #0]
 800cada:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cade:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae2:	f383 8810 	msr	PRIMASK, r3
}
 800cae6:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7ff fd7d 	bl	800c5e8 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800caee:	f3ef 8310 	mrs	r3, PRIMASK
 800caf2:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800caf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800caf6:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800caf8:	b672      	cpsid	i
    return(int_posture);
 800cafa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 800cafc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800cb00:	4b22      	ldr	r3, [pc, #136]	; (800cb8c <_tx_mutex_put+0x2c4>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3b01      	subs	r3, #1
 800cb06:	4a21      	ldr	r2, [pc, #132]	; (800cb8c <_tx_mutex_put+0x2c4>)
 800cb08:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	699b      	ldr	r3, [r3, #24]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d13e      	bne.n	800cb90 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800cb12:	4b1e      	ldr	r3, [pc, #120]	; (800cb8c <_tx_mutex_put+0x2c4>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	3301      	adds	r3, #1
 800cb18:	4a1c      	ldr	r2, [pc, #112]	; (800cb8c <_tx_mutex_put+0x2c4>)
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cb20:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb24:	f383 8810 	msr	PRIMASK, r3
}
 800cb28:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2220      	movs	r2, #32
 800cb2e:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	68db      	ldr	r3, [r3, #12]
 800cb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb36:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d006      	beq.n	800cb4c <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7ff fe00 	bl	800c74c <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb4c:	f3ef 8310 	mrs	r3, PRIMASK
 800cb50:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800cb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800cb54:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb56:	b672      	cpsid	i
    return(int_posture);
 800cb58:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800cb5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800cb5e:	4b0b      	ldr	r3, [pc, #44]	; (800cb8c <_tx_mutex_put+0x2c4>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	3b01      	subs	r3, #1
 800cb64:	4a09      	ldr	r2, [pc, #36]	; (800cb8c <_tx_mutex_put+0x2c4>)
 800cb66:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	60da      	str	r2, [r3, #12]
 800cb6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cb72:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb76:	f383 8810 	msr	PRIMASK, r3
}
 800cb7a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800cb7c:	f000 fc20 	bl	800d3c0 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 800cb80:	2300      	movs	r3, #0
 800cb82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb86:	e0bd      	b.n	800cd04 <_tx_mutex_put+0x43c>
 800cb88:	20014884 	.word	0x20014884
 800cb8c:	2001491c 	.word	0x2001491c
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	699b      	ldr	r3, [r3, #24]
 800cb94:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d10a      	bne.n	800cbb4 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800cba6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2220      	movs	r2, #32
 800cbb2:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800cbb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cbb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cbba:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800cbbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10a      	bne.n	800cbd8 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800cbc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	631a      	str	r2, [r3, #48]	; 0x30
 800cbd6:	e016      	b.n	800cc06 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800cbd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cbda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cbde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800cbe2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbe8:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800cbea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800cbf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cbfc:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cc04:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800cc06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc08:	1c5a      	adds	r2, r3, #1
 800cc0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc0c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2201      	movs	r2, #1
 800cc14:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cc1a:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	69db      	ldr	r3, [r3, #28]
 800cc20:	1e5a      	subs	r2, r3, #1
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	69db      	ldr	r3, [r3, #28]
 800cc2a:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800cc2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d103      	bne.n	800cc3a <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2200      	movs	r2, #0
 800cc36:	619a      	str	r2, [r3, #24]
 800cc38:	e00e      	b.n	800cc58 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800cc3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc3e:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc44:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800cc46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc4a:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800cc4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cc50:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800cc52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc56:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800cc58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800cc5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc60:	2200      	movs	r2, #0
 800cc62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800cc66:	4b2a      	ldr	r3, [pc, #168]	; (800cd10 <_tx_mutex_put+0x448>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	4a28      	ldr	r2, [pc, #160]	; (800cd10 <_tx_mutex_put+0x448>)
 800cc6e:	6013      	str	r3, [r2, #0]
 800cc70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cc74:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	f383 8810 	msr	PRIMASK, r3
}
 800cc7c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d12d      	bne.n	800cce2 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	69db      	ldr	r3, [r3, #28]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d01c      	beq.n	800ccc8 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff fcaa 	bl	800c5e8 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc94:	f3ef 8310 	mrs	r3, PRIMASK
 800cc98:	61bb      	str	r3, [r7, #24]
    return(posture);
 800cc9a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800cc9c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc9e:	b672      	cpsid	i
    return(int_posture);
 800cca0:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800cca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 800ccac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d003      	beq.n	800ccba <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800ccb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	629a      	str	r2, [r3, #40]	; 0x28
 800ccba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ccbe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	f383 8810 	msr	PRIMASK, r3
}
 800ccc6:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 800ccc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d005      	beq.n	800cce2 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800ccd6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ccda:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800ccde:	f7ff fd35 	bl	800c74c <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800cce2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cce4:	f000 fba6 	bl	800d434 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800cce8:	2300      	movs	r3, #0
 800ccea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ccee:	e009      	b.n	800cd04 <_tx_mutex_put+0x43c>
 800ccf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ccf4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f383 8810 	msr	PRIMASK, r3
}
 800ccfc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800ccfe:	231e      	movs	r3, #30
 800cd00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 800cd04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3798      	adds	r7, #152	; 0x98
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	2001491c 	.word	0x2001491c

0800cd14 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b092      	sub	sp, #72	; 0x48
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	607a      	str	r2, [r7, #4]
 800cd20:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800cd22:	2300      	movs	r3, #0
 800cd24:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800cd26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cd28:	21ef      	movs	r1, #239	; 0xef
 800cd2a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cd2c:	f001 ff7e 	bl	800ec2c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800cd30:	22b0      	movs	r2, #176	; 0xb0
 800cd32:	2100      	movs	r1, #0
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f001 ff79 	bl	800ec2c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	68ba      	ldr	r2, [r7, #8]
 800cd3e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	683a      	ldr	r2, [r7, #0]
 800cd4a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd50:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cd56:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd5c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd6a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd70:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2220      	movs	r2, #32
 800cd76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800cd7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800cd7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd80:	3b01      	subs	r3, #1
 800cd82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd84:	4413      	add	r3, r2
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd8c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800cd8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d007      	beq.n	800cda6 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800cda4:	e006      	b.n	800cdb4 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdaa:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdb0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2203      	movs	r2, #3
 800cdb8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	4a48      	ldr	r2, [pc, #288]	; (800cee0 <_tx_thread_create+0x1cc>)
 800cdbe:	655a      	str	r2, [r3, #84]	; 0x54
 800cdc0:	68fa      	ldr	r2, [r7, #12]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800cdc6:	4947      	ldr	r1, [pc, #284]	; (800cee4 <_tx_thread_create+0x1d0>)
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f7f3 fb01 	bl	80003d0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cdce:	f3ef 8310 	mrs	r3, PRIMASK
 800cdd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800cdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800cdd6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800cdd8:	b672      	cpsid	i
    return(int_posture);
 800cdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800cddc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	4a41      	ldr	r2, [pc, #260]	; (800cee8 <_tx_thread_create+0x1d4>)
 800cde2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800cde4:	4b41      	ldr	r3, [pc, #260]	; (800ceec <_tx_thread_create+0x1d8>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10b      	bne.n	800ce04 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800cdec:	4a40      	ldr	r2, [pc, #256]	; (800cef0 <_tx_thread_create+0x1dc>)
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800ce02:	e016      	b.n	800ce32 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800ce04:	4b3a      	ldr	r3, [pc, #232]	; (800cef0 <_tx_thread_create+0x1dc>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800ce0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce10:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800ce12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1c:	68fa      	ldr	r2, [r7, #12]
 800ce1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800ce32:	4b2e      	ldr	r3, [pc, #184]	; (800ceec <_tx_thread_create+0x1d8>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	3301      	adds	r3, #1
 800ce38:	4a2c      	ldr	r2, [pc, #176]	; (800ceec <_tx_thread_create+0x1d8>)
 800ce3a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ce3c:	4b2d      	ldr	r3, [pc, #180]	; (800cef4 <_tx_thread_create+0x1e0>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	3301      	adds	r3, #1
 800ce42:	4a2c      	ldr	r2, [pc, #176]	; (800cef4 <_tx_thread_create+0x1e0>)
 800ce44:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800ce46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d129      	bne.n	800cea0 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce4c:	f3ef 8305 	mrs	r3, IPSR
 800ce50:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800ce52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800ce54:	4b28      	ldr	r3, [pc, #160]	; (800cef8 <_tx_thread_create+0x1e4>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ce5e:	d30d      	bcc.n	800ce7c <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800ce60:	4b26      	ldr	r3, [pc, #152]	; (800cefc <_tx_thread_create+0x1e8>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800ce66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d009      	beq.n	800ce80 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800ce6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce70:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800ce72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce78:	63da      	str	r2, [r3, #60]	; 0x3c
 800ce7a:	e001      	b.n	800ce80 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	647b      	str	r3, [r7, #68]	; 0x44
 800ce80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce82:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce84:	6a3b      	ldr	r3, [r7, #32]
 800ce86:	f383 8810 	msr	PRIMASK, r3
}
 800ce8a:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f000 fad1 	bl	800d434 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800ce92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d01e      	beq.n	800ced6 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800ce98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce9c:	63da      	str	r2, [r3, #60]	; 0x3c
 800ce9e:	e01a      	b.n	800ced6 <_tx_thread_create+0x1c2>
 800cea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	f383 8810 	msr	PRIMASK, r3
}
 800ceaa:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ceac:	f3ef 8310 	mrs	r3, PRIMASK
 800ceb0:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ceb2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ceb4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ceb6:	b672      	cpsid	i
    return(int_posture);
 800ceb8:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800ceba:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800cebc:	4b0d      	ldr	r3, [pc, #52]	; (800cef4 <_tx_thread_create+0x1e0>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	3b01      	subs	r3, #1
 800cec2:	4a0c      	ldr	r2, [pc, #48]	; (800cef4 <_tx_thread_create+0x1e0>)
 800cec4:	6013      	str	r3, [r2, #0]
 800cec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	f383 8810 	msr	PRIMASK, r3
}
 800ced0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ced2:	f000 fa75 	bl	800d3c0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800ced6:	2300      	movs	r3, #0
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3748      	adds	r7, #72	; 0x48
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	0800d909 	.word	0x0800d909
 800cee4:	0800d229 	.word	0x0800d229
 800cee8:	54485244 	.word	0x54485244
 800ceec:	20014890 	.word	0x20014890
 800cef0:	2001488c 	.word	0x2001488c
 800cef4:	2001491c 	.word	0x2001491c
 800cef8:	20000088 	.word	0x20000088
 800cefc:	20014888 	.word	0x20014888

0800cf00 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b087      	sub	sp, #28
 800cf04:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf06:	f3ef 8310 	mrs	r3, PRIMASK
 800cf0a:	60bb      	str	r3, [r7, #8]
    return(posture);
 800cf0c:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 800cf0e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf10:	b672      	cpsid	i
    return(int_posture);
 800cf12:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800cf14:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cf16:	4b08      	ldr	r3, [pc, #32]	; (800cf38 <_tx_thread_identify+0x38>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	613b      	str	r3, [r7, #16]
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f383 8810 	msr	PRIMASK, r3
}
 800cf26:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 800cf28:	693b      	ldr	r3, [r7, #16]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	371c      	adds	r7, #28
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	20014884 	.word	0x20014884

0800cf3c <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800cf40:	4b12      	ldr	r3, [pc, #72]	; (800cf8c <_tx_thread_initialize+0x50>)
 800cf42:	2200      	movs	r2, #0
 800cf44:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800cf46:	4b12      	ldr	r3, [pc, #72]	; (800cf90 <_tx_thread_initialize+0x54>)
 800cf48:	2200      	movs	r2, #0
 800cf4a:	601a      	str	r2, [r3, #0]
 800cf4c:	4b11      	ldr	r3, [pc, #68]	; (800cf94 <_tx_thread_initialize+0x58>)
 800cf4e:	2200      	movs	r2, #0
 800cf50:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cf52:	4b11      	ldr	r3, [pc, #68]	; (800cf98 <_tx_thread_initialize+0x5c>)
 800cf54:	2220      	movs	r2, #32
 800cf56:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800cf58:	2280      	movs	r2, #128	; 0x80
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	480f      	ldr	r0, [pc, #60]	; (800cf9c <_tx_thread_initialize+0x60>)
 800cf5e:	f001 fe65 	bl	800ec2c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800cf62:	4b0f      	ldr	r3, [pc, #60]	; (800cfa0 <_tx_thread_initialize+0x64>)
 800cf64:	2200      	movs	r2, #0
 800cf66:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800cf68:	4b0e      	ldr	r3, [pc, #56]	; (800cfa4 <_tx_thread_initialize+0x68>)
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800cf6e:	4b0e      	ldr	r3, [pc, #56]	; (800cfa8 <_tx_thread_initialize+0x6c>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800cf74:	4b0d      	ldr	r3, [pc, #52]	; (800cfac <_tx_thread_initialize+0x70>)
 800cf76:	2200      	movs	r2, #0
 800cf78:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800cf7a:	4b0d      	ldr	r3, [pc, #52]	; (800cfb0 <_tx_thread_initialize+0x74>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800cf82:	4a0b      	ldr	r2, [pc, #44]	; (800cfb0 <_tx_thread_initialize+0x74>)
 800cf84:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800cf86:	bf00      	nop
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20014884 	.word	0x20014884
 800cf90:	20014888 	.word	0x20014888
 800cf94:	20014894 	.word	0x20014894
 800cf98:	20014898 	.word	0x20014898
 800cf9c:	2001489c 	.word	0x2001489c
 800cfa0:	2001488c 	.word	0x2001488c
 800cfa4:	20014890 	.word	0x20014890
 800cfa8:	2001491c 	.word	0x2001491c
 800cfac:	20014920 	.word	0x20014920
 800cfb0:	20014924 	.word	0x20014924

0800cfb4 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b08c      	sub	sp, #48	; 0x30
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfca:	68ba      	ldr	r2, [r7, #8]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d004      	beq.n	800cfda <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d001      	beq.n	800cfda <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cfda:	f3ef 8310 	mrs	r3, PRIMASK
 800cfde:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800cfe2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cfe4:	b672      	cpsid	i
    return(int_posture);
 800cfe6:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800cfe8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cff0:	68ba      	ldr	r2, [r7, #8]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d902      	bls.n	800cffc <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 800cff6:	2318      	movs	r3, #24
 800cff8:	62bb      	str	r3, [r7, #40]	; 0x28
 800cffa:	e03e      	b.n	800d07a <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	68ba      	ldr	r2, [r7, #8]
 800d00a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d014:	68ba      	ldr	r2, [r7, #8]
 800d016:	429a      	cmp	r2, r3
 800d018:	d203      	bcs.n	800d022 <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	68ba      	ldr	r2, [r7, #8]
 800d01e:	63da      	str	r2, [r3, #60]	; 0x3c
 800d020:	e004      	b.n	800d02c <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d030:	4b17      	ldr	r3, [pc, #92]	; (800d090 <_tx_thread_preemption_change+0xdc>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	429a      	cmp	r2, r3
 800d036:	d920      	bls.n	800d07a <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 800d038:	4b15      	ldr	r3, [pc, #84]	; (800d090 <_tx_thread_preemption_change+0xdc>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	68ba      	ldr	r2, [r7, #8]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d91b      	bls.n	800d07a <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 800d042:	4b14      	ldr	r3, [pc, #80]	; (800d094 <_tx_thread_preemption_change+0xe0>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	68fa      	ldr	r2, [r7, #12]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d116      	bne.n	800d07a <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d04c:	4b10      	ldr	r3, [pc, #64]	; (800d090 <_tx_thread_preemption_change+0xdc>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a11      	ldr	r2, [pc, #68]	; (800d098 <_tx_thread_preemption_change+0xe4>)
 800d052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d056:	4a0f      	ldr	r2, [pc, #60]	; (800d094 <_tx_thread_preemption_change+0xe0>)
 800d058:	6013      	str	r3, [r2, #0]
 800d05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	f383 8810 	msr	PRIMASK, r3
}
 800d064:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 800d066:	f000 f9ab 	bl	800d3c0 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d06a:	f3ef 8310 	mrs	r3, PRIMASK
 800d06e:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d070:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d072:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d074:	b672      	cpsid	i
    return(int_posture);
 800d076:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800d078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	f383 8810 	msr	PRIMASK, r3
}
 800d084:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800d086:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3730      	adds	r7, #48	; 0x30
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	20014898 	.word	0x20014898
 800d094:	20014888 	.word	0x20014888
 800d098:	2001489c 	.word	0x2001489c

0800d09c <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b08b      	sub	sp, #44	; 0x2c
 800d0a0:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d0a2:	4b2b      	ldr	r3, [pc, #172]	; (800d150 <_tx_thread_relinquish+0xb4>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0a8:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ac:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d0ae:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d0b0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d0b2:	b672      	cpsid	i
    return(int_posture);
 800d0b4:	697b      	ldr	r3, [r7, #20]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 800d0b6:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ba:	69db      	ldr	r3, [r3, #28]
 800d0bc:	4a25      	ldr	r2, [pc, #148]	; (800d154 <_tx_thread_relinquish+0xb8>)
 800d0be:	6013      	str	r3, [r2, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 800d0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c4:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c8:	6a1b      	ldr	r3, [r3, #32]
 800d0ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d009      	beq.n	800d0e4 <_tx_thread_relinquish+0x48>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 800d0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d2:	6a1a      	ldr	r2, [r3, #32]
 800d0d4:	4920      	ldr	r1, [pc, #128]	; (800d158 <_tx_thread_relinquish+0xbc>)
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 800d0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0de:	6a1b      	ldr	r3, [r3, #32]
 800d0e0:	4a1e      	ldr	r2, [pc, #120]	; (800d15c <_tx_thread_relinquish+0xc0>)
 800d0e2:	6013      	str	r3, [r2, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 800d0e4:	4b1e      	ldr	r3, [pc, #120]	; (800d160 <_tx_thread_relinquish+0xc4>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	69fa      	ldr	r2, [r7, #28]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d906      	bls.n	800d0fc <_tx_thread_relinquish+0x60>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d0ee:	4b1c      	ldr	r3, [pc, #112]	; (800d160 <_tx_thread_relinquish+0xc4>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a19      	ldr	r2, [pc, #100]	; (800d158 <_tx_thread_relinquish+0xbc>)
 800d0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0f8:	4a18      	ldr	r2, [pc, #96]	; (800d15c <_tx_thread_relinquish+0xc0>)
 800d0fa:	6013      	str	r3, [r2, #0]
 800d0fc:	6a3b      	ldr	r3, [r7, #32]
 800d0fe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	f383 8810 	msr	PRIMASK, r3
}
 800d106:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 800d108:	4b14      	ldr	r3, [pc, #80]	; (800d15c <_tx_thread_relinquish+0xc0>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d10e:	429a      	cmp	r2, r3
 800d110:	d017      	beq.n	800d142 <_tx_thread_relinquish+0xa6>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d112:	4b14      	ldr	r3, [pc, #80]	; (800d164 <_tx_thread_relinquish+0xc8>)
 800d114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d118:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d11a:	f3ef 8305 	mrs	r3, IPSR
 800d11e:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d120:	68fb      	ldr	r3, [r7, #12]
    if (_tx_ipsr_get() == 0)
 800d122:	2b00      	cmp	r3, #0
 800d124:	d10c      	bne.n	800d140 <_tx_thread_relinquish+0xa4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d126:	f3ef 8310 	mrs	r3, PRIMASK
 800d12a:	60bb      	str	r3, [r7, #8]
    return(posture);
 800d12c:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_interrupt_posture();
 800d12e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d130:	b662      	cpsie	i
}
 800d132:	bf00      	nop
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	f383 8810 	msr	PRIMASK, r3
}
 800d13e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800d140:	bf00      	nop

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 800d142:	bf00      	nop
 800d144:	372c      	adds	r7, #44	; 0x2c
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop
 800d150:	20014884 	.word	0x20014884
 800d154:	20014e88 	.word	0x20014e88
 800d158:	2001489c 	.word	0x2001489c
 800d15c:	20014888 	.word	0x20014888
 800d160:	20014898 	.word	0x20014898
 800d164:	e000ed04 	.word	0xe000ed04

0800d168 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b08c      	sub	sp, #48	; 0x30
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 800d170:	2300      	movs	r3, #0
 800d172:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d174:	f3ef 8310 	mrs	r3, PRIMASK
 800d178:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d17a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d17c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d17e:	b672      	cpsid	i
    return(int_posture);
 800d180:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d182:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d188:	2b03      	cmp	r3, #3
 800d18a:	d12f      	bne.n	800d1ec <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d18c:	f3ef 8305 	mrs	r3, IPSR
 800d190:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d192:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800d194:	4b21      	ldr	r3, [pc, #132]	; (800d21c <_tx_thread_resume+0xb4>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4313      	orrs	r3, r2
 800d19a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d19e:	d30d      	bcc.n	800d1bc <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800d1a0:	4b1f      	ldr	r3, [pc, #124]	; (800d220 <_tx_thread_resume+0xb8>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800d1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d009      	beq.n	800d1c0 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800d1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b0:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800d1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b8:	63da      	str	r2, [r3, #60]	; 0x3c
 800d1ba:	e001      	b.n	800d1c0 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800d1c0:	4b18      	ldr	r3, [pc, #96]	; (800d224 <_tx_thread_resume+0xbc>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	4a17      	ldr	r2, [pc, #92]	; (800d224 <_tx_thread_resume+0xbc>)
 800d1c8:	6013      	str	r3, [r2, #0]
 800d1ca:	6a3b      	ldr	r3, [r7, #32]
 800d1cc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	f383 8810 	msr	PRIMASK, r3
}
 800d1d4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 f92c 	bl	800d434 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800d1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d002      	beq.n	800d1e8 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800d1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1e6:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	e012      	b.n	800d212 <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d105      	bne.n	800d200 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 800d1fa:	2319      	movs	r3, #25
 800d1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1fe:	e001      	b.n	800d204 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 800d200:	2312      	movs	r3, #18
 800d202:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d204:	6a3b      	ldr	r3, [r7, #32]
 800d206:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f383 8810 	msr	PRIMASK, r3
}
 800d20e:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 800d210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d212:	4618      	mov	r0, r3
 800d214:	3730      	adds	r7, #48	; 0x30
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	20000088 	.word	0x20000088
 800d220:	20014888 	.word	0x20014888
 800d224:	2001491c 	.word	0x2001491c

0800d228 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b088      	sub	sp, #32
 800d22c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d22e:	4b21      	ldr	r3, [pc, #132]	; (800d2b4 <_tx_thread_shell_entry+0x8c>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d238:	69fa      	ldr	r2, [r7, #28]
 800d23a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d23c:	4610      	mov	r0, r2
 800d23e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800d240:	4b1d      	ldr	r3, [pc, #116]	; (800d2b8 <_tx_thread_shell_entry+0x90>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d003      	beq.n	800d250 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800d248:	4b1b      	ldr	r3, [pc, #108]	; (800d2b8 <_tx_thread_shell_entry+0x90>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	69f8      	ldr	r0, [r7, #28]
 800d24e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d250:	f3ef 8310 	mrs	r3, PRIMASK
 800d254:	607b      	str	r3, [r7, #4]
    return(posture);
 800d256:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800d258:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d25a:	b672      	cpsid	i
    return(int_posture);
 800d25c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800d25e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	2201      	movs	r2, #1
 800d264:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	2201      	movs	r2, #1
 800d26a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	2200      	movs	r2, #0
 800d270:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d272:	4b12      	ldr	r3, [pc, #72]	; (800d2bc <_tx_thread_shell_entry+0x94>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	3301      	adds	r3, #1
 800d278:	4a10      	ldr	r2, [pc, #64]	; (800d2bc <_tx_thread_shell_entry+0x94>)
 800d27a:	6013      	str	r3, [r2, #0]
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	f383 8810 	msr	PRIMASK, r3
}
 800d286:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800d288:	f3ef 8314 	mrs	r3, CONTROL
 800d28c:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800d28e:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800d290:	617b      	str	r3, [r7, #20]
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	f023 0304 	bic.w	r3, r3, #4
 800d298:	617b      	str	r3, [r7, #20]
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	f383 8814 	msr	CONTROL, r3
}
 800d2a4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800d2a6:	69f8      	ldr	r0, [r7, #28]
 800d2a8:	f000 f9c4 	bl	800d634 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800d2ac:	bf00      	nop
 800d2ae:	3720      	adds	r7, #32
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	20014884 	.word	0x20014884
 800d2b8:	20014920 	.word	0x20014920
 800d2bc:	2001491c 	.word	0x2001491c

0800d2c0 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b08e      	sub	sp, #56	; 0x38
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d2c8:	f3ef 8310 	mrs	r3, PRIMASK
 800d2cc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d2d0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d2d2:	b672      	cpsid	i
    return(int_posture);
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d2d6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d2d8:	4b35      	ldr	r3, [pc, #212]	; (800d3b0 <_tx_thread_sleep+0xf0>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800d2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d108      	bne.n	800d2f6 <_tx_thread_sleep+0x36>
 800d2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d2e8:	6a3b      	ldr	r3, [r7, #32]
 800d2ea:	f383 8810 	msr	PRIMASK, r3
}
 800d2ee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d2f0:	2313      	movs	r3, #19
 800d2f2:	637b      	str	r3, [r7, #52]	; 0x34
 800d2f4:	e056      	b.n	800d3a4 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d2f6:	f3ef 8305 	mrs	r3, IPSR
 800d2fa:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d2fc:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d2fe:	4b2d      	ldr	r3, [pc, #180]	; (800d3b4 <_tx_thread_sleep+0xf4>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4313      	orrs	r3, r2
 800d304:	2b00      	cmp	r3, #0
 800d306:	d008      	beq.n	800d31a <_tx_thread_sleep+0x5a>
 800d308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d30c:	69bb      	ldr	r3, [r7, #24]
 800d30e:	f383 8810 	msr	PRIMASK, r3
}
 800d312:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d314:	2313      	movs	r3, #19
 800d316:	637b      	str	r3, [r7, #52]	; 0x34
 800d318:	e044      	b.n	800d3a4 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800d31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31c:	4a26      	ldr	r2, [pc, #152]	; (800d3b8 <_tx_thread_sleep+0xf8>)
 800d31e:	4293      	cmp	r3, r2
 800d320:	d108      	bne.n	800d334 <_tx_thread_sleep+0x74>
 800d322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d324:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	f383 8810 	msr	PRIMASK, r3
}
 800d32c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d32e:	2313      	movs	r3, #19
 800d330:	637b      	str	r3, [r7, #52]	; 0x34
 800d332:	e037      	b.n	800d3a4 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d108      	bne.n	800d34c <_tx_thread_sleep+0x8c>
 800d33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	f383 8810 	msr	PRIMASK, r3
}
 800d344:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800d346:	2300      	movs	r3, #0
 800d348:	637b      	str	r3, [r7, #52]	; 0x34
 800d34a:	e02b      	b.n	800d3a4 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800d34c:	4b1b      	ldr	r3, [pc, #108]	; (800d3bc <_tx_thread_sleep+0xfc>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d008      	beq.n	800d366 <_tx_thread_sleep+0xa6>
 800d354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d356:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f383 8810 	msr	PRIMASK, r3
}
 800d35e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800d360:	2313      	movs	r3, #19
 800d362:	637b      	str	r3, [r7, #52]	; 0x34
 800d364:	e01e      	b.n	800d3a4 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800d366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d368:	2204      	movs	r2, #4
 800d36a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36e:	2201      	movs	r2, #1
 800d370:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d374:	2200      	movs	r2, #0
 800d376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800d37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d380:	4b0e      	ldr	r3, [pc, #56]	; (800d3bc <_tx_thread_sleep+0xfc>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	3301      	adds	r3, #1
 800d386:	4a0d      	ldr	r2, [pc, #52]	; (800d3bc <_tx_thread_sleep+0xfc>)
 800d388:	6013      	str	r3, [r2, #0]
 800d38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	f383 8810 	msr	PRIMASK, r3
}
 800d394:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d398:	f000 f94c 	bl	800d634 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800d39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800d3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3738      	adds	r7, #56	; 0x38
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	20014884 	.word	0x20014884
 800d3b4:	20000088 	.word	0x20000088
 800d3b8:	200149cc 	.word	0x200149cc
 800d3bc:	2001491c 	.word	0x2001491c

0800d3c0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b089      	sub	sp, #36	; 0x24
 800d3c4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d3c6:	4b17      	ldr	r3, [pc, #92]	; (800d424 <_tx_thread_system_preempt_check+0x64>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d121      	bne.n	800d416 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800d3d2:	4b15      	ldr	r3, [pc, #84]	; (800d428 <_tx_thread_system_preempt_check+0x68>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800d3d8:	4b14      	ldr	r3, [pc, #80]	; (800d42c <_tx_thread_system_preempt_check+0x6c>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800d3de:	69ba      	ldr	r2, [r7, #24]
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d017      	beq.n	800d416 <_tx_thread_system_preempt_check+0x56>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d3e6:	4b12      	ldr	r3, [pc, #72]	; (800d430 <_tx_thread_system_preempt_check+0x70>)
 800d3e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ec:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d3ee:	f3ef 8305 	mrs	r3, IPSR
 800d3f2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d3f4:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d10c      	bne.n	800d414 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d3fa:	f3ef 8310 	mrs	r3, PRIMASK
 800d3fe:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d400:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_interrupt_posture();
 800d402:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d404:	b662      	cpsie	i
}
 800d406:	bf00      	nop
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f383 8810 	msr	PRIMASK, r3
}
 800d412:	bf00      	nop
}
 800d414:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800d416:	bf00      	nop
 800d418:	3724      	adds	r7, #36	; 0x24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	2001491c 	.word	0x2001491c
 800d428:	20014884 	.word	0x20014884
 800d42c:	20014888 	.word	0x20014888
 800d430:	e000ed04 	.word	0xe000ed04

0800d434 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b096      	sub	sp, #88	; 0x58
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d43c:	f3ef 8310 	mrs	r3, PRIMASK
 800d440:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800d442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800d444:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800d446:	b672      	cpsid	i
    return(int_posture);
 800d448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d44a:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d450:	2b00      	cmp	r3, #0
 800d452:	d005      	beq.n	800d460 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	334c      	adds	r3, #76	; 0x4c
 800d458:	4618      	mov	r0, r3
 800d45a:	f000 fbf5 	bl	800dc48 <_tx_timer_system_deactivate>
 800d45e:	e002      	b.n	800d466 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2200      	movs	r2, #0
 800d464:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d466:	4b6c      	ldr	r3, [pc, #432]	; (800d618 <_tx_thread_system_resume+0x1e4>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	3b01      	subs	r3, #1
 800d46c:	4a6a      	ldr	r2, [pc, #424]	; (800d618 <_tx_thread_system_resume+0x1e4>)
 800d46e:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d474:	2b00      	cmp	r3, #0
 800d476:	f040 8083 	bne.w	800d580 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47e:	2b00      	cmp	r3, #0
 800d480:	f000 8097 	beq.w	800d5b2 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d172      	bne.n	800d572 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2200      	movs	r2, #0
 800d490:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d496:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800d498:	4a60      	ldr	r2, [pc, #384]	; (800d61c <_tx_thread_system_resume+0x1e8>)
 800d49a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4a0:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800d4a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d154      	bne.n	800d552 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800d4a8:	495c      	ldr	r1, [pc, #368]	; (800d61c <_tx_thread_system_resume+0x1e8>)
 800d4aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800d4be:	2201      	movs	r2, #1
 800d4c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4c6:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800d4c8:	4b55      	ldr	r3, [pc, #340]	; (800d620 <_tx_thread_system_resume+0x1ec>)
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	4a53      	ldr	r2, [pc, #332]	; (800d620 <_tx_thread_system_resume+0x1ec>)
 800d4d2:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800d4d4:	4b53      	ldr	r3, [pc, #332]	; (800d624 <_tx_thread_system_resume+0x1f0>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d269      	bcs.n	800d5b2 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800d4de:	4a51      	ldr	r2, [pc, #324]	; (800d624 <_tx_thread_system_resume+0x1f0>)
 800d4e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4e2:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800d4e4:	4b50      	ldr	r3, [pc, #320]	; (800d628 <_tx_thread_system_resume+0x1f4>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800d4ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d103      	bne.n	800d4f8 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d4f0:	4a4d      	ldr	r2, [pc, #308]	; (800d628 <_tx_thread_system_resume+0x1f4>)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6013      	str	r3, [r2, #0]
 800d4f6:	e05c      	b.n	800d5b2 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800d4f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d257      	bcs.n	800d5b2 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800d502:	4a49      	ldr	r2, [pc, #292]	; (800d628 <_tx_thread_system_resume+0x1f4>)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6013      	str	r3, [r2, #0]
 800d508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d50a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50e:	f383 8810 	msr	PRIMASK, r3
}
 800d512:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d514:	4b40      	ldr	r3, [pc, #256]	; (800d618 <_tx_thread_system_resume+0x1e4>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800d51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d174      	bne.n	800d60a <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d520:	4b42      	ldr	r3, [pc, #264]	; (800d62c <_tx_thread_system_resume+0x1f8>)
 800d522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d526:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d528:	f3ef 8305 	mrs	r3, IPSR
 800d52c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800d52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 800d530:	2b00      	cmp	r3, #0
 800d532:	d10c      	bne.n	800d54e <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d534:	f3ef 8310 	mrs	r3, PRIMASK
 800d538:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800d53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800d53c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d53e:	b662      	cpsie	i
}
 800d540:	bf00      	nop
 800d542:	6a3b      	ldr	r3, [r7, #32]
 800d544:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	f383 8810 	msr	PRIMASK, r3
}
 800d54c:	bf00      	nop
}
 800d54e:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800d550:	e05b      	b.n	800d60a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800d552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d556:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800d558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d55a:	687a      	ldr	r2, [r7, #4]
 800d55c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800d55e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d568:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d56e:	621a      	str	r2, [r3, #32]
 800d570:	e01f      	b.n	800d5b2 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2200      	movs	r2, #0
 800d576:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2203      	movs	r2, #3
 800d57c:	631a      	str	r2, [r3, #48]	; 0x30
 800d57e:	e018      	b.n	800d5b2 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d584:	2b01      	cmp	r3, #1
 800d586:	d014      	beq.n	800d5b2 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	d010      	beq.n	800d5b2 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d594:	2b00      	cmp	r3, #0
 800d596:	d106      	bne.n	800d5a6 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	631a      	str	r2, [r3, #48]	; 0x30
 800d5a4:	e005      	b.n	800d5b2 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2203      	movs	r2, #3
 800d5b0:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d5b2:	4b1f      	ldr	r3, [pc, #124]	; (800d630 <_tx_thread_system_resume+0x1fc>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5ba:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5bc:	69bb      	ldr	r3, [r7, #24]
 800d5be:	f383 8810 	msr	PRIMASK, r3
}
 800d5c2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d5c4:	4b18      	ldr	r3, [pc, #96]	; (800d628 <_tx_thread_system_resume+0x1f4>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d020      	beq.n	800d610 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d5ce:	4b12      	ldr	r3, [pc, #72]	; (800d618 <_tx_thread_system_resume+0x1e4>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800d5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d11a      	bne.n	800d610 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d5da:	4b14      	ldr	r3, [pc, #80]	; (800d62c <_tx_thread_system_resume+0x1f8>)
 800d5dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5e0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d5e2:	f3ef 8305 	mrs	r3, IPSR
 800d5e6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d5e8:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d10f      	bne.n	800d60e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d5ee:	f3ef 8310 	mrs	r3, PRIMASK
 800d5f2:	613b      	str	r3, [r7, #16]
    return(posture);
 800d5f4:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800d5f6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d5f8:	b662      	cpsie	i
}
 800d5fa:	bf00      	nop
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	f383 8810 	msr	PRIMASK, r3
}
 800d606:	bf00      	nop
}
 800d608:	e001      	b.n	800d60e <_tx_thread_system_resume+0x1da>
                                return;
 800d60a:	bf00      	nop
 800d60c:	e000      	b.n	800d610 <_tx_thread_system_resume+0x1dc>
 800d60e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800d610:	3758      	adds	r7, #88	; 0x58
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	2001491c 	.word	0x2001491c
 800d61c:	2001489c 	.word	0x2001489c
 800d620:	20014894 	.word	0x20014894
 800d624:	20014898 	.word	0x20014898
 800d628:	20014888 	.word	0x20014888
 800d62c:	e000ed04 	.word	0xe000ed04
 800d630:	20014884 	.word	0x20014884

0800d634 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b09e      	sub	sp, #120	; 0x78
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d63c:	4b81      	ldr	r3, [pc, #516]	; (800d844 <_tx_thread_system_suspend+0x210>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d642:	f3ef 8310 	mrs	r3, PRIMASK
 800d646:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800d648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800d64a:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800d64c:	b672      	cpsid	i
    return(int_posture);
 800d64e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d650:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d656:	429a      	cmp	r2, r3
 800d658:	d112      	bne.n	800d680 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d65e:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800d660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d662:	2b00      	cmp	r3, #0
 800d664:	d008      	beq.n	800d678 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800d666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d66c:	d004      	beq.n	800d678 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	334c      	adds	r3, #76	; 0x4c
 800d672:	4618      	mov	r0, r3
 800d674:	f000 fa86 	bl	800db84 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	69db      	ldr	r3, [r3, #28]
 800d67c:	4a72      	ldr	r2, [pc, #456]	; (800d848 <_tx_thread_system_suspend+0x214>)
 800d67e:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d680:	4b72      	ldr	r3, [pc, #456]	; (800d84c <_tx_thread_system_suspend+0x218>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	3b01      	subs	r3, #1
 800d686:	4a71      	ldr	r2, [pc, #452]	; (800d84c <_tx_thread_system_suspend+0x218>)
 800d688:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d68e:	2b01      	cmp	r3, #1
 800d690:	f040 80a6 	bne.w	800d7e0 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d69e:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6a1b      	ldr	r3, [r3, #32]
 800d6a4:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800d6a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d015      	beq.n	800d6da <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b2:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800d6b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6b8:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800d6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d6be:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800d6c0:	4a63      	ldr	r2, [pc, #396]	; (800d850 <_tx_thread_system_suspend+0x21c>)
 800d6c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d157      	bne.n	800d77e <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800d6ce:	4960      	ldr	r1, [pc, #384]	; (800d850 <_tx_thread_system_suspend+0x21c>)
 800d6d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d6d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d6d8:	e051      	b.n	800d77e <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800d6da:	4a5d      	ldr	r2, [pc, #372]	; (800d850 <_tx_thread_system_suspend+0x21c>)
 800d6dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6de:	2100      	movs	r1, #0
 800d6e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d6ec:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800d6ee:	4b59      	ldr	r3, [pc, #356]	; (800d854 <_tx_thread_system_suspend+0x220>)
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6f4:	43db      	mvns	r3, r3
 800d6f6:	4013      	ands	r3, r2
 800d6f8:	4a56      	ldr	r2, [pc, #344]	; (800d854 <_tx_thread_system_suspend+0x220>)
 800d6fa:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800d700:	4b54      	ldr	r3, [pc, #336]	; (800d854 <_tx_thread_system_suspend+0x220>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800d706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d12b      	bne.n	800d764 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d70c:	4b52      	ldr	r3, [pc, #328]	; (800d858 <_tx_thread_system_suspend+0x224>)
 800d70e:	2220      	movs	r2, #32
 800d710:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800d712:	4b52      	ldr	r3, [pc, #328]	; (800d85c <_tx_thread_system_suspend+0x228>)
 800d714:	2200      	movs	r2, #0
 800d716:	601a      	str	r2, [r3, #0]
 800d718:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d71a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d71c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d71e:	f383 8810 	msr	PRIMASK, r3
}
 800d722:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d724:	4b49      	ldr	r3, [pc, #292]	; (800d84c <_tx_thread_system_suspend+0x218>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800d72a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	f040 8081 	bne.w	800d834 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d732:	4b4b      	ldr	r3, [pc, #300]	; (800d860 <_tx_thread_system_suspend+0x22c>)
 800d734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d738:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d73a:	f3ef 8305 	mrs	r3, IPSR
 800d73e:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800d740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800d742:	2b00      	cmp	r3, #0
 800d744:	d10c      	bne.n	800d760 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d746:	f3ef 8310 	mrs	r3, PRIMASK
 800d74a:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800d74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800d74e:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d750:	b662      	cpsie	i
}
 800d752:	bf00      	nop
 800d754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d756:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d75a:	f383 8810 	msr	PRIMASK, r3
}
 800d75e:	bf00      	nop
}
 800d760:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800d762:	e067      	b.n	800d834 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800d764:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d766:	fa93 f3a3 	rbit	r3, r3
 800d76a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d76c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d76e:	fab3 f383 	clz	r3, r3
 800d772:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800d774:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d778:	4413      	add	r3, r2
 800d77a:	4a37      	ldr	r2, [pc, #220]	; (800d858 <_tx_thread_system_suspend+0x224>)
 800d77c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800d77e:	4b37      	ldr	r3, [pc, #220]	; (800d85c <_tx_thread_system_suspend+0x228>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	429a      	cmp	r2, r3
 800d786:	d12b      	bne.n	800d7e0 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d788:	4b33      	ldr	r3, [pc, #204]	; (800d858 <_tx_thread_system_suspend+0x224>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4a30      	ldr	r2, [pc, #192]	; (800d850 <_tx_thread_system_suspend+0x21c>)
 800d78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d792:	4a32      	ldr	r2, [pc, #200]	; (800d85c <_tx_thread_system_suspend+0x228>)
 800d794:	6013      	str	r3, [r2, #0]
 800d796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d798:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79c:	f383 8810 	msr	PRIMASK, r3
}
 800d7a0:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d7a2:	4b2a      	ldr	r3, [pc, #168]	; (800d84c <_tx_thread_system_suspend+0x218>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800d7a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d144      	bne.n	800d838 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d7ae:	4b2c      	ldr	r3, [pc, #176]	; (800d860 <_tx_thread_system_suspend+0x22c>)
 800d7b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7b4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d7b6:	f3ef 8305 	mrs	r3, IPSR
 800d7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800d7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10c      	bne.n	800d7dc <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d7c2:	f3ef 8310 	mrs	r3, PRIMASK
 800d7c6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800d7ca:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d7cc:	b662      	cpsie	i
}
 800d7ce:	bf00      	nop
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7d4:	6a3b      	ldr	r3, [r7, #32]
 800d7d6:	f383 8810 	msr	PRIMASK, r3
}
 800d7da:	bf00      	nop
}
 800d7dc:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800d7de:	e02b      	b.n	800d838 <_tx_thread_system_suspend+0x204>
 800d7e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7e2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	f383 8810 	msr	PRIMASK, r3
}
 800d7ea:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d7ec:	4b1b      	ldr	r3, [pc, #108]	; (800d85c <_tx_thread_system_suspend+0x228>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d022      	beq.n	800d83c <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d7f6:	4b15      	ldr	r3, [pc, #84]	; (800d84c <_tx_thread_system_suspend+0x218>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800d7fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d11c      	bne.n	800d83c <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d802:	4b17      	ldr	r3, [pc, #92]	; (800d860 <_tx_thread_system_suspend+0x22c>)
 800d804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d808:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d80a:	f3ef 8305 	mrs	r3, IPSR
 800d80e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d810:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800d812:	2b00      	cmp	r3, #0
 800d814:	d10c      	bne.n	800d830 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d816:	f3ef 8310 	mrs	r3, PRIMASK
 800d81a:	617b      	str	r3, [r7, #20]
    return(posture);
 800d81c:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800d81e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d820:	b662      	cpsie	i
}
 800d822:	bf00      	nop
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f383 8810 	msr	PRIMASK, r3
}
 800d82e:	bf00      	nop
}
 800d830:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800d832:	e003      	b.n	800d83c <_tx_thread_system_suspend+0x208>
                return;
 800d834:	bf00      	nop
 800d836:	e002      	b.n	800d83e <_tx_thread_system_suspend+0x20a>
            return;
 800d838:	bf00      	nop
 800d83a:	e000      	b.n	800d83e <_tx_thread_system_suspend+0x20a>
    return;
 800d83c:	bf00      	nop
}
 800d83e:	3778      	adds	r7, #120	; 0x78
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	20014884 	.word	0x20014884
 800d848:	20014e88 	.word	0x20014e88
 800d84c:	2001491c 	.word	0x2001491c
 800d850:	2001489c 	.word	0x2001489c
 800d854:	20014894 	.word	0x20014894
 800d858:	20014898 	.word	0x20014898
 800d85c:	20014888 	.word	0x20014888
 800d860:	e000ed04 	.word	0xe000ed04

0800d864 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800d864:	b480      	push	{r7}
 800d866:	b087      	sub	sp, #28
 800d868:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d86a:	4b21      	ldr	r3, [pc, #132]	; (800d8f0 <_tx_thread_time_slice+0x8c>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d870:	f3ef 8310 	mrs	r3, PRIMASK
 800d874:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d876:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800d878:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d87a:	b672      	cpsid	i
    return(int_posture);
 800d87c:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800d87e:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d880:	4b1c      	ldr	r3, [pc, #112]	; (800d8f4 <_tx_thread_time_slice+0x90>)
 800d882:	2200      	movs	r2, #0
 800d884:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d024      	beq.n	800d8d6 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d890:	2b00      	cmp	r3, #0
 800d892:	d120      	bne.n	800d8d6 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	69da      	ldr	r2, [r3, #28]
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	699b      	ldr	r3, [r3, #24]
 800d8a0:	4a15      	ldr	r2, [pc, #84]	; (800d8f8 <_tx_thread_time_slice+0x94>)
 800d8a2:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	6a1b      	ldr	r3, [r3, #32]
 800d8a8:	697a      	ldr	r2, [r7, #20]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d013      	beq.n	800d8d6 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d10d      	bne.n	800d8d6 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8be:	697a      	ldr	r2, [r7, #20]
 800d8c0:	6a12      	ldr	r2, [r2, #32]
 800d8c2:	490e      	ldr	r1, [pc, #56]	; (800d8fc <_tx_thread_time_slice+0x98>)
 800d8c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d8c8:	4b0d      	ldr	r3, [pc, #52]	; (800d900 <_tx_thread_time_slice+0x9c>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a0b      	ldr	r2, [pc, #44]	; (800d8fc <_tx_thread_time_slice+0x98>)
 800d8ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8d2:	4a0c      	ldr	r2, [pc, #48]	; (800d904 <_tx_thread_time_slice+0xa0>)
 800d8d4:	6013      	str	r3, [r2, #0]
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f383 8810 	msr	PRIMASK, r3
}
 800d8e0:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800d8e2:	bf00      	nop
 800d8e4:	371c      	adds	r7, #28
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop
 800d8f0:	20014884 	.word	0x20014884
 800d8f4:	2001492c 	.word	0x2001492c
 800d8f8:	20014e88 	.word	0x20014e88
 800d8fc:	2001489c 	.word	0x2001489c
 800d900:	20014898 	.word	0x20014898
 800d904:	20014888 	.word	0x20014888

0800d908 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b08a      	sub	sp, #40	; 0x28
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d914:	f3ef 8310 	mrs	r3, PRIMASK
 800d918:	617b      	str	r3, [r7, #20]
    return(posture);
 800d91a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d91c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d91e:	b672      	cpsid	i
    return(int_posture);
 800d920:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800d922:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800d924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d928:	2b04      	cmp	r3, #4
 800d92a:	d10e      	bne.n	800d94a <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800d92c:	4b13      	ldr	r3, [pc, #76]	; (800d97c <_tx_thread_timeout+0x74>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	3301      	adds	r3, #1
 800d932:	4a12      	ldr	r2, [pc, #72]	; (800d97c <_tx_thread_timeout+0x74>)
 800d934:	6013      	str	r3, [r2, #0]
 800d936:	6a3b      	ldr	r3, [r7, #32]
 800d938:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f383 8810 	msr	PRIMASK, r3
}
 800d940:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d942:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d944:	f7ff fd76 	bl	800d434 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800d948:	e013      	b.n	800d972 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800d94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d94e:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800d950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d952:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d956:	61bb      	str	r3, [r7, #24]
 800d958:	6a3b      	ldr	r3, [r7, #32]
 800d95a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	f383 8810 	msr	PRIMASK, r3
}
 800d962:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d003      	beq.n	800d972 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	69b9      	ldr	r1, [r7, #24]
 800d96e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d970:	4798      	blx	r3
}
 800d972:	bf00      	nop
 800d974:	3728      	adds	r7, #40	; 0x28
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	2001491c 	.word	0x2001491c

0800d980 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b08a      	sub	sp, #40	; 0x28
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	607a      	str	r2, [r7, #4]
 800d98c:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800d98e:	222c      	movs	r2, #44	; 0x2c
 800d990:	2100      	movs	r1, #0
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f001 f94a 	bl	800ec2c <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	68ba      	ldr	r2, [r7, #8]
 800d99c:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9a2:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9a8:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	683a      	ldr	r2, [r7, #0]
 800d9b4:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d9b6:	f3ef 8310 	mrs	r3, PRIMASK
 800d9ba:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d9bc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d9be:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d9c0:	b672      	cpsid	i
    return(int_posture);
 800d9c2:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800d9c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	4a1c      	ldr	r2, [pc, #112]	; (800da3c <_tx_timer_create+0xbc>)
 800d9ca:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800d9cc:	4b1c      	ldr	r3, [pc, #112]	; (800da40 <_tx_timer_create+0xc0>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d109      	bne.n	800d9e8 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800d9d4:	4a1b      	ldr	r2, [pc, #108]	; (800da44 <_tx_timer_create+0xc4>)
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	68fa      	ldr	r2, [r7, #12]
 800d9e4:	629a      	str	r2, [r3, #40]	; 0x28
 800d9e6:	e011      	b.n	800da0c <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800d9e8:	4b16      	ldr	r3, [pc, #88]	; (800da44 <_tx_timer_create+0xc4>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800d9ee:	6a3b      	ldr	r3, [r7, #32]
 800d9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9f2:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800d9f4:	6a3b      	ldr	r3, [r7, #32]
 800d9f6:	68fa      	ldr	r2, [r7, #12]
 800d9f8:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	69fa      	ldr	r2, [r7, #28]
 800da04:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	6a3a      	ldr	r2, [r7, #32]
 800da0a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800da0c:	4b0c      	ldr	r3, [pc, #48]	; (800da40 <_tx_timer_create+0xc0>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	3301      	adds	r3, #1
 800da12:	4a0b      	ldr	r2, [pc, #44]	; (800da40 <_tx_timer_create+0xc0>)
 800da14:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800da16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d104      	bne.n	800da26 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	3308      	adds	r3, #8
 800da20:	4618      	mov	r0, r3
 800da22:	f000 f8af 	bl	800db84 <_tx_timer_system_activate>
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	f383 8810 	msr	PRIMASK, r3
}
 800da30:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800da32:	2300      	movs	r3, #0
}
 800da34:	4618      	mov	r0, r3
 800da36:	3728      	adds	r7, #40	; 0x28
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	4154494d 	.word	0x4154494d
 800da40:	200149c4 	.word	0x200149c4
 800da44:	200149c0 	.word	0x200149c0

0800da48 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da4e:	f3ef 8310 	mrs	r3, PRIMASK
 800da52:	607b      	str	r3, [r7, #4]
    return(posture);
 800da54:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800da56:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800da58:	b672      	cpsid	i
    return(int_posture);
 800da5a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800da5c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800da5e:	4b09      	ldr	r3, [pc, #36]	; (800da84 <_tx_timer_expiration_process+0x3c>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	3301      	adds	r3, #1
 800da64:	4a07      	ldr	r2, [pc, #28]	; (800da84 <_tx_timer_expiration_process+0x3c>)
 800da66:	6013      	str	r3, [r2, #0]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	f383 8810 	msr	PRIMASK, r3
}
 800da72:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800da74:	4804      	ldr	r0, [pc, #16]	; (800da88 <_tx_timer_expiration_process+0x40>)
 800da76:	f7ff fcdd 	bl	800d434 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800da7a:	bf00      	nop
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	2001491c 	.word	0x2001491c
 800da88:	200149cc 	.word	0x200149cc

0800da8c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800da8c:	b590      	push	{r4, r7, lr}
 800da8e:	b089      	sub	sp, #36	; 0x24
 800da90:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800da92:	4b28      	ldr	r3, [pc, #160]	; (800db34 <_tx_timer_initialize+0xa8>)
 800da94:	2200      	movs	r2, #0
 800da96:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800da98:	4b27      	ldr	r3, [pc, #156]	; (800db38 <_tx_timer_initialize+0xac>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800da9e:	4b27      	ldr	r3, [pc, #156]	; (800db3c <_tx_timer_initialize+0xb0>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800daa4:	4b26      	ldr	r3, [pc, #152]	; (800db40 <_tx_timer_initialize+0xb4>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800daaa:	4b26      	ldr	r3, [pc, #152]	; (800db44 <_tx_timer_initialize+0xb8>)
 800daac:	2200      	movs	r2, #0
 800daae:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800dab0:	2280      	movs	r2, #128	; 0x80
 800dab2:	2100      	movs	r1, #0
 800dab4:	4824      	ldr	r0, [pc, #144]	; (800db48 <_tx_timer_initialize+0xbc>)
 800dab6:	f001 f8b9 	bl	800ec2c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800daba:	4b24      	ldr	r3, [pc, #144]	; (800db4c <_tx_timer_initialize+0xc0>)
 800dabc:	4a22      	ldr	r2, [pc, #136]	; (800db48 <_tx_timer_initialize+0xbc>)
 800dabe:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800dac0:	4b23      	ldr	r3, [pc, #140]	; (800db50 <_tx_timer_initialize+0xc4>)
 800dac2:	4a21      	ldr	r2, [pc, #132]	; (800db48 <_tx_timer_initialize+0xbc>)
 800dac4:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800dac6:	4b23      	ldr	r3, [pc, #140]	; (800db54 <_tx_timer_initialize+0xc8>)
 800dac8:	4a23      	ldr	r2, [pc, #140]	; (800db58 <_tx_timer_initialize+0xcc>)
 800daca:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800dacc:	4b21      	ldr	r3, [pc, #132]	; (800db54 <_tx_timer_initialize+0xc8>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	3304      	adds	r3, #4
 800dad2:	4a20      	ldr	r2, [pc, #128]	; (800db54 <_tx_timer_initialize+0xc8>)
 800dad4:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800dad6:	4b21      	ldr	r3, [pc, #132]	; (800db5c <_tx_timer_initialize+0xd0>)
 800dad8:	4a21      	ldr	r2, [pc, #132]	; (800db60 <_tx_timer_initialize+0xd4>)
 800dada:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800dadc:	4b21      	ldr	r3, [pc, #132]	; (800db64 <_tx_timer_initialize+0xd8>)
 800dade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dae2:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800dae4:	4b20      	ldr	r3, [pc, #128]	; (800db68 <_tx_timer_initialize+0xdc>)
 800dae6:	2200      	movs	r2, #0
 800dae8:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800daea:	4b1c      	ldr	r3, [pc, #112]	; (800db5c <_tx_timer_initialize+0xd0>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a1d      	ldr	r2, [pc, #116]	; (800db64 <_tx_timer_initialize+0xd8>)
 800daf0:	6812      	ldr	r2, [r2, #0]
 800daf2:	491d      	ldr	r1, [pc, #116]	; (800db68 <_tx_timer_initialize+0xdc>)
 800daf4:	6809      	ldr	r1, [r1, #0]
 800daf6:	481c      	ldr	r0, [pc, #112]	; (800db68 <_tx_timer_initialize+0xdc>)
 800daf8:	6800      	ldr	r0, [r0, #0]
 800dafa:	2400      	movs	r4, #0
 800dafc:	9405      	str	r4, [sp, #20]
 800dafe:	2400      	movs	r4, #0
 800db00:	9404      	str	r4, [sp, #16]
 800db02:	9003      	str	r0, [sp, #12]
 800db04:	9102      	str	r1, [sp, #8]
 800db06:	9201      	str	r2, [sp, #4]
 800db08:	9300      	str	r3, [sp, #0]
 800db0a:	4b18      	ldr	r3, [pc, #96]	; (800db6c <_tx_timer_initialize+0xe0>)
 800db0c:	4a18      	ldr	r2, [pc, #96]	; (800db70 <_tx_timer_initialize+0xe4>)
 800db0e:	4919      	ldr	r1, [pc, #100]	; (800db74 <_tx_timer_initialize+0xe8>)
 800db10:	4819      	ldr	r0, [pc, #100]	; (800db78 <_tx_timer_initialize+0xec>)
 800db12:	f7ff f8ff 	bl	800cd14 <_tx_thread_create>
 800db16:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d1e5      	bne.n	800daea <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800db1e:	4b17      	ldr	r3, [pc, #92]	; (800db7c <_tx_timer_initialize+0xf0>)
 800db20:	2200      	movs	r2, #0
 800db22:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800db24:	4b16      	ldr	r3, [pc, #88]	; (800db80 <_tx_timer_initialize+0xf4>)
 800db26:	2200      	movs	r2, #0
 800db28:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800db2a:	bf00      	nop
 800db2c:	370c      	adds	r7, #12
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd90      	pop	{r4, r7, pc}
 800db32:	bf00      	nop
 800db34:	20014928 	.word	0x20014928
 800db38:	20014e88 	.word	0x20014e88
 800db3c:	2001492c 	.word	0x2001492c
 800db40:	200149bc 	.word	0x200149bc
 800db44:	200149c8 	.word	0x200149c8
 800db48:	20014930 	.word	0x20014930
 800db4c:	200149b0 	.word	0x200149b0
 800db50:	200149b8 	.word	0x200149b8
 800db54:	200149b4 	.word	0x200149b4
 800db58:	200149ac 	.word	0x200149ac
 800db5c:	20014a7c 	.word	0x20014a7c
 800db60:	20014a88 	.word	0x20014a88
 800db64:	20014a80 	.word	0x20014a80
 800db68:	20014a84 	.word	0x20014a84
 800db6c:	4154494d 	.word	0x4154494d
 800db70:	0800dcb9 	.word	0x0800dcb9
 800db74:	0800f8d8 	.word	0x0800f8d8
 800db78:	200149cc 	.word	0x200149cc
 800db7c:	200149c0 	.word	0x200149c0
 800db80:	200149c4 	.word	0x200149c4

0800db84 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800db84:	b480      	push	{r7}
 800db86:	b089      	sub	sp, #36	; 0x24
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d04a      	beq.n	800dc2e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db9e:	d046      	beq.n	800dc2e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	699b      	ldr	r3, [r3, #24]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d142      	bne.n	800dc2e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	2b20      	cmp	r3, #32
 800dbac:	d902      	bls.n	800dbb4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800dbae:	231f      	movs	r3, #31
 800dbb0:	61bb      	str	r3, [r7, #24]
 800dbb2:	e002      	b.n	800dbba <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	3b01      	subs	r3, #1
 800dbb8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800dbba:	4b20      	ldr	r3, [pc, #128]	; (800dc3c <_tx_timer_system_activate+0xb8>)
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	009b      	lsls	r3, r3, #2
 800dbc2:	4413      	add	r3, r2
 800dbc4:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800dbc6:	4b1e      	ldr	r3, [pc, #120]	; (800dc40 <_tx_timer_system_activate+0xbc>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	69fa      	ldr	r2, [r7, #28]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d30b      	bcc.n	800dbe8 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800dbd0:	4b1b      	ldr	r3, [pc, #108]	; (800dc40 <_tx_timer_system_activate+0xbc>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	69fa      	ldr	r2, [r7, #28]
 800dbd6:	1ad3      	subs	r3, r2, r3
 800dbd8:	109b      	asrs	r3, r3, #2
 800dbda:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800dbdc:	4b19      	ldr	r3, [pc, #100]	; (800dc44 <_tx_timer_system_activate+0xc0>)
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	4413      	add	r3, r2
 800dbe6:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d109      	bne.n	800dc04 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	687a      	ldr	r2, [r7, #4]
 800dbfa:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	601a      	str	r2, [r3, #0]
 800dc02:	e011      	b.n	800dc28 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	695b      	ldr	r3, [r3, #20]
 800dc0e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	68fa      	ldr	r2, [r7, #12]
 800dc20:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	68ba      	ldr	r2, [r7, #8]
 800dc26:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	69fa      	ldr	r2, [r7, #28]
 800dc2c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800dc2e:	bf00      	nop
 800dc30:	3724      	adds	r7, #36	; 0x24
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	200149b8 	.word	0x200149b8
 800dc40:	200149b4 	.word	0x200149b4
 800dc44:	200149b0 	.word	0x200149b0

0800dc48 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b087      	sub	sp, #28
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	699b      	ldr	r3, [r3, #24]
 800dc54:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d026      	beq.n	800dcaa <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	691b      	ldr	r3, [r3, #16]
 800dc60:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d108      	bne.n	800dc7c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d117      	bne.n	800dca4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	2200      	movs	r2, #0
 800dc78:	601a      	str	r2, [r3, #0]
 800dc7a:	e013      	b.n	800dca4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	695b      	ldr	r3, [r3, #20]
 800dc80:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	68fa      	ldr	r2, [r7, #12]
 800dc86:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	693a      	ldr	r2, [r7, #16]
 800dc8c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d105      	bne.n	800dca4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	697a      	ldr	r2, [r7, #20]
 800dc9c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	693a      	ldr	r2, [r7, #16]
 800dca2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	619a      	str	r2, [r3, #24]
    }
}
 800dcaa:	bf00      	nop
 800dcac:	371c      	adds	r7, #28
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr
	...

0800dcb8 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b098      	sub	sp, #96	; 0x60
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	4a73      	ldr	r2, [pc, #460]	; (800de94 <_tx_timer_thread_entry+0x1dc>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	f040 80de 	bne.w	800de8a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dcce:	f3ef 8310 	mrs	r3, PRIMASK
 800dcd2:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800dcd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800dcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800dcd8:	b672      	cpsid	i
    return(int_posture);
 800dcda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800dcdc:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800dcde:	4b6e      	ldr	r3, [pc, #440]	; (800de98 <_tx_timer_thread_entry+0x1e0>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d003      	beq.n	800dcf4 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f107 020c 	add.w	r2, r7, #12
 800dcf2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800dcf4:	4b68      	ldr	r3, [pc, #416]	; (800de98 <_tx_timer_thread_entry+0x1e0>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800dcfc:	4b66      	ldr	r3, [pc, #408]	; (800de98 <_tx_timer_thread_entry+0x1e0>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	3304      	adds	r3, #4
 800dd02:	4a65      	ldr	r2, [pc, #404]	; (800de98 <_tx_timer_thread_entry+0x1e0>)
 800dd04:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800dd06:	4b64      	ldr	r3, [pc, #400]	; (800de98 <_tx_timer_thread_entry+0x1e0>)
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	4b64      	ldr	r3, [pc, #400]	; (800de9c <_tx_timer_thread_entry+0x1e4>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d103      	bne.n	800dd1a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800dd12:	4b63      	ldr	r3, [pc, #396]	; (800dea0 <_tx_timer_thread_entry+0x1e8>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4a60      	ldr	r2, [pc, #384]	; (800de98 <_tx_timer_thread_entry+0x1e0>)
 800dd18:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800dd1a:	4b62      	ldr	r3, [pc, #392]	; (800dea4 <_tx_timer_thread_entry+0x1ec>)
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	601a      	str	r2, [r3, #0]
 800dd20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd22:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd26:	f383 8810 	msr	PRIMASK, r3
}
 800dd2a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dd2c:	f3ef 8310 	mrs	r3, PRIMASK
 800dd30:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800dd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800dd34:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800dd36:	b672      	cpsid	i
    return(int_posture);
 800dd38:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800dd3a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800dd3c:	e07f      	b.n	800de3e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	691b      	ldr	r3, [r3, #16]
 800dd46:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800dd4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d102      	bne.n	800dd5a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800dd54:	2300      	movs	r3, #0
 800dd56:	60fb      	str	r3, [r7, #12]
 800dd58:	e00e      	b.n	800dd78 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800dd5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd5c:	695b      	ldr	r3, [r3, #20]
 800dd5e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800dd60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd64:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800dd66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd6a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800dd6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd6e:	f107 020c 	add.w	r2, r7, #12
 800dd72:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800dd74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd76:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800dd78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b20      	cmp	r3, #32
 800dd7e:	d911      	bls.n	800dda4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800dd80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800dd88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd8a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800dd90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd92:	f107 0208 	add.w	r2, r7, #8
 800dd96:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800dd98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd9c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800dd9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda0:	60bb      	str	r3, [r7, #8]
 800dda2:	e01a      	b.n	800ddda <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800dda4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800ddaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800ddb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddb2:	685a      	ldr	r2, [r3, #4]
 800ddb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddb6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800ddb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d009      	beq.n	800ddd4 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ddc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddc2:	f107 0208 	add.w	r2, r7, #8
 800ddc6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800ddc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ddcc:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800ddce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddd0:	60bb      	str	r3, [r7, #8]
 800ddd2:	e002      	b.n	800ddda <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800ddd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800ddda:	4a33      	ldr	r2, [pc, #204]	; (800dea8 <_tx_timer_thread_entry+0x1f0>)
 800dddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddde:	6013      	str	r3, [r2, #0]
 800dde0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dde2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde6:	f383 8810 	msr	PRIMASK, r3
}
 800ddea:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800ddec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d002      	beq.n	800ddf8 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800ddf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddf4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ddf6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ddf8:	f3ef 8310 	mrs	r3, PRIMASK
 800ddfc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800ddfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800de00:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800de02:	b672      	cpsid	i
    return(int_posture);
 800de04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800de06:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800de08:	4b27      	ldr	r3, [pc, #156]	; (800dea8 <_tx_timer_thread_entry+0x1f0>)
 800de0a:	2200      	movs	r2, #0
 800de0c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de12:	429a      	cmp	r2, r3
 800de14:	d105      	bne.n	800de22 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800de16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de18:	2200      	movs	r2, #0
 800de1a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800de1c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800de1e:	f7ff feb1 	bl	800db84 <_tx_timer_system_activate>
 800de22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de24:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	f383 8810 	msr	PRIMASK, r3
}
 800de2c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800de2e:	f3ef 8310 	mrs	r3, PRIMASK
 800de32:	623b      	str	r3, [r7, #32]
    return(posture);
 800de34:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800de36:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800de38:	b672      	cpsid	i
    return(int_posture);
 800de3a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800de3c:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2b00      	cmp	r3, #0
 800de42:	f47f af7c 	bne.w	800dd3e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800de46:	4b17      	ldr	r3, [pc, #92]	; (800dea4 <_tx_timer_thread_entry+0x1ec>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d116      	bne.n	800de7c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800de4e:	4b17      	ldr	r3, [pc, #92]	; (800deac <_tx_timer_thread_entry+0x1f4>)
 800de50:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800de52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de54:	2203      	movs	r2, #3
 800de56:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800de58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de5a:	2201      	movs	r2, #1
 800de5c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800de5e:	4b14      	ldr	r3, [pc, #80]	; (800deb0 <_tx_timer_thread_entry+0x1f8>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	3301      	adds	r3, #1
 800de64:	4a12      	ldr	r2, [pc, #72]	; (800deb0 <_tx_timer_thread_entry+0x1f8>)
 800de66:	6013      	str	r3, [r2, #0]
 800de68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de6a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	f383 8810 	msr	PRIMASK, r3
}
 800de72:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800de74:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800de76:	f7ff fbdd 	bl	800d634 <_tx_thread_system_suspend>
 800de7a:	e728      	b.n	800dcce <_tx_timer_thread_entry+0x16>
 800de7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de7e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	f383 8810 	msr	PRIMASK, r3
}
 800de86:	bf00      	nop
            TX_DISABLE
 800de88:	e721      	b.n	800dcce <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800de8a:	bf00      	nop
 800de8c:	3760      	adds	r7, #96	; 0x60
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	4154494d 	.word	0x4154494d
 800de98:	200149b8 	.word	0x200149b8
 800de9c:	200149b4 	.word	0x200149b4
 800dea0:	200149b0 	.word	0x200149b0
 800dea4:	200149bc 	.word	0x200149bc
 800dea8:	200149c8 	.word	0x200149c8
 800deac:	200149cc 	.word	0x200149cc
 800deb0:	2001491c 	.word	0x2001491c

0800deb4 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b08a      	sub	sp, #40	; 0x28
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
 800dec0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800dec2:	2300      	movs	r3, #0
 800dec4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d102      	bne.n	800ded2 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800decc:	2302      	movs	r3, #2
 800dece:	627b      	str	r3, [r7, #36]	; 0x24
 800ded0:	e029      	b.n	800df26 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4a2d      	ldr	r2, [pc, #180]	; (800df8c <_txe_byte_allocate+0xd8>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d002      	beq.n	800dee2 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800dedc:	2302      	movs	r3, #2
 800dede:	627b      	str	r3, [r7, #36]	; 0x24
 800dee0:	e021      	b.n	800df26 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d102      	bne.n	800deee <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800dee8:	2303      	movs	r3, #3
 800deea:	627b      	str	r3, [r7, #36]	; 0x24
 800deec:	e01b      	b.n	800df26 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d102      	bne.n	800defa <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800def4:	2305      	movs	r3, #5
 800def6:	627b      	str	r3, [r7, #36]	; 0x24
 800def8:	e015      	b.n	800df26 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	69db      	ldr	r3, [r3, #28]
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	429a      	cmp	r2, r3
 800df02:	d902      	bls.n	800df0a <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800df04:	2305      	movs	r3, #5
 800df06:	627b      	str	r3, [r7, #36]	; 0x24
 800df08:	e00d      	b.n	800df26 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d00a      	beq.n	800df26 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800df10:	f3ef 8305 	mrs	r3, IPSR
 800df14:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800df16:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800df18:	4b1d      	ldr	r3, [pc, #116]	; (800df90 <_txe_byte_allocate+0xdc>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4313      	orrs	r3, r2
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d001      	beq.n	800df26 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800df22:	2304      	movs	r3, #4
 800df24:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800df26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d108      	bne.n	800df3e <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800df2c:	4b19      	ldr	r3, [pc, #100]	; (800df94 <_txe_byte_allocate+0xe0>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800df32:	6a3b      	ldr	r3, [r7, #32]
 800df34:	4a18      	ldr	r2, [pc, #96]	; (800df98 <_txe_byte_allocate+0xe4>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d101      	bne.n	800df3e <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800df3a:	2313      	movs	r3, #19
 800df3c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df40:	2b00      	cmp	r3, #0
 800df42:	d114      	bne.n	800df6e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800df44:	f3ef 8305 	mrs	r3, IPSR
 800df48:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800df4a:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800df4c:	4b10      	ldr	r3, [pc, #64]	; (800df90 <_txe_byte_allocate+0xdc>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4313      	orrs	r3, r2
 800df52:	2b00      	cmp	r3, #0
 800df54:	d00b      	beq.n	800df6e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800df56:	f3ef 8305 	mrs	r3, IPSR
 800df5a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800df5c:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800df5e:	4b0c      	ldr	r3, [pc, #48]	; (800df90 <_txe_byte_allocate+0xdc>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4313      	orrs	r3, r2
 800df64:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800df68:	d201      	bcs.n	800df6e <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800df6a:	2313      	movs	r3, #19
 800df6c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800df6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df70:	2b00      	cmp	r3, #0
 800df72:	d106      	bne.n	800df82 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	68b9      	ldr	r1, [r7, #8]
 800df7a:	68f8      	ldr	r0, [r7, #12]
 800df7c:	f7fd f9f0 	bl	800b360 <_tx_byte_allocate>
 800df80:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df84:	4618      	mov	r0, r3
 800df86:	3728      	adds	r7, #40	; 0x28
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	42595445 	.word	0x42595445
 800df90:	20000088 	.word	0x20000088
 800df94:	20014884 	.word	0x20014884
 800df98:	200149cc 	.word	0x200149cc

0800df9c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b092      	sub	sp, #72	; 0x48
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	607a      	str	r2, [r7, #4]
 800dfa8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d102      	bne.n	800dfba <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800dfb4:	2302      	movs	r3, #2
 800dfb6:	647b      	str	r3, [r7, #68]	; 0x44
 800dfb8:	e075      	b.n	800e0a6 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800dfba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfbc:	2b34      	cmp	r3, #52	; 0x34
 800dfbe:	d002      	beq.n	800dfc6 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800dfc0:	2302      	movs	r3, #2
 800dfc2:	647b      	str	r3, [r7, #68]	; 0x44
 800dfc4:	e06f      	b.n	800e0a6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dfc6:	f3ef 8310 	mrs	r3, PRIMASK
 800dfca:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800dfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800dfce:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800dfd0:	b672      	cpsid	i
    return(int_posture);
 800dfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800dfd4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800dfd6:	4b3b      	ldr	r3, [pc, #236]	; (800e0c4 <_txe_byte_pool_create+0x128>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	4a39      	ldr	r2, [pc, #228]	; (800e0c4 <_txe_byte_pool_create+0x128>)
 800dfde:	6013      	str	r3, [r2, #0]
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe6:	f383 8810 	msr	PRIMASK, r3
}
 800dfea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800dfec:	4b36      	ldr	r3, [pc, #216]	; (800e0c8 <_txe_byte_pool_create+0x12c>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800dff2:	2300      	movs	r3, #0
 800dff4:	643b      	str	r3, [r7, #64]	; 0x40
 800dff6:	e009      	b.n	800e00c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800dff8:	68fa      	ldr	r2, [r7, #12]
 800dffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d00b      	beq.n	800e018 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800e000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e004:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e008:	3301      	adds	r3, #1
 800e00a:	643b      	str	r3, [r7, #64]	; 0x40
 800e00c:	4b2f      	ldr	r3, [pc, #188]	; (800e0cc <_txe_byte_pool_create+0x130>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e012:	429a      	cmp	r2, r3
 800e014:	d3f0      	bcc.n	800dff8 <_txe_byte_pool_create+0x5c>
 800e016:	e000      	b.n	800e01a <_txe_byte_pool_create+0x7e>
                break;
 800e018:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e01a:	f3ef 8310 	mrs	r3, PRIMASK
 800e01e:	623b      	str	r3, [r7, #32]
    return(posture);
 800e020:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e022:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e024:	b672      	cpsid	i
    return(int_posture);
 800e026:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e028:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e02a:	4b26      	ldr	r3, [pc, #152]	; (800e0c4 <_txe_byte_pool_create+0x128>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	3b01      	subs	r3, #1
 800e030:	4a24      	ldr	r2, [pc, #144]	; (800e0c4 <_txe_byte_pool_create+0x128>)
 800e032:	6013      	str	r3, [r2, #0]
 800e034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e036:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03a:	f383 8810 	msr	PRIMASK, r3
}
 800e03e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e040:	f7ff f9be 	bl	800d3c0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800e044:	68fa      	ldr	r2, [r7, #12]
 800e046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e048:	429a      	cmp	r2, r3
 800e04a:	d102      	bne.n	800e052 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800e04c:	2302      	movs	r3, #2
 800e04e:	647b      	str	r3, [r7, #68]	; 0x44
 800e050:	e029      	b.n	800e0a6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d102      	bne.n	800e05e <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800e058:	2303      	movs	r3, #3
 800e05a:	647b      	str	r3, [r7, #68]	; 0x44
 800e05c:	e023      	b.n	800e0a6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	2b63      	cmp	r3, #99	; 0x63
 800e062:	d802      	bhi.n	800e06a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800e064:	2305      	movs	r3, #5
 800e066:	647b      	str	r3, [r7, #68]	; 0x44
 800e068:	e01d      	b.n	800e0a6 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e06a:	4b19      	ldr	r3, [pc, #100]	; (800e0d0 <_txe_byte_pool_create+0x134>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e072:	4a18      	ldr	r2, [pc, #96]	; (800e0d4 <_txe_byte_pool_create+0x138>)
 800e074:	4293      	cmp	r3, r2
 800e076:	d101      	bne.n	800e07c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e078:	2313      	movs	r3, #19
 800e07a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e07c:	f3ef 8305 	mrs	r3, IPSR
 800e080:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e082:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e084:	4b14      	ldr	r3, [pc, #80]	; (800e0d8 <_txe_byte_pool_create+0x13c>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4313      	orrs	r3, r2
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d00b      	beq.n	800e0a6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e08e:	f3ef 8305 	mrs	r3, IPSR
 800e092:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e094:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e096:	4b10      	ldr	r3, [pc, #64]	; (800e0d8 <_txe_byte_pool_create+0x13c>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	4313      	orrs	r3, r2
 800e09c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e0a0:	d201      	bcs.n	800e0a6 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e0a2:	2313      	movs	r3, #19
 800e0a4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e0a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d106      	bne.n	800e0ba <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	68b9      	ldr	r1, [r7, #8]
 800e0b2:	68f8      	ldr	r0, [r7, #12]
 800e0b4:	f7fd fa96 	bl	800b5e4 <_tx_byte_pool_create>
 800e0b8:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e0ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3748      	adds	r7, #72	; 0x48
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	2001491c 	.word	0x2001491c
 800e0c8:	20014874 	.word	0x20014874
 800e0cc:	20014878 	.word	0x20014878
 800e0d0:	20014884 	.word	0x20014884
 800e0d4:	200149cc 	.word	0x200149cc
 800e0d8:	20000088 	.word	0x20000088

0800e0dc <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b09a      	sub	sp, #104	; 0x68
 800e0e0:	af06      	add	r7, sp, #24
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	607a      	str	r2, [r7, #4]
 800e0e8:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d102      	bne.n	800e0fa <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e0f4:	230e      	movs	r3, #14
 800e0f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e0f8:	e0bb      	b.n	800e272 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800e0fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e0fc:	2bb0      	cmp	r3, #176	; 0xb0
 800e0fe:	d002      	beq.n	800e106 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e100:	230e      	movs	r3, #14
 800e102:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e104:	e0b5      	b.n	800e272 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e106:	f3ef 8310 	mrs	r3, PRIMASK
 800e10a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e10e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e110:	b672      	cpsid	i
    return(int_posture);
 800e112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e114:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e116:	4b64      	ldr	r3, [pc, #400]	; (800e2a8 <_txe_thread_create+0x1cc>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	3301      	adds	r3, #1
 800e11c:	4a62      	ldr	r2, [pc, #392]	; (800e2a8 <_txe_thread_create+0x1cc>)
 800e11e:	6013      	str	r3, [r2, #0]
 800e120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e122:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e126:	f383 8810 	msr	PRIMASK, r3
}
 800e12a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800e12c:	2300      	movs	r3, #0
 800e12e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800e130:	4b5e      	ldr	r3, [pc, #376]	; (800e2ac <_txe_thread_create+0x1d0>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800e136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e138:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800e13a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e13c:	3b01      	subs	r3, #1
 800e13e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e140:	4413      	add	r3, r2
 800e142:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800e144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e146:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e148:	2300      	movs	r3, #0
 800e14a:	647b      	str	r3, [r7, #68]	; 0x44
 800e14c:	e02b      	b.n	800e1a6 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e152:	429a      	cmp	r2, r3
 800e154:	d101      	bne.n	800e15a <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800e156:	2301      	movs	r3, #1
 800e158:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800e15a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d028      	beq.n	800e1b2 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800e160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e166:	429a      	cmp	r2, r3
 800e168:	d308      	bcc.n	800e17c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800e16a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e16c:	691b      	ldr	r3, [r3, #16]
 800e16e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e170:	429a      	cmp	r2, r3
 800e172:	d203      	bcs.n	800e17c <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e174:	2300      	movs	r3, #0
 800e176:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e178:	2301      	movs	r3, #1
 800e17a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800e17c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e17e:	68db      	ldr	r3, [r3, #12]
 800e180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e182:	429a      	cmp	r2, r3
 800e184:	d308      	bcc.n	800e198 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800e186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e188:	691b      	ldr	r3, [r3, #16]
 800e18a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d203      	bcs.n	800e198 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e190:	2300      	movs	r3, #0
 800e192:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e194:	2301      	movs	r3, #1
 800e196:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800e198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e19a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e19e:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e1a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	647b      	str	r3, [r7, #68]	; 0x44
 800e1a6:	4b42      	ldr	r3, [pc, #264]	; (800e2b0 <_txe_thread_create+0x1d4>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d3ce      	bcc.n	800e14e <_txe_thread_create+0x72>
 800e1b0:	e000      	b.n	800e1b4 <_txe_thread_create+0xd8>
                break;
 800e1b2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e1b4:	f3ef 8310 	mrs	r3, PRIMASK
 800e1b8:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e1ba:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e1bc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e1be:	b672      	cpsid	i
    return(int_posture);
 800e1c0:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e1c2:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e1c4:	4b38      	ldr	r3, [pc, #224]	; (800e2a8 <_txe_thread_create+0x1cc>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	3b01      	subs	r3, #1
 800e1ca:	4a37      	ldr	r2, [pc, #220]	; (800e2a8 <_txe_thread_create+0x1cc>)
 800e1cc:	6013      	str	r3, [r2, #0]
 800e1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1d0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e1d2:	6a3b      	ldr	r3, [r7, #32]
 800e1d4:	f383 8810 	msr	PRIMASK, r3
}
 800e1d8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e1da:	f7ff f8f1 	bl	800d3c0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800e1de:	68fa      	ldr	r2, [r7, #12]
 800e1e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d102      	bne.n	800e1ec <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800e1e6:	230e      	movs	r3, #14
 800e1e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1ea:	e042      	b.n	800e272 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800e1ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d102      	bne.n	800e1f8 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e1f2:	2303      	movs	r3, #3
 800e1f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1f6:	e03c      	b.n	800e272 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d102      	bne.n	800e204 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e1fe:	2303      	movs	r3, #3
 800e200:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e202:	e036      	b.n	800e272 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800e204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e206:	2bc7      	cmp	r3, #199	; 0xc7
 800e208:	d802      	bhi.n	800e210 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800e20a:	2305      	movs	r3, #5
 800e20c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e20e:	e030      	b.n	800e272 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800e210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e212:	2b1f      	cmp	r3, #31
 800e214:	d902      	bls.n	800e21c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800e216:	230f      	movs	r3, #15
 800e218:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e21a:	e02a      	b.n	800e272 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800e21c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e21e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e220:	429a      	cmp	r2, r3
 800e222:	d902      	bls.n	800e22a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800e224:	2318      	movs	r3, #24
 800e226:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e228:	e023      	b.n	800e272 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800e22a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d902      	bls.n	800e236 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800e230:	2310      	movs	r3, #16
 800e232:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e234:	e01d      	b.n	800e272 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800e236:	4b1f      	ldr	r3, [pc, #124]	; (800e2b4 <_txe_thread_create+0x1d8>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800e23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23e:	4a1e      	ldr	r2, [pc, #120]	; (800e2b8 <_txe_thread_create+0x1dc>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d101      	bne.n	800e248 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e244:	2313      	movs	r3, #19
 800e246:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e248:	f3ef 8305 	mrs	r3, IPSR
 800e24c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e24e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e250:	4b1a      	ldr	r3, [pc, #104]	; (800e2bc <_txe_thread_create+0x1e0>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4313      	orrs	r3, r2
 800e256:	2b00      	cmp	r3, #0
 800e258:	d00b      	beq.n	800e272 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e25a:	f3ef 8305 	mrs	r3, IPSR
 800e25e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e260:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e262:	4b16      	ldr	r3, [pc, #88]	; (800e2bc <_txe_thread_create+0x1e0>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4313      	orrs	r3, r2
 800e268:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e26c:	d201      	bcs.n	800e272 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e26e:	2313      	movs	r3, #19
 800e270:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e274:	2b00      	cmp	r3, #0
 800e276:	d112      	bne.n	800e29e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800e278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e27a:	9305      	str	r3, [sp, #20]
 800e27c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e27e:	9304      	str	r3, [sp, #16]
 800e280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e282:	9303      	str	r3, [sp, #12]
 800e284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e286:	9302      	str	r3, [sp, #8]
 800e288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e28a:	9301      	str	r3, [sp, #4]
 800e28c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e28e:	9300      	str	r3, [sp, #0]
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	68b9      	ldr	r1, [r7, #8]
 800e296:	68f8      	ldr	r0, [r7, #12]
 800e298:	f7fe fd3c 	bl	800cd14 <_tx_thread_create>
 800e29c:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800e29e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3750      	adds	r7, #80	; 0x50
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	2001491c 	.word	0x2001491c
 800e2ac:	2001488c 	.word	0x2001488c
 800e2b0:	20014890 	.word	0x20014890
 800e2b4:	20014884 	.word	0x20014884
 800e2b8:	200149cc 	.word	0x200149cc
 800e2bc:	20000088 	.word	0x20000088

0800e2c0 <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800e2c6:	4b0a      	ldr	r3, [pc, #40]	; (800e2f0 <_txe_thread_relinquish+0x30>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d00a      	beq.n	800e2e8 <_txe_thread_relinquish+0x28>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e2d2:	f3ef 8305 	mrs	r3, IPSR
 800e2d6:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 800e2d8:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 800e2da:	4b06      	ldr	r3, [pc, #24]	; (800e2f4 <_txe_thread_relinquish+0x34>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d101      	bne.n	800e2e8 <_txe_thread_relinquish+0x28>
        {

            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 800e2e4:	f7fe feda 	bl	800d09c <_tx_thread_relinquish>
        }
    }
}
 800e2e8:	bf00      	nop
 800e2ea:	3708      	adds	r7, #8
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	20014884 	.word	0x20014884
 800e2f4:	20000088 	.word	0x20000088

0800e2f8 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d102      	bne.n	800e30c <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e306:	230e      	movs	r3, #14
 800e308:	60fb      	str	r3, [r7, #12]
 800e30a:	e00b      	b.n	800e324 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a07      	ldr	r2, [pc, #28]	; (800e330 <_txe_thread_resume+0x38>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d002      	beq.n	800e31c <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e316:	230e      	movs	r3, #14
 800e318:	60fb      	str	r3, [r7, #12]
 800e31a:	e003      	b.n	800e324 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f7fe ff23 	bl	800d168 <_tx_thread_resume>
 800e322:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e324:	68fb      	ldr	r3, [r7, #12]
}
 800e326:	4618      	mov	r0, r3
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	54485244 	.word	0x54485244

0800e334 <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b08e      	sub	sp, #56	; 0x38
 800e338:	af08      	add	r7, sp, #32
 800e33a:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 800e33c:	2300      	movs	r3, #0
 800e33e:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	613b      	str	r3, [r7, #16]

   /* USER CODE BEGIN App_NetXDuo_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_NetXDuo_MEM_POOL */
  /* USER CODE BEGIN 0 */
  printf("Application started...\n");
 800e344:	487a      	ldr	r0, [pc, #488]	; (800e530 <MX_NetXDuo_Init+0x1fc>)
 800e346:	f000 fb91 	bl	800ea6c <puts>
  /* USER CODE END 0 */

  /* Initialize the NetXDuo system. */
  CHAR *pointer;
  nx_system_initialize();
 800e34a:	f7fb f89f 	bl	800948c <_nx_system_initialize>

    /* Allocate the memory for packet_pool.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, NX_APP_PACKET_POOL_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800e34e:	f107 010c 	add.w	r1, r7, #12
 800e352:	2300      	movs	r3, #0
 800e354:	f641 722c 	movw	r2, #7980	; 0x1f2c
 800e358:	6938      	ldr	r0, [r7, #16]
 800e35a:	f7ff fdab 	bl	800deb4 <_txe_byte_allocate>
 800e35e:	4603      	mov	r3, r0
 800e360:	2b00      	cmp	r3, #0
 800e362:	d001      	beq.n	800e368 <MX_NetXDuo_Init+0x34>
  {
    return TX_POOL_ERROR;
 800e364:	2302      	movs	r3, #2
 800e366:	e0df      	b.n	800e528 <MX_NetXDuo_Init+0x1f4>
  }

  /* Create the Packet pool to be used for packet allocation,
   * If extra NX_PACKET are to be used the NX_APP_PACKET_POOL_SIZE should be increased
   */
  ret = nx_packet_pool_create(&NxAppPool, "NetXDuo App Pool", DEFAULT_PAYLOAD_SIZE, pointer, NX_APP_PACKET_POOL_SIZE);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	223c      	movs	r2, #60	; 0x3c
 800e36c:	9201      	str	r2, [sp, #4]
 800e36e:	f641 722c 	movw	r2, #7980	; 0x1f2c
 800e372:	9200      	str	r2, [sp, #0]
 800e374:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e378:	496e      	ldr	r1, [pc, #440]	; (800e534 <MX_NetXDuo_Init+0x200>)
 800e37a:	486f      	ldr	r0, [pc, #444]	; (800e538 <MX_NetXDuo_Init+0x204>)
 800e37c:	f7fc fc64 	bl	800ac48 <_nxe_packet_pool_create>
 800e380:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d001      	beq.n	800e38c <MX_NetXDuo_Init+0x58>
  {
    return NX_POOL_ERROR;
 800e388:	2306      	movs	r3, #6
 800e38a:	e0cd      	b.n	800e528 <MX_NetXDuo_Init+0x1f4>
  }

    /* Allocate the memory for Ip_Instance */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, Nx_IP_INSTANCE_THREAD_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800e38c:	f107 010c 	add.w	r1, r7, #12
 800e390:	2300      	movs	r3, #0
 800e392:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e396:	6938      	ldr	r0, [r7, #16]
 800e398:	f7ff fd8c 	bl	800deb4 <_txe_byte_allocate>
 800e39c:	4603      	mov	r3, r0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d001      	beq.n	800e3a6 <MX_NetXDuo_Init+0x72>
  {
    return TX_POOL_ERROR;
 800e3a2:	2302      	movs	r3, #2
 800e3a4:	e0c0      	b.n	800e528 <MX_NetXDuo_Init+0x1f4>
  }

   /* Create the main NX_IP instance */
  ret = nx_ip_create(&NetXDuoEthIpInstance, "NetX Ip instance", NX_APP_DEFAULT_IP_ADDRESS, NX_APP_DEFAULT_NET_MASK, &NxAppPool, nx_stm32_eth_driver,
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f44f 62f9 	mov.w	r2, #1992	; 0x7c8
 800e3ac:	9205      	str	r2, [sp, #20]
 800e3ae:	220a      	movs	r2, #10
 800e3b0:	9204      	str	r2, [sp, #16]
 800e3b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e3b6:	9203      	str	r2, [sp, #12]
 800e3b8:	9302      	str	r3, [sp, #8]
 800e3ba:	4b60      	ldr	r3, [pc, #384]	; (800e53c <MX_NetXDuo_Init+0x208>)
 800e3bc:	9301      	str	r3, [sp, #4]
 800e3be:	4b5e      	ldr	r3, [pc, #376]	; (800e538 <MX_NetXDuo_Init+0x204>)
 800e3c0:	9300      	str	r3, [sp, #0]
 800e3c2:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800e3c6:	4a5e      	ldr	r2, [pc, #376]	; (800e540 <MX_NetXDuo_Init+0x20c>)
 800e3c8:	495e      	ldr	r1, [pc, #376]	; (800e544 <MX_NetXDuo_Init+0x210>)
 800e3ca:	485f      	ldr	r0, [pc, #380]	; (800e548 <MX_NetXDuo_Init+0x214>)
 800e3cc:	f7fc face 	bl	800a96c <_nxe_ip_create>
 800e3d0:	6178      	str	r0, [r7, #20]
                     pointer, Nx_IP_INSTANCE_THREAD_SIZE, NX_APP_INSTANCE_PRIORITY);

  if (ret != NX_SUCCESS)
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d001      	beq.n	800e3dc <MX_NetXDuo_Init+0xa8>
  {
    return NX_NOT_SUCCESSFUL;
 800e3d8:	2343      	movs	r3, #67	; 0x43
 800e3da:	e0a5      	b.n	800e528 <MX_NetXDuo_Init+0x1f4>
  }

    /* Allocate the memory for ARP */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, DEFAULT_ARP_CACHE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800e3dc:	f107 010c 	add.w	r1, r7, #12
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e3e6:	6938      	ldr	r0, [r7, #16]
 800e3e8:	f7ff fd64 	bl	800deb4 <_txe_byte_allocate>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d001      	beq.n	800e3f6 <MX_NetXDuo_Init+0xc2>
  {
    return TX_POOL_ERROR;
 800e3f2:	2302      	movs	r3, #2
 800e3f4:	e098      	b.n	800e528 <MX_NetXDuo_Init+0x1f4>

  /* USER CODE BEGIN ARP_Protocol_Initialization */

  /* USER CODE END ARP_Protocol_Initialization */

  ret = nx_arp_enable(&NetXDuoEthIpInstance, (VOID *)pointer, DEFAULT_ARP_CACHE_SIZE);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	4852      	ldr	r0, [pc, #328]	; (800e548 <MX_NetXDuo_Init+0x214>)
 800e400:	f7fc f9e4 	bl	800a7cc <_nxe_arp_enable>
 800e404:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d001      	beq.n	800e410 <MX_NetXDuo_Init+0xdc>
  {
    return NX_NOT_SUCCESSFUL;
 800e40c:	2343      	movs	r3, #67	; 0x43
 800e40e:	e08b      	b.n	800e528 <MX_NetXDuo_Init+0x1f4>

  /* USER CODE BEGIN ICMP_Protocol_Initialization */

  /* USER CODE END ICMP_Protocol_Initialization */

  ret = nx_icmp_enable(&NetXDuoEthIpInstance);
 800e410:	484d      	ldr	r0, [pc, #308]	; (800e548 <MX_NetXDuo_Init+0x214>)
 800e412:	f7fc fa27 	bl	800a864 <_nxe_icmp_enable>
 800e416:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d001      	beq.n	800e422 <MX_NetXDuo_Init+0xee>
  {
    return NX_NOT_SUCCESSFUL;
 800e41e:	2343      	movs	r3, #67	; 0x43
 800e420:	e082      	b.n	800e528 <MX_NetXDuo_Init+0x1f4>

  /* USER CODE BEGIN UDP_Protocol_Initialization */

  /* USER CODE END UDP_Protocol_Initialization */

  ret = nx_udp_enable(&NetXDuoEthIpInstance);
 800e422:	4849      	ldr	r0, [pc, #292]	; (800e548 <MX_NetXDuo_Init+0x214>)
 800e424:	f7fc fd4a 	bl	800aebc <_nxe_udp_enable>
 800e428:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d001      	beq.n	800e434 <MX_NetXDuo_Init+0x100>
  {
    return NX_NOT_SUCCESSFUL;
 800e430:	2343      	movs	r3, #67	; 0x43
 800e432:	e079      	b.n	800e528 <MX_NetXDuo_Init+0x1f4>
  }

   /* Allocate the memory for main thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, NX_APP_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800e434:	f107 010c 	add.w	r1, r7, #12
 800e438:	2300      	movs	r3, #0
 800e43a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e43e:	6938      	ldr	r0, [r7, #16]
 800e440:	f7ff fd38 	bl	800deb4 <_txe_byte_allocate>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d001      	beq.n	800e44e <MX_NetXDuo_Init+0x11a>
  {
    return TX_POOL_ERROR;
 800e44a:	2302      	movs	r3, #2
 800e44c:	e06c      	b.n	800e528 <MX_NetXDuo_Init+0x1f4>
  }

  /* Create the main thread */
  ret = tx_thread_create(&NxAppThread, "NetXDuo App thread", nx_app_thread_entry , 0, pointer, NX_APP_THREAD_STACK_SIZE,
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	22b0      	movs	r2, #176	; 0xb0
 800e452:	9206      	str	r2, [sp, #24]
 800e454:	2201      	movs	r2, #1
 800e456:	9205      	str	r2, [sp, #20]
 800e458:	2200      	movs	r2, #0
 800e45a:	9204      	str	r2, [sp, #16]
 800e45c:	220a      	movs	r2, #10
 800e45e:	9203      	str	r2, [sp, #12]
 800e460:	220a      	movs	r2, #10
 800e462:	9202      	str	r2, [sp, #8]
 800e464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e468:	9201      	str	r2, [sp, #4]
 800e46a:	9300      	str	r3, [sp, #0]
 800e46c:	2300      	movs	r3, #0
 800e46e:	4a37      	ldr	r2, [pc, #220]	; (800e54c <MX_NetXDuo_Init+0x218>)
 800e470:	4937      	ldr	r1, [pc, #220]	; (800e550 <MX_NetXDuo_Init+0x21c>)
 800e472:	4838      	ldr	r0, [pc, #224]	; (800e554 <MX_NetXDuo_Init+0x220>)
 800e474:	f7ff fe32 	bl	800e0dc <_txe_thread_create>
 800e478:	6178      	str	r0, [r7, #20]
                         NX_APP_THREAD_PRIORITY, NX_APP_THREAD_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <MX_NetXDuo_Init+0x150>
  {
    return TX_THREAD_ERROR;
 800e480:	230e      	movs	r3, #14
 800e482:	e051      	b.n	800e528 <MX_NetXDuo_Init+0x1f4>
  }

  /* USER CODE BEGIN MX_NetXDuo_Init */
  /* Allocate the app UDP thread entry pool. */
  ret = tx_byte_allocate(byte_pool, (VOID **) &pointer, 2 * DEFAULT_MEMORY_SIZE, TX_NO_WAIT);
 800e484:	f107 010c 	add.w	r1, r7, #12
 800e488:	2300      	movs	r3, #0
 800e48a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e48e:	6938      	ldr	r0, [r7, #16]
 800e490:	f7ff fd10 	bl	800deb4 <_txe_byte_allocate>
 800e494:	6178      	str	r0, [r7, #20]

  if (ret != TX_SUCCESS)
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d001      	beq.n	800e4a0 <MX_NetXDuo_Init+0x16c>
  {
    return TX_POOL_ERROR;
 800e49c:	2302      	movs	r3, #2
 800e49e:	e043      	b.n	800e528 <MX_NetXDuo_Init+0x1f4>
  }
  /* create the UDP server thread */
  ret = tx_thread_create(&AppUDPThread, "App UDP Thread", app_UDP_thread_entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	22b0      	movs	r2, #176	; 0xb0
 800e4a4:	9206      	str	r2, [sp, #24]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	9205      	str	r2, [sp, #20]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	9204      	str	r2, [sp, #16]
 800e4ae:	220a      	movs	r2, #10
 800e4b0:	9203      	str	r2, [sp, #12]
 800e4b2:	220a      	movs	r2, #10
 800e4b4:	9202      	str	r2, [sp, #8]
 800e4b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e4ba:	9201      	str	r2, [sp, #4]
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	2300      	movs	r3, #0
 800e4c0:	4a25      	ldr	r2, [pc, #148]	; (800e558 <MX_NetXDuo_Init+0x224>)
 800e4c2:	4926      	ldr	r1, [pc, #152]	; (800e55c <MX_NetXDuo_Init+0x228>)
 800e4c4:	4826      	ldr	r0, [pc, #152]	; (800e560 <MX_NetXDuo_Init+0x22c>)
 800e4c6:	f7ff fe09 	bl	800e0dc <_txe_thread_create>
 800e4ca:	6178      	str	r0, [r7, #20]
	  				     DEFAULT_PRIORITY, DEFAULT_PRIORITY, TX_NO_TIME_SLICE, TX_DONT_START);

  if (ret != TX_SUCCESS)
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d001      	beq.n	800e4d6 <MX_NetXDuo_Init+0x1a2>
  {
	return TX_THREAD_ERROR;
 800e4d2:	230e      	movs	r3, #14
 800e4d4:	e028      	b.n	800e528 <MX_NetXDuo_Init+0x1f4>
  }

  /* Allocate the memory for Listening thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,2 *  DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800e4d6:	f107 010c 	add.w	r1, r7, #12
 800e4da:	2300      	movs	r3, #0
 800e4dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e4e0:	6938      	ldr	r0, [r7, #16]
 800e4e2:	f7ff fce7 	bl	800deb4 <_txe_byte_allocate>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d001      	beq.n	800e4f0 <MX_NetXDuo_Init+0x1bc>
  {
  	return TX_POOL_ERROR;
 800e4ec:	2302      	movs	r3, #2
 800e4ee:	e01b      	b.n	800e528 <MX_NetXDuo_Init+0x1f4>
  }

  /* create the Listening thread */
  ret = tx_thread_create(&AppUDPListeningThread, "App Listening Thread", app_UDP_listening_thread_entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	22b0      	movs	r2, #176	; 0xb0
 800e4f4:	9206      	str	r2, [sp, #24]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	9205      	str	r2, [sp, #20]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	9204      	str	r2, [sp, #16]
 800e4fe:	220a      	movs	r2, #10
 800e500:	9203      	str	r2, [sp, #12]
 800e502:	220a      	movs	r2, #10
 800e504:	9202      	str	r2, [sp, #8]
 800e506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e50a:	9201      	str	r2, [sp, #4]
 800e50c:	9300      	str	r3, [sp, #0]
 800e50e:	2300      	movs	r3, #0
 800e510:	4a14      	ldr	r2, [pc, #80]	; (800e564 <MX_NetXDuo_Init+0x230>)
 800e512:	4915      	ldr	r1, [pc, #84]	; (800e568 <MX_NetXDuo_Init+0x234>)
 800e514:	4815      	ldr	r0, [pc, #84]	; (800e56c <MX_NetXDuo_Init+0x238>)
 800e516:	f7ff fde1 	bl	800e0dc <_txe_thread_create>
 800e51a:	6178      	str	r0, [r7, #20]
		  	  	  	  	 DEFAULT_PRIORITY, DEFAULT_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d001      	beq.n	800e526 <MX_NetXDuo_Init+0x1f2>
  {
  	return TX_THREAD_ERROR;
 800e522:	230e      	movs	r3, #14
 800e524:	e000      	b.n	800e528 <MX_NetXDuo_Init+0x1f4>
  }

  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 800e526:	697b      	ldr	r3, [r7, #20]
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3718      	adds	r7, #24
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	0800f8ec 	.word	0x0800f8ec
 800e534:	0800f904 	.word	0x0800f904
 800e538:	20015194 	.word	0x20015194
 800e53c:	08004b91 	.word	0x08004b91
 800e540:	c0a80101 	.word	0xc0a80101
 800e544:	0800f918 	.word	0x0800f918
 800e548:	200151d0 	.word	0x200151d0
 800e54c:	0800e571 	.word	0x0800e571
 800e550:	0800f92c 	.word	0x0800f92c
 800e554:	200150e4 	.word	0x200150e4
 800e558:	0800e5e9 	.word	0x0800e5e9
 800e55c:	0800f940 	.word	0x0800f940
 800e560:	20014e8c 	.word	0x20014e8c
 800e564:	0800e705 	.word	0x0800e705
 800e568:	0800f950 	.word	0x0800f950
 800e56c:	20014f3c 	.word	0x20014f3c

0800e570 <nx_app_thread_entry>:
* @brief  Main thread entry.
* @param thread_input: ULONG user argument used by the thread entry
* @retval none
*/
static VOID nx_app_thread_entry (ULONG thread_input)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af02      	add	r7, sp, #8
 800e576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Nx_App_Thread_Entry 0 */
  UINT ret = NX_SUCCESS;
 800e578:	2300      	movs	r3, #0
 800e57a:	60fb      	str	r3, [r7, #12]

  /* get IP address */
  ret = nx_ip_address_get(&NetXDuoEthIpInstance, &IpAddress, &NetMask);
 800e57c:	4a14      	ldr	r2, [pc, #80]	; (800e5d0 <nx_app_thread_entry+0x60>)
 800e57e:	4915      	ldr	r1, [pc, #84]	; (800e5d4 <nx_app_thread_entry+0x64>)
 800e580:	4815      	ldr	r0, [pc, #84]	; (800e5d8 <nx_app_thread_entry+0x68>)
 800e582:	f7fc f9af 	bl	800a8e4 <_nxe_ip_address_get>
 800e586:	60f8      	str	r0, [r7, #12]

  /* print the IP address */
  PRINT_IP_ADDRESS(IpAddress);
 800e588:	4b12      	ldr	r3, [pc, #72]	; (800e5d4 <nx_app_thread_entry+0x64>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	0e19      	lsrs	r1, r3, #24
 800e58e:	4b11      	ldr	r3, [pc, #68]	; (800e5d4 <nx_app_thread_entry+0x64>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	0c1b      	lsrs	r3, r3, #16
 800e594:	b2d8      	uxtb	r0, r3
 800e596:	4b0f      	ldr	r3, [pc, #60]	; (800e5d4 <nx_app_thread_entry+0x64>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	0a1b      	lsrs	r3, r3, #8
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	4a0d      	ldr	r2, [pc, #52]	; (800e5d4 <nx_app_thread_entry+0x64>)
 800e5a0:	6812      	ldr	r2, [r2, #0]
 800e5a2:	b2d2      	uxtb	r2, r2
 800e5a4:	9201      	str	r2, [sp, #4]
 800e5a6:	9300      	str	r3, [sp, #0]
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	460a      	mov	r2, r1
 800e5ac:	490b      	ldr	r1, [pc, #44]	; (800e5dc <nx_app_thread_entry+0x6c>)
 800e5ae:	480c      	ldr	r0, [pc, #48]	; (800e5e0 <nx_app_thread_entry+0x70>)
 800e5b0:	f000 f9f6 	bl	800e9a0 <iprintf>

  if (ret != TX_SUCCESS)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d001      	beq.n	800e5be <nx_app_thread_entry+0x4e>
  {
    Error_Handler();
 800e5ba:	f7f2 f983 	bl	80008c4 <Error_Handler>
  }

  /* Now the network is correctly initialized, start the UDP server thread */
  tx_thread_resume(&AppUDPThread);
 800e5be:	4809      	ldr	r0, [pc, #36]	; (800e5e4 <nx_app_thread_entry+0x74>)
 800e5c0:	f7ff fe9a 	bl	800e2f8 <_txe_thread_resume>

  /* this thread is not needed any more, we relinquish it */
  tx_thread_relinquish();
 800e5c4:	f7ff fe7c 	bl	800e2c0 <_txe_thread_relinquish>
  /* USER CODE END Nx_App_Thread_Entry 0 */

}
 800e5c8:	bf00      	nop
 800e5ca:	3710      	adds	r7, #16
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}
 800e5d0:	200150e0 	.word	0x200150e0
 800e5d4:	200150dc 	.word	0x200150dc
 800e5d8:	200151d0 	.word	0x200151d0
 800e5dc:	0800f968 	.word	0x0800f968
 800e5e0:	0800f974 	.word	0x0800f974
 800e5e4:	20014e8c 	.word	0x20014e8c

0800e5e8 <app_UDP_thread_entry>:
/* USER CODE BEGIN 1 */

/* Send UDP packets stream for all memory content */
static VOID app_UDP_thread_entry(ULONG thread_input)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b08e      	sub	sp, #56	; 0x38
 800e5ec:	af04      	add	r7, sp, #16
 800e5ee:	6078      	str	r0, [r7, #4]
  UINT ret;
  NX_PACKET *data_packet;
  UINT pkt_number = 0;	/* packet number */
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	627b      	str	r3, [r7, #36]	; 0x24
  UINT pkt_numeber_be;  /* conversion in network format*/
  UINT current_packet_size;
  UINT offset = 0;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	623b      	str	r3, [r7, #32]
  UINT packet_size = 1472;  /* Maximum safe packet size for Ethernet without fragmentation */
 800e5f8:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 800e5fc:	61fb      	str	r3, [r7, #28]
  UINT header_size = sizeof(UINT);  /* Size of the packet number header */
 800e5fe:	2304      	movs	r3, #4
 800e600:	61bb      	str	r3, [r7, #24]

  /* create the UDP socket */
  ret = nx_udp_socket_create(&NetXDuoEthIpInstance, &UDPSocket, "UDP Client Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, NX_IP_TIME_TO_LIVE, QUEUE_MAX_SIZE);
 800e602:	2378      	movs	r3, #120	; 0x78
 800e604:	9303      	str	r3, [sp, #12]
 800e606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e60a:	9302      	str	r3, [sp, #8]
 800e60c:	2380      	movs	r3, #128	; 0x80
 800e60e:	9301      	str	r3, [sp, #4]
 800e610:	2300      	movs	r3, #0
 800e612:	9300      	str	r3, [sp, #0]
 800e614:	2300      	movs	r3, #0
 800e616:	4a35      	ldr	r2, [pc, #212]	; (800e6ec <app_UDP_thread_entry+0x104>)
 800e618:	4935      	ldr	r1, [pc, #212]	; (800e6f0 <app_UDP_thread_entry+0x108>)
 800e61a:	4836      	ldr	r0, [pc, #216]	; (800e6f4 <app_UDP_thread_entry+0x10c>)
 800e61c:	f7fc fccc 	bl	800afb8 <_nxe_udp_socket_create>
 800e620:	6178      	str	r0, [r7, #20]
  if (ret != NX_SUCCESS)
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d056      	beq.n	800e6d6 <app_UDP_thread_entry+0xee>
  {
    Error_Handler();
 800e628:	f7f2 f94c 	bl	80008c4 <Error_Handler>
  }

  while (offset < MEMORY_SIZE)
 800e62c:	e053      	b.n	800e6d6 <app_UDP_thread_entry+0xee>
  {
    /* create the packet to send over the UDP socket */
    ret = nx_packet_allocate(&NxAppPool, &data_packet, NX_UDP_PACKET, TX_WAIT_FOREVER);
 800e62e:	f107 010c 	add.w	r1, r7, #12
 800e632:	f04f 33ff 	mov.w	r3, #4294967295
 800e636:	222c      	movs	r2, #44	; 0x2c
 800e638:	482f      	ldr	r0, [pc, #188]	; (800e6f8 <app_UDP_thread_entry+0x110>)
 800e63a:	f7fc fa65 	bl	800ab08 <_nxe_packet_allocate>
 800e63e:	6178      	str	r0, [r7, #20]
    if (ret != NX_SUCCESS)
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d001      	beq.n	800e64a <app_UDP_thread_entry+0x62>
    {
      Error_Handler();
 800e646:	f7f2 f93d 	bl	80008c4 <Error_Handler>
    }

    /* Determine the size of the current packet */
    current_packet_size = (MEMORY_SIZE - offset) > (packet_size - header_size) ? (packet_size - header_size) : (MEMORY_SIZE - offset);
 800e64a:	6a3b      	ldr	r3, [r7, #32]
 800e64c:	f5c3 4248 	rsb	r2, r3, #51200	; 0xc800
 800e650:	69f9      	ldr	r1, [r7, #28]
 800e652:	69bb      	ldr	r3, [r7, #24]
 800e654:	1acb      	subs	r3, r1, r3
 800e656:	4293      	cmp	r3, r2
 800e658:	bf28      	it	cs
 800e65a:	4613      	movcs	r3, r2
 800e65c:	613b      	str	r3, [r7, #16]

    /* Conversion in network format */
    pkt_numeber_be = htonl(pkt_number);
 800e65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e660:	ba1b      	rev	r3, r3
 800e662:	60bb      	str	r3, [r7, #8]

    /* Append packet number to the packet */
    ret = nx_packet_data_append(data_packet, (VOID *) &pkt_numeber_be, header_size, &NxAppPool, TX_WAIT_FOREVER);
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f107 0108 	add.w	r1, r7, #8
 800e66a:	f04f 33ff 	mov.w	r3, #4294967295
 800e66e:	9300      	str	r3, [sp, #0]
 800e670:	4b21      	ldr	r3, [pc, #132]	; (800e6f8 <app_UDP_thread_entry+0x110>)
 800e672:	69ba      	ldr	r2, [r7, #24]
 800e674:	f7fc fa8e 	bl	800ab94 <_nxe_packet_data_append>
 800e678:	6178      	str	r0, [r7, #20]
    if (ret != NX_SUCCESS)
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d001      	beq.n	800e684 <app_UDP_thread_entry+0x9c>
    {
      Error_Handler();
 800e680:	f7f2 f920 	bl	80008c4 <Error_Handler>
    }

    /* Append data from the memory area to the packet */
    ret = nx_packet_data_append(data_packet, (VOID *)(memory_area + offset), current_packet_size, &NxAppPool, TX_WAIT_FOREVER);
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	6a3b      	ldr	r3, [r7, #32]
 800e688:	4a1c      	ldr	r2, [pc, #112]	; (800e6fc <app_UDP_thread_entry+0x114>)
 800e68a:	1899      	adds	r1, r3, r2
 800e68c:	f04f 33ff 	mov.w	r3, #4294967295
 800e690:	9300      	str	r3, [sp, #0]
 800e692:	4b19      	ldr	r3, [pc, #100]	; (800e6f8 <app_UDP_thread_entry+0x110>)
 800e694:	693a      	ldr	r2, [r7, #16]
 800e696:	f7fc fa7d 	bl	800ab94 <_nxe_packet_data_append>
 800e69a:	6178      	str	r0, [r7, #20]
    if (ret != NX_SUCCESS)
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d001      	beq.n	800e6a6 <app_UDP_thread_entry+0xbe>
    {
      Error_Handler();
 800e6a2:	f7f2 f90f 	bl	80008c4 <Error_Handler>
    }

    /* Send the packet */
    ret = nx_udp_socket_send(&UDPSocket, data_packet, UDP_SERVER_ADDRESS, UDP_SERVER_PORT);
 800e6a6:	f107 010c 	add.w	r1, r7, #12
 800e6aa:	f241 7370 	movw	r3, #6000	; 0x1770
 800e6ae:	4a14      	ldr	r2, [pc, #80]	; (800e700 <app_UDP_thread_entry+0x118>)
 800e6b0:	480f      	ldr	r0, [pc, #60]	; (800e6f0 <app_UDP_thread_entry+0x108>)
 800e6b2:	f7fc fd93 	bl	800b1dc <_nxe_udp_socket_send>
 800e6b6:	6178      	str	r0, [r7, #20]
    if (ret != NX_SUCCESS)
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d001      	beq.n	800e6c2 <app_UDP_thread_entry+0xda>
    {
      Error_Handler();
 800e6be:	f7f2 f901 	bl	80008c4 <Error_Handler>
    }

    /* Move the offset for the next packet */
    offset += current_packet_size;
 800e6c2:	6a3a      	ldr	r2, [r7, #32]
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	4413      	add	r3, r2
 800e6c8:	623b      	str	r3, [r7, #32]

    /* Increase sequence number of the packets */
    pkt_number++;
 800e6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	627b      	str	r3, [r7, #36]	; 0x24

    tx_thread_sleep(10);
 800e6d0:	200a      	movs	r0, #10
 800e6d2:	f7fe fdf5 	bl	800d2c0 <_tx_thread_sleep>
  while (offset < MEMORY_SIZE)
 800e6d6:	6a3b      	ldr	r3, [r7, #32]
 800e6d8:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 800e6dc:	d3a7      	bcc.n	800e62e <app_UDP_thread_entry+0x46>
  }

  tx_thread_sleep(100);
 800e6de:	2064      	movs	r0, #100	; 0x64
 800e6e0:	f7fe fdee 	bl	800d2c0 <_tx_thread_sleep>
}
 800e6e4:	bf00      	nop
 800e6e6:	3728      	adds	r7, #40	; 0x28
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	0800f990 	.word	0x0800f990
 800e6f0:	20014fec 	.word	0x20014fec
 800e6f4:	200151d0 	.word	0x200151d0
 800e6f8:	20015194 	.word	0x20015194
 800e6fc:	20007f14 	.word	0x20007f14
 800e700:	c0a80165 	.word	0xc0a80165

0800e704 <app_UDP_listening_thread_entry>:
* @brief  Listening thread entry
* @param thread_input: ULONG thread parameter
* @retval none
*/
static VOID app_UDP_listening_thread_entry(ULONG thread_input)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b088      	sub	sp, #32
 800e708:	af04      	add	r7, sp, #16
 800e70a:	6078      	str	r0, [r7, #4]
  UINT ret;
  NX_PACKET *server_packet;

  /* create the UDP socket */
  ret = nx_udp_socket_create(&NetXDuoEthIpInstance, &UDPListeningSocket, "UDP Listening Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, NX_IP_TIME_TO_LIVE, QUEUE_MAX_SIZE);
 800e70c:	2378      	movs	r3, #120	; 0x78
 800e70e:	9303      	str	r3, [sp, #12]
 800e710:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e714:	9302      	str	r3, [sp, #8]
 800e716:	2380      	movs	r3, #128	; 0x80
 800e718:	9301      	str	r3, [sp, #4]
 800e71a:	2300      	movs	r3, #0
 800e71c:	9300      	str	r3, [sp, #0]
 800e71e:	2300      	movs	r3, #0
 800e720:	4a1b      	ldr	r2, [pc, #108]	; (800e790 <app_UDP_listening_thread_entry+0x8c>)
 800e722:	491c      	ldr	r1, [pc, #112]	; (800e794 <app_UDP_listening_thread_entry+0x90>)
 800e724:	481c      	ldr	r0, [pc, #112]	; (800e798 <app_UDP_listening_thread_entry+0x94>)
 800e726:	f7fc fc47 	bl	800afb8 <_nxe_udp_socket_create>
 800e72a:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d001      	beq.n	800e736 <app_UDP_listening_thread_entry+0x32>
  {
    Error_Handler();
 800e732:	f7f2 f8c7 	bl	80008c4 <Error_Handler>
  }

  /* bind UDP socket to the UDP CLIENT PORT */
  ret = nx_udp_socket_bind(&UDPListeningSocket, UDP_CLIENT_PORT, TX_WAIT_FOREVER);
 800e736:	f04f 32ff 	mov.w	r2, #4294967295
 800e73a:	f241 7171 	movw	r1, #6001	; 0x1771
 800e73e:	4815      	ldr	r0, [pc, #84]	; (800e794 <app_UDP_listening_thread_entry+0x90>)
 800e740:	f7fc fbf4 	bl	800af2c <_nxe_udp_socket_bind>
 800e744:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d001      	beq.n	800e750 <app_UDP_listening_thread_entry+0x4c>
  {
    Error_Handler();
 800e74c:	f7f2 f8ba 	bl	80008c4 <Error_Handler>
  }

  /* wait to receive response from the server */
  ret = nx_udp_socket_receive(&UDPListeningSocket, &server_packet, NX_APP_DEFAULT_TIMEOUT);
 800e750:	f107 0308 	add.w	r3, r7, #8
 800e754:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e758:	4619      	mov	r1, r3
 800e75a:	480e      	ldr	r0, [pc, #56]	; (800e794 <app_UDP_listening_thread_entry+0x90>)
 800e75c:	f7fc fcfc 	bl	800b158 <_nxe_udp_socket_receive>
 800e760:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d001      	beq.n	800e76c <app_UDP_listening_thread_entry+0x68>
  {
    Error_Handler();
 800e768:	f7f2 f8ac 	bl	80008c4 <Error_Handler>
  }

  /* unbind the socket and delete it */
  nx_udp_socket_unbind(&UDPSocket);
 800e76c:	480b      	ldr	r0, [pc, #44]	; (800e79c <app_UDP_listening_thread_entry+0x98>)
 800e76e:	f7fc fdbb 	bl	800b2e8 <_nxe_udp_socket_unbind>
  nx_udp_socket_delete(&UDPSocket);
 800e772:	480a      	ldr	r0, [pc, #40]	; (800e79c <app_UDP_listening_thread_entry+0x98>)
 800e774:	f7fc fcb4 	bl	800b0e0 <_nxe_udp_socket_delete>
  nx_udp_socket_unbind(&UDPListeningSocket);
 800e778:	4806      	ldr	r0, [pc, #24]	; (800e794 <app_UDP_listening_thread_entry+0x90>)
 800e77a:	f7fc fdb5 	bl	800b2e8 <_nxe_udp_socket_unbind>
  nx_udp_socket_delete(&UDPListeningSocket);
 800e77e:	4805      	ldr	r0, [pc, #20]	; (800e794 <app_UDP_listening_thread_entry+0x90>)
 800e780:	f7fc fcae 	bl	800b0e0 <_nxe_udp_socket_delete>

  /* Put micro in standby mode */
  standby();
 800e784:	f7f2 f880 	bl	8000888 <standby>
}
 800e788:	bf00      	nop
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	0800f9a4 	.word	0x0800f9a4
 800e794:	20015064 	.word	0x20015064
 800e798:	200151d0 	.word	0x200151d0
 800e79c:	20014fec 	.word	0x20014fec

0800e7a0 <rand>:
 800e7a0:	4b16      	ldr	r3, [pc, #88]	; (800e7fc <rand+0x5c>)
 800e7a2:	b510      	push	{r4, lr}
 800e7a4:	681c      	ldr	r4, [r3, #0]
 800e7a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e7a8:	b9b3      	cbnz	r3, 800e7d8 <rand+0x38>
 800e7aa:	2018      	movs	r0, #24
 800e7ac:	f000 fb30 	bl	800ee10 <malloc>
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	6320      	str	r0, [r4, #48]	; 0x30
 800e7b4:	b920      	cbnz	r0, 800e7c0 <rand+0x20>
 800e7b6:	4b12      	ldr	r3, [pc, #72]	; (800e800 <rand+0x60>)
 800e7b8:	2152      	movs	r1, #82	; 0x52
 800e7ba:	4812      	ldr	r0, [pc, #72]	; (800e804 <rand+0x64>)
 800e7bc:	f000 fabe 	bl	800ed3c <__assert_func>
 800e7c0:	4911      	ldr	r1, [pc, #68]	; (800e808 <rand+0x68>)
 800e7c2:	4b12      	ldr	r3, [pc, #72]	; (800e80c <rand+0x6c>)
 800e7c4:	e9c0 1300 	strd	r1, r3, [r0]
 800e7c8:	4b11      	ldr	r3, [pc, #68]	; (800e810 <rand+0x70>)
 800e7ca:	2100      	movs	r1, #0
 800e7cc:	6083      	str	r3, [r0, #8]
 800e7ce:	230b      	movs	r3, #11
 800e7d0:	8183      	strh	r3, [r0, #12]
 800e7d2:	2001      	movs	r0, #1
 800e7d4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e7d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e7da:	480e      	ldr	r0, [pc, #56]	; (800e814 <rand+0x74>)
 800e7dc:	690b      	ldr	r3, [r1, #16]
 800e7de:	694c      	ldr	r4, [r1, #20]
 800e7e0:	4a0d      	ldr	r2, [pc, #52]	; (800e818 <rand+0x78>)
 800e7e2:	4358      	muls	r0, r3
 800e7e4:	fb02 0004 	mla	r0, r2, r4, r0
 800e7e8:	fba3 3202 	umull	r3, r2, r3, r2
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	eb40 0002 	adc.w	r0, r0, r2
 800e7f2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e7f6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e7fa:	bd10      	pop	{r4, pc}
 800e7fc:	200000e4 	.word	0x200000e4
 800e800:	0800f9d4 	.word	0x0800f9d4
 800e804:	0800f9eb 	.word	0x0800f9eb
 800e808:	abcd330e 	.word	0xabcd330e
 800e80c:	e66d1234 	.word	0xe66d1234
 800e810:	0005deec 	.word	0x0005deec
 800e814:	5851f42d 	.word	0x5851f42d
 800e818:	4c957f2d 	.word	0x4c957f2d

0800e81c <std>:
 800e81c:	2300      	movs	r3, #0
 800e81e:	b510      	push	{r4, lr}
 800e820:	4604      	mov	r4, r0
 800e822:	6083      	str	r3, [r0, #8]
 800e824:	8181      	strh	r1, [r0, #12]
 800e826:	4619      	mov	r1, r3
 800e828:	6643      	str	r3, [r0, #100]	; 0x64
 800e82a:	81c2      	strh	r2, [r0, #14]
 800e82c:	2208      	movs	r2, #8
 800e82e:	6183      	str	r3, [r0, #24]
 800e830:	e9c0 3300 	strd	r3, r3, [r0]
 800e834:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e838:	305c      	adds	r0, #92	; 0x5c
 800e83a:	f000 f9f7 	bl	800ec2c <memset>
 800e83e:	4b0d      	ldr	r3, [pc, #52]	; (800e874 <std+0x58>)
 800e840:	6224      	str	r4, [r4, #32]
 800e842:	6263      	str	r3, [r4, #36]	; 0x24
 800e844:	4b0c      	ldr	r3, [pc, #48]	; (800e878 <std+0x5c>)
 800e846:	62a3      	str	r3, [r4, #40]	; 0x28
 800e848:	4b0c      	ldr	r3, [pc, #48]	; (800e87c <std+0x60>)
 800e84a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e84c:	4b0c      	ldr	r3, [pc, #48]	; (800e880 <std+0x64>)
 800e84e:	6323      	str	r3, [r4, #48]	; 0x30
 800e850:	4b0c      	ldr	r3, [pc, #48]	; (800e884 <std+0x68>)
 800e852:	429c      	cmp	r4, r3
 800e854:	d006      	beq.n	800e864 <std+0x48>
 800e856:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e85a:	4294      	cmp	r4, r2
 800e85c:	d002      	beq.n	800e864 <std+0x48>
 800e85e:	33d0      	adds	r3, #208	; 0xd0
 800e860:	429c      	cmp	r4, r3
 800e862:	d105      	bne.n	800e870 <std+0x54>
 800e864:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e86c:	f000 ba56 	b.w	800ed1c <__retarget_lock_init_recursive>
 800e870:	bd10      	pop	{r4, pc}
 800e872:	bf00      	nop
 800e874:	0800ea7d 	.word	0x0800ea7d
 800e878:	0800ea9f 	.word	0x0800ea9f
 800e87c:	0800ead7 	.word	0x0800ead7
 800e880:	0800eafb 	.word	0x0800eafb
 800e884:	20015998 	.word	0x20015998

0800e888 <stdio_exit_handler>:
 800e888:	4a02      	ldr	r2, [pc, #8]	; (800e894 <stdio_exit_handler+0xc>)
 800e88a:	4903      	ldr	r1, [pc, #12]	; (800e898 <stdio_exit_handler+0x10>)
 800e88c:	4803      	ldr	r0, [pc, #12]	; (800e89c <stdio_exit_handler+0x14>)
 800e88e:	f000 b869 	b.w	800e964 <_fwalk_sglue>
 800e892:	bf00      	nop
 800e894:	2000008c 	.word	0x2000008c
 800e898:	0800f62d 	.word	0x0800f62d
 800e89c:	20000098 	.word	0x20000098

0800e8a0 <cleanup_stdio>:
 800e8a0:	6841      	ldr	r1, [r0, #4]
 800e8a2:	4b0c      	ldr	r3, [pc, #48]	; (800e8d4 <cleanup_stdio+0x34>)
 800e8a4:	4299      	cmp	r1, r3
 800e8a6:	b510      	push	{r4, lr}
 800e8a8:	4604      	mov	r4, r0
 800e8aa:	d001      	beq.n	800e8b0 <cleanup_stdio+0x10>
 800e8ac:	f000 febe 	bl	800f62c <_fflush_r>
 800e8b0:	68a1      	ldr	r1, [r4, #8]
 800e8b2:	4b09      	ldr	r3, [pc, #36]	; (800e8d8 <cleanup_stdio+0x38>)
 800e8b4:	4299      	cmp	r1, r3
 800e8b6:	d002      	beq.n	800e8be <cleanup_stdio+0x1e>
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f000 feb7 	bl	800f62c <_fflush_r>
 800e8be:	68e1      	ldr	r1, [r4, #12]
 800e8c0:	4b06      	ldr	r3, [pc, #24]	; (800e8dc <cleanup_stdio+0x3c>)
 800e8c2:	4299      	cmp	r1, r3
 800e8c4:	d004      	beq.n	800e8d0 <cleanup_stdio+0x30>
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8cc:	f000 beae 	b.w	800f62c <_fflush_r>
 800e8d0:	bd10      	pop	{r4, pc}
 800e8d2:	bf00      	nop
 800e8d4:	20015998 	.word	0x20015998
 800e8d8:	20015a00 	.word	0x20015a00
 800e8dc:	20015a68 	.word	0x20015a68

0800e8e0 <global_stdio_init.part.0>:
 800e8e0:	b510      	push	{r4, lr}
 800e8e2:	4b0b      	ldr	r3, [pc, #44]	; (800e910 <global_stdio_init.part.0+0x30>)
 800e8e4:	2104      	movs	r1, #4
 800e8e6:	4c0b      	ldr	r4, [pc, #44]	; (800e914 <global_stdio_init.part.0+0x34>)
 800e8e8:	4a0b      	ldr	r2, [pc, #44]	; (800e918 <global_stdio_init.part.0+0x38>)
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	601a      	str	r2, [r3, #0]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	f7ff ff94 	bl	800e81c <std>
 800e8f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	2109      	movs	r1, #9
 800e8fc:	f7ff ff8e 	bl	800e81c <std>
 800e900:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e904:	2202      	movs	r2, #2
 800e906:	2112      	movs	r1, #18
 800e908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e90c:	f7ff bf86 	b.w	800e81c <std>
 800e910:	20015ad0 	.word	0x20015ad0
 800e914:	20015998 	.word	0x20015998
 800e918:	0800e889 	.word	0x0800e889

0800e91c <__sfp_lock_acquire>:
 800e91c:	4801      	ldr	r0, [pc, #4]	; (800e924 <__sfp_lock_acquire+0x8>)
 800e91e:	f000 b9fe 	b.w	800ed1e <__retarget_lock_acquire_recursive>
 800e922:	bf00      	nop
 800e924:	20015ad9 	.word	0x20015ad9

0800e928 <__sfp_lock_release>:
 800e928:	4801      	ldr	r0, [pc, #4]	; (800e930 <__sfp_lock_release+0x8>)
 800e92a:	f000 b9f9 	b.w	800ed20 <__retarget_lock_release_recursive>
 800e92e:	bf00      	nop
 800e930:	20015ad9 	.word	0x20015ad9

0800e934 <__sinit>:
 800e934:	b510      	push	{r4, lr}
 800e936:	4604      	mov	r4, r0
 800e938:	f7ff fff0 	bl	800e91c <__sfp_lock_acquire>
 800e93c:	6a23      	ldr	r3, [r4, #32]
 800e93e:	b11b      	cbz	r3, 800e948 <__sinit+0x14>
 800e940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e944:	f7ff bff0 	b.w	800e928 <__sfp_lock_release>
 800e948:	4b04      	ldr	r3, [pc, #16]	; (800e95c <__sinit+0x28>)
 800e94a:	6223      	str	r3, [r4, #32]
 800e94c:	4b04      	ldr	r3, [pc, #16]	; (800e960 <__sinit+0x2c>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d1f5      	bne.n	800e940 <__sinit+0xc>
 800e954:	f7ff ffc4 	bl	800e8e0 <global_stdio_init.part.0>
 800e958:	e7f2      	b.n	800e940 <__sinit+0xc>
 800e95a:	bf00      	nop
 800e95c:	0800e8a1 	.word	0x0800e8a1
 800e960:	20015ad0 	.word	0x20015ad0

0800e964 <_fwalk_sglue>:
 800e964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e968:	4607      	mov	r7, r0
 800e96a:	4688      	mov	r8, r1
 800e96c:	4614      	mov	r4, r2
 800e96e:	2600      	movs	r6, #0
 800e970:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e974:	f1b9 0901 	subs.w	r9, r9, #1
 800e978:	d505      	bpl.n	800e986 <_fwalk_sglue+0x22>
 800e97a:	6824      	ldr	r4, [r4, #0]
 800e97c:	2c00      	cmp	r4, #0
 800e97e:	d1f7      	bne.n	800e970 <_fwalk_sglue+0xc>
 800e980:	4630      	mov	r0, r6
 800e982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e986:	89ab      	ldrh	r3, [r5, #12]
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d907      	bls.n	800e99c <_fwalk_sglue+0x38>
 800e98c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e990:	3301      	adds	r3, #1
 800e992:	d003      	beq.n	800e99c <_fwalk_sglue+0x38>
 800e994:	4629      	mov	r1, r5
 800e996:	4638      	mov	r0, r7
 800e998:	47c0      	blx	r8
 800e99a:	4306      	orrs	r6, r0
 800e99c:	3568      	adds	r5, #104	; 0x68
 800e99e:	e7e9      	b.n	800e974 <_fwalk_sglue+0x10>

0800e9a0 <iprintf>:
 800e9a0:	b40f      	push	{r0, r1, r2, r3}
 800e9a2:	b507      	push	{r0, r1, r2, lr}
 800e9a4:	4906      	ldr	r1, [pc, #24]	; (800e9c0 <iprintf+0x20>)
 800e9a6:	ab04      	add	r3, sp, #16
 800e9a8:	6808      	ldr	r0, [r1, #0]
 800e9aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ae:	6881      	ldr	r1, [r0, #8]
 800e9b0:	9301      	str	r3, [sp, #4]
 800e9b2:	f000 fb0b 	bl	800efcc <_vfiprintf_r>
 800e9b6:	b003      	add	sp, #12
 800e9b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9bc:	b004      	add	sp, #16
 800e9be:	4770      	bx	lr
 800e9c0:	200000e4 	.word	0x200000e4

0800e9c4 <_puts_r>:
 800e9c4:	6a03      	ldr	r3, [r0, #32]
 800e9c6:	b570      	push	{r4, r5, r6, lr}
 800e9c8:	4605      	mov	r5, r0
 800e9ca:	460e      	mov	r6, r1
 800e9cc:	6884      	ldr	r4, [r0, #8]
 800e9ce:	b90b      	cbnz	r3, 800e9d4 <_puts_r+0x10>
 800e9d0:	f7ff ffb0 	bl	800e934 <__sinit>
 800e9d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e9d6:	07db      	lsls	r3, r3, #31
 800e9d8:	d405      	bmi.n	800e9e6 <_puts_r+0x22>
 800e9da:	89a3      	ldrh	r3, [r4, #12]
 800e9dc:	0598      	lsls	r0, r3, #22
 800e9de:	d402      	bmi.n	800e9e6 <_puts_r+0x22>
 800e9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9e2:	f000 f99c 	bl	800ed1e <__retarget_lock_acquire_recursive>
 800e9e6:	89a3      	ldrh	r3, [r4, #12]
 800e9e8:	0719      	lsls	r1, r3, #28
 800e9ea:	d513      	bpl.n	800ea14 <_puts_r+0x50>
 800e9ec:	6923      	ldr	r3, [r4, #16]
 800e9ee:	b18b      	cbz	r3, 800ea14 <_puts_r+0x50>
 800e9f0:	3e01      	subs	r6, #1
 800e9f2:	68a3      	ldr	r3, [r4, #8]
 800e9f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e9f8:	3b01      	subs	r3, #1
 800e9fa:	60a3      	str	r3, [r4, #8]
 800e9fc:	b9e9      	cbnz	r1, 800ea3a <_puts_r+0x76>
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	da2e      	bge.n	800ea60 <_puts_r+0x9c>
 800ea02:	4622      	mov	r2, r4
 800ea04:	210a      	movs	r1, #10
 800ea06:	4628      	mov	r0, r5
 800ea08:	f000 f87b 	bl	800eb02 <__swbuf_r>
 800ea0c:	3001      	adds	r0, #1
 800ea0e:	d007      	beq.n	800ea20 <_puts_r+0x5c>
 800ea10:	250a      	movs	r5, #10
 800ea12:	e007      	b.n	800ea24 <_puts_r+0x60>
 800ea14:	4621      	mov	r1, r4
 800ea16:	4628      	mov	r0, r5
 800ea18:	f000 f8b0 	bl	800eb7c <__swsetup_r>
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	d0e7      	beq.n	800e9f0 <_puts_r+0x2c>
 800ea20:	f04f 35ff 	mov.w	r5, #4294967295
 800ea24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea26:	07da      	lsls	r2, r3, #31
 800ea28:	d405      	bmi.n	800ea36 <_puts_r+0x72>
 800ea2a:	89a3      	ldrh	r3, [r4, #12]
 800ea2c:	059b      	lsls	r3, r3, #22
 800ea2e:	d402      	bmi.n	800ea36 <_puts_r+0x72>
 800ea30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea32:	f000 f975 	bl	800ed20 <__retarget_lock_release_recursive>
 800ea36:	4628      	mov	r0, r5
 800ea38:	bd70      	pop	{r4, r5, r6, pc}
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	da04      	bge.n	800ea48 <_puts_r+0x84>
 800ea3e:	69a2      	ldr	r2, [r4, #24]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	dc06      	bgt.n	800ea52 <_puts_r+0x8e>
 800ea44:	290a      	cmp	r1, #10
 800ea46:	d004      	beq.n	800ea52 <_puts_r+0x8e>
 800ea48:	6823      	ldr	r3, [r4, #0]
 800ea4a:	1c5a      	adds	r2, r3, #1
 800ea4c:	6022      	str	r2, [r4, #0]
 800ea4e:	7019      	strb	r1, [r3, #0]
 800ea50:	e7cf      	b.n	800e9f2 <_puts_r+0x2e>
 800ea52:	4622      	mov	r2, r4
 800ea54:	4628      	mov	r0, r5
 800ea56:	f000 f854 	bl	800eb02 <__swbuf_r>
 800ea5a:	3001      	adds	r0, #1
 800ea5c:	d1c9      	bne.n	800e9f2 <_puts_r+0x2e>
 800ea5e:	e7df      	b.n	800ea20 <_puts_r+0x5c>
 800ea60:	6823      	ldr	r3, [r4, #0]
 800ea62:	250a      	movs	r5, #10
 800ea64:	1c5a      	adds	r2, r3, #1
 800ea66:	6022      	str	r2, [r4, #0]
 800ea68:	701d      	strb	r5, [r3, #0]
 800ea6a:	e7db      	b.n	800ea24 <_puts_r+0x60>

0800ea6c <puts>:
 800ea6c:	4b02      	ldr	r3, [pc, #8]	; (800ea78 <puts+0xc>)
 800ea6e:	4601      	mov	r1, r0
 800ea70:	6818      	ldr	r0, [r3, #0]
 800ea72:	f7ff bfa7 	b.w	800e9c4 <_puts_r>
 800ea76:	bf00      	nop
 800ea78:	200000e4 	.word	0x200000e4

0800ea7c <__sread>:
 800ea7c:	b510      	push	{r4, lr}
 800ea7e:	460c      	mov	r4, r1
 800ea80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea84:	f000 f8fc 	bl	800ec80 <_read_r>
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	bfab      	itete	ge
 800ea8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ea8e:	89a3      	ldrhlt	r3, [r4, #12]
 800ea90:	181b      	addge	r3, r3, r0
 800ea92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ea96:	bfac      	ite	ge
 800ea98:	6563      	strge	r3, [r4, #84]	; 0x54
 800ea9a:	81a3      	strhlt	r3, [r4, #12]
 800ea9c:	bd10      	pop	{r4, pc}

0800ea9e <__swrite>:
 800ea9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaa2:	461f      	mov	r7, r3
 800eaa4:	898b      	ldrh	r3, [r1, #12]
 800eaa6:	4605      	mov	r5, r0
 800eaa8:	460c      	mov	r4, r1
 800eaaa:	05db      	lsls	r3, r3, #23
 800eaac:	4616      	mov	r6, r2
 800eaae:	d505      	bpl.n	800eabc <__swrite+0x1e>
 800eab0:	2302      	movs	r3, #2
 800eab2:	2200      	movs	r2, #0
 800eab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eab8:	f000 f8d0 	bl	800ec5c <_lseek_r>
 800eabc:	89a3      	ldrh	r3, [r4, #12]
 800eabe:	4632      	mov	r2, r6
 800eac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eac4:	4628      	mov	r0, r5
 800eac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eaca:	81a3      	strh	r3, [r4, #12]
 800eacc:	463b      	mov	r3, r7
 800eace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ead2:	f000 b8e7 	b.w	800eca4 <_write_r>

0800ead6 <__sseek>:
 800ead6:	b510      	push	{r4, lr}
 800ead8:	460c      	mov	r4, r1
 800eada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eade:	f000 f8bd 	bl	800ec5c <_lseek_r>
 800eae2:	1c43      	adds	r3, r0, #1
 800eae4:	89a3      	ldrh	r3, [r4, #12]
 800eae6:	bf15      	itete	ne
 800eae8:	6560      	strne	r0, [r4, #84]	; 0x54
 800eaea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eaee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eaf2:	81a3      	strheq	r3, [r4, #12]
 800eaf4:	bf18      	it	ne
 800eaf6:	81a3      	strhne	r3, [r4, #12]
 800eaf8:	bd10      	pop	{r4, pc}

0800eafa <__sclose>:
 800eafa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eafe:	f000 b89d 	b.w	800ec3c <_close_r>

0800eb02 <__swbuf_r>:
 800eb02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb04:	460e      	mov	r6, r1
 800eb06:	4614      	mov	r4, r2
 800eb08:	4605      	mov	r5, r0
 800eb0a:	b118      	cbz	r0, 800eb14 <__swbuf_r+0x12>
 800eb0c:	6a03      	ldr	r3, [r0, #32]
 800eb0e:	b90b      	cbnz	r3, 800eb14 <__swbuf_r+0x12>
 800eb10:	f7ff ff10 	bl	800e934 <__sinit>
 800eb14:	69a3      	ldr	r3, [r4, #24]
 800eb16:	60a3      	str	r3, [r4, #8]
 800eb18:	89a3      	ldrh	r3, [r4, #12]
 800eb1a:	071a      	lsls	r2, r3, #28
 800eb1c:	d525      	bpl.n	800eb6a <__swbuf_r+0x68>
 800eb1e:	6923      	ldr	r3, [r4, #16]
 800eb20:	b31b      	cbz	r3, 800eb6a <__swbuf_r+0x68>
 800eb22:	6823      	ldr	r3, [r4, #0]
 800eb24:	b2f6      	uxtb	r6, r6
 800eb26:	6922      	ldr	r2, [r4, #16]
 800eb28:	4637      	mov	r7, r6
 800eb2a:	1a98      	subs	r0, r3, r2
 800eb2c:	6963      	ldr	r3, [r4, #20]
 800eb2e:	4283      	cmp	r3, r0
 800eb30:	dc04      	bgt.n	800eb3c <__swbuf_r+0x3a>
 800eb32:	4621      	mov	r1, r4
 800eb34:	4628      	mov	r0, r5
 800eb36:	f000 fd79 	bl	800f62c <_fflush_r>
 800eb3a:	b9e0      	cbnz	r0, 800eb76 <__swbuf_r+0x74>
 800eb3c:	68a3      	ldr	r3, [r4, #8]
 800eb3e:	3b01      	subs	r3, #1
 800eb40:	60a3      	str	r3, [r4, #8]
 800eb42:	6823      	ldr	r3, [r4, #0]
 800eb44:	1c5a      	adds	r2, r3, #1
 800eb46:	6022      	str	r2, [r4, #0]
 800eb48:	701e      	strb	r6, [r3, #0]
 800eb4a:	1c43      	adds	r3, r0, #1
 800eb4c:	6962      	ldr	r2, [r4, #20]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d004      	beq.n	800eb5c <__swbuf_r+0x5a>
 800eb52:	89a3      	ldrh	r3, [r4, #12]
 800eb54:	07db      	lsls	r3, r3, #31
 800eb56:	d506      	bpl.n	800eb66 <__swbuf_r+0x64>
 800eb58:	2e0a      	cmp	r6, #10
 800eb5a:	d104      	bne.n	800eb66 <__swbuf_r+0x64>
 800eb5c:	4621      	mov	r1, r4
 800eb5e:	4628      	mov	r0, r5
 800eb60:	f000 fd64 	bl	800f62c <_fflush_r>
 800eb64:	b938      	cbnz	r0, 800eb76 <__swbuf_r+0x74>
 800eb66:	4638      	mov	r0, r7
 800eb68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb6a:	4621      	mov	r1, r4
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	f000 f805 	bl	800eb7c <__swsetup_r>
 800eb72:	2800      	cmp	r0, #0
 800eb74:	d0d5      	beq.n	800eb22 <__swbuf_r+0x20>
 800eb76:	f04f 37ff 	mov.w	r7, #4294967295
 800eb7a:	e7f4      	b.n	800eb66 <__swbuf_r+0x64>

0800eb7c <__swsetup_r>:
 800eb7c:	b538      	push	{r3, r4, r5, lr}
 800eb7e:	4b2a      	ldr	r3, [pc, #168]	; (800ec28 <__swsetup_r+0xac>)
 800eb80:	4605      	mov	r5, r0
 800eb82:	460c      	mov	r4, r1
 800eb84:	6818      	ldr	r0, [r3, #0]
 800eb86:	b118      	cbz	r0, 800eb90 <__swsetup_r+0x14>
 800eb88:	6a03      	ldr	r3, [r0, #32]
 800eb8a:	b90b      	cbnz	r3, 800eb90 <__swsetup_r+0x14>
 800eb8c:	f7ff fed2 	bl	800e934 <__sinit>
 800eb90:	89a3      	ldrh	r3, [r4, #12]
 800eb92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb96:	0718      	lsls	r0, r3, #28
 800eb98:	d422      	bmi.n	800ebe0 <__swsetup_r+0x64>
 800eb9a:	06d9      	lsls	r1, r3, #27
 800eb9c:	d407      	bmi.n	800ebae <__swsetup_r+0x32>
 800eb9e:	2309      	movs	r3, #9
 800eba0:	602b      	str	r3, [r5, #0]
 800eba2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eba6:	f04f 30ff 	mov.w	r0, #4294967295
 800ebaa:	81a3      	strh	r3, [r4, #12]
 800ebac:	e034      	b.n	800ec18 <__swsetup_r+0x9c>
 800ebae:	0758      	lsls	r0, r3, #29
 800ebb0:	d512      	bpl.n	800ebd8 <__swsetup_r+0x5c>
 800ebb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebb4:	b141      	cbz	r1, 800ebc8 <__swsetup_r+0x4c>
 800ebb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebba:	4299      	cmp	r1, r3
 800ebbc:	d002      	beq.n	800ebc4 <__swsetup_r+0x48>
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	f000 f8da 	bl	800ed78 <_free_r>
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	6363      	str	r3, [r4, #52]	; 0x34
 800ebc8:	89a3      	ldrh	r3, [r4, #12]
 800ebca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ebce:	81a3      	strh	r3, [r4, #12]
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	6063      	str	r3, [r4, #4]
 800ebd4:	6923      	ldr	r3, [r4, #16]
 800ebd6:	6023      	str	r3, [r4, #0]
 800ebd8:	89a3      	ldrh	r3, [r4, #12]
 800ebda:	f043 0308 	orr.w	r3, r3, #8
 800ebde:	81a3      	strh	r3, [r4, #12]
 800ebe0:	6923      	ldr	r3, [r4, #16]
 800ebe2:	b94b      	cbnz	r3, 800ebf8 <__swsetup_r+0x7c>
 800ebe4:	89a3      	ldrh	r3, [r4, #12]
 800ebe6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ebea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebee:	d003      	beq.n	800ebf8 <__swsetup_r+0x7c>
 800ebf0:	4621      	mov	r1, r4
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	f000 fd79 	bl	800f6ea <__smakebuf_r>
 800ebf8:	89a0      	ldrh	r0, [r4, #12]
 800ebfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ebfe:	f010 0301 	ands.w	r3, r0, #1
 800ec02:	d00a      	beq.n	800ec1a <__swsetup_r+0x9e>
 800ec04:	2300      	movs	r3, #0
 800ec06:	60a3      	str	r3, [r4, #8]
 800ec08:	6963      	ldr	r3, [r4, #20]
 800ec0a:	425b      	negs	r3, r3
 800ec0c:	61a3      	str	r3, [r4, #24]
 800ec0e:	6923      	ldr	r3, [r4, #16]
 800ec10:	b943      	cbnz	r3, 800ec24 <__swsetup_r+0xa8>
 800ec12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec16:	d1c4      	bne.n	800eba2 <__swsetup_r+0x26>
 800ec18:	bd38      	pop	{r3, r4, r5, pc}
 800ec1a:	0781      	lsls	r1, r0, #30
 800ec1c:	bf58      	it	pl
 800ec1e:	6963      	ldrpl	r3, [r4, #20]
 800ec20:	60a3      	str	r3, [r4, #8]
 800ec22:	e7f4      	b.n	800ec0e <__swsetup_r+0x92>
 800ec24:	2000      	movs	r0, #0
 800ec26:	e7f7      	b.n	800ec18 <__swsetup_r+0x9c>
 800ec28:	200000e4 	.word	0x200000e4

0800ec2c <memset>:
 800ec2c:	4402      	add	r2, r0
 800ec2e:	4603      	mov	r3, r0
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d100      	bne.n	800ec36 <memset+0xa>
 800ec34:	4770      	bx	lr
 800ec36:	f803 1b01 	strb.w	r1, [r3], #1
 800ec3a:	e7f9      	b.n	800ec30 <memset+0x4>

0800ec3c <_close_r>:
 800ec3c:	b538      	push	{r3, r4, r5, lr}
 800ec3e:	2300      	movs	r3, #0
 800ec40:	4d05      	ldr	r5, [pc, #20]	; (800ec58 <_close_r+0x1c>)
 800ec42:	4604      	mov	r4, r0
 800ec44:	4608      	mov	r0, r1
 800ec46:	602b      	str	r3, [r5, #0]
 800ec48:	f7f2 f82d 	bl	8000ca6 <_close>
 800ec4c:	1c43      	adds	r3, r0, #1
 800ec4e:	d102      	bne.n	800ec56 <_close_r+0x1a>
 800ec50:	682b      	ldr	r3, [r5, #0]
 800ec52:	b103      	cbz	r3, 800ec56 <_close_r+0x1a>
 800ec54:	6023      	str	r3, [r4, #0]
 800ec56:	bd38      	pop	{r3, r4, r5, pc}
 800ec58:	20015ad4 	.word	0x20015ad4

0800ec5c <_lseek_r>:
 800ec5c:	b538      	push	{r3, r4, r5, lr}
 800ec5e:	4604      	mov	r4, r0
 800ec60:	4d06      	ldr	r5, [pc, #24]	; (800ec7c <_lseek_r+0x20>)
 800ec62:	4608      	mov	r0, r1
 800ec64:	4611      	mov	r1, r2
 800ec66:	2200      	movs	r2, #0
 800ec68:	602a      	str	r2, [r5, #0]
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	f7f2 f842 	bl	8000cf4 <_lseek>
 800ec70:	1c43      	adds	r3, r0, #1
 800ec72:	d102      	bne.n	800ec7a <_lseek_r+0x1e>
 800ec74:	682b      	ldr	r3, [r5, #0]
 800ec76:	b103      	cbz	r3, 800ec7a <_lseek_r+0x1e>
 800ec78:	6023      	str	r3, [r4, #0]
 800ec7a:	bd38      	pop	{r3, r4, r5, pc}
 800ec7c:	20015ad4 	.word	0x20015ad4

0800ec80 <_read_r>:
 800ec80:	b538      	push	{r3, r4, r5, lr}
 800ec82:	4604      	mov	r4, r0
 800ec84:	4d06      	ldr	r5, [pc, #24]	; (800eca0 <_read_r+0x20>)
 800ec86:	4608      	mov	r0, r1
 800ec88:	4611      	mov	r1, r2
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	602a      	str	r2, [r5, #0]
 800ec8e:	461a      	mov	r2, r3
 800ec90:	f7f1 ffd0 	bl	8000c34 <_read>
 800ec94:	1c43      	adds	r3, r0, #1
 800ec96:	d102      	bne.n	800ec9e <_read_r+0x1e>
 800ec98:	682b      	ldr	r3, [r5, #0]
 800ec9a:	b103      	cbz	r3, 800ec9e <_read_r+0x1e>
 800ec9c:	6023      	str	r3, [r4, #0]
 800ec9e:	bd38      	pop	{r3, r4, r5, pc}
 800eca0:	20015ad4 	.word	0x20015ad4

0800eca4 <_write_r>:
 800eca4:	b538      	push	{r3, r4, r5, lr}
 800eca6:	4604      	mov	r4, r0
 800eca8:	4d06      	ldr	r5, [pc, #24]	; (800ecc4 <_write_r+0x20>)
 800ecaa:	4608      	mov	r0, r1
 800ecac:	4611      	mov	r1, r2
 800ecae:	2200      	movs	r2, #0
 800ecb0:	602a      	str	r2, [r5, #0]
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	f7f1 ffdb 	bl	8000c6e <_write>
 800ecb8:	1c43      	adds	r3, r0, #1
 800ecba:	d102      	bne.n	800ecc2 <_write_r+0x1e>
 800ecbc:	682b      	ldr	r3, [r5, #0]
 800ecbe:	b103      	cbz	r3, 800ecc2 <_write_r+0x1e>
 800ecc0:	6023      	str	r3, [r4, #0]
 800ecc2:	bd38      	pop	{r3, r4, r5, pc}
 800ecc4:	20015ad4 	.word	0x20015ad4

0800ecc8 <__errno>:
 800ecc8:	4b01      	ldr	r3, [pc, #4]	; (800ecd0 <__errno+0x8>)
 800ecca:	6818      	ldr	r0, [r3, #0]
 800eccc:	4770      	bx	lr
 800ecce:	bf00      	nop
 800ecd0:	200000e4 	.word	0x200000e4

0800ecd4 <__libc_init_array>:
 800ecd4:	b570      	push	{r4, r5, r6, lr}
 800ecd6:	4d0d      	ldr	r5, [pc, #52]	; (800ed0c <__libc_init_array+0x38>)
 800ecd8:	2600      	movs	r6, #0
 800ecda:	4c0d      	ldr	r4, [pc, #52]	; (800ed10 <__libc_init_array+0x3c>)
 800ecdc:	1b64      	subs	r4, r4, r5
 800ecde:	10a4      	asrs	r4, r4, #2
 800ece0:	42a6      	cmp	r6, r4
 800ece2:	d109      	bne.n	800ecf8 <__libc_init_array+0x24>
 800ece4:	4d0b      	ldr	r5, [pc, #44]	; (800ed14 <__libc_init_array+0x40>)
 800ece6:	2600      	movs	r6, #0
 800ece8:	4c0b      	ldr	r4, [pc, #44]	; (800ed18 <__libc_init_array+0x44>)
 800ecea:	f000 fdc7 	bl	800f87c <_init>
 800ecee:	1b64      	subs	r4, r4, r5
 800ecf0:	10a4      	asrs	r4, r4, #2
 800ecf2:	42a6      	cmp	r6, r4
 800ecf4:	d105      	bne.n	800ed02 <__libc_init_array+0x2e>
 800ecf6:	bd70      	pop	{r4, r5, r6, pc}
 800ecf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecfc:	3601      	adds	r6, #1
 800ecfe:	4798      	blx	r3
 800ed00:	e7ee      	b.n	800ece0 <__libc_init_array+0xc>
 800ed02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed06:	3601      	adds	r6, #1
 800ed08:	4798      	blx	r3
 800ed0a:	e7f2      	b.n	800ecf2 <__libc_init_array+0x1e>
 800ed0c:	0800fab4 	.word	0x0800fab4
 800ed10:	0800fab4 	.word	0x0800fab4
 800ed14:	0800fab4 	.word	0x0800fab4
 800ed18:	0800fab8 	.word	0x0800fab8

0800ed1c <__retarget_lock_init_recursive>:
 800ed1c:	4770      	bx	lr

0800ed1e <__retarget_lock_acquire_recursive>:
 800ed1e:	4770      	bx	lr

0800ed20 <__retarget_lock_release_recursive>:
 800ed20:	4770      	bx	lr

0800ed22 <memcpy>:
 800ed22:	440a      	add	r2, r1
 800ed24:	1e43      	subs	r3, r0, #1
 800ed26:	4291      	cmp	r1, r2
 800ed28:	d100      	bne.n	800ed2c <memcpy+0xa>
 800ed2a:	4770      	bx	lr
 800ed2c:	b510      	push	{r4, lr}
 800ed2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed32:	4291      	cmp	r1, r2
 800ed34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed38:	d1f9      	bne.n	800ed2e <memcpy+0xc>
 800ed3a:	bd10      	pop	{r4, pc}

0800ed3c <__assert_func>:
 800ed3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed3e:	4614      	mov	r4, r2
 800ed40:	461a      	mov	r2, r3
 800ed42:	4b09      	ldr	r3, [pc, #36]	; (800ed68 <__assert_func+0x2c>)
 800ed44:	4605      	mov	r5, r0
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	68d8      	ldr	r0, [r3, #12]
 800ed4a:	b14c      	cbz	r4, 800ed60 <__assert_func+0x24>
 800ed4c:	4b07      	ldr	r3, [pc, #28]	; (800ed6c <__assert_func+0x30>)
 800ed4e:	9100      	str	r1, [sp, #0]
 800ed50:	4907      	ldr	r1, [pc, #28]	; (800ed70 <__assert_func+0x34>)
 800ed52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ed56:	462b      	mov	r3, r5
 800ed58:	f000 fc90 	bl	800f67c <fiprintf>
 800ed5c:	f000 fd42 	bl	800f7e4 <abort>
 800ed60:	4b04      	ldr	r3, [pc, #16]	; (800ed74 <__assert_func+0x38>)
 800ed62:	461c      	mov	r4, r3
 800ed64:	e7f3      	b.n	800ed4e <__assert_func+0x12>
 800ed66:	bf00      	nop
 800ed68:	200000e4 	.word	0x200000e4
 800ed6c:	0800fa43 	.word	0x0800fa43
 800ed70:	0800fa50 	.word	0x0800fa50
 800ed74:	0800fa7e 	.word	0x0800fa7e

0800ed78 <_free_r>:
 800ed78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed7a:	2900      	cmp	r1, #0
 800ed7c:	d043      	beq.n	800ee06 <_free_r+0x8e>
 800ed7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed82:	1f0c      	subs	r4, r1, #4
 800ed84:	9001      	str	r0, [sp, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	bfb8      	it	lt
 800ed8a:	18e4      	addlt	r4, r4, r3
 800ed8c:	f000 f8e8 	bl	800ef60 <__malloc_lock>
 800ed90:	4a1e      	ldr	r2, [pc, #120]	; (800ee0c <_free_r+0x94>)
 800ed92:	9801      	ldr	r0, [sp, #4]
 800ed94:	6813      	ldr	r3, [r2, #0]
 800ed96:	b933      	cbnz	r3, 800eda6 <_free_r+0x2e>
 800ed98:	6063      	str	r3, [r4, #4]
 800ed9a:	6014      	str	r4, [r2, #0]
 800ed9c:	b003      	add	sp, #12
 800ed9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eda2:	f000 b8e3 	b.w	800ef6c <__malloc_unlock>
 800eda6:	42a3      	cmp	r3, r4
 800eda8:	d908      	bls.n	800edbc <_free_r+0x44>
 800edaa:	6825      	ldr	r5, [r4, #0]
 800edac:	1961      	adds	r1, r4, r5
 800edae:	428b      	cmp	r3, r1
 800edb0:	bf01      	itttt	eq
 800edb2:	6819      	ldreq	r1, [r3, #0]
 800edb4:	685b      	ldreq	r3, [r3, #4]
 800edb6:	1949      	addeq	r1, r1, r5
 800edb8:	6021      	streq	r1, [r4, #0]
 800edba:	e7ed      	b.n	800ed98 <_free_r+0x20>
 800edbc:	461a      	mov	r2, r3
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	b10b      	cbz	r3, 800edc6 <_free_r+0x4e>
 800edc2:	42a3      	cmp	r3, r4
 800edc4:	d9fa      	bls.n	800edbc <_free_r+0x44>
 800edc6:	6811      	ldr	r1, [r2, #0]
 800edc8:	1855      	adds	r5, r2, r1
 800edca:	42a5      	cmp	r5, r4
 800edcc:	d10b      	bne.n	800ede6 <_free_r+0x6e>
 800edce:	6824      	ldr	r4, [r4, #0]
 800edd0:	4421      	add	r1, r4
 800edd2:	1854      	adds	r4, r2, r1
 800edd4:	6011      	str	r1, [r2, #0]
 800edd6:	42a3      	cmp	r3, r4
 800edd8:	d1e0      	bne.n	800ed9c <_free_r+0x24>
 800edda:	681c      	ldr	r4, [r3, #0]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	440c      	add	r4, r1
 800ede0:	6053      	str	r3, [r2, #4]
 800ede2:	6014      	str	r4, [r2, #0]
 800ede4:	e7da      	b.n	800ed9c <_free_r+0x24>
 800ede6:	d902      	bls.n	800edee <_free_r+0x76>
 800ede8:	230c      	movs	r3, #12
 800edea:	6003      	str	r3, [r0, #0]
 800edec:	e7d6      	b.n	800ed9c <_free_r+0x24>
 800edee:	6825      	ldr	r5, [r4, #0]
 800edf0:	1961      	adds	r1, r4, r5
 800edf2:	428b      	cmp	r3, r1
 800edf4:	bf02      	ittt	eq
 800edf6:	6819      	ldreq	r1, [r3, #0]
 800edf8:	685b      	ldreq	r3, [r3, #4]
 800edfa:	1949      	addeq	r1, r1, r5
 800edfc:	6063      	str	r3, [r4, #4]
 800edfe:	bf08      	it	eq
 800ee00:	6021      	streq	r1, [r4, #0]
 800ee02:	6054      	str	r4, [r2, #4]
 800ee04:	e7ca      	b.n	800ed9c <_free_r+0x24>
 800ee06:	b003      	add	sp, #12
 800ee08:	bd30      	pop	{r4, r5, pc}
 800ee0a:	bf00      	nop
 800ee0c:	20015adc 	.word	0x20015adc

0800ee10 <malloc>:
 800ee10:	4b02      	ldr	r3, [pc, #8]	; (800ee1c <malloc+0xc>)
 800ee12:	4601      	mov	r1, r0
 800ee14:	6818      	ldr	r0, [r3, #0]
 800ee16:	f000 b823 	b.w	800ee60 <_malloc_r>
 800ee1a:	bf00      	nop
 800ee1c:	200000e4 	.word	0x200000e4

0800ee20 <sbrk_aligned>:
 800ee20:	b570      	push	{r4, r5, r6, lr}
 800ee22:	4e0e      	ldr	r6, [pc, #56]	; (800ee5c <sbrk_aligned+0x3c>)
 800ee24:	460c      	mov	r4, r1
 800ee26:	4605      	mov	r5, r0
 800ee28:	6831      	ldr	r1, [r6, #0]
 800ee2a:	b911      	cbnz	r1, 800ee32 <sbrk_aligned+0x12>
 800ee2c:	f000 fcbc 	bl	800f7a8 <_sbrk_r>
 800ee30:	6030      	str	r0, [r6, #0]
 800ee32:	4621      	mov	r1, r4
 800ee34:	4628      	mov	r0, r5
 800ee36:	f000 fcb7 	bl	800f7a8 <_sbrk_r>
 800ee3a:	1c43      	adds	r3, r0, #1
 800ee3c:	d00a      	beq.n	800ee54 <sbrk_aligned+0x34>
 800ee3e:	1cc4      	adds	r4, r0, #3
 800ee40:	f024 0403 	bic.w	r4, r4, #3
 800ee44:	42a0      	cmp	r0, r4
 800ee46:	d007      	beq.n	800ee58 <sbrk_aligned+0x38>
 800ee48:	1a21      	subs	r1, r4, r0
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f000 fcac 	bl	800f7a8 <_sbrk_r>
 800ee50:	3001      	adds	r0, #1
 800ee52:	d101      	bne.n	800ee58 <sbrk_aligned+0x38>
 800ee54:	f04f 34ff 	mov.w	r4, #4294967295
 800ee58:	4620      	mov	r0, r4
 800ee5a:	bd70      	pop	{r4, r5, r6, pc}
 800ee5c:	20015ae0 	.word	0x20015ae0

0800ee60 <_malloc_r>:
 800ee60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee64:	1ccd      	adds	r5, r1, #3
 800ee66:	4607      	mov	r7, r0
 800ee68:	f025 0503 	bic.w	r5, r5, #3
 800ee6c:	3508      	adds	r5, #8
 800ee6e:	2d0c      	cmp	r5, #12
 800ee70:	bf38      	it	cc
 800ee72:	250c      	movcc	r5, #12
 800ee74:	2d00      	cmp	r5, #0
 800ee76:	db01      	blt.n	800ee7c <_malloc_r+0x1c>
 800ee78:	42a9      	cmp	r1, r5
 800ee7a:	d905      	bls.n	800ee88 <_malloc_r+0x28>
 800ee7c:	230c      	movs	r3, #12
 800ee7e:	2600      	movs	r6, #0
 800ee80:	603b      	str	r3, [r7, #0]
 800ee82:	4630      	mov	r0, r6
 800ee84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ef5c <_malloc_r+0xfc>
 800ee8c:	f000 f868 	bl	800ef60 <__malloc_lock>
 800ee90:	f8d8 3000 	ldr.w	r3, [r8]
 800ee94:	461c      	mov	r4, r3
 800ee96:	bb5c      	cbnz	r4, 800eef0 <_malloc_r+0x90>
 800ee98:	4629      	mov	r1, r5
 800ee9a:	4638      	mov	r0, r7
 800ee9c:	f7ff ffc0 	bl	800ee20 <sbrk_aligned>
 800eea0:	1c43      	adds	r3, r0, #1
 800eea2:	4604      	mov	r4, r0
 800eea4:	d155      	bne.n	800ef52 <_malloc_r+0xf2>
 800eea6:	f8d8 4000 	ldr.w	r4, [r8]
 800eeaa:	4626      	mov	r6, r4
 800eeac:	2e00      	cmp	r6, #0
 800eeae:	d145      	bne.n	800ef3c <_malloc_r+0xdc>
 800eeb0:	2c00      	cmp	r4, #0
 800eeb2:	d048      	beq.n	800ef46 <_malloc_r+0xe6>
 800eeb4:	6823      	ldr	r3, [r4, #0]
 800eeb6:	4631      	mov	r1, r6
 800eeb8:	4638      	mov	r0, r7
 800eeba:	eb04 0903 	add.w	r9, r4, r3
 800eebe:	f000 fc73 	bl	800f7a8 <_sbrk_r>
 800eec2:	4581      	cmp	r9, r0
 800eec4:	d13f      	bne.n	800ef46 <_malloc_r+0xe6>
 800eec6:	6821      	ldr	r1, [r4, #0]
 800eec8:	4638      	mov	r0, r7
 800eeca:	1a6d      	subs	r5, r5, r1
 800eecc:	4629      	mov	r1, r5
 800eece:	f7ff ffa7 	bl	800ee20 <sbrk_aligned>
 800eed2:	3001      	adds	r0, #1
 800eed4:	d037      	beq.n	800ef46 <_malloc_r+0xe6>
 800eed6:	6823      	ldr	r3, [r4, #0]
 800eed8:	442b      	add	r3, r5
 800eeda:	6023      	str	r3, [r4, #0]
 800eedc:	f8d8 3000 	ldr.w	r3, [r8]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d038      	beq.n	800ef56 <_malloc_r+0xf6>
 800eee4:	685a      	ldr	r2, [r3, #4]
 800eee6:	42a2      	cmp	r2, r4
 800eee8:	d12b      	bne.n	800ef42 <_malloc_r+0xe2>
 800eeea:	2200      	movs	r2, #0
 800eeec:	605a      	str	r2, [r3, #4]
 800eeee:	e00f      	b.n	800ef10 <_malloc_r+0xb0>
 800eef0:	6822      	ldr	r2, [r4, #0]
 800eef2:	1b52      	subs	r2, r2, r5
 800eef4:	d41f      	bmi.n	800ef36 <_malloc_r+0xd6>
 800eef6:	2a0b      	cmp	r2, #11
 800eef8:	d917      	bls.n	800ef2a <_malloc_r+0xca>
 800eefa:	1961      	adds	r1, r4, r5
 800eefc:	42a3      	cmp	r3, r4
 800eefe:	6025      	str	r5, [r4, #0]
 800ef00:	bf18      	it	ne
 800ef02:	6059      	strne	r1, [r3, #4]
 800ef04:	6863      	ldr	r3, [r4, #4]
 800ef06:	bf08      	it	eq
 800ef08:	f8c8 1000 	streq.w	r1, [r8]
 800ef0c:	5162      	str	r2, [r4, r5]
 800ef0e:	604b      	str	r3, [r1, #4]
 800ef10:	f104 060b 	add.w	r6, r4, #11
 800ef14:	4638      	mov	r0, r7
 800ef16:	f000 f829 	bl	800ef6c <__malloc_unlock>
 800ef1a:	1d23      	adds	r3, r4, #4
 800ef1c:	f026 0607 	bic.w	r6, r6, #7
 800ef20:	1af2      	subs	r2, r6, r3
 800ef22:	d0ae      	beq.n	800ee82 <_malloc_r+0x22>
 800ef24:	1b9b      	subs	r3, r3, r6
 800ef26:	50a3      	str	r3, [r4, r2]
 800ef28:	e7ab      	b.n	800ee82 <_malloc_r+0x22>
 800ef2a:	42a3      	cmp	r3, r4
 800ef2c:	6862      	ldr	r2, [r4, #4]
 800ef2e:	d1dd      	bne.n	800eeec <_malloc_r+0x8c>
 800ef30:	f8c8 2000 	str.w	r2, [r8]
 800ef34:	e7ec      	b.n	800ef10 <_malloc_r+0xb0>
 800ef36:	4623      	mov	r3, r4
 800ef38:	6864      	ldr	r4, [r4, #4]
 800ef3a:	e7ac      	b.n	800ee96 <_malloc_r+0x36>
 800ef3c:	4634      	mov	r4, r6
 800ef3e:	6876      	ldr	r6, [r6, #4]
 800ef40:	e7b4      	b.n	800eeac <_malloc_r+0x4c>
 800ef42:	4613      	mov	r3, r2
 800ef44:	e7cc      	b.n	800eee0 <_malloc_r+0x80>
 800ef46:	230c      	movs	r3, #12
 800ef48:	4638      	mov	r0, r7
 800ef4a:	603b      	str	r3, [r7, #0]
 800ef4c:	f000 f80e 	bl	800ef6c <__malloc_unlock>
 800ef50:	e797      	b.n	800ee82 <_malloc_r+0x22>
 800ef52:	6025      	str	r5, [r4, #0]
 800ef54:	e7dc      	b.n	800ef10 <_malloc_r+0xb0>
 800ef56:	605b      	str	r3, [r3, #4]
 800ef58:	deff      	udf	#255	; 0xff
 800ef5a:	bf00      	nop
 800ef5c:	20015adc 	.word	0x20015adc

0800ef60 <__malloc_lock>:
 800ef60:	4801      	ldr	r0, [pc, #4]	; (800ef68 <__malloc_lock+0x8>)
 800ef62:	f7ff bedc 	b.w	800ed1e <__retarget_lock_acquire_recursive>
 800ef66:	bf00      	nop
 800ef68:	20015ad8 	.word	0x20015ad8

0800ef6c <__malloc_unlock>:
 800ef6c:	4801      	ldr	r0, [pc, #4]	; (800ef74 <__malloc_unlock+0x8>)
 800ef6e:	f7ff bed7 	b.w	800ed20 <__retarget_lock_release_recursive>
 800ef72:	bf00      	nop
 800ef74:	20015ad8 	.word	0x20015ad8

0800ef78 <__sfputc_r>:
 800ef78:	6893      	ldr	r3, [r2, #8]
 800ef7a:	3b01      	subs	r3, #1
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	6093      	str	r3, [r2, #8]
 800ef80:	b410      	push	{r4}
 800ef82:	da08      	bge.n	800ef96 <__sfputc_r+0x1e>
 800ef84:	6994      	ldr	r4, [r2, #24]
 800ef86:	42a3      	cmp	r3, r4
 800ef88:	db01      	blt.n	800ef8e <__sfputc_r+0x16>
 800ef8a:	290a      	cmp	r1, #10
 800ef8c:	d103      	bne.n	800ef96 <__sfputc_r+0x1e>
 800ef8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef92:	f7ff bdb6 	b.w	800eb02 <__swbuf_r>
 800ef96:	6813      	ldr	r3, [r2, #0]
 800ef98:	1c58      	adds	r0, r3, #1
 800ef9a:	6010      	str	r0, [r2, #0]
 800ef9c:	4608      	mov	r0, r1
 800ef9e:	7019      	strb	r1, [r3, #0]
 800efa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efa4:	4770      	bx	lr

0800efa6 <__sfputs_r>:
 800efa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa8:	4606      	mov	r6, r0
 800efaa:	460f      	mov	r7, r1
 800efac:	4614      	mov	r4, r2
 800efae:	18d5      	adds	r5, r2, r3
 800efb0:	42ac      	cmp	r4, r5
 800efb2:	d101      	bne.n	800efb8 <__sfputs_r+0x12>
 800efb4:	2000      	movs	r0, #0
 800efb6:	e007      	b.n	800efc8 <__sfputs_r+0x22>
 800efb8:	463a      	mov	r2, r7
 800efba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efbe:	4630      	mov	r0, r6
 800efc0:	f7ff ffda 	bl	800ef78 <__sfputc_r>
 800efc4:	1c43      	adds	r3, r0, #1
 800efc6:	d1f3      	bne.n	800efb0 <__sfputs_r+0xa>
 800efc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800efcc <_vfiprintf_r>:
 800efcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd0:	460d      	mov	r5, r1
 800efd2:	b09d      	sub	sp, #116	; 0x74
 800efd4:	4614      	mov	r4, r2
 800efd6:	4698      	mov	r8, r3
 800efd8:	4606      	mov	r6, r0
 800efda:	b118      	cbz	r0, 800efe4 <_vfiprintf_r+0x18>
 800efdc:	6a03      	ldr	r3, [r0, #32]
 800efde:	b90b      	cbnz	r3, 800efe4 <_vfiprintf_r+0x18>
 800efe0:	f7ff fca8 	bl	800e934 <__sinit>
 800efe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efe6:	07d9      	lsls	r1, r3, #31
 800efe8:	d405      	bmi.n	800eff6 <_vfiprintf_r+0x2a>
 800efea:	89ab      	ldrh	r3, [r5, #12]
 800efec:	059a      	lsls	r2, r3, #22
 800efee:	d402      	bmi.n	800eff6 <_vfiprintf_r+0x2a>
 800eff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eff2:	f7ff fe94 	bl	800ed1e <__retarget_lock_acquire_recursive>
 800eff6:	89ab      	ldrh	r3, [r5, #12]
 800eff8:	071b      	lsls	r3, r3, #28
 800effa:	d501      	bpl.n	800f000 <_vfiprintf_r+0x34>
 800effc:	692b      	ldr	r3, [r5, #16]
 800effe:	b99b      	cbnz	r3, 800f028 <_vfiprintf_r+0x5c>
 800f000:	4629      	mov	r1, r5
 800f002:	4630      	mov	r0, r6
 800f004:	f7ff fdba 	bl	800eb7c <__swsetup_r>
 800f008:	b170      	cbz	r0, 800f028 <_vfiprintf_r+0x5c>
 800f00a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f00c:	07dc      	lsls	r4, r3, #31
 800f00e:	d504      	bpl.n	800f01a <_vfiprintf_r+0x4e>
 800f010:	f04f 30ff 	mov.w	r0, #4294967295
 800f014:	b01d      	add	sp, #116	; 0x74
 800f016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f01a:	89ab      	ldrh	r3, [r5, #12]
 800f01c:	0598      	lsls	r0, r3, #22
 800f01e:	d4f7      	bmi.n	800f010 <_vfiprintf_r+0x44>
 800f020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f022:	f7ff fe7d 	bl	800ed20 <__retarget_lock_release_recursive>
 800f026:	e7f3      	b.n	800f010 <_vfiprintf_r+0x44>
 800f028:	2300      	movs	r3, #0
 800f02a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f02e:	f04f 0901 	mov.w	r9, #1
 800f032:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800f1ec <_vfiprintf_r+0x220>
 800f036:	9309      	str	r3, [sp, #36]	; 0x24
 800f038:	2320      	movs	r3, #32
 800f03a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f03e:	2330      	movs	r3, #48	; 0x30
 800f040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f044:	4623      	mov	r3, r4
 800f046:	469a      	mov	sl, r3
 800f048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f04c:	b10a      	cbz	r2, 800f052 <_vfiprintf_r+0x86>
 800f04e:	2a25      	cmp	r2, #37	; 0x25
 800f050:	d1f9      	bne.n	800f046 <_vfiprintf_r+0x7a>
 800f052:	ebba 0b04 	subs.w	fp, sl, r4
 800f056:	d00b      	beq.n	800f070 <_vfiprintf_r+0xa4>
 800f058:	465b      	mov	r3, fp
 800f05a:	4622      	mov	r2, r4
 800f05c:	4629      	mov	r1, r5
 800f05e:	4630      	mov	r0, r6
 800f060:	f7ff ffa1 	bl	800efa6 <__sfputs_r>
 800f064:	3001      	adds	r0, #1
 800f066:	f000 80a9 	beq.w	800f1bc <_vfiprintf_r+0x1f0>
 800f06a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f06c:	445a      	add	r2, fp
 800f06e:	9209      	str	r2, [sp, #36]	; 0x24
 800f070:	f89a 3000 	ldrb.w	r3, [sl]
 800f074:	2b00      	cmp	r3, #0
 800f076:	f000 80a1 	beq.w	800f1bc <_vfiprintf_r+0x1f0>
 800f07a:	2300      	movs	r3, #0
 800f07c:	f04f 32ff 	mov.w	r2, #4294967295
 800f080:	f10a 0a01 	add.w	sl, sl, #1
 800f084:	9304      	str	r3, [sp, #16]
 800f086:	9307      	str	r3, [sp, #28]
 800f088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f08c:	931a      	str	r3, [sp, #104]	; 0x68
 800f08e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f092:	4654      	mov	r4, sl
 800f094:	2205      	movs	r2, #5
 800f096:	4855      	ldr	r0, [pc, #340]	; (800f1ec <_vfiprintf_r+0x220>)
 800f098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f09c:	f000 fb94 	bl	800f7c8 <memchr>
 800f0a0:	9a04      	ldr	r2, [sp, #16]
 800f0a2:	b9d8      	cbnz	r0, 800f0dc <_vfiprintf_r+0x110>
 800f0a4:	06d1      	lsls	r1, r2, #27
 800f0a6:	bf44      	itt	mi
 800f0a8:	2320      	movmi	r3, #32
 800f0aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0ae:	0713      	lsls	r3, r2, #28
 800f0b0:	bf44      	itt	mi
 800f0b2:	232b      	movmi	r3, #43	; 0x2b
 800f0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f0bc:	2b2a      	cmp	r3, #42	; 0x2a
 800f0be:	d015      	beq.n	800f0ec <_vfiprintf_r+0x120>
 800f0c0:	9a07      	ldr	r2, [sp, #28]
 800f0c2:	4654      	mov	r4, sl
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	f04f 0c0a 	mov.w	ip, #10
 800f0ca:	4621      	mov	r1, r4
 800f0cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0d0:	3b30      	subs	r3, #48	; 0x30
 800f0d2:	2b09      	cmp	r3, #9
 800f0d4:	d94d      	bls.n	800f172 <_vfiprintf_r+0x1a6>
 800f0d6:	b1b0      	cbz	r0, 800f106 <_vfiprintf_r+0x13a>
 800f0d8:	9207      	str	r2, [sp, #28]
 800f0da:	e014      	b.n	800f106 <_vfiprintf_r+0x13a>
 800f0dc:	eba0 0308 	sub.w	r3, r0, r8
 800f0e0:	46a2      	mov	sl, r4
 800f0e2:	fa09 f303 	lsl.w	r3, r9, r3
 800f0e6:	4313      	orrs	r3, r2
 800f0e8:	9304      	str	r3, [sp, #16]
 800f0ea:	e7d2      	b.n	800f092 <_vfiprintf_r+0xc6>
 800f0ec:	9b03      	ldr	r3, [sp, #12]
 800f0ee:	1d19      	adds	r1, r3, #4
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	9103      	str	r1, [sp, #12]
 800f0f6:	bfbb      	ittet	lt
 800f0f8:	425b      	neglt	r3, r3
 800f0fa:	f042 0202 	orrlt.w	r2, r2, #2
 800f0fe:	9307      	strge	r3, [sp, #28]
 800f100:	9307      	strlt	r3, [sp, #28]
 800f102:	bfb8      	it	lt
 800f104:	9204      	strlt	r2, [sp, #16]
 800f106:	7823      	ldrb	r3, [r4, #0]
 800f108:	2b2e      	cmp	r3, #46	; 0x2e
 800f10a:	d10c      	bne.n	800f126 <_vfiprintf_r+0x15a>
 800f10c:	7863      	ldrb	r3, [r4, #1]
 800f10e:	2b2a      	cmp	r3, #42	; 0x2a
 800f110:	d134      	bne.n	800f17c <_vfiprintf_r+0x1b0>
 800f112:	9b03      	ldr	r3, [sp, #12]
 800f114:	3402      	adds	r4, #2
 800f116:	1d1a      	adds	r2, r3, #4
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	9203      	str	r2, [sp, #12]
 800f11e:	bfb8      	it	lt
 800f120:	f04f 33ff 	movlt.w	r3, #4294967295
 800f124:	9305      	str	r3, [sp, #20]
 800f126:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f1fc <_vfiprintf_r+0x230>
 800f12a:	2203      	movs	r2, #3
 800f12c:	7821      	ldrb	r1, [r4, #0]
 800f12e:	4650      	mov	r0, sl
 800f130:	f000 fb4a 	bl	800f7c8 <memchr>
 800f134:	b138      	cbz	r0, 800f146 <_vfiprintf_r+0x17a>
 800f136:	eba0 000a 	sub.w	r0, r0, sl
 800f13a:	2240      	movs	r2, #64	; 0x40
 800f13c:	9b04      	ldr	r3, [sp, #16]
 800f13e:	3401      	adds	r4, #1
 800f140:	4082      	lsls	r2, r0
 800f142:	4313      	orrs	r3, r2
 800f144:	9304      	str	r3, [sp, #16]
 800f146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f14a:	2206      	movs	r2, #6
 800f14c:	4828      	ldr	r0, [pc, #160]	; (800f1f0 <_vfiprintf_r+0x224>)
 800f14e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f152:	f000 fb39 	bl	800f7c8 <memchr>
 800f156:	2800      	cmp	r0, #0
 800f158:	d03f      	beq.n	800f1da <_vfiprintf_r+0x20e>
 800f15a:	4b26      	ldr	r3, [pc, #152]	; (800f1f4 <_vfiprintf_r+0x228>)
 800f15c:	bb1b      	cbnz	r3, 800f1a6 <_vfiprintf_r+0x1da>
 800f15e:	9b03      	ldr	r3, [sp, #12]
 800f160:	3307      	adds	r3, #7
 800f162:	f023 0307 	bic.w	r3, r3, #7
 800f166:	3308      	adds	r3, #8
 800f168:	9303      	str	r3, [sp, #12]
 800f16a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f16c:	443b      	add	r3, r7
 800f16e:	9309      	str	r3, [sp, #36]	; 0x24
 800f170:	e768      	b.n	800f044 <_vfiprintf_r+0x78>
 800f172:	fb0c 3202 	mla	r2, ip, r2, r3
 800f176:	460c      	mov	r4, r1
 800f178:	2001      	movs	r0, #1
 800f17a:	e7a6      	b.n	800f0ca <_vfiprintf_r+0xfe>
 800f17c:	2300      	movs	r3, #0
 800f17e:	3401      	adds	r4, #1
 800f180:	f04f 0c0a 	mov.w	ip, #10
 800f184:	4619      	mov	r1, r3
 800f186:	9305      	str	r3, [sp, #20]
 800f188:	4620      	mov	r0, r4
 800f18a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f18e:	3a30      	subs	r2, #48	; 0x30
 800f190:	2a09      	cmp	r2, #9
 800f192:	d903      	bls.n	800f19c <_vfiprintf_r+0x1d0>
 800f194:	2b00      	cmp	r3, #0
 800f196:	d0c6      	beq.n	800f126 <_vfiprintf_r+0x15a>
 800f198:	9105      	str	r1, [sp, #20]
 800f19a:	e7c4      	b.n	800f126 <_vfiprintf_r+0x15a>
 800f19c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	e7f0      	b.n	800f188 <_vfiprintf_r+0x1bc>
 800f1a6:	ab03      	add	r3, sp, #12
 800f1a8:	462a      	mov	r2, r5
 800f1aa:	a904      	add	r1, sp, #16
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	9300      	str	r3, [sp, #0]
 800f1b0:	4b11      	ldr	r3, [pc, #68]	; (800f1f8 <_vfiprintf_r+0x22c>)
 800f1b2:	f3af 8000 	nop.w
 800f1b6:	4607      	mov	r7, r0
 800f1b8:	1c78      	adds	r0, r7, #1
 800f1ba:	d1d6      	bne.n	800f16a <_vfiprintf_r+0x19e>
 800f1bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1be:	07d9      	lsls	r1, r3, #31
 800f1c0:	d405      	bmi.n	800f1ce <_vfiprintf_r+0x202>
 800f1c2:	89ab      	ldrh	r3, [r5, #12]
 800f1c4:	059a      	lsls	r2, r3, #22
 800f1c6:	d402      	bmi.n	800f1ce <_vfiprintf_r+0x202>
 800f1c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1ca:	f7ff fda9 	bl	800ed20 <__retarget_lock_release_recursive>
 800f1ce:	89ab      	ldrh	r3, [r5, #12]
 800f1d0:	065b      	lsls	r3, r3, #25
 800f1d2:	f53f af1d 	bmi.w	800f010 <_vfiprintf_r+0x44>
 800f1d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1d8:	e71c      	b.n	800f014 <_vfiprintf_r+0x48>
 800f1da:	ab03      	add	r3, sp, #12
 800f1dc:	462a      	mov	r2, r5
 800f1de:	a904      	add	r1, sp, #16
 800f1e0:	4630      	mov	r0, r6
 800f1e2:	9300      	str	r3, [sp, #0]
 800f1e4:	4b04      	ldr	r3, [pc, #16]	; (800f1f8 <_vfiprintf_r+0x22c>)
 800f1e6:	f000 f87d 	bl	800f2e4 <_printf_i>
 800f1ea:	e7e4      	b.n	800f1b6 <_vfiprintf_r+0x1ea>
 800f1ec:	0800fa7f 	.word	0x0800fa7f
 800f1f0:	0800fa89 	.word	0x0800fa89
 800f1f4:	00000000 	.word	0x00000000
 800f1f8:	0800efa7 	.word	0x0800efa7
 800f1fc:	0800fa85 	.word	0x0800fa85

0800f200 <_printf_common>:
 800f200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f204:	4616      	mov	r6, r2
 800f206:	4699      	mov	r9, r3
 800f208:	688a      	ldr	r2, [r1, #8]
 800f20a:	4607      	mov	r7, r0
 800f20c:	690b      	ldr	r3, [r1, #16]
 800f20e:	460c      	mov	r4, r1
 800f210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f214:	4293      	cmp	r3, r2
 800f216:	bfb8      	it	lt
 800f218:	4613      	movlt	r3, r2
 800f21a:	6033      	str	r3, [r6, #0]
 800f21c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f220:	b10a      	cbz	r2, 800f226 <_printf_common+0x26>
 800f222:	3301      	adds	r3, #1
 800f224:	6033      	str	r3, [r6, #0]
 800f226:	6823      	ldr	r3, [r4, #0]
 800f228:	0699      	lsls	r1, r3, #26
 800f22a:	bf42      	ittt	mi
 800f22c:	6833      	ldrmi	r3, [r6, #0]
 800f22e:	3302      	addmi	r3, #2
 800f230:	6033      	strmi	r3, [r6, #0]
 800f232:	6825      	ldr	r5, [r4, #0]
 800f234:	f015 0506 	ands.w	r5, r5, #6
 800f238:	d106      	bne.n	800f248 <_printf_common+0x48>
 800f23a:	f104 0a19 	add.w	sl, r4, #25
 800f23e:	68e3      	ldr	r3, [r4, #12]
 800f240:	6832      	ldr	r2, [r6, #0]
 800f242:	1a9b      	subs	r3, r3, r2
 800f244:	42ab      	cmp	r3, r5
 800f246:	dc2b      	bgt.n	800f2a0 <_printf_common+0xa0>
 800f248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f24c:	1e13      	subs	r3, r2, #0
 800f24e:	6822      	ldr	r2, [r4, #0]
 800f250:	bf18      	it	ne
 800f252:	2301      	movne	r3, #1
 800f254:	0692      	lsls	r2, r2, #26
 800f256:	d430      	bmi.n	800f2ba <_printf_common+0xba>
 800f258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f25c:	4649      	mov	r1, r9
 800f25e:	4638      	mov	r0, r7
 800f260:	47c0      	blx	r8
 800f262:	3001      	adds	r0, #1
 800f264:	d023      	beq.n	800f2ae <_printf_common+0xae>
 800f266:	6823      	ldr	r3, [r4, #0]
 800f268:	341a      	adds	r4, #26
 800f26a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800f26e:	f003 0306 	and.w	r3, r3, #6
 800f272:	2b04      	cmp	r3, #4
 800f274:	bf0a      	itet	eq
 800f276:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800f27a:	2500      	movne	r5, #0
 800f27c:	6833      	ldreq	r3, [r6, #0]
 800f27e:	f04f 0600 	mov.w	r6, #0
 800f282:	bf08      	it	eq
 800f284:	1aed      	subeq	r5, r5, r3
 800f286:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f28a:	bf08      	it	eq
 800f28c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f290:	4293      	cmp	r3, r2
 800f292:	bfc4      	itt	gt
 800f294:	1a9b      	subgt	r3, r3, r2
 800f296:	18ed      	addgt	r5, r5, r3
 800f298:	42b5      	cmp	r5, r6
 800f29a:	d11a      	bne.n	800f2d2 <_printf_common+0xd2>
 800f29c:	2000      	movs	r0, #0
 800f29e:	e008      	b.n	800f2b2 <_printf_common+0xb2>
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	4652      	mov	r2, sl
 800f2a4:	4649      	mov	r1, r9
 800f2a6:	4638      	mov	r0, r7
 800f2a8:	47c0      	blx	r8
 800f2aa:	3001      	adds	r0, #1
 800f2ac:	d103      	bne.n	800f2b6 <_printf_common+0xb6>
 800f2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2b6:	3501      	adds	r5, #1
 800f2b8:	e7c1      	b.n	800f23e <_printf_common+0x3e>
 800f2ba:	18e1      	adds	r1, r4, r3
 800f2bc:	1c5a      	adds	r2, r3, #1
 800f2be:	2030      	movs	r0, #48	; 0x30
 800f2c0:	3302      	adds	r3, #2
 800f2c2:	4422      	add	r2, r4
 800f2c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f2c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f2cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f2d0:	e7c2      	b.n	800f258 <_printf_common+0x58>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	4622      	mov	r2, r4
 800f2d6:	4649      	mov	r1, r9
 800f2d8:	4638      	mov	r0, r7
 800f2da:	47c0      	blx	r8
 800f2dc:	3001      	adds	r0, #1
 800f2de:	d0e6      	beq.n	800f2ae <_printf_common+0xae>
 800f2e0:	3601      	adds	r6, #1
 800f2e2:	e7d9      	b.n	800f298 <_printf_common+0x98>

0800f2e4 <_printf_i>:
 800f2e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2e8:	7e0f      	ldrb	r7, [r1, #24]
 800f2ea:	4691      	mov	r9, r2
 800f2ec:	4680      	mov	r8, r0
 800f2ee:	460c      	mov	r4, r1
 800f2f0:	2f78      	cmp	r7, #120	; 0x78
 800f2f2:	469a      	mov	sl, r3
 800f2f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f2f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f2fa:	d807      	bhi.n	800f30c <_printf_i+0x28>
 800f2fc:	2f62      	cmp	r7, #98	; 0x62
 800f2fe:	d80a      	bhi.n	800f316 <_printf_i+0x32>
 800f300:	2f00      	cmp	r7, #0
 800f302:	f000 80d3 	beq.w	800f4ac <_printf_i+0x1c8>
 800f306:	2f58      	cmp	r7, #88	; 0x58
 800f308:	f000 80bf 	beq.w	800f48a <_printf_i+0x1a6>
 800f30c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f314:	e03a      	b.n	800f38c <_printf_i+0xa8>
 800f316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f31a:	2b15      	cmp	r3, #21
 800f31c:	d8f6      	bhi.n	800f30c <_printf_i+0x28>
 800f31e:	a101      	add	r1, pc, #4	; (adr r1, 800f324 <_printf_i+0x40>)
 800f320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f324:	0800f37d 	.word	0x0800f37d
 800f328:	0800f391 	.word	0x0800f391
 800f32c:	0800f30d 	.word	0x0800f30d
 800f330:	0800f30d 	.word	0x0800f30d
 800f334:	0800f30d 	.word	0x0800f30d
 800f338:	0800f30d 	.word	0x0800f30d
 800f33c:	0800f391 	.word	0x0800f391
 800f340:	0800f30d 	.word	0x0800f30d
 800f344:	0800f30d 	.word	0x0800f30d
 800f348:	0800f30d 	.word	0x0800f30d
 800f34c:	0800f30d 	.word	0x0800f30d
 800f350:	0800f493 	.word	0x0800f493
 800f354:	0800f3bd 	.word	0x0800f3bd
 800f358:	0800f44f 	.word	0x0800f44f
 800f35c:	0800f30d 	.word	0x0800f30d
 800f360:	0800f30d 	.word	0x0800f30d
 800f364:	0800f4b5 	.word	0x0800f4b5
 800f368:	0800f30d 	.word	0x0800f30d
 800f36c:	0800f3bd 	.word	0x0800f3bd
 800f370:	0800f30d 	.word	0x0800f30d
 800f374:	0800f30d 	.word	0x0800f30d
 800f378:	0800f457 	.word	0x0800f457
 800f37c:	682b      	ldr	r3, [r5, #0]
 800f37e:	1d1a      	adds	r2, r3, #4
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	602a      	str	r2, [r5, #0]
 800f384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f38c:	2301      	movs	r3, #1
 800f38e:	e09e      	b.n	800f4ce <_printf_i+0x1ea>
 800f390:	6820      	ldr	r0, [r4, #0]
 800f392:	682b      	ldr	r3, [r5, #0]
 800f394:	0607      	lsls	r7, r0, #24
 800f396:	f103 0104 	add.w	r1, r3, #4
 800f39a:	6029      	str	r1, [r5, #0]
 800f39c:	d501      	bpl.n	800f3a2 <_printf_i+0xbe>
 800f39e:	681e      	ldr	r6, [r3, #0]
 800f3a0:	e003      	b.n	800f3aa <_printf_i+0xc6>
 800f3a2:	0646      	lsls	r6, r0, #25
 800f3a4:	d5fb      	bpl.n	800f39e <_printf_i+0xba>
 800f3a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f3aa:	2e00      	cmp	r6, #0
 800f3ac:	da03      	bge.n	800f3b6 <_printf_i+0xd2>
 800f3ae:	232d      	movs	r3, #45	; 0x2d
 800f3b0:	4276      	negs	r6, r6
 800f3b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3b6:	4859      	ldr	r0, [pc, #356]	; (800f51c <_printf_i+0x238>)
 800f3b8:	230a      	movs	r3, #10
 800f3ba:	e012      	b.n	800f3e2 <_printf_i+0xfe>
 800f3bc:	682b      	ldr	r3, [r5, #0]
 800f3be:	6820      	ldr	r0, [r4, #0]
 800f3c0:	1d19      	adds	r1, r3, #4
 800f3c2:	6029      	str	r1, [r5, #0]
 800f3c4:	0605      	lsls	r5, r0, #24
 800f3c6:	d501      	bpl.n	800f3cc <_printf_i+0xe8>
 800f3c8:	681e      	ldr	r6, [r3, #0]
 800f3ca:	e002      	b.n	800f3d2 <_printf_i+0xee>
 800f3cc:	0641      	lsls	r1, r0, #25
 800f3ce:	d5fb      	bpl.n	800f3c8 <_printf_i+0xe4>
 800f3d0:	881e      	ldrh	r6, [r3, #0]
 800f3d2:	2f6f      	cmp	r7, #111	; 0x6f
 800f3d4:	4851      	ldr	r0, [pc, #324]	; (800f51c <_printf_i+0x238>)
 800f3d6:	bf0c      	ite	eq
 800f3d8:	2308      	moveq	r3, #8
 800f3da:	230a      	movne	r3, #10
 800f3dc:	2100      	movs	r1, #0
 800f3de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f3e2:	6865      	ldr	r5, [r4, #4]
 800f3e4:	2d00      	cmp	r5, #0
 800f3e6:	60a5      	str	r5, [r4, #8]
 800f3e8:	bfa2      	ittt	ge
 800f3ea:	6821      	ldrge	r1, [r4, #0]
 800f3ec:	f021 0104 	bicge.w	r1, r1, #4
 800f3f0:	6021      	strge	r1, [r4, #0]
 800f3f2:	b90e      	cbnz	r6, 800f3f8 <_printf_i+0x114>
 800f3f4:	2d00      	cmp	r5, #0
 800f3f6:	d04a      	beq.n	800f48e <_printf_i+0x1aa>
 800f3f8:	4615      	mov	r5, r2
 800f3fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800f3fe:	fb03 6711 	mls	r7, r3, r1, r6
 800f402:	5dc7      	ldrb	r7, [r0, r7]
 800f404:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f408:	4637      	mov	r7, r6
 800f40a:	460e      	mov	r6, r1
 800f40c:	42bb      	cmp	r3, r7
 800f40e:	d9f4      	bls.n	800f3fa <_printf_i+0x116>
 800f410:	2b08      	cmp	r3, #8
 800f412:	d10b      	bne.n	800f42c <_printf_i+0x148>
 800f414:	6823      	ldr	r3, [r4, #0]
 800f416:	07de      	lsls	r6, r3, #31
 800f418:	d508      	bpl.n	800f42c <_printf_i+0x148>
 800f41a:	6923      	ldr	r3, [r4, #16]
 800f41c:	6861      	ldr	r1, [r4, #4]
 800f41e:	4299      	cmp	r1, r3
 800f420:	bfde      	ittt	le
 800f422:	2330      	movle	r3, #48	; 0x30
 800f424:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f428:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f42c:	1b52      	subs	r2, r2, r5
 800f42e:	6122      	str	r2, [r4, #16]
 800f430:	464b      	mov	r3, r9
 800f432:	aa03      	add	r2, sp, #12
 800f434:	4621      	mov	r1, r4
 800f436:	4640      	mov	r0, r8
 800f438:	f8cd a000 	str.w	sl, [sp]
 800f43c:	f7ff fee0 	bl	800f200 <_printf_common>
 800f440:	3001      	adds	r0, #1
 800f442:	d149      	bne.n	800f4d8 <_printf_i+0x1f4>
 800f444:	f04f 30ff 	mov.w	r0, #4294967295
 800f448:	b004      	add	sp, #16
 800f44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f44e:	6823      	ldr	r3, [r4, #0]
 800f450:	f043 0320 	orr.w	r3, r3, #32
 800f454:	6023      	str	r3, [r4, #0]
 800f456:	2778      	movs	r7, #120	; 0x78
 800f458:	4831      	ldr	r0, [pc, #196]	; (800f520 <_printf_i+0x23c>)
 800f45a:	6823      	ldr	r3, [r4, #0]
 800f45c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f460:	061f      	lsls	r7, r3, #24
 800f462:	6829      	ldr	r1, [r5, #0]
 800f464:	f851 6b04 	ldr.w	r6, [r1], #4
 800f468:	d402      	bmi.n	800f470 <_printf_i+0x18c>
 800f46a:	065f      	lsls	r7, r3, #25
 800f46c:	bf48      	it	mi
 800f46e:	b2b6      	uxthmi	r6, r6
 800f470:	07df      	lsls	r7, r3, #31
 800f472:	6029      	str	r1, [r5, #0]
 800f474:	bf44      	itt	mi
 800f476:	f043 0320 	orrmi.w	r3, r3, #32
 800f47a:	6023      	strmi	r3, [r4, #0]
 800f47c:	b91e      	cbnz	r6, 800f486 <_printf_i+0x1a2>
 800f47e:	6823      	ldr	r3, [r4, #0]
 800f480:	f023 0320 	bic.w	r3, r3, #32
 800f484:	6023      	str	r3, [r4, #0]
 800f486:	2310      	movs	r3, #16
 800f488:	e7a8      	b.n	800f3dc <_printf_i+0xf8>
 800f48a:	4824      	ldr	r0, [pc, #144]	; (800f51c <_printf_i+0x238>)
 800f48c:	e7e5      	b.n	800f45a <_printf_i+0x176>
 800f48e:	4615      	mov	r5, r2
 800f490:	e7be      	b.n	800f410 <_printf_i+0x12c>
 800f492:	682b      	ldr	r3, [r5, #0]
 800f494:	6826      	ldr	r6, [r4, #0]
 800f496:	1d18      	adds	r0, r3, #4
 800f498:	6961      	ldr	r1, [r4, #20]
 800f49a:	6028      	str	r0, [r5, #0]
 800f49c:	0635      	lsls	r5, r6, #24
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	d501      	bpl.n	800f4a6 <_printf_i+0x1c2>
 800f4a2:	6019      	str	r1, [r3, #0]
 800f4a4:	e002      	b.n	800f4ac <_printf_i+0x1c8>
 800f4a6:	0670      	lsls	r0, r6, #25
 800f4a8:	d5fb      	bpl.n	800f4a2 <_printf_i+0x1be>
 800f4aa:	8019      	strh	r1, [r3, #0]
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	4615      	mov	r5, r2
 800f4b0:	6123      	str	r3, [r4, #16]
 800f4b2:	e7bd      	b.n	800f430 <_printf_i+0x14c>
 800f4b4:	682b      	ldr	r3, [r5, #0]
 800f4b6:	2100      	movs	r1, #0
 800f4b8:	1d1a      	adds	r2, r3, #4
 800f4ba:	602a      	str	r2, [r5, #0]
 800f4bc:	681d      	ldr	r5, [r3, #0]
 800f4be:	6862      	ldr	r2, [r4, #4]
 800f4c0:	4628      	mov	r0, r5
 800f4c2:	f000 f981 	bl	800f7c8 <memchr>
 800f4c6:	b108      	cbz	r0, 800f4cc <_printf_i+0x1e8>
 800f4c8:	1b40      	subs	r0, r0, r5
 800f4ca:	6060      	str	r0, [r4, #4]
 800f4cc:	6863      	ldr	r3, [r4, #4]
 800f4ce:	6123      	str	r3, [r4, #16]
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4d6:	e7ab      	b.n	800f430 <_printf_i+0x14c>
 800f4d8:	6923      	ldr	r3, [r4, #16]
 800f4da:	462a      	mov	r2, r5
 800f4dc:	4649      	mov	r1, r9
 800f4de:	4640      	mov	r0, r8
 800f4e0:	47d0      	blx	sl
 800f4e2:	3001      	adds	r0, #1
 800f4e4:	d0ae      	beq.n	800f444 <_printf_i+0x160>
 800f4e6:	6823      	ldr	r3, [r4, #0]
 800f4e8:	079b      	lsls	r3, r3, #30
 800f4ea:	d413      	bmi.n	800f514 <_printf_i+0x230>
 800f4ec:	68e0      	ldr	r0, [r4, #12]
 800f4ee:	9b03      	ldr	r3, [sp, #12]
 800f4f0:	4298      	cmp	r0, r3
 800f4f2:	bfb8      	it	lt
 800f4f4:	4618      	movlt	r0, r3
 800f4f6:	e7a7      	b.n	800f448 <_printf_i+0x164>
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	4632      	mov	r2, r6
 800f4fc:	4649      	mov	r1, r9
 800f4fe:	4640      	mov	r0, r8
 800f500:	47d0      	blx	sl
 800f502:	3001      	adds	r0, #1
 800f504:	d09e      	beq.n	800f444 <_printf_i+0x160>
 800f506:	3501      	adds	r5, #1
 800f508:	68e3      	ldr	r3, [r4, #12]
 800f50a:	9903      	ldr	r1, [sp, #12]
 800f50c:	1a5b      	subs	r3, r3, r1
 800f50e:	42ab      	cmp	r3, r5
 800f510:	dcf2      	bgt.n	800f4f8 <_printf_i+0x214>
 800f512:	e7eb      	b.n	800f4ec <_printf_i+0x208>
 800f514:	2500      	movs	r5, #0
 800f516:	f104 0619 	add.w	r6, r4, #25
 800f51a:	e7f5      	b.n	800f508 <_printf_i+0x224>
 800f51c:	0800fa90 	.word	0x0800fa90
 800f520:	0800faa1 	.word	0x0800faa1

0800f524 <__sflush_r>:
 800f524:	898a      	ldrh	r2, [r1, #12]
 800f526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f52a:	4605      	mov	r5, r0
 800f52c:	0710      	lsls	r0, r2, #28
 800f52e:	460c      	mov	r4, r1
 800f530:	d458      	bmi.n	800f5e4 <__sflush_r+0xc0>
 800f532:	684b      	ldr	r3, [r1, #4]
 800f534:	2b00      	cmp	r3, #0
 800f536:	dc05      	bgt.n	800f544 <__sflush_r+0x20>
 800f538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	dc02      	bgt.n	800f544 <__sflush_r+0x20>
 800f53e:	2000      	movs	r0, #0
 800f540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f546:	2e00      	cmp	r6, #0
 800f548:	d0f9      	beq.n	800f53e <__sflush_r+0x1a>
 800f54a:	2300      	movs	r3, #0
 800f54c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f550:	682f      	ldr	r7, [r5, #0]
 800f552:	6a21      	ldr	r1, [r4, #32]
 800f554:	602b      	str	r3, [r5, #0]
 800f556:	d032      	beq.n	800f5be <__sflush_r+0x9a>
 800f558:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f55a:	89a3      	ldrh	r3, [r4, #12]
 800f55c:	075a      	lsls	r2, r3, #29
 800f55e:	d505      	bpl.n	800f56c <__sflush_r+0x48>
 800f560:	6863      	ldr	r3, [r4, #4]
 800f562:	1ac0      	subs	r0, r0, r3
 800f564:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f566:	b10b      	cbz	r3, 800f56c <__sflush_r+0x48>
 800f568:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f56a:	1ac0      	subs	r0, r0, r3
 800f56c:	2300      	movs	r3, #0
 800f56e:	4602      	mov	r2, r0
 800f570:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f572:	4628      	mov	r0, r5
 800f574:	6a21      	ldr	r1, [r4, #32]
 800f576:	47b0      	blx	r6
 800f578:	1c43      	adds	r3, r0, #1
 800f57a:	89a3      	ldrh	r3, [r4, #12]
 800f57c:	d106      	bne.n	800f58c <__sflush_r+0x68>
 800f57e:	6829      	ldr	r1, [r5, #0]
 800f580:	291d      	cmp	r1, #29
 800f582:	d82b      	bhi.n	800f5dc <__sflush_r+0xb8>
 800f584:	4a28      	ldr	r2, [pc, #160]	; (800f628 <__sflush_r+0x104>)
 800f586:	410a      	asrs	r2, r1
 800f588:	07d6      	lsls	r6, r2, #31
 800f58a:	d427      	bmi.n	800f5dc <__sflush_r+0xb8>
 800f58c:	2200      	movs	r2, #0
 800f58e:	04d9      	lsls	r1, r3, #19
 800f590:	6062      	str	r2, [r4, #4]
 800f592:	6922      	ldr	r2, [r4, #16]
 800f594:	6022      	str	r2, [r4, #0]
 800f596:	d504      	bpl.n	800f5a2 <__sflush_r+0x7e>
 800f598:	1c42      	adds	r2, r0, #1
 800f59a:	d101      	bne.n	800f5a0 <__sflush_r+0x7c>
 800f59c:	682b      	ldr	r3, [r5, #0]
 800f59e:	b903      	cbnz	r3, 800f5a2 <__sflush_r+0x7e>
 800f5a0:	6560      	str	r0, [r4, #84]	; 0x54
 800f5a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5a4:	602f      	str	r7, [r5, #0]
 800f5a6:	2900      	cmp	r1, #0
 800f5a8:	d0c9      	beq.n	800f53e <__sflush_r+0x1a>
 800f5aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5ae:	4299      	cmp	r1, r3
 800f5b0:	d002      	beq.n	800f5b8 <__sflush_r+0x94>
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	f7ff fbe0 	bl	800ed78 <_free_r>
 800f5b8:	2000      	movs	r0, #0
 800f5ba:	6360      	str	r0, [r4, #52]	; 0x34
 800f5bc:	e7c0      	b.n	800f540 <__sflush_r+0x1c>
 800f5be:	2301      	movs	r3, #1
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	47b0      	blx	r6
 800f5c4:	1c41      	adds	r1, r0, #1
 800f5c6:	d1c8      	bne.n	800f55a <__sflush_r+0x36>
 800f5c8:	682b      	ldr	r3, [r5, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d0c5      	beq.n	800f55a <__sflush_r+0x36>
 800f5ce:	2b1d      	cmp	r3, #29
 800f5d0:	d001      	beq.n	800f5d6 <__sflush_r+0xb2>
 800f5d2:	2b16      	cmp	r3, #22
 800f5d4:	d101      	bne.n	800f5da <__sflush_r+0xb6>
 800f5d6:	602f      	str	r7, [r5, #0]
 800f5d8:	e7b1      	b.n	800f53e <__sflush_r+0x1a>
 800f5da:	89a3      	ldrh	r3, [r4, #12]
 800f5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5e0:	81a3      	strh	r3, [r4, #12]
 800f5e2:	e7ad      	b.n	800f540 <__sflush_r+0x1c>
 800f5e4:	690f      	ldr	r7, [r1, #16]
 800f5e6:	2f00      	cmp	r7, #0
 800f5e8:	d0a9      	beq.n	800f53e <__sflush_r+0x1a>
 800f5ea:	0793      	lsls	r3, r2, #30
 800f5ec:	680e      	ldr	r6, [r1, #0]
 800f5ee:	600f      	str	r7, [r1, #0]
 800f5f0:	bf0c      	ite	eq
 800f5f2:	694b      	ldreq	r3, [r1, #20]
 800f5f4:	2300      	movne	r3, #0
 800f5f6:	eba6 0807 	sub.w	r8, r6, r7
 800f5fa:	608b      	str	r3, [r1, #8]
 800f5fc:	f1b8 0f00 	cmp.w	r8, #0
 800f600:	dd9d      	ble.n	800f53e <__sflush_r+0x1a>
 800f602:	4643      	mov	r3, r8
 800f604:	463a      	mov	r2, r7
 800f606:	6a21      	ldr	r1, [r4, #32]
 800f608:	4628      	mov	r0, r5
 800f60a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f60c:	47b0      	blx	r6
 800f60e:	2800      	cmp	r0, #0
 800f610:	dc06      	bgt.n	800f620 <__sflush_r+0xfc>
 800f612:	89a3      	ldrh	r3, [r4, #12]
 800f614:	f04f 30ff 	mov.w	r0, #4294967295
 800f618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f61c:	81a3      	strh	r3, [r4, #12]
 800f61e:	e78f      	b.n	800f540 <__sflush_r+0x1c>
 800f620:	4407      	add	r7, r0
 800f622:	eba8 0800 	sub.w	r8, r8, r0
 800f626:	e7e9      	b.n	800f5fc <__sflush_r+0xd8>
 800f628:	dfbffffe 	.word	0xdfbffffe

0800f62c <_fflush_r>:
 800f62c:	b538      	push	{r3, r4, r5, lr}
 800f62e:	690b      	ldr	r3, [r1, #16]
 800f630:	4605      	mov	r5, r0
 800f632:	460c      	mov	r4, r1
 800f634:	b913      	cbnz	r3, 800f63c <_fflush_r+0x10>
 800f636:	2500      	movs	r5, #0
 800f638:	4628      	mov	r0, r5
 800f63a:	bd38      	pop	{r3, r4, r5, pc}
 800f63c:	b118      	cbz	r0, 800f646 <_fflush_r+0x1a>
 800f63e:	6a03      	ldr	r3, [r0, #32]
 800f640:	b90b      	cbnz	r3, 800f646 <_fflush_r+0x1a>
 800f642:	f7ff f977 	bl	800e934 <__sinit>
 800f646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d0f3      	beq.n	800f636 <_fflush_r+0xa>
 800f64e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f650:	07d0      	lsls	r0, r2, #31
 800f652:	d404      	bmi.n	800f65e <_fflush_r+0x32>
 800f654:	0599      	lsls	r1, r3, #22
 800f656:	d402      	bmi.n	800f65e <_fflush_r+0x32>
 800f658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f65a:	f7ff fb60 	bl	800ed1e <__retarget_lock_acquire_recursive>
 800f65e:	4628      	mov	r0, r5
 800f660:	4621      	mov	r1, r4
 800f662:	f7ff ff5f 	bl	800f524 <__sflush_r>
 800f666:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f668:	4605      	mov	r5, r0
 800f66a:	07da      	lsls	r2, r3, #31
 800f66c:	d4e4      	bmi.n	800f638 <_fflush_r+0xc>
 800f66e:	89a3      	ldrh	r3, [r4, #12]
 800f670:	059b      	lsls	r3, r3, #22
 800f672:	d4e1      	bmi.n	800f638 <_fflush_r+0xc>
 800f674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f676:	f7ff fb53 	bl	800ed20 <__retarget_lock_release_recursive>
 800f67a:	e7dd      	b.n	800f638 <_fflush_r+0xc>

0800f67c <fiprintf>:
 800f67c:	b40e      	push	{r1, r2, r3}
 800f67e:	b503      	push	{r0, r1, lr}
 800f680:	ab03      	add	r3, sp, #12
 800f682:	4601      	mov	r1, r0
 800f684:	4805      	ldr	r0, [pc, #20]	; (800f69c <fiprintf+0x20>)
 800f686:	f853 2b04 	ldr.w	r2, [r3], #4
 800f68a:	6800      	ldr	r0, [r0, #0]
 800f68c:	9301      	str	r3, [sp, #4]
 800f68e:	f7ff fc9d 	bl	800efcc <_vfiprintf_r>
 800f692:	b002      	add	sp, #8
 800f694:	f85d eb04 	ldr.w	lr, [sp], #4
 800f698:	b003      	add	sp, #12
 800f69a:	4770      	bx	lr
 800f69c:	200000e4 	.word	0x200000e4

0800f6a0 <__swhatbuf_r>:
 800f6a0:	b570      	push	{r4, r5, r6, lr}
 800f6a2:	460c      	mov	r4, r1
 800f6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6a8:	b096      	sub	sp, #88	; 0x58
 800f6aa:	4615      	mov	r5, r2
 800f6ac:	2900      	cmp	r1, #0
 800f6ae:	461e      	mov	r6, r3
 800f6b0:	da0c      	bge.n	800f6cc <__swhatbuf_r+0x2c>
 800f6b2:	89a3      	ldrh	r3, [r4, #12]
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f6ba:	bf0c      	ite	eq
 800f6bc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f6c0:	2340      	movne	r3, #64	; 0x40
 800f6c2:	2000      	movs	r0, #0
 800f6c4:	6031      	str	r1, [r6, #0]
 800f6c6:	602b      	str	r3, [r5, #0]
 800f6c8:	b016      	add	sp, #88	; 0x58
 800f6ca:	bd70      	pop	{r4, r5, r6, pc}
 800f6cc:	466a      	mov	r2, sp
 800f6ce:	f000 f849 	bl	800f764 <_fstat_r>
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	dbed      	blt.n	800f6b2 <__swhatbuf_r+0x12>
 800f6d6:	9901      	ldr	r1, [sp, #4]
 800f6d8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f6dc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f6e0:	4259      	negs	r1, r3
 800f6e2:	4159      	adcs	r1, r3
 800f6e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6e8:	e7eb      	b.n	800f6c2 <__swhatbuf_r+0x22>

0800f6ea <__smakebuf_r>:
 800f6ea:	898b      	ldrh	r3, [r1, #12]
 800f6ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6ee:	079d      	lsls	r5, r3, #30
 800f6f0:	4606      	mov	r6, r0
 800f6f2:	460c      	mov	r4, r1
 800f6f4:	d507      	bpl.n	800f706 <__smakebuf_r+0x1c>
 800f6f6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f6fa:	6023      	str	r3, [r4, #0]
 800f6fc:	6123      	str	r3, [r4, #16]
 800f6fe:	2301      	movs	r3, #1
 800f700:	6163      	str	r3, [r4, #20]
 800f702:	b002      	add	sp, #8
 800f704:	bd70      	pop	{r4, r5, r6, pc}
 800f706:	ab01      	add	r3, sp, #4
 800f708:	466a      	mov	r2, sp
 800f70a:	f7ff ffc9 	bl	800f6a0 <__swhatbuf_r>
 800f70e:	9900      	ldr	r1, [sp, #0]
 800f710:	4605      	mov	r5, r0
 800f712:	4630      	mov	r0, r6
 800f714:	f7ff fba4 	bl	800ee60 <_malloc_r>
 800f718:	b948      	cbnz	r0, 800f72e <__smakebuf_r+0x44>
 800f71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f71e:	059a      	lsls	r2, r3, #22
 800f720:	d4ef      	bmi.n	800f702 <__smakebuf_r+0x18>
 800f722:	f023 0303 	bic.w	r3, r3, #3
 800f726:	f043 0302 	orr.w	r3, r3, #2
 800f72a:	81a3      	strh	r3, [r4, #12]
 800f72c:	e7e3      	b.n	800f6f6 <__smakebuf_r+0xc>
 800f72e:	89a3      	ldrh	r3, [r4, #12]
 800f730:	6020      	str	r0, [r4, #0]
 800f732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f736:	6120      	str	r0, [r4, #16]
 800f738:	81a3      	strh	r3, [r4, #12]
 800f73a:	9b00      	ldr	r3, [sp, #0]
 800f73c:	6163      	str	r3, [r4, #20]
 800f73e:	9b01      	ldr	r3, [sp, #4]
 800f740:	b15b      	cbz	r3, 800f75a <__smakebuf_r+0x70>
 800f742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f746:	4630      	mov	r0, r6
 800f748:	f000 f81e 	bl	800f788 <_isatty_r>
 800f74c:	b128      	cbz	r0, 800f75a <__smakebuf_r+0x70>
 800f74e:	89a3      	ldrh	r3, [r4, #12]
 800f750:	f023 0303 	bic.w	r3, r3, #3
 800f754:	f043 0301 	orr.w	r3, r3, #1
 800f758:	81a3      	strh	r3, [r4, #12]
 800f75a:	89a3      	ldrh	r3, [r4, #12]
 800f75c:	431d      	orrs	r5, r3
 800f75e:	81a5      	strh	r5, [r4, #12]
 800f760:	e7cf      	b.n	800f702 <__smakebuf_r+0x18>
	...

0800f764 <_fstat_r>:
 800f764:	b538      	push	{r3, r4, r5, lr}
 800f766:	2300      	movs	r3, #0
 800f768:	4d06      	ldr	r5, [pc, #24]	; (800f784 <_fstat_r+0x20>)
 800f76a:	4604      	mov	r4, r0
 800f76c:	4608      	mov	r0, r1
 800f76e:	4611      	mov	r1, r2
 800f770:	602b      	str	r3, [r5, #0]
 800f772:	f7f1 faa4 	bl	8000cbe <_fstat>
 800f776:	1c43      	adds	r3, r0, #1
 800f778:	d102      	bne.n	800f780 <_fstat_r+0x1c>
 800f77a:	682b      	ldr	r3, [r5, #0]
 800f77c:	b103      	cbz	r3, 800f780 <_fstat_r+0x1c>
 800f77e:	6023      	str	r3, [r4, #0]
 800f780:	bd38      	pop	{r3, r4, r5, pc}
 800f782:	bf00      	nop
 800f784:	20015ad4 	.word	0x20015ad4

0800f788 <_isatty_r>:
 800f788:	b538      	push	{r3, r4, r5, lr}
 800f78a:	2300      	movs	r3, #0
 800f78c:	4d05      	ldr	r5, [pc, #20]	; (800f7a4 <_isatty_r+0x1c>)
 800f78e:	4604      	mov	r4, r0
 800f790:	4608      	mov	r0, r1
 800f792:	602b      	str	r3, [r5, #0]
 800f794:	f7f1 faa3 	bl	8000cde <_isatty>
 800f798:	1c43      	adds	r3, r0, #1
 800f79a:	d102      	bne.n	800f7a2 <_isatty_r+0x1a>
 800f79c:	682b      	ldr	r3, [r5, #0]
 800f79e:	b103      	cbz	r3, 800f7a2 <_isatty_r+0x1a>
 800f7a0:	6023      	str	r3, [r4, #0]
 800f7a2:	bd38      	pop	{r3, r4, r5, pc}
 800f7a4:	20015ad4 	.word	0x20015ad4

0800f7a8 <_sbrk_r>:
 800f7a8:	b538      	push	{r3, r4, r5, lr}
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	4d05      	ldr	r5, [pc, #20]	; (800f7c4 <_sbrk_r+0x1c>)
 800f7ae:	4604      	mov	r4, r0
 800f7b0:	4608      	mov	r0, r1
 800f7b2:	602b      	str	r3, [r5, #0]
 800f7b4:	f7f1 faac 	bl	8000d10 <_sbrk>
 800f7b8:	1c43      	adds	r3, r0, #1
 800f7ba:	d102      	bne.n	800f7c2 <_sbrk_r+0x1a>
 800f7bc:	682b      	ldr	r3, [r5, #0]
 800f7be:	b103      	cbz	r3, 800f7c2 <_sbrk_r+0x1a>
 800f7c0:	6023      	str	r3, [r4, #0]
 800f7c2:	bd38      	pop	{r3, r4, r5, pc}
 800f7c4:	20015ad4 	.word	0x20015ad4

0800f7c8 <memchr>:
 800f7c8:	b2c9      	uxtb	r1, r1
 800f7ca:	4402      	add	r2, r0
 800f7cc:	b510      	push	{r4, lr}
 800f7ce:	4290      	cmp	r0, r2
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	d101      	bne.n	800f7d8 <memchr+0x10>
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	e003      	b.n	800f7e0 <memchr+0x18>
 800f7d8:	781c      	ldrb	r4, [r3, #0]
 800f7da:	3001      	adds	r0, #1
 800f7dc:	428c      	cmp	r4, r1
 800f7de:	d1f6      	bne.n	800f7ce <memchr+0x6>
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	bd10      	pop	{r4, pc}

0800f7e4 <abort>:
 800f7e4:	2006      	movs	r0, #6
 800f7e6:	b508      	push	{r3, lr}
 800f7e8:	f000 f82c 	bl	800f844 <raise>
 800f7ec:	2001      	movs	r0, #1
 800f7ee:	f7f1 fa17 	bl	8000c20 <_exit>

0800f7f2 <_raise_r>:
 800f7f2:	291f      	cmp	r1, #31
 800f7f4:	b538      	push	{r3, r4, r5, lr}
 800f7f6:	4604      	mov	r4, r0
 800f7f8:	460d      	mov	r5, r1
 800f7fa:	d904      	bls.n	800f806 <_raise_r+0x14>
 800f7fc:	2316      	movs	r3, #22
 800f7fe:	6003      	str	r3, [r0, #0]
 800f800:	f04f 30ff 	mov.w	r0, #4294967295
 800f804:	bd38      	pop	{r3, r4, r5, pc}
 800f806:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f808:	b112      	cbz	r2, 800f810 <_raise_r+0x1e>
 800f80a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f80e:	b94b      	cbnz	r3, 800f824 <_raise_r+0x32>
 800f810:	4620      	mov	r0, r4
 800f812:	f000 f831 	bl	800f878 <_getpid_r>
 800f816:	462a      	mov	r2, r5
 800f818:	4601      	mov	r1, r0
 800f81a:	4620      	mov	r0, r4
 800f81c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f820:	f000 b818 	b.w	800f854 <_kill_r>
 800f824:	2b01      	cmp	r3, #1
 800f826:	d00a      	beq.n	800f83e <_raise_r+0x4c>
 800f828:	1c59      	adds	r1, r3, #1
 800f82a:	d103      	bne.n	800f834 <_raise_r+0x42>
 800f82c:	2316      	movs	r3, #22
 800f82e:	6003      	str	r3, [r0, #0]
 800f830:	2001      	movs	r0, #1
 800f832:	e7e7      	b.n	800f804 <_raise_r+0x12>
 800f834:	2400      	movs	r4, #0
 800f836:	4628      	mov	r0, r5
 800f838:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f83c:	4798      	blx	r3
 800f83e:	2000      	movs	r0, #0
 800f840:	e7e0      	b.n	800f804 <_raise_r+0x12>
	...

0800f844 <raise>:
 800f844:	4b02      	ldr	r3, [pc, #8]	; (800f850 <raise+0xc>)
 800f846:	4601      	mov	r1, r0
 800f848:	6818      	ldr	r0, [r3, #0]
 800f84a:	f7ff bfd2 	b.w	800f7f2 <_raise_r>
 800f84e:	bf00      	nop
 800f850:	200000e4 	.word	0x200000e4

0800f854 <_kill_r>:
 800f854:	b538      	push	{r3, r4, r5, lr}
 800f856:	2300      	movs	r3, #0
 800f858:	4d06      	ldr	r5, [pc, #24]	; (800f874 <_kill_r+0x20>)
 800f85a:	4604      	mov	r4, r0
 800f85c:	4608      	mov	r0, r1
 800f85e:	4611      	mov	r1, r2
 800f860:	602b      	str	r3, [r5, #0]
 800f862:	f7f1 f9cd 	bl	8000c00 <_kill>
 800f866:	1c43      	adds	r3, r0, #1
 800f868:	d102      	bne.n	800f870 <_kill_r+0x1c>
 800f86a:	682b      	ldr	r3, [r5, #0]
 800f86c:	b103      	cbz	r3, 800f870 <_kill_r+0x1c>
 800f86e:	6023      	str	r3, [r4, #0]
 800f870:	bd38      	pop	{r3, r4, r5, pc}
 800f872:	bf00      	nop
 800f874:	20015ad4 	.word	0x20015ad4

0800f878 <_getpid_r>:
 800f878:	f7f1 b9ba 	b.w	8000bf0 <_getpid>

0800f87c <_init>:
 800f87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f87e:	bf00      	nop
 800f880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f882:	bc08      	pop	{r3}
 800f884:	469e      	mov	lr, r3
 800f886:	4770      	bx	lr

0800f888 <_fini>:
 800f888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f88a:	bf00      	nop
 800f88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f88e:	bc08      	pop	{r3}
 800f890:	469e      	mov	lr, r3
 800f892:	4770      	bx	lr
