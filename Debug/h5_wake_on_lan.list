
h5_wake_on_lan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed10  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800ef5c  0800ef5c  0001ef5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f114  0800f114  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800f114  0800f114  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f114  0800f114  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f114  0800f114  0001f114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f118  0800f118  0001f118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800f11c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015894  200000e8  0800f204  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001597c  0800f204  0002597c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002011e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000a1bb4  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000da38  00000000  00000000  000c1d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f58  00000000  00000000  000cf750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015c4  00000000  00000000  000d16a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000410a2  00000000  00000000  000d2c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00045c83  00000000  00000000  00113d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0015544d  00000000  00000000  00159991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a28  00000000  00000000  002aede0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000139  00000000  00000000  002b5808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	200000e8 	.word	0x200000e8
 8000268:	00000000 	.word	0x00000000
 800026c:	0800ef44 	.word	0x0800ef44

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	200000ec 	.word	0x200000ec
 8000288:	0800ef44 	.word	0x0800ef44

0800028c <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 800028c:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800028e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000292:	4917      	ldr	r1, [pc, #92]	; (80002f0 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000294:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000298:	4816      	ldr	r0, [pc, #88]	; (80002f4 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029a:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 800029c:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a2:	4815      	ldr	r0, [pc, #84]	; (80002f8 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a4:	4912      	ldr	r1, [pc, #72]	; (80002f0 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002a6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002a8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002aa:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ae:	4913      	ldr	r1, [pc, #76]	; (80002fc <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002b6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002b8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002bc:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002c8:	490d      	ldr	r1, [pc, #52]	; (8000300 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ca:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_BadHandler>

080002d4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002dc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002de:	f000 f897 	bl	8000410 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002e6:	4770      	bx	lr

080002e8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002e8:	f7ff bffe 	b.w	80002e8 <__tx_NMIHandler>

080002ec <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f0:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f4:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002f8:	20014880 	.word	0x20014880
    LDR     r1, =SYSTICK_CYCLES
 80002fc:	0026259f 	.word	0x0026259f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000300:	40ff0000 	.word	0x40ff0000

08000304 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000304:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000308:	4a2d      	ldr	r2, [pc, #180]	; (80003c0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800030c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000310:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000314:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000318:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800031e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000322:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000326:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032a:	f3bf 8f6f 	isb	sy

0800032e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800032e:	e7fe      	b.n	800032e <__tx_wait_here>

08000330 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000330:	4824      	ldr	r0, [pc, #144]	; (80003c4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000332:	4a25      	ldr	r2, [pc, #148]	; (80003c8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000334:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000338:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033a:	b191      	cbz	r1, 8000362 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800033c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800033e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000342:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000346:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034a:	d101      	bne.n	8000350 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800034c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000350 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000350:	4c1e      	ldr	r4, [pc, #120]	; (80003cc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000352:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000356:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800035c:	b10d      	cbz	r5, 8000362 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800035e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000360:	6023      	str	r3, [r4, #0]

08000362 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000362:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000364:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000366:	b1d1      	cbz	r1, 800039e <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000368:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036a:	b662      	cpsie	i

0800036c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800036c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800036e:	4c17      	ldr	r4, [pc, #92]	; (80003cc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000370:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000372:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000376:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000378:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800037e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000382:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000386:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800038e:	d101      	bne.n	8000394 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000390:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000394 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000394:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000398:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 800039c:	4770      	bx	lr

0800039e <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800039e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a4:	b909      	cbnz	r1, 80003aa <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a8:	e7f9      	b.n	800039e <__tx_ts_wait>

080003aa <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003aa:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003ae:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b2:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b8:	e7d8      	b.n	800036c <__tx_ts_restore>
 80003ba:	bf00      	nop

080003bc <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003bc:	4770      	bx	lr
 80003be:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c0:	2001491c 	.word	0x2001491c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c4:	20014884 	.word	0x20014884
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c8:	20014888 	.word	0x20014888
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003cc:	20014e88 	.word	0x20014e88

080003d0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d6:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003da:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003de:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ea:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003ec:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ee:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f4:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f6:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003fc:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000402:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000404:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000406:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800040c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040e:	4770      	bx	lr

08000410 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000410:	4922      	ldr	r1, [pc, #136]	; (800049c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000412:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000414:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000418:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041a:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800041c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041e:	b13a      	cbz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000420:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000424:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000426:	b91a      	cbnz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000428:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042e:	6018      	str	r0, [r3, #0]

08000430 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000430:	491d      	ldr	r1, [pc, #116]	; (80004a8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000432:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000434:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000436:	b122      	cbz	r2, 8000442 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000438:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000440:	e008      	b.n	8000454 <__tx_timer_done>

08000442 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000442:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000448:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800044c:	d101      	bne.n	8000452 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044e:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000450:	6818      	ldr	r0, [r3, #0]

08000452 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000452:	6008      	str	r0, [r1, #0]

08000454 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000458:	b912      	cbnz	r2, 8000460 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045a:	4914      	ldr	r1, [pc, #80]	; (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800045c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045e:	b1c8      	cbz	r0, 8000494 <__tx_timer_nothing_expired>

08000460 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000460:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000462:	4912      	ldr	r1, [pc, #72]	; (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000464:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000466:	b108      	cbz	r0, 800046c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000468:	f00c ff24 	bl	800d2b4 <_tx_timer_expiration_process>

0800046c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000470:	b172      	cbz	r2, 8000490 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000472:	f00c fe2d 	bl	800d0d0 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000476:	4810      	ldr	r0, [pc, #64]	; (80004b8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000478:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047a:	b949      	cbnz	r1, 8000490 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800047c:	480f      	ldr	r0, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000480:	4a0f      	ldr	r2, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000482:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000484:	480f      	ldr	r0, [pc, #60]	; (80004c4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800048c:	d000      	beq.n	8000490 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048e:	6002      	str	r2, [r0, #0]

08000490 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000490:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000494 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000494:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000498:	4770      	bx	lr
 800049a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800049c:	20014928 	.word	0x20014928
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a0:	20014e88 	.word	0x20014e88
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a4:	2001492c 	.word	0x2001492c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a8:	200149b8 	.word	0x200149b8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004ac:	200149bc 	.word	0x200149bc
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b0:	200149b4 	.word	0x200149b4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b4:	200149b0 	.word	0x200149b0
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b8:	2001491c 	.word	0x2001491c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004bc:	20014884 	.word	0x20014884
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c0:	20014888 	.word	0x20014888
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c4:	e000ed04 	.word	0xe000ed04

080004c8 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80004d4:	2334      	movs	r3, #52	; 0x34
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004dc:	4a15      	ldr	r2, [pc, #84]	; (8000534 <tx_application_define+0x6c>)
 80004de:	4916      	ldr	r1, [pc, #88]	; (8000538 <tx_application_define+0x70>)
 80004e0:	4816      	ldr	r0, [pc, #88]	; (800053c <tx_application_define+0x74>)
 80004e2:	f00d f991 	bl	800d808 <_txe_byte_pool_create>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d109      	bne.n	8000500 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <tx_application_define+0x74>)
 80004ee:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80004f0:	68b8      	ldr	r0, [r7, #8]
 80004f2:	f000 f82b 	bl	800054c <App_ThreadX_Init>
 80004f6:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d000      	beq.n	8000500 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80004fe:	e7fe      	b.n	80004fe <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000500:	2334      	movs	r3, #52	; 0x34
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <tx_application_define+0x78>)
 800050a:	490e      	ldr	r1, [pc, #56]	; (8000544 <tx_application_define+0x7c>)
 800050c:	480e      	ldr	r0, [pc, #56]	; (8000548 <tx_application_define+0x80>)
 800050e:	f00d f97b 	bl	800d808 <_txe_byte_pool_create>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d109      	bne.n	800052c <tx_application_define+0x64>
  {
    /* USER CODE BEGIN NX_Byte_Pool_Success */

    /* USER CODE END NX_Byte_Pool_Success */

    memory_ptr = (VOID *)&nx_app_byte_pool;
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <tx_application_define+0x80>)
 800051a:	60bb      	str	r3, [r7, #8]
    status = MX_NetXDuo_Init(memory_ptr);
 800051c:	68b8      	ldr	r0, [r7, #8]
 800051e:	f00d fb05 	bl	800db2c <MX_NetXDuo_Init>
 8000522:	60f8      	str	r0, [r7, #12]
    if (status != NX_SUCCESS)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d000      	beq.n	800052c <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_NetXDuo_Init_Error */
      while(1)
 800052a:	e7fe      	b.n	800052a <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000104 	.word	0x20000104
 8000538:	0800ef5c 	.word	0x0800ef5c
 800053c:	20000504 	.word	0x20000504
 8000540:	20000538 	.word	0x20000538
 8000544:	0800ef70 	.word	0x0800ef70
 8000548:	20007d38 	.word	0x20007d38

0800054c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000558:	68fb      	ldr	r3, [r7, #12]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800056a:	f00b faed 	bl	800bb48 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fe7b 	bl	8001274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f81b 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8d7 	bl	8000734 <MX_GPIO_Init>
  MX_ETH_Init();
 8000586:	f000 f87d 	bl	8000684 <MX_ETH_Init>
  MX_ICACHE_Init();
 800058a:	f000 f8c7 	bl	800071c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  // Inizializzazione dell'area di memoria con valori dummy
  for (ULONG i = 0; i < MEMORY_SIZE; i++)
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	e007      	b.n	80005a4 <main+0x30>
  {
    memory_area[i] = 'a';
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <main+0x40>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	2261      	movs	r2, #97	; 0x61
 800059c:	701a      	strb	r2, [r3, #0]
  for (ULONG i = 0; i < MEMORY_SIZE; i++)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3301      	adds	r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 80005aa:	d3f3      	bcc.n	8000594 <main+0x20>
  }
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80005ac:	f7ff ffdb 	bl	8000566 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x3c>
 80005b2:	bf00      	nop
 80005b4:	20007f14 	.word	0x20007f14

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b09c      	sub	sp, #112	; 0x70
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2250      	movs	r2, #80	; 0x50
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00d fe96 	bl	800e2f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
 80005dc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <SystemClock_Config+0xc8>)
 80005e0:	691b      	ldr	r3, [r3, #16]
 80005e2:	4a27      	ldr	r2, [pc, #156]	; (8000680 <SystemClock_Config+0xc8>)
 80005e4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80005e8:	6113      	str	r3, [r2, #16]
 80005ea:	4b25      	ldr	r3, [pc, #148]	; (8000680 <SystemClock_Config+0xc8>)
 80005ec:	691b      	ldr	r3, [r3, #16]
 80005ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f6:	bf00      	nop
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <SystemClock_Config+0xc8>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	f003 0308 	and.w	r3, r3, #8
 8000600:	2b08      	cmp	r3, #8
 8000602:	d1f9      	bne.n	80005f8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000608:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000612:	2303      	movs	r3, #3
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000616:	2304      	movs	r3, #4
 8000618:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 800061a:	23fa      	movs	r3, #250	; 0xfa
 800061c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 800062a:	2304      	movs	r3, #4
 800062c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800062e:	2300      	movs	r3, #0
 8000630:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fed8 	bl	80033f0 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000646:	f000 f931 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	231f      	movs	r3, #31
 800064c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2303      	movs	r3, #3
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	2105      	movs	r1, #5
 8000668:	4618      	mov	r0, r3
 800066a:	f003 faf9 	bl	8003c60 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000674:	f000 f91a 	bl	80008ac <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3770      	adds	r7, #112	; 0x70
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	44020800 	.word	0x44020800

08000684 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_ETH_Init+0x80>)
 800068a:	4a1f      	ldr	r2, [pc, #124]	; (8000708 <MX_ETH_Init+0x84>)
 800068c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_ETH_Init+0x88>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_ETH_Init+0x88>)
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_ETH_Init+0x88>)
 800069c:	22e1      	movs	r2, #225	; 0xe1
 800069e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_ETH_Init+0x88>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_ETH_Init+0x88>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_ETH_Init+0x88>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_ETH_Init+0x80>)
 80006b4:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_ETH_Init+0x88>)
 80006b6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_ETH_Init+0x80>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_ETH_Init+0x80>)
 80006c0:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_ETH_Init+0x8c>)
 80006c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_ETH_Init+0x80>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <MX_ETH_Init+0x90>)
 80006c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_ETH_Init+0x80>)
 80006cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006d2:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_ETH_Init+0x80>)
 80006d4:	f000 ff0a 	bl	80014ec <HAL_ETH_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80006de:	f000 f8e5 	bl	80008ac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006e2:	2238      	movs	r2, #56	; 0x38
 80006e4:	2100      	movs	r1, #0
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_ETH_Init+0x94>)
 80006e8:	f00d fe06 	bl	800e2f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_ETH_Init+0x94>)
 80006ee:	2221      	movs	r2, #33	; 0x21
 80006f0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_ETH_Init+0x94>)
 80006f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006f8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_ETH_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20007e64 	.word	0x20007e64
 8000708:	40028000 	.word	0x40028000
 800070c:	20014714 	.word	0x20014714
 8000710:	20007e04 	.word	0x20007e04
 8000714:	20007da4 	.word	0x20007da4
 8000718:	20007d6c 	.word	0x20007d6c

0800071c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000720:	f002 fe14 	bl	800334c <HAL_ICACHE_Enable>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800072a:	f000 f8bf 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b4b      	ldr	r3, [pc, #300]	; (8000878 <MX_GPIO_Init+0x144>)
 800074c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000750:	4a49      	ldr	r2, [pc, #292]	; (8000878 <MX_GPIO_Init+0x144>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800075a:	4b47      	ldr	r3, [pc, #284]	; (8000878 <MX_GPIO_Init+0x144>)
 800075c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000768:	4b43      	ldr	r3, [pc, #268]	; (8000878 <MX_GPIO_Init+0x144>)
 800076a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800076e:	4a42      	ldr	r2, [pc, #264]	; (8000878 <MX_GPIO_Init+0x144>)
 8000770:	f043 0320 	orr.w	r3, r3, #32
 8000774:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000778:	4b3f      	ldr	r3, [pc, #252]	; (8000878 <MX_GPIO_Init+0x144>)
 800077a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800077e:	f003 0320 	and.w	r3, r3, #32
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b3c      	ldr	r3, [pc, #240]	; (8000878 <MX_GPIO_Init+0x144>)
 8000788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800078c:	4a3a      	ldr	r2, [pc, #232]	; (8000878 <MX_GPIO_Init+0x144>)
 800078e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000792:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000796:	4b38      	ldr	r3, [pc, #224]	; (8000878 <MX_GPIO_Init+0x144>)
 8000798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800079c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b34      	ldr	r3, [pc, #208]	; (8000878 <MX_GPIO_Init+0x144>)
 80007a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007aa:	4a33      	ldr	r2, [pc, #204]	; (8000878 <MX_GPIO_Init+0x144>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007b4:	4b30      	ldr	r3, [pc, #192]	; (8000878 <MX_GPIO_Init+0x144>)
 80007b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <MX_GPIO_Init+0x144>)
 80007c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007c8:	4a2b      	ldr	r2, [pc, #172]	; (8000878 <MX_GPIO_Init+0x144>)
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <MX_GPIO_Init+0x144>)
 80007d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <MX_GPIO_Init+0x144>)
 80007e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007e6:	4a24      	ldr	r2, [pc, #144]	; (8000878 <MX_GPIO_Init+0x144>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <MX_GPIO_Init+0x144>)
 80007f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2110      	movs	r1, #16
 8000802:	481e      	ldr	r0, [pc, #120]	; (800087c <MX_GPIO_Init+0x148>)
 8000804:	f002 fd70 	bl	80032e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2101      	movs	r1, #1
 800080c:	481c      	ldr	r0, [pc, #112]	; (8000880 <MX_GPIO_Init+0x14c>)
 800080e:	f002 fd6b 	bl	80032e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2110      	movs	r1, #16
 8000816:	481b      	ldr	r0, [pc, #108]	; (8000884 <MX_GPIO_Init+0x150>)
 8000818:	f002 fd66 	bl	80032e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_YELLOW_Pin;
 800081c:	2310      	movs	r3, #16
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4812      	ldr	r0, [pc, #72]	; (800087c <MX_GPIO_Init+0x148>)
 8000834:	f002 fc06 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000838:	2301      	movs	r3, #1
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	480c      	ldr	r0, [pc, #48]	; (8000880 <MX_GPIO_Init+0x14c>)
 8000850:	f002 fbf8 	bl	8003044 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000854:	2310      	movs	r3, #16
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_GPIO_Init+0x150>)
 800086c:	f002 fbea 	bl	8003044 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000870:	bf00      	nop
 8000872:	3730      	adds	r7, #48	; 0x30
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	44020c00 	.word	0x44020c00
 800087c:	42021400 	.word	0x42021400
 8000880:	42020400 	.word	0x42020400
 8000884:	42021800 	.word	0x42021800

08000888 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d101      	bne.n	800089e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089a:	f000 fd11 	bl	80012c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40001000 	.word	0x40001000

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	 HAL_PWR_DisableWakeUpPin(PWR_WKUP1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f002 fd71 	bl	8003398 <HAL_PWR_DisableWakeUpPin>
		  	    HAL_PWR_EnableWakeUpPin(PWR_WKUP1);
 80008b6:	2001      	movs	r0, #1
 80008b8:	f002 fd58 	bl	800336c <HAL_PWR_EnableWakeUpPin>
		  	    HAL_PWR_EnterSTANDBYMode();
 80008bc:	f002 fd80 	bl	80033c0 <HAL_PWR_EnterSTANDBYMode>
  /* USER CODE END Error_Handler_Debug */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08e      	sub	sp, #56	; 0x38
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a61      	ldr	r2, [pc, #388]	; (8000a78 <HAL_ETH_MspInit+0x1a4>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	f040 80bb 	bne.w	8000a6e <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80008f8:	4b60      	ldr	r3, [pc, #384]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 80008fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fe:	4a5f      	ldr	r2, [pc, #380]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 8000900:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000908:	4b5c      	ldr	r3, [pc, #368]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000912:	623b      	str	r3, [r7, #32]
 8000914:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8000916:	4b59      	ldr	r3, [pc, #356]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 8000918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091c:	4a57      	ldr	r2, [pc, #348]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 800091e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000922:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000926:	4b55      	ldr	r3, [pc, #340]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 8000928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000930:	61fb      	str	r3, [r7, #28]
 8000932:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8000934:	4b51      	ldr	r3, [pc, #324]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093a:	4a50      	ldr	r2, [pc, #320]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 800093c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000944:	4b4d      	ldr	r3, [pc, #308]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 8000946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800094e:	61bb      	str	r3, [r7, #24]
 8000950:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	4b4a      	ldr	r3, [pc, #296]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 8000954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000958:	4a48      	ldr	r2, [pc, #288]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000962:	4b46      	ldr	r3, [pc, #280]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 8000964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b42      	ldr	r3, [pc, #264]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 8000972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000976:	4a41      	ldr	r2, [pc, #260]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000980:	4b3e      	ldr	r3, [pc, #248]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 8000982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b3b      	ldr	r3, [pc, #236]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 8000990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000994:	4a39      	ldr	r2, [pc, #228]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 8000996:	f043 0302 	orr.w	r3, r3, #2
 800099a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800099e:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 80009a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ac:	4b33      	ldr	r3, [pc, #204]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 80009ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b2:	4a32      	ldr	r2, [pc, #200]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 80009b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009bc:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <HAL_ETH_MspInit+0x1a8>)
 80009be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009ca:	2332      	movs	r3, #50	; 0x32
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d6:	2302      	movs	r3, #2
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009da:	230b      	movs	r3, #11
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	4826      	ldr	r0, [pc, #152]	; (8000a80 <HAL_ETH_MspInit+0x1ac>)
 80009e6:	f002 fb2d 	bl	8003044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80009ea:	2386      	movs	r3, #134	; 0x86
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f6:	2302      	movs	r3, #2
 80009f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009fa:	230b      	movs	r3, #11
 80009fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	4619      	mov	r1, r3
 8000a04:	481f      	ldr	r0, [pc, #124]	; (8000a84 <HAL_ETH_MspInit+0x1b0>)
 8000a06:	f002 fb1d 	bl	8003044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a1c:	230b      	movs	r3, #11
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	4818      	ldr	r0, [pc, #96]	; (8000a88 <HAL_ETH_MspInit+0x1b4>)
 8000a28:	f002 fb0c 	bl	8003044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a3e:	230b      	movs	r3, #11
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	4619      	mov	r1, r3
 8000a48:	4810      	ldr	r0, [pc, #64]	; (8000a8c <HAL_ETH_MspInit+0x1b8>)
 8000a4a:	f002 fafb 	bl	8003044 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2107      	movs	r1, #7
 8000a52:	206a      	movs	r0, #106	; 0x6a
 8000a54:	f000 fd22 	bl	800149c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000a58:	206a      	movs	r0, #106	; 0x6a
 8000a5a:	f000 fd39 	bl	80014d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	206b      	movs	r0, #107	; 0x6b
 8000a64:	f000 fd1a 	bl	800149c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8000a68:	206b      	movs	r0, #107	; 0x6b
 8000a6a:	f000 fd31 	bl	80014d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000a6e:	bf00      	nop
 8000a70:	3738      	adds	r7, #56	; 0x38
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40028000 	.word	0x40028000
 8000a7c:	44020c00 	.word	0x44020c00
 8000a80:	42020800 	.word	0x42020800
 8000a84:	42020000 	.word	0x42020000
 8000a88:	42020400 	.word	0x42020400
 8000a8c:	42021800 	.word	0x42021800

08000a90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	; 0x38
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a98:	4b33      	ldr	r3, [pc, #204]	; (8000b68 <HAL_InitTick+0xd8>)
 8000a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a9e:	4a32      	ldr	r2, [pc, #200]	; (8000b68 <HAL_InitTick+0xd8>)
 8000aa0:	f043 0310 	orr.w	r3, r3, #16
 8000aa4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000aa8:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <HAL_InitTick+0xd8>)
 8000aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab6:	f107 020c 	add.w	r2, r7, #12
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 fbe3 	bl	800428c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d103      	bne.n	8000ad8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ad0:	f003 fbc6 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 8000ad4:	6378      	str	r0, [r7, #52]	; 0x34
 8000ad6:	e004      	b.n	8000ae2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ad8:	f003 fbc2 	bl	8004260 <HAL_RCC_GetPCLK1Freq>
 8000adc:	4603      	mov	r3, r0
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae4:	095b      	lsrs	r3, r3, #5
 8000ae6:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <HAL_InitTick+0xdc>)
 8000ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8000aec:	09db      	lsrs	r3, r3, #7
 8000aee:	3b01      	subs	r3, #1
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <HAL_InitTick+0xe0>)
 8000af4:	4a1f      	ldr	r2, [pc, #124]	; (8000b74 <HAL_InitTick+0xe4>)
 8000af6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <HAL_InitTick+0xe0>)
 8000afa:	2263      	movs	r2, #99	; 0x63
 8000afc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000afe:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <HAL_InitTick+0xe0>)
 8000b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b02:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <HAL_InitTick+0xe0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <HAL_InitTick+0xe0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000b10:	4817      	ldr	r0, [pc, #92]	; (8000b70 <HAL_InitTick+0xe0>)
 8000b12:	f003 fbf3 	bl	80042fc <HAL_TIM_Base_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d118      	bne.n	8000b56 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b24:	4812      	ldr	r0, [pc, #72]	; (8000b70 <HAL_InitTick+0xe0>)
 8000b26:	f003 fc4b 	bl	80043c0 <HAL_TIM_Base_Start_IT>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d10e      	bne.n	8000b56 <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	d808      	bhi.n	8000b50 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	2031      	movs	r0, #49	; 0x31
 8000b44:	f000 fcaa 	bl	800149c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b48:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_InitTick+0xe8>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	e002      	b.n	8000b56 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000b56:	2031      	movs	r0, #49	; 0x31
 8000b58:	f000 fcba 	bl	80014d0 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000b5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3738      	adds	r7, #56	; 0x38
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	44020c00 	.word	0x44020c00
 8000b6c:	0a7c5ac5 	.word	0x0a7c5ac5
 8000b70:	2001471c 	.word	0x2001471c
 8000b74:	40001000 	.word	0x40001000
 8000b78:	20000004 	.word	0x20000004

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <MemManage_Handler+0x4>

08000b8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <TIM6_IRQHandler+0x10>)
 8000bae:	f003 fcb5 	bl	800451c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2001471c 	.word	0x2001471c

08000bbc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <ETH_IRQHandler+0x10>)
 8000bc2:	f001 f831 	bl	8001c28 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20007e64 	.word	0x20007e64

08000bd0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet Wakeup global interrupt.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <ETH_WKUP_IRQHandler+0x10>)
 8000bd6:	f001 f827 	bl	8001c28 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20007e64 	.word	0x20007e64

08000be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return 1;
 8000be8:	2301      	movs	r3, #1
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <_kill>:

int _kill(int pid, int sig)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bfe:	f00d fbc9 	bl	800e394 <__errno>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2216      	movs	r2, #22
 8000c06:	601a      	str	r2, [r3, #0]
  return -1;
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <_exit>:

void _exit (int status)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ffe7 	bl	8000bf4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c26:	e7fe      	b.n	8000c26 <_exit+0x12>

08000c28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	e00a      	b.n	8000c50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c3a:	f3af 8000 	nop.w
 8000c3e:	4601      	mov	r1, r0
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dbf0      	blt.n	8000c3a <_read+0x12>
  }

  return len;
 8000c58:	687b      	ldr	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	e009      	b.n	8000c88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbf1      	blt.n	8000c74 <_write+0x12>
  }
  return len;
 8000c90:	687b      	ldr	r3, [r7, #4]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_close>:

int _close(int file)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_isatty>:

int _isatty(int file)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d34:	f00d fb2e 	bl	800e394 <__errno>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <_sbrk+0x64>)
 8000d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200a0000 	.word	0x200a0000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	20014768 	.word	0x20014768
 8000d6c:	20015980 	.word	0x20015980

08000d70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d76:	4b35      	ldr	r3, [pc, #212]	; (8000e4c <SystemInit+0xdc>)
 8000d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7c:	4a33      	ldr	r2, [pc, #204]	; (8000e4c <SystemInit+0xdc>)
 8000d7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000d86:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <SystemInit+0xe0>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <SystemInit+0xe0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000d92:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <SystemInit+0xe0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000d98:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <SystemInit+0xe0>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	492c      	ldr	r1, [pc, #176]	; (8000e50 <SystemInit+0xe0>)
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <SystemInit+0xe4>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <SystemInit+0xe0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <SystemInit+0xe0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <SystemInit+0xe0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000db6:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <SystemInit+0xe0>)
 8000db8:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <SystemInit+0xe8>)
 8000dba:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000dbc:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <SystemInit+0xe0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000dc2:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <SystemInit+0xe0>)
 8000dc4:	4a24      	ldr	r2, [pc, #144]	; (8000e58 <SystemInit+0xe8>)
 8000dc6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000dc8:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <SystemInit+0xe0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <SystemInit+0xe0>)
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <SystemInit+0xe8>)
 8000dd2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <SystemInit+0xe0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <SystemInit+0xe0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1c      	ldr	r2, [pc, #112]	; (8000e50 <SystemInit+0xe0>)
 8000de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <SystemInit+0xe0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <SystemInit+0xdc>)
 8000dee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <SystemInit+0xec>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000dfc:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000e04:	d003      	beq.n	8000e0e <SystemInit+0x9e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000e0c:	d117      	bne.n	8000e3e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <SystemInit+0xec>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d005      	beq.n	8000e26 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <SystemInit+0xec>)
 8000e1c:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <SystemInit+0xf0>)
 8000e1e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <SystemInit+0xec>)
 8000e22:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <SystemInit+0xf4>)
 8000e24:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <SystemInit+0xec>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a0c      	ldr	r2, [pc, #48]	; (8000e5c <SystemInit+0xec>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <SystemInit+0xec>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <SystemInit+0xec>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	61d3      	str	r3, [r2, #28]
  }
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00
 8000e50:	44020c00 	.word	0x44020c00
 8000e54:	eae2eae3 	.word	0xeae2eae3
 8000e58:	01010280 	.word	0x01010280
 8000e5c:	40022000 	.word	0x40022000
 8000e60:	08192a3b 	.word	0x08192a3b
 8000e64:	4c5d6e7f 	.word	0x4c5d6e7f

08000e68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e6c:	f7ff ff80 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e72:	490d      	ldr	r1, [pc, #52]	; (8000ea8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <LoopForever+0xe>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e88:	4c0a      	ldr	r4, [pc, #40]	; (8000eb4 <LoopForever+0x16>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e96:	f00d fa83 	bl	800e3a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e9a:	f7ff fb6b 	bl	8000574 <main>

08000e9e <LoopForever>:

LoopForever:
    b LoopForever
 8000e9e:	e7fe      	b.n	8000e9e <LoopForever>
  ldr   r0, =_estack
 8000ea0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8000eac:	0800f11c 	.word	0x0800f11c
  ldr r2, =_sbss
 8000eb0:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000eb4:	2001597c 	.word	0x2001597c

08000eb8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC1_IRQHandler>

08000eba <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00b      	beq.n	8000ee2 <LAN8742_RegisterBusIO+0x28>
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d007      	beq.n	8000ee2 <LAN8742_RegisterBusIO+0x28>
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <LAN8742_RegisterBusIO+0x28>
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	e014      	b.n	8000f12 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d17c      	bne.n	8001038 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2220      	movs	r2, #32
 8000f50:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e01c      	b.n	8000f92 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	f107 0208 	add.w	r2, r7, #8
 8000f60:	2112      	movs	r1, #18
 8000f62:	6978      	ldr	r0, [r7, #20]
 8000f64:	4798      	blx	r3
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	da03      	bge.n	8000f74 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000f6c:	f06f 0304 	mvn.w	r3, #4
 8000f70:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000f72:	e00b      	b.n	8000f8c <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	f003 031f 	and.w	r3, r3, #31
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d105      	bne.n	8000f8c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
         break;
 8000f8a:	e005      	b.n	8000f98 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2b1f      	cmp	r3, #31
 8000f96:	d9df      	bls.n	8000f58 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b1f      	cmp	r3, #31
 8000f9e:	d902      	bls.n	8000fa6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000fa0:	f06f 0302 	mvn.w	r3, #2
 8000fa4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d145      	bne.n	8001038 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6810      	ldr	r0, [r2, #0]
 8000fb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4798      	blx	r3
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db37      	blt.n	8001032 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	6810      	ldr	r0, [r2, #0]
 8000fca:	f107 0208 	add.w	r2, r7, #8
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4798      	blx	r3
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db28      	blt.n	800102a <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4798      	blx	r3
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000fe2:	e01c      	b.n	800101e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4798      	blx	r3
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ff6:	d80e      	bhi.n	8001016 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	6810      	ldr	r0, [r2, #0]
 8001000:	f107 0208 	add.w	r2, r7, #8
 8001004:	2100      	movs	r1, #0
 8001006:	4798      	blx	r3
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	da07      	bge.n	800101e <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 800100e:	f06f 0304 	mvn.w	r3, #4
 8001012:	613b      	str	r3, [r7, #16]
                 break;
 8001014:	e010      	b.n	8001038 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001016:	f06f 0301 	mvn.w	r3, #1
 800101a:	613b      	str	r3, [r7, #16]
               break;
 800101c:	e00c      	b.n	8001038 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1dd      	bne.n	8000fe4 <LAN8742_Init+0xc6>
 8001028:	e006      	b.n	8001038 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800102a:	f06f 0304 	mvn.w	r3, #4
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	e002      	b.n	8001038 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001032:	f06f 0303 	mvn.w	r3, #3
 8001036:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d112      	bne.n	8001064 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	4798      	blx	r3
 8001044:	4603      	mov	r3, r0
 8001046:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001048:	bf00      	nop
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	4798      	blx	r3
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800105c:	d9f5      	bls.n	800104a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	605a      	str	r2, [r3, #4]
   }

   LAN8742_enable_wol(pObj);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 f88c 	bl	8001182 <LAN8742_enable_wol>

   return status;
 800106a:	693b      	ldr	r3, [r7, #16]
 }
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	6810      	ldr	r0, [r2, #0]
 8001088:	f107 020c 	add.w	r2, r7, #12
 800108c:	2101      	movs	r1, #1
 800108e:	4798      	blx	r3
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	da02      	bge.n	800109c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001096:	f06f 0304 	mvn.w	r3, #4
 800109a:	e06e      	b.n	800117a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	6810      	ldr	r0, [r2, #0]
 80010a4:	f107 020c 	add.w	r2, r7, #12
 80010a8:	2101      	movs	r1, #1
 80010aa:	4798      	blx	r3
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	da02      	bge.n	80010b8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010b2:	f06f 0304 	mvn.w	r3, #4
 80010b6:	e060      	b.n	800117a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e059      	b.n	800117a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6810      	ldr	r0, [r2, #0]
 80010ce:	f107 020c 	add.w	r2, r7, #12
 80010d2:	2100      	movs	r1, #0
 80010d4:	4798      	blx	r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	da02      	bge.n	80010e2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010dc:	f06f 0304 	mvn.w	r3, #4
 80010e0:	e04b      	b.n	800117a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d11b      	bne.n	8001124 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d006      	beq.n	8001104 <LAN8742_GetLinkState+0x90>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001100:	2302      	movs	r3, #2
 8001102:	e03a      	b.n	800117a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800110e:	2303      	movs	r3, #3
 8001110:	e033      	b.n	800117a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800111c:	2304      	movs	r3, #4
 800111e:	e02c      	b.n	800117a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001120:	2305      	movs	r3, #5
 8001122:	e02a      	b.n	800117a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	6810      	ldr	r0, [r2, #0]
 800112c:	f107 020c 	add.w	r2, r7, #12
 8001130:	211f      	movs	r1, #31
 8001132:	4798      	blx	r3
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	da02      	bge.n	8001140 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800113a:	f06f 0304 	mvn.w	r3, #4
 800113e:	e01c      	b.n	800117a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800114a:	2306      	movs	r3, #6
 800114c:	e015      	b.n	800117a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f003 031c 	and.w	r3, r3, #28
 8001154:	2b18      	cmp	r3, #24
 8001156:	d101      	bne.n	800115c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001158:	2302      	movs	r3, #2
 800115a:	e00e      	b.n	800117a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 031c 	and.w	r3, r3, #28
 8001162:	2b08      	cmp	r3, #8
 8001164:	d101      	bne.n	800116a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001166:	2303      	movs	r3, #3
 8001168:	e007      	b.n	800117a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f003 031c 	and.w	r3, r3, #28
 8001170:	2b14      	cmp	r3, #20
 8001172:	d101      	bne.n	8001178 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001174:	2304      	movs	r3, #4
 8001176:	e000      	b.n	800117a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001178:	2305      	movs	r3, #5
    }
  }
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <LAN8742_enable_wol>:
#define LAN8742_PME_ENABLE	((uint16_t)0x4000U)		/* Bit 14 to 1 to enable PME on Led1 (YELLOW) */
#define LAN8742_SELF_CLEAR	((uint16_t)0x0200U)		/* Bit 9 to 1 to enable self clear */
#define LAN8742_WOL_ENABLE	((uint16_t)0x0002U)		/* Bit 1 to 1 to enable wake on lan with magic packet */
#define LAN8742_MPR_RESET	((uint16_t)0x0020U)		/* The MAC sets this bit upon receiving a valid Magic Packet */

void LAN8742_enable_wol(lan8742_Object_t *pObj){
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 	 uint16_t val;

 	 val = LAN8742_PME_ENABLE;
 800118a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800118e:	81fb      	strh	r3, [r7, #14]
 	 val |= LAN8742_SELF_CLEAR;
 8001190:	89fb      	ldrh	r3, [r7, #14]
 8001192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001196:	81fb      	strh	r3, [r7, #14]
 	 val |= LAN8742_WOL_ENABLE;
 8001198:	89fb      	ldrh	r3, [r7, #14]
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	81fb      	strh	r3, [r7, #14]
 	 val |= LAN8742_MPR_RESET;
 80011a0:	89fb      	ldrh	r3, [r7, #14]
 80011a2:	f043 0320 	orr.w	r3, r3, #32
 80011a6:	81fb      	strh	r3, [r7, #14]
 	// abilitiamo anche il self clear ponendo il bit 9 a 1
 	// alzo il secondo bit a 1 per abilitare il wake on lan tramite magic packet
 	// alzo il bit Magic Packet Received (MPR) (bit 5)  a 1 per sollecitarne il reset
     // valore binario finale: 0100 0010 0010 0010
 	// hex: 0x4222
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_MMD_WOL_WUCSR, val);
 80011a8:	89fb      	ldrh	r3, [r7, #14]
 80011aa:	461a      	mov	r2, r3
 80011ac:	f248 0110 	movw	r1, #32784	; 0x8010
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f82a 	bl	800120a <LAN8742_write_mmd>


 	 val = 0x1000;
 80011b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ba:	81fb      	strh	r3, [r7, #14]
 	// passo 1 impostiamo il tempo di reset per il self clear del bit PME
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_MCFGR, val);
 80011bc:	89fb      	ldrh	r3, [r7, #14]
 80011be:	461a      	mov	r2, r3
 80011c0:	f248 0164 	movw	r1, #32868	; 0x8064
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f820 	bl	800120a <LAN8742_write_mmd>

 	 // imposto i registri ADDR per riconoscere il MAC nel magic packet
 	 // assumento che il MAC sia 00:80:E1:00:00:00

 	 // registro A:
 	 uint16_t A = 0x0000;
 80011ca:	2300      	movs	r3, #0
 80011cc:	81bb      	strh	r3, [r7, #12]
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_RX_ADDRA, A);
 80011ce:	89bb      	ldrh	r3, [r7, #12]
 80011d0:	461a      	mov	r2, r3
 80011d2:	f248 0161 	movw	r1, #32865	; 0x8061
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 f817 	bl	800120a <LAN8742_write_mmd>
 	 // registro B:
 	 uint16_t B = 0x00E1;
 80011dc:	23e1      	movs	r3, #225	; 0xe1
 80011de:	817b      	strh	r3, [r7, #10]
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_RX_ADDRB, B);
 80011e0:	897b      	ldrh	r3, [r7, #10]
 80011e2:	461a      	mov	r2, r3
 80011e4:	f248 0162 	movw	r1, #32866	; 0x8062
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f80e 	bl	800120a <LAN8742_write_mmd>
 	 // registro C:
 	 uint16_t C = 0x8000;
 80011ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011f2:	813b      	strh	r3, [r7, #8]
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_RX_ADDRC, C);
 80011f4:	893b      	ldrh	r3, [r7, #8]
 80011f6:	461a      	mov	r2, r3
 80011f8:	f248 0163 	movw	r1, #32867	; 0x8063
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f804 	bl	800120a <LAN8742_write_mmd>
  }
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <LAN8742_write_mmd>:
  * @param pObj: device object LAN8742_Object_t.
  * @param target: address to write in.
  * @param content: content to write in target register
  *
  * */
 void LAN8742_write_mmd(lan8742_Object_t *pObj, uint16_t target, uint16_t content){
 800120a:	b580      	push	{r7, lr}
 800120c:	b084      	sub	sp, #16
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	807b      	strh	r3, [r7, #2]
 8001216:	4613      	mov	r3, r2
 8001218:	803b      	strh	r3, [r7, #0]

	 // Imposta funzione: bit 14-15 a 00 (MMD_ADDRESS)
	 uint16_t val = 0x00;
 800121a:	2300      	movs	r3, #0
 800121c:	81fb      	strh	r3, [r7, #14]

	 // imposto l'indirizzo del dispositivo (bit 0-4) a 00011 (3)
	 val |= 0x03;
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	f043 0303 	orr.w	r3, r3, #3
 8001224:	81fb      	strh	r3, [r7, #14]

	 // scrivo nel registro Access control register
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDACR, val);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6810      	ldr	r0, [r2, #0]
 800122e:	89fa      	ldrh	r2, [r7, #14]
 8001230:	210d      	movs	r1, #13
 8001232:	4798      	blx	r3

	 // scrivo nel registro MMD ACCESS ADDRESS/DATA REGISTER l'indirizzo del registro target della scrittura
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDAADR, target);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6810      	ldr	r0, [r2, #0]
 800123c:	887a      	ldrh	r2, [r7, #2]
 800123e:	210e      	movs	r1, #14
 8001240:	4798      	blx	r3

	 //------------ scrittura inizializzata --------------

	 //imposta funzione: bit 14-15 a 01
	 val = LAN8742_MMDACR_MMD_FUNCTION_DATA; // 0x4000U
 8001242:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001246:	81fb      	strh	r3, [r7, #14]
	 val |= 0x03;
 8001248:	89fb      	ldrh	r3, [r7, #14]
 800124a:	f043 0303 	orr.w	r3, r3, #3
 800124e:	81fb      	strh	r3, [r7, #14]

	 // scrivo nel registro Access control register
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDACR, val);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6810      	ldr	r0, [r2, #0]
 8001258:	89fa      	ldrh	r2, [r7, #14]
 800125a:	210d      	movs	r1, #13
 800125c:	4798      	blx	r3

	 // scrivo nel registro MMD ACCESS ADDRESS/DATA REGISTER i dati da inviare
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDAADR, content);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6810      	ldr	r0, [r2, #0]
 8001266:	883a      	ldrh	r2, [r7, #0]
 8001268:	210e      	movs	r1, #14
 800126a:	4798      	blx	r3
 }
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f904 	bl	8001486 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800127e:	f002 fea7 	bl	8003fd0 <HAL_RCC_GetSysClockFreq>
 8001282:	4602      	mov	r2, r0
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_Init+0x40>)
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	490a      	ldr	r1, [pc, #40]	; (80012b8 <HAL_Init+0x44>)
 800128e:	5ccb      	ldrb	r3, [r1, r3]
 8001290:	fa22 f303 	lsr.w	r3, r2, r3
 8001294:	4a09      	ldr	r2, [pc, #36]	; (80012bc <HAL_Init+0x48>)
 8001296:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001298:	200f      	movs	r0, #15
 800129a:	f7ff fbf9 	bl	8000a90 <HAL_InitTick>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e002      	b.n	80012ae <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012a8:	f7ff fb0c 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	44020c00 	.word	0x44020c00
 80012b8:	0800f01c 	.word	0x0800f01c
 80012bc:	20000000 	.word	0x20000000

080012c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008
 80012e4:	2001476c 	.word	0x2001476c

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	2001476c 	.word	0x2001476c

08001300 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <HAL_SBS_ETHInterfaceSelect+0x28>)
 800130a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800130e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001312:	4905      	ldr	r1, [pc, #20]	; (8001328 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4313      	orrs	r3, r2
 8001318:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	44000400 	.word	0x44000400

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db0b      	blt.n	80013ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <__NVIC_EnableIRQ+0x38>)
 80013aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ff4c 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014aa:	f7ff ff63 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	6978      	ldr	r0, [r7, #20]
 80014b6:	f7ff ffb3 	bl	8001420 <NVIC_EncodePriority>
 80014ba:	4602      	mov	r2, r0
 80014bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff82 	bl	80013cc <__NVIC_SetPriority>
}
 80014c8:	bf00      	nop
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff56 	bl	8001390 <__NVIC_EnableIRQ>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0d2      	b.n	80016a4 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001504:	2b00      	cmp	r3, #0
 8001506:	d106      	bne.n	8001516 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2223      	movs	r2, #35	; 0x23
 800150c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff f9df 	bl	80008d4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 8001516:	4b65      	ldr	r3, [pc, #404]	; (80016ac <HAL_ETH_Init+0x1c0>)
 8001518:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800151c:	4a63      	ldr	r2, [pc, #396]	; (80016ac <HAL_ETH_Init+0x1c0>)
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001526:	4b61      	ldr	r3, [pc, #388]	; (80016ac <HAL_ETH_Init+0x1c0>)
 8001528:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	7a1b      	ldrb	r3, [r3, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d103      	bne.n	8001544 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff fedf 	bl	8001300 <HAL_SBS_ETHInterfaceSelect>
 8001542:	e003      	b.n	800154c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8001544:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001548:	f7ff feda 	bl	8001300 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 800154c:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <HAL_ETH_Init+0x1c4>)
 800154e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001568:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800156a:	f7ff febd 	bl	80012e8 <HAL_GetTick>
 800156e:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001570:	e011      	b.n	8001596 <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001572:	f7ff feb9 	bl	80012e8 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001580:	d909      	bls.n	8001596 <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2204      	movs	r2, #4
 8001586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	22e0      	movs	r2, #224	; 0xe0
 800158e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e086      	b.n	80016a4 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1e4      	bne.n	8001572 <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 ff25 	bl	80023f8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80015ae:	f002 fe3b 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4a3f      	ldr	r2, [pc, #252]	; (80016b4 <HAL_ETH_Init+0x1c8>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0c9a      	lsrs	r2, r3, #18
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	3a01      	subs	r2, #1
 80015c2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f001 f96c 	bl	80028a4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80015d8:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d009      	beq.n	800160c <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	22e0      	movs	r2, #224	; 0xe0
 8001604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e04b      	b.n	80016a4 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001614:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001618:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800161c:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6952      	ldr	r2, [r2, #20]
 8001624:	0051      	lsls	r1, r2, #1
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	430b      	orrs	r3, r1
 800162c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001630:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f001 f9d2 	bl	80029de <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f001 fa18 	bl	8002a70 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	3305      	adds	r3, #5
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	021a      	lsls	r2, r3, #8
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	3304      	adds	r3, #4
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	4619      	mov	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	3303      	adds	r3, #3
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	061a      	lsls	r2, r3, #24
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	3302      	adds	r3, #2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	041b      	lsls	r3, r3, #16
 8001672:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	3301      	adds	r3, #1
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800167e:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800168c:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800168e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2210      	movs	r2, #16
 800169e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	44020c00 	.word	0x44020c00
 80016b0:	44000400 	.word	0x44000400
 80016b4:	431bde83 	.word	0x431bde83

080016b8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d17c      	bne.n	80017c4 <HAL_ETH_Start_IT+0x10c>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2223      	movs	r2, #35	; 0x23
 80016ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <HAL_ETH_Start_IT+0x118>)
 80016e6:	430b      	orrs	r3, r1
 80016e8:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	f043 6342 	orr.w	r3, r3, #203423744	; 0xc200000
 80016fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001700:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2204      	movs	r2, #4
 8001708:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f9c3 	bl	8001a96 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0202 	orr.w	r2, r2, #2
 800171e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0201 	orr.w	r2, r2, #1
 8001740:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800174c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800175c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001768:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001778:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001784:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001790:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001794:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	f443 4350 	orr.w	r3, r3, #53248	; 0xd000
 80017ac:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 80017b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017b4:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2223      	movs	r2, #35	; 0x23
 80017bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e000      	b.n	80017c6 <HAL_ETH_Start_IT+0x10e>
  }
  else
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
  }
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	0c020060 	.word	0x0c020060

080017d4 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017e2:	2b23      	cmp	r3, #35	; 0x23
 80017e4:	d13f      	bne.n	8001866 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2223      	movs	r2, #35	; 0x23
 80017ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001806:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001812:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001822:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0201 	bic.w	r2, r2, #1
 8001834:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0202 	bic.w	r2, r2, #2
 8001858:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2210      	movs	r2, #16
 800185e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
  }
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d109      	bne.n	8001898 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800188a:	f043 0201 	orr.w	r2, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e03a      	b.n	800190e <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800189e:	2b23      	cmp	r3, #35	; 0x23
 80018a0:	d134      	bne.n	800190c <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80018aa:	2201      	movs	r2, #1
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f001 f93b 	bl	8002b2a <ETH_Prepare_Tx_Descriptors>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d009      	beq.n	80018ce <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c0:	f043 0202 	orr.w	r2, r3, #2
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e01f      	b.n	800190e <HAL_ETH_Transmit_IT+0x9a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018ce:	f3bf 8f4f 	dsb	sy
}
 80018d2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	629a      	str	r2, [r3, #40]	; 0x28
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d904      	bls.n	80018f0 <HAL_ETH_Transmit_IT+0x7c>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	1f1a      	subs	r2, r3, #4
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3106      	adds	r1, #6
 80018fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001900:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001904:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	e000      	b.n	800190e <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
  }
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b088      	sub	sp, #32
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001934:	f043 0201 	orr.w	r2, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e0a5      	b.n	8001a8e <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001948:	2b23      	cmp	r3, #35	; 0x23
 800194a:	d001      	beq.n	8001950 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e09e      	b.n	8001a8e <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	3212      	adds	r2, #18
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001966:	f1c3 0304 	rsb	r3, r3, #4
 800196a:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800196c:	e067      	b.n	8001a3e <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d103      	bne.n	800199e <HAL_ETH_ReadData+0x88>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800199a:	2b00      	cmp	r3, #0
 800199c:	d03d      	beq.n	8001a1a <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00d      	beq.n	80019e4 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019f4:	461a      	mov	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	f003 fe29 	bl	8005650 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	441a      	add	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d902      	bls.n	8001a2c <HAL_ETH_ReadData+0x116>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3b04      	subs	r3, #4
 8001a2a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	3212      	adds	r2, #18
 8001a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a36:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db06      	blt.n	8001a54 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d202      	bcs.n	8001a54 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d08c      	beq.n	800196e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	441a      	add	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f814 	bl	8001a96 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69fa      	ldr	r2, [r7, #28]
 8001a72:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d108      	bne.n	8001a8c <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e000      	b.n	8001a8e <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3720      	adds	r7, #32
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b088      	sub	sp, #32
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001aaa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	3212      	adds	r2, #18
 8001ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab6:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001abc:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001abe:	e03b      	b.n	8001b38 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d112      	bne.n	8001aee <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 fd9d 	bl	800560c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	74fb      	strb	r3, [r7, #19]
 8001adc:	e007      	b.n	8001aee <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001aee:	7cfb      	ldrb	r3, [r7, #19]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d021      	beq.n	8001b38 <ETH_UpdateDescriptor+0xa2>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001af4:	f3bf 8f5f 	dmb	sy
}
 8001af8:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	e003      	b.n	8001b14 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001b12:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	3301      	adds	r3, #1
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d902      	bls.n	8001b26 <ETH_UpdateDescriptor+0x90>
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	3b04      	subs	r3, #4
 8001b24:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	3212      	adds	r2, #18
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	617b      	str	r3, [r7, #20]
      desccount--;
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <ETH_UpdateDescriptor+0xae>
 8001b3e:	7cfb      	ldrb	r3, [r7, #19]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1bd      	bne.n	8001ac0 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d00d      	beq.n	8001b6a <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0U);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b56:	461a      	mov	r2, r3
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3720      	adds	r7, #32
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3318      	adds	r3, #24
 8001b7e:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b90:	e03f      	b.n	8001c12 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001b92:	2301      	movs	r3, #1
 8001b94:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d106      	bne.n	8001bba <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001bba:	7bbb      	ldrb	r3, [r7, #14]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d028      	beq.n	8001c12 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68d9      	ldr	r1, [r3, #12]
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	db1b      	blt.n	8001c0e <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fcdc 	bl	80055a0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	3304      	adds	r3, #4
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c0c:	e001      	b.n	8001c12 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_ETH_ReleaseTxPacket+0xac>
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1b9      	bne.n	8001b92 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;

  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c38:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c40:	2b40      	cmp	r3, #64	; 0x40
 8001c42:	d115      	bne.n	8001c70 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c54:	2b40      	cmp	r3, #64	; 0x40
 8001c56:	d10b      	bne.n	8001c70 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c60:	461a      	mov	r2, r3
 8001c62:	f248 0340 	movw	r3, #32832	; 0x8040
 8001c66:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f003 fd32 	bl	80056d4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c78:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d115      	bne.n	8001cb0 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c8c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d10b      	bne.n	8001cb0 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f248 0301 	movw	r3, #32769	; 0x8001
 8001ca6:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f003 fd2e 	bl	800570c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cc4:	d153      	bne.n	8001d6e <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cda:	d148      	bne.n	8001d6e <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce2:	f043 0208 	orr.w	r2, r3, #8
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d00:	d11e      	bne.n	8001d40 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001d0e:	f241 1302 	movw	r3, #4354	; 0x1102
 8001d12:	4013      	ands	r3, r2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d22:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d32:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	22e0      	movs	r2, #224	; 0xe0
 8001d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001d3e:	e013      	b.n	8001d68 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d48:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001d4c:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001d64:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f86d 	bl	8001e48 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d76:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d104      	bne.n	8001d8c <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d019      	beq.n	8001dc0 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d92:	f043 0210 	orr.w	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	22e0      	movs	r2, #224	; 0xe0
 8001dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f848 	bl	8001e48 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	d10f      	bne.n	8001df0 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001dd8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f83a 	bl	8001e5c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d10f      	bne.n	8001e20 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e08:	f003 020f 	and.w	r2, r3, #15
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f82c 	bl	8001e70 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <HAL_ETH_IRQHandler+0x21c>)
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_ETH_IRQHandler+0x21c>)
 8001e2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f825 	bl	8001e84 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	44022000 	.word	0x44022000

08001e48 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e03e      	b.n	8001f38 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ec2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	055b      	lsls	r3, r3, #21
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	4313      	orrs	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f043 030c 	orr.w	r3, r3, #12
 8001ee6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001efa:	f7ff f9f5 	bl	80012e8 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f00:	e009      	b.n	8001f16 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f02:	f7ff f9f1 	bl	80012e8 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f10:	d901      	bls.n	8001f16 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e010      	b.n	8001f38 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1ed      	bne.n	8001f02 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e03c      	b.n	8001fdc <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f6a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	055b      	lsls	r3, r3, #21
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f023 030c 	bic.w	r3, r3, #12
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_ETH_WritePHYRegister+0xa4>)
 8001fa2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <HAL_ETH_WritePHYRegister+0xa4>)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001fae:	f7ff f99b 	bl	80012e8 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001fb4:	e009      	b.n	8001fca <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001fb6:	f7ff f997 	bl	80012e8 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fc4:	d901      	bls.n	8001fca <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e008      	b.n	8001fdc <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1ed      	bne.n	8001fb6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40028000 	.word	0x40028000

08001fe8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e1c3      	b.n	8002384 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 020c 	and.w	r2, r3, #12
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf14      	ite	ne
 8002018:	2301      	movne	r3, #1
 800201a:	2300      	moveq	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf0c      	ite	eq
 8002042:	2301      	moveq	r3, #1
 8002044:	2300      	movne	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf14      	ite	ne
 800205e:	2301      	movne	r3, #1
 8002060:	2300      	moveq	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800208a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf0c      	ite	eq
 8002116:	2301      	moveq	r3, #1
 8002118:	2300      	movne	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf14      	ite	ne
 8002130:	2301      	movne	r3, #1
 8002132:	2300      	moveq	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf14      	ite	ne
 800214a:	2301      	movne	r3, #1
 800214c:	2300      	moveq	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf14      	ite	ne
 8002164:	2301      	movne	r3, #1
 8002166:	2300      	moveq	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf14      	ite	ne
 800217e:	2301      	movne	r3, #1
 8002180:	2300      	moveq	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf14      	ite	ne
 80021a6:	2301      	movne	r3, #1
 80021a8:	2300      	moveq	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf14      	ite	ne
 80021f8:	2301      	movne	r3, #1
 80021fa:	2300      	moveq	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800220c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	0e5b      	lsrs	r3, r3, #25
 8002246:	f003 021f 	and.w	r2, r3, #31
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	63da      	str	r2, [r3, #60]	; 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf14      	ite	ne
 800225c:	2301      	movne	r3, #1
 800225e:	2300      	moveq	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 020f 	and.w	r2, r3, #15
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	461a      	mov	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229e:	2b00      	cmp	r3, #0
 80022a0:	bf0c      	ite	eq
 80022a2:	2301      	moveq	r3, #1
 80022a4:	2300      	movne	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c4:	0c1b      	lsrs	r3, r3, #16
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf14      	ite	ne
 80022dc:	2301      	movne	r3, #1
 80022de:	2300      	moveq	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bf14      	ite	ne
 80022fa:	2301      	movne	r3, #1
 80022fc:	2300      	moveq	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002310:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002320:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf14      	ite	ne
 8002338:	2301      	movne	r3, #1
 800233a:	2300      	moveq	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	bf14      	ite	ne
 8002356:	2301      	movne	r3, #1
 8002358:	2300      	moveq	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800236c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002370:	2b00      	cmp	r3, #0
 8002372:	bf0c      	ite	eq
 8002374:	2301      	moveq	r3, #1
 8002376:	2300      	movne	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e00b      	b.n	80023bc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023aa:	2b10      	cmp	r3, #16
 80023ac:	d105      	bne.n	80023ba <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80023ae:	6839      	ldr	r1, [r7, #0]
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f8d5 	bl	8002560 <ETH_SetMACConfig>

    return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
  }
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e00b      	b.n	80023f0 <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023de:	2b10      	cmp	r3, #16
 80023e0:	d105      	bne.n	80023ee <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 80023e2:	6839      	ldr	r1, [r7, #0]
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f9d7 	bl	8002798 <ETH_SetDMAConfig>

    return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e000      	b.n	80023f0 <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
  }
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002408:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002410:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002412:	f001 ff09 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8002416:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4a25      	ldr	r2, [pc, #148]	; (80024b0 <HAL_ETH_SetMDIOClockRange+0xb8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d908      	bls.n	8002432 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d804      	bhi.n	8002432 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e034      	b.n	800249c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4a1f      	ldr	r2, [pc, #124]	; (80024b4 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d908      	bls.n	800244c <HAL_ETH_SetMDIOClockRange+0x54>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	4a1e      	ldr	r2, [pc, #120]	; (80024b8 <HAL_ETH_SetMDIOClockRange+0xc0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d204      	bcs.n	800244c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	e027      	b.n	800249c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d303      	bcc.n	800245c <HAL_ETH_SetMDIOClockRange+0x64>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d91e      	bls.n	800249a <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d908      	bls.n	8002476 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d804      	bhi.n	8002476 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e012      	b.n	800249c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	4a11      	ldr	r2, [pc, #68]	; (80024c0 <HAL_ETH_SetMDIOClockRange+0xc8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d908      	bls.n	8002490 <HAL_ETH_SetMDIOClockRange+0x98>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4a10      	ldr	r2, [pc, #64]	; (80024c4 <HAL_ETH_SetMDIOClockRange+0xcc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d804      	bhi.n	8002490 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e005      	b.n	800249c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	e000      	b.n	800249c <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800249a:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	01312cff 	.word	0x01312cff
 80024b4:	02160ebf 	.word	0x02160ebf
 80024b8:	03938700 	.word	0x03938700
 80024bc:	05f5e0ff 	.word	0x05f5e0ff
 80024c0:	08f0d17f 	.word	0x08f0d17f
 80024c4:	0ee6b280 	.word	0x0ee6b280

080024c8 <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;

  if (pFilterConfig == NULL)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e039      	b.n	8002550 <HAL_ETH_SetMACFilterConfig+0x88>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	78db      	ldrb	r3, [r3, #3]
 80024e6:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80024e8:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	791b      	ldrb	r3, [r3, #4]
 80024ee:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80024f0:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	7a1b      	ldrb	r3, [r3, #8]
 80024f6:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80024f8:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	795b      	ldrb	r3, [r3, #5]
 80024fe:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8002500:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	7a52      	ldrb	r2, [r2, #9]
 8002506:	2a00      	cmp	r2, #0
 8002508:	d101      	bne.n	800250e <HAL_ETH_SetMACFilterConfig+0x46>
 800250a:	2220      	movs	r2, #32
 800250c:	e000      	b.n	8002510 <HAL_ETH_SetMACFilterConfig+0x48>
 800250e:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8002510:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	79db      	ldrb	r3, [r3, #7]
 8002516:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8002518:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	799b      	ldrb	r3, [r3, #6]
 800251e:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8002520:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	789b      	ldrb	r3, [r3, #2]
 8002526:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8002528:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	785b      	ldrb	r3, [r3, #1]
 800252e:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8002530:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_ETH_SetMACFilterConfig+0x94>)
 8002542:	4013      	ands	r3, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	68f9      	ldr	r1, [r7, #12]
 800254a:	430b      	orrs	r3, r1
 800254c:	6093      	str	r3, [r2, #8]

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	7ffff800 	.word	0x7ffff800

08002560 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002572:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	791b      	ldrb	r3, [r3, #4]
 8002578:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800257a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	7b1b      	ldrb	r3, [r3, #12]
 8002580:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002582:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	7b5b      	ldrb	r3, [r3, #13]
 8002588:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800258a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	7b9b      	ldrb	r3, [r3, #14]
 8002590:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002592:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	7bdb      	ldrb	r3, [r3, #15]
 8002598:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800259a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	7c12      	ldrb	r2, [r2, #16]
 80025a0:	2a00      	cmp	r2, #0
 80025a2:	d102      	bne.n	80025aa <ETH_SetMACConfig+0x4a>
 80025a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025a8:	e000      	b.n	80025ac <ETH_SetMACConfig+0x4c>
 80025aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80025ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	7c52      	ldrb	r2, [r2, #17]
 80025b2:	2a00      	cmp	r2, #0
 80025b4:	d102      	bne.n	80025bc <ETH_SetMACConfig+0x5c>
 80025b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025ba:	e000      	b.n	80025be <ETH_SetMACConfig+0x5e>
 80025bc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80025be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	7c9b      	ldrb	r3, [r3, #18]
 80025c4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025c6:	431a      	orrs	r2, r3
               macconf->Speed |
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80025cc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80025d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	7f1b      	ldrb	r3, [r3, #28]
 80025d8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80025da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	7f5b      	ldrb	r3, [r3, #29]
 80025e0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80025e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	7f92      	ldrb	r2, [r2, #30]
 80025e8:	2a00      	cmp	r2, #0
 80025ea:	d102      	bne.n	80025f2 <ETH_SetMACConfig+0x92>
 80025ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f0:	e000      	b.n	80025f4 <ETH_SetMACConfig+0x94>
 80025f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80025f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	7fdb      	ldrb	r3, [r3, #31]
 80025fa:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80025fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002604:	2a00      	cmp	r2, #0
 8002606:	d102      	bne.n	800260e <ETH_SetMACConfig+0xae>
 8002608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800260c:	e000      	b.n	8002610 <ETH_SetMACConfig+0xb0>
 800260e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002610:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002616:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800261e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002620:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b57      	ldr	r3, [pc, #348]	; (8002790 <ETH_SetMACConfig+0x230>)
 8002632:	4013      	ands	r3, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	68f9      	ldr	r1, [r7, #12]
 800263a:	430b      	orrs	r3, r1
 800263c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800264a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800264c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002654:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800265e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002660:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002668:	2a00      	cmp	r2, #0
 800266a:	d102      	bne.n	8002672 <ETH_SetMACConfig+0x112>
 800266c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002670:	e000      	b.n	8002674 <ETH_SetMACConfig+0x114>
 8002672:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002674:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	4b43      	ldr	r3, [pc, #268]	; (8002794 <ETH_SetMACConfig+0x234>)
 8002686:	4013      	ands	r3, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	68f9      	ldr	r1, [r7, #12]
 800268e:	430b      	orrs	r3, r1
 8002690:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002698:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	68f9      	ldr	r1, [r7, #12]
 80026b6:	430b      	orrs	r3, r1
 80026b8:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80026c0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026c6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80026ce:	2a00      	cmp	r2, #0
 80026d0:	d101      	bne.n	80026d6 <ETH_SetMACConfig+0x176>
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	e000      	b.n	80026d8 <ETH_SetMACConfig+0x178>
 80026d6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80026d8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026de:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026ea:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80026ee:	4013      	ands	r3, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	68f9      	ldr	r1, [r7, #12]
 80026f6:	430b      	orrs	r3, r1
 80026f8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002700:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002708:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	f023 0103 	bic.w	r1, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	430a      	orrs	r2, r1
 8002722:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800272e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800274a:	2a00      	cmp	r2, #0
 800274c:	d101      	bne.n	8002752 <ETH_SetMACConfig+0x1f2>
 800274e:	2240      	movs	r2, #64	; 0x40
 8002750:	e000      	b.n	8002754 <ETH_SetMACConfig+0x1f4>
 8002752:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002754:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800275c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800275e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002766:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002768:	4313      	orrs	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002774:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	430a      	orrs	r2, r1
 8002780:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	00048083 	.word	0x00048083
 8002794:	c0f88000 	.word	0xc0f88000

08002798 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80027b0:	f023 0302 	bic.w	r3, r3, #2
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	6811      	ldr	r1, [r2, #0]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	430b      	orrs	r3, r1
 80027be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027c2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	791b      	ldrb	r3, [r3, #4]
 80027c8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027ce:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	7b1b      	ldrb	r3, [r3, #12]
 80027d4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	68f9      	ldr	r1, [r7, #12]
 80027f2:	430b      	orrs	r3, r1
 80027f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027f8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	7b5b      	ldrb	r3, [r3, #13]
 80027fe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002804:	4313      	orrs	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002810:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002814:	4b21      	ldr	r3, [pc, #132]	; (800289c <ETH_SetDMAConfig+0x104>)
 8002816:	4013      	ands	r3, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	68f9      	ldr	r1, [r7, #12]
 800281e:	430b      	orrs	r3, r1
 8002820:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002824:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	7d1b      	ldrb	r3, [r3, #20]
 8002830:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002832:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	7f5b      	ldrb	r3, [r3, #29]
 8002838:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002846:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <ETH_SetDMAConfig+0x108>)
 800284c:	4013      	ands	r3, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	68f9      	ldr	r1, [r7, #12]
 8002854:	430b      	orrs	r3, r1
 8002856:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800285a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	7f1b      	ldrb	r3, [r3, #28]
 8002862:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002874:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800287c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	68f9      	ldr	r1, [r7, #12]
 8002886:	430b      	orrs	r3, r1
 8002888:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800288c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	fffec000 	.word	0xfffec000
 80028a0:	ffc0efef 	.word	0xffc0efef

080028a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b0a4      	sub	sp, #144	; 0x90
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028b2:	2300      	movs	r3, #0
 80028b4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80028fc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002900:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002908:	2300      	movs	r3, #0
 800290a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800290c:	2301      	movs	r3, #1
 800290e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002912:	2300      	movs	r3, #0
 8002914:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800291e:	2300      	movs	r3, #0
 8002920:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002922:	2300      	movs	r3, #0
 8002924:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002926:	2300      	movs	r3, #0
 8002928:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002936:	2301      	movs	r3, #1
 8002938:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800293c:	2320      	movs	r3, #32
 800293e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002942:	2301      	movs	r3, #1
 8002944:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800294e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002954:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002958:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002960:	2302      	movs	r3, #2
 8002962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002966:	2300      	movs	r3, #0
 8002968:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800296c:	2300      	movs	r3, #0
 800296e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002978:	2301      	movs	r3, #1
 800297a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800297e:	2300      	movs	r3, #0
 8002980:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800298c:	4619      	mov	r1, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff fde6 	bl	8002560 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002994:	2301      	movs	r3, #1
 8002996:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002998:	2301      	movs	r3, #1
 800299a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80029c4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029ca:	f107 0308 	add.w	r3, r7, #8
 80029ce:	4619      	mov	r1, r3
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff fee1 	bl	8002798 <ETH_SetDMAConfig>
}
 80029d6:	bf00      	nop
 80029d8:	3790      	adds	r7, #144	; 0x90
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	e01d      	b.n	8002a28 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68d9      	ldr	r1, [r3, #12]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4613      	mov	r3, r2
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	4413      	add	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	440b      	add	r3, r1
 80029fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2200      	movs	r2, #0
 8002a08:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2200      	movs	r2, #0
 8002a14:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	3206      	adds	r2, #6
 8002a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3301      	adds	r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d9de      	bls.n	80029ec <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2303      	movs	r3, #3
 8002a40:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a50:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a60:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e023      	b.n	8002ac6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6919      	ldr	r1, [r3, #16]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	3212      	adds	r2, #18
 8002abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d9d8      	bls.n	8002a7e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af2:	461a      	mov	r2, r3
 8002af4:	2303      	movs	r3, #3
 8002af6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b06:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b1a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b08d      	sub	sp, #52	; 0x34
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3318      	adds	r3, #24
 8002b3a:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b54:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b6c:	d007      	beq.n	8002b7e <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	3304      	adds	r3, #4
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e25a      	b.n	8003038 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d044      	beq.n	8002c18 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	041b      	lsls	r3, r3, #16
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bba:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d027      	beq.n	8002c18 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	041b      	lsls	r3, r3, #16
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c06:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c16:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d010      	beq.n	8002c46 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	6992      	ldr	r2, [r2, #24]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d105      	bne.n	8002c5e <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d036      	beq.n	8002ccc <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c6a:	f3bf 8f5f 	dmb	sy
}
 8002c6e:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	3301      	adds	r3, #1
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d902      	bls.n	8002c8e <ETH_Prepare_Tx_Descriptors+0x164>
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	3b04      	subs	r3, #4
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c96:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002caa:	d10f      	bne.n	8002ccc <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002cb6:	f3bf 8f5f 	dmb	sy
}
 8002cba:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e1b5      	b.n	8003038 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	3301      	adds	r3, #1
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ce4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	6852      	ldr	r2, [r2, #4]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d014      	beq.n	8002d24 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002d12:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	6852      	ldr	r2, [r2, #4]
 8002d1a:	0412      	lsls	r2, r2, #16
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	e00a      	b.n	8002d3a <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	2200      	movs	r2, #0
 8002d28:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002d32:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002d36:	6a3a      	ldr	r2, [r7, #32]
 8002d38:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d019      	beq.n	8002d7a <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	04db      	lsls	r3, r3, #19
 8002d54:	431a      	orrs	r2, r3
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	0c9b      	lsrs	r3, r3, #18
 8002d60:	049b      	lsls	r3, r3, #18
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	69d2      	ldr	r2, [r2, #28]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	60da      	str	r2, [r3, #12]
 8002d78:	e028      	b.n	8002dcc <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	6852      	ldr	r2, [r2, #4]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d008      	beq.n	8002dcc <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	431a      	orrs	r2, r3
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e02:	f3bf 8f5f 	dmb	sy
}
 8002e06:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80d9 	beq.w	8002fd4 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e34:	e0ce      	b.n	8002fd4 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	3301      	adds	r3, #1
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d902      	bls.n	8002e54 <ETH_Prepare_Tx_Descriptors+0x32a>
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	3b04      	subs	r3, #4
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e76:	d007      	beq.n	8002e88 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d029      	beq.n	8002edc <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e94:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e9a:	e019      	b.n	8002ed0 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8002e9c:	f3bf 8f5f 	dmb	sy
}
 8002ea0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d902      	bls.n	8002ec0 <ETH_Prepare_Tx_Descriptors+0x396>
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	3b04      	subs	r3, #4
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	3301      	adds	r3, #1
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d3e1      	bcc.n	8002e9c <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e0ad      	b.n	8003038 <ETH_Prepare_Tx_Descriptors+0x50e>
    }

    descnbr += 1U;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	3301      	adds	r3, #1
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002efa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	6852      	ldr	r2, [r2, #4]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d014      	beq.n	8002f3a <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002f28:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	6852      	ldr	r2, [r2, #4]
 8002f30:	0412      	lsls	r2, r2, #16
 8002f32:	431a      	orrs	r2, r3
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	e00a      	b.n	8002f50 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002f48:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002f4c:	6a3a      	ldr	r2, [r7, #32]
 8002f4e:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00f      	beq.n	8002f7c <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	0c9b      	lsrs	r3, r3, #18
 8002f62:	049b      	lsls	r3, r3, #18
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	69d2      	ldr	r2, [r2, #28]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	e019      	b.n	8002fb0 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	6852      	ldr	r2, [r2, #4]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d008      	beq.n	8002fb0 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002fb6:	f3bf 8f5f 	dmb	sy
}
 8002fba:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f47f af2c 	bne.w	8002e36 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d006      	beq.n	8002ff2 <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	e005      	b.n	8002ffe <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800300e:	6979      	ldr	r1, [r7, #20]
 8003010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003012:	3304      	adds	r3, #4
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800301e:	611a      	str	r2, [r3, #16]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003020:	b672      	cpsid	i
}
 8003022:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	4413      	add	r3, r2
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003032:	b662      	cpsie	i
}
 8003034:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3734      	adds	r7, #52	; 0x34
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003052:	e136      	b.n	80032c2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	2101      	movs	r1, #1
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	fa01 f303 	lsl.w	r3, r1, r3
 8003060:	4013      	ands	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 8128 	beq.w	80032bc <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d003      	beq.n	800307c <HAL_GPIO_Init+0x38>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b12      	cmp	r3, #18
 800307a:	d125      	bne.n	80030c8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	08da      	lsrs	r2, r3, #3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3208      	adds	r2, #8
 8003084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003088:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	220f      	movs	r2, #15
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4013      	ands	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f003 020f 	and.w	r2, r3, #15
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	08da      	lsrs	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3208      	adds	r2, #8
 80030c2:	6979      	ldr	r1, [r7, #20]
 80030c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4013      	ands	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0203 	and.w	r2, r3, #3
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d00b      	beq.n	800311c <HAL_GPIO_Init+0xd8>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d007      	beq.n	800311c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003110:	2b11      	cmp	r3, #17
 8003112:	d003      	beq.n	800311c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b12      	cmp	r3, #18
 800311a:	d130      	bne.n	800317e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	2203      	movs	r2, #3
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4013      	ands	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003152:	2201      	movs	r2, #1
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4013      	ands	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	f003 0201 	and.w	r2, r3, #1
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b03      	cmp	r3, #3
 8003184:	d017      	beq.n	80031b6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	2203      	movs	r2, #3
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4013      	ands	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d07c      	beq.n	80032bc <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80031c2:	4a47      	ldr	r2, [pc, #284]	; (80032e0 <HAL_GPIO_Init+0x29c>)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	3318      	adds	r3, #24
 80031ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ce:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	220f      	movs	r2, #15
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4013      	ands	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	0a9a      	lsrs	r2, r3, #10
 80031ea:	4b3e      	ldr	r3, [pc, #248]	; (80032e4 <HAL_GPIO_Init+0x2a0>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	f002 0203 	and.w	r2, r2, #3
 80031f4:	00d2      	lsls	r2, r2, #3
 80031f6:	4093      	lsls	r3, r2
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80031fe:	4938      	ldr	r1, [pc, #224]	; (80032e0 <HAL_GPIO_Init+0x29c>)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	089b      	lsrs	r3, r3, #2
 8003204:	3318      	adds	r3, #24
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800320c:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <HAL_GPIO_Init+0x29c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	43db      	mvns	r3, r3
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4013      	ands	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003230:	4a2b      	ldr	r2, [pc, #172]	; (80032e0 <HAL_GPIO_Init+0x29c>)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003236:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <HAL_GPIO_Init+0x29c>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	43db      	mvns	r3, r3
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4013      	ands	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800325a:	4a21      	ldr	r2, [pc, #132]	; (80032e0 <HAL_GPIO_Init+0x29c>)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003260:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <HAL_GPIO_Init+0x29c>)
 8003262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003266:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	43db      	mvns	r3, r3
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4013      	ands	r3, r2
 8003270:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003286:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <HAL_GPIO_Init+0x29c>)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800328e:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <HAL_GPIO_Init+0x29c>)
 8003290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003294:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	43db      	mvns	r3, r3
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4013      	ands	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80032b4:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <HAL_GPIO_Init+0x29c>)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	3301      	adds	r3, #1
 80032c0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f47f aec1 	bne.w	8003054 <HAL_GPIO_Init+0x10>
  }
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	371c      	adds	r7, #28
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	44022000 	.word	0x44022000
 80032e4:	002f7f7f 	.word	0x002f7f7f

080032e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	807b      	strh	r3, [r7, #2]
 80032f4:	4613      	mov	r3, r2
 80032f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032f8:	787b      	ldrb	r3, [r7, #1]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032fe:	887a      	ldrh	r2, [r7, #2]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003304:	e002      	b.n	800330c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4013      	ands	r3, r2
 8003330:	041a      	lsls	r2, r3, #16
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	43d9      	mvns	r1, r3
 8003336:	887b      	ldrh	r3, [r7, #2]
 8003338:	400b      	ands	r3, r1
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	619a      	str	r2, [r3, #24]
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_ICACHE_Enable+0x1c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a04      	ldr	r2, [pc, #16]	; (8003368 <HAL_ICACHE_Enable+0x1c>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40030400 	.word	0x40030400

0800336c <HAL_PWR_EnableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN6_HIGH, PWR_WAKEUP_PIN6_LOW, PWR_WAKEUP_PIN7_HIGH, PWR_WAKEUP_PIN7_LOW,
  *         PWR_WAKEUP_PIN8_HIGH and PWR_WAKEUP_PIN8_LOW are not available for STM32H503xx devices.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

  /*
     Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge).
  */
  MODIFY_REG(PWR->WUCR, PWR_EWUP_MASK, WakeUpPinPolarity);
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_PWR_EnableWakeUpPin+0x24>)
 8003376:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_PWR_EnableWakeUpPin+0x28>)
 800337a:	4013      	ands	r3, r2
 800337c:	4904      	ldr	r1, [pc, #16]	; (8003390 <HAL_PWR_EnableWakeUpPin+0x24>)
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4313      	orrs	r3, r2
 8003382:	648b      	str	r3, [r1, #72]	; 0x48
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	44020800 	.word	0x44020800
 8003394:	f000c0c0 	.word	0xf000c0c0

08003398 <HAL_PWR_DisableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN6_HIGH, PWR_WAKEUP_PIN6_LOW, PWR_WAKEUP_PIN7_HIGH, PWR_WAKEUP_PIN7_LOW,
  *         PWR_WAKEUP_PIN8_HIGH and PWR_WAKEUP_PIN8_LOW are not available for STM32H503xx devices.
  * @retval None.
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT(PWR->WUCR, (PWR_WUCR_WUPEN & WakeUpPinx));
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_PWR_DisableWakeUpPin+0x24>)
 80033a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	4904      	ldr	r1, [pc, #16]	; (80033bc <HAL_PWR_DisableWakeUpPin+0x24>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	648b      	str	r3, [r1, #72]	; 0x48
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	44020800 	.word	0x44020800

080033c0 <HAL_PWR_EnterSTANDBYMode>:
  *         except for registers and backup SRAM in the Backup domain and
  *         STANDBY circuitry.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  SET_BIT(PWR->PMCR, PWR_PMCR_LPMS);
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	4a05      	ldr	r2, [pc, #20]	; (80033ec <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80033d6:	f043 0304 	orr.w	r3, r3, #4
 80033da:	6113      	str	r3, [r2, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Wait For Interrupt Request */
  __WFI();
 80033dc:	bf30      	wfi
}
 80033de:	bf00      	nop
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	44020800 	.word	0x44020800
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d102      	bne.n	8003404 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	f000 bc28 	b.w	8003c54 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003404:	4b94      	ldr	r3, [pc, #592]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f003 0318 	and.w	r3, r3, #24
 800340c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800340e:	4b92      	ldr	r3, [pc, #584]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b00      	cmp	r3, #0
 8003422:	d05b      	beq.n	80034dc <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	2b08      	cmp	r3, #8
 8003428:	d005      	beq.n	8003436 <HAL_RCC_OscConfig+0x46>
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	2b18      	cmp	r3, #24
 800342e:	d114      	bne.n	800345a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d111      	bne.n	800345a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f000 bc08 	b.w	8003c54 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003444:	4b84      	ldr	r3, [pc, #528]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	041b      	lsls	r3, r3, #16
 8003452:	4981      	ldr	r1, [pc, #516]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003454:	4313      	orrs	r3, r2
 8003456:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003458:	e040      	b.n	80034dc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d023      	beq.n	80034aa <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003462:	4b7d      	ldr	r3, [pc, #500]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a7c      	ldr	r2, [pc, #496]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346e:	f7fd ff3b 	bl	80012e8 <HAL_GetTick>
 8003472:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003476:	f7fd ff37 	bl	80012e8 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e3e5      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003488:	4b73      	ldr	r3, [pc, #460]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003494:	4b70      	ldr	r3, [pc, #448]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	041b      	lsls	r3, r3, #16
 80034a2:	496d      	ldr	r1, [pc, #436]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	618b      	str	r3, [r1, #24]
 80034a8:	e018      	b.n	80034dc <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034aa:	4b6b      	ldr	r3, [pc, #428]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a6a      	ldr	r2, [pc, #424]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 80034b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b6:	f7fd ff17 	bl	80012e8 <HAL_GetTick>
 80034ba:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80034be:	f7fd ff13 	bl	80012e8 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e3c1      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80034d0:	4b61      	ldr	r3, [pc, #388]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f0      	bne.n	80034be <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80a0 	beq.w	800362a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_OscConfig+0x10c>
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	2b18      	cmp	r3, #24
 80034f4:	d109      	bne.n	800350a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d106      	bne.n	800350a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f040 8092 	bne.w	800362a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e3a4      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003512:	d106      	bne.n	8003522 <HAL_RCC_OscConfig+0x132>
 8003514:	4b50      	ldr	r3, [pc, #320]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a4f      	ldr	r2, [pc, #316]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 800351a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	e058      	b.n	80035d4 <HAL_RCC_OscConfig+0x1e4>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d112      	bne.n	8003550 <HAL_RCC_OscConfig+0x160>
 800352a:	4b4b      	ldr	r3, [pc, #300]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a4a      	ldr	r2, [pc, #296]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	4b48      	ldr	r3, [pc, #288]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a47      	ldr	r2, [pc, #284]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 800353c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b45      	ldr	r3, [pc, #276]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a44      	ldr	r2, [pc, #272]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e041      	b.n	80035d4 <HAL_RCC_OscConfig+0x1e4>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003558:	d112      	bne.n	8003580 <HAL_RCC_OscConfig+0x190>
 800355a:	4b3f      	ldr	r3, [pc, #252]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a3e      	ldr	r2, [pc, #248]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	4b3c      	ldr	r3, [pc, #240]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a3b      	ldr	r2, [pc, #236]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 800356c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b39      	ldr	r3, [pc, #228]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a38      	ldr	r2, [pc, #224]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e029      	b.n	80035d4 <HAL_RCC_OscConfig+0x1e4>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003588:	d112      	bne.n	80035b0 <HAL_RCC_OscConfig+0x1c0>
 800358a:	4b33      	ldr	r3, [pc, #204]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a32      	ldr	r2, [pc, #200]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b30      	ldr	r3, [pc, #192]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a2f      	ldr	r2, [pc, #188]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 800359c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4b2d      	ldr	r3, [pc, #180]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2c      	ldr	r2, [pc, #176]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e011      	b.n	80035d4 <HAL_RCC_OscConfig+0x1e4>
 80035b0:	4b29      	ldr	r3, [pc, #164]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a28      	ldr	r2, [pc, #160]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 80035b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b26      	ldr	r3, [pc, #152]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a25      	ldr	r2, [pc, #148]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 80035c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	4b23      	ldr	r3, [pc, #140]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a22      	ldr	r2, [pc, #136]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 80035ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80035d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d013      	beq.n	8003604 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fd fe84 	bl	80012e8 <HAL_GetTick>
 80035e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80035e4:	f7fd fe80 	bl	80012e8 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	; 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e32e      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f6:	4b18      	ldr	r3, [pc, #96]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x1f4>
 8003602:	e012      	b.n	800362a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fd fe70 	bl	80012e8 <HAL_GetTick>
 8003608:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800360c:	f7fd fe6c 	bl	80012e8 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	; 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e31a      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <HAL_RCC_OscConfig+0x268>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 809a 	beq.w	800376c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_RCC_OscConfig+0x25a>
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	2b18      	cmp	r3, #24
 8003642:	d149      	bne.n	80036d8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d146      	bne.n	80036d8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e2fe      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
 8003656:	bf00      	nop
 8003658:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d11c      	bne.n	800369c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003662:	4b9a      	ldr	r3, [pc, #616]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0218 	and.w	r2, r3, #24
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	429a      	cmp	r2, r3
 8003670:	d014      	beq.n	800369c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003672:	4b96      	ldr	r3, [pc, #600]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 0218 	bic.w	r2, r3, #24
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	4993      	ldr	r1, [pc, #588]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003684:	f000 fdd0 	bl	8004228 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003688:	4b91      	ldr	r3, [pc, #580]	; (80038d0 <HAL_RCC_OscConfig+0x4e0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fd f9ff 	bl	8000a90 <HAL_InitTick>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e2db      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fd fe24 	bl	80012e8 <HAL_GetTick>
 80036a0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80036a4:	f7fd fe20 	bl	80012e8 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e2ce      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b6:	4b85      	ldr	r3, [pc, #532]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80036c2:	4b82      	ldr	r3, [pc, #520]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	041b      	lsls	r3, r3, #16
 80036d0:	497e      	ldr	r1, [pc, #504]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80036d6:	e049      	b.n	800376c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d02c      	beq.n	800373a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80036e0:	4b7a      	ldr	r3, [pc, #488]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f023 0218 	bic.w	r2, r3, #24
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	4977      	ldr	r1, [pc, #476]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80036f2:	4b76      	ldr	r3, [pc, #472]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a75      	ldr	r2, [pc, #468]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fe:	f7fd fdf3 	bl	80012e8 <HAL_GetTick>
 8003702:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003706:	f7fd fdef 	bl	80012e8 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e29d      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003718:	4b6c      	ldr	r3, [pc, #432]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003724:	4b69      	ldr	r3, [pc, #420]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	041b      	lsls	r3, r3, #16
 8003732:	4966      	ldr	r1, [pc, #408]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003734:	4313      	orrs	r3, r2
 8003736:	610b      	str	r3, [r1, #16]
 8003738:	e018      	b.n	800376c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800373a:	4b64      	ldr	r3, [pc, #400]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a63      	ldr	r2, [pc, #396]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fd fdcf 	bl	80012e8 <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800374e:	f7fd fdcb 	bl	80012e8 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e279      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003760:	4b5a      	ldr	r3, [pc, #360]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f0      	bne.n	800374e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d03c      	beq.n	80037f2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01c      	beq.n	80037ba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003780:	4b52      	ldr	r3, [pc, #328]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003786:	4a51      	ldr	r2, [pc, #324]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003788:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800378c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fd fdaa 	bl	80012e8 <HAL_GetTick>
 8003794:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003798:	f7fd fda6 	bl	80012e8 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e254      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80037aa:	4b48      	ldr	r3, [pc, #288]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80037ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ef      	beq.n	8003798 <HAL_RCC_OscConfig+0x3a8>
 80037b8:	e01b      	b.n	80037f2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ba:	4b44      	ldr	r3, [pc, #272]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80037bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037c0:	4a42      	ldr	r2, [pc, #264]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80037c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7fd fd8d 	bl	80012e8 <HAL_GetTick>
 80037ce:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80037d2:	f7fd fd89 	bl	80012e8 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e237      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037e4:	4b39      	ldr	r3, [pc, #228]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80037e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ef      	bne.n	80037d2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80d2 	beq.w	80039a4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003800:	4b34      	ldr	r3, [pc, #208]	; (80038d4 <HAL_RCC_OscConfig+0x4e4>)
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d118      	bne.n	800383e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800380c:	4b31      	ldr	r3, [pc, #196]	; (80038d4 <HAL_RCC_OscConfig+0x4e4>)
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	4a30      	ldr	r2, [pc, #192]	; (80038d4 <HAL_RCC_OscConfig+0x4e4>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003818:	f7fd fd66 	bl	80012e8 <HAL_GetTick>
 800381c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003820:	f7fd fd62 	bl	80012e8 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e210      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003832:	4b28      	ldr	r3, [pc, #160]	; (80038d4 <HAL_RCC_OscConfig+0x4e4>)
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d108      	bne.n	8003858 <HAL_RCC_OscConfig+0x468>
 8003846:	4b21      	ldr	r3, [pc, #132]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800384c:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003856:	e074      	b.n	8003942 <HAL_RCC_OscConfig+0x552>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d118      	bne.n	8003892 <HAL_RCC_OscConfig+0x4a2>
 8003860:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003862:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003866:	4a19      	ldr	r2, [pc, #100]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003870:	4b16      	ldr	r3, [pc, #88]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003876:	4a15      	ldr	r2, [pc, #84]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800387c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003886:	4a11      	ldr	r2, [pc, #68]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 8003888:	f023 0304 	bic.w	r3, r3, #4
 800388c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003890:	e057      	b.n	8003942 <HAL_RCC_OscConfig+0x552>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b05      	cmp	r3, #5
 8003898:	d11e      	bne.n	80038d8 <HAL_RCC_OscConfig+0x4e8>
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 800389c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038a0:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80038a2:	f043 0304 	orr.w	r3, r3, #4
 80038a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80038ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038b0:	4a06      	ldr	r2, [pc, #24]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80038b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038ba:	4b04      	ldr	r3, [pc, #16]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80038bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038c0:	4a02      	ldr	r2, [pc, #8]	; (80038cc <HAL_RCC_OscConfig+0x4dc>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038ca:	e03a      	b.n	8003942 <HAL_RCC_OscConfig+0x552>
 80038cc:	44020c00 	.word	0x44020c00
 80038d0:	20000004 	.word	0x20000004
 80038d4:	44020800 	.word	0x44020800
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b85      	cmp	r3, #133	; 0x85
 80038de:	d118      	bne.n	8003912 <HAL_RCC_OscConfig+0x522>
 80038e0:	4ba2      	ldr	r3, [pc, #648]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 80038e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038e6:	4aa1      	ldr	r2, [pc, #644]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038f0:	4b9e      	ldr	r3, [pc, #632]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 80038f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038f6:	4a9d      	ldr	r2, [pc, #628]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 80038f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003900:	4b9a      	ldr	r3, [pc, #616]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003906:	4a99      	ldr	r2, [pc, #612]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003910:	e017      	b.n	8003942 <HAL_RCC_OscConfig+0x552>
 8003912:	4b96      	ldr	r3, [pc, #600]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003918:	4a94      	ldr	r2, [pc, #592]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003922:	4b92      	ldr	r3, [pc, #584]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003928:	4a90      	ldr	r2, [pc, #576]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 800392a:	f023 0304 	bic.w	r3, r3, #4
 800392e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003932:	4b8e      	ldr	r3, [pc, #568]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003938:	4a8c      	ldr	r2, [pc, #560]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 800393a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800393e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d016      	beq.n	8003978 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394a:	f7fd fccd 	bl	80012e8 <HAL_GetTick>
 800394e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003950:	e00a      	b.n	8003968 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003952:	f7fd fcc9 	bl	80012e8 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003960:	4293      	cmp	r3, r2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e175      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003968:	4b80      	ldr	r3, [pc, #512]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 800396a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0ed      	beq.n	8003952 <HAL_RCC_OscConfig+0x562>
 8003976:	e015      	b.n	80039a4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fd fcb6 	bl	80012e8 <HAL_GetTick>
 800397c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800397e:	e00a      	b.n	8003996 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7fd fcb2 	bl	80012e8 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e15e      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003996:	4b75      	ldr	r3, [pc, #468]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1ed      	bne.n	8003980 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d036      	beq.n	8003a1e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d019      	beq.n	80039ec <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039b8:	4b6c      	ldr	r3, [pc, #432]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a6b      	ldr	r2, [pc, #428]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 80039be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c4:	f7fd fc90 	bl	80012e8 <HAL_GetTick>
 80039c8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80039cc:	f7fd fc8c 	bl	80012e8 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e13a      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80039de:	4b63      	ldr	r3, [pc, #396]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x5dc>
 80039ea:	e018      	b.n	8003a1e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039ec:	4b5f      	ldr	r3, [pc, #380]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a5e      	ldr	r2, [pc, #376]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 80039f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fd fc76 	bl	80012e8 <HAL_GetTick>
 80039fc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003a00:	f7fd fc72 	bl	80012e8 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e120      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003a12:	4b56      	ldr	r3, [pc, #344]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8115 	beq.w	8003c52 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	2b18      	cmp	r3, #24
 8003a2c:	f000 80af 	beq.w	8003b8e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	f040 8086 	bne.w	8003b46 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003a3a:	4b4c      	ldr	r3, [pc, #304]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a4b      	ldr	r2, [pc, #300]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003a40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a46:	f7fd fc4f 	bl	80012e8 <HAL_GetTick>
 8003a4a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003a4e:	f7fd fc4b 	bl	80012e8 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e0f9      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a60:	4b42      	ldr	r3, [pc, #264]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f0      	bne.n	8003a4e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003a6c:	4b3f      	ldr	r3, [pc, #252]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a74:	f023 0303 	bic.w	r3, r3, #3
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a80:	0212      	lsls	r2, r2, #8
 8003a82:	430a      	orrs	r2, r1
 8003a84:	4939      	ldr	r1, [pc, #228]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	628b      	str	r3, [r1, #40]	; 0x28
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	025b      	lsls	r3, r3, #9
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	061b      	lsls	r3, r3, #24
 8003ab6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003aba:	492c      	ldr	r1, [pc, #176]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003ac0:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	4a29      	ldr	r2, [pc, #164]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003ac6:	f023 0310 	bic.w	r3, r3, #16
 8003aca:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad0:	4a26      	ldr	r2, [pc, #152]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003ad6:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	4a24      	ldr	r2, [pc, #144]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003adc:	f043 0310 	orr.w	r3, r3, #16
 8003ae0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003ae2:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	f023 020c 	bic.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	491f      	ldr	r1, [pc, #124]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003af4:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	f023 0220 	bic.w	r2, r3, #32
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b00:	491a      	ldr	r1, [pc, #104]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b06:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	4a18      	ldr	r2, [pc, #96]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b10:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003b12:	4b16      	ldr	r3, [pc, #88]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a15      	ldr	r2, [pc, #84]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003b18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1e:	f7fd fbe3 	bl	80012e8 <HAL_GetTick>
 8003b22:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003b26:	f7fd fbdf 	bl	80012e8 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e08d      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x736>
 8003b44:	e085      	b.n	8003c52 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <HAL_RCC_OscConfig+0x77c>)
 8003b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b52:	f7fd fbc9 	bl	80012e8 <HAL_GetTick>
 8003b56:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b58:	e00a      	b.n	8003b70 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003b5a:	f7fd fbc5 	bl	80012e8 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d903      	bls.n	8003b70 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e073      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
 8003b6c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b70:	4b3a      	ldr	r3, [pc, #232]	; (8003c5c <HAL_RCC_OscConfig+0x86c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1ee      	bne.n	8003b5a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003b7c:	4b37      	ldr	r3, [pc, #220]	; (8003c5c <HAL_RCC_OscConfig+0x86c>)
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	4a36      	ldr	r2, [pc, #216]	; (8003c5c <HAL_RCC_OscConfig+0x86c>)
 8003b82:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003b86:	f023 0303 	bic.w	r3, r3, #3
 8003b8a:	6293      	str	r3, [r2, #40]	; 0x28
 8003b8c:	e061      	b.n	8003c52 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003b8e:	4b33      	ldr	r3, [pc, #204]	; (8003c5c <HAL_RCC_OscConfig+0x86c>)
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b94:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <HAL_RCC_OscConfig+0x86c>)
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d031      	beq.n	8003c06 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0203 	and.w	r2, r3, #3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d12a      	bne.n	8003c06 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	0a1b      	lsrs	r3, r3, #8
 8003bb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d122      	bne.n	8003c06 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bca:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d11a      	bne.n	8003c06 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	0a5b      	lsrs	r3, r3, #9
 8003bd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d111      	bne.n	8003c06 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	0c1b      	lsrs	r3, r3, #16
 8003be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d108      	bne.n	8003c06 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	0e1b      	lsrs	r3, r3, #24
 8003bf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d001      	beq.n	8003c0a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e024      	b.n	8003c54 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <HAL_RCC_OscConfig+0x86c>)
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	08db      	lsrs	r3, r3, #3
 8003c10:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d01a      	beq.n	8003c52 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <HAL_RCC_OscConfig+0x86c>)
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	4a0e      	ldr	r2, [pc, #56]	; (8003c5c <HAL_RCC_OscConfig+0x86c>)
 8003c22:	f023 0310 	bic.w	r3, r3, #16
 8003c26:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fd fb5e 	bl	80012e8 <HAL_GetTick>
 8003c2c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003c2e:	bf00      	nop
 8003c30:	f7fd fb5a 	bl	80012e8 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d0f9      	beq.n	8003c30 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c40:	4a06      	ldr	r2, [pc, #24]	; (8003c5c <HAL_RCC_OscConfig+0x86c>)
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCC_OscConfig+0x86c>)
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <HAL_RCC_OscConfig+0x86c>)
 8003c4c:	f043 0310 	orr.w	r3, r3, #16
 8003c50:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3720      	adds	r7, #32
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	44020c00 	.word	0x44020c00

08003c60 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e19e      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c74:	4b83      	ldr	r3, [pc, #524]	; (8003e84 <HAL_RCC_ClockConfig+0x224>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d910      	bls.n	8003ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b80      	ldr	r3, [pc, #512]	; (8003e84 <HAL_RCC_ClockConfig+0x224>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 020f 	bic.w	r2, r3, #15
 8003c8a:	497e      	ldr	r1, [pc, #504]	; (8003e84 <HAL_RCC_ClockConfig+0x224>)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b7c      	ldr	r3, [pc, #496]	; (8003e84 <HAL_RCC_ClockConfig+0x224>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e186      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d012      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	4b74      	ldr	r3, [pc, #464]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d909      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003cc2:	4b71      	ldr	r3, [pc, #452]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	496d      	ldr	r1, [pc, #436]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d012      	beq.n	8003d08 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	4b68      	ldr	r3, [pc, #416]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	091b      	lsrs	r3, r3, #4
 8003cec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d909      	bls.n	8003d08 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003cf4:	4b64      	ldr	r3, [pc, #400]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	4961      	ldr	r1, [pc, #388]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d010      	beq.n	8003d36 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	4b5b      	ldr	r3, [pc, #364]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d908      	bls.n	8003d36 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003d24:	4b58      	ldr	r3, [pc, #352]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4955      	ldr	r1, [pc, #340]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d010      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	4b50      	ldr	r3, [pc, #320]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d908      	bls.n	8003d64 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003d52:	4b4d      	ldr	r3, [pc, #308]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f023 020f 	bic.w	r2, r3, #15
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	494a      	ldr	r1, [pc, #296]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8093 	beq.w	8003e98 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b03      	cmp	r3, #3
 8003d78:	d107      	bne.n	8003d8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003d7a:	4b43      	ldr	r3, [pc, #268]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d121      	bne.n	8003dca <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e113      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d107      	bne.n	8003da2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d92:	4b3d      	ldr	r3, [pc, #244]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d115      	bne.n	8003dca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e107      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d107      	bne.n	8003dba <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003daa:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e0fb      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dba:	4b33      	ldr	r3, [pc, #204]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0f3      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003dca:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f023 0203 	bic.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	492c      	ldr	r1, [pc, #176]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ddc:	f7fd fa84 	bl	80012e8 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d112      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dea:	e00a      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003dec:	f7fd fa7c 	bl	80012e8 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0d7      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e02:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f003 0318 	and.w	r3, r3, #24
 8003e0a:	2b18      	cmp	r3, #24
 8003e0c:	d1ee      	bne.n	8003dec <HAL_RCC_ClockConfig+0x18c>
 8003e0e:	e043      	b.n	8003e98 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d112      	bne.n	8003e3e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1a:	f7fd fa65 	bl	80012e8 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e0c0      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e30:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f003 0318 	and.w	r3, r3, #24
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d1ee      	bne.n	8003e1a <HAL_RCC_ClockConfig+0x1ba>
 8003e3c:	e02c      	b.n	8003e98 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d122      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e48:	f7fd fa4e 	bl	80012e8 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e0a9      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_RCC_ClockConfig+0x228>)
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f003 0318 	and.w	r3, r3, #24
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d1ee      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x1e8>
 8003e6a:	e015      	b.n	8003e98 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e6c:	f7fd fa3c 	bl	80012e8 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d906      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e097      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x352>
 8003e82:	bf00      	nop
 8003e84:	40022000 	.word	0x40022000
 8003e88:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e8c:	4b4b      	ldr	r3, [pc, #300]	; (8003fbc <HAL_RCC_ClockConfig+0x35c>)
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	f003 0318 	and.w	r3, r3, #24
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e9      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d010      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	4b44      	ldr	r3, [pc, #272]	; (8003fbc <HAL_RCC_ClockConfig+0x35c>)
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d208      	bcs.n	8003ec6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003eb4:	4b41      	ldr	r3, [pc, #260]	; (8003fbc <HAL_RCC_ClockConfig+0x35c>)
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f023 020f 	bic.w	r2, r3, #15
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	493e      	ldr	r1, [pc, #248]	; (8003fbc <HAL_RCC_ClockConfig+0x35c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec6:	4b3e      	ldr	r3, [pc, #248]	; (8003fc0 <HAL_RCC_ClockConfig+0x360>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d210      	bcs.n	8003ef6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed4:	4b3a      	ldr	r3, [pc, #232]	; (8003fc0 <HAL_RCC_ClockConfig+0x360>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f023 020f 	bic.w	r2, r3, #15
 8003edc:	4938      	ldr	r1, [pc, #224]	; (8003fc0 <HAL_RCC_ClockConfig+0x360>)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee4:	4b36      	ldr	r3, [pc, #216]	; (8003fc0 <HAL_RCC_ClockConfig+0x360>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e05d      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d010      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	4b2d      	ldr	r3, [pc, #180]	; (8003fbc <HAL_RCC_ClockConfig+0x35c>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d208      	bcs.n	8003f24 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003f12:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <HAL_RCC_ClockConfig+0x35c>)
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	4927      	ldr	r1, [pc, #156]	; (8003fbc <HAL_RCC_ClockConfig+0x35c>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d012      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <HAL_RCC_ClockConfig+0x35c>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d209      	bcs.n	8003f56 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003f42:	4b1e      	ldr	r3, [pc, #120]	; (8003fbc <HAL_RCC_ClockConfig+0x35c>)
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	491a      	ldr	r1, [pc, #104]	; (8003fbc <HAL_RCC_ClockConfig+0x35c>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d012      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695a      	ldr	r2, [r3, #20]
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <HAL_RCC_ClockConfig+0x35c>)
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	0a1b      	lsrs	r3, r3, #8
 8003f6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d209      	bcs.n	8003f88 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003f74:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <HAL_RCC_ClockConfig+0x35c>)
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	490e      	ldr	r1, [pc, #56]	; (8003fbc <HAL_RCC_ClockConfig+0x35c>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003f88:	f000 f822 	bl	8003fd0 <HAL_RCC_GetSysClockFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <HAL_RCC_ClockConfig+0x35c>)
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	490b      	ldr	r1, [pc, #44]	; (8003fc4 <HAL_RCC_ClockConfig+0x364>)
 8003f98:	5ccb      	ldrb	r3, [r1, r3]
 8003f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <HAL_RCC_ClockConfig+0x368>)
 8003fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <HAL_RCC_ClockConfig+0x36c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fc fd72 	bl	8000a90 <HAL_InitTick>
 8003fac:	4603      	mov	r3, r0
 8003fae:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003fb0:	7afb      	ldrb	r3, [r7, #11]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	44020c00 	.word	0x44020c00
 8003fc0:	40022000 	.word	0x40022000
 8003fc4:	0800f01c 	.word	0x0800f01c
 8003fc8:	20000000 	.word	0x20000000
 8003fcc:	20000004 	.word	0x20000004

08003fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b089      	sub	sp, #36	; 0x24
 8003fd4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003fd6:	4b8c      	ldr	r3, [pc, #560]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f003 0318 	and.w	r3, r3, #24
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d102      	bne.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003fe2:	4b8a      	ldr	r3, [pc, #552]	; (800420c <HAL_RCC_GetSysClockFreq+0x23c>)
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	e107      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fe8:	4b87      	ldr	r3, [pc, #540]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f003 0318 	and.w	r3, r3, #24
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d112      	bne.n	800401a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003ff4:	4b84      	ldr	r3, [pc, #528]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d009      	beq.n	8004014 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004000:	4b81      	ldr	r3, [pc, #516]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	08db      	lsrs	r3, r3, #3
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	4a81      	ldr	r2, [pc, #516]	; (8004210 <HAL_RCC_GetSysClockFreq+0x240>)
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	e0f1      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004014:	4b7e      	ldr	r3, [pc, #504]	; (8004210 <HAL_RCC_GetSysClockFreq+0x240>)
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	e0ee      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800401a:	4b7b      	ldr	r3, [pc, #492]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f003 0318 	and.w	r3, r3, #24
 8004022:	2b10      	cmp	r3, #16
 8004024:	d102      	bne.n	800402c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004026:	4b7b      	ldr	r3, [pc, #492]	; (8004214 <HAL_RCC_GetSysClockFreq+0x244>)
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	e0e5      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800402c:	4b76      	ldr	r3, [pc, #472]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f003 0318 	and.w	r3, r3, #24
 8004034:	2b18      	cmp	r3, #24
 8004036:	f040 80dd 	bne.w	80041f4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800403a:	4b73      	ldr	r3, [pc, #460]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004044:	4b70      	ldr	r3, [pc, #448]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 8004046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800404e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004050:	4b6d      	ldr	r3, [pc, #436]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800405c:	4b6a      	ldr	r3, [pc, #424]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004060:	08db      	lsrs	r3, r3, #3
 8004062:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	fb02 f303 	mul.w	r3, r2, r3
 800406c:	ee07 3a90 	vmov	s15, r3
 8004070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004074:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80b7 	beq.w	80041ee <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d003      	beq.n	800408e <HAL_RCC_GetSysClockFreq+0xbe>
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b03      	cmp	r3, #3
 800408a:	d056      	beq.n	800413a <HAL_RCC_GetSysClockFreq+0x16a>
 800408c:	e077      	b.n	800417e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800408e:	4b5e      	ldr	r3, [pc, #376]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d02d      	beq.n	80040f6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800409a:	4b5b      	ldr	r3, [pc, #364]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	08db      	lsrs	r3, r3, #3
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	4a5a      	ldr	r2, [pc, #360]	; (8004210 <HAL_RCC_GetSysClockFreq+0x240>)
 80040a6:	fa22 f303 	lsr.w	r3, r2, r3
 80040aa:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	ee07 3a90 	vmov	s15, r3
 80040bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040c4:	4b50      	ldr	r3, [pc, #320]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 80040c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040cc:	ee07 3a90 	vmov	s15, r3
 80040d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80040d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80040d8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004218 <HAL_RCC_GetSysClockFreq+0x248>
 80040dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80040e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80040f4:	e065      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	ee07 3a90 	vmov	s15, r3
 80040fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004100:	eddf 6a46 	vldr	s13, [pc, #280]	; 800421c <HAL_RCC_GetSysClockFreq+0x24c>
 8004104:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004108:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 800410a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004110:	ee07 3a90 	vmov	s15, r3
 8004114:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004118:	ed97 6a02 	vldr	s12, [r7, #8]
 800411c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004218 <HAL_RCC_GetSysClockFreq+0x248>
 8004120:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004124:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004128:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800412c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004134:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004138:	e043      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	ee07 3a90 	vmov	s15, r3
 8004140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004144:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004220 <HAL_RCC_GetSysClockFreq+0x250>
 8004148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800414c:	4b2e      	ldr	r3, [pc, #184]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 800414e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004154:	ee07 3a90 	vmov	s15, r3
 8004158:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800415c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004160:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004218 <HAL_RCC_GetSysClockFreq+0x248>
 8004164:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004168:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800416c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004170:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004178:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800417c:	e021      	b.n	80041c2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	ee07 3a90 	vmov	s15, r3
 8004184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004188:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004224 <HAL_RCC_GetSysClockFreq+0x254>
 800418c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 8004192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004198:	ee07 3a90 	vmov	s15, r3
 800419c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80041a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80041a4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004218 <HAL_RCC_GetSysClockFreq+0x248>
 80041a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80041b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041bc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80041c0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80041c2:	4b11      	ldr	r3, [pc, #68]	; (8004208 <HAL_RCC_GetSysClockFreq+0x238>)
 80041c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c6:	0a5b      	lsrs	r3, r3, #9
 80041c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041cc:	3301      	adds	r3, #1
 80041ce:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041da:	edd7 6a06 	vldr	s13, [r7, #24]
 80041de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e6:	ee17 3a90 	vmov	r3, s15
 80041ea:	61fb      	str	r3, [r7, #28]
 80041ec:	e004      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e001      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_RCC_GetSysClockFreq+0x240>)
 80041f6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80041f8:	69fb      	ldr	r3, [r7, #28]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3724      	adds	r7, #36	; 0x24
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	44020c00 	.word	0x44020c00
 800420c:	003d0900 	.word	0x003d0900
 8004210:	03d09000 	.word	0x03d09000
 8004214:	007a1200 	.word	0x007a1200
 8004218:	46000000 	.word	0x46000000
 800421c:	4c742400 	.word	0x4c742400
 8004220:	4af42400 	.word	0x4af42400
 8004224:	4a742400 	.word	0x4a742400

08004228 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800422c:	f7ff fed0 	bl	8003fd0 <HAL_RCC_GetSysClockFreq>
 8004230:	4602      	mov	r2, r0
 8004232:	4b08      	ldr	r3, [pc, #32]	; (8004254 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004234:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004236:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800423a:	4907      	ldr	r1, [pc, #28]	; (8004258 <HAL_RCC_GetHCLKFreq+0x30>)
 800423c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800423e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004242:	fa22 f303 	lsr.w	r3, r2, r3
 8004246:	4a05      	ldr	r2, [pc, #20]	; (800425c <HAL_RCC_GetHCLKFreq+0x34>)
 8004248:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800424a:	4b04      	ldr	r3, [pc, #16]	; (800425c <HAL_RCC_GetHCLKFreq+0x34>)
 800424c:	681b      	ldr	r3, [r3, #0]
}
 800424e:	4618      	mov	r0, r3
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	44020c00 	.word	0x44020c00
 8004258:	0800f01c 	.word	0x0800f01c
 800425c:	20000000 	.word	0x20000000

08004260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004264:	f7ff ffe0 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8004268:	4602      	mov	r2, r0
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	091b      	lsrs	r3, r3, #4
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	4904      	ldr	r1, [pc, #16]	; (8004288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004276:	5ccb      	ldrb	r3, [r1, r3]
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004280:	4618      	mov	r0, r3
 8004282:	bd80      	pop	{r7, pc}
 8004284:	44020c00 	.word	0x44020c00
 8004288:	0800f02c 	.word	0x0800f02c

0800428c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	221f      	movs	r2, #31
 800429a:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800429c:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <HAL_RCC_GetClockConfig+0x68>)
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f003 0203 	and.w	r2, r3, #3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 80042a8:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <HAL_RCC_GetClockConfig+0x68>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 020f 	and.w	r2, r3, #15
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	0a1b      	lsrs	r3, r3, #8
 80042d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042da:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <HAL_RCC_GetClockConfig+0x6c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 020f 	and.w	r2, r3, #15
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	601a      	str	r2, [r3, #0]
}
 80042e6:	bf00      	nop
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	44020c00 	.word	0x44020c00
 80042f8:	40022000 	.word	0x40022000

080042fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e049      	b.n	80043a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f841 	bl	80043aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	4619      	mov	r1, r3
 800433a:	4610      	mov	r0, r2
 800433c:	f000 fa60 	bl	8004800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d001      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e07c      	b.n	80044d2 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a3a      	ldr	r2, [pc, #232]	; (80044e0 <HAL_TIM_Base_Start_IT+0x120>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d04a      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xd0>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a39      	ldr	r2, [pc, #228]	; (80044e4 <HAL_TIM_Base_Start_IT+0x124>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d045      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xd0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440c:	d040      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xd0>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004416:	d03b      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xd0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a32      	ldr	r2, [pc, #200]	; (80044e8 <HAL_TIM_Base_Start_IT+0x128>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d036      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xd0>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a31      	ldr	r2, [pc, #196]	; (80044ec <HAL_TIM_Base_Start_IT+0x12c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d031      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xd0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a2f      	ldr	r2, [pc, #188]	; (80044f0 <HAL_TIM_Base_Start_IT+0x130>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d02c      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xd0>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2e      	ldr	r2, [pc, #184]	; (80044f4 <HAL_TIM_Base_Start_IT+0x134>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d027      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xd0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a2c      	ldr	r2, [pc, #176]	; (80044f8 <HAL_TIM_Base_Start_IT+0x138>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d022      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xd0>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a2b      	ldr	r2, [pc, #172]	; (80044fc <HAL_TIM_Base_Start_IT+0x13c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d01d      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xd0>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a29      	ldr	r2, [pc, #164]	; (8004500 <HAL_TIM_Base_Start_IT+0x140>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d018      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xd0>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a28      	ldr	r2, [pc, #160]	; (8004504 <HAL_TIM_Base_Start_IT+0x144>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d013      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xd0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a26      	ldr	r2, [pc, #152]	; (8004508 <HAL_TIM_Base_Start_IT+0x148>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00e      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xd0>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a25      	ldr	r2, [pc, #148]	; (800450c <HAL_TIM_Base_Start_IT+0x14c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d009      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xd0>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a23      	ldr	r2, [pc, #140]	; (8004510 <HAL_TIM_Base_Start_IT+0x150>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xd0>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a22      	ldr	r2, [pc, #136]	; (8004514 <HAL_TIM_Base_Start_IT+0x154>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d115      	bne.n	80044bc <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	4b20      	ldr	r3, [pc, #128]	; (8004518 <HAL_TIM_Base_Start_IT+0x158>)
 8004498:	4013      	ands	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b06      	cmp	r3, #6
 80044a0:	d015      	beq.n	80044ce <HAL_TIM_Base_Start_IT+0x10e>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a8:	d011      	beq.n	80044ce <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ba:	e008      	b.n	80044ce <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e000      	b.n	80044d0 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	50012c00 	.word	0x50012c00
 80044e8:	40000400 	.word	0x40000400
 80044ec:	50000400 	.word	0x50000400
 80044f0:	40000800 	.word	0x40000800
 80044f4:	50000800 	.word	0x50000800
 80044f8:	40000c00 	.word	0x40000c00
 80044fc:	50000c00 	.word	0x50000c00
 8004500:	40013400 	.word	0x40013400
 8004504:	50013400 	.word	0x50013400
 8004508:	40001800 	.word	0x40001800
 800450c:	50001800 	.word	0x50001800
 8004510:	40014000 	.word	0x40014000
 8004514:	50014000 	.word	0x50014000
 8004518:	00010007 	.word	0x00010007

0800451c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d020      	beq.n	8004580 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01b      	beq.n	8004580 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0202 	mvn.w	r2, #2
 8004550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f92c 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f91e 	bl	80047b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f92f 	bl	80047d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	d020      	beq.n	80045cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01b      	beq.n	80045cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0204 	mvn.w	r2, #4
 800459c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2202      	movs	r2, #2
 80045a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f906 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 80045b8:	e005      	b.n	80045c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f8f8 	bl	80047b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f909 	bl	80047d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d020      	beq.n	8004618 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01b      	beq.n	8004618 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0208 	mvn.w	r2, #8
 80045e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2204      	movs	r2, #4
 80045ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8e0 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 8004604:	e005      	b.n	8004612 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f8d2 	bl	80047b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f8e3 	bl	80047d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b00      	cmp	r3, #0
 8004620:	d020      	beq.n	8004664 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01b      	beq.n	8004664 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0210 	mvn.w	r2, #16
 8004634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2208      	movs	r2, #8
 800463a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8ba 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 8004650:	e005      	b.n	800465e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f8ac 	bl	80047b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f8bd 	bl	80047d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00c      	beq.n	8004688 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d007      	beq.n	8004688 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0201 	mvn.w	r2, #1
 8004680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fc f900 	bl	8000888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00c      	beq.n	80046ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f9d2 	bl	8004a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00c      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f9ca 	bl	8004a64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00c      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f87c 	bl	80047ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0220 	mvn.w	r2, #32
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f992 	bl	8004a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00c      	beq.n	800473c <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f99e 	bl	8004a78 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00c      	beq.n	8004760 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f996 	bl	8004a8c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00c      	beq.n	8004784 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f98e 	bl	8004aa0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00c      	beq.n	80047a8 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80047a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f986 	bl	8004ab4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a74      	ldr	r2, [pc, #464]	; (80049e4 <TIM_Base_SetConfig+0x1e4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d02b      	beq.n	8004870 <TIM_Base_SetConfig+0x70>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a73      	ldr	r2, [pc, #460]	; (80049e8 <TIM_Base_SetConfig+0x1e8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d027      	beq.n	8004870 <TIM_Base_SetConfig+0x70>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004826:	d023      	beq.n	8004870 <TIM_Base_SetConfig+0x70>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800482e:	d01f      	beq.n	8004870 <TIM_Base_SetConfig+0x70>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a6e      	ldr	r2, [pc, #440]	; (80049ec <TIM_Base_SetConfig+0x1ec>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d01b      	beq.n	8004870 <TIM_Base_SetConfig+0x70>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a6d      	ldr	r2, [pc, #436]	; (80049f0 <TIM_Base_SetConfig+0x1f0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d017      	beq.n	8004870 <TIM_Base_SetConfig+0x70>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a6c      	ldr	r2, [pc, #432]	; (80049f4 <TIM_Base_SetConfig+0x1f4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d013      	beq.n	8004870 <TIM_Base_SetConfig+0x70>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a6b      	ldr	r2, [pc, #428]	; (80049f8 <TIM_Base_SetConfig+0x1f8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00f      	beq.n	8004870 <TIM_Base_SetConfig+0x70>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a6a      	ldr	r2, [pc, #424]	; (80049fc <TIM_Base_SetConfig+0x1fc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00b      	beq.n	8004870 <TIM_Base_SetConfig+0x70>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a69      	ldr	r2, [pc, #420]	; (8004a00 <TIM_Base_SetConfig+0x200>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d007      	beq.n	8004870 <TIM_Base_SetConfig+0x70>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a68      	ldr	r2, [pc, #416]	; (8004a04 <TIM_Base_SetConfig+0x204>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_Base_SetConfig+0x70>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a67      	ldr	r2, [pc, #412]	; (8004a08 <TIM_Base_SetConfig+0x208>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d108      	bne.n	8004882 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a57      	ldr	r2, [pc, #348]	; (80049e4 <TIM_Base_SetConfig+0x1e4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d05b      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a56      	ldr	r2, [pc, #344]	; (80049e8 <TIM_Base_SetConfig+0x1e8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d057      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004898:	d053      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048a0:	d04f      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a51      	ldr	r2, [pc, #324]	; (80049ec <TIM_Base_SetConfig+0x1ec>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d04b      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a50      	ldr	r2, [pc, #320]	; (80049f0 <TIM_Base_SetConfig+0x1f0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d047      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a4f      	ldr	r2, [pc, #316]	; (80049f4 <TIM_Base_SetConfig+0x1f4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d043      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a4e      	ldr	r2, [pc, #312]	; (80049f8 <TIM_Base_SetConfig+0x1f8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d03f      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a4d      	ldr	r2, [pc, #308]	; (80049fc <TIM_Base_SetConfig+0x1fc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d03b      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a4c      	ldr	r2, [pc, #304]	; (8004a00 <TIM_Base_SetConfig+0x200>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d037      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a4b      	ldr	r2, [pc, #300]	; (8004a04 <TIM_Base_SetConfig+0x204>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d033      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a4a      	ldr	r2, [pc, #296]	; (8004a08 <TIM_Base_SetConfig+0x208>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d02f      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a49      	ldr	r2, [pc, #292]	; (8004a0c <TIM_Base_SetConfig+0x20c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d02b      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a48      	ldr	r2, [pc, #288]	; (8004a10 <TIM_Base_SetConfig+0x210>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d027      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a47      	ldr	r2, [pc, #284]	; (8004a14 <TIM_Base_SetConfig+0x214>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d023      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a46      	ldr	r2, [pc, #280]	; (8004a18 <TIM_Base_SetConfig+0x218>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d01f      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a45      	ldr	r2, [pc, #276]	; (8004a1c <TIM_Base_SetConfig+0x21c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d01b      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a44      	ldr	r2, [pc, #272]	; (8004a20 <TIM_Base_SetConfig+0x220>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d017      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a43      	ldr	r2, [pc, #268]	; (8004a24 <TIM_Base_SetConfig+0x224>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a42      	ldr	r2, [pc, #264]	; (8004a28 <TIM_Base_SetConfig+0x228>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00f      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a41      	ldr	r2, [pc, #260]	; (8004a2c <TIM_Base_SetConfig+0x22c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00b      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a40      	ldr	r2, [pc, #256]	; (8004a30 <TIM_Base_SetConfig+0x230>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d007      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a3f      	ldr	r2, [pc, #252]	; (8004a34 <TIM_Base_SetConfig+0x234>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <TIM_Base_SetConfig+0x142>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a3e      	ldr	r2, [pc, #248]	; (8004a38 <TIM_Base_SetConfig+0x238>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d108      	bne.n	8004954 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <TIM_Base_SetConfig+0x1e4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d023      	beq.n	80049c8 <TIM_Base_SetConfig+0x1c8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a19      	ldr	r2, [pc, #100]	; (80049e8 <TIM_Base_SetConfig+0x1e8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d01f      	beq.n	80049c8 <TIM_Base_SetConfig+0x1c8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a1e      	ldr	r2, [pc, #120]	; (8004a04 <TIM_Base_SetConfig+0x204>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d01b      	beq.n	80049c8 <TIM_Base_SetConfig+0x1c8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a1d      	ldr	r2, [pc, #116]	; (8004a08 <TIM_Base_SetConfig+0x208>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d017      	beq.n	80049c8 <TIM_Base_SetConfig+0x1c8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a22      	ldr	r2, [pc, #136]	; (8004a24 <TIM_Base_SetConfig+0x224>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <TIM_Base_SetConfig+0x1c8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a21      	ldr	r2, [pc, #132]	; (8004a28 <TIM_Base_SetConfig+0x228>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00f      	beq.n	80049c8 <TIM_Base_SetConfig+0x1c8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a20      	ldr	r2, [pc, #128]	; (8004a2c <TIM_Base_SetConfig+0x22c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0x1c8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <TIM_Base_SetConfig+0x230>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0x1c8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a1e      	ldr	r2, [pc, #120]	; (8004a34 <TIM_Base_SetConfig+0x234>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0x1c8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <TIM_Base_SetConfig+0x238>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d103      	bne.n	80049d0 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	615a      	str	r2, [r3, #20]
}
 80049d6:	bf00      	nop
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	50012c00 	.word	0x50012c00
 80049ec:	40000400 	.word	0x40000400
 80049f0:	50000400 	.word	0x50000400
 80049f4:	40000800 	.word	0x40000800
 80049f8:	50000800 	.word	0x50000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	50000c00 	.word	0x50000c00
 8004a04:	40013400 	.word	0x40013400
 8004a08:	50013400 	.word	0x50013400
 8004a0c:	40001800 	.word	0x40001800
 8004a10:	50001800 	.word	0x50001800
 8004a14:	40001c00 	.word	0x40001c00
 8004a18:	50001c00 	.word	0x50001c00
 8004a1c:	40002000 	.word	0x40002000
 8004a20:	50002000 	.word	0x50002000
 8004a24:	40014000 	.word	0x40014000
 8004a28:	50014000 	.word	0x50014000
 8004a2c:	40014400 	.word	0x40014400
 8004a30:	50014400 	.word	0x50014400
 8004a34:	40014800 	.word	0x40014800
 8004a38:	50014800 	.word	0x50014800

08004a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <nx_eth_phy_init>:
  * @param  none
  * @retval ETH_PHY_STATUS_OK on success, ETH_PHY_STATUS_ERROR otherwise
  */

int32_t nx_eth_phy_init(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
    int32_t ret = ETH_PHY_STATUS_ERROR;
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad2:	607b      	str	r3, [r7, #4]
    /* Set PHY IO functions */

    LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004ad4:	4908      	ldr	r1, [pc, #32]	; (8004af8 <nx_eth_phy_init+0x30>)
 8004ad6:	4809      	ldr	r0, [pc, #36]	; (8004afc <nx_eth_phy_init+0x34>)
 8004ad8:	f7fc f9ef 	bl	8000eba <LAN8742_RegisterBusIO>
    /* Initialize the LAN8742 ETH PHY */

    if (LAN8742_Init(&LAN8742) == LAN8742_STATUS_OK)
 8004adc:	4807      	ldr	r0, [pc, #28]	; (8004afc <nx_eth_phy_init+0x34>)
 8004ade:	f7fc fa1e 	bl	8000f1e <LAN8742_Init>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <nx_eth_phy_init+0x24>
    {
        ret = ETH_PHY_STATUS_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	607b      	str	r3, [r7, #4]
    }

    return ret;
 8004aec:	687b      	ldr	r3, [r7, #4]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	2000000c 	.word	0x2000000c
 8004afc:	20014770 	.word	0x20014770

08004b00 <nx_eth_phy_get_link_state>:
  * @param  none
  * @retval the link status.
  */

int32_t nx_eth_phy_get_link_state(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
    int32_t  linkstate = LAN8742_GetLinkState(&LAN8742);
 8004b06:	4804      	ldr	r0, [pc, #16]	; (8004b18 <nx_eth_phy_get_link_state+0x18>)
 8004b08:	f7fc fab4 	bl	8001074 <LAN8742_GetLinkState>
 8004b0c:	6078      	str	r0, [r7, #4]

    return linkstate;
 8004b0e:	687b      	ldr	r3, [r7, #4]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20014770 	.word	0x20014770

08004b1c <lan8742_io_init>:
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */

int32_t lan8742_io_init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&eth_handle);
 8004b20:	4802      	ldr	r0, [pc, #8]	; (8004b2c <lan8742_io_init+0x10>)
 8004b22:	f7fd fc69 	bl	80023f8 <HAL_ETH_SetMDIOClockRange>

  return ETH_PHY_STATUS_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20007e64 	.word	0x20007e64

08004b30 <lan8742_io_deinit>:
  * @brief  De-Initialize the MDIO interface
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t lan8742_io_deinit (void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
    return ETH_PHY_STATUS_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <lan8742_io_read_reg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t lan8742_io_read_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&eth_handle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	68f9      	ldr	r1, [r7, #12]
 8004b52:	4807      	ldr	r0, [pc, #28]	; (8004b70 <lan8742_io_read_reg+0x30>)
 8004b54:	f7fd f9a0 	bl	8001e98 <HAL_ETH_ReadPHYRegister>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <lan8742_io_read_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b62:	e000      	b.n	8004b66 <lan8742_io_read_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20007e64 	.word	0x20007e64

08004b74 <lan8742_io_write_reg>:

int32_t lan8742_io_write_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&eth_handle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	68f9      	ldr	r1, [r7, #12]
 8004b86:	4807      	ldr	r0, [pc, #28]	; (8004ba4 <lan8742_io_write_reg+0x30>)
 8004b88:	f7fd f9da 	bl	8001f40 <HAL_ETH_WritePHYRegister>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <lan8742_io_write_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8004b92:	f04f 33ff 	mov.w	r3, #4294967295
 8004b96:	e000      	b.n	8004b9a <lan8742_io_write_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20007e64 	.word	0x20007e64

08004ba8 <lan8742_io_get_tick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t lan8742_io_get_tick(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004bac:	f7fc fb9c 	bl	80012e8 <HAL_GetTick>
 8004bb0:	4603      	mov	r3, r0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <nx_stm32_eth_driver>:
/*                                                                        */
/**************************************************************************/
/****** DRIVER SPECIFIC ****** Start of part/vendor specific global driver entry function name.  */
VOID  nx_stm32_eth_driver(NX_IP_DRIVER *driver_req_ptr)
/****** DRIVER SPECIFIC ****** End of part/vendor specific global driver entry function name.  */
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	605a      	str	r2, [r3, #4]

  /* Process according to the driver request type in the IP control
  block.  */
  switch (driver_req_ptr -> nx_ip_driver_command)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b16      	cmp	r3, #22
 8004bcc:	d85c      	bhi.n	8004c88 <nx_stm32_eth_driver+0xd0>
 8004bce:	a201      	add	r2, pc, #4	; (adr r2, 8004bd4 <nx_stm32_eth_driver+0x1c>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004c51 	.word	0x08004c51
 8004bd8:	08004c39 	.word	0x08004c39
 8004bdc:	08004c41 	.word	0x08004c41
 8004be0:	08004c49 	.word	0x08004c49
 8004be4:	08004c51 	.word	0x08004c51
 8004be8:	08004c51 	.word	0x08004c51
 8004bec:	08004c51 	.word	0x08004c51
 8004bf0:	08004c51 	.word	0x08004c51
 8004bf4:	08004c59 	.word	0x08004c59
 8004bf8:	08004c61 	.word	0x08004c61
 8004bfc:	08004c69 	.word	0x08004c69
 8004c00:	08004c89 	.word	0x08004c89
 8004c04:	08004c89 	.word	0x08004c89
 8004c08:	08004c89 	.word	0x08004c89
 8004c0c:	08004c89 	.word	0x08004c89
 8004c10:	08004c89 	.word	0x08004c89
 8004c14:	08004c89 	.word	0x08004c89
 8004c18:	08004c89 	.word	0x08004c89
 8004c1c:	08004c71 	.word	0x08004c71
 8004c20:	08004c31 	.word	0x08004c31
 8004c24:	08004c89 	.word	0x08004c89
 8004c28:	08004c79 	.word	0x08004c79
 8004c2c:	08004c81 	.word	0x08004c81
  {

  case NX_LINK_INTERFACE_ATTACH:

    /* Process link interface attach requests.  */
    _nx_driver_interface_attach(driver_req_ptr);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f835 	bl	8004ca0 <_nx_driver_interface_attach>
    break;
 8004c36:	e02e      	b.n	8004c96 <nx_stm32_eth_driver+0xde>

  case NX_LINK_INITIALIZE:
    {

      /* Process link initialize requests.  */
      _nx_driver_initialize(driver_req_ptr);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f849 	bl	8004cd0 <_nx_driver_initialize>
      break;
 8004c3e:	e02a      	b.n	8004c96 <nx_stm32_eth_driver+0xde>

  case NX_LINK_ENABLE:
    {

      /* Process link enable requests.  */
      _nx_driver_enable(driver_req_ptr);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f8b9 	bl	8004db8 <_nx_driver_enable>
      break;
 8004c46:	e026      	b.n	8004c96 <nx_stm32_eth_driver+0xde>

  case NX_LINK_DISABLE:
    {

      /* Process link disable requests.  */
      _nx_driver_disable(driver_req_ptr);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f93d 	bl	8004ec8 <_nx_driver_disable>
      break;
 8004c4e:	e022      	b.n	8004c96 <nx_stm32_eth_driver+0xde>
  case NX_LINK_RARP_SEND:
  case NX_LINK_PACKET_SEND:
    {

      /* Process packet send requests.  */
      _nx_driver_packet_send(driver_req_ptr);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f963 	bl	8004f1c <_nx_driver_packet_send>
      break;
 8004c56:	e01e      	b.n	8004c96 <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_JOIN:
    {

      /* Process multicast join requests.  */
      _nx_driver_multicast_join(driver_req_ptr);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fa21 	bl	80050a0 <_nx_driver_multicast_join>
      break;
 8004c5e:	e01a      	b.n	8004c96 <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_LEAVE:
    {

      /* Process multicast leave requests.  */
      _nx_driver_multicast_leave(driver_req_ptr);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fa33 	bl	80050cc <_nx_driver_multicast_leave>
      break;
 8004c66:	e016      	b.n	8004c96 <nx_stm32_eth_driver+0xde>

  case NX_LINK_GET_STATUS:
    {

      /* Process get status requests.  */
      _nx_driver_get_status(driver_req_ptr);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fa45 	bl	80050f8 <_nx_driver_get_status>
      break;
 8004c6e:	e012      	b.n	8004c96 <nx_stm32_eth_driver+0xde>
    {

      /* Process driver deferred requests.  */

      /* Process a device driver function on behave of the IP thread. */
      _nx_driver_deferred_processing(driver_req_ptr);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fa7f 	bl	8005174 <_nx_driver_deferred_processing>

      break;
 8004c76:	e00e      	b.n	8004c96 <nx_stm32_eth_driver+0xde>
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  case NX_INTERFACE_CAPABILITY_GET:
    {

      /* Process get capability requests.  */
      _nx_driver_capability_get(driver_req_ptr);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fa53 	bl	8005124 <_nx_driver_capability_get>
      break;
 8004c7e:	e00a      	b.n	8004c96 <nx_stm32_eth_driver+0xde>

  case NX_INTERFACE_CAPABILITY_SET:
    {

      /* Process set capability requests.  */
      _nx_driver_capability_set(driver_req_ptr);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fa61 	bl	8005148 <_nx_driver_capability_set>
      break;
 8004c86:	e006      	b.n	8004c96 <nx_stm32_eth_driver+0xde>


    /* Invalid driver request.  */

    /* Return the unhandled command status.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_UNHANDLED_COMMAND;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2244      	movs	r2, #68	; 0x44
 8004c8c:	605a      	str	r2, [r3, #4]

    /* Default to successful return.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	225a      	movs	r2, #90	; 0x5a
 8004c92:	605a      	str	r2, [r3, #4]
  }
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop

08004ca0 <_nx_driver_interface_attach>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_interface_attach(NX_IP_DRIVER *driver_req_ptr)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]


  /* Setup the driver's interface.  This example is for a simple one-interface
  Ethernet driver. Additional logic is necessary for multiple port devices.  */
  nx_driver_information.nx_driver_information_interface =  driver_req_ptr -> nx_ip_driver_interface;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	4a07      	ldr	r2, [pc, #28]	; (8004ccc <_nx_driver_interface_attach+0x2c>)
 8004cae:	60d3      	str	r3, [r2, #12]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  driver_req_ptr -> nx_ip_driver_interface -> nx_interface_capability_flag = NX_DRIVER_CAPABILITY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  /* Return successful status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	605a      	str	r2, [r3, #4]
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	20014790 	.word	0x20014790

08004cd0 <_nx_driver_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UINT            status;
  CHAR           *payload_address;       /* Address of the first payload*/
  VOID           *rounded_pool_start;    /* Rounded stating address     */

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	61fb      	str	r3, [r7, #28]

  /* Setup interface pointer.  */
  interface_ptr = driver_req_ptr -> nx_ip_driver_interface;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	61bb      	str	r3, [r7, #24]

  /* Initialize the driver's information structure.  */

  /* Default IP pointer to NULL.  */
  nx_driver_information.nx_driver_information_ip_ptr =               NX_NULL;
 8004ce4:	4b31      	ldr	r3, [pc, #196]	; (8004dac <_nx_driver_initialize+0xdc>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]

  /* Setup the driver state to not initialized.  */
  nx_driver_information.nx_driver_information_state =                NX_DRIVER_STATE_NOT_INITIALIZED;
 8004cea:	4b30      	ldr	r3, [pc, #192]	; (8004dac <_nx_driver_initialize+0xdc>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	605a      	str	r2, [r3, #4]

  /* Setup the default packet pool for the driver's received packets.  */
  nx_driver_information.nx_driver_information_packet_pool_ptr = ip_ptr -> nx_ip_default_packet_pool;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004cf6:	4a2d      	ldr	r2, [pc, #180]	; (8004dac <_nx_driver_initialize+0xdc>)
 8004cf8:	6093      	str	r3, [r2, #8]

  /* Get the rounded start pool start. */
  rounded_pool_start = nx_driver_information.nx_driver_information_packet_pool_ptr->nx_packet_pool_start;
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	; (8004dac <_nx_driver_initialize+0xdc>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	617b      	str	r3, [r7, #20]

  /* Calculate the address of payload. */
  payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	333c      	adds	r3, #60	; 0x3c
 8004d06:	613b      	str	r3, [r7, #16]

  /* Align the address of payload. */
  payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	3303      	adds	r3, #3
 8004d0c:	f023 0303 	bic.w	r3, r3, #3
 8004d10:	613b      	str	r3, [r7, #16]

  /* Calculate the header size. */
  header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	4a25      	ldr	r2, [pc, #148]	; (8004db0 <_nx_driver_initialize+0xe0>)
 8004d1a:	6013      	str	r3, [r2, #0]

  /* Clear the deferred events for the driver.  */
  nx_driver_information.nx_driver_information_deferred_events =       0;
 8004d1c:	4b23      	ldr	r3, [pc, #140]	; (8004dac <_nx_driver_initialize+0xdc>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	611a      	str	r2, [r3, #16]

  /* Call the hardware-specific ethernet controller initialization.  */
  status =  _nx_driver_hardware_initialize(driver_req_ptr);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fabc 	bl	80052a0 <_nx_driver_hardware_initialize>
 8004d28:	60f8      	str	r0, [r7, #12]

  /* Determine if the request was successful.  */
  if (status == NX_SUCCESS)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d136      	bne.n	8004d9e <_nx_driver_initialize+0xce>
  {

    /* Successful hardware initialization.  */

    /* Setup driver information to point to IP pointer.  */
    nx_driver_information.nx_driver_information_ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	4a1d      	ldr	r2, [pc, #116]	; (8004dac <_nx_driver_initialize+0xdc>)
 8004d36:	6013      	str	r3, [r2, #0]

    /* Setup the link maximum transfer unit. */
    interface_ptr -> nx_interface_ip_mtu_size =  NX_DRIVER_ETHERNET_MTU - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004d3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the physical address of this IP instance.  Increment the
    physical address lsw to simulate multiple nodes hanging on the
    ethernet.  */
    interface_ptr -> nx_interface_physical_address_msw =
      (ULONG)(( eth_handle.Init.MACAddr[0] << 8) | ( eth_handle.Init.MACAddr[1]));
 8004d40:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <_nx_driver_initialize+0xe4>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	4a1a      	ldr	r2, [pc, #104]	; (8004db4 <_nx_driver_initialize+0xe4>)
 8004d4a:	6852      	ldr	r2, [r2, #4]
 8004d4c:	3201      	adds	r2, #1
 8004d4e:	7812      	ldrb	r2, [r2, #0]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_msw =
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	60da      	str	r2, [r3, #12]
    interface_ptr -> nx_interface_physical_address_lsw =
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8004d58:	4b16      	ldr	r3, [pc, #88]	; (8004db4 <_nx_driver_initialize+0xe4>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	3302      	adds	r3, #2
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	061a      	lsls	r2, r3, #24
 8004d62:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <_nx_driver_initialize+0xe4>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	3303      	adds	r3, #3
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	041b      	lsls	r3, r3, #16
 8004d6c:	431a      	orrs	r2, r3
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8004d6e:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <_nx_driver_initialize+0xe4>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	3304      	adds	r3, #4
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	021b      	lsls	r3, r3, #8
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8004d78:	4313      	orrs	r3, r2
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8004d7a:	4a0e      	ldr	r2, [pc, #56]	; (8004db4 <_nx_driver_initialize+0xe4>)
 8004d7c:	6852      	ldr	r2, [r2, #4]
 8004d7e:	3205      	adds	r2, #5
 8004d80:	7812      	ldrb	r2, [r2, #0]
 8004d82:	4313      	orrs	r3, r2
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8004d84:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_lsw =
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	611a      	str	r2, [r3, #16]

    /* Indicate to the IP software that IP to physical mapping
    is required.  */
    interface_ptr -> nx_interface_address_mapping_needed =  NX_TRUE;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	715a      	strb	r2, [r3, #5]

    /* Move the driver's state to initialized.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_INITIALIZED;
 8004d90:	4b06      	ldr	r3, [pc, #24]	; (8004dac <_nx_driver_initialize+0xdc>)
 8004d92:	2203      	movs	r2, #3
 8004d94:	605a      	str	r2, [r3, #4]

    /* Indicate successful initialize.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	605a      	str	r2, [r3, #4]
  {

    /* Initialization failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
  }
}
 8004d9c:	e002      	b.n	8004da4 <_nx_driver_initialize+0xd4>
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	225a      	movs	r2, #90	; 0x5a
 8004da2:	605a      	str	r2, [r3, #4]
}
 8004da4:	bf00      	nop
 8004da6:	3720      	adds	r7, #32
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20014790 	.word	0x20014790
 8004db0:	200147dc 	.word	0x200147dc
 8004db4:	20007e64 	.word	0x20007e64

08004db8 <_nx_driver_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b0a0      	sub	sp, #128	; 0x80
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]

  NX_IP           *ip_ptr;
  ETH_MACConfigTypeDef MACConf;
  UINT            status, duplex, speed = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	67bb      	str	r3, [r7, #120]	; 0x78
  INT             PHYLinkState;

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	677b      	str	r3, [r7, #116]	; 0x74

  /* See if we can honor the NX_LINK_ENABLE request.  */
  if (nx_driver_information.nx_driver_information_state < NX_DRIVER_STATE_INITIALIZED)
 8004dca:	4b3d      	ldr	r3, [pc, #244]	; (8004ec0 <_nx_driver_enable+0x108>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d803      	bhi.n	8004dda <_nx_driver_enable+0x22>
  {

    /* Mark the request as not successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	225a      	movs	r2, #90	; 0x5a
 8004dd6:	605a      	str	r2, [r3, #4]
    return;
 8004dd8:	e06e      	b.n	8004eb8 <_nx_driver_enable+0x100>
  }

  /* Check if it is enabled by someone already */
  if (nx_driver_information.nx_driver_information_state >=  NX_DRIVER_STATE_LINK_ENABLED)
 8004dda:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <_nx_driver_enable+0x108>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d903      	bls.n	8004dea <_nx_driver_enable+0x32>
  {

    /* Yes, the request has already been made.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_ALREADY_ENABLED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2215      	movs	r2, #21
 8004de6:	605a      	str	r2, [r3, #4]
    return;
 8004de8:	e066      	b.n	8004eb8 <_nx_driver_enable+0x100>
  }

  if (nx_eth_phy_init() != ETH_PHY_STATUS_OK)
 8004dea:	f7ff fe6d 	bl	8004ac8 <nx_eth_phy_init>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <_nx_driver_enable+0x44>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	225a      	movs	r2, #90	; 0x5a
 8004df8:	605a      	str	r2, [r3, #4]
    return;
 8004dfa:	e05d      	b.n	8004eb8 <_nx_driver_enable+0x100>
  }

  PHYLinkState = nx_eth_phy_get_link_state();
 8004dfc:	f7ff fe80 	bl	8004b00 <nx_eth_phy_get_link_state>
 8004e00:	6738      	str	r0, [r7, #112]	; 0x70

  /* Get link state */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 8004e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	dc03      	bgt.n	8004e10 <_nx_driver_enable+0x58>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	225a      	movs	r2, #90	; 0x5a
 8004e0c:	605a      	str	r2, [r3, #4]
    return;
 8004e0e:	e053      	b.n	8004eb8 <_nx_driver_enable+0x100>
  }
  else
  {
    switch (PHYLinkState)
 8004e10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e12:	3b02      	subs	r3, #2
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d823      	bhi.n	8004e60 <_nx_driver_enable+0xa8>
 8004e18:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <_nx_driver_enable+0x68>)
 8004e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1e:	bf00      	nop
 8004e20:	08004e31 	.word	0x08004e31
 8004e24:	08004e3f 	.word	0x08004e3f
 8004e28:	08004e4b 	.word	0x08004e4b
 8004e2c:	08004e57 	.word	0x08004e57
      duplex = ETH_HALFDUPLEX_MODE;
      speed = ETH_SPEED_1000M;
      break;
#endif
case ETH_PHY_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e34:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8004e36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e3a:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e3c:	e017      	b.n	8004e6e <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8004e42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e46:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e48:	e011      	b.n	8004e6e <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e4e:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 8004e50:	2300      	movs	r3, #0
 8004e52:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e54:	e00b      	b.n	8004e6e <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e5e:	e006      	b.n	8004e6e <_nx_driver_enable+0xb6>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 8004e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e64:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8004e66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e6a:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e6c:	bf00      	nop
    }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&eth_handle, &MACConf);
 8004e6e:	f107 0308 	add.w	r3, r7, #8
 8004e72:	4619      	mov	r1, r3
 8004e74:	4813      	ldr	r0, [pc, #76]	; (8004ec4 <_nx_driver_enable+0x10c>)
 8004e76:	f7fd f8b7 	bl	8001fe8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004e7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e7c:	623b      	str	r3, [r7, #32]
    MACConf.Speed = speed;
 8004e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e80:	61fb      	str	r3, [r7, #28]
    MACConf.PortSelect = 0;
#else
    MACConf.PortSelect = 1;
#endif
#endif
    HAL_ETH_SetMACConfig(&eth_handle, &MACConf);
 8004e82:	f107 0308 	add.w	r3, r7, #8
 8004e86:	4619      	mov	r1, r3
 8004e88:	480e      	ldr	r0, [pc, #56]	; (8004ec4 <_nx_driver_enable+0x10c>)
 8004e8a:	f7fd fa81 	bl	8002390 <HAL_ETH_SetMACConfig>
  }

  /* Call hardware specific enable.  */
  status =  _nx_driver_hardware_enable(driver_req_ptr);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fa7e 	bl	8005390 <_nx_driver_hardware_enable>
 8004e94:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* Was the hardware enable successful?  */
  if (status == NX_SUCCESS)
 8004e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <_nx_driver_enable+0xfa>
  {

    /* Update the driver state to link enabled.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_LINK_ENABLED;
 8004e9c:	4b08      	ldr	r3, [pc, #32]	; (8004ec0 <_nx_driver_enable+0x108>)
 8004e9e:	2204      	movs	r2, #4
 8004ea0:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	605a      	str	r2, [r3, #4]

    /* Mark the IP instance as link up.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_TRUE;
 8004ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
 8004eb0:	e002      	b.n	8004eb8 <_nx_driver_enable+0x100>
  }
  else
  {

    /* Enable failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	225a      	movs	r2, #90	; 0x5a
 8004eb6:	605a      	str	r2, [r3, #4]
  }
}
 8004eb8:	3780      	adds	r7, #128	; 0x80
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20014790 	.word	0x20014790
 8004ec4:	20007e64 	.word	0x20007e64

08004ec8 <_nx_driver_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Check if the link is enabled.  */
  if (nx_driver_information.nx_driver_information_state !=  NX_DRIVER_STATE_LINK_ENABLED)
 8004ed6:	4b10      	ldr	r3, [pc, #64]	; (8004f18 <_nx_driver_disable+0x50>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d003      	beq.n	8004ee6 <_nx_driver_disable+0x1e>
  {

    /* The link is not enabled, so just return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	225a      	movs	r2, #90	; 0x5a
 8004ee2:	605a      	str	r2, [r3, #4]
    return;
 8004ee4:	e014      	b.n	8004f10 <_nx_driver_disable+0x48>
  }

  /* Call hardware specific disable.  */
  status =  _nx_driver_hardware_disable(driver_req_ptr);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fa60 	bl	80053ac <_nx_driver_hardware_disable>
 8004eec:	60b8      	str	r0, [r7, #8]

  /* Was the hardware disable successful?  */
  if (status == NX_SUCCESS)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10a      	bne.n	8004f0a <_nx_driver_disable+0x42>
  {

    /* Mark the IP instance as link down.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_FALSE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726

    /* Update the driver state back to initialized.  */
    nx_driver_information.nx_driver_information_state =  NX_DRIVER_STATE_INITIALIZED;
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <_nx_driver_disable+0x50>)
 8004efe:	2203      	movs	r2, #3
 8004f00:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	605a      	str	r2, [r3, #4]
 8004f08:	e002      	b.n	8004f10 <_nx_driver_disable+0x48>
  }
  else
  {

    /* Disable failed, return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	225a      	movs	r2, #90	; 0x5a
 8004f0e:	605a      	str	r2, [r3, #4]
  }
}
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20014790 	.word	0x20014790

08004f1c <_nx_driver_packet_send>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_packet_send(NX_IP_DRIVER *driver_req_ptr)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  ULONG           *ethernet_frame_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	617b      	str	r3, [r7, #20]

  /* Check to make sure the link is up.  */
  if (nx_driver_information.nx_driver_information_state != NX_DRIVER_STATE_LINK_ENABLED)
 8004f2a:	4b5c      	ldr	r3, [pc, #368]	; (800509c <_nx_driver_packet_send+0x180>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d008      	beq.n	8004f44 <_nx_driver_packet_send+0x28>
  {

    /* Inidate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	225a      	movs	r2, #90	; 0x5a
 8004f36:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(driver_req_ptr -> nx_ip_driver_packet);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3310      	adds	r3, #16
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f005 fc81 	bl	800a844 <_nxe_packet_transmit_release>
    return;
 8004f42:	e0a7      	b.n	8005094 <_nx_driver_packet_send+0x178>
  }

  /* Process driver send packet.  */

  /* Place the ethernet frame at the front of the packet.  */
  packet_ptr =  driver_req_ptr -> nx_ip_driver_packet;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	60bb      	str	r3, [r7, #8]

  /* Adjust the prepend pointer.  */
  packet_ptr -> nx_packet_prepend_ptr =
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	689a      	ldr	r2, [r3, #8]
  packet_ptr -> nx_packet_prepend_ptr =
 8004f4e:	68bb      	ldr	r3, [r7, #8]
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004f50:	3a0e      	subs	r2, #14
  packet_ptr -> nx_packet_prepend_ptr =
 8004f52:	609a      	str	r2, [r3, #8]

  /* Adjust the packet length.  */
  packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	320e      	adds	r2, #14
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Setup the ethernet frame pointer to build the ethernet frame.  Backup another 2
  * bytes to get 32-bit word alignment.  */
  ethernet_frame_ptr =  (ULONG *) (packet_ptr -> nx_packet_prepend_ptr - 2);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	3b02      	subs	r3, #2
 8004f64:	613b      	str	r3, [r7, #16]

  /* Set up the hardware addresses in the Ethernet header. */
  *ethernet_frame_ptr       =  driver_req_ptr -> nx_ip_driver_physical_address_msw;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 1) =  driver_req_ptr -> nx_ip_driver_physical_address_lsw;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	3304      	adds	r3, #4
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	68d2      	ldr	r2, [r2, #12]
 8004f76:	601a      	str	r2, [r3, #0]

  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8004f7e:	0419      	lsls	r1, r3, #16
    (ip_ptr -> nx_ip_arp_physical_address_lsw >> 16);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f8d3 3730 	ldr.w	r3, [r3, #1840]	; 0x730
 8004f86:	0c1a      	lsrs	r2, r3, #16
  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 3) =  (ip_ptr -> nx_ip_arp_physical_address_lsw << 16);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f8d3 2730 	ldr.w	r2, [r3, #1840]	; 0x730
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	0412      	lsls	r2, r2, #16
 8004f9c:	601a      	str	r2, [r3, #0]

  /* Set up the frame type field in the Ethernet harder. */
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b05      	cmp	r3, #5
 8004fa4:	d003      	beq.n	8004fae <_nx_driver_packet_send+0x92>
      (driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8004faa:	2b06      	cmp	r3, #6
 8004fac:	d10a      	bne.n	8004fc4 <_nx_driver_packet_send+0xa8>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_ARP;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	320c      	adds	r2, #12
 8004fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fbc:	f043 0306 	orr.w	r3, r3, #6
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e016      	b.n	8004ff2 <_nx_driver_packet_send+0xd6>
  }
  else if(driver_req_ptr -> nx_ip_driver_command == NX_LINK_RARP_SEND)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b07      	cmp	r3, #7
 8004fca:	d10a      	bne.n	8004fe2 <_nx_driver_packet_send+0xc6>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_RARP;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	330c      	adds	r3, #12
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	320c      	adds	r2, #12
 8004fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fda:	f043 0335 	orr.w	r3, r3, #53	; 0x35
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	e007      	b.n	8004ff2 <_nx_driver_packet_send+0xd6>
#endif /* FEATURE_NX_IPV6 */

  else
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IP;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	330c      	adds	r3, #12
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	330c      	adds	r3, #12
 8004fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff0:	601a      	str	r2, [r3, #0]
  }

  /* Endian swapping if NX_LITTLE_ENDIAN is defined.  */
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr));
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	ba1a      	rev	r2, r3
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 1));
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	3304      	adds	r3, #4
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	3304      	adds	r3, #4
 8005006:	ba12      	rev	r2, r2
 8005008:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	3308      	adds	r3, #8
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	3308      	adds	r3, #8
 8005014:	ba12      	rev	r2, r2
 8005016:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 3));
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	330c      	adds	r3, #12
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	330c      	adds	r3, #12
 8005022:	ba12      	rev	r2, r2
 8005024:	601a      	str	r2, [r3, #0]

  /* Determine if the packet exceeds the driver's MTU.  */
  if (packet_ptr -> nx_packet_length > NX_DRIVER_ETHERNET_MTU)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800502e:	4293      	cmp	r3, r2
 8005030:	d912      	bls.n	8005058 <_nx_driver_packet_send+0x13c>
  {

    /* This packet exceeds the size of the driver's MTU. Simply throw it away! */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	320e      	adds	r2, #14
 800503a:	609a      	str	r2, [r3, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	3a0e      	subs	r2, #14
 8005044:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	225a      	movs	r2, #90	; 0x5a
 800504a:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 800504c:	f107 0308 	add.w	r3, r7, #8
 8005050:	4618      	mov	r0, r3
 8005052:	f005 fbf7 	bl	800a844 <_nxe_packet_transmit_release>
    return;
 8005056:	e01d      	b.n	8005094 <_nx_driver_packet_send+0x178>
  }

  /* Transmit the packet through the Ethernet controller low level access routine. */
  status = _nx_driver_hardware_packet_send(packet_ptr);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4618      	mov	r0, r3
 800505c:	f000 f9b4 	bl	80053c8 <_nx_driver_hardware_packet_send>
 8005060:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d012      	beq.n	800508e <_nx_driver_packet_send+0x172>
  {

    /* Driver's hardware send packet routine failed to send the packet.  */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	320e      	adds	r2, #14
 8005070:	609a      	str	r2, [r3, #8]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	3a0e      	subs	r2, #14
 800507a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	225a      	movs	r2, #90	; 0x5a
 8005080:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 8005082:	f107 0308 	add.w	r3, r7, #8
 8005086:	4618      	mov	r0, r3
 8005088:	f005 fbdc 	bl	800a844 <_nxe_packet_transmit_release>
 800508c:	e002      	b.n	8005094 <_nx_driver_packet_send+0x178>
  }
  else
  {

    /* Set the status of the request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	605a      	str	r2, [r3, #4]
  }
}
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20014790 	.word	0x20014790

080050a0 <_nx_driver_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast join function. */
  status =  _nx_driver_hardware_multicast_join(driver_req_ptr);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fa25 	bl	80054f8 <_nx_driver_hardware_multicast_join>
 80050ae:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <_nx_driver_multicast_join+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	225a      	movs	r2, #90	; 0x5a
 80050ba:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80050bc:	e002      	b.n	80050c4 <_nx_driver_multicast_join+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	605a      	str	r2, [r3, #4]
}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <_nx_driver_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast leave function. */
  status =  _nx_driver_hardware_multicast_leave(driver_req_ptr);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fa2b 	bl	8005530 <_nx_driver_hardware_multicast_leave>
 80050da:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <_nx_driver_multicast_leave+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	225a      	movs	r2, #90	; 0x5a
 80050e6:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80050e8:	e002      	b.n	80050f0 <_nx_driver_multicast_leave+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	605a      	str	r2, [r3, #4]
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <_nx_driver_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_get_status(driver_req_ptr);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fa35 	bl	8005570 <_nx_driver_hardware_get_status>
 8005106:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <_nx_driver_get_status+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	225a      	movs	r2, #90	; 0x5a
 8005112:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8005114:	e002      	b.n	800511c <_nx_driver_get_status+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	605a      	str	r2, [r3, #4]
}
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <_nx_driver_capability_get>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_get(NX_IP_DRIVER *driver_req_ptr)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]

  /* Return the capability of the Ethernet controller.  */
  *(driver_req_ptr -> nx_ip_driver_return_ptr) = NX_DRIVER_CAPABILITY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005134:	601a      	str	r2, [r3, #0]

  /* Return the success status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	605a      	str	r2, [r3, #4]
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <_nx_driver_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_capability_set(driver_req_ptr);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fab3 	bl	80056bc <_nx_driver_hardware_capability_set>
 8005156:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <_nx_driver_capability_set+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	225a      	movs	r2, #90	; 0x5a
 8005162:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8005164:	e002      	b.n	800516c <_nx_driver_capability_set+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	605a      	str	r2, [r3, #4]
}
 800516c:	bf00      	nop
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <_nx_driver_deferred_processing>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_deferred_processing(NX_IP_DRIVER *driver_req_ptr)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800517c:	f3ef 8310 	mrs	r3, PRIMASK
 8005180:	613b      	str	r3, [r7, #16]
#endif
    return(posture);
 8005182:	693b      	ldr	r3, [r7, #16]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8005184:	60fb      	str	r3, [r7, #12]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8005186:	b672      	cpsid	i
#endif
    return(int_posture);
 8005188:	68fb      	ldr	r3, [r7, #12]

    ULONG       deferred_events;


  /* Disable interrupts.  */
  TX_DISABLE
 800518a:	61fb      	str	r3, [r7, #28]

    /* Pickup deferred events.  */
    deferred_events =  nx_driver_information.nx_driver_information_deferred_events;
 800518c:	4b10      	ldr	r3, [pc, #64]	; (80051d0 <_nx_driver_deferred_processing+0x5c>)
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	61bb      	str	r3, [r7, #24]
  nx_driver_information.nx_driver_information_deferred_events =  0;
 8005192:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <_nx_driver_deferred_processing+0x5c>)
 8005194:	2200      	movs	r2, #0
 8005196:	611a      	str	r2, [r3, #16]
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f383 8810 	msr	PRIMASK, r3
}
 80051a2:	bf00      	nop

  /* Restore interrupts.  */
  TX_RESTORE
    /* Check for a transmit complete event.  */
    if(deferred_events & NX_DRIVER_DEFERRED_PACKET_TRANSMITTED)
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	f003 0304 	and.w	r3, r3, #4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <_nx_driver_deferred_processing+0x40>
    {

      /* Process transmitted packet(s).  */
      HAL_ETH_ReleaseTxPacket(&eth_handle);
 80051ae:	4809      	ldr	r0, [pc, #36]	; (80051d4 <_nx_driver_deferred_processing+0x60>)
 80051b0:	f7fc fcdf 	bl	8001b72 <HAL_ETH_ReleaseTxPacket>
    }
  /* Check for received packet.  */
  if(deferred_events & NX_DRIVER_DEFERRED_PACKET_RECEIVED)
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <_nx_driver_deferred_processing+0x4e>
  {

    /* Process received packet(s).  */
    _nx_driver_hardware_packet_received();
 80051be:	f000 fa09 	bl	80055d4 <_nx_driver_hardware_packet_received>
  }

  /* Mark request as successful.  */
  driver_req_ptr->nx_ip_driver_status =  NX_SUCCESS;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	605a      	str	r2, [r3, #4]
}
 80051c8:	bf00      	nop
 80051ca:	3720      	adds	r7, #32
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	20014790 	.word	0x20014790
 80051d4:	20007e64 	.word	0x20007e64

080051d8 <_nx_driver_transfer_to_netx>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID _nx_driver_transfer_to_netx(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]

  USHORT    packet_type;


  /* Set the interface for the incoming packet.  */
  packet_ptr -> nx_packet_ip_interface = nx_driver_information.nx_driver_information_interface;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	4a2d      	ldr	r2, [pc, #180]	; (800529c <_nx_driver_transfer_to_netx+0xc4>)
 80051e6:	68d2      	ldr	r2, [r2, #12]
 80051e8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Pickup the packet header to determine where the packet needs to be
  sent.  */
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	330c      	adds	r3, #12
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	b29a      	uxth	r2, r3
    ((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+13)));
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	330d      	adds	r3, #13
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 8005202:	4313      	orrs	r3, r2
 8005204:	81fb      	strh	r3, [r7, #14]

  /* Route the incoming packet according to its ethernet type.  */
  if (packet_type == NX_DRIVER_ETHERNET_IP || packet_type == NX_DRIVER_ETHERNET_IPV6)
 8005206:	89fb      	ldrh	r3, [r7, #14]
 8005208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800520c:	d004      	beq.n	8005218 <_nx_driver_transfer_to_netx+0x40>
 800520e:	89fb      	ldrh	r3, [r7, #14]
 8005210:	f248 62dd 	movw	r2, #34525	; 0x86dd
 8005214:	4293      	cmp	r3, r2
 8005216:	d10f      	bne.n	8005238 <_nx_driver_transfer_to_netx+0x60>
    cases, the actual packet length after the Ethernet header should
    be derived from the length in the IP header (lower 16 bits of
    the first 32-bit word).  */

    /* Clean off the Ethernet header.  */
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	320e      	adds	r2, #14
 8005220:	609a      	str	r2, [r3, #8]

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	3a0e      	subs	r2, #14
 800522a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Route to the ip receive function.  */
    _nx_ip_packet_deferred_receive(ip_ptr, packet_ptr);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	4619      	mov	r1, r3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f002 fa3b 	bl	80076ac <_nx_ip_packet_deferred_receive>
  else
  {
    /* Invalid ethernet header... release the packet.  */
    nx_packet_release(packet_ptr);
  }
}
 8005236:	e02d      	b.n	8005294 <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_ARP)
 8005238:	89fb      	ldrh	r3, [r7, #14]
 800523a:	f640 0206 	movw	r2, #2054	; 0x806
 800523e:	4293      	cmp	r3, r2
 8005240:	d10f      	bne.n	8005262 <_nx_driver_transfer_to_netx+0x8a>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	320e      	adds	r2, #14
 800524a:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	3a0e      	subs	r2, #14
 8005254:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_arp_packet_deferred_receive(ip_ptr, packet_ptr);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fc0d 	bl	8005a7a <_nx_arp_packet_deferred_receive>
}
 8005260:	e018      	b.n	8005294 <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_RARP)
 8005262:	89fb      	ldrh	r3, [r7, #14]
 8005264:	f248 0235 	movw	r2, #32821	; 0x8035
 8005268:	4293      	cmp	r3, r2
 800526a:	d10f      	bne.n	800528c <_nx_driver_transfer_to_netx+0xb4>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	320e      	adds	r2, #14
 8005274:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	3a0e      	subs	r2, #14
 800527e:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_rarp_packet_deferred_receive(ip_ptr, packet_ptr);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	4619      	mov	r1, r3
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f003 fe2b 	bl	8008ee0 <_nx_rarp_packet_deferred_receive>
}
 800528a:	e003      	b.n	8005294 <_nx_driver_transfer_to_netx+0xbc>
    nx_packet_release(packet_ptr);
 800528c:	463b      	mov	r3, r7
 800528e:	4618      	mov	r0, r3
 8005290:	f005 faa0 	bl	800a7d4 <_nxe_packet_release>
}
 8005294:	bf00      	nop
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20014790 	.word	0x20014790

080052a0 <_nx_driver_hardware_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08c      	sub	sp, #48	; 0x30
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	605a      	str	r2, [r3, #4]

  /* Setup indices.  */
  nx_driver_information.nx_driver_information_receive_current_index = 0;
 80052ae:	4b34      	ldr	r3, [pc, #208]	; (8005380 <_nx_driver_hardware_initialize+0xe0>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	615a      	str	r2, [r3, #20]
  nx_driver_information.nx_driver_information_transmit_current_index = 0;
 80052b4:	4b32      	ldr	r3, [pc, #200]	; (8005380 <_nx_driver_hardware_initialize+0xe0>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	619a      	str	r2, [r3, #24]
  nx_driver_information.nx_driver_information_transmit_release_index = 0;
 80052ba:	4b31      	ldr	r3, [pc, #196]	; (8005380 <_nx_driver_hardware_initialize+0xe0>)
 80052bc:	2200      	movs	r2, #0
 80052be:	61da      	str	r2, [r3, #28]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = 0;
 80052c0:	4b2f      	ldr	r3, [pc, #188]	; (8005380 <_nx_driver_hardware_initialize+0xe0>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	621a      	str	r2, [r3, #32]

  /* Make sure there are receive packets... otherwise, return an error.  */
  if (nx_driver_information.nx_driver_information_packet_pool_ptr == NULL)
 80052c6:	4b2e      	ldr	r3, [pc, #184]	; (8005380 <_nx_driver_hardware_initialize+0xe0>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <_nx_driver_hardware_initialize+0x32>
  {

    /* There must be receive packets. If not, return an error!  */
    return(NX_DRIVER_ERROR);
 80052ce:	235a      	movs	r3, #90	; 0x5a
 80052d0:	e052      	b.n	8005378 <_nx_driver_hardware_initialize+0xd8>
#ifdef NX_DRIVER_ETH_HW_IP_INIT
  nx_eth_init();
#endif /* NX_DRIVER_ETH_HW_IP_INIT */

  ETH_DMAConfigTypeDef dmaDefaultConf;
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80052d6:	2301      	movs	r3, #1
 80052d8:	743b      	strb	r3, [r7, #16]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80052da:	2301      	movs	r3, #1
 80052dc:	617b      	str	r3, [r7, #20]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80052de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052e2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80052e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
#ifndef STM32_ETH_HAL_LEGACY
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80052f0:	2300      	movs	r3, #0
 80052f2:	767b      	strb	r3, [r7, #25]
#if defined(ETH_DMASBMR_BLEN4) /* ETH AXI support*/
  dmaDefaultConf.RxOSRLimit = ETH_RX_OSR_LIMIT_3;
  dmaDefaultConf.TxOSRLimit = ETH_TX_OSR_LIMIT_3;
  dmaDefaultConf.AXIBLENMaxSize = ETH_BLEN_MAX_SIZE_16;
#else
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	763b      	strb	r3, [r7, #24]
#endif
  dmaDefaultConf.SecondPacketOperate = ENABLE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 3020 	strb.w	r3, [r7, #32]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80052fe:	2300      	movs	r3, #0
 8005300:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005304:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005308:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.SecondFrameOperate =  DISABLE;
  dmaDefaultConf.EnhancedDescriptorFormat =  DISABLE;
  dmaDefaultConf.DescriptorSkipLength =  DISABLE;
#endif
  /* enable OSF bit to enhance throughput */
  HAL_ETH_SetDMAConfig(&eth_handle, &dmaDefaultConf);
 800530a:	f107 030c 	add.w	r3, r7, #12
 800530e:	4619      	mov	r1, r3
 8005310:	481c      	ldr	r0, [pc, #112]	; (8005384 <_nx_driver_hardware_initialize+0xe4>)
 8005312:	f7fd f857 	bl	80023c4 <HAL_ETH_SetDMAConfig>
#ifdef STM32_ETH_PROMISCUOUS_ENABLE
  FilterConfig.PromiscuousMode = ENABLE;
#else
  FilterConfig.PromiscuousMode = DISABLE;
 8005316:	4b1c      	ldr	r3, [pc, #112]	; (8005388 <_nx_driver_hardware_initialize+0xe8>)
 8005318:	2200      	movs	r2, #0
 800531a:	701a      	strb	r2, [r3, #0]
#endif
  FilterConfig.HashUnicast = DISABLE;
 800531c:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <_nx_driver_hardware_initialize+0xe8>)
 800531e:	2200      	movs	r2, #0
 8005320:	70da      	strb	r2, [r3, #3]
  FilterConfig.HashMulticast = DISABLE;
 8005322:	4b19      	ldr	r3, [pc, #100]	; (8005388 <_nx_driver_hardware_initialize+0xe8>)
 8005324:	2200      	movs	r2, #0
 8005326:	711a      	strb	r2, [r3, #4]
  FilterConfig.DestAddrInverseFiltering = DISABLE;
 8005328:	4b17      	ldr	r3, [pc, #92]	; (8005388 <_nx_driver_hardware_initialize+0xe8>)
 800532a:	2200      	movs	r2, #0
 800532c:	721a      	strb	r2, [r3, #8]
  FilterConfig.PassAllMulticast = DISABLE;
 800532e:	4b16      	ldr	r3, [pc, #88]	; (8005388 <_nx_driver_hardware_initialize+0xe8>)
 8005330:	2200      	movs	r2, #0
 8005332:	715a      	strb	r2, [r3, #5]
  FilterConfig.BroadcastFilter = ENABLE;
 8005334:	4b14      	ldr	r3, [pc, #80]	; (8005388 <_nx_driver_hardware_initialize+0xe8>)
 8005336:	2201      	movs	r2, #1
 8005338:	725a      	strb	r2, [r3, #9]
  FilterConfig.SrcAddrInverseFiltering = DISABLE;
 800533a:	4b13      	ldr	r3, [pc, #76]	; (8005388 <_nx_driver_hardware_initialize+0xe8>)
 800533c:	2200      	movs	r2, #0
 800533e:	71da      	strb	r2, [r3, #7]
  FilterConfig.SrcAddrFiltering = DISABLE;
 8005340:	4b11      	ldr	r3, [pc, #68]	; (8005388 <_nx_driver_hardware_initialize+0xe8>)
 8005342:	2200      	movs	r2, #0
 8005344:	719a      	strb	r2, [r3, #6]
  FilterConfig.HachOrPerfectFilter = DISABLE;
 8005346:	4b10      	ldr	r3, [pc, #64]	; (8005388 <_nx_driver_hardware_initialize+0xe8>)
 8005348:	2200      	movs	r2, #0
 800534a:	709a      	strb	r2, [r3, #2]
  FilterConfig.ReceiveAllMode = DISABLE;
 800534c:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <_nx_driver_hardware_initialize+0xe8>)
 800534e:	2200      	movs	r2, #0
 8005350:	705a      	strb	r2, [r3, #1]
  FilterConfig.ControlPacketsFilter = 0x00;
 8005352:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <_nx_driver_hardware_initialize+0xe8>)
 8005354:	2200      	movs	r2, #0
 8005356:	60da      	str	r2, [r3, #12]

  /* Set Tx packet config common parameters */
  memset(&TxPacketCfg, 0, sizeof(ETH_TxPacketConfig));
 8005358:	2238      	movs	r2, #56	; 0x38
 800535a:	2100      	movs	r1, #0
 800535c:	480b      	ldr	r0, [pc, #44]	; (800538c <_nx_driver_hardware_initialize+0xec>)
 800535e:	f008 ffcb 	bl	800e2f8 <memset>
  TxPacketCfg.Attributes = ETH_TX_PACKETS_FEATURES_CSUM ;
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <_nx_driver_hardware_initialize+0xec>)
 8005364:	2201      	movs	r2, #1
 8005366:	601a      	str	r2, [r3, #0]
  TxPacketCfg.CRCPadCtrl = ETH_CRC_PAD_DISABLE;
 8005368:	4b08      	ldr	r3, [pc, #32]	; (800538c <_nx_driver_hardware_initialize+0xec>)
 800536a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800536e:	611a      	str	r2, [r3, #16]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_multicast_count = 0;
 8005370:	4b03      	ldr	r3, [pc, #12]	; (8005380 <_nx_driver_hardware_initialize+0xe0>)
 8005372:	2200      	movs	r2, #0
 8005374:	649a      	str	r2, [r3, #72]	; 0x48

  /* Return success!  */
  return(NX_SUCCESS);
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3730      	adds	r7, #48	; 0x30
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	20014790 	.word	0x20014790
 8005384:	20007e64 	.word	0x20007e64
 8005388:	20014818 	.word	0x20014818
 800538c:	200147e0 	.word	0x200147e0

08005390 <_nx_driver_hardware_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]

  /* Call STM32 library to start Ethernet operation.  */
  HAL_ETH_Start_IT(&eth_handle);
 8005398:	4803      	ldr	r0, [pc, #12]	; (80053a8 <_nx_driver_hardware_enable+0x18>)
 800539a:	f7fc f98d 	bl	80016b8 <HAL_ETH_Start_IT>

  /* Return success!  */
  return(NX_SUCCESS);
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20007e64 	.word	0x20007e64

080053ac <_nx_driver_hardware_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_disable(NX_IP_DRIVER *driver_req_ptr)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]

  HAL_ETH_Stop(&eth_handle);
 80053b4:	4803      	ldr	r0, [pc, #12]	; (80053c4 <_nx_driver_hardware_disable+0x18>)
 80053b6:	f7fc fa0d 	bl	80017d4 <HAL_ETH_Stop>

  /* Return success!  */
  return(NX_SUCCESS);
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	20007e64 	.word	0x20007e64

080053c8 <_nx_driver_hardware_packet_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/

static UINT  _nx_driver_hardware_packet_send(NX_PACKET *packet_ptr)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b092      	sub	sp, #72	; 0x48
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]

  NX_PACKET       *pktIdx;
  UINT            buffLen = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	643b      	str	r3, [r7, #64]	; 0x40

  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80053d4:	f107 030c 	add.w	r3, r7, #12
 80053d8:	2230      	movs	r2, #48	; 0x30
 80053da:	2100      	movs	r1, #0
 80053dc:	4618      	mov	r0, r3
 80053de:	f008 ff8b 	bl	800e2f8 <memset>


  int i = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	647b      	str	r3, [r7, #68]	; 0x44
 80053ea:	e050      	b.n	800548e <_nx_driver_hardware_packet_send+0xc6>
  {
    if (i >= ETH_TX_DESC_CNT)
 80053ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d901      	bls.n	80053f6 <_nx_driver_hardware_packet_send+0x2e>
    {
      return NX_DRIVER_ERROR;
 80053f2:	235a      	movs	r3, #90	; 0x5a
 80053f4:	e077      	b.n	80054e6 <_nx_driver_hardware_packet_send+0x11e>
    }

    Txbuffer[i].buffer = pktIdx->nx_packet_prepend_ptr;
 80053f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f8:	6899      	ldr	r1, [r3, #8]
 80053fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053fc:	4613      	mov	r3, r2
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	4413      	add	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	3348      	adds	r3, #72	; 0x48
 8005406:	443b      	add	r3, r7
 8005408:	3b3c      	subs	r3, #60	; 0x3c
 800540a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 800540c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	4619      	mov	r1, r3
 8005418:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800541a:	4613      	mov	r3, r2
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	3348      	adds	r3, #72	; 0x48
 8005424:	443b      	add	r3, r7
 8005426:	3b38      	subs	r3, #56	; 0x38
 8005428:	6019      	str	r1, [r3, #0]
    buffLen += (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 800542a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	461a      	mov	r2, r3
 8005436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005438:	4413      	add	r3, r2
 800543a:	643b      	str	r3, [r7, #64]	; 0x40

    if(i>0)
 800543c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543e:	2b00      	cmp	r3, #0
 8005440:	dd11      	ble.n	8005466 <_nx_driver_hardware_packet_send+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005444:	1e5a      	subs	r2, r3, #1
 8005446:	f107 000c 	add.w	r0, r7, #12
 800544a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800544c:	460b      	mov	r3, r1
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	440b      	add	r3, r1
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	18c1      	adds	r1, r0, r3
 8005456:	4613      	mov	r3, r2
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	3348      	adds	r3, #72	; 0x48
 8005460:	443b      	add	r3, r7
 8005462:	3b34      	subs	r3, #52	; 0x34
 8005464:	6019      	str	r1, [r3, #0]
    }

    if (pktIdx-> nx_packet_next ==NULL)
 8005466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <_nx_driver_hardware_packet_send+0xba>
    {
      Txbuffer[i].next = NULL;
 800546e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005470:	4613      	mov	r3, r2
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	3348      	adds	r3, #72	; 0x48
 800547a:	443b      	add	r3, r7
 800547c:	3b34      	subs	r3, #52	; 0x34
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005484:	3301      	adds	r3, #1
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 8005488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	647b      	str	r3, [r7, #68]	; 0x44
 800548e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1ab      	bne.n	80053ec <_nx_driver_hardware_packet_send+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)(pktIdx -> nx_packet_data_start), pktIdx -> nx_packet_data_end - pktIdx -> nx_packet_data_start);
#endif
  }

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  if (packet_ptr -> nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	f403 7315 	and.w	r3, r3, #596	; 0x254
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <_nx_driver_hardware_packet_send+0xe2>
                                                           NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM |
                                                             NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM |
                                                               NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM))
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80054a0:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <_nx_driver_hardware_packet_send+0x128>)
 80054a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80054a6:	615a      	str	r2, [r3, #20]
 80054a8:	e009      	b.n	80054be <_nx_driver_hardware_packet_send+0xf6>
  }
  else if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <_nx_driver_hardware_packet_send+0xf6>
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_INSERT;
 80054b6:	4b0e      	ldr	r3, [pc, #56]	; (80054f0 <_nx_driver_hardware_packet_send+0x128>)
 80054b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054bc:	615a      	str	r2, [r3, #20]
  }
#else
  TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  TxPacketCfg.Length = buffLen;
 80054be:	4a0c      	ldr	r2, [pc, #48]	; (80054f0 <_nx_driver_hardware_packet_send+0x128>)
 80054c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c2:	6053      	str	r3, [r2, #4]
  TxPacketCfg.TxBuffer = Txbuffer;
 80054c4:	4a0a      	ldr	r2, [pc, #40]	; (80054f0 <_nx_driver_hardware_packet_send+0x128>)
 80054c6:	f107 030c 	add.w	r3, r7, #12
 80054ca:	6093      	str	r3, [r2, #8]
  TxPacketCfg.pData = (uint32_t *)packet_ptr;
 80054cc:	4a08      	ldr	r2, [pc, #32]	; (80054f0 <_nx_driver_hardware_packet_send+0x128>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6353      	str	r3, [r2, #52]	; 0x34

  if(HAL_ETH_Transmit_IT(&eth_handle, &TxPacketCfg))
 80054d2:	4907      	ldr	r1, [pc, #28]	; (80054f0 <_nx_driver_hardware_packet_send+0x128>)
 80054d4:	4807      	ldr	r0, [pc, #28]	; (80054f4 <_nx_driver_hardware_packet_send+0x12c>)
 80054d6:	f7fc f9cd 	bl	8001874 <HAL_ETH_Transmit_IT>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <_nx_driver_hardware_packet_send+0x11c>
  {
    return(NX_DRIVER_ERROR);
 80054e0:	235a      	movs	r3, #90	; 0x5a
 80054e2:	e000      	b.n	80054e6 <_nx_driver_hardware_packet_send+0x11e>
  }

  return(NX_SUCCESS);
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3748      	adds	r7, #72	; 0x48
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	200147e0 	.word	0x200147e0
 80054f4:	20007e64 	.word	0x20007e64

080054f8 <_nx_driver_hardware_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]


  /* Increase the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count++;
 8005500:	4b08      	ldr	r3, [pc, #32]	; (8005524 <_nx_driver_hardware_multicast_join+0x2c>)
 8005502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005504:	3301      	adds	r3, #1
 8005506:	4a07      	ldr	r2, [pc, #28]	; (8005524 <_nx_driver_hardware_multicast_join+0x2c>)
 8005508:	6493      	str	r3, [r2, #72]	; 0x48

  /* Enable multicast frame reception.  */
  FilterConfig.PassAllMulticast = ENABLE;
 800550a:	4b07      	ldr	r3, [pc, #28]	; (8005528 <_nx_driver_hardware_multicast_join+0x30>)
 800550c:	2201      	movs	r2, #1
 800550e:	715a      	strb	r2, [r3, #5]
  HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8005510:	4905      	ldr	r1, [pc, #20]	; (8005528 <_nx_driver_hardware_multicast_join+0x30>)
 8005512:	4806      	ldr	r0, [pc, #24]	; (800552c <_nx_driver_hardware_multicast_join+0x34>)
 8005514:	f7fc ffd8 	bl	80024c8 <HAL_ETH_SetMACFilterConfig>

  /* Return success.  */
  return(NX_SUCCESS);
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20014790 	.word	0x20014790
 8005528:	20014818 	.word	0x20014818
 800552c:	20007e64 	.word	0x20007e64

08005530 <_nx_driver_hardware_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]

  /* Decrease the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count--;
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <_nx_driver_hardware_multicast_leave+0x34>)
 800553a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800553c:	3b01      	subs	r3, #1
 800553e:	4a09      	ldr	r2, [pc, #36]	; (8005564 <_nx_driver_hardware_multicast_leave+0x34>)
 8005540:	6493      	str	r3, [r2, #72]	; 0x48

  /* If multicast count reaches zero, disable multicast frame reception.  */
  if (nx_driver_information.nx_driver_information_multicast_count == 0)
 8005542:	4b08      	ldr	r3, [pc, #32]	; (8005564 <_nx_driver_hardware_multicast_leave+0x34>)
 8005544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <_nx_driver_hardware_multicast_leave+0x28>
  {

    /* Disable multicast frame reception.  */
    FilterConfig.PassAllMulticast = DISABLE;
 800554a:	4b07      	ldr	r3, [pc, #28]	; (8005568 <_nx_driver_hardware_multicast_leave+0x38>)
 800554c:	2200      	movs	r2, #0
 800554e:	715a      	strb	r2, [r3, #5]
    HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8005550:	4905      	ldr	r1, [pc, #20]	; (8005568 <_nx_driver_hardware_multicast_leave+0x38>)
 8005552:	4806      	ldr	r0, [pc, #24]	; (800556c <_nx_driver_hardware_multicast_leave+0x3c>)
 8005554:	f7fc ffb8 	bl	80024c8 <HAL_ETH_SetMACFilterConfig>
  }

  /* Return success.  */
  return(NX_SUCCESS);
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20014790 	.word	0x20014790
 8005568:	20014818 	.word	0x20014818
 800556c:	20007e64 	.word	0x20007e64

08005570 <_nx_driver_hardware_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  INT PHYLinkState;

  /* Get link status. */
  PHYLinkState = nx_eth_phy_get_link_state();
 8005578:	f7ff fac2 	bl	8004b00 <nx_eth_phy_get_link_state>
 800557c:	60f8      	str	r0, [r7, #12]

  /* Check link status. */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b01      	cmp	r3, #1
 8005582:	dc04      	bgt.n	800558e <_nx_driver_hardware_get_status+0x1e>
  {
    /* Update Link status if physical link is down. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_FALSE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	e003      	b.n	8005596 <_nx_driver_hardware_get_status+0x26>
  }
  else
  {
    /* Update Link status if physical link is up. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_TRUE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	2201      	movs	r2, #1
 8005594:	601a      	str	r2, [r3, #0]
  }

  /* Return success. */
  return NX_SUCCESS;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  NX_PACKET * release_packet = (NX_PACKET *) buff;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Remove the Ethernet header and release the packet.  */
  NX_DRIVER_ETHERNET_HEADER_REMOVE(release_packet);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	320e      	adds	r2, #14
 80055b4:	609a      	str	r2, [r3, #8]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3a0e      	subs	r2, #14
 80055be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Release the packet.  */
  nx_packet_transmit_release(release_packet);
 80055c0:	f107 030c 	add.w	r3, r7, #12
 80055c4:	4618      	mov	r0, r3
 80055c6:	f005 f93d 	bl	800a844 <_nxe_packet_transmit_release>
}
 80055ca:	bf00      	nop
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <_nx_driver_hardware_packet_received>:

static VOID  _nx_driver_hardware_packet_received(VOID)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
  NX_PACKET  *received_packet_ptr;

  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 80055da:	e006      	b.n	80055ea <_nx_driver_hardware_packet_received+0x16>
  {
      /* Transfer the packet to NetX.  */
      _nx_driver_transfer_to_netx(nx_driver_information.nx_driver_information_ip_ptr, received_packet_ptr);
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <_nx_driver_hardware_packet_received+0x30>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	4611      	mov	r1, r2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fdf7 	bl	80051d8 <_nx_driver_transfer_to_netx>
  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 80055ea:	1d3b      	adds	r3, r7, #4
 80055ec:	4619      	mov	r1, r3
 80055ee:	4806      	ldr	r0, [pc, #24]	; (8005608 <_nx_driver_hardware_packet_received+0x34>)
 80055f0:	f7fc f991 	bl	8001916 <HAL_ETH_ReadData>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0f0      	beq.n	80055dc <_nx_driver_hardware_packet_received+0x8>
  }
}
 80055fa:	bf00      	nop
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20014790 	.word	0x20014790
 8005608:	20007e64 	.word	0x20007e64

0800560c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t ** buff)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  NX_PACKET     *packet_ptr;
  if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 8005614:	4b0d      	ldr	r3, [pc, #52]	; (800564c <HAL_ETH_RxAllocateCallback+0x40>)
 8005616:	6898      	ldr	r0, [r3, #8]
 8005618:	f107 010c 	add.w	r1, r7, #12
 800561c:	2300      	movs	r3, #0
 800561e:	2200      	movs	r2, #0
 8005620:	f004 ff6e 	bl	800a500 <_nxe_packet_allocate>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d109      	bne.n	800563e <HAL_ETH_RxAllocateCallback+0x32>
                         NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
  {
    /* Adjust the packet.  */
    packet_ptr -> nx_packet_prepend_ptr += 2;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3202      	adds	r2, #2
 8005632:	609a      	str	r2, [r3, #8]
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_InvalidateDCache_by_Addr((uint32_t*)packet_ptr -> nx_packet_data_start, packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start);
#endif
    *buff = packet_ptr -> nx_packet_prepend_ptr;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Rx Buffer Pool is exhausted. */
    *buff = NULL;
  }
}
 800563c:	e002      	b.n	8005644 <HAL_ETH_RxAllocateCallback+0x38>
    *buff = NULL;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
}
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20014790 	.word	0x20014790

08005650 <HAL_ETH_RxLinkCallback>:
/*                                                                        */
/*    HAL_ETH_ReadData              Read a received packet                */
/*                                                                        */
/**************************************************************************/
void HAL_ETH_RxLinkCallback(void **first_packet_ptr, void **last_packet_ptr, uint8_t *buff, uint16_t Length)
{
 8005650:	b480      	push	{r7}
 8005652:	b089      	sub	sp, #36	; 0x24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	807b      	strh	r3, [r7, #2]
  NX_PACKET **first_nx_packet_ptr = (NX_PACKET **)first_packet_ptr;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	61fb      	str	r3, [r7, #28]
  NX_PACKET **last_nx_packet_ptr = (NX_PACKET **)last_packet_ptr;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	61bb      	str	r3, [r7, #24]
  NX_PACKET  *received_packet_ptr;

  /* Indicate the offset of the received data.  */
  uint8_t *data_buffer_ptr = buff - 2U - header_size;
 8005666:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <HAL_ETH_RxLinkCallback+0x68>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	f06f 0301 	mvn.w	r3, #1
 800566e:	1a9b      	subs	r3, r3, r2
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	4413      	add	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

  received_packet_ptr = (NX_PACKET *)data_buffer_ptr;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	613b      	str	r3, [r7, #16]
  received_packet_ptr->nx_packet_append_ptr = received_packet_ptr->nx_packet_prepend_ptr + Length;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	887b      	ldrh	r3, [r7, #2]
 8005680:	441a      	add	r2, r3
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	60da      	str	r2, [r3, #12]
  received_packet_ptr->nx_packet_length = Length;
 8005686:	887a      	ldrh	r2, [r7, #2]
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check whether this is the first packet. */
  if (*first_nx_packet_ptr == NULL)
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d103      	bne.n	800569c <HAL_ETH_RxLinkCallback+0x4c>
  {
    /* Add the first buffer of the packet. */
    *first_nx_packet_ptr = received_packet_ptr;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	e003      	b.n	80056a4 <HAL_ETH_RxLinkCallback+0x54>
  }
  /* This is not the first packet. */
  else
  {
    /* Add the rest of the buffer to the end of the packet. */
    (*last_nx_packet_ptr)->nx_packet_next = received_packet_ptr;
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	605a      	str	r2, [r3, #4]
  }
  /* Save the current packet in order to use it in the next iteration. */
  *last_nx_packet_ptr  = received_packet_ptr;
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	601a      	str	r2, [r3, #0]
}
 80056aa:	bf00      	nop
 80056ac:	3724      	adds	r7, #36	; 0x24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	200147dc 	.word	0x200147dc

080056bc <_nx_driver_hardware_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT _nx_driver_hardware_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]

  return NX_SUCCESS;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
	...

080056d4 <HAL_ETH_RxCpltCallback>:
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]

  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 80056dc:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <HAL_ETH_RxCpltCallback+0x34>)
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	60fb      	str	r3, [r7, #12]

  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_RECEIVED;
 80056e2:	4b09      	ldr	r3, [pc, #36]	; (8005708 <HAL_ETH_RxCpltCallback+0x34>)
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	4a07      	ldr	r2, [pc, #28]	; (8005708 <HAL_ETH_RxCpltCallback+0x34>)
 80056ec:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d104      	bne.n	80056fe <HAL_ETH_RxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 80056f4:	4b04      	ldr	r3, [pc, #16]	; (8005708 <HAL_ETH_RxCpltCallback+0x34>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 fb2b 	bl	8006d54 <_nx_ip_driver_deferred_processing>
  }
}
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20014790 	.word	0x20014790

0800570c <HAL_ETH_TxCpltCallback>:

void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 8005714:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <HAL_ETH_TxCpltCallback+0x34>)
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	60fb      	str	r3, [r7, #12]


  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_TRANSMITTED;
 800571a:	4b09      	ldr	r3, [pc, #36]	; (8005740 <HAL_ETH_TxCpltCallback+0x34>)
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f043 0304 	orr.w	r3, r3, #4
 8005722:	4a07      	ldr	r2, [pc, #28]	; (8005740 <HAL_ETH_TxCpltCallback+0x34>)
 8005724:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d104      	bne.n	8005736 <HAL_ETH_TxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 800572c:	4b04      	ldr	r3, [pc, #16]	; (8005740 <HAL_ETH_TxCpltCallback+0x34>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4618      	mov	r0, r3
 8005732:	f001 fb0f 	bl	8006d54 <_nx_ip_driver_deferred_processing>
  }
}
 8005736:	bf00      	nop
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20014790 	.word	0x20014790

08005744 <_nx_arp_dynamic_entry_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_dynamic_entry_delete(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_PACKET *packet_ptr, *next_packet_ptr;


    /* Determine if this ARP entry is already active.  */
    if (arp_ptr -> nx_arp_active_list_head)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d050      	beq.n	80057f8 <_nx_arp_dynamic_entry_delete+0xb4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005756:	f3ef 8310 	mrs	r3, PRIMASK
 800575a:	613b      	str	r3, [r7, #16]
    return(posture);
 800575c:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800575e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005760:	b672      	cpsid	i
    return(int_posture);
 8005762:	68fb      	ldr	r3, [r7, #12]
    {

        /* Remove this dynamic ARP entry from the associated list.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8005764:	61bb      	str	r3, [r7, #24]

        /* Determine if this is the only ARP entry on the list.  */
        if (arp_ptr == arp_ptr -> nx_arp_active_next)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d104      	bne.n	800577a <_nx_arp_dynamic_entry_delete+0x36>
        {

            /* Remove the entry from the list.  */
            *(arp_ptr -> nx_arp_active_list_head) =  NX_NULL;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	e014      	b.n	80057a4 <_nx_arp_dynamic_entry_delete+0x60>
        {

            /* Remove the entry from a list of more than one entry.  */

            /* Update the list head pointer.  */
            if (*(arp_ptr -> nx_arp_active_list_head) == arp_ptr)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d104      	bne.n	8005790 <_nx_arp_dynamic_entry_delete+0x4c>
            {
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	6952      	ldr	r2, [r2, #20]
 800578e:	601a      	str	r2, [r3, #0]
            }

            /* Update the links of the adjacent ARP entries.  */
            (arp_ptr -> nx_arp_active_next) -> nx_arp_active_previous = arp_ptr -> nx_arp_active_previous;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	6992      	ldr	r2, [r2, #24]
 8005798:	619a      	str	r2, [r3, #24]
            (arp_ptr -> nx_arp_active_previous) -> nx_arp_active_next =  arp_ptr -> nx_arp_active_next;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	6952      	ldr	r2, [r2, #20]
 80057a2:	615a      	str	r2, [r3, #20]
        }

        /* No longer active, clear the active list head.  */
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2200      	movs	r2, #0
 80057a8:	61da      	str	r2, [r3, #28]

        /* Decrease the number of active ARP entries.  */
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 80057b0:	1e5a      	subs	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

        /* Pickup the queued packets head pointer.  */
        next_packet_ptr =  arp_ptr -> nx_arp_packets_waiting;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	61fb      	str	r3, [r7, #28]

        /* Clear the queued packets head pointer.  */
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2200      	movs	r2, #0
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f383 8810 	msr	PRIMASK, r3
}
 80057ce:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Loop to remove all queued packets.  */
        while (next_packet_ptr)
 80057d0:	e00f      	b.n	80057f2 <_nx_arp_dynamic_entry_delete+0xae>
        {

            /* Pickup the packet pointer at the head of the queue.  */
            packet_ptr =  next_packet_ptr;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	617b      	str	r3, [r7, #20]

            /* Move to the next packet in the queue.  */
            next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	61fb      	str	r3, [r7, #28]

            /* Clear the next packet queue pointer.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2200      	movs	r2, #0
 80057e0:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	655a      	str	r2, [r3, #84]	; 0x54
#endif

            /* Release the packet that was queued from the previous ARP entry.  */
            _nx_packet_transmit_release(packet_ptr);
 80057ec:	6978      	ldr	r0, [r7, #20]
 80057ee:	f003 fb31 	bl	8008e54 <_nx_packet_transmit_release>
        while (next_packet_ptr)
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1ec      	bne.n	80057d2 <_nx_arp_dynamic_entry_delete+0x8e>
        }
    }

    return(NX_SUCCESS);
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <_nx_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ARP_ENABLE, ip_ptr, arp_cache_memory, arp_cache_size, 0, NX_TRACE_ARP_EVENTS, 0, 0);

    /* Clear the entire ARP cache.  */
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	2100      	movs	r1, #0
 8005814:	68b8      	ldr	r0, [r7, #8]
 8005816:	f008 fd6f 	bl	800e2f8 <memset>

    /* Pickup starting address of ARP entry array.  */
    entry_ptr =  (NX_ARP *)arp_cache_memory;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	61bb      	str	r3, [r7, #24]

    /* Determine how many ARP entries will fit in this cache area.  */
    arp_entries =  arp_cache_size / sizeof(NX_ARP);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a2d      	ldr	r2, [pc, #180]	; (80058d8 <_nx_arp_enable+0xd4>)
 8005822:	fba2 2303 	umull	r2, r3, r2, r3
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	617b      	str	r3, [r7, #20]

    /* Initialize the forward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 800582a:	2300      	movs	r3, #0
 800582c:	61fb      	str	r3, [r7, #28]
 800582e:	e00a      	b.n	8005846 <_nx_arp_enable+0x42>
    {
        /* Setup each entry to point to the next entry.  */
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	60da      	str	r2, [r3, #12]
        entry_ptr++;
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	3334      	adds	r3, #52	; 0x34
 800583e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	3301      	adds	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	3b01      	subs	r3, #1
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	429a      	cmp	r2, r3
 800584e:	d3ef      	bcc.n	8005830 <_nx_arp_enable+0x2c>
    }

    /* The entry now points to the last entry in the ARP array.  Set its
       next pointer to the first entry.  */
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	60da      	str	r2, [r3, #12]

    /* Initialize the backward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8005856:	2300      	movs	r3, #0
 8005858:	61fb      	str	r3, [r7, #28]
 800585a:	e00a      	b.n	8005872 <_nx_arp_enable+0x6e>
    {
        /* Setup each entry to point to the previous entry.  */
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	f1a3 0234 	sub.w	r2, r3, #52	; 0x34
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	611a      	str	r2, [r3, #16]
        entry_ptr--;
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	3b34      	subs	r3, #52	; 0x34
 800586a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	3301      	adds	r3, #1
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	3b01      	subs	r3, #1
 8005876:	69fa      	ldr	r2, [r7, #28]
 8005878:	429a      	cmp	r2, r3
 800587a:	d3ef      	bcc.n	800585c <_nx_arp_enable+0x58>
    }

    /* The entry now points to the first entry, set the previous pointer
       to the last entry.  */
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2234      	movs	r2, #52	; 0x34
 8005880:	fb02 f303 	mul.w	r3, r2, r3
 8005884:	3b34      	subs	r3, #52	; 0x34
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	441a      	add	r2, r3
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	611a      	str	r2, [r3, #16]
       information in the IP structure.  */

    /* Setup the list head pointers in the IP instance.  At first all ARP
       entries are associated with the dynamic ARP list.  The static ARP list
       is NULL until static ARP entry calls are made.  */
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
    ip_ptr -> nx_ip_arp_dynamic_list =  (NX_ARP *)arp_cache_memory;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4

    /* Store the initial ARP cache information in the IP control block.  */
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	f8c3 26f8 	str.w	r2, [r3, #1784]	; 0x6f8
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc

    /* Setup the ARP periodic update routine.  */
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <_nx_arp_enable+0xd8>)
 80058b2:	f8c3 26e8 	str.w	r2, [r3, #1768]	; 0x6e8

    /* Setup the ARP queue process routine.  */
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4a09      	ldr	r2, [pc, #36]	; (80058e0 <_nx_arp_enable+0xdc>)
 80058ba:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec

    /* Setup the ARP send packet routine.  */
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4a08      	ldr	r2, [pc, #32]	; (80058e4 <_nx_arp_enable+0xe0>)
 80058c2:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0

    /* Setup the ARP allocate service request pointer.  */
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4a07      	ldr	r2, [pc, #28]	; (80058e8 <_nx_arp_enable+0xe4>)
 80058ca:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4

    /* Return successful completion.  */
    return(NX_SUCCESS);
 80058ce:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3720      	adds	r7, #32
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	4ec4ec4f 	.word	0x4ec4ec4f
 80058dc:	080060b9 	.word	0x080060b9
 80058e0:	080062bb 	.word	0x080062bb
 80058e4:	08005f75 	.word	0x08005f75
 80058e8:	080058ed 	.word	0x080058ed

080058ec <_nx_arp_entry_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_entry_allocate(NX_IP *ip_ptr, NX_ARP **arp_list_ptr, UINT is_static)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08a      	sub	sp, #40	; 0x28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
NX_ARP *arp_entry;
UINT    status;


    /* Determine if there is an ARP entry available in the dynamic list.  */
    if (ip_ptr -> nx_ip_arp_dynamic_list)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 80b4 	beq.w	8005a6c <_nx_arp_entry_allocate+0x180>
    {

        /* Yes there are one or more free entries.  */

        /* Pickup pointer to last used dynamic ARP entry.  */
        arp_entry =  (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	623b      	str	r3, [r7, #32]

        /* Remove from the dynamic list. */
        _nx_arp_dynamic_entry_delete(ip_ptr, arp_entry);
 800590e:	6a39      	ldr	r1, [r7, #32]
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f7ff ff17 	bl	8005744 <_nx_arp_dynamic_entry_delete>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005916:	f3ef 8310 	mrs	r3, PRIMASK
 800591a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800591c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800591e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005920:	b672      	cpsid	i
    return(int_posture);
 8005922:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts temporarily.  */
        TX_DISABLE
 8005924:	61fb      	str	r3, [r7, #28]

        /* Link the ARP entry at the head of the IP list.  */

        /* Determine if the ARP entry is being added to an empty list.  */
        if (*arp_list_ptr)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d014      	beq.n	8005958 <_nx_arp_entry_allocate+0x6c>
        {

            /* Add the ARP entry to the beginning of the nonempty ARP
               list.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =      *arp_list_ptr;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	619a      	str	r2, [r3, #24]
            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =  arp_entry;
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	6a3a      	ldr	r2, [r7, #32]
 800594c:	615a      	str	r2, [r3, #20]
            (*arp_list_ptr) -> nx_arp_active_previous =  arp_entry;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6a3a      	ldr	r2, [r7, #32]
 8005954:	619a      	str	r2, [r3, #24]
 8005956:	e00b      	b.n	8005970 <_nx_arp_entry_allocate+0x84>
        }
        else
        {
            /* Empty list, just put the ARP entry at the beginning.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =       arp_entry;
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	6a3a      	ldr	r2, [r7, #32]
 8005962:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =   arp_entry;
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	6a3a      	ldr	r2, [r7, #32]
 8005968:	619a      	str	r2, [r3, #24]

            /* Now setup the list head.  */
            *arp_list_ptr =  arp_entry;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	6a3a      	ldr	r2, [r7, #32]
 800596e:	601a      	str	r2, [r3, #0]
        }

        /* Determine if this is a static entry. */
        if (is_static == NX_TRUE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d141      	bne.n	80059fa <_nx_arp_entry_allocate+0x10e>
        {

            /* Remove this entry from the ARP dynamic list.  */

            /* Determine if this is the only ARP entry on the dynamic list.  */
            if (arp_entry == arp_entry -> nx_arp_pool_next)
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	6a3a      	ldr	r2, [r7, #32]
 800597c:	429a      	cmp	r2, r3
 800597e:	d104      	bne.n	800598a <_nx_arp_entry_allocate+0x9e>
            {

                /* Remove the sole entry from the dynamic list head.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  NX_NULL;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
 8005988:	e009      	b.n	800599e <_nx_arp_entry_allocate+0xb2>
            {

                /* Remove the entry from a list of more than one entry.  */

                /* Update the links of the adjacent ARP dynamic pool entries.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	6a3a      	ldr	r2, [r7, #32]
 8005990:	6912      	ldr	r2, [r2, #16]
 8005992:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	6a3a      	ldr	r2, [r7, #32]
 800599a:	68d2      	ldr	r2, [r2, #12]
 800599c:	60da      	str	r2, [r3, #12]
            }

            /* Add the entry to the ARP static list.  */

            /* Determine if the ARP static list is empty.  */
            if (ip_ptr -> nx_ip_arp_static_list == NX_NULL)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10a      	bne.n	80059be <_nx_arp_entry_allocate+0xd2>
            {

                /* Just place this single ARP entry on the list.  */
                arp_entry -> nx_arp_pool_next =     arp_entry;
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	6a3a      	ldr	r2, [r7, #32]
 80059ac:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = arp_entry;
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	6a3a      	ldr	r2, [r7, #32]
 80059b2:	611a      	str	r2, [r3, #16]
                ip_ptr -> nx_ip_arp_static_list =   arp_entry;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a3a      	ldr	r2, [r7, #32]
 80059b8:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
 80059bc:	e015      	b.n	80059ea <_nx_arp_entry_allocate+0xfe>
            }
            else
            {

                /* Add to the end of the ARP static list.  */
                arp_entry -> nx_arp_pool_next = ip_ptr -> nx_ip_arp_static_list;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8d3 26d0 	ldr.w	r2, [r3, #1744]	; 0x6d0
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	611a      	str	r2, [r3, #16]
                ((ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	6a3a      	ldr	r2, [r7, #32]
 80059de:	60da      	str	r2, [r3, #12]
                (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous = arp_entry;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80059e6:	6a3a      	ldr	r2, [r7, #32]
 80059e8:	611a      	str	r2, [r3, #16]
            }

#ifndef NX_DISABLE_ARP_INFO
            /* Increment the ARP static entry count.  */
            ip_ptr -> nx_ip_arp_static_entries++;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80059f8:	e02c      	b.n	8005a54 <_nx_arp_entry_allocate+0x168>
        }
        else  /* Allocate entry from dynamic list. */
        {

            /* Move this ARP entry to the front of the general ARP dynamic entry pool.  */
            if (arp_entry != ip_ptr -> nx_ip_arp_dynamic_list)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8005a00:	6a3a      	ldr	r2, [r7, #32]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d01f      	beq.n	8005a46 <_nx_arp_entry_allocate+0x15a>

                /* The current ARP entry is not at the front of the list, so it
                   must be moved.  */

                /* Link up the neighbors first.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	6912      	ldr	r2, [r2, #16]
 8005a0e:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	6a3a      	ldr	r2, [r7, #32]
 8005a16:	68d2      	ldr	r2, [r2, #12]
 8005a18:	60da      	str	r2, [r3, #12]

                /* Now link this ARP entry to the head of the list.  */
                arp_entry -> nx_arp_pool_next =  ip_ptr -> nx_ip_arp_dynamic_list;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8d3 26d4 	ldr.w	r2, [r3, #1748]	; 0x6d4
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =  arp_entry;
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	6a3a      	ldr	r2, [r7, #32]
 8005a34:	60da      	str	r2, [r3, #12]
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =  arp_entry;
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	6a3a      	ldr	r2, [r7, #32]
 8005a3c:	611a      	str	r2, [r3, #16]

                /* Now set the list head to this ARP entry.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a3a      	ldr	r2, [r7, #32]
 8005a42:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
            }

            /* Increment the number of active dynamic entries.  */
            ip_ptr -> nx_ip_arp_dynamic_active_count++;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8
        }

        /* Set the entry type.  */
        arp_entry -> nx_arp_route_static = is_static;
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f383 8810 	msr	PRIMASK, r3
}
 8005a64:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Setup a successful status return.  */
        status =  NX_SUCCESS;
 8005a66:	2300      	movs	r3, #0
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6a:	e001      	b.n	8005a70 <_nx_arp_entry_allocate+0x184>
    else
    {

        /* No more ARP entries are available, all the ARP entries must be
           allocated on the static list.  */
        status =  NX_NO_MORE_ENTRIES;
 8005a6c:	2317      	movs	r3, #23
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return status to the caller.  */
    return(status);
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3728      	adds	r7, #40	; 0x28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <_nx_arp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b088      	sub	sp, #32
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005a84:	f3ef 8310 	mrs	r3, PRIMASK
 8005a88:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005a8a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005a8c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005a8e:	b672      	cpsid	i
    return(int_posture);
 8005a90:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8005a92:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if ARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_arp_queue_process)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d110      	bne.n	8005ac0 <_nx_arp_packet_deferred_receive+0x46>

        /* ARP is not enabled.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count...  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f383 8810 	msr	PRIMASK, r3
}
 8005ab6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since ARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8005ab8:	6838      	ldr	r0, [r7, #0]
 8005aba:	f003 f913 	bl	8008ce4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8005abe:	e02f      	b.n	8005b20 <_nx_arp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the ARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d011      	beq.n	8005aee <_nx_arp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the ARP deferred queue.  */
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f383 8810 	msr	PRIMASK, r3
}
 8005aec:	e018      	b.n	8005b20 <_nx_arp_packet_deferred_receive+0xa6>
    {

        /* Empty ARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the ARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
        packet_ptr -> nx_packet_queue_next =                 NX_NULL;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2200      	movs	r2, #0
 8005b02:	61da      	str	r2, [r3, #28]
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f383 8810 	msr	PRIMASK, r3
}
 8005b0e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the ARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005b16:	2200      	movs	r2, #0
 8005b18:	2110      	movs	r1, #16
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f005 fdc0 	bl	800b6a0 <_tx_event_flags_set>
    }
}
 8005b20:	3720      	adds	r7, #32
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <_nx_arp_packet_receive>:
/*                                            fixed compiler errors,      */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8005b26:	b590      	push	{r4, r7, lr}
 8005b28:	b097      	sub	sp, #92	; 0x5c
 8005b2a:	af02      	add	r7, sp, #8
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]
ULONG         sender_physical_lsw;
ULONG         sender_ip_address;
ULONG         target_ip_address;
ULONG         message_type;
ULONG         index;
UCHAR         consumed = NX_FALSE;
 8005b30:	2300      	movs	r3, #0
 8005b32:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
NX_INTERFACE *interface_ptr;


#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Determine if the packet length is valid.  */
    if (packet_ptr -> nx_packet_length < NX_ARP_MESSAGE_SIZE)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	2b1b      	cmp	r3, #27
 8005b3c:	d80a      	bhi.n	8005b54 <_nx_arp_packet_receive+0x2e>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8005b4c:	6838      	ldr	r0, [r7, #0]
 8005b4e:	f003 f8c9 	bl	8008ce4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8005b52:	e20b      	b.n	8005f6c <_nx_arp_packet_receive+0x446>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING  */

    /* Setup a pointer to the ARP message.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	643b      	str	r3, [r7, #64]	; 0x40

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b62:	3304      	adds	r3, #4
 8005b64:	ba12      	rev	r2, r2
 8005b66:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b70:	3308      	adds	r3, #8
 8005b72:	ba12      	rev	r2, r2
 8005b74:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b78:	330c      	adds	r3, #12
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b7e:	330c      	adds	r3, #12
 8005b80:	ba12      	rev	r2, r2
 8005b82:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b86:	3310      	adds	r3, #16
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b8c:	3310      	adds	r3, #16
 8005b8e:	ba12      	rev	r2, r2
 8005b90:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8005b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b94:	3314      	adds	r3, #20
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b9a:	3314      	adds	r3, #20
 8005b9c:	ba12      	rev	r2, r2
 8005b9e:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba2:	3318      	adds	r3, #24
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba8:	3318      	adds	r3, #24
 8005baa:	ba12      	rev	r2, r2
 8005bac:	601a      	str	r2, [r3, #0]

    /* Pickup the ARP message type.  */
    message_type =  (ULONG)(*(message_ptr + 1) & 0xFFFF);
 8005bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the ARP message type is valid.  */
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 8005bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d00d      	beq.n	8005bda <_nx_arp_packet_receive+0xb4>
 8005bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d00a      	beq.n	8005bda <_nx_arp_packet_receive+0xb4>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8005bd2:	6838      	ldr	r0, [r7, #0]
 8005bd4:	f003 f886 	bl	8008ce4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8005bd8:	e1c8      	b.n	8005f6c <_nx_arp_packet_receive+0x446>
    }

    /* Pick up the sender's physical address from the message.  */
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
 8005bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bdc:	3308      	adds	r3, #8
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	0c1b      	lsrs	r3, r3, #16
 8005be2:	63bb      	str	r3, [r7, #56]	; 0x38
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 8005be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be6:	3308      	adds	r3, #8
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	041a      	lsls	r2, r3, #16
 8005bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bee:	330c      	adds	r3, #12
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	0c1b      	lsrs	r3, r3, #16
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 8005bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfa:	330c      	adds	r3, #12
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	041a      	lsls	r2, r3, #16
 8005c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c02:	3310      	adds	r3, #16
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	0c1b      	lsrs	r3, r3, #16
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	633b      	str	r3, [r7, #48]	; 0x30
    target_ip_address =    *(message_ptr + 6);
 8005c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Does the packet have an interface assigned? */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <_nx_arp_packet_receive+0xfe>
    {

        /* No, so default it to the primary interface. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f503 62e4 	add.w	r2, r3, #1824	; 0x720
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Pickup the interface information from the incoming packet. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if it is an IP address conflict when IP address probing.  */
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d12e      	bne.n	8005c90 <_nx_arp_packet_receive+0x16a>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d02a      	beq.n	8005c90 <_nx_arp_packet_receive+0x16a>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8005c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d007      	beq.n	8005c54 <_nx_arp_packet_receive+0x12e>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d122      	bne.n	8005c90 <_nx_arp_packet_receive+0x16a>
         ((sender_ip_address == 0) && (target_ip_address == interface_ptr -> nx_interface_ip_probe_address))))
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d11d      	bne.n	8005c90 <_nx_arp_packet_receive+0x16a>
    {

        /* Make sure the sender physical address is not ours.  */
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d104      	bne.n	8005c68 <_nx_arp_packet_receive+0x142>
            (sender_physical_lsw != interface_ptr -> nx_interface_physical_address_lsw))
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 8005c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d00f      	beq.n	8005c88 <_nx_arp_packet_receive+0x162>
        {

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 8005c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00b      	beq.n	8005c88 <_nx_arp_packet_receive+0x162>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	79db      	ldrb	r3, [r3, #7]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	47a0      	blx	r4
                                                                           sender_physical_msw, sender_physical_lsw);
            }
        }

        /* Release the packet. */
        _nx_packet_release(packet_ptr);
 8005c88:	6838      	ldr	r0, [r7, #0]
 8005c8a:	f003 f82b 	bl	8008ce4 <_nx_packet_release>

        return;
 8005c8e:	e16d      	b.n	8005f6c <_nx_arp_packet_receive+0x446>
    }

    /* Determine if it is an address conflict packet after set the IP address.  */
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d040      	beq.n	8005d18 <_nx_arp_packet_receive+0x1f2>
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d13b      	bne.n	8005d18 <_nx_arp_packet_receive+0x1f2>
    {

        /* Is it sent from other devices. */
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d105      	bne.n	8005cb8 <_nx_arp_packet_receive+0x192>
            (sender_physical_lsw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw))
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8005cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d02b      	beq.n	8005d10 <_nx_arp_packet_receive+0x1ea>
        {

            /* Yes it is.  */
            if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout == 0)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <_nx_arp_packet_receive+0x1b2>
            {

                /* Set defend timeout. */
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc6:	220a      	movs	r2, #10
 8005cc8:	645a      	str	r2, [r3, #68]	; 0x44

                /* Send the announcement. */
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f94e 	bl	8005f74 <_nx_arp_packet_send>
            }

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00b      	beq.n	8005cf8 <_nx_arp_packet_receive+0x1d2>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	79db      	ldrb	r3, [r3, #7]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	47a0      	blx	r4

            /* This is likely in response to our previous gratuitous ARP from another entity on the
               network has the same IP address.  */

            /* Determine if there is a gratuitous ARP response handler.  */
            if (ip_ptr -> nx_ip_arp_gratuitous_response_handler)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d006      	beq.n	8005d10 <_nx_arp_packet_receive+0x1ea>
            {

                /* Yes, call the gratuitous ARP response handler. Note that it is responsible
                   for releasing the packet!  */
                (ip_ptr -> nx_ip_arp_gratuitous_response_handler)(ip_ptr, packet_ptr);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	4798      	blx	r3

                return;
 8005d0e:	e12d      	b.n	8005f6c <_nx_arp_packet_receive+0x446>
            return;
#endif /* NX_ARP_DEFEND_BY_REPLY */
        }

        /* Release the conflict packet. */
        _nx_packet_release(packet_ptr);
 8005d10:	6838      	ldr	r0, [r7, #0]
 8005d12:	f002 ffe7 	bl	8008ce4 <_nx_packet_release>

        return;
 8005d16:	e129      	b.n	8005f6c <_nx_arp_packet_receive+0x446>
    }

    /* Determine what type of ARP message this is.  Note that ARP requests must
       also specify this IP instance's IP address.  */
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 8005d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	f040 808f 	bne.w	8005e3e <_nx_arp_packet_receive+0x318>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	f040 8088 	bne.w	8005e3e <_nx_arp_packet_receive+0x318>
    {

#ifndef NX_DISABLE_ARP_INFO

        /* Increment the ARP requests received count.  */
        ip_ptr -> nx_ip_arp_requests_received++;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	671a      	str	r2, [r3, #112]	; 0x70

        /* Increment the ARP responses sent count.  */
        ip_ptr -> nx_ip_arp_responses_sent++;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	675a      	str	r2, [r3, #116]	; 0x74

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_RESPONSE_SEND, ip_ptr, sender_ip_address, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the ARP message type to ARP response.  */
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 8005d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d44:	3304      	adds	r3, #4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	0c1b      	lsrs	r3, r3, #16
 8005d4a:	041b      	lsls	r3, r3, #16
 8005d4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d4e:	3204      	adds	r2, #4
 8005d50:	f043 0302 	orr.w	r3, r3, #2
 8005d54:	6013      	str	r3, [r2, #0]


        /* Now fill in the new source and destination information for the ARP response.  */
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw >> 16);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8005d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d68:	3308      	adds	r3, #8
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	601a      	str	r2, [r3, #0]
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address >> 16);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8005d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d80:	330c      	adds	r3, #12
 8005d82:	430a      	orrs	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	0419      	lsls	r1, r3, #16
 8005d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d90:	3310      	adds	r3, #16
 8005d92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d94:	430a      	orrs	r2, r1
 8005d96:	601a      	str	r2, [r3, #0]
        *(message_ptr + 5) =  (ULONG)sender_physical_lsw;
 8005d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d9a:	3314      	adds	r3, #20
 8005d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d9e:	601a      	str	r2, [r3, #0]
        *(message_ptr + 6) =  (ULONG)sender_ip_address;
 8005da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da2:	3318      	adds	r3, #24
 8005da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005da6:	601a      	str	r2, [r3, #0]

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the ARP message.  */
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005daa:	3304      	adds	r3, #4
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db0:	3304      	adds	r3, #4
 8005db2:	ba12      	rev	r2, r2
 8005db4:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db8:	3308      	adds	r3, #8
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	ba12      	rev	r2, r2
 8005dc2:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc6:	330c      	adds	r3, #12
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dcc:	330c      	adds	r3, #12
 8005dce:	ba12      	rev	r2, r2
 8005dd0:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd4:	3310      	adds	r3, #16
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dda:	3310      	adds	r3, #16
 8005ddc:	ba12      	rev	r2, r2
 8005dde:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8005de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de2:	3314      	adds	r3, #20
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de8:	3314      	adds	r3, #20
 8005dea:	ba12      	rev	r2, r2
 8005dec:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df0:	3318      	adds	r3, #24
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df6:	3318      	adds	r3, #24
 8005df8:	ba12      	rev	r2, r2
 8005dfa:	601a      	str	r2, [r3, #0]

        /* Make sure the packet length is set properly.  */
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	221c      	movs	r2, #28
 8005e00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup the append pointer, since the received ARP packet can be padded
           with unnecessary bytes.  */
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f103 021c 	add.w	r2, r3, #28
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	60da      	str	r2, [r3, #12]

        /* Send the ARP request to the driver.  */
        driver_request.nx_ip_driver_ptr =      ip_ptr;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 8005e12:	2306      	movs	r3, #6
 8005e14:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet =   packet_ptr;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_physical_address_msw =  sender_physical_msw;
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1c:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  sender_physical_lsw;
 8005e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e20:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_ARP_RESPONSE_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* No need to update interface.  When responding to an ARP request, use the same interface where the request was received. */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2e:	f107 0208 	add.w	r2, r7, #8
 8005e32:	4610      	mov	r0, r2
 8005e34:	4798      	blx	r3

        /* Set the consumed as NX_TRUE, do not need to release the packet.  */
        consumed = NX_TRUE;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005e3c:	e00d      	b.n	8005e5a <_nx_arp_packet_receive+0x334>
        /* We have a response to a previous ARP request or Gratuitous ARP from another network entity.  */

#ifndef NX_DISABLE_ARP_INFO

        /* Check for the message type to see which counter to increment.  */
        if (message_type == NX_ARP_OPTION_REQUEST)
 8005e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d105      	bne.n	8005e50 <_nx_arp_packet_receive+0x32a>
        {

            /* Increment the ARP requests received count.  */
            ip_ptr -> nx_ip_arp_requests_received++;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	671a      	str	r2, [r3, #112]	; 0x70
 8005e4e:	e004      	b.n	8005e5a <_nx_arp_packet_receive+0x334>
        }
        else
        {

            /* Increment the ARP responses received count.  */
            ip_ptr -> nx_ip_arp_responses_received++;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	679a      	str	r2, [r3, #120]	; 0x78

    /* Now we need to search through the active ARP list for the IP address
       to see if there is a matching entry.  */

    /* Calculate the hash index for the sender IP address.  */
    index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5c:	0a1a      	lsrs	r2, r3, #8
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	4413      	add	r3, r2
 8005e62:	f003 031f 	and.w	r3, r3, #31
 8005e66:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup the first ARP entry.  */
    arp_ptr = NX_NULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Ignore anything from any ARP packet with a zero sender IP address. */
    if (sender_ip_address != 0)
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d03a      	beq.n	8005ee8 <_nx_arp_packet_receive+0x3c2>
    {
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ROUTE_TABLE_MASK);
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	0a1a      	lsrs	r2, r3, #8
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	4413      	add	r3, r2
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the first ARP entry.  */
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e84:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8c:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Loop to look for an ARP match.  */
    while (arp_ptr)
 8005e8e:	e02b      	b.n	8005ee8 <_nx_arp_packet_receive+0x3c2>
    {

        /* Check for an IP match.  */
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 8005e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d117      	bne.n	8005eca <_nx_arp_packet_receive+0x3a4>
                }
            }
#endif /* NX_ENABLE_ARP_MAC_CHANGE_NOTIFICATION */

            /* No need to update the static ARP entry. */
            if (arp_ptr -> nx_arp_route_static)
 8005e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d126      	bne.n	8005ef0 <_nx_arp_packet_receive+0x3ca>
            {
                break;
            }

            /* Save the physical address found in this ARP response.  */
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8005ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ea6:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8005ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eac:	629a      	str	r2, [r3, #40]	; 0x28

            /* Set the update rate to the expiration rate since we now have an ARP
               response.  */
            arp_ptr -> nx_arp_entry_next_update =  NX_ARP_EXPIRATION_RATE;
 8005eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	605a      	str	r2, [r3, #4]

            /* Reset the retry counter for this ARP entry.  */
            arp_ptr -> nx_arp_retries =  0;
 8005eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	609a      	str	r2, [r3, #8]

            /* Set the interface attached to this packet. */
            arp_ptr -> nx_arp_ip_interface = interface_ptr;
 8005eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ebe:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Call queue send function to send the packet queued up.  */
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 8005ec0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fa2c 	bl	8006320 <_nx_arp_queue_send>

            /* Yes, we found a match.  Get out of the loop!  */
            break;
 8005ec8:	e013      	b.n	8005ef2 <_nx_arp_packet_receive+0x3cc>
        }

        /* Move to the next active ARP entry.  */
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 8005eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	647b      	str	r3, [r7, #68]	; 0x44

        /* Determine if we are at the end of the ARP list.  */
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ed4:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005edc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d102      	bne.n	8005ee8 <_nx_arp_packet_receive+0x3c2>
        {

            /* Clear the ARP pointer.  */
            arp_ptr =  NX_NULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 8005ee6:	e004      	b.n	8005ef2 <_nx_arp_packet_receive+0x3cc>
    while (arp_ptr)
 8005ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1d0      	bne.n	8005e90 <_nx_arp_packet_receive+0x36a>
 8005eee:	e000      	b.n	8005ef2 <_nx_arp_packet_receive+0x3cc>
                break;
 8005ef0:	bf00      	nop
        }
    }

    /* Determine if we have a packet to release. */
    if (consumed == NX_FALSE)
 8005ef2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <_nx_arp_packet_receive+0x3da>
    {
        _nx_packet_release(packet_ptr);
 8005efa:	6838      	ldr	r0, [r7, #0]
 8005efc:	f002 fef2 	bl	8008ce4 <_nx_packet_release>
    }

#ifndef NX_DISABLE_ARP_AUTO_ENTRY

    /* Determine if anything was found.  Ignore ARP messages with a zero IP sender address.   */
    if ((arp_ptr == NX_NULL) && (sender_ip_address != 0))
 8005f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d132      	bne.n	8005f6c <_nx_arp_packet_receive+0x446>
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02f      	beq.n	8005f6c <_nx_arp_packet_receive+0x446>
    {

        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	0a1a      	lsrs	r2, r3, #8
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	4413      	add	r3, r2
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Allocate a new ARP entry in advance of the need to send to the IP
           address.  */
        if (((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)) == NX_SUCCESS)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 8005f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f22:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005f26:	0092      	lsls	r2, r2, #2
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	4411      	add	r1, r2
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d119      	bne.n	8005f6c <_nx_arp_packet_receive+0x446>
        {

            /* Setup a pointer to the new ARP entry.  */
            arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f3c:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	647b      	str	r3, [r7, #68]	; 0x44

            /* Setup the IP address and clear the physical mapping.  */
            arp_ptr -> nx_arp_ip_address =            sender_ip_address;
 8005f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4c:	621a      	str	r2, [r3, #32]
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8005f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f52:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8005f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f58:	629a      	str	r2, [r3, #40]	; 0x28
            arp_ptr -> nx_arp_entry_next_update =     NX_ARP_EXPIRATION_RATE;
 8005f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	605a      	str	r2, [r3, #4]
            arp_ptr -> nx_arp_retries =               0;
 8005f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f62:	2200      	movs	r2, #0
 8005f64:	609a      	str	r2, [r3, #8]
            arp_ptr -> nx_arp_ip_interface         =  interface_ptr;
 8005f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f6a:	62da      	str	r2, [r3, #44]	; 0x2c
        }
    }
#endif /* NX_DISABLE_ARP_AUTO_ENTRY */
}
 8005f6c:	3754      	adds	r7, #84	; 0x54
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd90      	pop	{r4, r7, pc}
	...

08005f74 <_nx_arp_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_send(NX_IP *ip_ptr, ULONG destination_ip, NX_INTERFACE *nx_interface)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08e      	sub	sp, #56	; 0x38
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
NX_PACKET   *request_ptr;
ULONG       *message_ptr;
NX_IP_DRIVER driver_request;

    /* nx_interface must not be NX_NULL. */
    NX_ASSERT(nx_interface != NX_NULL);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d104      	bne.n	8005f90 <_nx_arp_packet_send+0x1c>
 8005f86:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8a:	f006 fdcf 	bl	800cb2c <_tx_thread_sleep>
 8005f8e:	e7fa      	b.n	8005f86 <_nx_arp_packet_send+0x12>
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 8005f96:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	222c      	movs	r2, #44	; 0x2c
 8005f9e:	f002 fb3f 	bl	8008620 <_nx_packet_allocate>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f040 8081 	bne.w	80060ac <_nx_arp_packet_send+0x138>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Stamp the packet with the outgoing interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "request_ptr" was initialized in _nx_packet_allocate. */
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef NX_DISABLE_ARP_INFO
    /* Increment the ARP requests sent count.  */
    ip_ptr -> nx_ip_arp_requests_sent++;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	66da      	str	r2, [r3, #108]	; 0x6c
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_REQUEST_SEND, ip_ptr, destination_ip, request_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Build the ARP request packet.  */

    /* Setup the size of the ARP message.  */
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	221c      	movs	r2, #28
 8005fbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the prepend pointer.  */
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	3a1c      	subs	r2, #28
 8005fc8:	609a      	str	r2, [r3, #8]

    /* Setup the pointer to the message area.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)request_ptr -> nx_packet_prepend_ptr;
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	637b      	str	r3, [r7, #52]	; 0x34

    /* Write the Hardware type into the message.  */
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 8005fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd2:	f44f 3284 	mov.w	r2, #67584	; 0x10800
 8005fd6:	601a      	str	r2, [r3, #0]
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4a35      	ldr	r2, [pc, #212]	; (80060b4 <_nx_arp_packet_send+0x140>)
 8005fde:	601a      	str	r2, [r3, #0]
        NX_ARP_OPTION_REQUEST;

    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_physical_address_lsw >> 16);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8005fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fee:	3308      	adds	r3, #8
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	601a      	str	r2, [r3, #0]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_ip_address >> 16);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8006000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006002:	330c      	adds	r3, #12
 8006004:	430a      	orrs	r2, r1
 8006006:	601a      	str	r2, [r3, #0]
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	695a      	ldr	r2, [r3, #20]
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	3310      	adds	r3, #16
 8006010:	0412      	lsls	r2, r2, #16
 8006012:	601a      	str	r2, [r3, #0]
    *(message_ptr + 5) =  (ULONG)0;
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	3314      	adds	r3, #20
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
    *(message_ptr + 6) =  (ULONG)destination_ip;
 800601c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601e:	3318      	adds	r3, #24
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	601a      	str	r2, [r3, #0]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 8006024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	ba1a      	rev	r2, r3
 800602a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 800602e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006030:	3304      	adds	r3, #4
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006036:	3304      	adds	r3, #4
 8006038:	ba12      	rev	r2, r2
 800603a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603e:	3308      	adds	r3, #8
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006044:	3308      	adds	r3, #8
 8006046:	ba12      	rev	r2, r2
 8006048:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800604a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604c:	330c      	adds	r3, #12
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006052:	330c      	adds	r3, #12
 8006054:	ba12      	rev	r2, r2
 8006056:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8006058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605a:	3310      	adds	r3, #16
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006060:	3310      	adds	r3, #16
 8006062:	ba12      	rev	r2, r2
 8006064:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8006066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006068:	3314      	adds	r3, #20
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606e:	3314      	adds	r3, #20
 8006070:	ba12      	rev	r2, r2
 8006072:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8006074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006076:	3318      	adds	r3, #24
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607c:	3318      	adds	r3, #24
 800607e:	ba12      	rev	r2, r2
 8006080:	601a      	str	r2, [r3, #0]

    /* Set up the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 8006086:	2305      	movs	r3, #5
 8006088:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_packet =                request_ptr;
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 800608e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006092:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8006094:	f04f 33ff 	mov.w	r3, #4294967295
 8006098:	61fb      	str	r3, [r7, #28]
    driver_request.nx_ip_driver_interface            =  nx_interface;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Send the ARP request to the driver.  */
    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a2:	f107 0210 	add.w	r2, r7, #16
 80060a6:	4610      	mov	r0, r2
 80060a8:	4798      	blx	r3
 80060aa:	e000      	b.n	80060ae <_nx_arp_packet_send+0x13a>
                return;
 80060ac:	bf00      	nop
}
 80060ae:	3738      	adds	r7, #56	; 0x38
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	06040001 	.word	0x06040001

080060b8 <_nx_arp_periodic_update>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_periodic_update(NX_IP *ip_ptr)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08a      	sub	sp, #40	; 0x28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Pickup pointer to ARP dynamic list.  */
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80060c6:	623b      	str	r3, [r7, #32]

    /* Loop through the active ARP entries to see if they need updating.  */
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 80060c8:	2300      	movs	r3, #0
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24
 80060cc:	e0af      	b.n	800622e <_nx_arp_periodic_update+0x176>
    {

        /* Check this ARP entry to see if it need updating.  */
        if (arp_entry -> nx_arp_entry_next_update)
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 80a5 	beq.w	8006222 <_nx_arp_periodic_update+0x16a>
        {

            /* Decrement the next update field.  */
            arp_entry -> nx_arp_entry_next_update--;
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	1e5a      	subs	r2, r3, #1
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	605a      	str	r2, [r3, #4]

            /* Determine if an ARP expiration is present.  */
            if (!arp_entry -> nx_arp_entry_next_update)
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f040 809b 	bne.w	8006222 <_nx_arp_periodic_update+0x16a>
            {

                /* Yes, an ARP expiration is present.   */

                /* Determine if the retry counter has been exceeded.  */
                if (arp_entry -> nx_arp_retries == NX_ARP_MAXIMUM_RETRIES)
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	2b12      	cmp	r3, #18
 80060f2:	f040 8086 	bne.w	8006202 <_nx_arp_periodic_update+0x14a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80060f6:	f3ef 8310 	mrs	r3, PRIMASK
 80060fa:	613b      	str	r3, [r7, #16]
    return(posture);
 80060fc:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80060fe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006100:	b672      	cpsid	i
    return(int_posture);
 8006102:	68fb      	ldr	r3, [r7, #12]

                    /* The number of retries has been exceeded. The entry is removed
                       from the active list and any queued packet is released.  */

                    /* Disable interrupts.  */
                    TX_DISABLE
 8006104:	61bb      	str	r3, [r7, #24]

                    /* This ARP entry has expired, remove it from the active ARP list.  Check to make
                       sure it is still active.  */
                    if (arp_entry -> nx_arp_active_list_head)
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d028      	beq.n	8006160 <_nx_arp_periodic_update+0xa8>
                    {

                        /* Determine if this is the only ARP entry on the list.  */
                        if (arp_entry == arp_entry -> nx_arp_active_next)
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	6a3a      	ldr	r2, [r7, #32]
 8006114:	429a      	cmp	r2, r3
 8006116:	d104      	bne.n	8006122 <_nx_arp_periodic_update+0x6a>
                        {

                            /* Remove the entry from the list.  */
                            *(arp_entry -> nx_arp_active_list_head) =  NX_NULL;
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	e014      	b.n	800614c <_nx_arp_periodic_update+0x94>
                        {

                            /* Remove the entry from a list of more than one entry.  */

                            /* Update the list head pointer.  */
                            if (*(arp_entry -> nx_arp_active_list_head) == arp_entry)
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6a3a      	ldr	r2, [r7, #32]
 800612a:	429a      	cmp	r2, r3
 800612c:	d104      	bne.n	8006138 <_nx_arp_periodic_update+0x80>
                            {
                                *(arp_entry -> nx_arp_active_list_head) =  arp_entry -> nx_arp_active_next;
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	6a3a      	ldr	r2, [r7, #32]
 8006134:	6952      	ldr	r2, [r2, #20]
 8006136:	601a      	str	r2, [r3, #0]
                            }

                            /* Update the links of the adjacent ARP entries.  */
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	695b      	ldr	r3, [r3, #20]
                                arp_entry -> nx_arp_active_previous;
 800613c:	6a3a      	ldr	r2, [r7, #32]
 800613e:	6992      	ldr	r2, [r2, #24]
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8006140:	619a      	str	r2, [r3, #24]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	699b      	ldr	r3, [r3, #24]
                                arp_entry -> nx_arp_active_next;
 8006146:	6a3a      	ldr	r2, [r7, #32]
 8006148:	6952      	ldr	r2, [r2, #20]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 800614a:	615a      	str	r2, [r3, #20]
                        }

                        /* Decrease the number of active ARP entries.  */
                        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8006152:	1e5a      	subs	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

                        /* Clear the active head pointer.  */
                        arp_entry -> nx_arp_active_list_head =  NX_NULL;
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	2200      	movs	r2, #0
 800615e:	61da      	str	r2, [r3, #28]
                    }

                    /* Determine if this is the only ARP entry on the dynamic list.  */
                    if (arp_entry != arp_entry -> nx_arp_pool_next)
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	6a3a      	ldr	r2, [r7, #32]
 8006166:	429a      	cmp	r2, r3
 8006168:	d02a      	beq.n	80061c0 <_nx_arp_periodic_update+0x108>
                        /* No. Place the ARP entry at the end of the dynamic ARP pool, which is where new
                           ARP requests are allocated from.  */

                        /* Remove the entry from a list of more than one entry.  */
                        /* Update the links of the adjacent ARP dynamic pool entries.  */
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	68db      	ldr	r3, [r3, #12]
                            arp_entry -> nx_arp_pool_previous;
 800616e:	6a3a      	ldr	r2, [r7, #32]
 8006170:	6912      	ldr	r2, [r2, #16]
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 8006172:	611a      	str	r2, [r3, #16]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	691b      	ldr	r3, [r3, #16]
                            arp_entry -> nx_arp_pool_next;
 8006178:	6a3a      	ldr	r2, [r7, #32]
 800617a:	68d2      	ldr	r2, [r2, #12]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 800617c:	60da      	str	r2, [r3, #12]

                        /* Update the list head pointer.  */
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8006184:	6a3a      	ldr	r2, [r7, #32]
 8006186:	429a      	cmp	r2, r3
 8006188:	d104      	bne.n	8006194 <_nx_arp_periodic_update+0xdc>
                        {
                            ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry -> nx_arp_pool_next;
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
                        }


                        /* Add ARP entry to the end of the list.  */
                        arp_entry -> nx_arp_pool_next =
                            ip_ptr -> nx_ip_arp_dynamic_list;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 26d4 	ldr.w	r2, [r3, #1748]	; 0x6d4
                        arp_entry -> nx_arp_pool_next =
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	60da      	str	r2, [r3, #12]
                        arp_entry -> nx_arp_pool_previous =
                            (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80061a4:	691a      	ldr	r2, [r3, #16]
                        arp_entry -> nx_arp_pool_previous =
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	611a      	str	r2, [r3, #16]
                        ((ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous) -> nx_arp_pool_next =
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	6a3a      	ldr	r2, [r7, #32]
 80061b4:	60da      	str	r2, [r3, #12]
                            arp_entry;
                        (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous =   arp_entry;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80061bc:	6a3a      	ldr	r2, [r7, #32]
 80061be:	611a      	str	r2, [r3, #16]
                    }

                    /* Pickup the queued packets head pointer.  */
                    next_packet_ptr =  arp_entry -> nx_arp_packets_waiting;
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	61fb      	str	r3, [r7, #28]

                    /* Clear the queued packets head pointer.  */
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	2200      	movs	r2, #0
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f383 8810 	msr	PRIMASK, r3
}
 80061d6:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Loop to remove all queued packets.  */
                    while (next_packet_ptr)
 80061d8:	e00f      	b.n	80061fa <_nx_arp_periodic_update+0x142>
                    {

                        /* Pickup the packet pointer at the head of the queue.  */
                        packet_ptr =  next_packet_ptr;
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	617b      	str	r3, [r7, #20]

                        /* Move to the next packet in the queue.  */
                        next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	61fb      	str	r3, [r7, #28]

                        /* Clear the next packet queue pointer.  */
                        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2200      	movs	r2, #0
 80061e8:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                        /* Release the packet that was queued for the expired ARP entry.  */
                        _nx_packet_transmit_release(packet_ptr);
 80061f4:	6978      	ldr	r0, [r7, #20]
 80061f6:	f002 fe2d 	bl	8008e54 <_nx_packet_transmit_release>
                    while (next_packet_ptr)
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1ec      	bne.n	80061da <_nx_arp_periodic_update+0x122>
 8006200:	e00f      	b.n	8006222 <_nx_arp_periodic_update+0x16a>
                {

                    /* We haven't yet had a response to this ARP request so send it again!  */

                    /* Increment the ARP retry counter.  */
                    arp_entry -> nx_arp_retries++;
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	609a      	str	r2, [r3, #8]

                    /* Setup the ARP update rate to the maximum value again.  */
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	220a      	movs	r2, #10
 8006210:	605a      	str	r2, [r3, #4]

                    /* Send the ARP request out.  */
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	6a19      	ldr	r1, [r3, #32]
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	461a      	mov	r2, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fea9 	bl	8005f74 <_nx_arp_packet_send>
                }
            }
        }

        /* Move to the next ARP entry.  */
        arp_entry =  arp_entry -> nx_arp_pool_next;
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	623b      	str	r3, [r7, #32]
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	3301      	adds	r3, #1
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8006234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006236:	429a      	cmp	r2, r3
 8006238:	f4ff af49 	bcc.w	80060ce <_nx_arp_periodic_update+0x16>
    }


    /* Reduce the defend timeout of interfaces.  */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800623c:	2300      	movs	r3, #0
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
 8006240:	e033      	b.n	80062aa <_nx_arp_periodic_update+0x1f2>
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_FALSE)
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	440b      	add	r3, r1
 8006250:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d021      	beq.n	800629e <_nx_arp_periodic_update+0x1e6>
        {
            continue;
        }

        if (ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout == 0)
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	440b      	add	r3, r1
 8006268:	f203 7364 	addw	r3, r3, #1892	; 0x764
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d017      	beq.n	80062a2 <_nx_arp_periodic_update+0x1ea>
        {
            continue;
        }

        ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout--;
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	440b      	add	r3, r1
 8006280:	f203 7364 	addw	r3, r3, #1892	; 0x764
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	1e59      	subs	r1, r3, #1
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	4403      	add	r3, r0
 8006296:	f203 7364 	addw	r3, r3, #1892	; 0x764
 800629a:	6019      	str	r1, [r3, #0]
 800629c:	e002      	b.n	80062a4 <_nx_arp_periodic_update+0x1ec>
            continue;
 800629e:	bf00      	nop
 80062a0:	e000      	b.n	80062a4 <_nx_arp_periodic_update+0x1ec>
            continue;
 80062a2:	bf00      	nop
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	3301      	adds	r3, #1
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0c8      	beq.n	8006242 <_nx_arp_periodic_update+0x18a>
    }
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	3728      	adds	r7, #40	; 0x28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <_nx_arp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_process(NX_IP *ip_ptr)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b088      	sub	sp, #32
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]

NX_PACKET *packet_ptr;


    /* Loop to process all ARP deferred packet requests.  */
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 80062c2:	e023      	b.n	800630c <_nx_arp_queue_process+0x52>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80062c4:	f3ef 8310 	mrs	r3, PRIMASK
 80062c8:	617b      	str	r3, [r7, #20]
    return(posture);
 80062ca:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80062cc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80062ce:	b672      	cpsid	i
    return(int_posture);
 80062d0:	693b      	ldr	r3, [r7, #16]
    {

        /* Remove the first packet and process it!  */

        /* Disable interrupts.  */
        TX_DISABLE
 80062d2:	61fb      	str	r3, [r7, #28]

        /* Pickup the first packet.  */
        packet_ptr =  ip_ptr -> nx_ip_arp_deferred_received_packet_head;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 80062da:	61bb      	str	r3, [r7, #24]

        /* Move the head pointer to the next packet.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	69da      	ldr	r2, [r3, #28]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc

        /* Check for end of ARP deferred processing queue.  */
        if (ip_ptr -> nx_ip_arp_deferred_received_packet_head == NX_NULL)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d103      	bne.n	80062f8 <_nx_arp_queue_process+0x3e>
        {

            /* Yes, the ARP deferred queue is empty.  Set the tail pointer to NULL.  */
            ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  NX_NULL;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f383 8810 	msr	PRIMASK, r3
}
 8006302:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual ARP packet receive function.  */
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 8006304:	69b9      	ldr	r1, [r7, #24]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7ff fc0d 	bl	8005b26 <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1d6      	bne.n	80062c4 <_nx_arp_queue_process+0xa>
    }
}
 8006316:	bf00      	nop
 8006318:	bf00      	nop
 800631a:	3720      	adds	r7, #32
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <_nx_arp_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_send(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b090      	sub	sp, #64	; 0x40
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
NX_PACKET   *queued_list_head;
NX_PACKET   *packet_ptr;
NX_IP_DRIVER driver_request;

    /* Initialize the queued list head to NULL.  */
    queued_list_head =  NX_NULL;
 800632a:	2300      	movs	r3, #0
 800632c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800632e:	f3ef 8310 	mrs	r3, PRIMASK
 8006332:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8006336:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8006338:	b672      	cpsid	i
    return(int_posture);
 800633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Determine if this ARP entry has a packet queued up for sending.  */

    /* Disable interrupts before checking.  */
    TX_DISABLE
 800633c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Look at the ARP packet queue pointer.  */
    if (arp_ptr -> nx_arp_packets_waiting)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <_nx_arp_queue_send+0x32>
    {

        /* Pickup the packet pointer and clear the ARP queue pointer.  */
        queued_list_head =  arp_ptr -> nx_arp_packets_waiting;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	63fb      	str	r3, [r7, #60]	; 0x3c
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2200      	movs	r2, #0
 8006350:	631a      	str	r2, [r3, #48]	; 0x30
 8006352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006354:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	f383 8810 	msr	PRIMASK, r3
}
 800635c:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Are there any packets queued to send?  */
    while (queued_list_head)
 800635e:	e04c      	b.n	80063fa <_nx_arp_queue_send+0xda>
    {

        /* Pickup the first entry on the list.  */
        packet_ptr =  queued_list_head;
 8006360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006362:	637b      	str	r3, [r7, #52]	; 0x34

        /* Move to the next entry on the ARP packet queue.  */
        queued_list_head =  queued_list_head -> nx_packet_queue_next;
 8006364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the packet's queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800636a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636c:	2200      	movs	r2, #0
 800636e:	61da      	str	r2, [r3, #28]

        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006376:	631a      	str	r2, [r3, #48]	; 0x30

        /* Build the driver request packet.  */
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006382:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 8006388:	2300      	movs	r3, #0
 800638a:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet               =  packet_ptr;
 800638c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638e:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8006390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006394:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8006396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800639a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d915      	bls.n	80063d0 <_nx_arp_queue_send+0xb0>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Fragmentation is needed, call the fragment routine if available. */
            if (ip_ptr -> nx_ip_fragment_processing)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <_nx_arp_queue_send+0x9e>
            {

                /* Call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80063b4:	f107 0208 	add.w	r2, r7, #8
 80063b8:	4610      	mov	r0, r2
 80063ba:	4798      	blx	r3
 80063bc:	e01d      	b.n	80063fa <_nx_arp_queue_send+0xda>
#endif /* NX_DISABLE_FRAGMENTATION */

#ifndef NX_DISABLE_IP_INFO

                /* Increment the IP send packets dropped count.  */
                ip_ptr -> nx_ip_send_packets_dropped++;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
 80063c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80063ca:	f002 fd43 	bl	8008e54 <_nx_packet_transmit_release>
 80063ce:	e014      	b.n	80063fa <_nx_arp_queue_send+0xda>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	4413      	add	r3, r2
 80063e4:	f1a3 0214 	sub.w	r2, r3, #20
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	619a      	str	r2, [r3, #24]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_PACKET_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 80063ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f2:	f107 0208 	add.w	r2, r7, #8
 80063f6:	4610      	mov	r0, r2
 80063f8:	4798      	blx	r3
    while (queued_list_head)
 80063fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1af      	bne.n	8006360 <_nx_arp_queue_send+0x40>
        }
    }
}
 8006400:	bf00      	nop
 8006402:	bf00      	nop
 8006404:	3740      	adds	r7, #64	; 0x40
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <_nx_icmpv4_send_error_message>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv4_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b096      	sub	sp, #88	; 0x58
 800640e:	af04      	add	r7, sp, #16
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	607a      	str	r2, [r7, #4]
 8006416:	603b      	str	r3, [r7, #0]

NX_PACKET       *pkt_ptr;
USHORT           checksum;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT             compute_checksum = 1;
 8006418:	2301      	movs	r3, #1
 800641a:	647b      	str	r3, [r7, #68]	; 0x44
NX_ICMPV4_ERROR *icmpv4_error;
NX_IPV4_HEADER  *ip_header_ptr;
UINT             ip_header_size;
UINT             bytes_to_copy, i;
ULONG            src_ip;
ULONG            next_hop_address = NX_NULL;
 800641c:	2300      	movs	r3, #0
 800641e:	617b      	str	r3, [r7, #20]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv4 error message if ICMPv4 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 8113 	beq.w	8006652 <_nx_icmpv4_send_error_message+0x248>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(offending_packet -> nx_packet_ip_header);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006430:	633b      	str	r3, [r7, #48]	; 0x30
    src_ip = ip_header_ptr -> nx_ip_header_source_ip;
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the incoming interface. */
    if_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* An ICMP error message MUST NOT be sent as the result of receiving:
       RFC1122, Section3.2.2, Page39.  */

    /* A datagram destined to an IP broadcast or IP multicast address.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006446:	f000 8106 	beq.w	8006656 <_nx_icmpv4_send_error_message+0x24c>
        ((ip_header_ptr -> nx_ip_header_destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8006452:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8006456:	f000 80fe 	beq.w	8006656 <_nx_icmpv4_send_error_message+0x24c>
    {
        return;
    }

    /* A datagram sent as a link-layer broadcast.  */
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	401a      	ands	r2, r3
         if_ptr -> nx_interface_ip_network) &&
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	69db      	ldr	r3, [r3, #28]
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8006468:	429a      	cmp	r2, r3
 800646a:	d10b      	bne.n	8006484 <_nx_icmpv4_send_error_message+0x7a>
        ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	691a      	ldr	r2, [r3, #16]
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	43db      	mvns	r3, r3
 8006476:	401a      	ands	r2, r3
         ~(if_ptr -> nx_interface_ip_network_mask)))
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	43db      	mvns	r3, r3
         if_ptr -> nx_interface_ip_network) &&
 800647e:	429a      	cmp	r2, r3
 8006480:	f000 80eb 	beq.w	800665a <_nx_icmpv4_send_error_message+0x250>
    {
        return;
    }

    /* A non-initial fragment.  */
    if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_OFFSET_MASK)
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800648c:	2b00      	cmp	r3, #0
 800648e:	f040 80e6 	bne.w	800665e <_nx_icmpv4_send_error_message+0x254>
    }

    /* A datagram whose source address does not define a single host,
       e.g., a zero address, a loopback address, a broadcast address,
       a multicast address, or a Class E address.  */
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 80e3 	beq.w	8006662 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	68db      	ldr	r3, [r3, #12]
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 80064a0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80064a4:	d304      	bcc.n	80064b0 <_nx_icmpv4_send_error_message+0xa6>
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	68db      	ldr	r3, [r3, #12]
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f280 80d9 	bge.w	8006662 <_nx_icmpv4_send_error_message+0x258>
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	68db      	ldr	r3, [r3, #12]
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b8:	f000 80d3 	beq.w	8006662 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 80064c4:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80064c8:	f000 80cb 	beq.w	8006662 <_nx_icmpv4_send_error_message+0x258>
    {
        return;
    }

    /* Allocate a packet to build the ICMPv4 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv4_ICMP_PACKET, NX_NO_WAIT))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 80064d2:	f107 0118 	add.w	r1, r7, #24
 80064d6:	2300      	movs	r3, #0
 80064d8:	2224      	movs	r2, #36	; 0x24
 80064da:	f002 f8a1 	bl	8008620 <_nx_packet_allocate>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f040 80c0 	bne.w	8006666 <_nx_icmpv4_send_error_message+0x25c>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv4. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2204      	movs	r2, #4
 80064ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Size of the message is ICMPv4 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	0e1b      	lsrs	r3, r3, #24
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	701a      	strb	r2, [r3, #0]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	0c1b      	lsrs	r3, r3, #16
 8006502:	b2da      	uxtb	r2, r3
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	705a      	strb	r2, [r3, #1]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	2200      	movs	r2, #0
 800650c:	805a      	strh	r2, [r3, #2]
    icmpv4_error -> nx_icmpv4_error_pointer = (error_pointer << 24);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	061a      	lsls	r2, r3, #24
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	605a      	str	r2, [r3, #4]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	ba1a      	rev	r2, r3
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	605a      	str	r2, [r3, #4]

    /* IP Header + 64 bits (64 bits = 2 ULONGs) of Data Datagram.  */
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	0e1b      	lsrs	r3, r3, #24
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	623b      	str	r3, [r7, #32]
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	3302      	adds	r3, #2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the packet length and pointers.  The length will be increased to include
       the IPv4 header in the IP send function.  The Prepend function will be similarly
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006538:	3208      	adds	r2, #8
 800653a:	625a      	str	r2, [r3, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	6899      	ldr	r1, [r3, #8]
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	440a      	add	r2, r1
 8006548:	60da      	str	r2, [r3, #12]

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654e:	63bb      	str	r3, [r7, #56]	; 0x38

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv4_error, sizeof(NX_ICMPV4_ERROR));
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	3308      	adds	r3, #8
 8006554:	637b      	str	r3, [r7, #52]	; 0x34

    /* Endian swap the incoming IPv4 normal header to network byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8006556:	2300      	movs	r3, #0
 8006558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800655a:	e00a      	b.n	8006572 <_nx_icmpv4_send_error_message+0x168>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	ba1a      	rev	r2, r3
 8006562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006564:	601a      	str	r2, [r3, #0]
        src_packet++;
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	3304      	adds	r3, #4
 800656a:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 800656c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656e:	3301      	adds	r3, #1
 8006570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006574:	2b04      	cmp	r3, #4
 8006576:	d9f1      	bls.n	800655c <_nx_icmpv4_send_error_message+0x152>
    }

    /* Reset the packet pointer to the received packet IP header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Copy the data from the received packet to the ICMPv4 error packet. */
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 800657e:	e00a      	b.n	8006596 <_nx_icmpv4_send_error_message+0x18c>
    {

        *dest_packet++ = *src_packet++;
 8006580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006582:	1d13      	adds	r3, r2, #4
 8006584:	63bb      	str	r3, [r7, #56]	; 0x38
 8006586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006588:	1d19      	adds	r1, r3, #4
 800658a:	6379      	str	r1, [r7, #52]	; 0x34
 800658c:	6812      	ldr	r2, [r2, #0]
 800658e:	601a      	str	r2, [r3, #0]
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 8006590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006592:	3b04      	subs	r3, #4
 8006594:	643b      	str	r3, [r7, #64]	; 0x40
 8006596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1f1      	bne.n	8006580 <_nx_icmpv4_send_error_message+0x176>
    }

    /* Get the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Endian swap the IPv4 normal header back to host byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 80065a2:	2300      	movs	r3, #0
 80065a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a6:	e00a      	b.n	80065be <_nx_icmpv4_send_error_message+0x1b4>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 80065a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	ba1a      	rev	r2, r3
 80065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b0:	601a      	str	r2, [r3, #0]
        src_packet++;
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	3304      	adds	r3, #4
 80065b6:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 80065b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ba:	3301      	adds	r3, #1
 80065bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d9f1      	bls.n	80065a8 <_nx_icmpv4_send_error_message+0x19e>
    }

    /* Use the corresponding interface address as sender's address. */
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, src_ip,
                      &pkt_ptr -> nx_packet_address.nx_packet_interface_ptr,
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, src_ip,
 80065d2:	f107 0314 	add.w	r3, r7, #20
 80065d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f001 f961 	bl	80078a0 <_nx_ip_route_find>
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (pkt_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <_nx_icmpv4_send_error_message+0x1e6>
    {
        compute_checksum = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	647b      	str	r3, [r7, #68]	; 0x44
    {
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 80065f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d017      	beq.n	8006626 <_nx_icmpv4_send_error_message+0x21c>
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Compute the checksum of the ICMP packet.  */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 80065f6:	69b8      	ldr	r0, [r7, #24]
                                           (UINT)pkt_ptr -> nx_packet_length,
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 80065fc:	2300      	movs	r3, #0
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	2300      	movs	r3, #0
 8006602:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006606:	f000 f86d 	bl	80066e4 <_nx_ip_checksum_compute>
 800660a:	4603      	mov	r3, r0
 800660c:	83fb      	strh	r3, [r7, #30]
                                           /* ICMPV4 checksum does not include
                                              src/dest addresses */
                                           NX_NULL, NX_NULL);

        icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = (USHORT)(~checksum);
 800660e:	8bfb      	ldrh	r3, [r7, #30]
 8006610:	43db      	mvns	r3, r3
 8006612:	b29a      	uxth	r2, r3
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	805a      	strh	r2, [r3, #2]

        /* Swap to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	885b      	ldrh	r3, [r3, #2]
 800661c:	ba5b      	rev16	r3, r3
 800661e:	b29a      	uxth	r2, r3
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	805a      	strh	r2, [r3, #2]
 8006624:	e005      	b.n	8006632 <_nx_icmpv4_send_error_message+0x228>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006630:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Send the ICMP packet to the IP component. The time to live is set to 255.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, pkt_ptr, src_ip,
 8006632:	69b9      	ldr	r1, [r7, #24]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	9303      	str	r3, [sp, #12]
 8006638:	2300      	movs	r3, #0
 800663a:	9302      	str	r3, [sp, #8]
 800663c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	23ff      	movs	r3, #255	; 0xff
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	2300      	movs	r3, #0
 8006648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f001 f8b2 	bl	80077b4 <_nx_ip_packet_send>
                       NX_IP_NORMAL, 255, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);

    return;
 8006650:	e00a      	b.n	8006668 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006652:	bf00      	nop
 8006654:	e008      	b.n	8006668 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006656:	bf00      	nop
 8006658:	e006      	b.n	8006668 <_nx_icmpv4_send_error_message+0x25e>
        return;
 800665a:	bf00      	nop
 800665c:	e004      	b.n	8006668 <_nx_icmpv4_send_error_message+0x25e>
        return;
 800665e:	bf00      	nop
 8006660:	e002      	b.n	8006668 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006662:	bf00      	nop
 8006664:	e000      	b.n	8006668 <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006666:	bf00      	nop
}
 8006668:	3748      	adds	r7, #72	; 0x48
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <_nx_igmp_multicast_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_igmp_multicast_check(NX_IP *ip_ptr, ULONG group, NX_INTERFACE *nx_interface)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]

UINT i;

    /* Check for "all hosts" group.  We always assume all hosts membership.  */
    /*lint -e{835} -e{845} suppress operating on zero. */
    if (group ==  NX_ALL_HOSTS_ADDRESS)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <_nx_igmp_multicast_check+0x70>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d101      	bne.n	8006688 <_nx_igmp_multicast_check+0x18>
    {
        return(NX_TRUE);
 8006684:	2301      	movs	r3, #1
 8006686:	e025      	b.n	80066d4 <_nx_igmp_multicast_check+0x64>
    }

    /* Loop through the IP multicast join list to find the matching group that is being
       responded to by another host on this same network.  */

    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 8006688:	2300      	movs	r3, #0
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	e01e      	b.n	80066cc <_nx_igmp_multicast_check+0x5c>
    {

        /* Check for a match.  */
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 800668e:	68f9      	ldr	r1, [r7, #12]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	440b      	add	r3, r1
 800669c:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d10e      	bne.n	80066c6 <_nx_igmp_multicast_check+0x56>
            (nx_interface == ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_interface_list))
 80066a8:	68f9      	ldr	r1, [r7, #12]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	440b      	add	r3, r1
 80066b6:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80066ba:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d101      	bne.n	80066c6 <_nx_igmp_multicast_check+0x56>
        {
            return(NX_TRUE);
 80066c2:	2301      	movs	r3, #1
 80066c4:	e006      	b.n	80066d4 <_nx_igmp_multicast_check+0x64>
    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	3301      	adds	r3, #1
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2b06      	cmp	r3, #6
 80066d0:	d9dd      	bls.n	800668e <_nx_igmp_multicast_check+0x1e>
        }
    }

    /* Otherwise, we have searched the entire list, return false.  */
    return(NX_FALSE);
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	e0000001 	.word	0xe0000001

080066e4 <_nx_ip_checksum_compute>:
/*                                                                        */
/**************************************************************************/
USHORT  _nx_ip_checksum_compute(NX_PACKET *packet_ptr, ULONG protocol,
                                UINT data_length, ULONG *src_ip_addr,
                                ULONG *dest_ip_addr)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08e      	sub	sp, #56	; 0x38
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	603b      	str	r3, [r7, #0]

ULONG      checksum = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	637b      	str	r3, [r7, #52]	; 0x34
UINT       i;
#endif

    /* For computing TCP/UDP/ICMPv6, we need to include the pseudo header.
       The ICMPv4 checksum does not cover the pseudo header. */
    if ((protocol == NX_PROTOCOL_UDP) ||
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b11      	cmp	r3, #17
 80066fa:	d002      	beq.n	8006702 <_nx_ip_checksum_compute+0x1e>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b06      	cmp	r3, #6
 8006700:	d141      	bne.n	8006786 <_nx_ip_checksum_compute+0xa2>
        (protocol == NX_PROTOCOL_TCP))
    {

    USHORT *src_ip_short, *dest_ip_short;

        checksum = protocol;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	637b      	str	r3, [r7, #52]	; 0x34

        /* The addresses must not be null.  */
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <_nx_ip_checksum_compute+0x2e>
 800670c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800670e:	2b00      	cmp	r3, #0
 8006710:	d104      	bne.n	800671c <_nx_ip_checksum_compute+0x38>
 8006712:	f04f 30ff 	mov.w	r0, #4294967295
 8006716:	f006 fa09 	bl	800cb2c <_tx_thread_sleep>
 800671a:	e7fa      	b.n	8006712 <_nx_ip_checksum_compute+0x2e>

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        src_ip_short = (USHORT *)src_ip_addr;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	623b      	str	r3, [r7, #32]

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        dest_ip_short = (USHORT *)dest_ip_addr;
 8006720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006722:	61fb      	str	r3, [r7, #28]


        checksum += src_ip_short[0];
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	461a      	mov	r2, r3
 800672a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672c:	4413      	add	r3, r2
 800672e:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += src_ip_short[1];
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	3302      	adds	r3, #2
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673a:	4413      	add	r3, r2
 800673c:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[0];
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006746:	4413      	add	r3, r2
 8006748:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[1];
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	3302      	adds	r3, #2
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	461a      	mov	r2, r3
 8006752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006754:	4413      	add	r3, r2
 8006756:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif /* FEATURE_NX_IPV6 */

        /* Take care of data length */
        checksum += data_length;
 8006758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4413      	add	r3, r2
 800675e:	637b      	str	r3, [r7, #52]	; 0x34

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006762:	0c1a      	lsrs	r2, r3, #16
 8006764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006766:	b29b      	uxth	r3, r3
 8006768:	4413      	add	r3, r2
 800676a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800676c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676e:	0c1a      	lsrs	r2, r3, #16
 8006770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006772:	b29b      	uxth	r3, r3
 8006774:	4413      	add	r3, r2
 8006776:	637b      	str	r3, [r7, #52]	; 0x34

        /* Convert to network byte order. */
        tmp = (USHORT)checksum;
 8006778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677a:	837b      	strh	r3, [r7, #26]
        NX_CHANGE_USHORT_ENDIAN(tmp);
 800677c:	8b7b      	ldrh	r3, [r7, #26]
 800677e:	ba5b      	rev16	r3, r3
 8006780:	837b      	strh	r3, [r7, #26]
        checksum = tmp;
 8006782:	8b7b      	ldrh	r3, [r7, #26]
 8006784:	637b      	str	r3, [r7, #52]	; 0x34

    /* Now we need to go through the payloads */

    /* Setup the pointer to the start of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    long_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize the current packet to the input packet pointer.  */
    current_packet =  packet_ptr;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop the packet. */
    while (current_packet)
 8006790:	e058      	b.n	8006844 <_nx_ip_checksum_compute+0x160>
    {

        /* Calculate current packet size. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 8006792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	617b      	str	r3, [r7, #20]

        /* Calculate the end address in this packet. */
        if (data_length > (UINT)packet_size)
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d905      	bls.n	80067b2 <_nx_ip_checksum_compute+0xce>
        {

            /*lint -e{927} -e{923} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = ((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3);
 80067a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f023 0303 	bic.w	r3, r3, #3
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
 80067b0:	e006      	b.n	80067c0 <_nx_ip_checksum_compute+0xdc>
        }
        else
        {
#endif /* NX_DISABLE_PACKET_CHAIN */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr + data_length - 3;
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	461a      	mov	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4413      	add	r3, r2
 80067bc:	3b03      	subs	r3, #3
 80067be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Set the start address in this packet. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        long_ptr = (ULONG *)current_packet -> nx_packet_prepend_ptr;
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ALIGN_TYPE)long_ptr < end_ptr)
 80067c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d91c      	bls.n	8006808 <_nx_ip_checksum_compute+0x124>
        {

            /* Calculate the data_length. */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            data_length -= (UINT)(((end_ptr + 3) & (ALIGN_TYPE)(~3llu)) - (ALIGN_TYPE)long_ptr);
 80067ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	3303      	adds	r3, #3
 80067d4:	f023 0303 	bic.w	r3, r3, #3
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	4413      	add	r3, r2
 80067de:	607b      	str	r3, [r7, #4]

            /* Loop to calculate the packet's checksum.  */
            /*lint -e{946} suppress pointer subtraction, since it is necessary. */
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 80067e0:	e00e      	b.n	8006800 <_nx_ip_checksum_compute+0x11c>
            {
                checksum += (*long_ptr & NX_LOWER_16_MASK);
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067ea:	4413      	add	r3, r2
 80067ec:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	0c1b      	lsrs	r3, r3, #16
 80067f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067f6:	4413      	add	r3, r2
 80067f8:	637b      	str	r3, [r7, #52]	; 0x34
                long_ptr++;
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fc:	3304      	adds	r3, #4
 80067fe:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8006800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006804:	429a      	cmp	r2, r3
 8006806:	d8ec      	bhi.n	80067e2 <_nx_ip_checksum_compute+0xfe>
            }
        }
#ifndef NX_DISABLE_PACKET_CHAIN

        /* Determine if we are at the end of the current packet.  */
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d018      	beq.n	8006840 <_nx_ip_checksum_compute+0x15c>
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d014      	beq.n	8006840 <_nx_ip_checksum_compute+0x15c>
        {

            /* Is append_ptr two bytes aligned but not four bytes aligned? */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            if ((((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & 3) == 2)
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d10a      	bne.n	8006838 <_nx_ip_checksum_compute+0x154>
            {

                /* Yes it is. Process the last two bytes in chaining packets. */
                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                short_ptr = (USHORT *)long_ptr;
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006824:	633b      	str	r3, [r7, #48]	; 0x30

                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                checksum += *short_ptr;
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682e:	4413      	add	r3, r2
 8006830:	637b      	str	r3, [r7, #52]	; 0x34
                data_length -= 2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	3b02      	subs	r3, #2
 8006836:	607b      	str	r3, [r7, #4]
            }

            /* We have crossed the packet boundary.  Move to the next packet
               structure.  */
            current_packet =  current_packet -> nx_packet_next;
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	62bb      	str	r3, [r7, #40]	; 0x28
 800683e:	e001      	b.n	8006844 <_nx_ip_checksum_compute+0x160>
        }
        else
        {

            /* End the loop.  */
            current_packet = NX_NULL;
 8006840:	2300      	movs	r3, #0
 8006842:	62bb      	str	r3, [r7, #40]	; 0x28
    while (current_packet)
 8006844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1a3      	bne.n	8006792 <_nx_ip_checksum_compute+0xae>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if there is only one byte left. */
    if (data_length)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01f      	beq.n	8006890 <_nx_ip_checksum_compute+0x1ac>
    {

        /* Set the short_ptr. */
        short_ptr = (USHORT *)(long_ptr);
 8006850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006852:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the data length.  */
        if (data_length == 1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d104      	bne.n	8006864 <_nx_ip_checksum_compute+0x180>
        {
            *((UCHAR *)short_ptr + 1) = 0;
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	3301      	adds	r3, #1
 800685e:	2200      	movs	r2, #0
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	e00f      	b.n	8006884 <_nx_ip_checksum_compute+0x1a0>
        }
        else if (data_length == 3)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b03      	cmp	r3, #3
 8006868:	d10c      	bne.n	8006884 <_nx_ip_checksum_compute+0x1a0>
        {
            checksum += *short_ptr;
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006872:	4413      	add	r3, r2
 8006874:	637b      	str	r3, [r7, #52]	; 0x34
            short_ptr++;
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	3302      	adds	r3, #2
 800687a:	633b      	str	r3, [r7, #48]	; 0x30

            *((UCHAR *)short_ptr + 1) = 0;
 800687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687e:	3301      	adds	r3, #1
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
        }

        checksum += *short_ptr;
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	461a      	mov	r2, r3
 800688a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688c:	4413      	add	r3, r2
 800688e:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Fold a 4-byte value into a two byte value */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006892:	0c1a      	lsrs	r2, r3, #16
 8006894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006896:	b29b      	uxth	r3, r3
 8006898:	4413      	add	r3, r2
 800689a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Do it again in case previous operation generates an overflow */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800689c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689e:	0c1a      	lsrs	r2, r3, #16
 80068a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	4413      	add	r3, r2
 80068a6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Convert to host byte order. */
    tmp = (USHORT)checksum;
 80068a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068aa:	837b      	strh	r3, [r7, #26]
    NX_CHANGE_USHORT_ENDIAN(tmp);
 80068ac:	8b7b      	ldrh	r3, [r7, #26]
 80068ae:	ba5b      	rev16	r3, r3
 80068b0:	837b      	strh	r3, [r7, #26]

    /* Return the computed checksum.  */
    return(tmp);
 80068b2:	8b7b      	ldrh	r3, [r7, #26]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3738      	adds	r7, #56	; 0x38
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <_nx_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                    NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                    VOID *memory_ptr, ULONG memory_size, UINT priority)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b092      	sub	sp, #72	; 0x48
 80068c0:	af06      	add	r7, sp, #24
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	603b      	str	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_IP     *tail_ptr;
UINT       i;
UINT       old_threshold = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	613b      	str	r3, [r7, #16]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);
#endif /* NX_DISABLE_IPV4 */

    /* Reference the version ID and option words to ensure they are linked in.  */
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 80068ce:	4b8a      	ldr	r3, [pc, #552]	; (8006af8 <_nx_ip_create+0x23c>)
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	4b8a      	ldr	r3, [pc, #552]	; (8006afc <_nx_ip_create+0x240>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	431a      	orrs	r2, r3
 80068d8:	4b89      	ldr	r3, [pc, #548]	; (8006b00 <_nx_ip_create+0x244>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 80068de:	4b89      	ldr	r3, [pc, #548]	; (8006b04 <_nx_ip_create+0x248>)
 80068e0:	681b      	ldr	r3, [r3, #0]
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 80068e2:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 80068e4:	4b88      	ldr	r3, [pc, #544]	; (8006b08 <_nx_ip_create+0x24c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	4a88      	ldr	r2, [pc, #544]	; (8006b0c <_nx_ip_create+0x250>)
 80068ec:	7812      	ldrb	r2, [r2, #0]
 80068ee:	4313      	orrs	r3, r2
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <_nx_ip_create+0x3c>
    {

        /* We should never get here!  */
        return(NX_NOT_IMPLEMENTED);
 80068f4:	234a      	movs	r3, #74	; 0x4a
 80068f6:	e0fb      	b.n	8006af0 <_nx_ip_create+0x234>
    }

    /* Initialize the IP control block to zero.  */
    memset((void *)ip_ptr, 0, sizeof(NX_IP));
 80068f8:	f44f 62f9 	mov.w	r2, #1992	; 0x7c8
 80068fc:	2100      	movs	r1, #0
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f007 fcfa 	bl	800e2f8 <memset>

    /* Configure the primary interface. */
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724

#ifndef NX_DISABLE_IPV4
    /* Save the IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address =   ip_address;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734

    /* Save the network mask.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	f8c3 2738 	str.w	r2, [r3, #1848]	; 0x738

    /* Derive the network bits of this IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	401a      	ands	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_arp_defend_timeout = 0;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
#endif /* !NX_DISABLE_IPV4  */

    /* Setup the link driver address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006934:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c

    /* Set the device interface name to "PRI". */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4a75      	ldr	r2, [pc, #468]	; (8006b10 <_nx_ip_create+0x254>)
 800693c:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720

    /* Set index of each interface. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8006940:	2300      	movs	r3, #0
 8006942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006944:	e00f      	b.n	8006966 <_nx_ip_create+0xaa>
    {
        ip_ptr -> nx_ip_interface[i].nx_interface_index = (UCHAR)i;
 8006946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006948:	b2d8      	uxtb	r0, r3
 800694a:	68f9      	ldr	r1, [r7, #12]
 800694c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	440b      	add	r3, r1
 8006958:	f203 7327 	addw	r3, r3, #1831	; 0x727
 800695c:	4602      	mov	r2, r0
 800695e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8006960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006962:	3301      	adds	r3, #1
 8006964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006968:	2b01      	cmp	r3, #1
 800696a:	d9ec      	bls.n	8006946 <_nx_ip_create+0x8a>

#ifndef NX_DISABLE_LOOPBACK_INTERFACE

    /* Set the Loopback interface name. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4a69      	ldr	r2, [pc, #420]	; (8006b14 <_nx_ip_create+0x258>)
 8006970:	f8c3 2770 	str.w	r2, [r3, #1904]	; 0x770


    /* Mark the loopback interface as valid. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774

#ifndef NX_DISABLE_IPV4
    /* Set the loopback interface address. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4a66      	ldr	r2, [pc, #408]	; (8006b18 <_nx_ip_create+0x25c>)
 8006980:	f8c3 2784 	str.w	r2, [r3, #1924]	; 0x784
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800698a:	f8c3 2788 	str.w	r2, [r3, #1928]	; 0x788
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f04f 42fe 	mov.w	r2, #2130706432	; 0x7f000000
 8006994:	f8c3 278c 	str.w	r2, [r3, #1932]	; 0x78c
#endif /* !NX_DISABLE_IPV4  */

    /* Loopback interface is a special case. Therefore no dedicated link driver needed. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_driver_entry = NX_NULL;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c3 27ac 	str.w	r2, [r3, #1964]	; 0x7ac

    /* Loopback interface does not need IP/MAC address mapping. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_address_mapping_needed = 0;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2775 	strb.w	r2, [r3, #1909]	; 0x775

    /* There is actually no MTU limit for the loopback interface. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069ae:	f8c3 2794 	str.w	r2, [r3, #1940]	; 0x794

    /* Mark the loopback interface as LINK UP */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_up = 1;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776

    /* Set all the link capability. */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_capability_flag = (NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM |
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80069c0:	f8c3 27b0 	str.w	r2, [r3, #1968]	; 0x7b0
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#endif /* !NX_DISABLE_LOOPBACK_INTERFACE */

    /* Save the supplied IP name.  */
    ip_ptr -> nx_ip_name =  name;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	605a      	str	r2, [r3, #4]

    /* Set the initial IP packet ID.  */
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    /* Setup the default packet pool for this IP instance.  */
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069d6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    /* Setup the auxiliary packet pool for this IP instance. By default it pointers to default pool. */
    ip_ptr -> nx_ip_auxiliary_packet_pool = default_pool;
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Create the internal IP protection mutex.  */
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80069e0:	2200      	movs	r2, #0
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f005 f999 	bl	800bd1c <_tx_mutex_create>

    /* Create the internal IP event flag object.  */
    tx_event_flags_create(&(ip_ptr -> nx_ip_events), name);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f004 fd1c 	bl	800b430 <_tx_event_flags_create>

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 80069f8:	f005 ff7e 	bl	800c8f8 <_tx_thread_identify>
 80069fc:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Disable preemption temporarily.  */
    if (current_thread)
 80069fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d006      	beq.n	8006a12 <_nx_ip_create+0x156>
    {
        tx_thread_preemption_change(current_thread, priority, &old_threshold);
 8006a04:	f107 0310 	add.w	r3, r7, #16
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a0e:	f005 ffcd 	bl	800c9ac <_tx_thread_preemption_change>
    }

    /* Create the internal IP thread for handling more processing intensive
       duties.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_thread_create(&(ip_ptr -> nx_ip_thread), name, _nx_ip_thread_entry, (ULONG)(ALIGN_TYPE)(ip_ptr),
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	9305      	str	r3, [sp, #20]
 8006a1e:	2301      	movs	r3, #1
 8006a20:	9304      	str	r3, [sp, #16]
 8006a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a24:	9303      	str	r3, [sp, #12]
 8006a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a28:	9302      	str	r3, [sp, #8]
 8006a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	4613      	mov	r3, r2
 8006a34:	4a39      	ldr	r2, [pc, #228]	; (8006b1c <_nx_ip_create+0x260>)
 8006a36:	68b9      	ldr	r1, [r7, #8]
 8006a38:	f005 fe68 	bl	800c70c <_tx_thread_create>

    NX_THREAD_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_thread), ip_ptr)

    /* Create the periodic timer for this IP instance.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_periodic_timer), name,
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2201      	movs	r2, #1
 8006a46:	9202      	str	r2, [sp, #8]
 8006a48:	2264      	movs	r2, #100	; 0x64
 8006a4a:	9201      	str	r2, [sp, #4]
 8006a4c:	2264      	movs	r2, #100	; 0x64
 8006a4e:	9200      	str	r2, [sp, #0]
 8006a50:	4a33      	ldr	r2, [pc, #204]	; (8006b20 <_nx_ip_create+0x264>)
 8006a52:	68b9      	ldr	r1, [r7, #8]
 8006a54:	f006 fbca 	bl	800d1ec <_tx_timer_create>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_CREATE, ip_ptr, ip_address, network_mask, default_pool, NX_TRACE_IP_EVENTS, 0, 0);

#ifndef NX_DISABLE_IPV4
    /* Install IPv4 packet receive processing function pointer */
    ip_ptr -> nx_ipv4_packet_receive = _nx_ipv4_packet_receive;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4a32      	ldr	r2, [pc, #200]	; (8006b24 <_nx_ip_create+0x268>)
 8006a5c:	f8c3 27c0 	str.w	r2, [r3, #1984]	; 0x7c0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006a60:	f3ef 8310 	mrs	r3, PRIMASK
 8006a64:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006a66:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006a68:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006a6a:	b672      	cpsid	i
    return(int_posture);
 8006a6c:	69bb      	ldr	r3, [r7, #24]
#endif

    /* Otherwise, the IP initialization was successful.  Place the
       IP control block on the list of created IP instances.  */
    TX_DISABLE
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the IP ID field in the IP control block.  */
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4a2d      	ldr	r2, [pc, #180]	; (8006b28 <_nx_ip_create+0x26c>)
 8006a74:	601a      	str	r2, [r3, #0]

    /* Place the new IP control block on the list of created IPs.  First,
       check for an empty list.  */
    if (_nx_ip_created_ptr)
 8006a76:	4b2d      	ldr	r3, [pc, #180]	; (8006b2c <_nx_ip_create+0x270>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d017      	beq.n	8006aae <_nx_ip_create+0x1f2>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_ip_created_ptr -> nx_ip_created_previous;
 8006a7e:	4b2b      	ldr	r3, [pc, #172]	; (8006b2c <_nx_ip_create+0x270>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8006a86:	623b      	str	r3, [r7, #32]

        /* Place the new IP control block in the list.  */
        _nx_ip_created_ptr -> nx_ip_created_previous =  ip_ptr;
 8006a88:	4b28      	ldr	r3, [pc, #160]	; (8006b2c <_nx_ip_create+0x270>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        tail_ptr -> nx_ip_created_next =  ip_ptr;
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710

        /* Setup this IP's created links.  */
        ip_ptr -> nx_ip_created_previous =  tail_ptr;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a3a      	ldr	r2, [r7, #32]
 8006a9e:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        ip_ptr -> nx_ip_created_next =      _nx_ip_created_ptr;
 8006aa2:	4b22      	ldr	r3, [pc, #136]	; (8006b2c <_nx_ip_create+0x270>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
 8006aac:	e00a      	b.n	8006ac4 <_nx_ip_create+0x208>
    }
    else
    {

        /* The created IP list is empty.  Add IP control block to empty list.  */
        _nx_ip_created_ptr =                ip_ptr;
 8006aae:	4a1f      	ldr	r2, [pc, #124]	; (8006b2c <_nx_ip_create+0x270>)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6013      	str	r3, [r2, #0]
        ip_ptr -> nx_ip_created_next =      ip_ptr;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
    }

    /* Increment the created IP counter.  */
    _nx_ip_created_count++;
 8006ac4:	4b1a      	ldr	r3, [pc, #104]	; (8006b30 <_nx_ip_create+0x274>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	4a19      	ldr	r2, [pc, #100]	; (8006b30 <_nx_ip_create+0x274>)
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f383 8810 	msr	PRIMASK, r3
}
 8006ad8:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Restore preemption.  */
    if (current_thread)
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d006      	beq.n	8006aee <_nx_ip_create+0x232>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized in previous tx_thread_preemption_change call. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f107 0210 	add.w	r2, r7, #16
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aea:	f005 ff5f 	bl	800c9ac <_tx_thread_preemption_change>
    }

    /* Return success to the caller.  */
    return(NX_SUCCESS);
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3730      	adds	r7, #48	; 0x30
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20014838 	.word	0x20014838
 8006afc:	2001483c 	.word	0x2001483c
 8006b00:	20014840 	.word	0x20014840
 8006b04:	20014844 	.word	0x20014844
 8006b08:	20014848 	.word	0x20014848
 8006b0c:	20000020 	.word	0x20000020
 8006b10:	0800ef84 	.word	0x0800ef84
 8006b14:	0800ef88 	.word	0x0800ef88
 8006b18:	7f000001 	.word	0x7f000001
 8006b1c:	08007b9d 	.word	0x08007b9d
 8006b20:	0800787d 	.word	0x0800787d
 8006b24:	0800815d 	.word	0x0800815d
 8006b28:	49502020 	.word	0x49502020
 8006b2c:	20014828 	.word	0x20014828
 8006b30:	2001482c 	.word	0x2001482c

08006b34 <_nx_ip_deferred_link_status_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_deferred_link_status_process(NX_IP *ip_ptr)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08c      	sub	sp, #48	; 0x30
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]

UINT         i;
NX_IP_DRIVER driver_request;
ULONG        link_up;

    if (ip_ptr -> nx_ip_link_status_change_callback == NX_NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d052      	beq.n	8006bec <_nx_ip_deferred_link_status_process+0xb8>

        /* Callback function is not set. */
        return;
    }

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8006b46:	2300      	movs	r3, #0
 8006b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b4a:	e04b      	b.n	8006be4 <_nx_ip_deferred_link_status_process+0xb0>
    {
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8006b4c:	6879      	ldr	r1, [r7, #4]
 8006b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	440b      	add	r3, r1
 8006b5a:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d03c      	beq.n	8006bde <_nx_ip_deferred_link_status_process+0xaa>
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change))
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	440b      	add	r3, r1
 8006b72:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8006b76:	781b      	ldrb	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d030      	beq.n	8006bde <_nx_ip_deferred_link_status_process+0xaa>
        {

            /* Reset the flag. */
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	440b      	add	r3, r1
 8006b8a:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8006b8e:	2200      	movs	r2, #0
 8006b90:	701a      	strb	r2, [r3, #0]

            driver_request.nx_ip_driver_ptr       = ip_ptr;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 8006b96:	230a      	movs	r3, #10
 8006b98:	60fb      	str	r3, [r7, #12]
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 8006b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	4413      	add	r3, r2
 8006bac:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_return_ptr = &link_up;
 8006bae:	f107 0308 	add.w	r3, r7, #8
 8006bb2:	623b      	str	r3, [r7, #32]

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bb8:	4613      	mov	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	440b      	add	r3, r1
 8006bc2:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f107 020c 	add.w	r2, r7, #12
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4798      	blx	r3

            /* Invoke the callback function. */
            /*lint -e{644} suppress variable might not be initialized, since "link_up" was initialized in nx_interface_link_driver_entry. */
            ip_ptr -> nx_ip_link_status_change_callback(ip_ptr, i, link_up);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	3301      	adds	r3, #1
 8006be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0b0      	beq.n	8006b4c <_nx_ip_deferred_link_status_process+0x18>
 8006bea:	e000      	b.n	8006bee <_nx_ip_deferred_link_status_process+0xba>
        return;
 8006bec:	bf00      	nop
        }
    }
}
 8006bee:	3730      	adds	r7, #48	; 0x30
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <_nx_ip_dispatch_process>:
/*                                            packet,                     */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT _nx_ip_dispatch_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UINT protocol)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
#endif /* FEATURE_NX_IPV6 */
#endif /* NX_IPSEC_ENABLE */


    /* Initialize local variables. */
    drop_packet = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	617b      	str	r3, [r7, #20]
    next_option_offset = (UINT)sizeof(NX_IPV6_HEADER);
    incoming_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
#endif /* FEATURE_NX_IPV6 */

    /* Parse all options in the packet till we're done or an error is encountered. */
    while (!drop_packet)
 8006c04:	e09a      	b.n	8006d3c <_nx_ip_dispatch_process+0x148>

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* Set a local variable for convenience. */
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
#endif /* defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE) */
        switch (protocol)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b32      	cmp	r3, #50	; 0x32
 8006c0a:	d005      	beq.n	8006c18 <_nx_ip_dispatch_process+0x24>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b33      	cmp	r3, #51	; 0x33
 8006c10:	d104      	bne.n	8006c1c <_nx_ip_dispatch_process+0x28>
                /* Continue processing the packet if status = NX_IPSEC_PKT_CONT */
            }
#else /* NX_IPSEC_ENABLE */

            /* Drop this packet if IPsec module is not present. */
            drop_packet = 1;
 8006c12:	2301      	movs	r3, #1
 8006c14:	617b      	str	r3, [r7, #20]
#endif /* NX_IPSEC_ENABLE */

            break;
 8006c16:	e07d      	b.n	8006d14 <_nx_ip_dispatch_process+0x120>
            }
            break;

#else /* NX_IPSEC_ENABLE */
            /* Drop this packet if IPsec module is not present. */
            return(1);
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e094      	b.n	8006d46 <_nx_ip_dispatch_process+0x152>
                    return(0);
                }
            }
#endif /* defined(NX_ENABLE_IP_RAW_PACKET_ALL_STACK) && defined(NX_ENABLE_IP_RAW_PACKET_FILTER) */

            if (protocol == NX_PROTOCOL_TCP)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b06      	cmp	r3, #6
 8006c20:	d10f      	bne.n	8006c42 <_nx_ip_dispatch_process+0x4e>
                     (incoming_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)))
                {
#endif /* FEATURE_NX_IPV6 */

                    /* Check that the host is enabled for TCP. */
                    if (ip_ptr -> nx_ip_tcp_packet_receive)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d007      	beq.n	8006c3c <_nx_ip_dispatch_process+0x48>
                    {

                        /* Dispatch the packet to the TCP packet handler. */
                        (ip_ptr -> nx_ip_tcp_packet_receive)(ip_ptr, packet_ptr);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	4798      	blx	r3

                        /* No need to free the packet as it is consumed by TCP packet receive.  */
                        return(0);
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e084      	b.n	8006d46 <_nx_ip_dispatch_process+0x152>
#ifdef FEATURE_NX_IPV6
                }
#endif /* FEATURE_NX_IPV6 */

                /* TCP is not enabled.  Drop the packet. */
                drop_packet = 1;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	617b      	str	r3, [r7, #20]
#endif /* NX_DISABLE_IP_INFO */


                drop_packet = 1;
            }
            break;
 8006c40:	e067      	b.n	8006d12 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d112      	bne.n	8006c72 <_nx_ip_dispatch_process+0x7e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d10f      	bne.n	8006c72 <_nx_ip_dispatch_process+0x7e>
                if (ip_ptr -> nx_ip_icmp_packet_receive != NX_NULL)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d007      	beq.n	8006c6c <_nx_ip_dispatch_process+0x78>
                    ip_ptr -> nx_ip_icmp_packet_receive(ip_ptr, packet_ptr);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	4798      	blx	r3
                    return(0);
 8006c68:	2300      	movs	r3, #0
 8006c6a:	e06c      	b.n	8006d46 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	e04f      	b.n	8006d12 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d112      	bne.n	8006ca2 <_nx_ip_dispatch_process+0xae>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d10f      	bne.n	8006ca2 <_nx_ip_dispatch_process+0xae>
                if (ip_ptr -> nx_ip_igmp_packet_receive != NX_NULL)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d007      	beq.n	8006c9c <_nx_ip_dispatch_process+0xa8>
                    ip_ptr -> nx_ip_igmp_packet_receive(ip_ptr, packet_ptr);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	4798      	blx	r3
                    return(0);
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e054      	b.n	8006d46 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	e037      	b.n	8006d12 <_nx_ip_dispatch_process+0x11e>
            else if (protocol == NX_PROTOCOL_UDP)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b11      	cmp	r3, #17
 8006ca6:	d10f      	bne.n	8006cc8 <_nx_ip_dispatch_process+0xd4>
                    if (ip_ptr -> nx_ip_udp_packet_receive)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d007      	beq.n	8006cc2 <_nx_ip_dispatch_process+0xce>
                        (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8006cb8:	68b9      	ldr	r1, [r7, #8]
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	4798      	blx	r3
                        return(0);
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e041      	b.n	8006d46 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	617b      	str	r3, [r7, #20]
            break;
 8006cc6:	e024      	b.n	8006d12 <_nx_ip_dispatch_process+0x11e>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00c      	beq.n	8006cec <_nx_ip_dispatch_process+0xf8>
                        if ((ip_ptr -> nx_ip_raw_ip_processing)(ip_ptr, protocol << 16, packet_ptr) == NX_SUCCESS)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	0411      	lsls	r1, r2, #16
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	4798      	blx	r3
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <_nx_ip_dispatch_process+0xf8>
                            return(0);
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e02c      	b.n	8006d46 <_nx_ip_dispatch_process+0x152>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d105      	bne.n	8006d02 <_nx_ip_dispatch_process+0x10e>
                    NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PROTOCOL_UNREACH_CODE);
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	4a15      	ldr	r2, [pc, #84]	; (8006d50 <_nx_ip_dispatch_process+0x15c>)
 8006cfa:	68b9      	ldr	r1, [r7, #8]
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff fb84 	bl	800640a <_nx_icmpv4_send_error_message>
                ip_ptr -> nx_ip_unknown_protocols_received++;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	641a      	str	r2, [r3, #64]	; 0x40
                drop_packet = 1;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	617b      	str	r3, [r7, #20]
            break;
 8006d10:	e7ff      	b.n	8006d12 <_nx_ip_dispatch_process+0x11e>
 8006d12:	bf00      	nop
        }


        /* If the previous header is processed without errors, move on to the next optional
           header. */
        if (!drop_packet)
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d010      	beq.n	8006d3c <_nx_ip_dispatch_process+0x148>
        else
        {
#ifndef NX_DISABLE_IP_INFO

            /* Decrement the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	1e5a      	subs	r2, r3, #1
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	621a      	str	r2, [r3, #32]

            /* Decrement the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	1ad2      	subs	r2, r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	625a      	str	r2, [r3, #36]	; 0x24

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	64da      	str	r2, [r3, #76]	; 0x4c
    while (!drop_packet)
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f43f af61 	beq.w	8006c06 <_nx_ip_dispatch_process+0x12>
#endif /* NX_DISABLE_IP_INFO */
        }
    }

    return(drop_packet);
 8006d44:	697b      	ldr	r3, [r7, #20]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	03020000 	.word	0x03020000

08006d54 <_nx_ip_driver_deferred_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_deferred_processing(NX_IP *ip_ptr)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]

    /* Set event flags to wake the IP helper thread, which will in turn
       call the driver with the NX_LINK_DEFERRED_PROCESSING command.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_DRIVER_DEFERRED_EVENT, TX_OR);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006d62:	2200      	movs	r2, #0
 8006d64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f004 fc99 	bl	800b6a0 <_tx_event_flags_set>
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <_nx_ip_driver_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip, ULONG fragment, ULONG next_hop_address)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b09e      	sub	sp, #120	; 0x78
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_IP_DRIVER driver_request;
UINT         index;
ULONG        network_mask;
ULONG        network;
UCHAR        loopback = NX_FALSE;
 8006d84:	2300      	movs	r3, #0
 8006d86:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	633b      	str	r3, [r7, #48]	; 0x30
    driver_request.nx_ip_driver_packet =                packet_ptr;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	637b      	str	r3, [r7, #52]	; 0x34
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	61bb      	str	r3, [r7, #24]

    /* Determine if physical mapping is needed by the link driver.  */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_address_mapping_needed)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	795b      	ldrb	r3, [r3, #5]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8174 	beq.w	8007090 <_nx_ip_driver_packet_send+0x31a>
    {

        /* Get the network and network mask.*/
        network_mask = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network_mask;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	65fb      	str	r3, [r7, #92]	; 0x5c
        network = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Determine if an IP limited or directed broadcast is requested.  */
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dbe:	d00d      	beq.n	8006ddc <_nx_ip_driver_packet_send+0x66>
            (((destination_ip & network_mask) == network) &&
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dc4:	4013      	ands	r3, r2
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8006dc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d110      	bne.n	8006dee <_nx_ip_driver_packet_send+0x78>
             ((destination_ip & ~network_mask) == ~network_mask)))
 8006dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dce:	43da      	mvns	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	401a      	ands	r2, r3
 8006dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dd6:	43db      	mvns	r3, r3
            (((destination_ip & network_mask) == network) &&
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d108      	bne.n	8006dee <_nx_ip_driver_packet_send+0x78>
        {

            /* Build the driver request.  */
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 8006ddc:	2304      	movs	r3, #4
 8006dde:	61bb      	str	r3, [r7, #24]
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8006de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006de4:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8006de6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
 8006dec:	e162      	b.n	80070b4 <_nx_ip_driver_packet_send+0x33e>
        }
        /* Determine if we have a loopback address.  */
        else if (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d105      	bne.n	8006e06 <_nx_ip_driver_packet_send+0x90>
        {
            loopback = NX_TRUE;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 8006e00:	2300      	movs	r3, #0
 8006e02:	637b      	str	r3, [r7, #52]	; 0x34
 8006e04:	e156      	b.n	80070b4 <_nx_ip_driver_packet_send+0x33e>
        }
        /* Determine if we have a class D multicast address.  */
        else if ((destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e0c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8006e10:	d133      	bne.n	8006e7a <_nx_ip_driver_packet_send+0x104>

            /* Yes, we have a class D multicast address.  Derive the physical mapping from
               the class D address.  */

            /* Determine if the group address has been joined in this IP instance.  */
            index =  0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 8006e16:	e00f      	b.n	8006e38 <_nx_ip_driver_packet_send+0xc2>
            {

                /* Determine if the destination address matches the requested address.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_join_list == destination_ip)
 8006e18:	68f9      	ldr	r1, [r7, #12]
 8006e1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	440b      	add	r3, r1
 8006e26:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d006      	beq.n	8006e40 <_nx_ip_driver_packet_send+0xca>
                    /* Yes, break the loop!  */
                    break;
                }

                /* Increment the join list index.  */
                index++;
 8006e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e34:	3301      	adds	r3, #1
 8006e36:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 8006e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e3a:	2b06      	cmp	r3, #6
 8006e3c:	d9ec      	bls.n	8006e18 <_nx_ip_driver_packet_send+0xa2>
 8006e3e:	e000      	b.n	8006e42 <_nx_ip_driver_packet_send+0xcc>
                    break;
 8006e40:	bf00      	nop
            }

            /* Determine if the group was joined by this IP instance.  */
            if (index < NX_MAX_MULTICAST_GROUPS)
 8006e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e44:	2b06      	cmp	r3, #6
 8006e46:	d80e      	bhi.n	8006e66 <_nx_ip_driver_packet_send+0xf0>
            {

                /* Determine if the group has loopback enabled.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_loopback_enable)
 8006e48:	68f9      	ldr	r1, [r7, #12]
 8006e4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	440b      	add	r3, r1
 8006e56:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <_nx_ip_driver_packet_send+0xf0>
                {
                    loopback = NX_TRUE;
 8006e60:	2301      	movs	r3, #1
 8006e62:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                }
            }

            /* Build the driver request. Derive the physical mapping from
               the class D address.  */
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 8006e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e6a:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006e72:	f043 43bc 	orr.w	r3, r3, #1577058304	; 0x5e000000
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
 8006e78:	e11c      	b.n	80070b4 <_nx_ip_driver_packet_send+0x33e>

            NX_PARAMETER_NOT_USED(fragment);
            /* Look into the ARP Routing Table to derive the physical address.  */

            /* If we get here, the packet destination is a unicast address.  */
            destination_ip = next_hop_address;
 8006e7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e7e:	607b      	str	r3, [r7, #4]

            /* Calculate the hash index for the destination IP address.  */
            index =  (UINT)((destination_ip + (destination_ip >> 8)) & NX_ARP_TABLE_MASK);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	0a1a      	lsrs	r2, r3, #8
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4413      	add	r3, r2
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	677b      	str	r3, [r7, #116]	; 0x74

            /* Determine if there is an entry for this IP address.  */
            arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006e92:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8006e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9a:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Loop to look for an ARP match.  */
            while (arp_ptr)
 8006e9c:	e013      	b.n	8006ec6 <_nx_ip_driver_packet_send+0x150>
            {

                /* Determine if this arp entry matches the destination IP address.  */
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 8006e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d012      	beq.n	8006ece <_nx_ip_driver_packet_send+0x158>
                    /* Yes, we found a match.  Get out of the loop!  */
                    break;
                }

                /* Move to the next active ARP entry.  */
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 8006ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Determine if we are at the end of the ARP list.  */
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006eb2:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8006eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d102      	bne.n	8006ec6 <_nx_ip_driver_packet_send+0x150>
                {
                    /* Clear the ARP pointer.  */
                    arp_ptr =  NX_NULL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	66fb      	str	r3, [r7, #108]	; 0x6c
                    break;
 8006ec4:	e004      	b.n	8006ed0 <_nx_ip_driver_packet_send+0x15a>
            while (arp_ptr)
 8006ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e8      	bne.n	8006e9e <_nx_ip_driver_packet_send+0x128>
 8006ecc:	e000      	b.n	8006ed0 <_nx_ip_driver_packet_send+0x15a>
                    break;
 8006ece:	bf00      	nop
                }
            }

            /* Determine if we actually found a matching and effective ARP entry.  */
            if ((arp_ptr) && (arp_ptr -> nx_arp_physical_address_msw | arp_ptr -> nx_arp_physical_address_lsw))
 8006ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d022      	beq.n	8006f1c <_nx_ip_driver_packet_send+0x1a6>
 8006ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01b      	beq.n	8006f1c <_nx_ip_driver_packet_send+0x1a6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8006eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8006eec:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8006eee:	b672      	cpsid	i
    return(int_posture);
 8006ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
            {

                /* Disable interrupts temporarily.  */
                TX_DISABLE
 8006ef2:	657b      	str	r3, [r7, #84]	; 0x54

                /* Yes, we have a physical mapping.  Copy the physical address into the driver
                   request structure.  */
                driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 8006ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	623b      	str	r3, [r7, #32]
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 8006efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24

                /* Move this ARP entry to the head of the list.  */
                ip_ptr -> nx_ip_arp_table[index] =  arp_ptr;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006f04:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8006f08:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f10:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f14:	f383 8810 	msr	PRIMASK, r3
}
 8006f18:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE
 8006f1a:	e0cb      	b.n	80070b4 <_nx_ip_driver_packet_send+0x33e>
            }
            else
            {

                /* Determine if fragmentation is needed before queue the packet on the ARP waiting queue.  */
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d910      	bls.n	8006f4c <_nx_ip_driver_packet_send+0x1d6>
                {

#ifndef NX_DISABLE_FRAGMENTATION
                    /* Check the DF bit flag.  */
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <_nx_ip_driver_packet_send+0x1c4>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d008      	beq.n	8006f4c <_nx_ip_driver_packet_send+0x1d6>
                    {

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	655a      	str	r2, [r3, #84]	; 0x54
#endif
                        /* Just release the packet.  */
                        _nx_packet_transmit_release(packet_ptr);
 8006f44:	68b8      	ldr	r0, [r7, #8]
 8006f46:	f001 ff85 	bl	8008e54 <_nx_packet_transmit_release>

                        /* Return... nothing more can be done!  */
                        return;
 8006f4a:	e132      	b.n	80071b2 <_nx_ip_driver_packet_send+0x43c>
                    }
                }

                /* Determine if we actually found a matching ARP entry.  */
                if (arp_ptr)
 8006f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d052      	beq.n	8006ff8 <_nx_ip_driver_packet_send+0x282>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006f52:	f3ef 8310 	mrs	r3, PRIMASK
 8006f56:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 8006f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    int_posture = __get_interrupt_posture();
 8006f5a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 8006f5c:	b672      	cpsid	i
    return(int_posture);
 8006f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                {

                    /* Yes, we have an existing ARP mapping entry.  */

                    /* Disable interrupts temporarily.  */
                    TX_DISABLE
 8006f60:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Ensure the current packet's queue next pointer to NULL.  */
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2200      	movs	r2, #0
 8006f66:	61da      	str	r2, [r3, #28]

                    /* Determine if the queue is empty.  */
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 8006f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d109      	bne.n	8006f84 <_nx_ip_driver_packet_send+0x20e>
                    {

                        /* Yes, we have an empty ARP packet queue.  Simply place the
                           packet at the head of the list.  */
                        arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 8006f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
 8006f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f78:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f7c:	f383 8810 	msr	PRIMASK, r3
}
 8006f80:	bf00      	nop
                    /* Call ARP send to send an ARP request.  */
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
                }

                /* Just return!  */
                return;
 8006f82:	e115      	b.n	80071b0 <_nx_ip_driver_packet_send+0x43a>
                        last_packet =  arp_ptr -> nx_arp_packets_waiting;
 8006f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f88:	66bb      	str	r3, [r7, #104]	; 0x68
                        queued_count = 1;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	663b      	str	r3, [r7, #96]	; 0x60
                        while (last_packet -> nx_packet_queue_next)
 8006f8e:	e005      	b.n	8006f9c <_nx_ip_driver_packet_send+0x226>
                            queued_count++;
 8006f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f92:	3301      	adds	r3, #1
 8006f94:	663b      	str	r3, [r7, #96]	; 0x60
                            last_packet =  last_packet -> nx_packet_queue_next;
 8006f96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	66bb      	str	r3, [r7, #104]	; 0x68
                        while (last_packet -> nx_packet_queue_next)
 8006f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1f5      	bne.n	8006f90 <_nx_ip_driver_packet_send+0x21a>
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 8006fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	61da      	str	r2, [r3, #28]
                        remove_packet =  NX_NULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	667b      	str	r3, [r7, #100]	; 0x64
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 8006fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d913      	bls.n	8006fdc <_nx_ip_driver_packet_send+0x266>
                            remove_packet =  arp_ptr -> nx_arp_packets_waiting;
 8006fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	667b      	str	r3, [r7, #100]	; 0x64
                            arp_ptr -> nx_arp_packets_waiting =  remove_packet -> nx_packet_queue_next;
 8006fba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fbc:	69da      	ldr	r2, [r3, #28]
 8006fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc0:	631a      	str	r2, [r3, #48]	; 0x30
                            remove_packet -> nx_packet_queue_next =  NX_NULL;
 8006fc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	61da      	str	r2, [r3, #28]
                            ip_ptr -> nx_ip_transmit_resource_errors++;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	645a      	str	r2, [r3, #68]	; 0x44
                            ip_ptr -> nx_ip_send_packets_dropped++;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	655a      	str	r2, [r3, #84]	; 0x54
 8006fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fde:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	f383 8810 	msr	PRIMASK, r3
}
 8006fe6:	bf00      	nop
                        if (remove_packet)
 8006fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 80e0 	beq.w	80071b0 <_nx_ip_driver_packet_send+0x43a>
                            _nx_packet_transmit_release(remove_packet);
 8006ff0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8006ff2:	f001 ff2f 	bl	8008e54 <_nx_packet_transmit_release>
                return;
 8006ff6:	e0db      	b.n	80071b0 <_nx_ip_driver_packet_send+0x43a>
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00e      	beq.n	8007020 <_nx_ip_driver_packet_send+0x2aa>
                        ((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 8007008:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800700a:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 800700e:	0092      	lsls	r2, r2, #2
 8007010:	68f9      	ldr	r1, [r7, #12]
 8007012:	4411      	add	r1, r2
 8007014:	2200      	movs	r2, #0
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	4798      	blx	r3
 800701a:	4603      	mov	r3, r0
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00d      	beq.n	800703c <_nx_ip_driver_packet_send+0x2c6>
                        ip_ptr -> nx_ip_transmit_resource_errors++;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007024:	1c5a      	adds	r2, r3, #1
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	645a      	str	r2, [r3, #68]	; 0x44
                        ip_ptr -> nx_ip_send_packets_dropped++;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	655a      	str	r2, [r3, #84]	; 0x54
                        _nx_packet_transmit_release(packet_ptr);
 8007034:	68b8      	ldr	r0, [r7, #8]
 8007036:	f001 ff0d 	bl	8008e54 <_nx_packet_transmit_release>
                        return;
 800703a:	e0ba      	b.n	80071b2 <_nx_ip_driver_packet_send+0x43c>
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007040:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8007044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	66fb      	str	r3, [r7, #108]	; 0x6c
                    arp_ptr -> nx_arp_ip_address =            destination_ip;
 800704c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	621a      	str	r2, [r3, #32]
                    arp_ptr -> nx_arp_physical_address_msw =  0;
 8007052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007054:	2200      	movs	r2, #0
 8007056:	625a      	str	r2, [r3, #36]	; 0x24
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
 8007058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800705a:	2200      	movs	r2, #0
 800705c:	629a      	str	r2, [r3, #40]	; 0x28
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 800705e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007060:	220a      	movs	r2, #10
 8007062:	605a      	str	r2, [r3, #4]
                    arp_ptr -> nx_arp_retries =               0;
 8007064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007066:	2200      	movs	r2, #0
 8007068:	609a      	str	r2, [r3, #8]
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800706e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007070:	62da      	str	r2, [r3, #44]	; 0x2c
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2200      	movs	r2, #0
 8007076:	61da      	str	r2, [r3, #28]
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 8007078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	631a      	str	r2, [r3, #48]	; 0x30
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	4798      	blx	r3
                return;
 800708e:	e08f      	b.n	80071b0 <_nx_ip_driver_packet_send+0x43a>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */

        /* Determine if we have a loopback address.  */
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007096:	d302      	bcc.n	800709e <_nx_ip_driver_packet_send+0x328>
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 8007098:	687b      	ldr	r3, [r7, #4]
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800709a:	2b00      	cmp	r3, #0
 800709c:	da05      	bge.n	80070aa <_nx_ip_driver_packet_send+0x334>
            (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address))
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a2:	695b      	ldr	r3, [r3, #20]
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d104      	bne.n	80070b4 <_nx_ip_driver_packet_send+0x33e>
        {

            /* Yes, we have an internal loopback address.  */
            loopback = NX_TRUE;
 80070aa:	2301      	movs	r3, #1
 80070ac:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 80070b0:	2300      	movs	r3, #0
 80070b2:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Check whether the packet should be loop back. */
    if (loopback == NX_TRUE)
 80070b4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d131      	bne.n	8007120 <_nx_ip_driver_packet_send+0x3aa>
    {

        /* Copy the packet so it can be enqueued properly by the receive
           processing.  */
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 80070c2:	f107 0114 	add.w	r1, r7, #20
 80070c6:	2300      	movs	r3, #0
 80070c8:	68b8      	ldr	r0, [r7, #8]
 80070ca:	f001 fb73 	bl	80087b4 <_nx_packet_copy>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d11b      	bne.n	800710c <_nx_ip_driver_packet_send+0x396>

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

            /* Compute checksum for upper layer protocol. */
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            if (packet_copy -> nx_packet_interface_capability_flag)
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <_nx_ip_driver_packet_send+0x36e>
            {
                _nx_ip_packet_checksum_compute(packet_copy);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 f958 	bl	8007394 <_nx_ip_packet_checksum_compute>
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	4413      	add	r3, r2
 80070f8:	f1a3 0214 	sub.w	r2, r3, #20
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	619a      	str	r2, [r3, #24]
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_copy);

            /* Send the packet to this IP's receive processing like it came in from the
               driver.  */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	4619      	mov	r1, r3
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f000 fad1 	bl	80076ac <_nx_ip_packet_deferred_receive>
 800710a:	e009      	b.n	8007120 <_nx_ip_driver_packet_send+0x3aa>
#ifndef NX_DISABLE_IP_INFO
        else
        {

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	655a      	str	r2, [r3, #84]	; 0x54

            /* Increment the IP transmit resource error count.  */
            ip_ptr -> nx_ip_transmit_resource_errors++;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	645a      	str	r2, [r3, #68]	; 0x44
        }
#endif
    }

    /* Check whether the packet should be sent through driver. */
    if (driver_request.nx_ip_driver_interface)
 8007120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007122:	2b00      	cmp	r3, #0
 8007124:	d040      	beq.n	80071a8 <_nx_ip_driver_packet_send+0x432>
    {

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	429a      	cmp	r2, r3
 8007132:	d919      	bls.n	8007168 <_nx_ip_driver_packet_send+0x3f2>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Check the DF bit flag.  */
            if ((ip_ptr -> nx_ip_fragment_processing) && (fragment != NX_DONT_FRAGMENT))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <_nx_ip_driver_packet_send+0x3e0>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007144:	d007      	beq.n	8007156 <_nx_ip_driver_packet_send+0x3e0>
            {

                /* Fragmentation is needed, call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800714c:	f107 0218 	add.w	r2, r7, #24
 8007150:	4610      	mov	r0, r2
 8007152:	4798      	blx	r3
                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
            }

            /* In either case, this packet send is complete, just return.  */
            return;
 8007154:	e02d      	b.n	80071b2 <_nx_ip_driver_packet_send+0x43c>
                ip_ptr -> nx_ip_send_packets_dropped++;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	655a      	str	r2, [r3, #84]	; 0x54
                _nx_packet_transmit_release(packet_ptr);
 8007160:	68b8      	ldr	r0, [r7, #8]
 8007162:	f001 fe77 	bl	8008e54 <_nx_packet_transmit_release>
            return;
 8007166:	e024      	b.n	80071b2 <_nx_ip_driver_packet_send+0x43c>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packet sent count.  */
        ip_ptr -> nx_ip_total_packets_sent++;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	1c5a      	adds	r2, r3, #1
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	615a      	str	r2, [r3, #20]

        /* Increment the IP bytes sent count.  */
        ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	4413      	add	r3, r2
 800717c:	f1a3 0214 	sub.w	r2, r3, #20
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	619a      	str	r2, [r3, #24]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Driver entry must not be NULL. */
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d104      	bne.n	8007198 <_nx_ip_driver_packet_send+0x422>
 800718e:	f04f 30ff 	mov.w	r0, #4294967295
 8007192:	f005 fccb 	bl	800cb2c <_tx_thread_sleep>
 8007196:	e7fa      	b.n	800718e <_nx_ip_driver_packet_send+0x418>

        /* Broadcast packet.  */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719e:	f107 0218 	add.w	r2, r7, #24
 80071a2:	4610      	mov	r0, r2
 80071a4:	4798      	blx	r3
 80071a6:	e004      	b.n	80071b2 <_nx_ip_driver_packet_send+0x43c>
    }
    else
    {

        /* Release the transmit packet.  */
        _nx_packet_transmit_release(packet_ptr);
 80071a8:	68b8      	ldr	r0, [r7, #8]
 80071aa:	f001 fe53 	bl	8008e54 <_nx_packet_transmit_release>
 80071ae:	e000      	b.n	80071b2 <_nx_ip_driver_packet_send+0x43c>
                return;
 80071b0:	bf00      	nop
    }
}
 80071b2:	3778      	adds	r7, #120	; 0x78
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <_nx_ip_header_add>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_header_add(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG source_ip, ULONG destination_ip,
                        ULONG type_of_service, ULONG time_to_live,  ULONG protocol, ULONG fragment)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08c      	sub	sp, #48	; 0x30
 80071bc:	af02      	add	r7, sp, #8
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	603b      	str	r3, [r7, #0]
ULONG           router_alert = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	627b      	str	r3, [r7, #36]	; 0x24
NX_IPV4_HEADER *ip_header_ptr;
ULONG           checksum;
#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT            compute_checksum = 1;
 80071ca:	2301      	movs	r3, #1
 80071cc:	623b      	str	r3, [r7, #32]
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
ULONG           val;

#ifndef NX_DISABLE_IGMPV2
    /* Check IGMPv2 protocol. */
    if ((protocol == NX_IP_IGMP) && (ip_ptr -> nx_ip_igmp_router_version == NX_IGMP_HOST_VERSION_2))
 80071ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071d4:	d106      	bne.n	80071e4 <_nx_ip_header_add+0x2c>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d101      	bne.n	80071e4 <_nx_ip_header_add+0x2c>
    {
        router_alert = 4;
 80071e0:	2304      	movs	r3, #4
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071ea:	f06f 0313 	mvn.w	r3, #19
 80071ee:	1a5b      	subs	r3, r3, r1
 80071f0:	441a      	add	r2, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	4413      	add	r3, r2
 80071fe:	f103 0214 	add.w	r2, r3, #20
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	625a      	str	r2, [r3, #36]	; 0x24

    /* Assert prepend pointer is no less than data start pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	689a      	ldr	r2, [r3, #8]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	429a      	cmp	r2, r3
 8007210:	d204      	bcs.n	800721c <_nx_ip_header_add+0x64>
 8007212:	f04f 30ff 	mov.w	r0, #4294967295
 8007216:	f005 fc89 	bl	800cb2c <_tx_thread_sleep>
 800721a:	e7fa      	b.n	8007212 <_nx_ip_header_add+0x5a>

    /* Setup the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	61fb      	str	r3, [r7, #28]
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	689a      	ldr	r2, [r3, #8]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	635a      	str	r2, [r3, #52]	; 0x34
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
                                                       sizeof(NX_IPV4_HEADER) + router_alert);
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	b2db      	uxtb	r3, r3
 8007234:	4413      	add	r3, r2
 8007236:	b2db      	uxtb	r3, r3
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 8007238:	3314      	adds	r3, #20
 800723a:	b2da      	uxtb	r2, r3
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    /* Determine if this is an identical copy for TCP retransmission.
       RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <_nx_ip_header_add+0x98>
    {

        /* Yes, this an identical copy for TCP retransmission.
           The IP header has been added, return.  */
        return(NX_SUCCESS);
 800724c:	2300      	movs	r3, #0
 800724e:	e089      	b.n	8007364 <_nx_ip_header_add+0x1ac>
    }

    /* Build the IP header.  */

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <_nx_ip_header_add+0xb2>

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
                                                        (NX_IP_HEADER_LENGTH_ENCODE_6 << 24) |
                                                        type_of_service |
                                                        (0xFFFF & packet_ptr -> nx_packet_length));
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	b29a      	uxth	r2, r3
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	4313      	orrs	r3, r2
 8007260:	f043 428c 	orr.w	r2, r3, #1174405120	; 0x46000000
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	e008      	b.n	800727c <_nx_ip_header_add+0xc4>
    else
#endif
    {

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	b29a      	uxth	r2, r3
 8007270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007272:	4313      	orrs	r3, r2
 8007274:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	601a      	str	r2, [r3, #0]
    }

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8007282:	1c59      	adds	r1, r3, #1
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	f8c2 1134 	str.w	r1, [r2, #308]	; 0x134
 800728a:	041a      	lsls	r2, r3, #16
 800728c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728e:	431a      	orrs	r2, r3
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 8007294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007296:	061a      	lsls	r2, r3, #24
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	431a      	orrs	r2, r3
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  source_ip;
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  destination_ip;
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d004      	beq.n	80072bc <_nx_ip_header_add+0x104>
    {

        /* Append Router Alert Option. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))) = (NX_IP_OPTION_COPY_FLAG |
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	3314      	adds	r3, #20
 80072b8:	4a2c      	ldr	r2, [pc, #176]	; (800736c <_nx_ip_header_add+0x1b4>)
 80072ba:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	ba1a      	rev	r2, r3
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	ba1a      	rev	r2, r3
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	ba1a      	rev	r2, r3
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	ba1a      	rev	r2, r3
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	ba1a      	rev	r2, r3
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	611a      	str	r2, [r3, #16]
#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d008      	beq.n	8007306 <_nx_ip_header_add+0x14e>
    {

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_CHANGE_ULONG_ENDIAN(*((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))));
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	3314      	adds	r3, #20
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	3314      	adds	r3, #20
 8007302:	ba12      	rev	r2, r2
 8007304:	601a      	str	r2, [r3, #0]

#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_IP_TX_CHECKSUM */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <_nx_ip_header_add+0x160>
    {
        compute_checksum = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	623b      	str	r3, [r7, #32]
    }

#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d01b      	beq.n	8007356 <_nx_ip_header_add+0x19e>
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* Length is the size of IP header, including options */
                                           (UINT)(20 + router_alert),
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	f103 0214 	add.w	r2, r3, #20
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8007324:	2300      	movs	r3, #0
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	2300      	movs	r3, #0
 800732a:	2104      	movs	r1, #4
 800732c:	68b8      	ldr	r0, [r7, #8]
 800732e:	f7ff f9d9 	bl	80066e4 <_nx_ip_checksum_compute>
 8007332:	4603      	mov	r3, r0
 8007334:	61bb      	str	r3, [r7, #24]
                                           /* IPv4 header checksum does not use src/dest addresses */
                                           NULL, NULL);

        val = (ULONG)(~checksum);
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	43db      	mvns	r3, r3
 800733a:	617b      	str	r3, [r7, #20]
        val = val & NX_LOWER_16_MASK;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	b29b      	uxth	r3, r3
 8007340:	617b      	str	r3, [r7, #20]

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	ba1b      	rev	r3, r3
 8007346:	617b      	str	r3, [r7, #20]

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	431a      	orrs	r2, r3
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	609a      	str	r2, [r3, #8]
 8007354:	e005      	b.n	8007362 <_nx_ip_header_add+0x1aa>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735a:	f043 0201 	orr.w	r2, r3, #1
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Return...  */
    return(NX_SUCCESS);
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3728      	adds	r7, #40	; 0x28
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	94040000 	.word	0x94040000

08007370 <_nx_ip_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_initialize(VOID)
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0

    /* Initialize the created IP instance variables.  */
    _nx_ip_created_ptr =     NX_NULL;
 8007374:	4b05      	ldr	r3, [pc, #20]	; (800738c <_nx_ip_initialize+0x1c>)
 8007376:	2200      	movs	r2, #0
 8007378:	601a      	str	r2, [r3, #0]
    _nx_ip_created_count =   0;
 800737a:	4b05      	ldr	r3, [pc, #20]	; (8007390 <_nx_ip_initialize+0x20>)
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]
}
 8007380:	bf00      	nop
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	20014828 	.word	0x20014828
 8007390:	2001482c 	.word	0x2001482c

08007394 <_nx_ip_packet_checksum_compute>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_checksum_compute(NX_PACKET *packet_ptr)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b098      	sub	sp, #96	; 0x60
 8007398:	af02      	add	r7, sp, #8
 800739a:	6078      	str	r0, [r7, #4]
ULONG             next_protocol;
UCHAR            *org_prepend_ptr;
ULONG             checksum;
ULONG             val;
UCHAR             is_done = NX_FALSE;
 800739c:	2300      	movs	r3, #0
 800739e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
ULONG             ip_header_length;
ULONG             ip_src_addr[4];
ULONG             ip_dst_addr[4];
ULONG             data_length = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Get IP version. */
#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
    {
#endif
        next_protocol = NX_PROTOCOL_IPV4;
 80073a6:	2304      	movs	r3, #4
 80073a8:	657b      	str	r3, [r7, #84]	; 0x54
        next_protocol = NX_PROTOCOL_IPV6;
    }
#endif

    /* Store original prepend_ptr. */
    org_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Loop to process headers. */
    while (!is_done)
 80073b0:	e170      	b.n	8007694 <_nx_ip_packet_checksum_compute+0x300>
    {
        switch (next_protocol)
 80073b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073b4:	3b01      	subs	r3, #1
 80073b6:	2b10      	cmp	r3, #16
 80073b8:	f200 8168 	bhi.w	800768c <_nx_ip_packet_checksum_compute+0x2f8>
 80073bc:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <_nx_ip_packet_checksum_compute+0x30>)
 80073be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c2:	bf00      	nop
 80073c4:	08007587 	.word	0x08007587
 80073c8:	080075e7 	.word	0x080075e7
 80073cc:	0800768d 	.word	0x0800768d
 80073d0:	08007409 	.word	0x08007409
 80073d4:	0800768d 	.word	0x0800768d
 80073d8:	080074b9 	.word	0x080074b9
 80073dc:	0800768d 	.word	0x0800768d
 80073e0:	0800768d 	.word	0x0800768d
 80073e4:	0800768d 	.word	0x0800768d
 80073e8:	0800768d 	.word	0x0800768d
 80073ec:	0800768d 	.word	0x0800768d
 80073f0:	0800768d 	.word	0x0800768d
 80073f4:	0800768d 	.word	0x0800768d
 80073f8:	0800768d 	.word	0x0800768d
 80073fc:	0800768d 	.word	0x0800768d
 8007400:	0800768d 	.word	0x0800768d
 8007404:	08007523 	.word	0x08007523
        {

            /* It's assumed that the IP link driver has positioned the top pointer in the
               packet to the start of the IP address... so that's where we will start.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Pick up the first word in the IP header. */
            val = ip_header_ptr -> nx_ip_header_word_0;
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	637b      	str	r3, [r7, #52]	; 0x34

            /* Convert to host byte order. */
            NX_CHANGE_ULONG_ENDIAN(val);
 8007414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007416:	ba1b      	rev	r3, r3
 8007418:	637b      	str	r3, [r7, #52]	; 0x34

            /* Obtain IP header length. */
            ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 800741a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741c:	0e1b      	lsrs	r3, r3, #24
 800741e:	f003 030f 	and.w	r3, r3, #15
 8007422:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check if IPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01f      	beq.n	8007470 <_nx_ip_packet_checksum_compute+0xdc>
            {

                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                                   /* length is the size of IP header, including options */
                                                   ip_header_length << 2,
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	009a      	lsls	r2, r3, #2
                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8007434:	2300      	movs	r3, #0
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	2300      	movs	r3, #0
 800743a:	2104      	movs	r1, #4
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff f951 	bl	80066e4 <_nx_ip_checksum_compute>
 8007442:	4603      	mov	r3, r0
 8007444:	647b      	str	r3, [r7, #68]	; 0x44
                                                   /* IPv4 header checksum doesn't care src/dest addresses */
                                                   NULL, NULL);

                val = (ULONG)(~checksum);
 8007446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007448:	43db      	mvns	r3, r3
 800744a:	637b      	str	r3, [r7, #52]	; 0x34
                val = val & NX_LOWER_16_MASK;
 800744c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744e:	b29b      	uxth	r3, r3
 8007450:	637b      	str	r3, [r7, #52]	; 0x34

                /* Convert to network byte order. */
                NX_CHANGE_ULONG_ENDIAN(val);
 8007452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007454:	ba1b      	rev	r3, r3
 8007456:	637b      	str	r3, [r7, #52]	; 0x34

                /* Now store the checksum in the IP header.  */
                ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8007458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745a:	689a      	ldr	r2, [r3, #8]
 800745c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745e:	431a      	orrs	r2, r3
 8007460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007462:	609a      	str	r2, [r3, #8]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	f023 0201 	bic.w	r2, r3, #1
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	639a      	str	r2, [r3, #56]	; 0x38
            }


            /* Get src and dst addresses. */
            ip_src_addr[0] = ip_header_ptr -> nx_ip_header_source_ip;
 8007470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	61bb      	str	r3, [r7, #24]
            ip_dst_addr[0] = ip_header_ptr -> nx_ip_header_destination_ip;
 8007476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	60bb      	str	r3, [r7, #8]
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	ba1b      	rev	r3, r3
 8007480:	61bb      	str	r3, [r7, #24]
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	ba1b      	rev	r3, r3
 8007486:	60bb      	str	r3, [r7, #8]

            /* Get next protocol. */
            val = ip_header_ptr -> nx_ip_header_word_2;
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	637b      	str	r3, [r7, #52]	; 0x34
            NX_CHANGE_ULONG_ENDIAN(val);
 800748e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007490:	ba1b      	rev	r3, r3
 8007492:	637b      	str	r3, [r7, #52]	; 0x34
            next_protocol = (val >> 16) & 0xFF;
 8007494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007496:	0c1b      	lsrs	r3, r3, #16
 8007498:	b2db      	uxtb	r3, r3
 800749a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Remove IPv4 header. */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + (ip_header_length << 2);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689a      	ldr	r2, [r3, #8]
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	441a      	add	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	609a      	str	r2, [r3, #8]
            data_length = packet_ptr -> nx_packet_length - (ip_header_length << 2);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	64fb      	str	r3, [r7, #76]	; 0x4c
            break;
 80074b6:	e0ed      	b.n	8007694 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_TCP:
        {

            /* Check if TCP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074bc:	f003 0304 	and.w	r3, r3, #4
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d02a      	beq.n	800751a <_nx_ip_packet_checksum_compute+0x186>
            {

                /* Calculate the TCP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 80074c4:	f107 0218 	add.w	r2, r7, #24
 80074c8:	f107 0308 	add.w	r3, r7, #8
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	4613      	mov	r3, r2
 80074d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074d2:	2106      	movs	r1, #6
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7ff f905 	bl	80066e4 <_nx_ip_checksum_compute>
 80074da:	4603      	mov	r3, r0
 80074dc:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the TCP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	63fb      	str	r3, [r7, #60]	; 0x3c

                checksum = ~checksum & NX_LOWER_16_MASK;
 80074e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074e6:	43db      	mvns	r3, r3
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	647b      	str	r3, [r7, #68]	; 0x44

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 80074ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	ba1a      	rev	r2, r3
 80074f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f4:	611a      	str	r2, [r3, #16]
                tcp_header_ptr -> nx_tcp_header_word_4 |=  (checksum << NX_SHIFT_BY_16);
 80074f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f8:	691a      	ldr	r2, [r3, #16]
 80074fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074fc:	041b      	lsls	r3, r3, #16
 80074fe:	431a      	orrs	r2, r3
 8007500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007502:	611a      	str	r2, [r3, #16]
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	ba1a      	rev	r2, r3
 800750a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750c:	611a      	str	r2, [r3, #16]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	f023 0204 	bic.w	r2, r3, #4
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007520:	e0b8      	b.n	8007694 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_UDP:
        {

            /* Check if UDP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	f003 0310 	and.w	r3, r3, #16
 800752a:	2b00      	cmp	r3, #0
 800752c:	d027      	beq.n	800757e <_nx_ip_packet_checksum_compute+0x1ea>
            {

                /* Calculate the UDP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_UDP,
 800752e:	f107 0218 	add.w	r2, r7, #24
 8007532:	f107 0308 	add.w	r3, r7, #8
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	4613      	mov	r3, r2
 800753a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800753c:	2111      	movs	r1, #17
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7ff f8d0 	bl	80066e4 <_nx_ip_checksum_compute>
 8007544:	4603      	mov	r3, r0
 8007546:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the UDP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800754e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	ba1a      	rev	r2, r3
 8007554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007556:	605a      	str	r2, [r3, #4]
                udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | (~checksum & NX_LOWER_16_MASK);
 8007558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800755e:	43db      	mvns	r3, r3
 8007560:	b29b      	uxth	r3, r3
 8007562:	431a      	orrs	r2, r3
 8007564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007566:	605a      	str	r2, [r3, #4]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8007568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	ba1a      	rev	r2, r3
 800756e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007570:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007576:	f023 0210 	bic.w	r2, r3, #16
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 800757e:	2301      	movs	r3, #1
 8007580:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007584:	e086      	b.n	8007694 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_ICMP:
        {

            /* Check if ICMPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d025      	beq.n	80075de <_nx_ip_packet_checksum_compute+0x24a>
            {

                /* Calculate the ICMPv4 checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 8007592:	2300      	movs	r3, #0
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	2300      	movs	r3, #0
 8007598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800759a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff f8a0 	bl	80066e4 <_nx_ip_checksum_compute>
 80075a4:	4603      	mov	r3, r0
 80075a6:	647b      	str	r3, [r7, #68]	; 0x44
                                                    /* ICMPV4 header checksum doesn't care src/dest addresses */
                                                    NULL, NULL);

                /* Pickup the pointer to the head of the ICMPv4 packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                icmpv4_header_ptr =  (NX_ICMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	ba1a      	rev	r2, r3
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	601a      	str	r2, [r3, #0]
                icmpv4_header_ptr -> nx_icmp_header_word_0 =  icmpv4_header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 80075b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075be:	43db      	mvns	r3, r3
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	431a      	orrs	r2, r3
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	ba1a      	rev	r2, r3
 80075ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d0:	601a      	str	r2, [r3, #0]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 80075de:	2301      	movs	r3, #1
 80075e0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 80075e4:	e056      	b.n	8007694 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_IGMP:
        {

            /* Check if IGMP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d048      	beq.n	8007684 <_nx_ip_packet_checksum_compute+0x2f0>
            {

                /* Pickup the pointer to the head of the IGMP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                igmp_header_ptr =  (NX_IGMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 80075f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	ba1a      	rev	r2, r3
 80075fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007600:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	ba1a      	rev	r2, r3
 8007608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760a:	605a      	str	r2, [r3, #4]

                /* Calculate the checksum.  */
                val =       igmp_header_ptr -> nx_igmp_header_word_0;
 800760c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	637b      	str	r3, [r7, #52]	; 0x34
                checksum =  (val >> NX_SHIFT_BY_16);
 8007612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007614:	0c1b      	lsrs	r3, r3, #16
 8007616:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 8007618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761a:	b29b      	uxth	r3, r3
 800761c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800761e:	4413      	add	r3, r2
 8007620:	647b      	str	r3, [r7, #68]	; 0x44
                val =      igmp_header_ptr -> nx_igmp_header_word_1;
 8007622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (val >> NX_SHIFT_BY_16);
 8007628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762a:	0c1b      	lsrs	r3, r3, #16
 800762c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800762e:	4413      	add	r3, r2
 8007630:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 8007632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007634:	b29b      	uxth	r3, r3
 8007636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007638:	4413      	add	r3, r2
 800763a:	647b      	str	r3, [r7, #68]	; 0x44

                /* Add in the carry bits into the checksum.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 800763c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800763e:	0c1a      	lsrs	r2, r3, #16
 8007640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007642:	b29b      	uxth	r3, r3
 8007644:	4413      	add	r3, r2
 8007646:	647b      	str	r3, [r7, #68]	; 0x44

                /* Do it again in case previous operation generates an overflow.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 8007648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800764a:	0c1a      	lsrs	r2, r3, #16
 800764c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800764e:	b29b      	uxth	r3, r3
 8007650:	4413      	add	r3, r2
 8007652:	647b      	str	r3, [r7, #68]	; 0x44

                /* Place the checksum into the first header word.  */
                igmp_header_ptr -> nx_igmp_header_word_0 =  igmp_header_ptr -> nx_igmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 8007654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800765a:	43db      	mvns	r3, r3
 800765c:	b29b      	uxth	r3, r3
 800765e:	431a      	orrs	r2, r3
 8007660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007662:	601a      	str	r2, [r3, #0]

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 8007664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	ba1a      	rev	r2, r3
 800766a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766c:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 800766e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	ba1a      	rev	r2, r3
 8007674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007676:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007684:	2301      	movs	r3, #1
 8007686:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 800768a:	e003      	b.n	8007694 <_nx_ip_packet_checksum_compute+0x300>
        }
#endif

        default:
            /* Unsupported protocol. */
            is_done = NX_TRUE;
 800768c:	2301      	movs	r3, #1
 800768e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007692:	bf00      	nop
    while (!is_done)
 8007694:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007698:	2b00      	cmp	r3, #0
 800769a:	f43f ae8a 	beq.w	80073b2 <_nx_ip_packet_checksum_compute+0x1e>
        }
    }


    /* Restore origianl prepend_ptr. */
    packet_ptr -> nx_packet_prepend_ptr = org_prepend_ptr;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076a2:	609a      	str	r2, [r3, #8]
    return;
 80076a4:	bf00      	nop
}
 80076a6:	3758      	adds	r7, #88	; 0x58
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <_nx_ip_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80076b6:	f3ef 8310 	mrs	r3, PRIMASK
 80076ba:	61bb      	str	r3, [r7, #24]
    return(posture);
 80076bc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80076be:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80076c0:	b672      	cpsid	i
    return(int_posture);
 80076c2:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80076c4:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if the deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_deferred_received_packet_head)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d011      	beq.n	80076f4 <_nx_ip_packet_deferred_receive+0x48>
    {

        /* Not empty, just place the packet at the end of the queue.  */
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2200      	movs	r2, #0
 80076de:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f383 8810 	msr	PRIMASK, r3
}
 80076f2:	e019      	b.n	8007728 <_nx_ip_packet_deferred_receive+0x7c>
    {

        /* Empty deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the deferred processing
           queue.  */
        ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        packet_ptr -> nx_packet_queue_next =             NX_NULL;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2200      	movs	r2, #0
 8007708:	61da      	str	r2, [r3, #28]
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f383 8810 	msr	PRIMASK, r3
}
 8007714:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the IP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800771c:	2200      	movs	r2, #0
 800771e:	2108      	movs	r1, #8
 8007720:	4618      	mov	r0, r3
 8007722:	f003 ffbd 	bl	800b6a0 <_tx_event_flags_set>
    }
}
 8007726:	bf00      	nop
 8007728:	bf00      	nop
 800772a:	3720      	adds	r7, #32
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <_nx_ip_packet_receive>:
/*                                            added new ip filter,        */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
UCHAR version_byte;


#ifndef NX_DISABLE_IP_INFO
    /* Increment the IP packet count.  */
    ip_ptr -> nx_ip_total_packets_received++;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	61da      	str	r2, [r3, #28]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* If packet_ptr -> nx_packet_interface_ptr is not set, stamp the packet with interface[0].
       Legacy Ethernet drivers do not stamp incoming packets. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007748:	2b00      	cmp	r3, #0
 800774a:	d104      	bne.n	8007756 <_nx_ip_packet_receive+0x26>
    {
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f503 62e4 	add.w	r2, r3, #1824	; 0x720
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    version_byte =  *(packet_ptr -> nx_packet_prepend_ptr);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	73fb      	strb	r3, [r7, #15]

    /* Check the version number */
    ip_version = (version_byte >> 4);
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	091b      	lsrs	r3, r3, #4
 8007762:	73bb      	strb	r3, [r7, #14]

    packet_ptr -> nx_packet_ip_version = ip_version;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	7bba      	ldrb	r2, [r7, #14]
 8007768:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* NX_ENABLE_IP_PACKET_FILTER */

#ifndef NX_DISABLE_IPV4

    /* Process the packet according to IP version. */
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	2b04      	cmp	r3, #4
 8007778:	d10b      	bne.n	8007792 <_nx_ip_packet_receive+0x62>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d006      	beq.n	8007792 <_nx_ip_packet_receive+0x62>
    {

        /* Call the IPv4 packet handler. */
        (ip_ptr -> nx_ipv4_packet_receive)(ip_ptr, packet_ptr);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	4798      	blx	r3
        return;
 8007790:	e00d      	b.n	80077ae <_nx_ip_packet_receive+0x7e>
        not defined.  In this case, the packet is reclaimed. */

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP invalid packet error.  */
    ip_ptr -> nx_ip_invalid_packets++;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007796:	1c5a      	adds	r2, r3, #1
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment the IP receive packets dropped count.  */
    ip_ptr -> nx_ip_receive_packets_dropped++;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

    _nx_packet_release(packet_ptr);
 80077a6:	6838      	ldr	r0, [r7, #0]
 80077a8:	f001 fa9c 	bl	8008ce4 <_nx_packet_release>

    return;
 80077ac:	bf00      	nop
}
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <_nx_ip_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                         ULONG destination_ip, ULONG type_of_service, ULONG time_to_live,
                         ULONG protocol, ULONG fragment, ULONG next_hop_address)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af04      	add	r7, sp, #16
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IP_INFO

    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	611a      	str	r2, [r3, #16]
#endif

    /* Make sure the packet interface is set. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d114      	bne.n	80077fe <_nx_ip_packet_send+0x4a>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_transmit_packets++;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

        /* Prepend the IP header to the packet.  First, make room for the IP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f1a3 0214 	sub.w	r2, r3, #20
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	609a      	str	r2, [r3, #8]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	f103 0214 	add.w	r2, r3, #20
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Release the packet.  */
        _nx_packet_transmit_release(packet_ptr);
 80077f6:	68b8      	ldr	r0, [r7, #8]
 80077f8:	f001 fb2c 	bl	8008e54 <_nx_packet_transmit_release>

        /* Return... nothing more can be done!  */
        return;
 80077fc:	e03b      	b.n	8007876 <_nx_ip_packet_send+0xc2>
    if (!is_hw_processed)
#endif /* NX_IPSEC_ENABLE  */
    {

        /* Add the IP Header to the packet.  */
        _nx_ip_header_add(ip_ptr, packet_ptr, packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address,
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007802:	695a      	ldr	r2, [r3, #20]
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	9303      	str	r3, [sp, #12]
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	9302      	str	r3, [sp, #8]
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	9301      	str	r3, [sp, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68b9      	ldr	r1, [r7, #8]
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f7ff fccd 	bl	80071b8 <_nx_ip_header_add>
    }

#endif

    /* If the next hop address is null, indicates the specified interface is unreached.  */
    if (next_hop_address == 0)
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	2b00      	cmp	r3, #0
 8007822:	d120      	bne.n	8007866 <_nx_ip_packet_send+0xb2>
    {

        /* Check whether the forward feature is enabled.  */
        if (ip_ptr -> nx_ip_forward_packet_process)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00b      	beq.n	8007846 <_nx_ip_packet_send+0x92>
        {

            /* Initialize the interface.  */
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2200      	movs	r2, #0
 8007832:	631a      	str	r2, [r3, #48]	; 0x30

            /* Figure out the best interface to send the packet on. */
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800783a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 f82d 	bl	80078a0 <_nx_ip_route_find>
        }

        /* Make sure the packet interface and next hop address are set. */
        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        if ((packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL) || (next_hop_address == 0))
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <_nx_ip_packet_send+0xa0>
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	2b00      	cmp	r3, #0
 8007852:	d108      	bne.n	8007866 <_nx_ip_packet_send+0xb2>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_transmit_packets++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

            /* Release the packet.  */
            _nx_packet_transmit_release(packet_ptr);
 800785e:	68b8      	ldr	r0, [r7, #8]
 8007860:	f001 faf8 	bl	8008e54 <_nx_packet_transmit_release>

            /* Return... nothing more can be done!  */
            return;
 8007864:	e007      	b.n	8007876 <_nx_ip_packet_send+0xc2>
        }
    }

    /* Directly send the packet.  */
    _nx_ip_driver_packet_send(ip_ptr, packet_ptr, destination_ip, fragment, next_hop_address);
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	68b9      	ldr	r1, [r7, #8]
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f7ff fa80 	bl	8006d76 <_nx_ip_driver_packet_send>
}
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <_nx_ip_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_periodic_timer_entry(ULONG ip_address)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_PERIODIC_EVENT, TX_OR);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800788e:	2200      	movs	r2, #0
 8007890:	2101      	movs	r1, #1
 8007892:	4618      	mov	r0, r3
 8007894:	f003 ff04 	bl	800b6a0 <_tx_event_flags_set>
}
 8007898:	bf00      	nop
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <_nx_ip_route_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _nx_ip_route_find(NX_IP *ip_ptr, ULONG destination_address, NX_INTERFACE **ip_interface_ptr, ULONG *next_hop_address)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	603b      	str	r3, [r7, #0]

NX_INTERFACE *interface_ptr;
ULONG         i;

    /* Initialize the next hop address. */
    *next_hop_address = 0;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]

    /* Determine if the destination_address is multicast or directed broadcast. */
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80078ba:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80078be:	d003      	beq.n	80078c8 <_nx_ip_route_find+0x28>
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c6:	d132      	bne.n	800792e <_nx_ip_route_find+0x8e>
        (destination_address  == NX_IP_LIMITED_BROADCAST))
    {

        *next_hop_address = destination_address;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	601a      	str	r2, [r3, #0]

        /* If the caller did not set the ip_interface value, find a link enabled 
           interface, starting with the primary interface, for transmission.  */
        if (*ip_interface_ptr == NX_NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d122      	bne.n	800791c <_nx_ip_route_find+0x7c>
        {

            /* Find an interface whose link is up. */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80078d6:	2300      	movs	r3, #0
 80078d8:	617b      	str	r3, [r7, #20]
 80078da:	e01b      	b.n	8007914 <_nx_ip_route_find+0x74>
            {

                if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up)
 80078dc:	68f9      	ldr	r1, [r7, #12]
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	4613      	mov	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	440b      	add	r3, r1
 80078ea:	f203 7326 	addw	r3, r3, #1830	; 0x726
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00c      	beq.n	800790e <_nx_ip_route_find+0x6e>
                {
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	4613      	mov	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	011b      	lsls	r3, r3, #4
 80078fe:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	441a      	add	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	601a      	str	r2, [r3, #0]
                    return(NX_SUCCESS);
 800790a:	2300      	movs	r3, #0
 800790c:	e13d      	b.n	8007b8a <_nx_ip_route_find+0x2ea>
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	3301      	adds	r3, #1
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0e0      	beq.n	80078dc <_nx_ip_route_find+0x3c>
 800791a:	e006      	b.n	800792a <_nx_ip_route_find+0x8a>
                }
            }
        }
        /* If the specified interface is up, return success. */
        else if ((*ip_interface_ptr) -> nx_interface_link_up)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	799b      	ldrb	r3, [r3, #6]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <_nx_ip_route_find+0x8a>
        {
            return(NX_SUCCESS);
 8007926:	2300      	movs	r3, #0
 8007928:	e12f      	b.n	8007b8a <_nx_ip_route_find+0x2ea>
        }

        /* No available interface. */
        return(NX_IP_ADDRESS_ERROR);
 800792a:	2321      	movs	r3, #33	; 0x21
 800792c:	e12d      	b.n	8007b8a <_nx_ip_route_find+0x2ea>
    }

    /* Search through the interfaces associated with the IP instance,
       check if the the destination address is one of the local interface addresses. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800792e:	2300      	movs	r3, #0
 8007930:	617b      	str	r3, [r7, #20]
 8007932:	e02a      	b.n	800798a <_nx_ip_route_find+0xea>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	4613      	mov	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	011b      	lsls	r3, r3, #4
 800793e:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	4413      	add	r3, r2
 8007946:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	791b      	ldrb	r3, [r3, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d019      	beq.n	8007984 <_nx_ip_route_find+0xe4>
            (interface_ptr -> nx_interface_link_up) &&
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 8007954:	2b00      	cmp	r3, #0
 8007956:	d015      	beq.n	8007984 <_nx_ip_route_find+0xe4>
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	695b      	ldr	r3, [r3, #20]
            (interface_ptr -> nx_interface_link_up) &&
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	429a      	cmp	r2, r3
 8007960:	d110      	bne.n	8007984 <_nx_ip_route_find+0xe4>
            ((*ip_interface_ptr == NX_NULL) ||
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 8007966:	2b00      	cmp	r3, #0
 8007968:	d004      	beq.n	8007974 <_nx_ip_route_find+0xd4>
             (*ip_interface_ptr == interface_ptr)))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
            ((*ip_interface_ptr == NX_NULL) ||
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	429a      	cmp	r2, r3
 8007972:	d107      	bne.n	8007984 <_nx_ip_route_find+0xe4>
        {

            /* Yes, use the entry information for interface and next hop. */
            *ip_interface_ptr = interface_ptr;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	601a      	str	r2, [r3, #0]
            *next_hop_address = destination_address;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 8007980:	2300      	movs	r3, #0
 8007982:	e102      	b.n	8007b8a <_nx_ip_route_find+0x2ea>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	3301      	adds	r3, #1
 8007988:	617b      	str	r3, [r7, #20]
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d0d1      	beq.n	8007934 <_nx_ip_route_find+0x94>

#endif /* NX_ENABLE_IP_STATIC_ROUTING */

    /* Search through the interfaces associated with the IP instance,
       check if the entry exists. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8007990:	2300      	movs	r3, #0
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	e036      	b.n	8007a04 <_nx_ip_route_find+0x164>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4613      	mov	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4413      	add	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	791b      	ldrb	r3, [r3, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d025      	beq.n	80079fe <_nx_ip_route_find+0x15e>
            (interface_ptr -> nx_interface_link_up) &&
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d021      	beq.n	80079fe <_nx_ip_route_find+0x15e>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	699a      	ldr	r2, [r3, #24]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	401a      	ands	r2, r3
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	69db      	ldr	r3, [r3, #28]
            (interface_ptr -> nx_interface_link_up) &&
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d119      	bne.n	80079fe <_nx_ip_route_find+0x15e>
        {

            /* Yes, use the entry information for interface and next hop. */
            if (*ip_interface_ptr == NX_NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d103      	bne.n	80079da <_nx_ip_route_find+0x13a>
            {
                *ip_interface_ptr = interface_ptr;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	e00b      	b.n	80079f2 <_nx_ip_route_find+0x152>
            }
            /* Match loopback interface.  */
            /* Suppress constant value, since "NX_MAX_IP_INTERFACES" can be redefined. */
#if (NX_MAX_IP_INTERFACES == (NX_MAX_PHYSICAL_INTERFACES + 1))
            else if (i == NX_MAX_PHYSICAL_INTERFACES)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d103      	bne.n	80079e8 <_nx_ip_route_find+0x148>
            {
                *ip_interface_ptr = interface_ptr;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	e004      	b.n	80079f2 <_nx_ip_route_find+0x152>
            }
#endif
            else if (*ip_interface_ptr != interface_ptr)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d104      	bne.n	80079fc <_nx_ip_route_find+0x15c>
            {
                continue;
            }

            *next_hop_address = destination_address;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 80079f8:	2300      	movs	r3, #0
 80079fa:	e0c6      	b.n	8007b8a <_nx_ip_route_find+0x2ea>
                continue;
 80079fc:	bf00      	nop
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	3301      	adds	r3, #1
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d9c5      	bls.n	8007996 <_nx_ip_route_find+0xf6>
        }
    }

    /* Search the interfaces for IPv4 Link-Local Address according to RFC3927, section2.6.  */
    /* Determine if destination addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if ((destination_address & 0xFFFF0000) == 0xA9FE0000)
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	0c1b      	lsrs	r3, r3, #16
 8007a0e:	041b      	lsls	r3, r3, #16
 8007a10:	4a61      	ldr	r2, [pc, #388]	; (8007b98 <_nx_ip_route_find+0x2f8>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d143      	bne.n	8007a9e <_nx_ip_route_find+0x1fe>
    {

        /* Yes, check if the interface is set.  */
        if (*ip_interface_ptr)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00e      	beq.n	8007a3c <_nx_ip_route_find+0x19c>
        {

            /* Determine if the interface is valid.  */
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	791b      	ldrb	r3, [r3, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d03a      	beq.n	8007a9e <_nx_ip_route_find+0x1fe>
                ((*ip_interface_ptr) -> nx_interface_link_up))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	799b      	ldrb	r3, [r3, #6]
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d035      	beq.n	8007a9e <_nx_ip_route_find+0x1fe>
            {

                /* Set the next hop address.  */
                *next_hop_address = destination_address;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 8007a38:	2300      	movs	r3, #0
 8007a3a:	e0a6      	b.n	8007b8a <_nx_ip_route_find+0x2ea>
        }
        else
        {

            /* Search through the interfaces associated with the IP instance, set the inteface as first valid interface.  */
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	617b      	str	r3, [r7, #20]
 8007a40:	e02a      	b.n	8007a98 <_nx_ip_route_find+0x1f8>
            {

                /* Check for a valid interface that the address is link-local address.  */
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8007a42:	68f9      	ldr	r1, [r7, #12]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	440b      	add	r3, r1
 8007a50:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d01b      	beq.n	8007a92 <_nx_ip_route_find+0x1f2>
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_up))
 8007a5a:	68f9      	ldr	r1, [r7, #12]
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	011b      	lsls	r3, r3, #4
 8007a66:	440b      	add	r3, r1
 8007a68:	f203 7326 	addw	r3, r3, #1830	; 0x726
 8007a6c:	781b      	ldrb	r3, [r3, #0]
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00f      	beq.n	8007a92 <_nx_ip_route_find+0x1f2>
                {

                    /* Yes, use the entry information for interface and next hop. */
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	011b      	lsls	r3, r3, #4
 8007a7c:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	441a      	add	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	601a      	str	r2, [r3, #0]
                    *next_hop_address = destination_address;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	601a      	str	r2, [r3, #0]

                    return(NX_SUCCESS);
 8007a8e:	2300      	movs	r3, #0
 8007a90:	e07b      	b.n	8007b8a <_nx_ip_route_find+0x2ea>
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	3301      	adds	r3, #1
 8007a96:	617b      	str	r3, [r7, #20]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d9d1      	bls.n	8007a42 <_nx_ip_route_find+0x1a2>
            }
        }
    }

    /* Does the IP instance have a gateway? */
    if ((ip_ptr -> nx_ip_gateway_address) &&
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d02b      	beq.n	8007afe <_nx_ip_route_find+0x25e>
        (ip_ptr -> nx_ip_gateway_interface) &&
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	68db      	ldr	r3, [r3, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d027      	beq.n	8007afe <_nx_ip_route_find+0x25e>
        (ip_ptr -> nx_ip_gateway_interface -> nx_interface_link_up))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	799b      	ldrb	r3, [r3, #6]
        (ip_ptr -> nx_ip_gateway_interface) &&
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d022      	beq.n	8007afe <_nx_ip_route_find+0x25e>
    {

        /* Get the interface. */
        interface_ptr = ip_ptr -> nx_ip_gateway_interface;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	613b      	str	r3, [r7, #16]

        /* Yes, is gateway address still reachable? */
        if (interface_ptr -> nx_interface_ip_network !=
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	69da      	ldr	r2, [r3, #28]
            (ip_ptr -> nx_ip_gateway_address &
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6899      	ldr	r1, [r3, #8]
             interface_ptr -> nx_interface_ip_network_mask))
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	699b      	ldr	r3, [r3, #24]
            (ip_ptr -> nx_ip_gateway_address &
 8007aca:	400b      	ands	r3, r1
        if (interface_ptr -> nx_interface_ip_network !=
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d001      	beq.n	8007ad4 <_nx_ip_route_find+0x234>
        {
            return(NX_IP_ADDRESS_ERROR);
 8007ad0:	2321      	movs	r3, #33	; 0x21
 8007ad2:	e05a      	b.n	8007b8a <_nx_ip_route_find+0x2ea>
        }

        /* Use the gateway as default. */
        if (*ip_interface_ptr == NX_NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d103      	bne.n	8007ae4 <_nx_ip_route_find+0x244>
        {
            *ip_interface_ptr = interface_ptr;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	e006      	b.n	8007af2 <_nx_ip_route_find+0x252>
        }
        else if (*ip_interface_ptr != interface_ptr)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d001      	beq.n	8007af2 <_nx_ip_route_find+0x252>
        {
            return(NX_IP_ADDRESS_ERROR);
 8007aee:	2321      	movs	r3, #33	; 0x21
 8007af0:	e04b      	b.n	8007b8a <_nx_ip_route_find+0x2ea>
        }

        *next_hop_address = ip_ptr -> nx_ip_gateway_address;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	601a      	str	r2, [r3, #0]

        return(NX_SUCCESS);
 8007afa:	2300      	movs	r3, #0
 8007afc:	e045      	b.n	8007b8a <_nx_ip_route_find+0x2ea>
    }

    /* Determine if source addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if (*ip_interface_ptr)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d016      	beq.n	8007b34 <_nx_ip_route_find+0x294>
    {

        /* Determine if the interface is valid and the address of interface is link-local address.  */
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	791b      	ldrb	r3, [r3, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d03b      	beq.n	8007b88 <_nx_ip_route_find+0x2e8>
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	799b      	ldrb	r3, [r3, #6]
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d036      	beq.n	8007b88 <_nx_ip_route_find+0x2e8>
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	0c1b      	lsrs	r3, r3, #16
 8007b22:	041b      	lsls	r3, r3, #16
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 8007b24:	4a1c      	ldr	r2, [pc, #112]	; (8007b98 <_nx_ip_route_find+0x2f8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d12e      	bne.n	8007b88 <_nx_ip_route_find+0x2e8>
        {

            /* Set the next hop address.  */
            *next_hop_address = destination_address;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 8007b30:	2300      	movs	r3, #0
 8007b32:	e02a      	b.n	8007b8a <_nx_ip_route_find+0x2ea>
    else
    {

        /* Search through the interfaces associated with the IP instance,
           check if interface is valid and the address of interface is link-local address. */
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8007b34:	2300      	movs	r3, #0
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	e023      	b.n	8007b82 <_nx_ip_route_find+0x2e2>
        {

            /* Use a local variable for convenience. */
            interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	011b      	lsls	r3, r3, #4
 8007b44:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]

            /* Check for a valid interface that the address is link-local address.  */
            if ((interface_ptr -> nx_interface_valid) &&
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	791b      	ldrb	r3, [r3, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d012      	beq.n	8007b7c <_nx_ip_route_find+0x2dc>
                (interface_ptr -> nx_interface_link_up) &&
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	799b      	ldrb	r3, [r3, #6]
            if ((interface_ptr -> nx_interface_valid) &&
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00e      	beq.n	8007b7c <_nx_ip_route_find+0x2dc>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	0c1b      	lsrs	r3, r3, #16
 8007b64:	041b      	lsls	r3, r3, #16
                (interface_ptr -> nx_interface_link_up) &&
 8007b66:	4a0c      	ldr	r2, [pc, #48]	; (8007b98 <_nx_ip_route_find+0x2f8>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d107      	bne.n	8007b7c <_nx_ip_route_find+0x2dc>
            {

                /* Yes, use the entry information for interface and next hop. */
                *ip_interface_ptr = interface_ptr;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	601a      	str	r2, [r3, #0]
                *next_hop_address = destination_address;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 8007b78:	2300      	movs	r3, #0
 8007b7a:	e006      	b.n	8007b8a <_nx_ip_route_find+0x2ea>
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d9d8      	bls.n	8007b3a <_nx_ip_route_find+0x29a>
        }
    }

    /* Cannot find a proper way to transmit this packet.
       Return the error status. */
    return(NX_IP_ADDRESS_ERROR);
 8007b88:	2321      	movs	r3, #33	; 0x21
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	371c      	adds	r7, #28
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	a9fe0000 	.word	0xa9fe0000

08007b9c <_nx_ip_thread_entry>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_thread_entry(ULONG ip_ptr_value)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b096      	sub	sp, #88	; 0x58
 8007ba0:	af02      	add	r7, sp, #8
 8007ba2:	6078      	str	r0, [r7, #4]
NXD_IPV6_ADDRESS *interface_ipv6_address;
#endif /* FEATURE_NX_IPV6 */


    /* Setup IP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_ptr_value)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain the IP internal mutex before calling the driver.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007baa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007bae:	f04f 31ff 	mov.w	r1, #4294967295
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f004 f90c 	bl	800bdd0 <_tx_mutex_get>

    /* Set the IP initialization done flag to true.  */
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 8007bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    /* Loop through all physical interfaces to initialize and enable the hardware. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bc4:	e070      	b.n	8007ca8 <_nx_ip_thread_entry+0x10c>
    {

        /* Is this a valid interface with a link driver associated with it? */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 8007bc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	011b      	lsls	r3, r3, #4
 8007bd2:	440b      	add	r3, r1
 8007bd4:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d061      	beq.n	8007ca2 <_nx_ip_thread_entry+0x106>
 8007bde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007be0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007be2:	4613      	mov	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	011b      	lsls	r3, r3, #4
 8007bea:	440b      	add	r3, r1
 8007bec:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d055      	beq.n	8007ca2 <_nx_ip_thread_entry+0x106>
        {

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            /* Clear capability flag first.  */
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
 8007bf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	011b      	lsls	r3, r3, #4
 8007c02:	440b      	add	r3, r1
 8007c04:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


            ip_ptr -> nx_ip_interface[i].nx_interface_link_up = NX_TRUE;
 8007c0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	011b      	lsls	r3, r3, #4
 8007c18:	440b      	add	r3, r1
 8007c1a:	f203 7326 	addw	r3, r3, #1830	; 0x726
 8007c1e:	2201      	movs	r2, #1
 8007c20:	701a      	strb	r2, [r3, #0]

            /* Yes; attach the interface to the device. */
            driver_request.nx_ip_driver_ptr        =  ip_ptr;
 8007c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c24:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 8007c26:	2313      	movs	r3, #19
 8007c28:	613b      	str	r3, [r7, #16]
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 8007c2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	011b      	lsls	r3, r3, #4
 8007c34:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007c38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c3a:	4413      	add	r3, r2
 8007c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8007c3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c42:	4613      	mov	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	011b      	lsls	r3, r3, #4
 8007c4a:	440b      	add	r3, r1
 8007c4c:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f107 0210 	add.w	r2, r7, #16
 8007c56:	4610      	mov	r0, r2
 8007c58:	4798      	blx	r3
            /* Call the link driver to initialize the hardware. Among other
               responsibilities, the driver is required to provide the
               Maximum Transfer Unit (MTU) for the physical layer. The MTU
               should represent the actual physical layer transfer size
               less the physical layer headers and trailers.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 8007c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c5c:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_INITIALIZE;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	613b      	str	r3, [r7, #16]
               When an IP instance is created, the first interface (nx_ip_interface[0]) is configured using parameters
               provided in the IP create call.

               When IP thread runs, it invokes the first interface link driver for link initialization.
             */
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8007c62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c66:	4613      	mov	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	011b      	lsls	r3, r3, #4
 8007c6e:	440b      	add	r3, r1
 8007c70:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f107 0210 	add.w	r2, r7, #16
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	4798      	blx	r3

            /* Call the link driver again to enable the interface.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 8007c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c80:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 8007c82:	2302      	movs	r3, #2
 8007c84:	613b      	str	r3, [r7, #16]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_LINK_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8007c86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	011b      	lsls	r3, r3, #4
 8007c92:	440b      	add	r3, r1
 8007c94:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f107 0210 	add.w	r2, r7, #16
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8007ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d08b      	beq.n	8007bc6 <_nx_ip_thread_entry+0x2a>
    /* Loop to process events for this IP instance.  */
    for (;;)
    {

        /* Release the IP internal mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cb0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f004 fb03 	bl	800c2c0 <_tx_mutex_put>

        /* Pickup IP event flags.  */
        tx_event_flags_get(&(ip_ptr -> nx_ip_events), NX_IP_ALL_EVENTS, TX_OR_CLEAR, &ip_events, TX_WAIT_FOREVER);
 8007cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cbc:	f503 7012 	add.w	r0, r3, #584	; 0x248
 8007cc0:	f107 030c 	add.w	r3, r7, #12
 8007cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc8:	9200      	str	r2, [sp, #0]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8007cd0:	f003 fbfc 	bl	800b4cc <_tx_event_flags_get>

        /* Obtain the IP internal mutex before processing the IP event.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cd6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007cda:	f04f 31ff 	mov.w	r1, #4294967295
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f004 f876 	bl	800bdd0 <_tx_mutex_get>
        }
#endif

        /* Check for an IP receive packet event.  */
        /*lint -e{644} suppress variable might not be initialized, since "ip_events" was initialized by tx_event_flags_get. */
        if (ip_events & NX_IP_RECEIVE_EVENT)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f003 0308 	and.w	r3, r3, #8
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d031      	beq.n	8007d52 <_nx_ip_thread_entry+0x1b6>
        {

            /* Loop to process all deferred packet requests.  */
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 8007cee:	e023      	b.n	8007d38 <_nx_ip_thread_entry+0x19c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8007cf4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8007cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8007cfa:	b672      	cpsid	i
    return(int_posture);
 8007cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
            {

                /* Remove the first packet and process it!  */

                /* Disable interrupts.  */
                TX_DISABLE
 8007cfe:	643b      	str	r3, [r7, #64]	; 0x40

                /* Pickup the first packet.  */
                packet_ptr =  ip_ptr -> nx_ip_deferred_received_packet_head;
 8007d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d02:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007d06:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Move the head pointer to the next packet.  */
                ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 8007d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d0a:	69da      	ldr	r2, [r3, #28]
 8007d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d0e:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

                /* Check for end of deferred processing queue.  */
                if (ip_ptr -> nx_ip_deferred_received_packet_head == NX_NULL)
 8007d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d14:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d103      	bne.n	8007d24 <_nx_ip_thread_entry+0x188>
                {

                    /* Yes, the queue is empty.  Set the tail pointer to NULL.  */
                    ip_ptr -> nx_ip_deferred_received_packet_tail =  NX_NULL;
 8007d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8007d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d26:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	f383 8810 	msr	PRIMASK, r3
}
 8007d2e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call the actual IP packet receive function.  */
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 8007d30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d32:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007d34:	f7ff fcfc 	bl	8007730 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 8007d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d3a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1d6      	bne.n	8007cf0 <_nx_ip_thread_entry+0x154>
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_RECEIVE_EVENT);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f023 0308 	bic.w	r3, r3, #8
 8007d48:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 8131 	beq.w	8007fb4 <_nx_ip_thread_entry+0x418>
                continue;
            }
        }

        /* Check for a TCP message event.  */
        if (ip_events & NX_IP_TCP_EVENT)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00c      	beq.n	8007d76 <_nx_ip_thread_entry+0x1da>
        {

            /* Process the TCP packet queue.  */
            (ip_ptr -> nx_ip_tcp_queue_process)(ip_ptr);
 8007d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d5e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8007d62:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007d64:	4798      	blx	r3

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_TCP_EVENT);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d6c:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 8121 	beq.w	8007fb8 <_nx_ip_thread_entry+0x41c>
                continue;
            }
        }

        /* Check for a fast TCP event.  */
        if (ip_events & NX_IP_FAST_EVENT)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d011      	beq.n	8007da4 <_nx_ip_thread_entry+0x208>
            }

#endif /* FEATURE_NX_IPV6 */

            /* Process the fast TCP processing.  */
            if (ip_ptr -> nx_ip_tcp_fast_periodic_processing)
 8007d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d82:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d004      	beq.n	8007d94 <_nx_ip_thread_entry+0x1f8>
            {
                (ip_ptr -> nx_ip_tcp_fast_periodic_processing)(ip_ptr);
 8007d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d8c:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8007d90:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007d92:	4798      	blx	r3
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_FAST_EVENT);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d9a:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 810c 	beq.w	8007fbc <_nx_ip_thread_entry+0x420>
                continue;
            }
        }

        /* Check for a periodic events.  */
        if (ip_events & NX_IP_PERIODIC_EVENT)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d039      	beq.n	8007e22 <_nx_ip_thread_entry+0x286>
        {

#ifndef NX_DISABLE_IPV4
            /* Process the ARP periodic update, if ARP has been enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 8007dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007db0:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d004      	beq.n	8007dc2 <_nx_ip_thread_entry+0x226>
            {
                (ip_ptr -> nx_ip_arp_periodic_update)(ip_ptr);
 8007db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dba:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 8007dbe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007dc0:	4798      	blx	r3
            }

            /* Process the RARP periodic update, if RARP has been enabled.  */
            if (ip_ptr -> nx_ip_rarp_periodic_update)
 8007dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dc4:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d004      	beq.n	8007dd6 <_nx_ip_thread_entry+0x23a>
            {
                (ip_ptr -> nx_ip_rarp_periodic_update)(ip_ptr);
 8007dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dce:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 8007dd2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007dd4:	4798      	blx	r3
            }

            /* Process IGMP periodic events, if IGMP has been enabled.  */
            if (ip_ptr -> nx_ip_igmp_periodic_processing)
 8007dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dd8:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <_nx_ip_thread_entry+0x24e>
            {
                (ip_ptr -> nx_ip_igmp_periodic_processing)(ip_ptr);
 8007de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007de2:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 8007de6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007de8:	4798      	blx	r3
            }
#endif /* !NX_DISABLE_IPV4  */

            /* Process IP fragmentation timeouts, if IP fragmenting has been
               enabled.  */
            if (ip_ptr -> nx_ip_fragment_timeout_check)
 8007dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dec:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d004      	beq.n	8007dfe <_nx_ip_thread_entry+0x262>
            {
                (ip_ptr -> nx_ip_fragment_timeout_check)(ip_ptr);
 8007df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007df6:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 8007dfa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007dfc:	4798      	blx	r3
            }

            /* Process TCP periodic events, if TCP has been enabled.  */
            if (ip_ptr -> nx_ip_tcp_periodic_processing)
 8007dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e00:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d004      	beq.n	8007e12 <_nx_ip_thread_entry+0x276>
            {
                (ip_ptr -> nx_ip_tcp_periodic_processing)(ip_ptr);
 8007e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e0a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8007e0e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007e10:	4798      	blx	r3
            }
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

#endif /* FEATURE_NX_IPV6 */
            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_PERIODIC_EVENT);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f023 0301 	bic.w	r3, r3, #1
 8007e18:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 80cf 	beq.w	8007fc0 <_nx_ip_thread_entry+0x424>
        }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Check for an ARP receive packet event.  */
        if ((ip_events & NX_IP_ARP_REC_EVENT) && (ip_ptr -> nx_ip_arp_queue_process))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f003 0310 	and.w	r3, r3, #16
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d009      	beq.n	8007e40 <_nx_ip_thread_entry+0x2a4>
 8007e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e2e:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d004      	beq.n	8007e40 <_nx_ip_thread_entry+0x2a4>
        {

            /* Process the ARP queue.  */
            (ip_ptr -> nx_ip_arp_queue_process)(ip_ptr);
 8007e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e38:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8007e3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007e3e:	4798      	blx	r3
        }

        /* Check for an RARP receive packet event.  */
        if ((ip_events & NX_IP_RARP_REC_EVENT) && (ip_ptr -> nx_ip_rarp_queue_process))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f003 0320 	and.w	r3, r3, #32
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d009      	beq.n	8007e5e <_nx_ip_thread_entry+0x2c2>
 8007e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e4c:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d004      	beq.n	8007e5e <_nx_ip_thread_entry+0x2c2>
        {

            /* Process the RARP queue.  */
            (ip_ptr -> nx_ip_rarp_queue_process)(ip_ptr);
 8007e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e56:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 8007e5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007e5c:	4798      	blx	r3
        }

        /* Check for an IGMP message event.  */
        if (ip_events & NX_IP_IGMP_EVENT)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d004      	beq.n	8007e72 <_nx_ip_thread_entry+0x2d6>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_igmp_queue_process)(ip_ptr);
 8007e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e6a:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 8007e6e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007e70:	4798      	blx	r3
        }

        /* Check for an IGMP enable event.  */
        if (ip_events & NX_IP_IGMP_ENABLE_EVENT)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d035      	beq.n	8007ee8 <_nx_ip_thread_entry+0x34c>
        {

            /* Call the associated driver for this IP instance to register the "all hosts"
               multicast address.  */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e80:	e02f      	b.n	8007ee2 <_nx_ip_thread_entry+0x346>
            {
                /* Enable the hardware for IGMP for all valid interfaces. */
                if (ip_ptr -> nx_ip_interface[i].nx_interface_valid)
 8007e82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e86:	4613      	mov	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	011b      	lsls	r3, r3, #4
 8007e8e:	440b      	add	r3, r1
 8007e90:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d020      	beq.n	8007edc <_nx_ip_thread_entry+0x340>
                {
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
 8007e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e9c:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 8007e9e:	2308      	movs	r3, #8
 8007ea0:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 8007ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ea6:	61bb      	str	r3, [r7, #24]
                    /*lint -e{835} -e{845} suppress operating on zero. */
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 8007ea8:	4b46      	ldr	r3, [pc, #280]	; (8007fc4 <_nx_ip_thread_entry+0x428>)
 8007eaa:	61fb      	str	r3, [r7, #28]
                    driver_request.nx_ip_driver_interface            =   &(ip_ptr -> nx_ip_interface[i]);
 8007eac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ebc:	4413      	add	r3, r2
 8007ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_MULTICAST_JOIN, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8007ec0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ec2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	011b      	lsls	r3, r3, #4
 8007ecc:	440b      	add	r3, r1
 8007ece:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f107 0210 	add.w	r2, r7, #16
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4798      	blx	r3
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8007edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ede:	3301      	adds	r3, #1
 8007ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d0cc      	beq.n	8007e82 <_nx_ip_thread_entry+0x2e6>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        /* Check for an IP unfragment event.  */
        if (ip_events & NX_IP_UNFRAG_EVENT)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f003 0302 	and.w	r3, r3, #2
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d009      	beq.n	8007f06 <_nx_ip_thread_entry+0x36a>
        {

            /* Process the IP fragment reassemble, if fragment has been enabled.  */
            if (ip_ptr -> nx_ip_fragment_assembly)
 8007ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ef4:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d004      	beq.n	8007f06 <_nx_ip_thread_entry+0x36a>
            {
                (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
 8007efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007efe:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8007f02:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007f04:	4798      	blx	r3
            }
        }

#ifndef NX_DISABLE_IPV4
        /* Check for an ICMP message event.  */
        if (ip_events & NX_IP_ICMP_EVENT)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d004      	beq.n	8007f1a <_nx_ip_thread_entry+0x37e>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_icmp_queue_process)(ip_ptr);
 8007f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f12:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8007f16:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007f18:	4798      	blx	r3
        }
#endif /* NX_DISABLE_IPV4 */

        /* Check for a deferred processing request from the driver.  */
        if (ip_events & NX_IP_DRIVER_DEFERRED_EVENT)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d033      	beq.n	8007f8c <_nx_ip_thread_entry+0x3f0>
        {

            /* Go through each valid interface. */
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 8007f24:	2300      	movs	r3, #0
 8007f26:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f28:	e02d      	b.n	8007f86 <_nx_ip_thread_entry+0x3ea>
            {
                if (ip_ptr -> nx_ip_interface[index].nx_interface_valid)
 8007f2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f2e:	4613      	mov	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	011b      	lsls	r3, r3, #4
 8007f36:	440b      	add	r3, r1
 8007f38:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d01e      	beq.n	8007f80 <_nx_ip_thread_entry+0x3e4>
                {

                    /* Yes, there is a deferred processing event from the driver. The only valid information
                       fields are the IP pointer and the command.  */
                    driver_request.nx_ip_driver_ptr =        ip_ptr;
 8007f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f44:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 8007f46:	2312      	movs	r3, #18
 8007f48:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[index]);
 8007f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	011b      	lsls	r3, r3, #4
 8007f54:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007f58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f5a:	4413      	add	r3, r2
 8007f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    driver_request.nx_ip_driver_return_ptr = &foo;
 8007f5e:	f107 0308 	add.w	r3, r7, #8
 8007f62:	627b      	str	r3, [r7, #36]	; 0x24

                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 8007f64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	440b      	add	r3, r1
 8007f72:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f107 0210 	add.w	r2, r7, #16
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	4798      	blx	r3
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 8007f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f82:	3301      	adds	r3, #1
 8007f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0ce      	beq.n	8007f2a <_nx_ip_thread_entry+0x38e>
                }
            }
        }

        /* Check for a deferred TCP cleanup processing request from the driver.  */
        if (ip_events & NX_IP_TCP_CLEANUP_DEFERRED)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d004      	beq.n	8007fa0 <_nx_ip_thread_entry+0x404>
        {

            /* Yes, there is a deferred cleanup processing event. Call the TCP deferred cleanup
               processing function.  */
            (ip_ptr -> nx_tcp_deferred_cleanup_check)(ip_ptr);
 8007f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f98:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 8007f9c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007f9e:	4798      	blx	r3
        }

        /* Check for a link status change request from the driver.  */
        if (ip_events & NX_IP_LINK_STATUS_EVENT)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f43f ae81 	beq.w	8007cae <_nx_ip_thread_entry+0x112>
        {

            /* Yes, there is a link status change  event. Call the deferred link status processing function. */
            _nx_ip_deferred_link_status_process(ip_ptr);
 8007fac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007fae:	f7fe fdc1 	bl	8006b34 <_nx_ip_deferred_link_status_process>
 8007fb2:	e67c      	b.n	8007cae <_nx_ip_thread_entry+0x112>
                continue;
 8007fb4:	bf00      	nop
 8007fb6:	e67a      	b.n	8007cae <_nx_ip_thread_entry+0x112>
                continue;
 8007fb8:	bf00      	nop
 8007fba:	e678      	b.n	8007cae <_nx_ip_thread_entry+0x112>
                continue;
 8007fbc:	bf00      	nop
 8007fbe:	e676      	b.n	8007cae <_nx_ip_thread_entry+0x112>
                continue;
 8007fc0:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007fc2:	e674      	b.n	8007cae <_nx_ip_thread_entry+0x112>
 8007fc4:	5e000001 	.word	0x5e000001

08007fc8 <_nx_ipv4_option_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ipv4_option_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08a      	sub	sp, #40	; 0x28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]

NX_IPV4_HEADER *ip_header_ptr;
UCHAR          *option_ptr;
ULONG           ip_option_length;
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
ULONG           ip_normal_length = 20;
 8007fd2:	2314      	movs	r3, #20
 8007fd4:	61bb      	str	r3, [r7, #24]
#endif /* NX_DISABLE_ICMPV4_ERROR_MESSAGE */
UINT            index = 0;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	623b      	str	r3, [r7, #32]
UCHAR           op_type;
UCHAR           op_length;
UCHAR           op_timestamp_offset;
UCHAR           op_timestamp_overflow;
UCHAR           op_timestamp_flags;
UINT            op_timestamp_counter = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	61fb      	str	r3, [r7, #28]

    /* Set the IPv4 header and IPv4 option pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	617b      	str	r3, [r7, #20]
    option_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	3314      	adds	r3, #20
 8007fea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate the IPv4 option length.  */
    ip_option_length = ((((ip_header_ptr -> nx_ip_header_word_0 & NX_IP_LENGTH_MASK) >> 24) - NX_IP_NORMAL_LENGTH) & 0xFF) * (ULONG)sizeof(ULONG);
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	0e1b      	lsrs	r3, r3, #24
 8007ff2:	f003 030f 	and.w	r3, r3, #15
 8007ff6:	3b05      	subs	r3, #5
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	613b      	str	r3, [r7, #16]

    /* Loop to process the IPv4 option.  */
    while (index < ip_option_length)
 8007ffe:	e0a3      	b.n	8008148 <_nx_ipv4_option_process+0x180>
    {

        /* Get the option type.  */
        op_type = *option_ptr;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	73fb      	strb	r3, [r7, #15]

        /* Process the option type. */
        switch (op_type)
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	2b44      	cmp	r3, #68	; 0x44
 800800a:	d010      	beq.n	800802e <_nx_ipv4_option_process+0x66>
 800800c:	2b44      	cmp	r3, #68	; 0x44
 800800e:	f300 8082 	bgt.w	8008116 <_nx_ipv4_option_process+0x14e>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <_nx_ipv4_option_process+0x54>
 8008016:	2b01      	cmp	r3, #1
 8008018:	d002      	beq.n	8008020 <_nx_ipv4_option_process+0x58>
                return(NX_FALSE);
            }
            break;
        }
        default:
            break;
 800801a:	e07c      	b.n	8008116 <_nx_ipv4_option_process+0x14e>
            return(NX_TRUE);
 800801c:	2301      	movs	r3, #1
 800801e:	e099      	b.n	8008154 <_nx_ipv4_option_process+0x18c>
            option_ptr++;
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	3301      	adds	r3, #1
 8008024:	627b      	str	r3, [r7, #36]	; 0x24
            index++;
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	3301      	adds	r3, #1
 800802a:	623b      	str	r3, [r7, #32]
            continue;
 800802c:	e08c      	b.n	8008148 <_nx_ipv4_option_process+0x180>
            op_timestamp_counter++;
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	3301      	adds	r3, #1
 8008032:	61fb      	str	r3, [r7, #28]
            if (op_timestamp_counter > 1)
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d90b      	bls.n	8008052 <_nx_ipv4_option_process+0x8a>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	4413      	add	r3, r2
 8008040:	3302      	adds	r3, #2
 8008042:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7fe f9de 	bl	800640a <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800804e:	2300      	movs	r3, #0
 8008050:	e080      	b.n	8008154 <_nx_ipv4_option_process+0x18c>
            op_length = *(option_ptr + 1);
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	785b      	ldrb	r3, [r3, #1]
 8008056:	73bb      	strb	r3, [r7, #14]
            op_timestamp_offset = *(option_ptr + 2);
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	789b      	ldrb	r3, [r3, #2]
 800805c:	737b      	strb	r3, [r7, #13]
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	3303      	adds	r3, #3
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	091b      	lsrs	r3, r3, #4
 8008066:	733b      	strb	r3, [r7, #12]
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	3303      	adds	r3, #3
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	f003 030f 	and.w	r3, r3, #15
 8008072:	72fb      	strb	r3, [r7, #11]
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 8008074:	7bbb      	ldrb	r3, [r7, #14]
 8008076:	2b07      	cmp	r3, #7
 8008078:	d908      	bls.n	800808c <_nx_ipv4_option_process+0xc4>
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	2b28      	cmp	r3, #40	; 0x28
 800807e:	d805      	bhi.n	800808c <_nx_ipv4_option_process+0xc4>
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00b      	beq.n	80080a4 <_nx_ipv4_option_process+0xdc>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	4413      	add	r3, r2
 8008092:	3302      	adds	r3, #2
 8008094:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7fe f9b5 	bl	800640a <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 80080a0:	2300      	movs	r3, #0
 80080a2:	e057      	b.n	8008154 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_offset < 5) || ((op_timestamp_offset % 2) == 0))
 80080a4:	7b7b      	ldrb	r3, [r7, #13]
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	d905      	bls.n	80080b6 <_nx_ipv4_option_process+0xee>
 80080aa:	7b7b      	ldrb	r3, [r7, #13]
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10b      	bne.n	80080ce <_nx_ipv4_option_process+0x106>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 3));
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	4413      	add	r3, r2
 80080bc:	3303      	adds	r3, #3
 80080be:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7fe f9a0 	bl	800640a <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 80080ca:	2300      	movs	r3, #0
 80080cc:	e042      	b.n	8008154 <_nx_ipv4_option_process+0x18c>
            if (op_timestamp_overflow == 15)
 80080ce:	7b3b      	ldrb	r3, [r7, #12]
 80080d0:	2b0f      	cmp	r3, #15
 80080d2:	d10b      	bne.n	80080ec <_nx_ipv4_option_process+0x124>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	4413      	add	r3, r2
 80080da:	3304      	adds	r3, #4
 80080dc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7fe f991 	bl	800640a <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 80080e8:	2300      	movs	r3, #0
 80080ea:	e033      	b.n	8008154 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_flags != 0) && (op_timestamp_flags != 1) && (op_timestamp_flags != 3))
 80080ec:	7afb      	ldrb	r3, [r7, #11]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d013      	beq.n	800811a <_nx_ipv4_option_process+0x152>
 80080f2:	7afb      	ldrb	r3, [r7, #11]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d010      	beq.n	800811a <_nx_ipv4_option_process+0x152>
 80080f8:	7afb      	ldrb	r3, [r7, #11]
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d00d      	beq.n	800811a <_nx_ipv4_option_process+0x152>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 80080fe:	69ba      	ldr	r2, [r7, #24]
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	4413      	add	r3, r2
 8008104:	3304      	adds	r3, #4
 8008106:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7fe f97c 	bl	800640a <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8008112:	2300      	movs	r3, #0
 8008114:	e01e      	b.n	8008154 <_nx_ipv4_option_process+0x18c>
            break;
 8008116:	bf00      	nop
 8008118:	e000      	b.n	800811c <_nx_ipv4_option_process+0x154>
            break;
 800811a:	bf00      	nop
        }

        /* Get the option length.  */
        op_length = *(option_ptr + 1);
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	73bb      	strb	r3, [r7, #14]

        /* Check for invalid option length.
           RFC 791: The option-length octet counts the option-type octet and the 
           option-length octet as well as the option-data octets.  */
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d905      	bls.n	8008134 <_nx_ipv4_option_process+0x16c>
 8008128:	7bba      	ldrb	r2, [r7, #14]
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	4413      	add	r3, r2
 800812e:	693a      	ldr	r2, [r7, #16]
 8008130:	429a      	cmp	r2, r3
 8008132:	d201      	bcs.n	8008138 <_nx_ipv4_option_process+0x170>
        {
            return(NX_FALSE);
 8008134:	2300      	movs	r3, #0
 8008136:	e00d      	b.n	8008154 <_nx_ipv4_option_process+0x18c>
        }

        /* Move to the next top level option. */
        option_ptr += op_length;
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800813c:	4413      	add	r3, r2
 800813e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Update the index.  */
        index += op_length;
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	6a3a      	ldr	r2, [r7, #32]
 8008144:	4413      	add	r3, r2
 8008146:	623b      	str	r3, [r7, #32]
    while (index < ip_option_length)
 8008148:	6a3a      	ldr	r2, [r7, #32]
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	429a      	cmp	r2, r3
 800814e:	f4ff af57 	bcc.w	8008000 <_nx_ipv4_option_process+0x38>
    }

    /* Return NX_TRUE.  */
    return(NX_TRUE);
 8008152:	2301      	movs	r3, #1
}
 8008154:	4618      	mov	r0, r3
 8008156:	3728      	adds	r7, #40	; 0x28
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <_nx_ipv4_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv4_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b098      	sub	sp, #96	; 0x60
 8008160:	af02      	add	r7, sp, #8
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
NX_INTERFACE   *if_ptr;
NX_UDP_HEADER  *udp_header_ptr;
UINT            dest_port;
UINT            option_processed;
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
UINT            compute_checksum = 1;
 8008166:	2301      	movs	r3, #1
 8008168:	64bb      	str	r3, [r7, #72]	; 0x48
#endif /* NX_DISABLE_IP_RX_CHECKSUM */

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	653b      	str	r3, [r7, #80]	; 0x50
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, packet_ptr -> nx_packet_length, NX_TRACE_INTERNAL_EVENTS, 0, 0);


    /* Pick up the first word in the IP header. */
    val = ip_header_ptr -> nx_ip_header_word_0;
 8008170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	647b      	str	r3, [r7, #68]	; 0x44

    /* Convert to host byte order. */
    NX_CHANGE_ULONG_ENDIAN(val);
 8008176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008178:	ba1b      	rev	r3, r3
 800817a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain packet length. */
    pkt_length = val & NX_LOWER_16_MASK;
 800817c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800817e:	b29b      	uxth	r3, r3
 8008180:	643b      	str	r3, [r7, #64]	; 0x40

    /* Make sure the IP length matches the packet length.  Some Ethernet devices
       add padding to small packets, which results in a discrepancy between the
       packet length and the IP header length.  */
    if (packet_ptr -> nx_packet_length != pkt_length)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008188:	429a      	cmp	r2, r3
 800818a:	d066      	beq.n	800825a <_nx_ipv4_packet_receive+0xfe>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < pkt_length)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008192:	429a      	cmp	r2, r3
 8008194:	d90d      	bls.n	80081b2 <_nx_ipv4_packet_receive+0x56>
            /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Invalid packet length, just release it.  */
            _nx_packet_release(packet_ptr);
 80081aa:	6838      	ldr	r0, [r7, #0]
 80081ac:	f000 fd9a 	bl	8008ce4 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 80081b0:	e233      	b.n	800861a <_nx_ipv4_packet_receive+0x4be>
        }

        /* Calculate the difference in the length.  */
        delta =  packet_ptr -> nx_packet_length - pkt_length;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Adjust the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081c2:	1ad2      	subs	r2, r2, r3
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 80081c8:	e044      	b.n	8008254 <_nx_ipv4_packet_receive+0xf8>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d107      	bne.n	80081e2 <_nx_ipv4_packet_receive+0x86>
            {

                /* No, packet is not chained, simply adjust the append pointer in the packet.  */
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081d8:	425b      	negs	r3, r3
 80081da:	441a      	add	r2, r3
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	60da      	str	r2, [r3, #12]

                /* Break out of the loop, since the adjustment is complete.  */
                break;
 80081e0:	e03b      	b.n	800825a <_nx_ipv4_packet_receive+0xfe>
            }

            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 80081e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ea:	68da      	ldr	r2, [r3, #12]
 80081ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	461a      	mov	r2, r3
 80081f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d207      	bcs.n	800820a <_nx_ipv4_packet_receive+0xae>
            {

                /* Yes, simply adjust the append pointer of the last packet in the chain.  */
                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 80081fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008200:	425b      	negs	r3, r3
 8008202:	441a      	add	r2, r3
 8008204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008206:	60da      	str	r2, [r3, #12]

                /* Get out of the loop, since the adjustment is complete.  */
                break;
 8008208:	e027      	b.n	800825a <_nx_ipv4_packet_receive+0xfe>
            }
            else
            {

                /* Adjust the delta by the amount in the last packet.  */
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 800820a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800820c:	68da      	ldr	r2, [r3, #12]
 800820e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	461a      	mov	r2, r3
 8008216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008218:	1a9b      	subs	r3, r3, r2
 800821a:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Find the packet before the last packet.  */
                before_last_packet =  packet_ptr;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 8008220:	e002      	b.n	8008228 <_nx_ipv4_packet_receive+0xcc>
                {

                    /* Move to the next packet in the chain.  */
                    before_last_packet =  before_last_packet -> nx_packet_next;
 8008222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 8008228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800822e:	429a      	cmp	r2, r3
 8008230:	d1f7      	bne.n	8008222 <_nx_ipv4_packet_receive+0xc6>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 8008232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008234:	2200      	movs	r2, #0
 8008236:	605a      	str	r2, [r3, #4]

                /* Determine if the packet is still chained.  */
                if (packet_ptr != before_last_packet)
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800823c:	429a      	cmp	r2, r3
 800823e:	d003      	beq.n	8008248 <_nx_ipv4_packet_receive+0xec>
                {

                    /* Yes, the packet is still chained, setup the last packet pointer.  */
                    packet_ptr -> nx_packet_last =  before_last_packet;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008244:	619a      	str	r2, [r3, #24]
 8008246:	e002      	b.n	800824e <_nx_ipv4_packet_receive+0xf2>
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2200      	movs	r2, #0
 800824c:	619a      	str	r2, [r3, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 800824e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008250:	f000 fd48 	bl	8008ce4 <_nx_packet_release>
        while (delta)
 8008254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1b7      	bne.n	80081ca <_nx_ipv4_packet_receive+0x6e>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Get the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Obtain IP header length. */
    ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 8008260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008262:	0e1b      	lsrs	r3, r3, #24
 8008264:	f003 030f 	and.w	r3, r3, #15
 8008268:	637b      	str	r3, [r7, #52]	; 0x34
    /* Check for minimal packet length. The check is done after the endian swapping
       since the compiler may possibly be able to optimize the lookup of
       "nx_packet_length" and therefore reduce the amount of work performing these
       size checks. The endian logic is okay since packets must always have
       payloads greater than the IP header in size.  */
    if ((packet_ptr -> nx_packet_length <= (ip_header_length << 2)) ||
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800826e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	429a      	cmp	r2, r3
 8008274:	d902      	bls.n	800827c <_nx_ipv4_packet_receive+0x120>
 8008276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008278:	2b04      	cmp	r3, #4
 800827a:	d80d      	bhi.n	8008298 <_nx_ipv4_packet_receive+0x13c>
        /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_packets++;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	635a      	str	r2, [r3, #52]	; 0x34

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8008290:	6838      	ldr	r0, [r7, #0]
 8008292:	f000 fd27 	bl	8008ce4 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8008296:	e1c0      	b.n	800861a <_nx_ipv4_packet_receive+0x4be>
    }
#endif

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (if_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_RX_CHECKSUM)
 8008298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d001      	beq.n	80082a8 <_nx_ipv4_packet_receive+0x14c>
    {
        compute_checksum = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	64bb      	str	r3, [r7, #72]	; 0x48
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    if (compute_checksum == 1)
 80082a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d124      	bne.n	80082f8 <_nx_ipv4_packet_receive+0x19c>
    {


        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* length is the size of IP header, including options */
                                           (UINT)(ip_header_length << 2),
 80082ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b0:	009a      	lsls	r2, r3, #2
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 80082b2:	2300      	movs	r3, #0
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	2300      	movs	r3, #0
 80082b8:	2104      	movs	r1, #4
 80082ba:	6838      	ldr	r0, [r7, #0]
 80082bc:	f7fe fa12 	bl	80066e4 <_nx_ip_checksum_compute>
 80082c0:	4603      	mov	r3, r0
 80082c2:	633b      	str	r3, [r7, #48]	; 0x30
                                           /* IPv4 header checksum doesn't care src/dest addresses */
                                           NULL, NULL);
        checksum =  ~checksum & NX_LOWER_16_MASK;
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	43db      	mvns	r3, r3
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the checksum again.  */
        if (checksum)
 80082cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d012      	beq.n	80082f8 <_nx_ipv4_packet_receive+0x19c>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP checksum error.  */
            ip_ptr -> nx_ip_receive_checksum_errors++;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Checksum error, just release it.  */
            _nx_packet_release(packet_ptr);
 80082f0:	6838      	ldr	r0, [r7, #0]
 80082f2:	f000 fcf7 	bl	8008ce4 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 80082f6:	e190      	b.n	800861a <_nx_ipv4_packet_receive+0x4be>
    /* IP receive checksum processing is disabled... just check for and remove if
       necessary the IP option words.  */

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 80082f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	ba1a      	rev	r2, r3
 80082fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008300:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8008302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	ba1a      	rev	r2, r3
 8008308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800830a:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800830c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	ba1a      	rev	r2, r3
 8008312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008314:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8008316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	ba1a      	rev	r2, r3
 800831c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800831e:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8008320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	ba1a      	rev	r2, r3
 8008326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008328:	611a      	str	r2, [r3, #16]
    }
#endif /* NX_ENABLE_SOURCE_ADDRESS_CHECK */

    /* Determine if there are options in the IP header that make the length greater
       than the default length.  */
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 800832a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832c:	2b05      	cmp	r3, #5
 800832e:	d949      	bls.n	80083c4 <_nx_ipv4_packet_receive+0x268>
    {

        /* Process the IPv4 option.  */
        option_processed = _nx_ipv4_option_process(ip_ptr, packet_ptr);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7ff fe48 	bl	8007fc8 <_nx_ipv4_option_process>
 8008338:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the status.  */
        if (option_processed == NX_FALSE)
 800833a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833c:	2b00      	cmp	r3, #0
 800833e:	d108      	bne.n	8008352 <_nx_ipv4_packet_receive+0x1f6>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* IPv4 option error, toss the packet!  */
            _nx_packet_release(packet_ptr);
 800834a:	6838      	ldr	r0, [r7, #0]
 800834c:	f000 fcca 	bl	8008ce4 <_nx_packet_release>

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 8008350:	e163      	b.n	800861a <_nx_ipv4_packet_receive+0x4be>
        }

        /* Setup a pointer to the last option word.  */
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 8008352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008354:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008358:	3b01      	subs	r3, #1
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800835e:	4413      	add	r3, r2
 8008360:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Remove the option words prior to handling the IP header.  */
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	1f1a      	subs	r2, r3, #4
 8008366:	62ba      	str	r2, [r7, #40]	; 0x28
 8008368:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800836a:	6912      	ldr	r2, [r2, #16]
 800836c:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	1f1a      	subs	r2, r3, #4
 8008372:	62ba      	str	r2, [r7, #40]	; 0x28
 8008374:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008376:	68d2      	ldr	r2, [r2, #12]
 8008378:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_2;
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	1f1a      	subs	r2, r3, #4
 800837e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008380:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008382:	6892      	ldr	r2, [r2, #8]
 8008384:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	1f1a      	subs	r2, r3, #4
 800838a:	62ba      	str	r2, [r7, #40]	; 0x28
 800838c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800838e:	6852      	ldr	r2, [r2, #4]
 8008390:	601a      	str	r2, [r3, #0]
        *word_ptr = (ULONG)(((ip_header_ptr -> nx_ip_header_word_0) & (~NX_IP_LENGTH_MASK)) | NX_IP_VERSION);
 8008392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f023 439e 	bic.w	r3, r3, #1325400064	; 0x4f000000
 800839a:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 800839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a0:	601a      	str	r2, [r3, #0]

        /* Update the ip_header_ptr and the packet and the packet prepend pointer, ip header pointer and length.  */
        /*lint -e{929} -e{740} -e{826} suppress cast from pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)word_ptr;
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	653b      	str	r3, [r7, #80]	; 0x50

        /*lint -e{928} suppress cast from pointer to pointer, since it is necessary  */
        packet_ptr -> nx_packet_prepend_ptr = (UCHAR *)word_ptr;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083aa:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	635a      	str	r2, [r3, #52]	; 0x34
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ba:	3b05      	subs	r3, #5
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	1ad2      	subs	r2, r2, r3
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	625a      	str	r2, [r3, #36]	; 0x24
    }
#endif

    /* Determine if the IP datagram is for this IP address or a broadcast IP on this
       network.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 80083c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083c6:	691a      	ldr	r2, [r3, #16]
 80083c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d02f      	beq.n	8008430 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for incoming IP address of zero.  Incoming IP address of zero should
           be received regardless of our current IP address.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 80083d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083d2:	691b      	ldr	r3, [r3, #16]
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d02b      	beq.n	8008430 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for IP broadcast.  */
        (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 80083d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083da:	691a      	ldr	r2, [r3, #16]
 80083dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	401a      	ands	r2, r3
          if_ptr -> nx_interface_ip_network) &&
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	69db      	ldr	r3, [r3, #28]
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d10a      	bne.n	8008400 <_nx_ipv4_packet_receive+0x2a4>
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 80083ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ec:	691a      	ldr	r2, [r3, #16]
 80083ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	43db      	mvns	r3, r3
 80083f4:	401a      	ands	r2, r3
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	43db      	mvns	r3, r3
          if_ptr -> nx_interface_ip_network) &&
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d017      	beq.n	8008430 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for limited broadcast.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8008400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008402:	691b      	ldr	r3, [r3, #16]
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 8008404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008408:	d012      	beq.n	8008430 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for loopback address.  */
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800840a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800840c:	691b      	ldr	r3, [r3, #16]
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800840e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8008412:	d303      	bcc.n	800841c <_nx_ipv4_packet_receive+0x2c0>
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 8008414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008416:	691b      	ldr	r3, [r3, #16]
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8008418:	2b00      	cmp	r3, #0
 800841a:	da09      	bge.n	8008430 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for valid Multicast address.  */
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
 800841c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7fe f923 	bl	8006670 <_nx_igmp_multicast_check>
 800842a:	4603      	mov	r3, r0
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 800842c:	2b00      	cmp	r3, #0
 800842e:	d076      	beq.n	800851e <_nx_ipv4_packet_receive+0x3c2>
    {

        /* Determine if this packet is fragmented.  If so, place it on the deferred processing
           queue.  The input packet will then be processed by an IP system thread.  */
        if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_FRAGMENT_MASK)
 8008430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008438:	2b00      	cmp	r3, #0
 800843a:	d046      	beq.n	80084ca <_nx_ipv4_packet_receive+0x36e>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive fragments count.  */
            ip_ptr -> nx_ip_total_fragments_received++;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	669a      	str	r2, [r3, #104]	; 0x68
#ifdef NX_ENABLE_LOW_WATERMARK
            if (ip_ptr -> nx_ip_fragment_assembly &&
                (packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_available >=
                 packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_low_watermark))
#else
            if (ip_ptr -> nx_ip_fragment_assembly)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d033      	beq.n	80084b8 <_nx_ipv4_packet_receive+0x35c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008450:	f3ef 8310 	mrs	r3, PRIMASK
 8008454:	617b      	str	r3, [r7, #20]
    return(posture);
 8008456:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008458:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800845a:	b672      	cpsid	i
    return(int_posture);
 800845c:	693b      	ldr	r3, [r7, #16]

                /* Yes, fragmenting is available.  Place the packet on the incoming
                   fragment queue.  */

                /* Disable interrupts.  */
                TX_DISABLE
 800845e:	61bb      	str	r3, [r7, #24]

                /* Determine if the queue is empty.  */
                if (ip_ptr -> nx_ip_received_fragment_head)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00c      	beq.n	8008484 <_nx_ipv4_packet_receive+0x328>
                {

                    /* Reassembly queue is not empty, add this packet to the end of
                       the queue.  */
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	61da      	str	r2, [r3, #28]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	2200      	movs	r2, #0
 8008478:	61da      	str	r2, [r3, #28]
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 8008482:	e00a      	b.n	800849a <_nx_ipv4_packet_receive+0x33e>
                else
                {

                    /* Reassembly queue is empty.  Just setup the head and tail pointers
                       to point to this packet.  */
                    ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                    packet_ptr -> nx_packet_queue_next =      NX_NULL;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2200      	movs	r2, #0
 8008498:	61da      	str	r2, [r3, #28]
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f383 8810 	msr	PRIMASK, r3
}
 80084a4:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
                /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80084ac:	2200      	movs	r2, #0
 80084ae:	2102      	movs	r1, #2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f003 f8f5 	bl	800b6a0 <_tx_event_flags_set>
                /* Fragmentation has not been enabled, toss the packet!  */
                _nx_packet_release(packet_ptr);
            }

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 80084b6:	e0b0      	b.n	800861a <_nx_ipv4_packet_receive+0x4be>
                ip_ptr -> nx_ip_receive_packets_dropped++;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	64da      	str	r2, [r3, #76]	; 0x4c
                _nx_packet_release(packet_ptr);
 80084c2:	6838      	ldr	r0, [r7, #0]
 80084c4:	f000 fc0e 	bl	8008ce4 <_nx_packet_release>
            return;
 80084c8:	e0a7      	b.n	800861a <_nx_ipv4_packet_receive+0x4be>
        }

        /* Determine what protocol the current IP datagram is.  */
        protocol =  (ip_header_ptr -> nx_ip_header_word_2 >> 16) & 0xFF;
 80084ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	0c1b      	lsrs	r3, r3, #16
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the IP header from the packet.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f103 0214 	add.w	r2, r3, #20
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	609a      	str	r2, [r3, #8]

        /* Adjust the length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	f1a3 0214 	sub.w	r2, r3, #20
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

        /* Increment the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered++;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	621a      	str	r2, [r3, #32]

        /* Increment the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	441a      	add	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	625a      	str	r2, [r3, #36]	; 0x24
#endif
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 8008504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7fe fb73 	bl	8006bf4 <_nx_ip_dispatch_process>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	f000 8082 	beq.w	800861a <_nx_ipv4_packet_receive+0x4be>
        {
            _nx_packet_release(packet_ptr);
 8008516:	6838      	ldr	r0, [r7, #0]
 8008518:	f000 fbe4 	bl	8008ce4 <_nx_packet_release>
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 800851c:	e07d      	b.n	800861a <_nx_ipv4_packet_receive+0x4be>
    }
    /* Try to receive the DHCP message before release this packet.
       NetX should receive the unicast DHCP message when interface IP address is zero.  */

    /* Check if this IP interface has IP address.  */
    else if (if_ptr -> nx_interface_ip_address == 0)
 800851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d15a      	bne.n	80085dc <_nx_ipv4_packet_receive+0x480>
    {

        /* Determine what protocol the current IP datagram is.  */
        protocol =  ip_header_ptr -> nx_ip_header_word_2 & NX_IP_PROTOCOL_MASK;
 8008526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800852e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check if this packet is UDP message.  */
        if (protocol == NX_IP_UDP)
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8008536:	d137      	bne.n	80085a8 <_nx_ipv4_packet_receive+0x44c>
        {

            /* Remove the IP header from the packet.  */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f103 0214 	add.w	r2, r3, #20
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	609a      	str	r2, [r3, #8]

            /* Adjust the length.  */
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	f1a3 0214 	sub.w	r2, r3, #20
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

            /* Increment the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered++;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	621a      	str	r2, [r3, #32]

            /* Increment the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	441a      	add	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	625a      	str	r2, [r3, #36]	; 0x24
#endif

            /* Pickup the pointer to the head of the UDP packet.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	623b      	str	r3, [r7, #32]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	ba1a      	rev	r2, r3
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	601a      	str	r2, [r3, #0]

            /* Pickup the destination UDP port.  */
            dest_port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 8008578:	6a3b      	ldr	r3, [r7, #32]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	b29b      	uxth	r3, r3
 800857e:	61fb      	str	r3, [r7, #28]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	ba1a      	rev	r2, r3
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	601a      	str	r2, [r3, #0]

            /* Check if this packet is DHCP message.  */
            if (dest_port == 68)
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	2b44      	cmp	r3, #68	; 0x44
 800858e:	d10b      	bne.n	80085a8 <_nx_ipv4_packet_receive+0x44c>
            {
                if (ip_ptr -> nx_ip_udp_packet_receive)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008596:	2b00      	cmp	r3, #0
 8008598:	d006      	beq.n	80085a8 <_nx_ipv4_packet_receive+0x44c>
                {

                    /* Yes, dispatch it to the appropriate UDP handler if present.  */
                    (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	4798      	blx	r3

                    return;
 80085a6:	e038      	b.n	800861a <_nx_ipv4_packet_receive+0x4be>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Decrement the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered--;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a1b      	ldr	r3, [r3, #32]
 80085ac:	1e5a      	subs	r2, r3, #1
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	621a      	str	r2, [r3, #32]

        /* Decrement the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	1ad2      	subs	r2, r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c4:	1c5a      	adds	r2, r3, #1
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 80085d4:	6838      	ldr	r0, [r7, #0]
 80085d6:	f000 fb85 	bl	8008ce4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 80085da:	e01e      	b.n	800861a <_nx_ipv4_packet_receive+0x4be>
    }
    else if (ip_ptr -> nx_ip_forward_packet_process)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00b      	beq.n	80085fe <_nx_ipv4_packet_receive+0x4a2>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packets forwarded counter.  */
        ip_ptr -> nx_ip_packets_forwarded++;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif

        /* The packet is not for this IP instance so call the
           forward IP packet processing routine.  */
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	4798      	blx	r3
 80085fc:	e00d      	b.n	800861a <_nx_ipv4_packet_receive+0x4be>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 8008612:	6838      	ldr	r0, [r7, #0]
 8008614:	f000 fb66 	bl	8008ce4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8008618:	bf00      	nop
    }
}
 800861a:	3758      	adds	r7, #88	; 0x58
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <_nx_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                          ULONG packet_type, ULONG wait_option)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08c      	sub	sp, #48	; 0x30
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Make sure the packet_type does not go beyond nx_packet_data_end. */
    if (pool_ptr -> nx_packet_pool_payload_size < packet_type)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	429a      	cmp	r2, r3
 8008636:	d901      	bls.n	800863c <_nx_packet_allocate+0x1c>
    {
        return(NX_INVALID_PARAMETERS);
 8008638:	234d      	movs	r3, #77	; 0x4d
 800863a:	e0b1      	b.n	80087a0 <_nx_packet_allocate+0x180>
    }

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2200      	movs	r2, #0
 8008640:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008642:	f3ef 8310 	mrs	r3, PRIMASK
 8008646:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008648:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800864a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800864c:	b672      	cpsid	i
    return(int_posture);
 800864e:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_ALLOCATE, pool_ptr, 0, packet_type, pool_ptr -> nx_packet_pool_available, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Disable interrupts to get a packet from the pool.  */
    TX_DISABLE
 8008650:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there is an available packet.  */
    if (pool_ptr -> nx_packet_pool_available)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d03d      	beq.n	80086d6 <_nx_packet_allocate+0xb6>
    {

        /* Yes, a packet is available.  Decrement the available count.  */
        pool_ptr -> nx_packet_pool_available--;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	1e5a      	subs	r2, r3, #1
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	609a      	str	r2, [r3, #8]

        /* Pickup the current packet pointer.  */
        work_ptr =  pool_ptr -> nx_packet_pool_available_list;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	623b      	str	r3, [r7, #32]

        /* Modify the available list to point at the next packet in the pool. */
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	69da      	ldr	r2, [r3, #28]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	61da      	str	r2, [r3, #28]

        /* Setup various fields for this packet.  */
        work_ptr -> nx_packet_queue_next =   NX_NULL;
 8008672:	6a3b      	ldr	r3, [r7, #32]
 8008674:	2200      	movs	r2, #0
 8008676:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
        work_ptr -> nx_packet_next =         NX_NULL;
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	2200      	movs	r2, #0
 800867c:	605a      	str	r2, [r3, #4]
        work_ptr -> nx_packet_last =         NX_NULL;
 800867e:	6a3b      	ldr	r3, [r7, #32]
 8008680:	2200      	movs	r2, #0
 8008682:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr -> nx_packet_length =       0;
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	2200      	movs	r2, #0
 8008688:	625a      	str	r2, [r3, #36]	; 0x24
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	691a      	ldr	r2, [r3, #16]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	441a      	add	r2, r3
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	609a      	str	r2, [r3, #8]
        work_ptr -> nx_packet_append_ptr =   work_ptr -> nx_packet_prepend_ptr;
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	60da      	str	r2, [r3, #12]
        work_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800869e:	6a3b      	ldr	r3, [r7, #32]
 80086a0:	2200      	movs	r2, #0
 80086a2:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        work_ptr -> nx_packet_interface_capability_flag = 0;
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	2200      	movs	r2, #0
 80086a8:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
        /* Set the TCP queue to the value that indicates it has been allocated.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80086b0:	621a      	str	r2, [r3, #32]
        work_ptr -> nx_packet_ipsec_sa_ptr = NX_NULL;
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Initialize the IP version field */
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	2204      	movs	r2, #4
 80086b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#endif /* !NX_DISABLE_IPV4  */

        /* Initialize the IP identification flag.  */
        work_ptr -> nx_packet_identical_copy = NX_FALSE;
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Initialize the IP header length. */
        work_ptr -> nx_packet_ip_header_length = 0;
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
#ifdef NX_ENABLE_THREAD
        work_ptr -> nx_packet_type = 0;
#endif /* NX_ENABLE_THREAD  */

        /* Place the new packet pointer in the return destination.  */
        *packet_ptr =  work_ptr;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	6a3a      	ldr	r2, [r7, #32]
 80086ce:	601a      	str	r2, [r3, #0]

        /* Set status to success.  */
        status =  NX_SUCCESS;
 80086d0:	2300      	movs	r3, #0
 80086d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086d4:	e05d      	b.n	8008792 <_nx_packet_allocate+0x172>
    else
    {

#ifndef NX_DISABLE_PACKET_INFO
        /* Increment the packet pool empty request count.  */
        pool_ptr -> nx_packet_pool_empty_requests++;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	1c5a      	adds	r2, r3, #1
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	611a      	str	r2, [r3, #16]
#endif

        /* Determine if the request specifies suspension.  */
        if (wait_option)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d053      	beq.n	800878e <_nx_packet_allocate+0x16e>

            /* Prepare for suspension of this thread.  */

#ifndef NX_DISABLE_PACKET_INFO
            /* Increment the packet pool empty request suspension count.  */
            pool_ptr -> nx_packet_pool_empty_suspensions++;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	615a      	str	r2, [r3, #20]
#endif

            /* Pickup thread pointer.  */
            thread_ptr =  _tx_thread_current_ptr;
 80086f0:	4b2d      	ldr	r3, [pc, #180]	; (80087a8 <_nx_packet_allocate+0x188>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	4a2c      	ldr	r2, [pc, #176]	; (80087ac <_nx_packet_allocate+0x18c>)
 80086fa:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this pool control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (void *)pool_ptr;
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Save the return packet pointer address as well.  */
            thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	67da      	str	r2, [r3, #124]	; 0x7c

            /* Save the packet type (or prepend offset) so this can be added
               after a new packet becomes available.  */
            thread_ptr -> tx_thread_suspend_info =  packet_type;
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	679a      	str	r2, [r3, #120]	; 0x78

            /* Setup suspension list.  */
            if (pool_ptr -> nx_packet_pool_suspension_list)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d012      	beq.n	800873c <_nx_packet_allocate+0x11c>
            {

                /* This list is not NULL, add current thread to the end. */
                thread_ptr -> tx_thread_suspended_next =
                    pool_ptr -> nx_packet_pool_suspension_list;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =
                    (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008722:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	675a      	str	r2, [r3, #116]	; 0x74
                ((pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800872e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008730:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr;
                (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008738:	675a      	str	r2, [r3, #116]	; 0x74
 800873a:	e008      	b.n	800874e <_nx_packet_allocate+0x12e>
            else
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008740:	62da      	str	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =            thread_ptr;
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008746:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =        thread_ptr;
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800874c:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            pool_ptr -> nx_packet_pool_suspended_count++;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8008758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875a:	220c      	movs	r2, #12
 800875c:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	2201      	movs	r2, #1
 8008762:	639a      	str	r2, [r3, #56]	; 0x38

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008764:	4b12      	ldr	r3, [pc, #72]	; (80087b0 <_nx_packet_allocate+0x190>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	3301      	adds	r3, #1
 800876a:	4a11      	ldr	r2, [pc, #68]	; (80087b0 <_nx_packet_allocate+0x190>)
 800876c:	6013      	str	r3, [r2, #0]

            /* Save the timeout value.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	64da      	str	r2, [r3, #76]	; 0x4c
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f383 8810 	msr	PRIMASK, r3
}
 800877e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8008780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008782:	f004 fb8d 	bl	800cea0 <_tx_thread_system_suspend>
                NX_PACKET_DEBUG(__FILE__, __LINE__, *packet_ptr);
            }
#endif /* NX_ENABLE_PACKET_DEBUG_INFO */

            /* Return the completion status.  */
            return(thread_ptr -> tx_thread_suspend_status);
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800878c:	e008      	b.n	80087a0 <_nx_packet_allocate+0x180>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  NX_NO_PACKET;
 800878e:	2301      	movs	r3, #1
 8008790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008794:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f383 8810 	msr	PRIMASK, r3
}
 800879c:	bf00      	nop

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_ALLOCATE, 0, *packet_ptr, 0, 0);

    /* Return completion status.  */
    return(status);
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3730      	adds	r7, #48	; 0x30
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	20014884 	.word	0x20014884
 80087ac:	08008a59 	.word	0x08008a59
 80087b0:	2001491c 	.word	0x2001491c

080087b4 <_nx_packet_copy>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_copy(NX_PACKET *packet_ptr, NX_PACKET **new_packet_ptr,
                      NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08e      	sub	sp, #56	; 0x38
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	603b      	str	r3, [r7, #0]
ULONG                  trace_timestamp;
#endif


    /* Default the return packet pointer to NULL.  */
    *new_packet_ptr =  NX_NULL;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2200      	movs	r2, #0
 80087c6:	601a      	str	r2, [r3, #0]

    /* Default the first packet to TRUE.  */
    first_packet = NX_TRUE;
 80087c8:	2301      	movs	r3, #1
 80087ca:	62bb      	str	r3, [r7, #40]	; 0x28

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_COPY, packet_ptr, 0, pool_ptr, wait_option, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Determine if there is anything to copy.  */
    if (packet_ptr -> nx_packet_length == 0)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <_nx_packet_copy+0x24>
    {

        /* Empty source packet, return an error.  */
        return(NX_INVALID_PACKET);
 80087d4:	2312      	movs	r3, #18
 80087d6:	e079      	b.n	80088cc <_nx_packet_copy+0x118>
    }

    /* Allocate a new packet from the default packet pool supplied.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 80087d8:	f107 0114 	add.w	r1, r7, #20
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	2200      	movs	r2, #0
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7ff ff1d 	bl	8008620 <_nx_packet_allocate>
 80087e6:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the packet was not allocated.  */
    if (status != NX_SUCCESS)
 80087e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <_nx_packet_copy+0x3e>
    {

        /* Return the error code from the packet allocate routine.  */
        return(status);
 80087ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f0:	e06c      	b.n	80088cc <_nx_packet_copy+0x118>
    }

    /* Copy the packet interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized by _nx_packet_allocate. */
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80087f8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* FEATURE_NX_IPV6 */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

    /* Copy the packet interface capability. */
    work_ptr -> nx_packet_interface_capability_flag = packet_ptr -> nx_packet_interface_capability_flag;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008800:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef NX_IPSEC_ENABLE
    work_ptr -> nx_packet_ipsec_sa_ptr = packet_ptr -> nx_packet_ipsec_sa_ptr;
#endif /* NX_IPSEC_ENABLE */

    /* Save the source packet pointer.  */
    source_ptr =  packet_ptr;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	627b      	str	r3, [r7, #36]	; 0x24
    do
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check if it is the first packet.  */
        if (first_packet == NX_TRUE)
 8008806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008808:	2b01      	cmp	r3, #1
 800880a:	d110      	bne.n	800882e <_nx_packet_copy+0x7a>

            /* Yes, it is, copied the data beginning at data starting position.  */

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68da      	ldr	r2, [r3, #12]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 8008818:	6978      	ldr	r0, [r7, #20]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6919      	ldr	r1, [r3, #16]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a3a      	ldr	r2, [r7, #32]
 8008826:	f000 f855 	bl	80088d4 <_nx_packet_data_append>
 800882a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800882c:	e00f      	b.n	800884e <_nx_packet_copy+0x9a>
        else
        {

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 800883a:	6978      	ldr	r0, [r7, #20]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6899      	ldr	r1, [r3, #8]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a3a      	ldr	r2, [r7, #32]
 8008848:	f000 f844 	bl	80088d4 <_nx_packet_data_append>
 800884c:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        /* Determine if there was an error in the data append.  */
        if (status != NX_SUCCESS)
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008850:	2b00      	cmp	r3, #0
 8008852:	d005      	beq.n	8008860 <_nx_packet_copy+0xac>
        {

            /* An error is present, release the new packet.  */
            _nx_packet_release(work_ptr);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fa44 	bl	8008ce4 <_nx_packet_release>

            /* Return the error code from the packet data append service.  */
            return(status);
 800885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885e:	e035      	b.n	80088cc <_nx_packet_copy+0x118>
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the packet chain.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	60fb      	str	r3, [r7, #12]

        /* Set the first packet to FALSE.  */
        first_packet = NX_FALSE;
 8008866:	2300      	movs	r3, #0
 8008868:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (packet_ptr);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1ca      	bne.n	8008806 <_nx_packet_copy+0x52>
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Adjust the prepend pointer and data length.  */
    /*lint --e{946} --e{947} --e{732} suppress pointer subtraction, since it is necessary. */
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	61fb      	str	r3, [r7, #28]
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	6919      	ldr	r1, [r3, #16]
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	69fa      	ldr	r2, [r7, #28]
 8008884:	440a      	add	r2, r1
 8008886:	609a      	str	r2, [r3, #8]
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	69fa      	ldr	r2, [r7, #28]
 8008890:	1a8a      	subs	r2, r1, r2
 8008892:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the ip_header information. */
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	61bb      	str	r3, [r7, #24]
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	6919      	ldr	r1, [r3, #16]
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	440a      	add	r2, r1
 80088aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Determine if the packet copy was successful.  */
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 80088ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d005      	beq.n	80088c4 <_nx_packet_copy+0x110>
    {

        /* An error is present, release the new packet.  */
        _nx_packet_release(work_ptr);
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 fa12 	bl	8008ce4 <_nx_packet_release>

        /* Return an error code.  */
        return(NX_INVALID_PACKET);
 80088c0:	2312      	movs	r3, #18
 80088c2:	e003      	b.n	80088cc <_nx_packet_copy+0x118>
    }
    else
    {

        /* Everything is okay, return the new packet pointer.  */
        *new_packet_ptr =  work_ptr;
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	601a      	str	r2, [r3, #0]

        /* Update the trace event with the status.  */
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_COPY, 0, work_ptr, 0, 0);

        /* Return success status.  */
        return(NX_SUCCESS);
 80088ca:	2300      	movs	r3, #0
    }
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3730      	adds	r7, #48	; 0x30
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <_nx_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                             NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08c      	sub	sp, #48	; 0x30
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	603b      	str	r3, [r7, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
UINT       status;                 /* Return status              */
NX_PACKET *new_list_ptr;           /* Head of new list pointer   */
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 80088e2:	2300      	movs	r3, #0
 80088e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_APPEND, packet_ptr, data_start, data_size, pool_ptr, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Calculate the number of bytes available at the end of the supplied packet.  */
    if (packet_ptr -> nx_packet_last)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d016      	beq.n	800891c <_nx_packet_data_append+0x48>
    {

        /* More than one packet.  Walk the packet chain starting at the last packet
           to calculate the remaining bytes.  */
        available_bytes =  0;
 80088ee:	2300      	movs	r3, #0
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
        work_ptr =  packet_ptr -> nx_packet_last;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	617b      	str	r3, [r7, #20]

            /* Calculate the available bytes in this packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	695a      	ldr	r2, [r3, #20]
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	4413      	add	r3, r2
 8008908:	627b      	str	r3, [r7, #36]	; 0x24

            /* Remember the last packet.  */
            last_packet =  work_ptr;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Move to the next packet.   There typically won't be another packet, but just in
               case the logic is here for it!  */
            work_ptr =  work_ptr -> nx_packet_next;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	617b      	str	r3, [r7, #20]
        } while (work_ptr);
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1ee      	bne.n	80088f8 <_nx_packet_data_append+0x24>
 800891a:	e005      	b.n	8008928 <_nx_packet_data_append+0x54>
#endif /* NX_DISABLE_PACKET_CHAIN */
    {

        /* Just calculate the number of bytes available in the first packet.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	695a      	ldr	r2, [r3, #20]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Determine if any new packets are required to satisfy this request. */
    if (available_bytes < data_size)
 8008928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	429a      	cmp	r2, r3
 800892e:	d247      	bcs.n	80089c0 <_nx_packet_data_append+0xec>
    {

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Setup a temporary head pointer.  */
        new_list_ptr =  NX_NULL;
 8008930:	2300      	movs	r3, #0
 8008932:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Loop to pickup enough packets to complete the append request.  */
        while (available_bytes < data_size)
 8008934:	e033      	b.n	800899e <_nx_packet_data_append+0xca>
        {

            /* Allocate a new packet.  */
            status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 8008936:	f107 0114 	add.w	r1, r7, #20
 800893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893c:	2200      	movs	r2, #0
 800893e:	6838      	ldr	r0, [r7, #0]
 8008940:	f7ff fe6e 	bl	8008620 <_nx_packet_allocate>
 8008944:	61b8      	str	r0, [r7, #24]

            /* Determine if an error is present.  */
            if (status)
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d007      	beq.n	800895c <_nx_packet_data_append+0x88>
            {

                /* Yes, an error is present.   */

                /* First release any packets that have been allocated so far.  */
                if (new_list_ptr)
 800894c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <_nx_packet_data_append+0x84>
                {
                    _nx_packet_release(new_list_ptr);
 8008952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008954:	f000 f9c6 	bl	8008ce4 <_nx_packet_release>
                }

                /* Return the error status to the caller of this service.  */
                return(status);
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	e078      	b.n	8008a4e <_nx_packet_data_append+0x17a>

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, work_ptr);

            /* No error is present.  Link the new packet to the temporary list being built.  */
            if (new_list_ptr)
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	2b00      	cmp	r3, #0
 8008960:	d012      	beq.n	8008988 <_nx_packet_data_append+0xb4>
            {

                /* Determine if there is already more than one packet on the list.  */
                if (new_list_ptr -> nx_packet_last)
 8008962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d007      	beq.n	800897a <_nx_packet_data_append+0xa6>
                {

                    /* Yes, link up the last packet to the new packet and update the
                       last pointer.  */
                    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized in _nx_packet_allocate. */
                    (new_list_ptr -> nx_packet_last) -> nx_packet_next =  work_ptr;
 800896a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	605a      	str	r2, [r3, #4]
                    new_list_ptr -> nx_packet_last =  work_ptr;
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008976:	619a      	str	r2, [r3, #24]
 8008978:	e008      	b.n	800898c <_nx_packet_data_append+0xb8>
                else
                {

                    /* Second packet allocated.  Just setup the last and next in the
                       head pointer.  */
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897e:	619a      	str	r2, [r3, #24]
                    new_list_ptr -> nx_packet_next =  work_ptr;
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008984:	605a      	str	r2, [r3, #4]
 8008986:	e001      	b.n	800898c <_nx_packet_data_append+0xb8>
            }
            else
            {

                /* Just setup the temporary list head.  */
                new_list_ptr =  work_ptr;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	62fb      	str	r3, [r7, #44]	; 0x2c
               is in the new packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            /*lint -e{613} suppress possible use of null pointer, since "work_ptr" was set in _nx_packet_allocate. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	695a      	ldr	r2, [r3, #20]
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	4413      	add	r3, r2
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
        while (available_bytes < data_size)
 800899e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d3c7      	bcc.n	8008936 <_nx_packet_data_append+0x62>
        }

        /* At this point, all the necessary packets have been allocated and are present
           on the temporary list.  We need to link this new list to the end of the supplied
           packet.  */
        if (last_packet)
 80089a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <_nx_packet_data_append+0xe0>
        {

            /* Already more than one packet.  Add the new packet list to the end.  */
            last_packet -> nx_packet_next =  new_list_ptr;
 80089ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089b0:	605a      	str	r2, [r3, #4]
 80089b2:	e002      	b.n	80089ba <_nx_packet_data_append+0xe6>
        }
        else
        {

            /* Link the new packet list to the head packet.  */
            packet_ptr -> nx_packet_next =  new_list_ptr;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear the last packet that was used to maintain the new list.  */
        /*lint -e{613} suppress possible use of null pointer, since "new_list_ptr" was set in previous loop. */
        new_list_ptr -> nx_packet_last =  NX_NULL;
 80089ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089bc:	2200      	movs	r2, #0
 80089be:	619a      	str	r2, [r3, #24]
        return(NX_SIZE_ERROR);
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Setup the new data length in the packet.  */
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	441a      	add	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Now copy the supplied data buffer at the end of the packet.  */
    source_ptr =  (UCHAR *)data_start;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	61fb      	str	r3, [r7, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
    if (packet_ptr -> nx_packet_last)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <_nx_packet_data_append+0x10c>
    {
        work_ptr =    packet_ptr -> nx_packet_last;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	617b      	str	r3, [r7, #20]
 80089de:	e032      	b.n	8008a46 <_nx_packet_data_append+0x172>
    }
    else
    {
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr =    packet_ptr;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	617b      	str	r3, [r7, #20]
#ifndef NX_DISABLE_PACKET_CHAIN
    }
    while (data_size)
 80089e4:	e02f      	b.n	8008a46 <_nx_packet_data_append+0x172>
    {

        /* Determine the amount of memory to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	695a      	ldr	r2, [r3, #20]
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	461a      	mov	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d202      	bcs.n	80089fe <_nx_packet_data_append+0x12a>
        {
            copy_size =  data_size;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	623b      	str	r3, [r7, #32]
 80089fc:	e005      	b.n	8008a0a <_nx_packet_data_append+0x136>
        }
        else
        {

            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            copy_size =  (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	695a      	ldr	r2, [r3, #20]
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	623b      	str	r3, [r7, #32]
#else
        copy_size = data_size;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Copy the data into the current packet buffer.  */
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size); /* Use case of memcpy is verified.  lgtm[cpp/banned-api-usage-required-any] */
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	6a3a      	ldr	r2, [r7, #32]
 8008a10:	69f9      	ldr	r1, [r7, #28]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f005 fceb 	bl	800e3ee <memcpy>

        /* Adjust the remaining data size.  */
        data_size =  data_size - copy_size;
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	607b      	str	r3, [r7, #4]

        /* Update this packets append pointer.  */
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	68d9      	ldr	r1, [r3, #12]
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	6a3a      	ldr	r2, [r7, #32]
 8008a28:	440a      	add	r2, r1
 8008a2a:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Any more data left to append?  */
        if (data_size)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d009      	beq.n	8008a46 <_nx_packet_data_append+0x172>
        {

            /* Yes, there is more to move.  Update the source pointer, move the work pointer
               to the next packet in the chain and update the last packet pointer.  */
            source_ptr =  source_ptr + copy_size;
 8008a32:	69fa      	ldr	r2, [r7, #28]
 8008a34:	6a3b      	ldr	r3, [r7, #32]
 8008a36:	4413      	add	r3, r2
 8008a38:	61fb      	str	r3, [r7, #28]
            work_ptr =  work_ptr -> nx_packet_next;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	617b      	str	r3, [r7, #20]
            packet_ptr -> nx_packet_last =  work_ptr;
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	619a      	str	r2, [r3, #24]
    while (data_size)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1cc      	bne.n	80089e6 <_nx_packet_data_append+0x112>

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Return successful status.  */
    return(NX_SUCCESS);
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3730      	adds	r7, #48	; 0x30
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <_nx_packet_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_packet_pool_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
NX_PACKET_POOL *pool_ptr;   /* Working packet pool pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to packet pool control block.  */
    pool_ptr =  (NX_PACKET_POOL *)thread_ptr -> tx_thread_suspend_control_block;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a66:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a68:	f3ef 8310 	mrs	r3, PRIMASK
 8008a6c:	617b      	str	r3, [r7, #20]
    return(posture);
 8008a6e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008a70:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008a72:	b672      	cpsid	i
    return(int_posture);
 8008a74:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE
 8008a76:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d042      	beq.n	8008b06 <_nx_packet_pool_cleanup+0xae>
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d03f      	beq.n	8008b06 <_nx_packet_pool_cleanup+0xae>
        (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 8008a8a:	4a23      	ldr	r2, [pc, #140]	; (8008b18 <_nx_packet_pool_cleanup+0xc0>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d13a      	bne.n	8008b06 <_nx_packet_pool_cleanup+0xae>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d103      	bne.n	8008aa8 <_nx_packet_pool_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008aa6:	e012      	b.n	8008ace <_nx_packet_pool_cleanup+0x76>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer if necessary.  */
            if (pool_ptr -> nx_packet_pool_suspension_list == thread_ptr)
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d103      	bne.n	8008aba <_nx_packet_pool_cleanup+0x62>
            {
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	62da      	str	r2, [r3, #44]	; 0x2c
            }

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8008ac2:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008acc:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad2:	1e5a      	subs	r2, r3, #1
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008adc:	2b0c      	cmp	r3, #12
 8008ade:	d112      	bne.n	8008b06 <_nx_packet_pool_cleanup+0xae>

            /* Thread still suspended on the packet pool.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008ae8:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <_nx_packet_pool_cleanup+0xc4>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3301      	adds	r3, #1
 8008aee:	4a0b      	ldr	r2, [pc, #44]	; (8008b1c <_nx_packet_pool_cleanup+0xc4>)
 8008af0:	6013      	str	r3, [r2, #0]
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f383 8810 	msr	PRIMASK, r3
}
 8008afc:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f004 f8ce 	bl	800cca0 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8008b04:	e005      	b.n	8008b12 <_nx_packet_pool_cleanup+0xba>
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	f383 8810 	msr	PRIMASK, r3
}
 8008b10:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8008b12:	3720      	adds	r7, #32
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	5041434b 	.word	0x5041434b
 8008b1c:	2001491c 	.word	0x2001491c

08008b20 <_nx_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                             VOID *pool_start, ULONG pool_size)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b092      	sub	sp, #72	; 0x48
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	603b      	str	r3, [r7, #0]
CHAR           *payload_address;       /* Address of the first payload*/
VOID           *rounded_pool_start;    /* Rounded stating address     */


    /* Save the original payload size.  */
    original_payload_size =  payload_size;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	3303      	adds	r3, #3
 8008b36:	f023 0303 	bic.w	r3, r3, #3
 8008b3a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b40:	1ad2      	subs	r2, r2, r3
 8008b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b44:	4413      	add	r3, r2
 8008b46:	f023 0303 	bic.w	r3, r3, #3
 8008b4a:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the pool starting address. */
    pool_start = rounded_pool_start;
 8008b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4e:	603b      	str	r3, [r7, #0]

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 8008b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b52:	333c      	adds	r3, #60	; 0x3c
 8008b54:	633b      	str	r3, [r7, #48]	; 0x30

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	3303      	adds	r3, #3
 8008b5a:	f023 0303 	bic.w	r3, r3, #3
 8008b5e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 8008b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 8008b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	3303      	adds	r3, #3
 8008b70:	f023 0203 	bic.w	r2, r3, #3
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	607b      	str	r3, [r7, #4]

    /* Clear pool fields. */
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 8008b7a:	223c      	movs	r2, #60	; 0x3c
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f005 fbba 	bl	800e2f8 <memset>

    /* Setup the basic packet pool fields.  */
    pool_ptr -> nx_packet_pool_name =             name_ptr;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	605a      	str	r2, [r3, #4]
    pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	62da      	str	r2, [r3, #44]	; 0x2c
    pool_ptr -> nx_packet_pool_suspended_count =  0;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	631a      	str	r2, [r3, #48]	; 0x30
    pool_ptr -> nx_packet_pool_start =            (CHAR *)pool_start;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	621a      	str	r2, [r3, #32]
    pool_ptr -> nx_packet_pool_size =             pool_size;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ba0:	625a      	str	r2, [r3, #36]	; 0x24
    pool_ptr -> nx_packet_pool_payload_size =     original_payload_size;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ba6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Calculate the end of the pool's memory area.  */
    end_of_pool =  ((CHAR *)pool_start) + pool_size;
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bac:	4413      	add	r3, r2
 8008bae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Walk through the pool area, setting up the available packet list.  */
    packets =            0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	647b      	str	r3, [r7, #68]	; 0x44
    packet_ptr =         (CHAR *)rounded_pool_start;
 8008bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb6:	643b      	str	r3, [r7, #64]	; 0x40
    next_packet_ptr =    packet_ptr + (payload_size + header_size);
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	4413      	add	r3, r2
 8008bbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bc0:	4413      	add	r3, r2
 8008bc2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    while (next_packet_ptr <= end_of_pool)
 8008bc4:	e023      	b.n	8008c0e <_nx_packet_pool_create+0xee>
    {

        /* Yes, we have another packet.  Increment the packet count.  */
        packets++;
 8008bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bc8:	3301      	adds	r3, #1
 8008bca:	647b      	str	r3, [r7, #68]	; 0x44

        /* Setup the link to the next packet.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  (NX_PACKET *)next_packet_ptr;
 8008bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bd0:	61da      	str	r2, [r3, #28]

        /* Remember that this packet pool is the owner.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_pool_owner =  pool_ptr;
 8008bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	601a      	str	r2, [r3, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Clear the next packet pointer.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 8008bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bda:	2200      	movs	r2, #0
 8008bdc:	605a      	str	r2, [r3, #4]
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Mark the packet as free.  */
        /*lint -e{929} -e{923} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 8008bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008be0:	f04f 32ff 	mov.w	r2, #4294967295
 8008be4:	621a      	str	r2, [r3, #32]

        /* Setup the packet data pointers.  */
        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);
 8008be6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bea:	441a      	add	r2, r3
 8008bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bee:	611a      	str	r2, [r3, #16]

        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 8008bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf4:	4413      	add	r3, r2
 8008bf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bf8:	441a      	add	r2, r3
 8008bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bfc:	615a      	str	r2, [r3, #20]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, (NX_PACKET *)packet_ptr);

        /* Advance to the next packet.  */
        packet_ptr =   next_packet_ptr;
 8008bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c00:	643b      	str	r3, [r7, #64]	; 0x40

        /* Update the next packet pointer.  */
        next_packet_ptr =  packet_ptr + (payload_size + header_size);
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c06:	4413      	add	r3, r2
 8008c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c0a:	4413      	add	r3, r2
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (next_packet_ptr <= end_of_pool)
 8008c0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d9d7      	bls.n	8008bc6 <_nx_packet_pool_create+0xa6>
    }

    /* Backup to the last packet in the pool.  */
    packet_ptr =  packet_ptr - (payload_size + header_size);
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	4413      	add	r3, r2
 8008c1c:	425b      	negs	r3, r3
 8008c1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c20:	4413      	add	r3, r2
 8008c22:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the last packet's forward pointer to NULL.  */
    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  NX_NULL;
 8008c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c26:	2200      	movs	r2, #0
 8008c28:	61da      	str	r2, [r3, #28]

    /* Save the remaining information in the pool control packet.  */
    pool_ptr -> nx_packet_pool_available =  packets;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c2e:	609a      	str	r2, [r3, #8]
    pool_ptr -> nx_packet_pool_total =      packets;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c34:	60da      	str	r2, [r3, #12]

    /* Set the packet pool available list.  */
    pool_ptr -> nx_packet_pool_available_list =  (NX_PACKET *)pool_start;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	61da      	str	r2, [r3, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c40:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008c42:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8008c44:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c46:	b672      	cpsid	i
    return(int_posture);
 8008c48:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_POOL_CREATE, pool_ptr, payload_size, pool_start, pool_size, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts to place the packet pool on the created list.  */
    TX_DISABLE
 8008c4a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the packet pool ID to make it valid.  */
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4a19      	ldr	r2, [pc, #100]	; (8008cb4 <_nx_packet_pool_create+0x194>)
 8008c50:	601a      	str	r2, [r3, #0]

    /* Place the packet pool on the list of created packet pools.  First,
       check for an empty list.  */
    if (_nx_packet_pool_created_ptr)
 8008c52:	4b19      	ldr	r3, [pc, #100]	; (8008cb8 <_nx_packet_pool_create+0x198>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d012      	beq.n	8008c80 <_nx_packet_pool_create+0x160>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous;
 8008c5a:	4b17      	ldr	r3, [pc, #92]	; (8008cb8 <_nx_packet_pool_create+0x198>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c60:	623b      	str	r3, [r7, #32]

        /* Place the new packet pool in the list.  */
        _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 8008c62:	4b15      	ldr	r3, [pc, #84]	; (8008cb8 <_nx_packet_pool_create+0x198>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	639a      	str	r2, [r3, #56]	; 0x38
        tail_ptr -> nx_packet_pool_created_next =  pool_ptr;
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup this packet pool's created links.  */
        pool_ptr -> nx_packet_pool_created_previous =  tail_ptr;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6a3a      	ldr	r2, [r7, #32]
 8008c74:	639a      	str	r2, [r3, #56]	; 0x38
        pool_ptr -> nx_packet_pool_created_next =      _nx_packet_pool_created_ptr;
 8008c76:	4b10      	ldr	r3, [pc, #64]	; (8008cb8 <_nx_packet_pool_create+0x198>)
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8008c7e:	e008      	b.n	8008c92 <_nx_packet_pool_create+0x172>
    }
    else
    {

        /* The created packet pool list is empty.  Add packet pool to empty list.  */
        _nx_packet_pool_created_ptr =                  pool_ptr;
 8008c80:	4a0d      	ldr	r2, [pc, #52]	; (8008cb8 <_nx_packet_pool_create+0x198>)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6013      	str	r3, [r2, #0]
        pool_ptr -> nx_packet_pool_created_next =      pool_ptr;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	635a      	str	r2, [r3, #52]	; 0x34
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Increment the number of packet pools created.  */
    _nx_packet_pool_created_count++;
 8008c92:	4b0a      	ldr	r3, [pc, #40]	; (8008cbc <_nx_packet_pool_create+0x19c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3301      	adds	r3, #1
 8008c98:	4a08      	ldr	r2, [pc, #32]	; (8008cbc <_nx_packet_pool_create+0x19c>)
 8008c9a:	6013      	str	r3, [r2, #0]
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	f383 8810 	msr	PRIMASK, r3
}
 8008ca6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3748      	adds	r7, #72	; 0x48
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	5041434b 	.word	0x5041434b
 8008cb8:	20014830 	.word	0x20014830
 8008cbc:	20014834 	.word	0x20014834

08008cc0 <_nx_packet_pool_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _nx_packet_pool_initialize(VOID)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	af00      	add	r7, sp, #0

    /* Initialize the head pointer of the created packet pools list and the
       number of packet pools created.  */
    _nx_packet_pool_created_ptr =        NX_NULL;
 8008cc4:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <_nx_packet_pool_initialize+0x1c>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	601a      	str	r2, [r3, #0]
    _nx_packet_pool_created_count =      0;
 8008cca:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <_nx_packet_pool_initialize+0x20>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
}
 8008cd0:	bf00      	nop
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	20014830 	.word	0x20014830
 8008ce0:	20014834 	.word	0x20014834

08008ce4 <_nx_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_release(NX_PACKET *packet_ptr)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b08a      	sub	sp, #40	; 0x28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to free all packets chained together, not assuming they are
       from the same pool.  */
    while (packet_ptr)
 8008cec:	e0a5      	b.n	8008e3a <_nx_packet_release+0x156>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check to see if the packet is releasable.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a1b      	ldr	r3, [r3, #32]
 8008cf2:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8008cf6:	d011      	beq.n	8008d1c <_nx_packet_release+0x38>
        {

#ifndef NX_DISABLE_PACKET_INFO
            /* Pickup the pool pointer.  */
            pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	61fb      	str	r3, [r7, #28]

            /* Check for a good pool pointer...  error must be the packet!  */
            if ((pool_ptr) && (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d009      	beq.n	8008d18 <_nx_packet_release+0x34>
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a50      	ldr	r2, [pc, #320]	; (8008e4c <_nx_packet_release+0x168>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d104      	bne.n	8008d18 <_nx_packet_release+0x34>
            {

                /* Increment the packet pool invalid release error count.  */
                pool_ptr -> nx_packet_pool_invalid_releases++;
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	619a      	str	r2, [r3, #24]
            }
#endif

            /* Return an error indicating the packet could not be released.  */
            return(NX_PTR_ERROR);
 8008d18:	2307      	movs	r3, #7
 8008d1a:	e093      	b.n	8008e44 <_nx_packet_release+0x160>
        }
        /* End of packet check.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Pickup the next packet. */
        next_packet =  packet_ptr -> nx_packet_next;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d22:	f3ef 8310 	mrs	r3, PRIMASK
 8008d26:	617b      	str	r3, [r7, #20]
    return(posture);
 8008d28:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008d2a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d2c:	b672      	cpsid	i
    return(int_posture);
 8008d2e:	693b      	ldr	r3, [r7, #16]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Disable interrupts to put this packet back in the packet pool.  */
        TX_DISABLE
 8008d30:	623b      	str	r3, [r7, #32]

        /* Pickup the pool pointer.  */
        pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	61fb      	str	r3, [r7, #28]

        /* Determine if there are any threads suspended on the block pool.  */
        thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	61bb      	str	r3, [r7, #24]
        if (thread_ptr)
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d062      	beq.n	8008e0a <_nx_packet_release+0x126>
        {

            /* Remove the suspended thread from the list.  */

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d103      	bne.n	8008d56 <_nx_packet_release+0x72>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  NX_NULL;
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	2200      	movs	r2, #0
 8008d52:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d54:	e00d      	b.n	8008d72 <_nx_packet_release+0x8e>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8008d66:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008d70:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            pool_ptr -> nx_packet_pool_suspended_count--;
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d76:	1e5a      	subs	r2, r3, #1
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	631a      	str	r2, [r3, #48]	; 0x30

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008d82:	4b33      	ldr	r3, [pc, #204]	; (8008e50 <_nx_packet_release+0x16c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3301      	adds	r3, #1
 8008d88:	4a31      	ldr	r2, [pc, #196]	; (8008e50 <_nx_packet_release+0x16c>)
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f383 8810 	msr	PRIMASK, r3
}
 8008d96:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to look just like a new packet.  */
            packet_ptr -> nx_packet_queue_next  =  NX_NULL;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
            packet_ptr -> nx_packet_next        =  NX_NULL;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	605a      	str	r2, [r3, #4]
            packet_ptr -> nx_packet_last        =  NX_NULL;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
            packet_ptr -> nx_packet_length      =  0;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	691a      	ldr	r2, [r3, #16]
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008db8:	441a      	add	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	609a      	str	r2, [r3, #8]
            packet_ptr -> nx_packet_append_ptr  =  packet_ptr -> nx_packet_prepend_ptr;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	689a      	ldr	r2, [r3, #8]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	60da      	str	r2, [r3, #12]
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            packet_ptr -> nx_packet_interface_capability_flag = 0;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
            /* Set the TCP queue to the value that indicates it has been allocated.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8008dd8:	621a      	str	r2, [r3, #32]
            /* Clear the ipsec state. */
            packet_ptr -> nx_packet_ipsec_state = 0;
#endif /* NX_IPSEC_ENABLE */

            /* Clear the IP version.  */
            packet_ptr -> nx_packet_ip_version  =  0;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            /* Clear the IP identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_FALSE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

            /* Initialize the IP header length. */
            packet_ptr -> nx_packet_ip_header_length = 0;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	601a      	str	r2, [r3, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8008e02:	69b8      	ldr	r0, [r7, #24]
 8008e04:	f003 ff4c 	bl	800cca0 <_tx_thread_system_resume>
 8008e08:	e015      	b.n	8008e36 <_nx_packet_release+0x152>

            /* No thread is suspended for a memory block.  */

            /* Mark the packet as free.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e10:	621a      	str	r2, [r3, #32]

            /* Put the packet back in the available list.  */
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	69da      	ldr	r2, [r3, #28]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	61da      	str	r2, [r3, #28]

            /* Adjust the head pointer.  */
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	61da      	str	r2, [r3, #28]

            /* Increment the count of available blocks.  */
            pool_ptr -> nx_packet_pool_available++;
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	1c5a      	adds	r2, r3, #1
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	609a      	str	r2, [r3, #8]
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f383 8810 	msr	PRIMASK, r3
}
 8008e34:	bf00      	nop
            TX_RESTORE
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the list.  */
        packet_ptr =  next_packet;
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	607b      	str	r3, [r7, #4]
    while (packet_ptr)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f47f af56 	bne.w	8008cee <_nx_packet_release+0xa>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Return completion status.  */
    return(NX_SUCCESS);
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3728      	adds	r7, #40	; 0x28
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	5041434b 	.word	0x5041434b
 8008e50:	2001491c 	.word	0x2001491c

08008e54 <_nx_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_transmit_release(NX_PACKET *packet_ptr)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8008e60:	617b      	str	r3, [r7, #20]
    return(posture);
 8008e62:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008e64:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e66:	b672      	cpsid	i
    return(int_posture);
 8008e68:	693b      	ldr	r3, [r7, #16]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_TRANSMIT_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 8008e6a:	61bb      	str	r3, [r7, #24]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the packet is a queued TCP data packet.  Such packets cannot be released
       immediately, since they may need to be resent.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8008e74:	d025      	beq.n	8008ec2 <_nx_packet_transmit_release+0x6e>
        (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_FREE)))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 8008e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7e:	d020      	beq.n	8008ec2 <_nx_packet_transmit_release+0x6e>
    {

        /* Yes, this is indeed a TCP packet.  Just mark this with the NX_DRIVER_TX_DONE
           value to let the TCP layer know it is no longer queued up.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f04f 32dd 	mov.w	r2, #3722304989	; 0xdddddddd
 8008e86:	61da      	str	r2, [r3, #28]

        /* Remove the IP header and adjust the length.  */
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8008e92:	441a      	add	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8008ea2:	1a9a      	subs	r2, r3, r2
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Reset the IP header length. */
        packet_ptr -> nx_packet_ip_header_length = 0;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f383 8810 	msr	PRIMASK, r3
}
 8008eba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  NX_SUCCESS;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	61fb      	str	r3, [r7, #28]
 8008ec0:	e009      	b.n	8008ed6 <_nx_packet_transmit_release+0x82>
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	f383 8810 	msr	PRIMASK, r3
}
 8008ecc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual packet release function.  */
        status =  _nx_packet_release(packet_ptr);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f7ff ff08 	bl	8008ce4 <_nx_packet_release>
 8008ed4:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8008ed6:	69fb      	ldr	r3, [r7, #28]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <_nx_rarp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_rarp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b088      	sub	sp, #32
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008eea:	f3ef 8310 	mrs	r3, PRIMASK
 8008eee:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008ef0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008ef2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008ef4:	b672      	cpsid	i
    return(int_posture);
 8008ef6:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8008ef8:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if RARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_rarp_queue_process)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d110      	bne.n	8008f26 <_nx_rarp_packet_deferred_receive+0x46>

        /* RARP is not enabled.  */

#ifndef NX_DISABLE_RARP_INFO
        /* Increment the RARP invalid messages count...  */
        ip_ptr -> nx_ip_rarp_invalid_messages++;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f383 8810 	msr	PRIMASK, r3
}
 8008f1c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since RARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8008f1e:	6838      	ldr	r0, [r7, #0]
 8008f20:	f7ff fee0 	bl	8008ce4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8008f24:	e02f      	b.n	8008f86 <_nx_rarp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the RARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_rarp_deferred_received_packet_head)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d011      	beq.n	8008f54 <_nx_rarp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the RARP deferred queue.  */
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f383 8810 	msr	PRIMASK, r3
}
 8008f52:	e018      	b.n	8008f86 <_nx_rarp_packet_deferred_receive+0xa6>
    {

        /* Empty RARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the RARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_rarp_deferred_received_packet_head =  packet_ptr;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        packet_ptr -> nx_packet_queue_next =                  NX_NULL;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2200      	movs	r2, #0
 8008f68:	61da      	str	r2, [r3, #28]
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	f383 8810 	msr	PRIMASK, r3
}
 8008f74:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the RARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	2120      	movs	r1, #32
 8008f80:	4618      	mov	r0, r3
 8008f82:	f002 fb8d 	bl	800b6a0 <_tx_event_flags_set>
    }
}
 8008f86:	3720      	adds	r7, #32
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <_nx_system_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_system_initialize(VOID)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	af00      	add	r7, sp, #0

    /* Check whether or not system has been initialized? */
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 8008f90:	4b38      	ldr	r3, [pc, #224]	; (8009074 <_nx_system_initialize+0xe8>)
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	4b38      	ldr	r3, [pc, #224]	; (8009078 <_nx_system_initialize+0xec>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	431a      	orrs	r2, r3
 8008f9a:	4b38      	ldr	r3, [pc, #224]	; (800907c <_nx_system_initialize+0xf0>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	431a      	orrs	r2, r3
        _nx_system_build_options_3 | _nx_system_build_options_4 | _nx_system_build_options_5)
 8008fa0:	4b37      	ldr	r3, [pc, #220]	; (8009080 <_nx_system_initialize+0xf4>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	4b37      	ldr	r3, [pc, #220]	; (8009084 <_nx_system_initialize+0xf8>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4313      	orrs	r3, r2
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d15e      	bne.n	800906e <_nx_system_initialize+0xe2>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Call the packet pool initialization component for NetX.  */
    _nx_packet_pool_initialize();
 8008fb0:	f7ff fe86 	bl	8008cc0 <_nx_packet_pool_initialize>

    /* Call the IP component initialization.  */
    _nx_ip_initialize();
 8008fb4:	f7fe f9dc 	bl	8007370 <_nx_ip_initialize>

    /* Call the TCP component initialization.  */
    /*lint -e{522} suppress lack of side-effects.  */
    _nx_tcp_initialize();
 8008fb8:	f000 f866 	bl	8009088 <_nx_tcp_initialize>

    /* Setup the build options variables.  */
    _nx_system_build_options_1 = 0
 8008fbc:	4b2d      	ldr	r3, [pc, #180]	; (8009074 <_nx_system_initialize+0xe8>)
 8008fbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fc2:	601a      	str	r2, [r3, #0]

    /* Add the retry shift value to the options.  */
#if (NX_TCP_RETRY_SHIFT > 0xF)
    _nx_system_build_options_1 |=  0xF;
#else
    _nx_system_build_options_1 |=  NX_TCP_RETRY_SHIFT;
 8008fc4:	4b2b      	ldr	r3, [pc, #172]	; (8009074 <_nx_system_initialize+0xe8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a2a      	ldr	r2, [pc, #168]	; (8009074 <_nx_system_initialize+0xe8>)
 8008fca:	6013      	str	r3, [r2, #0]
#endif

#if (NX_IP_PERIODIC_RATE > 0xFFFFUL)
    _nx_system_build_options_2 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_2 =  ((ULONG)NX_IP_PERIODIC_RATE) << 16;
 8008fcc:	4b2a      	ldr	r3, [pc, #168]	; (8009078 <_nx_system_initialize+0xec>)
 8008fce:	f44f 02c8 	mov.w	r2, #6553600	; 0x640000
 8008fd2:	601a      	str	r2, [r3, #0]
#endif

#if (NX_ARP_EXPIRATION_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_EXPIRATION_RATE) << 8;
 8008fd4:	4b28      	ldr	r3, [pc, #160]	; (8009078 <_nx_system_initialize+0xec>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a27      	ldr	r2, [pc, #156]	; (8009078 <_nx_system_initialize+0xec>)
 8008fda:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_UPDATE_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_UPDATE_RATE);
 8008fdc:	4b26      	ldr	r3, [pc, #152]	; (8009078 <_nx_system_initialize+0xec>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f043 030a 	orr.w	r3, r3, #10
 8008fe4:	4a24      	ldr	r2, [pc, #144]	; (8009078 <_nx_system_initialize+0xec>)
 8008fe6:	6013      	str	r3, [r2, #0]

    /* Setup third option word.  */
#if (NX_TCP_ACK_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_3 =  ((ULONG)NX_TCP_ACK_TIMER_RATE) << 24;
 8008fe8:	4b24      	ldr	r3, [pc, #144]	; (800907c <_nx_system_initialize+0xf0>)
 8008fea:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
 8008fee:	601a      	str	r2, [r3, #0]
#endif
#if (NX_TCP_FAST_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_FAST_TIMER_RATE) << 16;
 8008ff0:	4b22      	ldr	r3, [pc, #136]	; (800907c <_nx_system_initialize+0xf0>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8008ff8:	4a20      	ldr	r2, [pc, #128]	; (800907c <_nx_system_initialize+0xf0>)
 8008ffa:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_TRANSMIT_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_TRANSMIT_TIMER_RATE) << 8;
 8008ffc:	4b1f      	ldr	r3, [pc, #124]	; (800907c <_nx_system_initialize+0xf0>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009004:	4a1d      	ldr	r2, [pc, #116]	; (800907c <_nx_system_initialize+0xf0>)
 8009006:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRY > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRY);
 8009008:	4b1c      	ldr	r3, [pc, #112]	; (800907c <_nx_system_initialize+0xf0>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f043 034b 	orr.w	r3, r3, #75	; 0x4b
 8009010:	4a1a      	ldr	r2, [pc, #104]	; (800907c <_nx_system_initialize+0xf0>)
 8009012:	6013      	str	r3, [r2, #0]

    /* Setup the fourth option word.  */
#if (NX_TCP_KEEPALIVE_INITIAL > 0xFFFFUL)
    _nx_system_build_options_4 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_4 =  ((ULONG)NX_TCP_KEEPALIVE_INITIAL) << 16;
 8009014:	4b1a      	ldr	r3, [pc, #104]	; (8009080 <_nx_system_initialize+0xf4>)
 8009016:	f04f 52e1 	mov.w	r2, #471859200	; 0x1c200000
 800901a:	601a      	str	r2, [r3, #0]
#endif
#if (NX_ARP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_4 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAXIMUM_RETRIES) << 8;
 800901c:	4b18      	ldr	r3, [pc, #96]	; (8009080 <_nx_system_initialize+0xf4>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 8009024:	4a16      	ldr	r2, [pc, #88]	; (8009080 <_nx_system_initialize+0xf4>)
 8009026:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_MAX_QUEUE_DEPTH > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF) << 4;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAX_QUEUE_DEPTH) << 4;
 8009028:	4b15      	ldr	r3, [pc, #84]	; (8009080 <_nx_system_initialize+0xf4>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009030:	4a13      	ldr	r2, [pc, #76]	; (8009080 <_nx_system_initialize+0xf4>)
 8009032:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRIES > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF);
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRIES);
 8009034:	4b12      	ldr	r3, [pc, #72]	; (8009080 <_nx_system_initialize+0xf4>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f043 030a 	orr.w	r3, r3, #10
 800903c:	4a10      	ldr	r2, [pc, #64]	; (8009080 <_nx_system_initialize+0xf4>)
 800903e:	6013      	str	r3, [r2, #0]

    /* Setup the fifth option word.  */
#if (NX_MAX_MULTICAST_GROUPS > 0xFF)
    _nx_system_build_options_5 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_5 =  ((ULONG)NX_MAX_MULTICAST_GROUPS) << 24;
 8009040:	4b10      	ldr	r3, [pc, #64]	; (8009084 <_nx_system_initialize+0xf8>)
 8009042:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8009046:	601a      	str	r2, [r3, #0]
#endif
#if (NX_MAX_LISTEN_REQUESTS > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_MAX_LISTEN_REQUESTS) << 16;
 8009048:	4b0e      	ldr	r3, [pc, #56]	; (8009084 <_nx_system_initialize+0xf8>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8009050:	4a0c      	ldr	r2, [pc, #48]	; (8009084 <_nx_system_initialize+0xf8>)
 8009052:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_RETRIES) << 8;
 8009054:	4b0b      	ldr	r3, [pc, #44]	; (8009084 <_nx_system_initialize+0xf8>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800905c:	4a09      	ldr	r2, [pc, #36]	; (8009084 <_nx_system_initialize+0xf8>)
 800905e:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_TX_QUEUE > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_TX_QUEUE);
 8009060:	4b08      	ldr	r3, [pc, #32]	; (8009084 <_nx_system_initialize+0xf8>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f043 0314 	orr.w	r3, r3, #20
 8009068:	4a06      	ldr	r2, [pc, #24]	; (8009084 <_nx_system_initialize+0xf8>)
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	e000      	b.n	8009070 <_nx_system_initialize+0xe4>
        return;
 800906e:	bf00      	nop
#endif
}
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20014838 	.word	0x20014838
 8009078:	2001483c 	.word	0x2001483c
 800907c:	20014840 	.word	0x20014840
 8009080:	20014844 	.word	0x20014844
 8009084:	20014848 	.word	0x20014848

08009088 <_nx_tcp_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_initialize(VOID)
{
 8009088:	b480      	push	{r7}
 800908a:	af00      	add	r7, sp, #0
}
 800908c:	bf00      	nop
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
	...

08009098 <_nx_udp_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b08a      	sub	sp, #40	; 0x28
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80090a8:	f3ef 8310 	mrs	r3, PRIMASK
 80090ac:	61bb      	str	r3, [r7, #24]
    return(posture);
 80090ae:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80090b0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80090b2:	b672      	cpsid	i
    return(int_posture);
 80090b4:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 80090b6:	623b      	str	r3, [r7, #32]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d043      	beq.n	8009148 <_nx_udp_bind_cleanup+0xb0>
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d040      	beq.n	8009148 <_nx_udp_bind_cleanup+0xb0>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 80090c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c8:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 80090ca:	4a24      	ldr	r2, [pc, #144]	; (800915c <_nx_udp_bind_cleanup+0xc4>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d13b      	bne.n	8009148 <_nx_udp_bind_cleanup+0xb0>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	2200      	movs	r2, #0
 80090d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_udp_socket_bound_previous;
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e0:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d103      	bne.n	80090f4 <_nx_udp_bind_cleanup+0x5c>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	2200      	movs	r2, #0
 80090f0:	661a      	str	r2, [r3, #96]	; 0x60
 80090f2:	e00d      	b.n	8009110 <_nx_udp_bind_cleanup+0x78>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009104:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800910e:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009114:	1e5a      	subs	r2, r3, #1
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	665a      	str	r2, [r3, #100]	; 0x64

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800911e:	2b0c      	cmp	r3, #12
 8009120:	d112      	bne.n	8009148 <_nx_udp_bind_cleanup+0xb0>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2223      	movs	r2, #35	; 0x23
 8009126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800912a:	4b0d      	ldr	r3, [pc, #52]	; (8009160 <_nx_udp_bind_cleanup+0xc8>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3301      	adds	r3, #1
 8009130:	4a0b      	ldr	r2, [pc, #44]	; (8009160 <_nx_udp_bind_cleanup+0xc8>)
 8009132:	6013      	str	r3, [r2, #0]
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f383 8810 	msr	PRIMASK, r3
}
 800913e:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f003 fdad 	bl	800cca0 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 8009146:	e005      	b.n	8009154 <_nx_udp_bind_cleanup+0xbc>
 8009148:	6a3b      	ldr	r3, [r7, #32]
 800914a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f383 8810 	msr	PRIMASK, r3
}
 8009152:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009154:	3728      	adds	r7, #40	; 0x28
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	55445020 	.word	0x55445020
 8009160:	2001491c 	.word	0x2001491c

08009164 <_nx_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_enable(NX_IP *ip_ptr)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Set the UDP packet receive function in the IP structure to indicate
       we are ready to receive UDP packets.  */
    ip_ptr -> nx_ip_udp_packet_receive =  _nx_udp_packet_receive;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a05      	ldr	r2, [pc, #20]	; (8009184 <_nx_udp_enable+0x20>)
 8009170:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	08009231 	.word	0x08009231

08009188 <_nx_udp_free_port_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b08a      	sub	sp, #40	; 0x28
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_FREE_PORT_FIND, ip_ptr, port, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Save the original port.  */
    starting_port =  port;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	61fb      	str	r3, [r7, #28]
    /* Loop through the UDP ports until a free entry is found.  */
    do
    {

        /* Calculate the hash index in the UDP port array of the associated IP instance.  */
        index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	0a1a      	lsrs	r2, r3, #8
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	4413      	add	r3, r2
 80091a0:	f003 031f 	and.w	r3, r3, #31
 80091a4:	61bb      	str	r3, [r7, #24]

        /* Obtain the IP mutex so we can figure out whether or not the port has already
           been bound to.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80091ac:	f04f 31ff 	mov.w	r1, #4294967295
 80091b0:	4618      	mov	r0, r3
 80091b2:	f002 fe0d 	bl	800bdd0 <_tx_mutex_get>

        /* Pickup the head of the UDP ports bound list.  */
        search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	32e0      	adds	r2, #224	; 0xe0
 80091bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c0:	623b      	str	r3, [r7, #32]

        /* Set the bound flag to false.  */
        bound =  NX_FALSE;
 80091c2:	2300      	movs	r3, #0
 80091c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if we need to perform a list search.  */
        if (search_ptr)
 80091c6:	6a3b      	ldr	r3, [r7, #32]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d010      	beq.n	80091ee <_nx_udp_free_port_find+0x66>
        {

            /* Walk through the circular list of UDP sockets that are already
               bound.  */
            end_ptr =     search_ptr;
 80091cc:	6a3b      	ldr	r3, [r7, #32]
 80091ce:	617b      	str	r3, [r7, #20]
            do
            {

                /* Determine if this entry is the same as the requested port.  */
                if (search_ptr -> nx_udp_socket_port == port)
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d102      	bne.n	80091e0 <_nx_udp_free_port_find+0x58>
                {

                    /* Set the bound flag.  */
                    bound =  NX_TRUE;
 80091da:	2301      	movs	r3, #1
 80091dc:	627b      	str	r3, [r7, #36]	; 0x24

                    /* Get out of the loop.  */
                    break;
 80091de:	e006      	b.n	80091ee <_nx_udp_free_port_find+0x66>
                }

                /* Move to the next entry in the list.  */
                search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 80091e0:	6a3b      	ldr	r3, [r7, #32]
 80091e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091e4:	623b      	str	r3, [r7, #32]
            } while (search_ptr != end_ptr);
 80091e6:	6a3a      	ldr	r2, [r7, #32]
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d1f0      	bne.n	80091d0 <_nx_udp_free_port_find+0x48>
            }
        }
#endif

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80091f4:	4618      	mov	r0, r3
 80091f6:	f003 f863 	bl	800c2c0 <_tx_mutex_put>

        /* Determine if the port is available.  */
        if (!bound)
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d104      	bne.n	800920a <_nx_udp_free_port_find+0x82>
        {

            /* Setup the return port number.  */
            *free_port_ptr =  port;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	601a      	str	r2, [r3, #0]

            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_FREE_PORT_FIND, 0, 0, port, 0);

            /* Return success.  */
            return(NX_SUCCESS);
 8009206:	2300      	movs	r3, #0
 8009208:	e00e      	b.n	8009228 <_nx_udp_free_port_find+0xa0>
        }

        /* Move to the next port.  */
        port++;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	3301      	adds	r3, #1
 800920e:	60bb      	str	r3, [r7, #8]

        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009216:	d302      	bcc.n	800921e <_nx_udp_free_port_find+0x96>
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 8009218:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800921c:	60bb      	str	r3, [r7, #8]
        }
    } while (starting_port != port);
 800921e:	69fa      	ldr	r2, [r7, #28]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	429a      	cmp	r2, r3
 8009224:	d1b8      	bne.n	8009198 <_nx_udp_free_port_find+0x10>

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
 8009226:	2345      	movs	r3, #69	; 0x45
}
 8009228:	4618      	mov	r0, r3
 800922a:	3728      	adds	r7, #40	; 0x28
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <_nx_udp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b094      	sub	sp, #80	; 0x50
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_UDP_INFO

    /* Increment the total UDP receive packets count.  */
    ip_ptr -> nx_ip_udp_packets_received++;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009240:	1c5a      	adds	r2, r3, #1
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_UDP_HEADER))
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924c:	2b07      	cmp	r3, #7
 800924e:	d80a      	bhi.n	8009266 <_nx_udp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800925e:	6838      	ldr	r0, [r7, #0]
 8009260:	f7ff fd40 	bl	8008ce4 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8009264:	e1d4      	b.n	8009610 <_nx_udp_packet_receive+0x3e0>
    }
#endif

    /* Pickup the pointer to the head of the UDP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800926c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	ba1a      	rev	r2, r3
 8009272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009274:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	ba1a      	rev	r2, r3
 800927c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800927e:	605a      	str	r2, [r3, #4]

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK))
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	0c1b      	lsrs	r3, r3, #16
 800928a:	429a      	cmp	r2, r3
 800928c:	d20a      	bcs.n	80092a4 <_nx_udp_packet_receive+0x74>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009294:	1c5a      	adds	r2, r3, #1
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800929c:	6838      	ldr	r0, [r7, #0]
 800929e:	f7ff fd21 	bl	8008ce4 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 80092a2:	e1b5      	b.n	8009610 <_nx_udp_packet_receive+0x3e0>
    /* Recompute the packet length in case TFC padding is present. */
    packet_ptr -> nx_packet_length = (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK);
#endif /* NX_IPSEC_ENABLE */

    /* Pickup the destination UDP port.  */
    port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 80092a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	647b      	str	r3, [r7, #68]	; 0x44

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 80092ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092ae:	0a1a      	lsrs	r2, r3, #8
 80092b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b2:	4413      	add	r3, r2
 80092b4:	f003 031f 	and.w	r3, r3, #31
 80092b8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if the caller is a thread. If so, we should use the protection mutex
       to avoid having the port list examined while we are traversing it. If this routine
       is called from an ISR nothing needs to be done since bind/unbind are not allowed
       from ISRs.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 80092ba:	4b8d      	ldr	r3, [pc, #564]	; (80094f0 <_nx_udp_packet_receive+0x2c0>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d010      	beq.n	80092e4 <_nx_udp_packet_receive+0xb4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80092c2:	f3ef 8305 	mrs	r3, IPSR
 80092c6:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 80092c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ca:	4b8a      	ldr	r3, [pc, #552]	; (80094f4 <_nx_udp_packet_receive+0x2c4>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d107      	bne.n	80092e4 <_nx_udp_packet_receive+0xb4>
    {

        /* Get mutex protection.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80092da:	f04f 31ff 	mov.w	r1, #4294967295
 80092de:	4618      	mov	r0, r3
 80092e0:	f002 fd76 	bl	800bdd0 <_tx_mutex_get>
    }

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092e8:	32e0      	adds	r2, #224	; 0xe0
 80092ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ee:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Determine if there are any sockets bound on this port index.  */
    if (!socket_ptr)
 80092f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d13e      	bne.n	8009374 <_nx_udp_packet_receive+0x144>
    {

#ifndef NX_DISABLE_IPV4
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092fc:	2b04      	cmp	r3, #4
 80092fe:	d114      	bne.n	800932a <_nx_udp_packet_receive+0xfa>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00f      	beq.n	800932a <_nx_udp_packet_receive+0xfa>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800930a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	ba1a      	rev	r2, r3
 8009310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009312:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	ba1a      	rev	r2, r3
 800931a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800931c:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800931e:	2300      	movs	r3, #0
 8009320:	4a75      	ldr	r2, [pc, #468]	; (80094f8 <_nx_udp_packet_receive+0x2c8>)
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f7fd f870 	bl	800640a <_nx_icmpv4_send_error_message>
#endif /* FEATURE_NX_IPV6 */

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

        /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
        if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8009346:	4b6a      	ldr	r3, [pc, #424]	; (80094f0 <_nx_udp_packet_receive+0x2c0>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00e      	beq.n	800936c <_nx_udp_packet_receive+0x13c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800934e:	f3ef 8305 	mrs	r3, IPSR
 8009352:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8009354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009356:	4b67      	ldr	r3, [pc, #412]	; (80094f4 <_nx_udp_packet_receive+0x2c4>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4313      	orrs	r3, r2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d105      	bne.n	800936c <_nx_udp_packet_receive+0x13c>
        {

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009366:	4618      	mov	r0, r3
 8009368:	f002 ffaa 	bl	800c2c0 <_tx_mutex_put>
        }

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800936c:	6838      	ldr	r0, [r7, #0]
 800936e:	f7ff fcb9 	bl	8008ce4 <_nx_packet_release>

        /* Just return.  */
        return;
 8009372:	e14d      	b.n	8009610 <_nx_udp_packet_receive+0x3e0>
    /*  Loop to examine the list of bound ports on this index.  */
    do
    {

        /* Determine if the port has been found.  */
        if (socket_ptr -> nx_udp_socket_port == port)
 8009374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800937a:	429a      	cmp	r2, r3
 800937c:	d119      	bne.n	80093b2 <_nx_udp_packet_receive+0x182>
            /* Yes, we have a match.  */

#ifndef NX_DISABLE_UDP_INFO

            /* Increment the total number of packets received for this socket.  */
            socket_ptr -> nx_udp_socket_packets_received++;
 800937e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009386:	619a      	str	r2, [r3, #24]

            /* Increment the total UDP receive bytes.  */
            ip_ptr -> nx_ip_udp_bytes_received +=          packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	4413      	add	r3, r2
 8009394:	f1a3 0208 	sub.w	r2, r3, #8
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            socket_ptr -> nx_udp_socket_bytes_received +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800939e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093a0:	69da      	ldr	r2, [r3, #28]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a6:	4413      	add	r3, r2
 80093a8:	f1a3 0208 	sub.w	r2, r3, #8
 80093ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ae:	61da      	str	r2, [r3, #28]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_RECEIVE, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Get out of the search loop.  */
            break;
 80093b0:	e00a      	b.n	80093c8 <_nx_udp_packet_receive+0x198>
        }
        else
        {

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_udp_socket_bound_next;
 80093b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093b6:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
    } while (socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093bc:	32e0      	adds	r2, #224	; 0xe0
 80093be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d1d5      	bne.n	8009374 <_nx_udp_packet_receive+0x144>

    /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 80093c8:	4b49      	ldr	r3, [pc, #292]	; (80094f0 <_nx_udp_packet_receive+0x2c0>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00e      	beq.n	80093ee <_nx_udp_packet_receive+0x1be>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80093d0:	f3ef 8305 	mrs	r3, IPSR
 80093d4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80093d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093d8:	4b46      	ldr	r3, [pc, #280]	; (80094f4 <_nx_udp_packet_receive+0x2c4>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4313      	orrs	r3, r2
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d105      	bne.n	80093ee <_nx_udp_packet_receive+0x1be>
    {

        /* Release mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80093e8:	4618      	mov	r0, r3
 80093ea:	f002 ff69 	bl	800c2c0 <_tx_mutex_put>
    }

    /* Determine if a match was found.  */
    if (socket_ptr -> nx_udp_socket_port != port)
 80093ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d02b      	beq.n	8009450 <_nx_udp_packet_receive+0x220>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093fe:	1c5a      	adds	r2, r3, #1
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800940c:	1c5a      	adds	r2, r3, #1
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

#if !defined(NX_DISABLE_IPV4) && !defined(NX_DISABLE_ICMPV4_ERROR_MESSAGE)
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800941a:	2b04      	cmp	r3, #4
 800941c:	d114      	bne.n	8009448 <_nx_udp_packet_receive+0x218>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00f      	beq.n	8009448 <_nx_udp_packet_receive+0x218>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8009428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	ba1a      	rev	r2, r3
 800942e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009430:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	ba1a      	rev	r2, r3
 8009438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800943a:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800943c:	2300      	movs	r3, #0
 800943e:	4a2e      	ldr	r2, [pc, #184]	; (80094f8 <_nx_udp_packet_receive+0x2c8>)
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7fc ffe1 	bl	800640a <_nx_icmpv4_send_error_message>
            }
        }
#endif /* FEATURE_NX_IPV6 && !NX_DISABLE_ICMPV6_ERROR_MESSAGE  */

        /* No socket structure bound to this port, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8009448:	6838      	ldr	r0, [r7, #0]
 800944a:	f7ff fc4b 	bl	8008ce4 <_nx_packet_release>
        return;
 800944e:	e0df      	b.n	8009610 <_nx_udp_packet_receive+0x3e0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009450:	f3ef 8310 	mrs	r3, PRIMASK
 8009454:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8009456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8009458:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800945a:	b672      	cpsid	i
    return(int_posture);
 800945c:	6a3b      	ldr	r3, [r7, #32]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800945e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the socket is still valid.  */
    if (socket_ptr -> nx_udp_socket_id != NX_UDP_ID)
 8009460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a25      	ldr	r2, [pc, #148]	; (80094fc <_nx_udp_packet_receive+0x2cc>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d01c      	beq.n	80094a4 <_nx_udp_packet_receive+0x274>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Increment the total UDP receive packets dropped count for this socket.  */
        socket_ptr -> nx_udp_socket_packets_dropped++;
 8009486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800948e:	625a      	str	r2, [r3, #36]	; 0x24
 8009490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009492:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	f383 8810 	msr	PRIMASK, r3
}
 800949a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800949c:	6838      	ldr	r0, [r7, #0]
 800949e:	f7ff fc21 	bl	8008ce4 <_nx_packet_release>

        /* Return to caller.  */
        return;
 80094a2:	e0b5      	b.n	8009610 <_nx_udp_packet_receive+0x3e0>
    }

    /* Pickup the receive notify function.  */
    receive_callback =  socket_ptr -> nx_udp_receive_callback;
 80094a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if we need to update the UDP port head pointer.  This should
       only be done if the found socket pointer is not the head pointer and
       the mutex for this IP instance is available.  */
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094ae:	32e0      	adds	r2, #224	; 0xe0
 80094b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d00a      	beq.n	80094d0 <_nx_udp_packet_receive+0x2a0>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d105      	bne.n	80094d0 <_nx_udp_packet_receive+0x2a0>
    {

        /* Move the port head pointer to this socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094c8:	32e0      	adds	r2, #224	; 0xe0
 80094ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80094cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    /* Determine if there is thread waiting for a packet from this port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 80094d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d4:	637b      	str	r3, [r7, #52]	; 0x34
    if (thread_ptr)
 80094d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d03e      	beq.n	800955a <_nx_udp_packet_receive+0x32a>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80094dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d10c      	bne.n	8009500 <_nx_udp_packet_receive+0x2d0>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 80094e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094e8:	2200      	movs	r2, #0
 80094ea:	659a      	str	r2, [r3, #88]	; 0x58
 80094ec:	e016      	b.n	800951c <_nx_udp_packet_receive+0x2ec>
 80094ee:	bf00      	nop
 80094f0:	20014884 	.word	0x20014884
 80094f4:	20000088 	.word	0x20000088
 80094f8:	03030000 	.word	0x03030000
 80094fc:	55445020 	.word	0x55445020
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8009500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009502:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009506:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800950a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800950c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800950e:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009510:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8009516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009518:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800951a:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800951c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800951e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009520:	1e5a      	subs	r2, r3, #1
 8009522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009524:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009528:	2200      	movs	r2, #0
 800952a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800952c:	4b3a      	ldr	r3, [pc, #232]	; (8009618 <_nx_udp_packet_receive+0x3e8>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3301      	adds	r3, #1
 8009532:	4a39      	ldr	r2, [pc, #228]	; (8009618 <_nx_udp_packet_receive+0x3e8>)
 8009534:	6013      	str	r3, [r2, #0]

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8009536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009540:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	f383 8810 	msr	PRIMASK, r3
}
 8009548:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800954a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954c:	2200      	movs	r2, #0
 800954e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009552:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009554:	f003 fba4 	bl	800cca0 <_tx_thread_system_resume>
 8009558:	e054      	b.n	8009604 <_nx_udp_packet_receive+0x3d4>
            return;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Place the packet at the end of the socket's receive queue.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 800955a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800955c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955e:	2b00      	cmp	r3, #0
 8009560:	d03c      	beq.n	80095dc <_nx_udp_packet_receive+0x3ac>
        {

            /* Add the new packet to a nonempty list.  */
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 8009562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	61da      	str	r2, [r3, #28]
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 800956a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	2200      	movs	r2, #0
 8009574:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 8009576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800957a:	1c5a      	adds	r2, r3, #1
 800957c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800957e:	63da      	str	r2, [r3, #60]	; 0x3c

            /* Determine if the maximum queue depth has been reached.  */
            if (socket_ptr -> nx_udp_socket_receive_count >
 8009580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                socket_ptr -> nx_udp_socket_queue_maximum)
 8009584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            if (socket_ptr -> nx_udp_socket_receive_count >
 8009588:	429a      	cmp	r2, r3
 800958a:	d921      	bls.n	80095d0 <_nx_udp_packet_receive+0x3a0>
            {

                /* We have exceeded the queue depth, so remove the first item
                   in the queue (which is the oldest).  */
                packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800958c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800958e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009590:	603b      	str	r3, [r7, #0]
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	69da      	ldr	r2, [r3, #28]
 8009596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009598:	645a      	str	r2, [r3, #68]	; 0x44

                /* Decrement the number of packets queued.  */
                socket_ptr -> nx_udp_socket_receive_count--;
 800959a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800959c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800959e:	1e5a      	subs	r2, r3, #1
 80095a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a2:	63da      	str	r2, [r3, #60]	; 0x3c

#ifndef NX_DISABLE_UDP_INFO

                /* Increment the total UDP receive packets dropped count.  */
                ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80095aa:	1c5a      	adds	r2, r3, #1
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                /* Increment the total UDP receive packets dropped count for this socket.  */
                socket_ptr -> nx_udp_socket_packets_dropped++;
 80095b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	1c5a      	adds	r2, r3, #1
 80095b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ba:	625a      	str	r2, [r3, #36]	; 0x24
 80095bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095be:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	f383 8810 	msr	PRIMASK, r3
}
 80095c6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 80095c8:	6838      	ldr	r0, [r7, #0]
 80095ca:	f7ff fb8b 	bl	8008ce4 <_nx_packet_release>
 80095ce:	e019      	b.n	8009604 <_nx_udp_packet_receive+0x3d4>
 80095d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f383 8810 	msr	PRIMASK, r3
}
 80095da:	e013      	b.n	8009604 <_nx_udp_packet_receive+0x3d4>
        }
        else
        {

            /* Add the new packet to an empty list.  */
            socket_ptr -> nx_udp_socket_receive_head =  packet_ptr;
 80095dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	645a      	str	r2, [r3, #68]	; 0x44
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 80095e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e4:	683a      	ldr	r2, [r7, #0]
 80095e6:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2200      	movs	r2, #0
 80095ec:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 80095ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095f2:	1c5a      	adds	r2, r3, #1
 80095f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80095f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095fa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f383 8810 	msr	PRIMASK, r3
}
 8009602:	bf00      	nop
        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_UDP_RECEIVE_QUEUE, __LINE__, packet_ptr);
    }

    /* Determine if there is a socket receive notification function specified.  */
    if (receive_callback)
 8009604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009606:	2b00      	cmp	r3, #0
 8009608:	d002      	beq.n	8009610 <_nx_udp_packet_receive+0x3e0>
    {

        /* Yes, notification is requested.  Call the application's receive notification
           function for this socket.  */
        (receive_callback)(socket_ptr);
 800960a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800960e:	4798      	blx	r3
    }
}
 8009610:	3750      	adds	r7, #80	; 0x50
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	2001491c 	.word	0x2001491c

0800961c <_nx_udp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b088      	sub	sp, #32
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800962a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800962c:	f3ef 8310 	mrs	r3, PRIMASK
 8009630:	617b      	str	r3, [r7, #20]
    return(posture);
 8009632:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009634:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009636:	b672      	cpsid	i
    return(int_posture);
 8009638:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 800963a:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009640:	2b00      	cmp	r3, #0
 8009642:	d03d      	beq.n	80096c0 <_nx_udp_receive_cleanup+0xa4>
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d03a      	beq.n	80096c0 <_nx_udp_receive_cleanup+0xa4>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800964e:	4a21      	ldr	r2, [pc, #132]	; (80096d4 <_nx_udp_receive_cleanup+0xb8>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d135      	bne.n	80096c0 <_nx_udp_receive_cleanup+0xa4>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	429a      	cmp	r2, r3
 8009662:	d103      	bne.n	800966c <_nx_udp_receive_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	2200      	movs	r2, #0
 8009668:	659a      	str	r2, [r3, #88]	; 0x58
 800966a:	e00d      	b.n	8009688 <_nx_udp_receive_cleanup+0x6c>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800967c:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009686:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800968c:	1e5a      	subs	r2, r3, #1
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009696:	2b0c      	cmp	r3, #12
 8009698:	d112      	bne.n	80096c0 <_nx_udp_receive_cleanup+0xa4>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80096a2:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <_nx_udp_receive_cleanup+0xbc>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3301      	adds	r3, #1
 80096a8:	4a0b      	ldr	r2, [pc, #44]	; (80096d8 <_nx_udp_receive_cleanup+0xbc>)
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f383 8810 	msr	PRIMASK, r3
}
 80096b6:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f003 faf1 	bl	800cca0 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 80096be:	e005      	b.n	80096cc <_nx_udp_receive_cleanup+0xb0>
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	f383 8810 	msr	PRIMASK, r3
}
 80096ca:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 80096cc:	3720      	adds	r7, #32
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	55445020 	.word	0x55445020
 80096d8:	2001491c 	.word	0x2001491c

080096dc <_nx_udp_socket_bind>:
/*                                            corrected the random value, */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b092      	sub	sp, #72	; 0x48
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
#endif /* NX_NAT_ENABLE */
NX_IP         *ip_ptr;
TX_THREAD     *thread_ptr;
NX_UDP_SOCKET *search_ptr;
NX_UDP_SOCKET *end_ptr;
UINT           status = NX_SUCCESS;
 80096e8:	2300      	movs	r3, #0
 80096ea:	643b      	str	r3, [r7, #64]	; 0x40


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80096f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096f4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80096f8:	f04f 31ff 	mov.w	r1, #4294967295
 80096fc:	4618      	mov	r0, r3
 80096fe:	f002 fb67 	bl	800bdd0 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009706:	2b00      	cmp	r3, #0
 8009708:	d103      	bne.n	8009712 <_nx_udp_socket_bind+0x36>
        (socket_ptr -> nx_udp_socket_bind_in_progress))
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 800970e:	2b00      	cmp	r3, #0
 8009710:	d007      	beq.n	8009722 <_nx_udp_socket_bind+0x46>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009714:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009718:	4618      	mov	r0, r3
 800971a:	f002 fdd1 	bl	800c2c0 <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 800971e:	2322      	movs	r3, #34	; 0x22
 8009720:	e0f4      	b.n	800990c <_nx_udp_socket_bind+0x230>
    }

    /* Determine if the port needs to be allocated.  */
    if (port == NX_ANY_PORT)
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d119      	bne.n	800975c <_nx_udp_socket_bind+0x80>
    {

        /* Call the find routine to allocate a UDP port.  */
        port = NX_SEARCH_PORT_START + (UINT)(((ULONG)NX_RAND()) % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 8009728:	f004 fbb2 	bl	800de90 <rand>
 800972c:	4603      	mov	r3, r0
 800972e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009732:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8009736:	60bb      	str	r3, [r7, #8]
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	f107 0208 	add.w	r2, r7, #8
 800973e:	4619      	mov	r1, r3
 8009740:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009742:	f7ff fd21 	bl	8009188 <_nx_udp_free_port_find>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d007      	beq.n	800975c <_nx_udp_socket_bind+0x80>
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800974c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800974e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009752:	4618      	mov	r0, r3
 8009754:	f002 fdb4 	bl	800c2c0 <_tx_mutex_put>

            /* There was no free port, return an error code.  */
            return(NX_NO_FREE_PORTS);
 8009758:	2345      	movs	r3, #69	; 0x45
 800975a:	e0d7      	b.n	800990c <_nx_udp_socket_bind+0x230>
        }
    }
#endif

    /* Save the port number in the UDP socket structure.  */
    socket_ptr -> nx_udp_socket_port =  port;
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	609a      	str	r2, [r3, #8]

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	0a1a      	lsrs	r2, r3, #8
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	4413      	add	r3, r2
 800976a:	f003 031f 	and.w	r3, r3, #31
 800976e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Pickup the head of the UDP ports bound list.  */
    search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8009770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009774:	32e0      	adds	r2, #224	; 0xe0
 8009776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800977a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if we need to perform a list search.  */
    if (search_ptr)
 800977c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00f      	beq.n	80097a2 <_nx_udp_socket_bind+0xc6>
    {

        /* Walk through the circular list of UDP sockets that are already
           bound.  */
        end_ptr = search_ptr;
 8009782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009784:	637b      	str	r3, [r7, #52]	; 0x34
        do
        {

            /* Determine if this entry is the same as the requested port.  */
            if (search_ptr -> nx_udp_socket_port == port)
 8009786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009788:	689a      	ldr	r2, [r3, #8]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	429a      	cmp	r2, r3
 800978e:	d007      	beq.n	80097a0 <_nx_udp_socket_bind+0xc4>
                /* Yes, the port has already been allocated.  */
                break;
            }

            /* Move to the next entry in the list.  */
            search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 8009790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009794:	647b      	str	r3, [r7, #68]	; 0x44
        } while (search_ptr != end_ptr);
 8009796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800979a:	429a      	cmp	r2, r3
 800979c:	d1f3      	bne.n	8009786 <_nx_udp_socket_bind+0xaa>
 800979e:	e000      	b.n	80097a2 <_nx_udp_socket_bind+0xc6>
                break;
 80097a0:	bf00      	nop
    }

    /* Now determine if the port is available.  */
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_udp_socket_port != port))
 80097a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d004      	beq.n	80097b2 <_nx_udp_socket_bind+0xd6>
 80097a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097aa:	689a      	ldr	r2, [r3, #8]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d042      	beq.n	8009838 <_nx_udp_socket_bind+0x15c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80097b2:	f3ef 8310 	mrs	r3, PRIMASK
 80097b6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80097b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80097ba:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80097bc:	b672      	cpsid	i
    return(int_posture);
 80097be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {

        /* Place this UDP socket structure on the list of bound ports.  */

        /* Disable interrupts.  */
        TX_DISABLE
 80097c0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if the list is NULL.  */
        if (search_ptr)
 80097c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d01e      	beq.n	8009806 <_nx_udp_socket_bind+0x12a>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            socket_ptr -> nx_udp_socket_bound_next =       ip_ptr -> nx_ip_udp_port_table[index];
 80097c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097cc:	32e0      	adds	r2, #224	; 0xe0
 80097ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =   (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 80097d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097da:	32e0      	adds	r2, #224	; 0xe0
 80097dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next = socket_ptr;
 80097e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097ea:	32e0      	adds	r2, #224	; 0xe0
 80097ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	64da      	str	r2, [r3, #76]	; 0x4c
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   socket_ptr;
 80097f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097fa:	32e0      	adds	r2, #224	; 0xe0
 80097fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	651a      	str	r2, [r3, #80]	; 0x50
 8009804:	e00b      	b.n	800981e <_nx_udp_socket_bind+0x142>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            socket_ptr -> nx_udp_socket_bound_next =      socket_ptr;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =  socket_ptr;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =       socket_ptr;
 8009812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009816:	32e0      	adds	r2, #224	; 0xe0
 8009818:	68f9      	ldr	r1, [r7, #12]
 800981a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	f383 8810 	msr	PRIMASK, r3
}
 8009828:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800982a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800982c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009830:	4618      	mov	r0, r3
 8009832:	f002 fd45 	bl	800c2c0 <_tx_mutex_put>
 8009836:	e068      	b.n	800990a <_nx_udp_socket_bind+0x22e>
    }
    else if (wait_option)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d05d      	beq.n	80098fa <_nx_udp_socket_bind+0x21e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800983e:	f3ef 8310 	mrs	r3, PRIMASK
 8009842:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009844:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009846:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009848:	b672      	cpsid	i
    return(int_posture);
 800984a:	69bb      	ldr	r3, [r7, #24]
    {

        /* Prepare for suspension of this thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800984c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Pickup thread pointer.  */
        thread_ptr =  _tx_thread_current_ptr;
 800984e:	4b31      	ldr	r3, [pc, #196]	; (8009914 <_nx_udp_socket_bind+0x238>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Setup cleanup routine pointer.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 8009854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009856:	4a30      	ldr	r2, [pc, #192]	; (8009918 <_nx_udp_socket_bind+0x23c>)
 8009858:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup cleanup information, i.e. this socket control
           block.  */
        thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 800985a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Also remember the socket that has bound to the port, since the thread
           is going to be suspended on that socket.  */
        socket_ptr -> nx_udp_socket_bound_previous =  search_ptr;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009864:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the socket bind in progress flag (thread pointer).  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  thread_ptr;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800986a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Setup suspension list.  */
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 800986c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009870:	2b00      	cmp	r3, #0
 8009872:	d012      	beq.n	800989a <_nx_udp_socket_bind+0x1be>
        {

            /* This list is not NULL, add current thread to the end. */
            thread_ptr -> tx_thread_suspended_next =       search_ptr -> nx_udp_socket_bind_suspension_list;
 8009874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009876:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987a:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =  (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous;
 800987c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800987e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009880:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009884:	675a      	str	r2, [r3, #116]	; 0x74
            ((search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 8009886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800988a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800988c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800988e:	671a      	str	r2, [r3, #112]	; 0x70
            (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8009890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009896:	675a      	str	r2, [r3, #116]	; 0x74
 8009898:	e008      	b.n	80098ac <_nx_udp_socket_bind+0x1d0>
        else
        {

            /* No other threads are suspended.  Setup the head pointer and
               just setup this threads pointers to itself.  */
            search_ptr -> nx_udp_socket_bind_suspension_list =         thread_ptr;
 800989a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800989c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800989e:	661a      	str	r2, [r3, #96]	; 0x60
            thread_ptr -> tx_thread_suspended_next =                   thread_ptr;
 80098a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098a4:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =               thread_ptr;
 80098a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098aa:	675a      	str	r2, [r3, #116]	; 0x74
        }

        /* Increment the suspended thread count.  */
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 80098ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098b0:	1c5a      	adds	r2, r3, #1
 80098b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098b4:	665a      	str	r2, [r3, #100]	; 0x64

        /* Set the state to suspended.  */
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b8:	220c      	movs	r2, #12
 80098ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80098bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098be:	2201      	movs	r2, #1
 80098c0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80098c2:	4b16      	ldr	r3, [pc, #88]	; (800991c <_nx_udp_socket_bind+0x240>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	3301      	adds	r3, #1
 80098c8:	4a14      	ldr	r2, [pc, #80]	; (800991c <_nx_udp_socket_bind+0x240>)
 80098ca:	6013      	str	r3, [r2, #0]

        /* Save the timeout value.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80098cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80098d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	f383 8810 	msr	PRIMASK, r3
}
 80098dc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80098de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098e0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80098e4:	4618      	mov	r0, r3
 80098e6:	f002 fceb 	bl	800c2c0 <_tx_mutex_put>

        /* Call actual thread suspension routine.  */
        _tx_thread_system_suspend(thread_ptr);
 80098ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098ec:	f003 fad8 	bl	800cea0 <_tx_thread_system_suspend>

        /* Return the completion status.  */
        status = thread_ptr -> tx_thread_suspend_status;
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098f6:	643b      	str	r3, [r7, #64]	; 0x40
 80098f8:	e007      	b.n	800990a <_nx_udp_socket_bind+0x22e>
    }
    else
    {

        /* Release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80098fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098fc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009900:	4618      	mov	r0, r3
 8009902:	f002 fcdd 	bl	800c2c0 <_tx_mutex_put>

        /* Return the port unavailable error.  */
        status = NX_PORT_UNAVAILABLE;
 8009906:	2323      	movs	r3, #35	; 0x23
 8009908:	643b      	str	r3, [r7, #64]	; 0x40
        status = _nx_udp_socket_driver_bind(socket_ptr, port, wait_option);
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Return success to the caller.  */
    return(status);
 800990a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800990c:	4618      	mov	r0, r3
 800990e:	3748      	adds	r7, #72	; 0x48
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	20014884 	.word	0x20014884
 8009918:	08009099 	.word	0x08009099
 800991c:	2001491c 	.word	0x2001491c

08009920 <_nx_udp_socket_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG queue_maximum)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b08a      	sub	sp, #40	; 0x28
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
 800992c:	603b      	str	r3, [r7, #0]

NX_UDP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 800992e:	2278      	movs	r2, #120	; 0x78
 8009930:	2100      	movs	r1, #0
 8009932:	68b8      	ldr	r0, [r7, #8]
 8009934:	f004 fce0 	bl	800e2f8 <memset>

    /* Fill in the basic information in the new UDP socket structure.  */

    /* Remember the associated IP structure.  */
    socket_ptr -> nx_udp_socket_ip_ptr =  ip_ptr;
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	60da      	str	r2, [r3, #12]

    /* Save the UDP socket's name.  */
    socket_ptr -> nx_udp_socket_name =  name;
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	605a      	str	r2, [r3, #4]

    /* Save the type of service input parameter.  */
    socket_ptr -> nx_udp_socket_type_of_service =  type_of_service;
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	635a      	str	r2, [r3, #52]	; 0x34

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009958:	631a      	str	r2, [r3, #48]	; 0x30

    /* By default, have UDP checksum logic enabled.  To disable checksum logic, the
       application must call the nx_udp_checksum disable function for this UDP socket.  */
    socket_ptr -> nx_udp_socket_disable_checksum =  NX_FALSE;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2200      	movs	r2, #0
 800995e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Clear the socket bind in progress flag.  */
    socket_ptr -> nx_udp_socket_bind_in_progress =  NX_FALSE;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	2200      	movs	r2, #0
 8009964:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set various list pointers to NULL.  */
    socket_ptr -> nx_udp_socket_bound_next =            NX_NULL;
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2200      	movs	r2, #0
 800996a:	64da      	str	r2, [r3, #76]	; 0x4c
    socket_ptr -> nx_udp_socket_bound_previous =        NX_NULL;
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2200      	movs	r2, #0
 8009970:	651a      	str	r2, [r3, #80]	; 0x50
    socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	2200      	movs	r2, #0
 8009976:	661a      	str	r2, [r3, #96]	; 0x60
    socket_ptr -> nx_udp_socket_bind_suspended_count =  0;
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2200      	movs	r2, #0
 800997c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize the receive queue parameters.  */
    socket_ptr -> nx_udp_socket_receive_count =         0;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	2200      	movs	r2, #0
 8009982:	63da      	str	r2, [r3, #60]	; 0x3c
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009988:	641a      	str	r2, [r3, #64]	; 0x40
    socket_ptr -> nx_udp_socket_receive_head =          NX_NULL;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2200      	movs	r2, #0
 800998e:	645a      	str	r2, [r3, #68]	; 0x44
    socket_ptr -> nx_udp_socket_receive_tail =          NX_NULL;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2200      	movs	r2, #0
 8009994:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =             NX_NULL;
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2200      	movs	r2, #0
 800999a:	671a      	str	r2, [r3, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, queue_maximum, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can add socket to IP structure.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80099a2:	f04f 31ff 	mov.w	r1, #4294967295
 80099a6:	4618      	mov	r0, r3
 80099a8:	f002 fa12 	bl	800bdd0 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80099ac:	f3ef 8310 	mrs	r3, PRIMASK
 80099b0:	61fb      	str	r3, [r7, #28]
    return(posture);
 80099b2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80099b4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80099b6:	b672      	cpsid	i
    return(int_posture);
 80099b8:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts while we link the new UDP socket to the IP structure.  */
    TX_DISABLE
 80099ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the UDP ID field in the UDP control block.  */
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	4a1f      	ldr	r2, [pc, #124]	; (8009a3c <_nx_udp_socket_create+0x11c>)
 80099c0:	601a      	str	r2, [r3, #0]

    /* Place the new UDP control block on the list of created UDP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d015      	beq.n	80099f8 <_nx_udp_socket_create+0xd8>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80099d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099d4:	623b      	str	r3, [r7, #32]

        /* Place the new UDP socket control block in the list.  */
        (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous =  socket_ptr;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	66da      	str	r2, [r3, #108]	; 0x6c
        tail_ptr ->  nx_udp_socket_created_next =  socket_ptr;
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup this UDP socket's created links.  */
        socket_ptr -> nx_udp_socket_created_previous =  tail_ptr;
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	6a3a      	ldr	r2, [r7, #32]
 80099ea:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      ip_ptr -> nx_ip_udp_created_sockets_ptr;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	669a      	str	r2, [r3, #104]	; 0x68
 80099f6:	e009      	b.n	8009a0c <_nx_udp_socket_create+0xec>
    }
    else
    {

        /* The created UDP socket list is empty.  Add UDP socket control block to empty list.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =       socket_ptr;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        socket_ptr -> nx_udp_socket_created_previous =  socket_ptr;
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	68ba      	ldr	r2, [r7, #8]
 8009a04:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	669a      	str	r2, [r3, #104]	; 0x68
    }

    /* Increment the created UDP socket counter.  */
    ip_ptr -> nx_ip_udp_created_sockets_count++;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f383 8810 	msr	PRIMASK, r3
}
 8009a24:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f002 fc47 	bl	800c2c0 <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3728      	adds	r7, #40	; 0x28
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	55445020 	.word	0x55445020

08009a40 <_nx_udp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	61fb      	str	r3, [r7, #28]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_DELETE, ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can process the socket delete request.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009a54:	f04f 31ff 	mov.w	r1, #4294967295
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f002 f9b9 	bl	800bdd0 <_tx_mutex_get>

    /* Determine if the socket is still bound to port.  */
    if (socket_ptr -> nx_udp_socket_bound_next)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d007      	beq.n	8009a76 <_nx_udp_socket_delete+0x36>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f002 fc27 	bl	800c2c0 <_tx_mutex_put>

        /* Return a still bound error code.  */
        return(NX_STILL_BOUND);
 8009a72:	2342      	movs	r3, #66	; 0x42
 8009a74:	e03f      	b.n	8009af6 <_nx_udp_socket_delete+0xb6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a76:	f3ef 8310 	mrs	r3, PRIMASK
 8009a7a:	617b      	str	r3, [r7, #20]
    return(posture);
 8009a7c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009a7e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009a80:	b672      	cpsid	i
    return(int_posture);
 8009a82:	693b      	ldr	r3, [r7, #16]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8009a84:	61bb      	str	r3, [r7, #24]

    /* Now, remove the UDP socket from the created socket list.  */

    /* Clear the socket ID to make it invalid.  */
    socket_ptr -> nx_udp_socket_id =  0;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	601a      	str	r2, [r3, #0]

    /* See if the socket is the only one on the list.  */
    if (socket_ptr == socket_ptr -> nx_udp_socket_created_next)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d104      	bne.n	8009aa0 <_nx_udp_socket_delete+0x60>
    {

        /* Only created socket, just set the created list to NULL.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =  NX_NULL;
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8009a9e:	e014      	b.n	8009aca <_nx_udp_socket_delete+0x8a>
    }
    else
    {

        /* Link-up the neighbors.  */
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            socket_ptr -> nx_udp_socket_created_previous;
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 8009aa8:	66da      	str	r2, [r3, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
            socket_ptr -> nx_udp_socket_created_next;
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	6e92      	ldr	r2, [r2, #104]	; 0x68
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 8009ab2:	669a      	str	r2, [r3, #104]	; 0x68

        /* See if we have to update the created list head pointer.  */
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d104      	bne.n	8009aca <_nx_udp_socket_delete+0x8a>
        {

            /* Yes, move the head pointer to the next link. */
            ip_ptr -> nx_ip_udp_created_sockets_ptr =  socket_ptr -> nx_udp_socket_created_next;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        }
    }

    /* Decrease the created sockets count.  */
    ip_ptr -> nx_ip_udp_created_sockets_count--;
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ad0:	1e5a      	subs	r2, r3, #1
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f383 8810 	msr	PRIMASK, r3
}
 8009ae2:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(socket_ptr);

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009aea:	4618      	mov	r0, r3
 8009aec:	f002 fbe8 	bl	800c2c0 <_tx_mutex_put>

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8009af0:	f003 f89c 	bl	800cc2c <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3720      	adds	r7, #32
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
	...

08009b00 <_nx_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b09a      	sub	sp, #104	; 0x68
 8009b04:	af02      	add	r7, sp, #8
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
TX_INTERRUPT_SAVE_AREA

ULONG                 *temp_ptr;
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
NX_INTERFACE          *interface_ptr = NX_NULL;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT                   compute_checksum = 1;
 8009b10:	2301      	movs	r3, #1
 8009b12:	65bb      	str	r3, [r7, #88]	; 0x58

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2200      	movs	r2, #0
 8009b18:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8009b1e:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8009b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8009b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b24:	b672      	cpsid	i
    return(int_posture);
 8009b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* Loop to retrieve a packet from the interface.  */
    for (;;)
    {

        /* Lockout interrupts.  */
        TX_DISABLE
 8009b28:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the socket is currently bound.  */
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d107      	bne.n	8009b42 <_nx_udp_socket_receive+0x42>
 8009b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b34:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b38:	f383 8810 	msr	PRIMASK, r3
}
 8009b3c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Socket is not bound, return an error message.  */
            return(NX_NOT_BOUND);
 8009b3e:	2324      	movs	r3, #36	; 0x24
 8009b40:	e142      	b.n	8009dc8 <_nx_udp_socket_receive+0x2c8>
        }

        /* Determine if there is a packet already queued up for this socket.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d01a      	beq.n	8009b80 <_nx_udp_socket_receive+0x80>
        {

            /* Yes, there is a packet waiting.  */

            /* Remove it and place it in the thread's destination.  */
            *packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	601a      	str	r2, [r3, #0]
            socket_ptr -> nx_udp_socket_receive_head =  (*packet_ptr) -> nx_packet_queue_next;
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	69da      	ldr	r2, [r3, #28]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	645a      	str	r2, [r3, #68]	; 0x44

            /* If this was the last packet, set the tail pointer to NULL.  */
            if (socket_ptr -> nx_udp_socket_receive_head == NX_NULL)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d102      	bne.n	8009b6a <_nx_udp_socket_receive+0x6a>
            {
                socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2200      	movs	r2, #0
 8009b68:	649a      	str	r2, [r3, #72]	; 0x48
            }

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b6e:	1e5a      	subs	r2, r3, #1
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	63da      	str	r2, [r3, #60]	; 0x3c
 8009b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b76:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	f383 8810 	msr	PRIMASK, r3
}
 8009b7e:	e05e      	b.n	8009c3e <_nx_udp_socket_receive+0x13e>
        }
        else
        {

            /* Determine if the request specifies suspension.  */
            if (wait_option)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d050      	beq.n	8009c28 <_nx_udp_socket_receive+0x128>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup thread pointer.  */
                thread_ptr =  _tx_thread_current_ptr;
 8009b86:	4b92      	ldr	r3, [pc, #584]	; (8009dd0 <_nx_udp_socket_receive+0x2d0>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_receive_cleanup;
 8009b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b8e:	4a91      	ldr	r2, [pc, #580]	; (8009dd4 <_nx_udp_socket_receive+0x2d4>)
 8009b90:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 8009b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return packet pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 8009b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup suspension list.  */
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d012      	beq.n	8009bcc <_nx_udp_socket_receive+0xcc>
                {

                    /* This list is not NULL, add current thread to the end. */
                    thread_ptr -> tx_thread_suspended_next =
                        socket_ptr -> nx_udp_socket_receive_suspension_list;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next =
 8009baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bac:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =
                        (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_previous =
 8009bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bb6:	675a      	str	r2, [r3, #116]	; 0x74
                    ((socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bc0:	671a      	str	r2, [r3, #112]	; 0x70
                        thread_ptr;
                    (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bc8:	675a      	str	r2, [r3, #116]	; 0x74
 8009bca:	e008      	b.n	8009bde <_nx_udp_socket_receive+0xde>
                else
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    socket_ptr -> nx_udp_socket_receive_suspension_list =   thread_ptr;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bd0:	659a      	str	r2, [r3, #88]	; 0x58
                    thread_ptr -> tx_thread_suspended_next              =   thread_ptr;
 8009bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bd6:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous          =   thread_ptr;
 8009bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bdc:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspended thread count.  */
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	65da      	str	r2, [r3, #92]	; 0x5c

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8009be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bea:	220c      	movs	r2, #12
 8009bec:	631a      	str	r2, [r3, #48]	; 0x30

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	639a      	str	r2, [r3, #56]	; 0x38

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8009bf4:	4b78      	ldr	r3, [pc, #480]	; (8009dd8 <_nx_udp_socket_receive+0x2d8>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	4a77      	ldr	r2, [pc, #476]	; (8009dd8 <_nx_udp_socket_receive+0x2d8>)
 8009bfc:	6013      	str	r3, [r2, #0]

                /* Save the timeout value.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	64da      	str	r2, [r3, #76]	; 0x4c
 8009c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c06:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c08:	6a3b      	ldr	r3, [r7, #32]
 8009c0a:	f383 8810 	msr	PRIMASK, r3
}
 8009c0e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8009c10:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009c12:	f003 f945 	bl	800cea0 <_tx_thread_system_suspend>

                /* Determine if a packet was received successfully.  */
                if (thread_ptr -> tx_thread_suspend_status != NX_SUCCESS)
 8009c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00e      	beq.n	8009c3e <_nx_udp_socket_receive+0x13e>
                {

                    /* If not, just return the error code.  */
                    return(thread_ptr -> tx_thread_suspend_status);
 8009c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c26:	e0cf      	b.n	8009dc8 <_nx_udp_socket_receive+0x2c8>
 8009c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c2a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	f383 8810 	msr	PRIMASK, r3
}
 8009c32:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Set the return pointer to NULL in case it was set but released due to checksum error.  */
                *packet_ptr =   NX_NULL;
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	2200      	movs	r2, #0
 8009c38:	601a      	str	r2, [r3, #0]

                /* Immediate return, return error completion.  */
                return(NX_NO_PACKET);
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e0c4      	b.n	8009dc8 <_nx_udp_socket_receive+0x2c8>
            }
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        /* Get the packet interface. */
#ifndef NX_DISABLE_IPV4
        if ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009c46:	2b04      	cmp	r3, #4
 8009c48:	d103      	bne.n	8009c52 <_nx_udp_socket_receive+0x152>
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_interface_ptr;
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c50:	65fb      	str	r3, [r7, #92]	; 0x5c
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
        }
#endif /* FEATURE_NX_IPV6 */

        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_RX_CHECKSUM)
 8009c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c56:	f003 0320 	and.w	r3, r3, #32
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <_nx_udp_socket_receive+0x162>
        {
            compute_checksum = 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	65bb      	str	r3, [r7, #88]	; 0x58
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 8009c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f000 809d 	beq.w	8009da4 <_nx_udp_socket_receive+0x2a4>

            /* Determine if we need to compute the UDP checksum.  If it is disabled for this socket
               or if the UDP packet has a zero in the checksum field (indicating it was not computed
               by the sender, skip the checksum processing.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            temp_ptr =  (ULONG *)(*packet_ptr) -> nx_packet_prepend_ptr;
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	647b      	str	r3, [r7, #68]	; 0x44
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d105      	bne.n	8009c86 <_nx_udp_socket_receive+0x186>
 8009c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c7c:	3304      	adds	r3, #4
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d106      	bne.n	8009c94 <_nx_udp_socket_receive+0x194>
                ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V6))                               /* It is IPv6 packet */
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 8009c8e:	2b06      	cmp	r3, #6
 8009c90:	f040 808b 	bne.w	8009daa <_nx_udp_socket_receive+0x2aa>
            {
            ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 8009c94:	2300      	movs	r3, #0
 8009c96:	657b      	str	r3, [r7, #84]	; 0x54
 8009c98:	2300      	movs	r3, #0
 8009c9a:	653b      	str	r3, [r7, #80]	; 0x50
            ULONG          checksum;
            NX_PACKET     *current_ptr = *packet_ptr;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	643b      	str	r3, [r7, #64]	; 0x40
#ifdef NX_LITTLE_ENDIAN
            NX_UDP_HEADER *udp_header_ptr;

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(current_ptr -> nx_packet_prepend_ptr);
 8009ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* NX_LITTLE_ENDIAN */

#ifndef NX_DISABLE_IPV4
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 8009ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009caa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009cae:	2b04      	cmp	r3, #4
 8009cb0:	d108      	bne.n	8009cc4 <_nx_udp_socket_receive+0x1c4>
                {
                NX_IPV4_HEADER *ipv4_header;

                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    ipv4_header = (NX_IPV4_HEADER *)(current_ptr -> nx_packet_ip_header);
 8009cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb6:	63bb      	str	r3, [r7, #56]	; 0x38
                    ip_src_addr = &(ipv4_header -> nx_ip_header_source_ip);
 8009cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cba:	330c      	adds	r3, #12
 8009cbc:	657b      	str	r3, [r7, #84]	; 0x54
                    ip_dest_addr = &(ipv4_header -> nx_ip_header_destination_ip);
 8009cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc0:	3310      	adds	r3, #16
 8009cc2:	653b      	str	r3, [r7, #80]	; 0x50

#endif /* FEATURE_NX_IPV6 */

#ifdef NX_LITTLE_ENDIAN
                /* Restore UDP header to network byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8009cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	ba1a      	rev	r2, r3
 8009cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ccc:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	ba1a      	rev	r2, r3
 8009cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd6:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* nx_ip_checksum_compute takes care of both even number length and odd number length */
                /* Compute the checksum of the first packet */
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
                                                   (UINT)current_ptr -> nx_packet_length,
 8009cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 8009cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ce2:	2111      	movs	r1, #17
 8009ce4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009ce6:	f7fc fcfd 	bl	80066e4 <_nx_ip_checksum_compute>
 8009cea:	4603      	mov	r3, r0
 8009cec:	637b      	str	r3, [r7, #52]	; 0x34
                                                   ip_src_addr,
                                                   ip_dest_addr);

#ifdef NX_LITTLE_ENDIAN
                /* Convert UDP header to host byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8009cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	ba1a      	rev	r2, r3
 8009cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf6:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	ba1a      	rev	r2, r3
 8009cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d00:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* Perform the one's complement processing on the checksum.  */
                checksum =  NX_LOWER_16_MASK & ~checksum;
 8009d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d04:	43db      	mvns	r3, r3
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	637b      	str	r3, [r7, #52]	; 0x34

                /* Determine if it is valid.  */
                if (checksum == 0)
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d04b      	beq.n	8009da8 <_nx_udp_socket_receive+0x2a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009d10:	f3ef 8310 	mrs	r3, PRIMASK
 8009d14:	617b      	str	r3, [r7, #20]
    return(posture);
 8009d16:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009d18:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009d1a:	b672      	cpsid	i
    return(int_posture);
 8009d1c:	693b      	ldr	r3, [r7, #16]
                {

#ifndef NX_DISABLE_UDP_INFO

                    /* Disable interrupts.  */
                    TX_DISABLE
 8009d1e:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Increment the UDP checksum error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_checksum_errors++;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8009d28:	3201      	adds	r2, #1
 8009d2a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

                    /* Increment the UDP invalid packets error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8009d36:	3201      	adds	r2, #1
 8009d38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                    /* Increment the UDP checksum error count for this socket.  */
                    socket_ptr -> nx_udp_socket_checksum_errors++;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d40:	1c5a      	adds	r2, r3, #1
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Decrement the total UDP receive packets count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packets_received--;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009d4e:	3a01      	subs	r2, #1
 8009d50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

                    /* Decrement the total UDP receive bytes.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d62:	1ad2      	subs	r2, r2, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	3208      	adds	r2, #8
 8009d6a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

                    /* Decrement the total UDP receive packets count.  */
                    socket_ptr -> nx_udp_socket_packets_received--;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	1e5a      	subs	r2, r3, #1
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	619a      	str	r2, [r3, #24]

                    /* Decrement the total UDP receive bytes.  */
                    socket_ptr -> nx_udp_socket_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	69da      	ldr	r2, [r3, #28]
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	f103 0208 	add.w	r2, r3, #8
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	61da      	str	r2, [r3, #28]
 8009d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d8e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	f383 8810 	msr	PRIMASK, r3
}
 8009d96:	bf00      	nop
                    /* Restore interrupts.  */
                    TX_RESTORE
#endif

                    /* Bad UDP checksum.  Release the packet. */
                    _nx_packet_release(*packet_ptr);
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fe ffa1 	bl	8008ce4 <_nx_packet_release>
        TX_DISABLE
 8009da2:	e6ba      	b.n	8009b1a <_nx_udp_socket_receive+0x1a>
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        else
        {

            /* Simply break - checksum logic is conditionally disabled.  */
            break;
 8009da4:	bf00      	nop
 8009da6:	e000      	b.n	8009daa <_nx_udp_socket_receive+0x2aa>
                    break;
 8009da8:	bf00      	nop
    /* At this point, we have a valid UDP packet for the caller.  */

    /* Remove the UDP header.  */

    /* Decrease the packet length.  */
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3a08      	subs	r2, #8
 8009db6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Position past the UDP header pointer.  */
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	689a      	ldr	r2, [r3, #8]
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3208      	adds	r2, #8
 8009dc4:	609a      	str	r2, [r3, #8]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_SOCKET_RECEIVE, 0, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length);

    /* Return a successful status to the caller.  */
    return(NX_SUCCESS);
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3760      	adds	r7, #96	; 0x60
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	20014884 	.word	0x20014884
 8009dd4:	0800961d 	.word	0x0800961d
 8009dd8:	2001491c 	.word	0x2001491c

08009ddc <_nx_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                          ULONG ip_address, UINT port)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b088      	sub	sp, #32
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]
UINT        status;

NXD_ADDRESS dual_ip_address;

    /* build up the IP Address structure. */
    dual_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 8009dea:	2304      	movs	r3, #4
 8009dec:	617b      	str	r3, [r7, #20]
    dual_ip_address.nxd_ip_address.v4 = ip_address;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	61bb      	str	r3, [r7, #24]

    /* Call the actual udp socket send routine. */
    status = _nxd_udp_socket_send(socket_ptr, packet_ptr, &dual_ip_address, port);
 8009df2:	f107 0214 	add.w	r2, r7, #20
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	68b9      	ldr	r1, [r7, #8]
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f000 f968 	bl	800a0d0 <_nxd_udp_socket_send>
 8009e00:	61f8      	str	r0, [r7, #28]

    return(status);
 8009e02:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3720      	adds	r7, #32
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <_nx_udp_socket_unbind>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b094      	sub	sp, #80	; 0x50
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
NX_PACKET     *packet_ptr;
NX_PACKET     *next_packet_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	647b      	str	r3, [r7, #68]	; 0x44
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_UNBIND, ip_ptr, socket_ptr, socket_ptr -> nx_udp_socket_port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e1c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009e20:	f04f 31ff 	mov.w	r1, #4294967295
 8009e24:	4618      	mov	r0, r3
 8009e26:	f001 ffd3 	bl	800bdd0 <_tx_mutex_get>

    /* Determine if the socket is bound to port.  */
    if (!socket_ptr -> nx_udp_socket_bound_next)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d119      	bne.n	8009e66 <_nx_udp_socket_unbind+0x5a>
    {

        /* Determine if there is a special condition for the socket not being in
           a bound condition...  i.e. the socket is in a pending-to-be-bound condition
           in a call from a different thread.  */
        if (socket_ptr -> nx_udp_socket_bind_in_progress)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00d      	beq.n	8009e56 <_nx_udp_socket_unbind+0x4a>
        {

            /* Execute the bind suspension cleanup routine.  */
            _nx_udp_bind_cleanup(socket_ptr -> nx_udp_socket_bind_in_progress NX_CLEANUP_ARGUMENT);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e3e:	2100      	movs	r1, #0
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7ff f929 	bl	8009098 <_nx_udp_bind_cleanup>

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e48:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f002 fa37 	bl	800c2c0 <_tx_mutex_put>

            /* Return success.  */
            return(NX_SUCCESS);
 8009e52:	2300      	movs	r3, #0
 8009e54:	e135      	b.n	800a0c2 <_nx_udp_socket_unbind+0x2b6>
        }
        else
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e58:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f002 fa2f 	bl	800c2c0 <_tx_mutex_put>

            /* Return a not bound error code.  */
            return(NX_NOT_BOUND);
 8009e62:	2324      	movs	r3, #36	; 0x24
 8009e64:	e12d      	b.n	800a0c2 <_nx_udp_socket_unbind+0x2b6>

    /* Otherwise, the socket is bound.  We need to remove this socket from the
       port and check for any other UDP socket bind requests that are queued.  */

    /* Pickup the port number in the UDP socket structure.  */
    port =  socket_ptr -> nx_udp_socket_port;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8009e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e6e:	0a1a      	lsrs	r2, r3, #8
 8009e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e72:	4413      	add	r3, r2
 8009e74:	f003 031f 	and.w	r3, r3, #31
 8009e78:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8009e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8009e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8009e82:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e84:	b672      	cpsid	i
    return(int_posture);
 8009e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
#ifdef NX_ENABLE_TCPIP_OFFLOAD
    _nx_udp_socket_driver_unbind(socket_ptr);
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Disable interrupts while we unlink the current socket.  */
    TX_DISABLE
 8009e88:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if this is the only socket bound on this port list.  */
    if (socket_ptr -> nx_udp_socket_bound_next == socket_ptr)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d109      	bne.n	8009ea8 <_nx_udp_socket_unbind+0x9c>
    {

        /* Yes, this is the only socket on the port list.  */

        /* Clear the list head pointer and the next pointer in the socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =   NX_NULL;
 8009e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e98:	32e0      	adds	r2, #224	; 0xe0
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	64da      	str	r2, [r3, #76]	; 0x4c
 8009ea6:	e01b      	b.n	8009ee0 <_nx_udp_socket_unbind+0xd4>
    {

        /* Relink the neighbors of this UDP socket.  */

        /* Update the links of the adjacent sockets.  */
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous;
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	6d12      	ldr	r2, [r2, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 8009eb0:	651a      	str	r2, [r3, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            socket_ptr -> nx_udp_socket_bound_next;
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 8009eba:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Determine if the head of the port list points to the socket being removed.
           If so, we need to move the head pointer.  */
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 8009ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ebe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ec0:	32e0      	adds	r2, #224	; 0xe0
 8009ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d106      	bne.n	8009eda <_nx_udp_socket_unbind+0xce>
        {

            /* Yes, we need to move the port list head pointer.  */
            ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr -> nx_udp_socket_bound_next;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ed2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ed4:	32e0      	adds	r2, #224	; 0xe0
 8009ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        /* Clear the next pointer in the socket to indicate it is no longer bound.  */
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	64da      	str	r2, [r3, #76]	; 0x4c
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee6:	f383 8810 	msr	PRIMASK, r3
}
 8009eea:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* The socket is off the bound list...  we need to check for queued packets and possible
       receive suspension.  We need to clean up either of these conditions.  */
    if (socket_ptr -> nx_udp_socket_receive_count)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d01b      	beq.n	8009f2c <_nx_udp_socket_unbind+0x120>
    {

        /* Setup packet pointer.  */
        packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ef8:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Clear the head and the tail pointers.  */
        socket_ptr -> nx_udp_socket_receive_head =  NX_NULL;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	645a      	str	r2, [r3, #68]	; 0x44
        socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	649a      	str	r2, [r3, #72]	; 0x48

        /* Loop to clear all the packets out.  */
        while (socket_ptr -> nx_udp_socket_receive_count)
 8009f06:	e00c      	b.n	8009f22 <_nx_udp_socket_unbind+0x116>
        {

            /* Pickup the next queued packet.  */
            next_packet_ptr =  packet_ptr -> nx_packet_queue_next;
 8009f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f0a:	69db      	ldr	r3, [r3, #28]
 8009f0c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 8009f0e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009f10:	f7fe fee8 	bl	8008ce4 <_nx_packet_release>

            /* Move to the next packet.  */
            packet_ptr =  next_packet_ptr;
 8009f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f16:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1c:	1e5a      	subs	r2, r3, #1
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	63da      	str	r2, [r3, #60]	; 0x3c
        while (socket_ptr -> nx_udp_socket_receive_count)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1ee      	bne.n	8009f08 <_nx_udp_socket_unbind+0xfc>
 8009f2a:	e035      	b.n	8009f98 <_nx_udp_socket_unbind+0x18c>
        }
    }
    else if (socket_ptr -> nx_udp_socket_receive_suspended_count)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d031      	beq.n	8009f98 <_nx_udp_socket_unbind+0x18c>
    {

        /* Clear out all threads suspended on this socket.  */

        /* Pickup the first suspended thread.  */
        thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f38:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Clear the thread receive suspension list.  */
        socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Walk through the queue list to resume any and all threads suspended
           on this queue.  */
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 8009f40:	e026      	b.n	8009f90 <_nx_udp_socket_unbind+0x184>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f42:	f3ef 8310 	mrs	r3, PRIMASK
 8009f46:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009f48:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009f4a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f4c:	b672      	cpsid	i
    return(int_posture);
 8009f4e:	69bb      	ldr	r3, [r7, #24]
        {

            /* Lockout interrupts.  */
            TX_DISABLE
 8009f50:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f54:	2200      	movs	r2, #0
 8009f56:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 8009f58:	4b5c      	ldr	r3, [pc, #368]	; (800a0cc <_nx_udp_socket_unbind+0x2c0>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	4a5b      	ldr	r2, [pc, #364]	; (800a0cc <_nx_udp_socket_unbind+0x2c0>)
 8009f60:	6013      	str	r3, [r2, #0]
 8009f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f64:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f66:	6a3b      	ldr	r3, [r7, #32]
 8009f68:	f383 8810 	msr	PRIMASK, r3
}
 8009f6c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set the return status in the thread to NX_SOCKET_UNBOUND.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SOCKET_UNBOUND;
 8009f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f70:	2226      	movs	r2, #38	; 0x26
 8009f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8009f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7a:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 8009f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f80:	4618      	mov	r0, r3
 8009f82:	f002 fe8d 	bl	800cca0 <_tx_thread_system_resume>

            /* Decrease the suspended count.  */
            socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f8a:	1e5a      	subs	r2, r3, #1
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	65da      	str	r2, [r3, #92]	; 0x5c
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1d4      	bne.n	8009f42 <_nx_udp_socket_unbind+0x136>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f98:	f3ef 8310 	mrs	r3, PRIMASK
 8009f9c:	617b      	str	r3, [r7, #20]
    return(posture);
 8009f9e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009fa0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009fa2:	b672      	cpsid	i
    return(int_posture);
 8009fa4:	693b      	ldr	r3, [r7, #16]
        }
    }

    /* Disable interrupts again.  */
    TX_DISABLE
 8009fa6:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there are any threads suspended on trying to bind to the
       same port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_bind_suspension_list;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fac:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (thread_ptr)
 8009fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d079      	beq.n	800a0a8 <_nx_udp_socket_unbind+0x29c>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8009fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d103      	bne.n	8009fc6 <_nx_udp_socket_unbind+0x1ba>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	661a      	str	r2, [r3, #96]	; 0x60
 8009fc4:	e00d      	b.n	8009fe2 <_nx_udp_socket_unbind+0x1d6>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8009fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8009fd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fd4:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009fd6:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8009fdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fde:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009fe0:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fe6:	1e5a      	subs	r2, r3, #1
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	665a      	str	r2, [r3, #100]	; 0x64

        /* Pickup the new socket structure to link to the port list.  */
        new_socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8009fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ff0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Clear the new socket's bind in progress flag.  */
        new_socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 8009ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Inherit the suspension list from the previously bound socket.  */
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
            socket_ptr -> nx_udp_socket_bind_suspension_list;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffe:	661a      	str	r2, [r3, #96]	; 0x60
        socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	661a      	str	r2, [r3, #96]	; 0x60

        /* Link the new socket to the bound list.  */
        if (ip_ptr -> nx_ip_udp_port_table[index])
 800a006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a00a:	32e0      	adds	r2, #224	; 0xe0
 800a00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d01e      	beq.n	800a052 <_nx_udp_socket_unbind+0x246>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            new_socket_ptr -> nx_udp_socket_bound_next =
                ip_ptr -> nx_ip_udp_port_table[index];
 800a014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a016:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a018:	32e0      	adds	r2, #224	; 0xe0
 800a01a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            new_socket_ptr -> nx_udp_socket_bound_next =
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =
                (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 800a022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a024:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a026:	32e0      	adds	r2, #224	; 0xe0
 800a028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a02c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            new_socket_ptr -> nx_udp_socket_bound_previous =
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800a032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a036:	32e0      	adds	r2, #224	; 0xe0
 800a038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a03c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a03e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a040:	64da      	str	r2, [r3, #76]	; 0x4c
                new_socket_ptr;
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   new_socket_ptr;
 800a042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a046:	32e0      	adds	r2, #224	; 0xe0
 800a048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a04e:	651a      	str	r2, [r3, #80]	; 0x50
 800a050:	e00b      	b.n	800a06a <_nx_udp_socket_unbind+0x25e>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            new_socket_ptr -> nx_udp_socket_bound_next =      new_socket_ptr;
 800a052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a056:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =  new_socket_ptr;
 800a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a05c:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =           new_socket_ptr;
 800a05e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a060:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a062:	32e0      	adds	r2, #224	; 0xe0
 800a064:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a06c:	2200      	movs	r2, #0
 800a06e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800a070:	4b16      	ldr	r3, [pc, #88]	; (800a0cc <_nx_udp_socket_unbind+0x2c0>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	3301      	adds	r3, #1
 800a076:	4a15      	ldr	r2, [pc, #84]	; (800a0cc <_nx_udp_socket_unbind+0x2c0>)
 800a078:	6013      	str	r3, [r2, #0]
 800a07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f383 8810 	msr	PRIMASK, r3
}
 800a084:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800a086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a088:	2200      	movs	r2, #0
 800a08a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a08e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a090:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a094:	4618      	mov	r0, r3
 800a096:	f002 f913 	bl	800c2c0 <_tx_mutex_put>

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800a09a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a09c:	f002 fe00 	bl	800cca0 <_tx_thread_system_resume>
        /* Return success to the caller.  */
        return(NX_SUCCESS);
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800a0a0:	f002 fdc4 	bl	800cc2c <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	e00c      	b.n	800a0c2 <_nx_udp_socket_unbind+0x2b6>
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0aa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	f383 8810 	msr	PRIMASK, r3
}
 800a0b2:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a0b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0b6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f002 f900 	bl	800c2c0 <_tx_mutex_put>
        return(NX_SUCCESS);
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3750      	adds	r7, #80	; 0x50
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	2001491c 	.word	0x2001491c

0800a0d0 <_nxd_udp_socket_send>:
/**************************************************************************/
UINT  _nxd_udp_socket_send(NX_UDP_SOCKET *socket_ptr,
                           NX_PACKET     *packet_ptr,
                           NXD_ADDRESS   *ip_address,
                           UINT           port)
{
 800a0d0:	b590      	push	{r4, r7, lr}
 800a0d2:	b097      	sub	sp, #92	; 0x5c
 800a0d4:	af04      	add	r7, sp, #16
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

NX_IP         *ip_ptr;
NX_UDP_HEADER *udp_header_ptr;
ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	647b      	str	r3, [r7, #68]	; 0x44
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef NX_DISABLE_IPV4
ULONG          next_hop_address = 0;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	617b      	str	r3, [r7, #20]
#endif /* !NX_DISABLE_IPV4  */
#if !defined(NX_DISABLE_IPV4) || (defined(FEATURE_NX_IPV6) && defined(NX_ENABLE_INTERFACE_CAPABILITY))
NX_INTERFACE  *interface_ptr = NX_NULL;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifdef TX_ENABLE_EVENT_TRACE
UINT           ip_address_log = 0;
#endif /* TX_ENABLE_EVENT_TRACE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT           compute_checksum = 1;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a0f2:	f3ef 8310 	mrs	r3, PRIMASK
 800a0f6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800a0fa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a0fc:	b672      	cpsid	i
    return(int_posture);
 800a0fe:	6a3b      	ldr	r3, [r7, #32]
    /* Disable UDP TX checksum. */
    compute_checksum = 0;
#endif /* NX_DISABLE_UDP_TX_CHECKSUM */

    /* Lockout interrupts.  */
    TX_DISABLE
 800a100:	633b      	str	r3, [r7, #48]	; 0x30

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the socket is currently bound to a UDP port.  */
    if (!socket_ptr ->  nx_udp_socket_bound_next)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a106:	2b00      	cmp	r3, #0
 800a108:	d107      	bne.n	800a11a <_nxd_udp_socket_send+0x4a>
 800a10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	f383 8810 	msr	PRIMASK, r3
}
 800a114:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
 800a116:	2324      	movs	r3, #36	; 0x24
 800a118:	e0d3      	b.n	800a2c2 <_nxd_udp_socket_send+0x1f2>
    }

    /* Pickup the important information from the socket.  */

    /* Set up the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a122:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	f383 8810 	msr	PRIMASK, r3
}
 800a12a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_DISABLE_IPV4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b04      	cmp	r3, #4
 800a132:	d118      	bne.n	800a166 <_nxd_udp_socket_send+0x96>
    {

        /* Look for a suitable interface. */
        _nx_ip_route_find(ip_ptr, ip_address -> nxd_ip_address.v4, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6859      	ldr	r1, [r3, #4]
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a13e:	f107 0314 	add.w	r3, r7, #20
 800a142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a144:	f7fd fbac 	bl	80078a0 <_nx_ip_route_find>
                          &next_hop_address);

        /* Check the packet interface.  */
        if (!packet_ptr -> nx_packet_address.nx_packet_interface_ptr)
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d101      	bne.n	800a154 <_nxd_udp_socket_send+0x84>
        {

            /* None found; return the error status. */
            return(NX_IP_ADDRESS_ERROR);
 800a150:	2321      	movs	r3, #33	; 0x21
 800a152:	e0b6      	b.n	800a2c2 <_nxd_udp_socket_send+0x1f2>
        }

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a158:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Fill in the IP src/dest address */
        ip_dest_addr = &ip_address -> nxd_ip_address.v4;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	3304      	adds	r3, #4
 800a15e:	643b      	str	r3, [r7, #64]	; 0x40
        ip_src_addr = &interface_ptr -> nx_interface_ip_address;
 800a160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a162:	3314      	adds	r3, #20
 800a164:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }
#endif /* NX_IPSEC_ENABLE */
        
    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	f1a3 0208 	sub.w	r2, r3, #8
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(ip_address -> nxd_ip_version);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	b2da      	uxtb	r2, r3
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 800a17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a184:	1c5a      	adds	r2, r3, #1
 800a186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 800a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	441a      	add	r2, r3
 800a198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	1c5a      	adds	r2, r3, #1
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	695a      	ldr	r2, [r3, #20]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b0:	441a      	add	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ba:	f103 0208 	add.w	r2, r3, #8
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the UDP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 =
        (((ULONG)socket_ptr -> nx_udp_socket_port) << NX_SHIFT_BY_16) | (ULONG)port;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	041a      	lsls	r2, r3, #16
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	431a      	orrs	r2, r3
    udp_header_ptr -> nx_udp_header_word_0 =
 800a1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d4:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1da:	041a      	lsls	r2, r3, #16
 800a1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1de:	605a      	str	r2, [r3, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_SEND, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
    swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	ba1a      	rev	r2, r3
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	ba1a      	rev	r2, r3
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	605a      	str	r2, [r3, #4]
    Note that with IPv6, UDP packet checksum is mandatory. However if the underly device
    driver is able to compute UDP checksum in hardware, let the driver handle the checksum
    computation.
    */

    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d003      	beq.n	800a204 <_nxd_udp_socket_send+0x134>
        (ip_address -> nxd_ip_version == NX_IP_VERSION_V6))
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800a200:	2b06      	cmp	r3, #6
 800a202:	d136      	bne.n	800a272 <_nxd_udp_socket_send+0x1a2>
    {
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 800a204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a208:	f003 0310 	and.w	r3, r3, #16
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d001      	beq.n	800a214 <_nxd_udp_socket_send+0x144>
        {
            compute_checksum = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	63bb      	str	r3, [r7, #56]	; 0x38
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 800a214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a216:	2b00      	cmp	r3, #0
 800a218:	d025      	beq.n	800a266 <_nxd_udp_socket_send+0x196>
        ULONG checksum;

            /* Yes, we need to compute the UDP checksum.  */
            checksum = _nx_ip_checksum_compute(packet_ptr,
                                               NX_PROTOCOL_UDP,
                                               (UINT)packet_ptr -> nx_packet_length,
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            checksum = _nx_ip_checksum_compute(packet_ptr,
 800a21e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a224:	2111      	movs	r1, #17
 800a226:	68b8      	ldr	r0, [r7, #8]
 800a228:	f7fc fa5c 	bl	80066e4 <_nx_ip_checksum_compute>
 800a22c:	4603      	mov	r3, r0
 800a22e:	637b      	str	r3, [r7, #52]	; 0x34
                                               ip_src_addr,
                                               ip_dest_addr);
            checksum = ~checksum & NX_LOWER_16_MASK;
 800a230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a232:	43db      	mvns	r3, r3
 800a234:	b29b      	uxth	r3, r3
 800a236:	637b      	str	r3, [r7, #52]	; 0x34

            /* If the computed checksum is zero, it will be transmitted as all ones. */
            /* RFC 768, page 2. */
            if (checksum == 0)
 800a238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d102      	bne.n	800a244 <_nxd_udp_socket_send+0x174>
            {
                checksum = 0xFFFF;
 800a23e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a242:	637b      	str	r3, [r7, #52]	; 0x34
            }

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	ba1a      	rev	r2, r3
 800a24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24c:	605a      	str	r2, [r3, #4]

            udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	685a      	ldr	r2, [r3, #4]
 800a252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a254:	431a      	orrs	r2, r3
 800a256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a258:	605a      	str	r2, [r3, #4]

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	ba1a      	rev	r2, r3
 800a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a262:	605a      	str	r2, [r3, #4]
 800a264:	e005      	b.n	800a272 <_nxd_udp_socket_send+0x1a2>
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        else
        {
            /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26a:	f043 0210 	orr.w	r2, r3, #16
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	639a      	str	r2, [r3, #56]	; 0x38
        }
#endif
    }

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a274:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a278:	f04f 31ff 	mov.w	r1, #4294967295
 800a27c:	4618      	mov	r0, r3
 800a27e:	f001 fda7 	bl	800bdd0 <_tx_mutex_get>
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

#ifndef NX_DISABLE_IPV4
    /* Send the UDP packet to the IPv4 component.  */
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b04      	cmp	r3, #4
 800a288:	d114      	bne.n	800a2b4 <_nxd_udp_socket_send+0x1e4>
    {

        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6858      	ldr	r0, [r3, #4]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6adc      	ldr	r4, [r3, #44]	; 0x2c
                           socket_ptr -> nx_udp_socket_type_of_service,
                           socket_ptr -> nx_udp_socket_time_to_live,
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a29a:	6979      	ldr	r1, [r7, #20]
 800a29c:	9103      	str	r1, [sp, #12]
 800a29e:	9202      	str	r2, [sp, #8]
 800a2a0:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800a2a4:	9201      	str	r2, [sp, #4]
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	4623      	mov	r3, r4
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	68b9      	ldr	r1, [r7, #8]
 800a2ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2b0:	f7fd fa80 	bl	80077b4 <_nx_ip_packet_send>
                             ip_dest_addr);
    }
#endif /* FEATURE_NX_IPV6 */

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f002 f800 	bl	800c2c0 <_tx_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	374c      	adds	r7, #76	; 0x4c
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd90      	pop	{r4, r7, pc}
	...

0800a2cc <_nxe_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (arp_cache_memory == NX_NULL))
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d007      	beq.n	800a2ee <_nxe_arp_enable+0x22>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a1c      	ldr	r2, [pc, #112]	; (800a354 <_nxe_arp_enable+0x88>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d102      	bne.n	800a2ee <_nxe_arp_enable+0x22>
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <_nxe_arp_enable+0x26>
    {
        return(NX_PTR_ERROR);
 800a2ee:	2307      	movs	r3, #7
 800a2f0:	e02c      	b.n	800a34c <_nxe_arp_enable+0x80>
    }

    /* Check to see if ARP is already enabled.  */
    if (ip_ptr -> nx_ip_arp_allocate)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <_nxe_arp_enable+0x34>
    {
        return(NX_ALREADY_ENABLED);
 800a2fc:	2315      	movs	r3, #21
 800a2fe:	e025      	b.n	800a34c <_nxe_arp_enable+0x80>
    }

    /* Check for invalid ARP cache size.  */
    if (arp_cache_size < sizeof(NX_ARP))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b33      	cmp	r3, #51	; 0x33
 800a304:	d801      	bhi.n	800a30a <_nxe_arp_enable+0x3e>
    {
        return(NX_SIZE_ERROR);
 800a306:	2309      	movs	r3, #9
 800a308:	e020      	b.n	800a34c <_nxe_arp_enable+0x80>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a30a:	f3ef 8305 	mrs	r3, IPSR
 800a30e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a310:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800a312:	4b11      	ldr	r3, [pc, #68]	; (800a358 <_nxe_arp_enable+0x8c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4313      	orrs	r3, r2
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d009      	beq.n	800a330 <_nxe_arp_enable+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a31c:	f3ef 8305 	mrs	r3, IPSR
 800a320:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	4b0c      	ldr	r3, [pc, #48]	; (800a358 <_nxe_arp_enable+0x8c>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4313      	orrs	r3, r2
 800a32a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a32e:	d304      	bcc.n	800a33a <_nxe_arp_enable+0x6e>
 800a330:	4b0a      	ldr	r3, [pc, #40]	; (800a35c <_nxe_arp_enable+0x90>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a0a      	ldr	r2, [pc, #40]	; (800a360 <_nxe_arp_enable+0x94>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d101      	bne.n	800a33e <_nxe_arp_enable+0x72>
 800a33a:	2311      	movs	r3, #17
 800a33c:	e006      	b.n	800a34c <_nxe_arp_enable+0x80>

    /* Call actual ARP enable function.  */
    status =  _nx_arp_enable(ip_ptr, arp_cache_memory, arp_cache_size);
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	68b9      	ldr	r1, [r7, #8]
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f7fb fa5e 	bl	8005804 <_nx_arp_enable>
 800a348:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800a34a:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3720      	adds	r7, #32
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	49502020 	.word	0x49502020
 800a358:	20000088 	.word	0x20000088
 800a35c:	20014884 	.word	0x20014884
 800a360:	200149cc 	.word	0x200149cc

0800a364 <_nxe_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                     NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                     VOID *memory_ptr, ULONG memory_size, UINT priority, UINT ip_control_block_size)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b092      	sub	sp, #72	; 0x48
 800a368:	af06      	add	r7, sp, #24
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]
 800a370:	603b      	str	r3, [r7, #0]

UINT       status;
UINT       old_threshold = 0;
 800a372:	2300      	movs	r3, #0
 800a374:	613b      	str	r3, [r7, #16]
UCHAR     *end_stack;
TX_THREAD *current_thread;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d011      	beq.n	800a3a0 <_nxe_ip_create+0x3c>
 800a37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00e      	beq.n	800a3a0 <_nxe_ip_create+0x3c>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800a382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a384:	681b      	ldr	r3, [r3, #0]
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800a386:	4a58      	ldr	r2, [pc, #352]	; (800a4e8 <_nxe_ip_create+0x184>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d109      	bne.n	800a3a0 <_nxe_ip_create+0x3c>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800a38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d006      	beq.n	800a3a0 <_nxe_ip_create+0x3c>
 800a392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a394:	2b00      	cmp	r3, #0
 800a396:	d003      	beq.n	800a3a0 <_nxe_ip_create+0x3c>
        (memory_ptr == NX_NULL) || (ip_control_block_size != (UINT)sizeof(NX_IP)))
 800a398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a39a:	f5b3 6ff9 	cmp.w	r3, #1992	; 0x7c8
 800a39e:	d001      	beq.n	800a3a4 <_nxe_ip_create+0x40>
    {
        return(NX_PTR_ERROR);
 800a3a0:	2307      	movs	r3, #7
 800a3a2:	e09d      	b.n	800a4e0 <_nxe_ip_create+0x17c>
    }

    /* Check for a memory size error.  */
    if (memory_size < TX_MINIMUM_STACK)
 800a3a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3a6:	2bc7      	cmp	r3, #199	; 0xc7
 800a3a8:	d801      	bhi.n	800a3ae <_nxe_ip_create+0x4a>
    {
        return(NX_SIZE_ERROR);
 800a3aa:	2309      	movs	r3, #9
 800a3ac:	e098      	b.n	800a4e0 <_nxe_ip_create+0x17c>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 800a3ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3b0:	2b1f      	cmp	r3, #31
 800a3b2:	d901      	bls.n	800a3b8 <_nxe_ip_create+0x54>
    {
        return(NX_OPTION_ERROR);
 800a3b4:	230a      	movs	r3, #10
 800a3b6:	e093      	b.n	800a4e0 <_nxe_ip_create+0x17c>
    }

    /* Calculate the end of the stack area.  */
    end_stack =  ((UCHAR *)memory_ptr) + (memory_size - 1);
 800a3b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3be:	4413      	add	r3, r2
 800a3c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800a3c2:	f002 fa99 	bl	800c8f8 <_tx_thread_identify>
 800a3c6:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    if (current_thread)
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d006      	beq.n	800a3dc <_nxe_ip_create+0x78>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800a3ce:	f107 0310 	add.w	r3, r7, #16
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	6a38      	ldr	r0, [r7, #32]
 800a3d8:	f002 fae8 	bl	800c9ac <_tx_thread_preemption_change>
    }

    /* Loop to check for the IP instance already created.  */
    created_ip =     _nx_ip_created_ptr;
 800a3dc:	4b43      	ldr	r3, [pc, #268]	; (800a4ec <_nxe_ip_create+0x188>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    created_count =  _nx_ip_created_count;
 800a3e2:	4b43      	ldr	r3, [pc, #268]	; (800a4f0 <_nxe_ip_create+0x18c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	62bb      	str	r3, [r7, #40]	; 0x28
    while (created_count--)
 800a3e8:	e02b      	b.n	800a442 <_nxe_ip_create+0xde>
    {

        /* Is the new ip already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ip_ptr == created_ip) ||
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d017      	beq.n	800a422 <_nxe_ip_create+0xbe>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800a3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
        if ((ip_ptr == created_ip) ||
 800a3f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d305      	bcc.n	800a40a <_nxe_ip_create+0xa6>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800a3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a400:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a406:	429a      	cmp	r2, r3
 800a408:	d30b      	bcc.n	800a422 <_nxe_ip_create+0xbe>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800a40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800a410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a412:	429a      	cmp	r2, r3
 800a414:	d311      	bcc.n	800a43a <_nxe_ip_create+0xd6>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800a416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a418:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a41c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a41e:	429a      	cmp	r2, r3
 800a420:	d20b      	bcs.n	800a43a <_nxe_ip_create+0xd6>
        {

            /* Restore preemption.  */
            if (current_thread)
 800a422:	6a3b      	ldr	r3, [r7, #32]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d006      	beq.n	800a436 <_nxe_ip_create+0xd2>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	f107 0210 	add.w	r2, r7, #16
 800a42e:	4619      	mov	r1, r3
 800a430:	6a38      	ldr	r0, [r7, #32]
 800a432:	f002 fabb 	bl	800c9ac <_tx_thread_preemption_change>
            }

            /* Duplicate ip created, return an error!  */
            return(NX_PTR_ERROR);
 800a436:	2307      	movs	r3, #7
 800a438:	e052      	b.n	800a4e0 <_nxe_ip_create+0x17c>
        }

        /* Move to next entry.  */
        created_ip =  created_ip -> nx_ip_created_next;
 800a43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43c:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 800a440:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (created_count--)
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	1e5a      	subs	r2, r3, #1
 800a446:	62ba      	str	r2, [r7, #40]	; 0x28
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1ce      	bne.n	800a3ea <_nxe_ip_create+0x86>
    }

    /* Restore preemption.  */
    if (current_thread)
 800a44c:	6a3b      	ldr	r3, [r7, #32]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d006      	beq.n	800a460 <_nxe_ip_create+0xfc>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	f107 0210 	add.w	r2, r7, #16
 800a458:	4619      	mov	r1, r3
 800a45a:	6a38      	ldr	r0, [r7, #32]
 800a45c:	f002 faa6 	bl	800c9ac <_tx_thread_preemption_change>
    }

    /* Check for invalid IP address.  Note that Interface with DHCP enabled
       would start with 0.0.0.0.  Therefore the 0 IP address is allowed. */
    if ((ip_address != 0) &&
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d010      	beq.n	800a488 <_nxe_ip_create+0x124>
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800a466:	687b      	ldr	r3, [r7, #4]
    if ((ip_address != 0) &&
 800a468:	2b00      	cmp	r3, #0
 800a46a:	da0d      	bge.n	800a488 <_nxe_ip_create+0x124>
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800a472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a476:	d007      	beq.n	800a488 <_nxe_ip_create+0x124>
        ((ip_address & NX_IP_CLASS_C_MASK) != NX_IP_CLASS_C_TYPE))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800a47e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a482:	d001      	beq.n	800a488 <_nxe_ip_create+0x124>
    {
        return(NX_IP_ADDRESS_ERROR);
 800a484:	2321      	movs	r3, #33	; 0x21
 800a486:	e02b      	b.n	800a4e0 <_nxe_ip_create+0x17c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a488:	f3ef 8305 	mrs	r3, IPSR
 800a48c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a48e:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800a490:	4b18      	ldr	r3, [pc, #96]	; (800a4f4 <_nxe_ip_create+0x190>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4313      	orrs	r3, r2
 800a496:	2b00      	cmp	r3, #0
 800a498:	d009      	beq.n	800a4ae <_nxe_ip_create+0x14a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a49a:	f3ef 8305 	mrs	r3, IPSR
 800a49e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	4b14      	ldr	r3, [pc, #80]	; (800a4f4 <_nxe_ip_create+0x190>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a4ac:	d304      	bcc.n	800a4b8 <_nxe_ip_create+0x154>
 800a4ae:	4b12      	ldr	r3, [pc, #72]	; (800a4f8 <_nxe_ip_create+0x194>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a12      	ldr	r2, [pc, #72]	; (800a4fc <_nxe_ip_create+0x198>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d101      	bne.n	800a4bc <_nxe_ip_create+0x158>
 800a4b8:	2311      	movs	r3, #17
 800a4ba:	e011      	b.n	800a4e0 <_nxe_ip_create+0x17c>

    /* Call actual IP instance create function.  */
    status =  _nx_ip_create(ip_ptr, name, ip_address, network_mask, default_pool, ip_link_driver,
 800a4bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4be:	9304      	str	r3, [sp, #16]
 800a4c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4c2:	9303      	str	r3, [sp, #12]
 800a4c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4c6:	9302      	str	r3, [sp, #8]
 800a4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ca:	9301      	str	r3, [sp, #4]
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	68b9      	ldr	r1, [r7, #8]
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f7fc f9f0 	bl	80068bc <_nx_ip_create>
 800a4dc:	61f8      	str	r0, [r7, #28]
                            memory_ptr, memory_size, priority);

    /* Return completion status.  */
    return(status);
 800a4de:	69fb      	ldr	r3, [r7, #28]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3730      	adds	r7, #48	; 0x30
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	5041434b 	.word	0x5041434b
 800a4ec:	20014828 	.word	0x20014828
 800a4f0:	2001482c 	.word	0x2001482c
 800a4f4:	20000088 	.word	0x20000088
 800a4f8:	20014884 	.word	0x20014884
 800a4fc:	200149cc 	.word	0x200149cc

0800a500 <_nxe_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                           ULONG packet_type, ULONG wait_option)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
 800a50c:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (packet_ptr == NX_NULL))
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d007      	beq.n	800a524 <_nxe_packet_allocate+0x24>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a18      	ldr	r2, [pc, #96]	; (800a57c <_nxe_packet_allocate+0x7c>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d102      	bne.n	800a524 <_nxe_packet_allocate+0x24>
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d101      	bne.n	800a528 <_nxe_packet_allocate+0x28>
    {
        return(NX_PTR_ERROR);
 800a524:	2307      	movs	r3, #7
 800a526:	e025      	b.n	800a574 <_nxe_packet_allocate+0x74>
    }

    /* Check for an invalid packet type - for alignment purposes, it must be evenly divisible by the size
       of a ULONG.  */
    if (packet_type % sizeof(ULONG))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f003 0303 	and.w	r3, r3, #3
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d001      	beq.n	800a536 <_nxe_packet_allocate+0x36>
    {
        return(NX_OPTION_ERROR);
 800a532:	230a      	movs	r3, #10
 800a534:	e01e      	b.n	800a574 <_nxe_packet_allocate+0x74>
    }

    /* Check for a thread caller if the wait option specifies suspension.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d013      	beq.n	800a564 <_nxe_packet_allocate+0x64>
 800a53c:	4b10      	ldr	r3, [pc, #64]	; (800a580 <_nxe_packet_allocate+0x80>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00d      	beq.n	800a560 <_nxe_packet_allocate+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a544:	f3ef 8305 	mrs	r3, IPSR
 800a548:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a54a:	693a      	ldr	r2, [r7, #16]
 800a54c:	4b0d      	ldr	r3, [pc, #52]	; (800a584 <_nxe_packet_allocate+0x84>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4313      	orrs	r3, r2
 800a552:	2b00      	cmp	r3, #0
 800a554:	d104      	bne.n	800a560 <_nxe_packet_allocate+0x60>
 800a556:	4b0a      	ldr	r3, [pc, #40]	; (800a580 <_nxe_packet_allocate+0x80>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a0b      	ldr	r2, [pc, #44]	; (800a588 <_nxe_packet_allocate+0x88>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d101      	bne.n	800a564 <_nxe_packet_allocate+0x64>
 800a560:	2311      	movs	r3, #17
 800a562:	e007      	b.n	800a574 <_nxe_packet_allocate+0x74>

    /* Call actual packet allocate function.  */
    status =  _nx_packet_allocate(pool_ptr,  packet_ptr, packet_type, wait_option);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	68b9      	ldr	r1, [r7, #8]
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f7fe f858 	bl	8008620 <_nx_packet_allocate>
 800a570:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800a572:	697b      	ldr	r3, [r7, #20]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3718      	adds	r7, #24
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	5041434b 	.word	0x5041434b
 800a580:	20014884 	.word	0x20014884
 800a584:	20000088 	.word	0x20000088
 800a588:	200149cc 	.word	0x200149cc

0800a58c <_nxe_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                              NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b088      	sub	sp, #32
 800a590:	af02      	add	r7, sp, #8
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) ||
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d00a      	beq.n	800a5b6 <_nxe_packet_data_append+0x2a>
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a22      	ldr	r2, [pc, #136]	; (800a630 <_nxe_packet_data_append+0xa4>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d105      	bne.n	800a5b6 <_nxe_packet_data_append+0x2a>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <_nxe_packet_data_append+0x2a>
        (packet_ptr == NX_NULL) || (data_start == NX_NULL))
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <_nxe_packet_data_append+0x2e>
    {
        return(NX_PTR_ERROR);
 800a5b6:	2307      	movs	r3, #7
 800a5b8:	e035      	b.n	800a626 <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid size of data to append.  */
    if (!data_size)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d101      	bne.n	800a5c4 <_nxe_packet_data_append+0x38>
    {
        return(NX_SIZE_ERROR);
 800a5c0:	2309      	movs	r3, #9
 800a5c2:	e030      	b.n	800a626 <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	689a      	ldr	r2, [r3, #8]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d201      	bcs.n	800a5d4 <_nxe_packet_data_append+0x48>
    {
        return(NX_UNDERFLOW);
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	e028      	b.n	800a626 <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	68da      	ldr	r2, [r3, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d901      	bls.n	800a5e4 <_nxe_packet_data_append+0x58>
    {
        return(NX_OVERFLOW);
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	e020      	b.n	800a626 <_nxe_packet_data_append+0x9a>
    }

    /* Check for appropriate caller.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 800a5e4:	6a3b      	ldr	r3, [r7, #32]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d013      	beq.n	800a612 <_nxe_packet_data_append+0x86>
 800a5ea:	4b12      	ldr	r3, [pc, #72]	; (800a634 <_nxe_packet_data_append+0xa8>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00d      	beq.n	800a60e <_nxe_packet_data_append+0x82>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a5f2:	f3ef 8305 	mrs	r3, IPSR
 800a5f6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	4b0f      	ldr	r3, [pc, #60]	; (800a638 <_nxe_packet_data_append+0xac>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	2b00      	cmp	r3, #0
 800a602:	d104      	bne.n	800a60e <_nxe_packet_data_append+0x82>
 800a604:	4b0b      	ldr	r3, [pc, #44]	; (800a634 <_nxe_packet_data_append+0xa8>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a0c      	ldr	r2, [pc, #48]	; (800a63c <_nxe_packet_data_append+0xb0>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d101      	bne.n	800a612 <_nxe_packet_data_append+0x86>
 800a60e:	2311      	movs	r3, #17
 800a610:	e009      	b.n	800a626 <_nxe_packet_data_append+0x9a>

    /* Call actual packet data append function.  */
    status =  _nx_packet_data_append(packet_ptr, data_start, data_size, pool_ptr, wait_option);
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	68b9      	ldr	r1, [r7, #8]
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f7fe f959 	bl	80088d4 <_nx_packet_data_append>
 800a622:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800a624:	697b      	ldr	r3, [r7, #20]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3718      	adds	r7, #24
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	5041434b 	.word	0x5041434b
 800a634:	20014884 	.word	0x20014884
 800a638:	20000088 	.word	0x20000088
 800a63c:	200149cc 	.word	0x200149cc

0800a640 <_nxe_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                              VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b094      	sub	sp, #80	; 0x50
 800a644:	af02      	add	r7, sp, #8
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
 800a64c:	603b      	str	r3, [r7, #0]

UINT            status;
ULONG           rounded_payload_size;
ULONG           rounded_pool_size;
ULONG           header_size;
UINT            old_threshold = 0;
 800a64e:	2300      	movs	r3, #0
 800a650:	613b      	str	r3, [r7, #16]
VOID           *rounded_pool_start;
TX_THREAD      *current_thread;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_start == NX_NULL) || (pool_control_block_size != (UINT)sizeof(NX_PACKET_POOL)))
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d005      	beq.n	800a664 <_nxe_packet_pool_create+0x24>
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d002      	beq.n	800a664 <_nxe_packet_pool_create+0x24>
 800a65e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a660:	2b3c      	cmp	r3, #60	; 0x3c
 800a662:	d001      	beq.n	800a668 <_nxe_packet_pool_create+0x28>
    {
        return(NX_PTR_ERROR);
 800a664:	2307      	movs	r3, #7
 800a666:	e0a7      	b.n	800a7b8 <_nxe_packet_pool_create+0x178>
    }

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	3303      	adds	r3, #3
 800a66c:	f023 0303 	bic.w	r3, r3, #3
 800a670:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a676:	1ad2      	subs	r2, r2, r3
 800a678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a67a:	4413      	add	r3, r2
 800a67c:	f023 0303 	bic.w	r3, r3, #3
 800a680:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 800a682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a684:	333c      	adds	r3, #60	; 0x3c
 800a686:	637b      	str	r3, [r7, #52]	; 0x34

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800a688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68a:	3303      	adds	r3, #3
 800a68c:	f023 0303 	bic.w	r3, r3, #3
 800a690:	637b      	str	r3, [r7, #52]	; 0x34

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 800a692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	633b      	str	r3, [r7, #48]	; 0x30

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    rounded_payload_size =  (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800a69a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4413      	add	r3, r2
 800a6a0:	3303      	adds	r3, #3
 800a6a2:	f023 0203 	bic.w	r2, r3, #3
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	1ad3      	subs	r3, r2, r3
 800a6aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check for an invalid pool and payload size.  */
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800a6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	d908      	bls.n	800a6c4 <_nxe_packet_pool_create+0x84>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d005      	beq.n	800a6c4 <_nxe_packet_pool_create+0x84>
        ((rounded_payload_size + header_size) > rounded_pool_size))
 800a6b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6bc:	4413      	add	r3, r2
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800a6be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d201      	bcs.n	800a6c8 <_nxe_packet_pool_create+0x88>
    {
        return(NX_SIZE_ERROR);
 800a6c4:	2309      	movs	r3, #9
 800a6c6:	e077      	b.n	800a7b8 <_nxe_packet_pool_create+0x178>
    }

    /* Calculate the end of the pool memory area.  */
    end_memory =  ((CHAR *)pool_start) + (pool_size - 1);
 800a6c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800a6d2:	f002 f911 	bl	800c8f8 <_tx_thread_identify>
 800a6d6:	6278      	str	r0, [r7, #36]	; 0x24

    /* Disable preemption temporarily.  */
    if (current_thread)
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d006      	beq.n	800a6ec <_nxe_packet_pool_create+0xac>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800a6de:	f107 0310 	add.w	r3, r7, #16
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6e8:	f002 f960 	bl	800c9ac <_tx_thread_preemption_change>
    }

    /* Loop to check for the pool instance already created.  */
    created_pool =   _nx_packet_pool_created_ptr;
 800a6ec:	4b34      	ldr	r3, [pc, #208]	; (800a7c0 <_nxe_packet_pool_create+0x180>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	647b      	str	r3, [r7, #68]	; 0x44
    created_count =  _nx_packet_pool_created_count;
 800a6f2:	4b34      	ldr	r3, [pc, #208]	; (800a7c4 <_nxe_packet_pool_create+0x184>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	643b      	str	r3, [r7, #64]	; 0x40
    while (created_count--)
 800a6f8:	e02b      	b.n	800a752 <_nxe_packet_pool_create+0x112>
    {

        /* Calculate the created pool's end of memory.  */
        created_end =  created_pool -> nx_packet_pool_start + (created_pool -> nx_packet_pool_size - 1);
 800a6fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6fc:	6a1a      	ldr	r2, [r3, #32]
 800a6fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a702:	3b01      	subs	r3, #1
 800a704:	4413      	add	r3, r2
 800a706:	61fb      	str	r3, [r7, #28]

        /* Is the new pool already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((pool_ptr == created_pool) ||
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d011      	beq.n	800a734 <_nxe_packet_pool_create+0xf4>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800a710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a712:	6a1b      	ldr	r3, [r3, #32]
        if ((pool_ptr == created_pool) ||
 800a714:	683a      	ldr	r2, [r7, #0]
 800a716:	429a      	cmp	r2, r3
 800a718:	d303      	bcc.n	800a722 <_nxe_packet_pool_create+0xe2>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d308      	bcc.n	800a734 <_nxe_packet_pool_create+0xf4>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800a722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a724:	6a1b      	ldr	r3, [r3, #32]
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800a726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a728:	429a      	cmp	r2, r3
 800a72a:	d30f      	bcc.n	800a74c <_nxe_packet_pool_create+0x10c>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800a72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	429a      	cmp	r2, r3
 800a732:	d20b      	bcs.n	800a74c <_nxe_packet_pool_create+0x10c>
        {

            /* Restore preemption.  */
            if (current_thread)
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	2b00      	cmp	r3, #0
 800a738:	d006      	beq.n	800a748 <_nxe_packet_pool_create+0x108>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	f107 0210 	add.w	r2, r7, #16
 800a740:	4619      	mov	r1, r3
 800a742:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a744:	f002 f932 	bl	800c9ac <_tx_thread_preemption_change>
            }

            /* Duplicate packet pool created, return an error!  */
            return(NX_PTR_ERROR);
 800a748:	2307      	movs	r3, #7
 800a74a:	e035      	b.n	800a7b8 <_nxe_packet_pool_create+0x178>
        }

        /* Move to next entry.  */
        created_pool =  created_pool -> nx_packet_pool_created_next;
 800a74c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a750:	647b      	str	r3, [r7, #68]	; 0x44
    while (created_count--)
 800a752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a754:	1e5a      	subs	r2, r3, #1
 800a756:	643a      	str	r2, [r7, #64]	; 0x40
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1ce      	bne.n	800a6fa <_nxe_packet_pool_create+0xba>
    }

    /* Restore preemption.  */
    if (current_thread)
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d006      	beq.n	800a770 <_nxe_packet_pool_create+0x130>
    {
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	f107 0210 	add.w	r2, r7, #16
 800a768:	4619      	mov	r1, r3
 800a76a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a76c:	f002 f91e 	bl	800c9ac <_tx_thread_preemption_change>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a770:	f3ef 8305 	mrs	r3, IPSR
 800a774:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a776:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800a778:	4b13      	ldr	r3, [pc, #76]	; (800a7c8 <_nxe_packet_pool_create+0x188>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d009      	beq.n	800a796 <_nxe_packet_pool_create+0x156>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a782:	f3ef 8305 	mrs	r3, IPSR
 800a786:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	4b0f      	ldr	r3, [pc, #60]	; (800a7c8 <_nxe_packet_pool_create+0x188>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4313      	orrs	r3, r2
 800a790:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a794:	d304      	bcc.n	800a7a0 <_nxe_packet_pool_create+0x160>
 800a796:	4b0d      	ldr	r3, [pc, #52]	; (800a7cc <_nxe_packet_pool_create+0x18c>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a0d      	ldr	r2, [pc, #52]	; (800a7d0 <_nxe_packet_pool_create+0x190>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d101      	bne.n	800a7a4 <_nxe_packet_pool_create+0x164>
 800a7a0:	2311      	movs	r3, #17
 800a7a2:	e009      	b.n	800a7b8 <_nxe_packet_pool_create+0x178>

    /* Call actual packet pool create function.  */
    status =  _nx_packet_pool_create(pool_ptr, name_ptr, payload_size, pool_start, pool_size);
 800a7a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	68b9      	ldr	r1, [r7, #8]
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f7fe f9b6 	bl	8008b20 <_nx_packet_pool_create>
 800a7b4:	6238      	str	r0, [r7, #32]

    /* Return completion status.  */
    return(status);
 800a7b6:	6a3b      	ldr	r3, [r7, #32]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3748      	adds	r7, #72	; 0x48
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	20014830 	.word	0x20014830
 800a7c4:	20014834 	.word	0x20014834
 800a7c8:	20000088 	.word	0x20000088
 800a7cc:	20014884 	.word	0x20014884
 800a7d0:	200149cc 	.word	0x200149cc

0800a7d4 <_nxe_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_release(NX_PACKET **packet_ptr_ptr)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d009      	beq.n	800a7fc <_nxe_packet_release+0x28>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d005      	beq.n	800a7fc <_nxe_packet_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800a7f6:	4a12      	ldr	r2, [pc, #72]	; (800a840 <_nxe_packet_release+0x6c>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d001      	beq.n	800a800 <_nxe_packet_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800a7fc:	2307      	movs	r3, #7
 800a7fe:	e01a      	b.n	800a836 <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	689a      	ldr	r2, [r3, #8]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d201      	bcs.n	800a810 <_nxe_packet_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800a80c:	2302      	movs	r3, #2
 800a80e:	e012      	b.n	800a836 <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	68da      	ldr	r2, [r3, #12]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	695b      	ldr	r3, [r3, #20]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d901      	bls.n	800a820 <_nxe_packet_release+0x4c>
    {
        return(NX_OVERFLOW);
 800a81c:	2303      	movs	r3, #3
 800a81e:	e00a      	b.n	800a836 <_nxe_packet_release+0x62>
    }

    /* Call actual packet release function.  */
    status =  _nx_packet_release(packet_ptr);
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f7fe fa5f 	bl	8008ce4 <_nx_packet_release>
 800a826:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d102      	bne.n	800a834 <_nxe_packet_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800a834:	68bb      	ldr	r3, [r7, #8]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	5041434b 	.word	0x5041434b

0800a844 <_nxe_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_transmit_release(NX_PACKET **packet_ptr_ptr)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d009      	beq.n	800a86c <_nxe_packet_transmit_release+0x28>
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d005      	beq.n	800a86c <_nxe_packet_transmit_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800a866:	4a12      	ldr	r2, [pc, #72]	; (800a8b0 <_nxe_packet_transmit_release+0x6c>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d001      	beq.n	800a870 <_nxe_packet_transmit_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800a86c:	2307      	movs	r3, #7
 800a86e:	e01a      	b.n	800a8a6 <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	689a      	ldr	r2, [r3, #8]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d201      	bcs.n	800a880 <_nxe_packet_transmit_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800a87c:	2302      	movs	r3, #2
 800a87e:	e012      	b.n	800a8a6 <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	68da      	ldr	r2, [r3, #12]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	695b      	ldr	r3, [r3, #20]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d901      	bls.n	800a890 <_nxe_packet_transmit_release+0x4c>
    {
        return(NX_OVERFLOW);
 800a88c:	2303      	movs	r3, #3
 800a88e:	e00a      	b.n	800a8a6 <_nxe_packet_transmit_release+0x62>
    }

    /* Call actual packet transmit release function.  */
    status =  _nx_packet_transmit_release(packet_ptr);
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f7fe fadf 	bl	8008e54 <_nx_packet_transmit_release>
 800a896:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d102      	bne.n	800a8a4 <_nxe_packet_transmit_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800a8a4:	68bb      	ldr	r3, [r7, #8]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	5041434b 	.word	0x5041434b

0800a8b4 <_nxe_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_enable(NX_IP *ip_ptr)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b086      	sub	sp, #24
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d004      	beq.n	800a8cc <_nxe_udp_enable+0x18>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a15      	ldr	r2, [pc, #84]	; (800a91c <_nxe_udp_enable+0x68>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d001      	beq.n	800a8d0 <_nxe_udp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 800a8cc:	2307      	movs	r3, #7
 800a8ce:	e020      	b.n	800a912 <_nxe_udp_enable+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (ip_ptr -> nx_ip_udp_packet_receive)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <_nxe_udp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 800a8da:	2315      	movs	r3, #21
 800a8dc:	e019      	b.n	800a912 <_nxe_udp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a8de:	f3ef 8305 	mrs	r3, IPSR
 800a8e2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a8e4:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 800a8e6:	4b0e      	ldr	r3, [pc, #56]	; (800a920 <_nxe_udp_enable+0x6c>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00b      	beq.n	800a908 <_nxe_udp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a8f0:	f3ef 8305 	mrs	r3, IPSR
 800a8f4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	4b09      	ldr	r3, [pc, #36]	; (800a920 <_nxe_udp_enable+0x6c>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a902:	d201      	bcs.n	800a908 <_nxe_udp_enable+0x54>
 800a904:	2311      	movs	r3, #17
 800a906:	e004      	b.n	800a912 <_nxe_udp_enable+0x5e>

    /* Call actual UDP enable function.  */
    status =  _nx_udp_enable(ip_ptr);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7fe fc2b 	bl	8009164 <_nx_udp_enable>
 800a90e:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800a910:	697b      	ldr	r3, [r7, #20]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	49502020 	.word	0x49502020
 800a920:	20000088 	.word	0x20000088

0800a924 <_nxe_udp_socket_bind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d004      	beq.n	800a940 <_nxe_udp_socket_bind+0x1c>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a19      	ldr	r2, [pc, #100]	; (800a9a0 <_nxe_udp_socket_bind+0x7c>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d001      	beq.n	800a944 <_nxe_udp_socket_bind+0x20>
    {
        return(NX_PTR_ERROR);
 800a940:	2307      	movs	r3, #7
 800a942:	e028      	b.n	800a996 <_nxe_udp_socket_bind+0x72>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d101      	bne.n	800a954 <_nxe_udp_socket_bind+0x30>
    {
        return(NX_NOT_ENABLED);
 800a950:	2314      	movs	r3, #20
 800a952:	e020      	b.n	800a996 <_nxe_udp_socket_bind+0x72>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a95a:	d301      	bcc.n	800a960 <_nxe_udp_socket_bind+0x3c>
    {
        return(NX_INVALID_PORT);
 800a95c:	2346      	movs	r3, #70	; 0x46
 800a95e:	e01a      	b.n	800a996 <_nxe_udp_socket_bind+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a960:	f3ef 8305 	mrs	r3, IPSR
 800a964:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a966:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800a968:	4b0e      	ldr	r3, [pc, #56]	; (800a9a4 <_nxe_udp_socket_bind+0x80>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d108      	bne.n	800a984 <_nxe_udp_socket_bind+0x60>
 800a972:	4b0d      	ldr	r3, [pc, #52]	; (800a9a8 <_nxe_udp_socket_bind+0x84>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d004      	beq.n	800a984 <_nxe_udp_socket_bind+0x60>
 800a97a:	4b0b      	ldr	r3, [pc, #44]	; (800a9a8 <_nxe_udp_socket_bind+0x84>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a0b      	ldr	r2, [pc, #44]	; (800a9ac <_nxe_udp_socket_bind+0x88>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d101      	bne.n	800a988 <_nxe_udp_socket_bind+0x64>
 800a984:	2311      	movs	r3, #17
 800a986:	e006      	b.n	800a996 <_nxe_udp_socket_bind+0x72>

    /* Call actual UDP socket bind function.  */
    status =  _nx_udp_socket_bind(socket_ptr, port, wait_option);
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	68b9      	ldr	r1, [r7, #8]
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f7fe fea5 	bl	80096dc <_nx_udp_socket_bind>
 800a992:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800a994:	697b      	ldr	r3, [r7, #20]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3718      	adds	r7, #24
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	55445020 	.word	0x55445020
 800a9a4:	20000088 	.word	0x20000088
 800a9a8:	20014884 	.word	0x20014884
 800a9ac:	200149cc 	.word	0x200149cc

0800a9b0 <_nxe_udp_socket_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                             ULONG type_of_service, ULONG fragment, UINT time_to_live,
                             ULONG queue_maximum, UINT udp_socket_size)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b08e      	sub	sp, #56	; 0x38
 800a9b4:	af04      	add	r7, sp, #16
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
 800a9bc:	603b      	str	r3, [r7, #0]
NX_UDP_SOCKET *created_socket;
ULONG          created_count;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) ||
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00a      	beq.n	800a9da <_nxe_udp_socket_create+0x2a>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a3f      	ldr	r2, [pc, #252]	; (800aac8 <_nxe_udp_socket_create+0x118>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d105      	bne.n	800a9da <_nxe_udp_socket_create+0x2a>
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d002      	beq.n	800a9da <_nxe_udp_socket_create+0x2a>
        (socket_ptr == NX_NULL) || (udp_socket_size != (UINT)sizeof(NX_UDP_SOCKET)))
 800a9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d6:	2b78      	cmp	r3, #120	; 0x78
 800a9d8:	d001      	beq.n	800a9de <_nxe_udp_socket_create+0x2e>
    {
        return(NX_PTR_ERROR);
 800a9da:	2307      	movs	r3, #7
 800a9dc:	e06f      	b.n	800aabe <_nxe_udp_socket_create+0x10e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a9de:	f3ef 8305 	mrs	r3, IPSR
 800a9e2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a9e4:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800a9e6:	4b39      	ldr	r3, [pc, #228]	; (800aacc <_nxe_udp_socket_create+0x11c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d009      	beq.n	800aa04 <_nxe_udp_socket_create+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a9f0:	f3ef 8305 	mrs	r3, IPSR
 800a9f4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	4b34      	ldr	r3, [pc, #208]	; (800aacc <_nxe_udp_socket_create+0x11c>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800aa02:	d304      	bcc.n	800aa0e <_nxe_udp_socket_create+0x5e>
 800aa04:	4b32      	ldr	r3, [pc, #200]	; (800aad0 <_nxe_udp_socket_create+0x120>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a32      	ldr	r2, [pc, #200]	; (800aad4 <_nxe_udp_socket_create+0x124>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d101      	bne.n	800aa12 <_nxe_udp_socket_create+0x62>
 800aa0e:	2311      	movs	r3, #17
 800aa10:	e055      	b.n	800aabe <_nxe_udp_socket_create+0x10e>

    /* Get protection mutex.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800aa18:	f04f 31ff 	mov.w	r1, #4294967295
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f001 f9d7 	bl	800bdd0 <_tx_mutex_get>

    /* Pickup created count and created socket pointer.  */
    created_count =   ip_ptr -> nx_ip_udp_created_sockets_count;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa28:	623b      	str	r3, [r7, #32]
    created_socket =  ip_ptr -> nx_ip_udp_created_sockets_ptr;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aa30:	627b      	str	r3, [r7, #36]	; 0x24

    /* Loop to look for socket already created.  */
    while (created_count--)
 800aa32:	e00e      	b.n	800aa52 <_nxe_udp_socket_create+0xa2>
    {

        /* Compare the new socket with the already created socket.  */
        if (socket_ptr == created_socket)
 800aa34:	68ba      	ldr	r2, [r7, #8]
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d107      	bne.n	800aa4c <_nxe_udp_socket_create+0x9c>
        {

            /* Error, socket already created!  */

            /* Release protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800aa42:	4618      	mov	r0, r3
 800aa44:	f001 fc3c 	bl	800c2c0 <_tx_mutex_put>

            /* Return error.  */
            return(NX_PTR_ERROR);
 800aa48:	2307      	movs	r3, #7
 800aa4a:	e038      	b.n	800aabe <_nxe_udp_socket_create+0x10e>
        }

        /* Move to next created socket.  */
        created_socket =  created_socket -> nx_udp_socket_created_next;
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa50:	627b      	str	r3, [r7, #36]	; 0x24
    while (created_count--)
 800aa52:	6a3b      	ldr	r3, [r7, #32]
 800aa54:	1e5a      	subs	r2, r3, #1
 800aa56:	623a      	str	r2, [r7, #32]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1eb      	bne.n	800aa34 <_nxe_udp_socket_create+0x84>
    }

    /* Release protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800aa62:	4618      	mov	r0, r3
 800aa64:	f001 fc2c 	bl	800c2c0 <_tx_mutex_put>

    /* Check to see if UDP is enabled.  */
    if (!ip_ptr -> nx_ip_udp_packet_receive)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <_nxe_udp_socket_create+0xc6>
    {
        return(NX_NOT_ENABLED);
 800aa72:	2314      	movs	r3, #20
 800aa74:	e023      	b.n	800aabe <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid type of service.  */
    if (type_of_service & ~(NX_IP_TOS_MASK))
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <_nxe_udp_socket_create+0xd4>
    {
        return(NX_OPTION_ERROR);
 800aa80:	230a      	movs	r3, #10
 800aa82:	e01c      	b.n	800aabe <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid fragment option.  */
    if ((fragment != NX_FRAGMENT_OKAY) &&
 800aa84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d005      	beq.n	800aa96 <_nxe_udp_socket_create+0xe6>
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa90:	d001      	beq.n	800aa96 <_nxe_udp_socket_create+0xe6>
        (fragment != NX_DONT_FRAGMENT))
    {
        return(NX_OPTION_ERROR);
 800aa92:	230a      	movs	r3, #10
 800aa94:	e013      	b.n	800aabe <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid time to live option.  */
    if (((ULONG)time_to_live) > NX_IP_TIME_TO_LIVE_MASK)
 800aa96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa98:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800aa9c:	d901      	bls.n	800aaa2 <_nxe_udp_socket_create+0xf2>
    {
        return(NX_OPTION_ERROR);
 800aa9e:	230a      	movs	r3, #10
 800aaa0:	e00d      	b.n	800aabe <_nxe_udp_socket_create+0x10e>
    }

    /* Call actual UDP socket create function.  */
    status =  _nx_udp_socket_create(ip_ptr, socket_ptr, name, type_of_service,
 800aaa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa4:	9302      	str	r3, [sp, #8]
 800aaa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa8:	9301      	str	r3, [sp, #4]
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	68b9      	ldr	r1, [r7, #8]
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f7fe ff33 	bl	8009920 <_nx_udp_socket_create>
 800aaba:	61f8      	str	r0, [r7, #28]
                                    fragment, time_to_live, queue_maximum);

    /* Return completion status.  */
    return(status);
 800aabc:	69fb      	ldr	r3, [r7, #28]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3728      	adds	r7, #40	; 0x28
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	49502020 	.word	0x49502020
 800aacc:	20000088 	.word	0x20000088
 800aad0:	20014884 	.word	0x20014884
 800aad4:	200149cc 	.word	0x200149cc

0800aad8 <_nxe_udp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d004      	beq.n	800aaf0 <_nxe_udp_socket_delete+0x18>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a15      	ldr	r2, [pc, #84]	; (800ab40 <_nxe_udp_socket_delete+0x68>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d001      	beq.n	800aaf4 <_nxe_udp_socket_delete+0x1c>
    {
        return(NX_PTR_ERROR);
 800aaf0:	2307      	movs	r3, #7
 800aaf2:	e020      	b.n	800ab36 <_nxe_udp_socket_delete+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d101      	bne.n	800ab04 <_nxe_udp_socket_delete+0x2c>
    {
        return(NX_NOT_ENABLED);
 800ab00:	2314      	movs	r3, #20
 800ab02:	e018      	b.n	800ab36 <_nxe_udp_socket_delete+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ab04:	f3ef 8305 	mrs	r3, IPSR
 800ab08:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800ab0a:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800ab0c:	4b0d      	ldr	r3, [pc, #52]	; (800ab44 <_nxe_udp_socket_delete+0x6c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d108      	bne.n	800ab28 <_nxe_udp_socket_delete+0x50>
 800ab16:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <_nxe_udp_socket_delete+0x70>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d004      	beq.n	800ab28 <_nxe_udp_socket_delete+0x50>
 800ab1e:	4b0a      	ldr	r3, [pc, #40]	; (800ab48 <_nxe_udp_socket_delete+0x70>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a0a      	ldr	r2, [pc, #40]	; (800ab4c <_nxe_udp_socket_delete+0x74>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d101      	bne.n	800ab2c <_nxe_udp_socket_delete+0x54>
 800ab28:	2311      	movs	r3, #17
 800ab2a:	e004      	b.n	800ab36 <_nxe_udp_socket_delete+0x5e>

    /* Call actual UDP socket delete function.  */
    status =  _nx_udp_socket_delete(socket_ptr);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7fe ff87 	bl	8009a40 <_nx_udp_socket_delete>
 800ab32:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800ab34:	68fb      	ldr	r3, [r7, #12]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	55445020 	.word	0x55445020
 800ab44:	20000088 	.word	0x20000088
 800ab48:	20014884 	.word	0x20014884
 800ab4c:	200149cc 	.word	0x200149cc

0800ab50 <_nxe_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID) || (packet_ptr == NX_NULL))
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d007      	beq.n	800ab72 <_nxe_udp_socket_receive+0x22>
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a17      	ldr	r2, [pc, #92]	; (800abc4 <_nxe_udp_socket_receive+0x74>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d102      	bne.n	800ab72 <_nxe_udp_socket_receive+0x22>
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <_nxe_udp_socket_receive+0x26>
    {
        return(NX_PTR_ERROR);
 800ab72:	2307      	movs	r3, #7
 800ab74:	e022      	b.n	800abbc <_nxe_udp_socket_receive+0x6c>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <_nxe_udp_socket_receive+0x36>
    {
        return(NX_NOT_ENABLED);
 800ab82:	2314      	movs	r3, #20
 800ab84:	e01a      	b.n	800abbc <_nxe_udp_socket_receive+0x6c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ab86:	f3ef 8305 	mrs	r3, IPSR
 800ab8a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ab8c:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800ab8e:	4b0e      	ldr	r3, [pc, #56]	; (800abc8 <_nxe_udp_socket_receive+0x78>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d108      	bne.n	800abaa <_nxe_udp_socket_receive+0x5a>
 800ab98:	4b0c      	ldr	r3, [pc, #48]	; (800abcc <_nxe_udp_socket_receive+0x7c>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d004      	beq.n	800abaa <_nxe_udp_socket_receive+0x5a>
 800aba0:	4b0a      	ldr	r3, [pc, #40]	; (800abcc <_nxe_udp_socket_receive+0x7c>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a0a      	ldr	r2, [pc, #40]	; (800abd0 <_nxe_udp_socket_receive+0x80>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d101      	bne.n	800abae <_nxe_udp_socket_receive+0x5e>
 800abaa:	2311      	movs	r3, #17
 800abac:	e006      	b.n	800abbc <_nxe_udp_socket_receive+0x6c>

    /* Call actual UDP socket receive function.  */
    status =  _nx_udp_socket_receive(socket_ptr, packet_ptr, wait_option);
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	68b9      	ldr	r1, [r7, #8]
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f7fe ffa4 	bl	8009b00 <_nx_udp_socket_receive>
 800abb8:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800abba:	697b      	ldr	r3, [r7, #20]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3718      	adds	r7, #24
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	55445020 	.word	0x55445020
 800abc8:	20000088 	.word	0x20000088
 800abcc:	20014884 	.word	0x20014884
 800abd0:	200149cc 	.word	0x200149cc

0800abd4 <_nxe_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr_ptr,
                           ULONG ip_address, UINT port)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b088      	sub	sp, #32
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
 800abe0:	603b      	str	r3, [r7, #0]
NX_PACKET *packet_ptr;
UINT       status;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	61fb      	str	r3, [r7, #28]

    /* Check for invalid input pointers.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID) ||
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00c      	beq.n	800ac08 <_nxe_udp_socket_send+0x34>
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a37      	ldr	r2, [pc, #220]	; (800acd0 <_nxe_udp_socket_send+0xfc>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d107      	bne.n	800ac08 <_nxe_udp_socket_send+0x34>
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d004      	beq.n	800ac08 <_nxe_udp_socket_send+0x34>
        (packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)))
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800ac06:	d001      	beq.n	800ac0c <_nxe_udp_socket_send+0x38>
    {

        return(NX_PTR_ERROR);
 800ac08:	2307      	movs	r3, #7
 800ac0a:	e05d      	b.n	800acc8 <_nxe_udp_socket_send+0xf4>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d101      	bne.n	800ac1c <_nxe_udp_socket_send+0x48>
    {
        return(NX_NOT_ENABLED);
 800ac18:	2314      	movs	r3, #20
 800ac1a:	e055      	b.n	800acc8 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for invalid IP address.  */
    if (ip_address == NX_NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <_nxe_udp_socket_send+0x52>
    {
        return(NX_IP_ADDRESS_ERROR);
 800ac22:	2321      	movs	r3, #33	; 0x21
 800ac24:	e050      	b.n	800acc8 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac2c:	d301      	bcc.n	800ac32 <_nxe_udp_socket_send+0x5e>
    {
        return(NX_INVALID_PORT);
 800ac2e:	2346      	movs	r3, #70	; 0x46
 800ac30:	e04a      	b.n	800acc8 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((INT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_data_start) < (INT)(sizeof(NX_IPV4_HEADER) + sizeof(NX_UDP_HEADER)))
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	689a      	ldr	r2, [r3, #8]
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	2b1b      	cmp	r3, #27
 800ac3e:	dc0d      	bgt.n	800ac5c <_nxe_udp_socket_send+0x88>
    {

#ifndef NX_DISABLE_UDP_INFO
        /* Increment the total UDP invalid packet count.  */
        (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ac48:	3201      	adds	r2, #1
 800ac4a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Increment the total UDP invalid packet count for this socket.  */
        socket_ptr -> nx_udp_socket_invalid_packets++;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	1c5a      	adds	r2, r3, #1
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	621a      	str	r2, [r3, #32]
#endif

        /* Return error code.  */
        return(NX_UNDERFLOW);
 800ac58:	2302      	movs	r3, #2
 800ac5a:	e035      	b.n	800acc8 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	68da      	ldr	r2, [r3, #12]
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	695b      	ldr	r3, [r3, #20]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d90d      	bls.n	800ac84 <_nxe_udp_socket_send+0xb0>
    {

#ifndef NX_DISABLE_UDP_INFO
        /* Increment the total UDP invalid packet count.  */
        (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ac70:	3201      	adds	r2, #1
 800ac72:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Increment the total UDP invalid packet count for this socket.  */
        socket_ptr -> nx_udp_socket_invalid_packets++;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	1c5a      	adds	r2, r3, #1
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	621a      	str	r2, [r3, #32]
#endif

        /* Return error code.  */
        return(NX_OVERFLOW);
 800ac80:	2303      	movs	r3, #3
 800ac82:	e021      	b.n	800acc8 <_nxe_udp_socket_send+0xf4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ac84:	f3ef 8305 	mrs	r3, IPSR
 800ac88:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ac8a:	697a      	ldr	r2, [r7, #20]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800ac8c:	4b11      	ldr	r3, [pc, #68]	; (800acd4 <_nxe_udp_socket_send+0x100>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d108      	bne.n	800aca8 <_nxe_udp_socket_send+0xd4>
 800ac96:	4b10      	ldr	r3, [pc, #64]	; (800acd8 <_nxe_udp_socket_send+0x104>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d004      	beq.n	800aca8 <_nxe_udp_socket_send+0xd4>
 800ac9e:	4b0e      	ldr	r3, [pc, #56]	; (800acd8 <_nxe_udp_socket_send+0x104>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a0e      	ldr	r2, [pc, #56]	; (800acdc <_nxe_udp_socket_send+0x108>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d101      	bne.n	800acac <_nxe_udp_socket_send+0xd8>
 800aca8:	2311      	movs	r3, #17
 800acaa:	e00d      	b.n	800acc8 <_nxe_udp_socket_send+0xf4>

    /* Call actual UDP socket send function.  */
    status =  _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	69f9      	ldr	r1, [r7, #28]
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f7ff f892 	bl	8009ddc <_nx_udp_socket_send>
 800acb8:	61b8      	str	r0, [r7, #24]

    /* Determine if the packet send was successful.  */
    if (status == NX_SUCCESS)
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d102      	bne.n	800acc6 <_nxe_udp_socket_send+0xf2>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2200      	movs	r2, #0
 800acc4:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800acc6:	69bb      	ldr	r3, [r7, #24]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3720      	adds	r7, #32
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	55445020 	.word	0x55445020
 800acd4:	20000088 	.word	0x20000088
 800acd8:	20014884 	.word	0x20014884
 800acdc:	200149cc 	.word	0x200149cc

0800ace0 <_nxe_udp_socket_unbind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d004      	beq.n	800acf8 <_nxe_udp_socket_unbind+0x18>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a15      	ldr	r2, [pc, #84]	; (800ad48 <_nxe_udp_socket_unbind+0x68>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d001      	beq.n	800acfc <_nxe_udp_socket_unbind+0x1c>
    {
        return(NX_PTR_ERROR);
 800acf8:	2307      	movs	r3, #7
 800acfa:	e020      	b.n	800ad3e <_nxe_udp_socket_unbind+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d101      	bne.n	800ad0c <_nxe_udp_socket_unbind+0x2c>
    {
        return(NX_NOT_ENABLED);
 800ad08:	2314      	movs	r3, #20
 800ad0a:	e018      	b.n	800ad3e <_nxe_udp_socket_unbind+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ad0c:	f3ef 8305 	mrs	r3, IPSR
 800ad10:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800ad12:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800ad14:	4b0d      	ldr	r3, [pc, #52]	; (800ad4c <_nxe_udp_socket_unbind+0x6c>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d108      	bne.n	800ad30 <_nxe_udp_socket_unbind+0x50>
 800ad1e:	4b0c      	ldr	r3, [pc, #48]	; (800ad50 <_nxe_udp_socket_unbind+0x70>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d004      	beq.n	800ad30 <_nxe_udp_socket_unbind+0x50>
 800ad26:	4b0a      	ldr	r3, [pc, #40]	; (800ad50 <_nxe_udp_socket_unbind+0x70>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a0a      	ldr	r2, [pc, #40]	; (800ad54 <_nxe_udp_socket_unbind+0x74>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d101      	bne.n	800ad34 <_nxe_udp_socket_unbind+0x54>
 800ad30:	2311      	movs	r3, #17
 800ad32:	e004      	b.n	800ad3e <_nxe_udp_socket_unbind+0x5e>

    /* Call actual UDP socket unbind function.  */
    status =  _nx_udp_socket_unbind(socket_ptr);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f7ff f869 	bl	8009e0c <_nx_udp_socket_unbind>
 800ad3a:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	55445020 	.word	0x55445020
 800ad4c:	20000088 	.word	0x20000088
 800ad50:	20014884 	.word	0x20014884
 800ad54:	200149cc 	.word	0x200149cc

0800ad58 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b096      	sub	sp, #88	; 0x58
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	3303      	adds	r3, #3
 800ad6a:	f023 0303 	bic.w	r3, r3, #3
 800ad6e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ad70:	f3ef 8310 	mrs	r3, PRIMASK
 800ad74:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800ad76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800ad78:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800ad7a:	b672      	cpsid	i
    return(int_posture);
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800ad7e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ad80:	4b55      	ldr	r3, [pc, #340]	; (800aed8 <_tx_byte_allocate+0x180>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800ad86:	2300      	movs	r3, #0
 800ad88:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad8e:	621a      	str	r2, [r3, #32]
 800ad90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad92:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	f383 8810 	msr	PRIMASK, r3
}
 800ad9a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800ad9c:	6879      	ldr	r1, [r7, #4]
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f000 f9b2 	bl	800b108 <_tx_byte_pool_search>
 800ada4:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ada6:	f3ef 8310 	mrs	r3, PRIMASK
 800adaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800adac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800adae:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800adb0:	b672      	cpsid	i
    return(int_posture);
 800adb2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800adb4:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800adb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d002      	beq.n	800adc2 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800adbc:	2301      	movs	r3, #1
 800adbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adc0:	e006      	b.n	800add0 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adc8:	429a      	cmp	r2, r3
 800adca:	d101      	bne.n	800add0 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800adcc:	2301      	movs	r3, #1
 800adce:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800add0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800add2:	2b00      	cmp	r3, #0
 800add4:	d0d9      	beq.n	800ad8a <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adda:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800addc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d008      	beq.n	800adf4 <_tx_byte_allocate+0x9c>
 800ade2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ade4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ade6:	6a3b      	ldr	r3, [r7, #32]
 800ade8:	f383 8810 	msr	PRIMASK, r3
}
 800adec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800adee:	2300      	movs	r3, #0
 800adf0:	653b      	str	r3, [r7, #80]	; 0x50
 800adf2:	e06c      	b.n	800aece <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d061      	beq.n	800aebe <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800adfa:	4b38      	ldr	r3, [pc, #224]	; (800aedc <_tx_byte_allocate+0x184>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d007      	beq.n	800ae12 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800ae02:	2310      	movs	r3, #16
 800ae04:	653b      	str	r3, [r7, #80]	; 0x50
 800ae06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae08:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	f383 8810 	msr	PRIMASK, r3
}
 800ae10:	e05d      	b.n	800aece <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800ae12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae14:	4a32      	ldr	r2, [pc, #200]	; (800aee0 <_tx_byte_allocate+0x188>)
 800ae16:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800ae18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800ae1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae20:	68ba      	ldr	r2, [r7, #8]
 800ae22:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800ae24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800ae2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae30:	1c5a      	adds	r2, r3, #1
 800ae32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae34:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae3c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae42:	1c5a      	adds	r2, r3, #1
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800ae48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d109      	bne.n	800ae62 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae52:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800ae54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae58:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800ae5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae5e:	675a      	str	r2, [r3, #116]	; 0x74
 800ae60:	e011      	b.n	800ae86 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae66:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800ae68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae6c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800ae6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae72:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800ae74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae78:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800ae7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae7e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800ae80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae84:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800ae86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae88:	2209      	movs	r2, #9
 800ae8a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ae8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae8e:	2201      	movs	r2, #1
 800ae90:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ae92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae94:	683a      	ldr	r2, [r7, #0]
 800ae96:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800ae98:	4b10      	ldr	r3, [pc, #64]	; (800aedc <_tx_byte_allocate+0x184>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	4a0f      	ldr	r2, [pc, #60]	; (800aedc <_tx_byte_allocate+0x184>)
 800aea0:	6013      	str	r3, [r2, #0]
 800aea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aea4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	f383 8810 	msr	PRIMASK, r3
}
 800aeac:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800aeae:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800aeb0:	f001 fff6 	bl	800cea0 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800aeb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aeba:	653b      	str	r3, [r7, #80]	; 0x50
 800aebc:	e007      	b.n	800aece <_tx_byte_allocate+0x176>
 800aebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aec0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f383 8810 	msr	PRIMASK, r3
}
 800aec8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800aeca:	2310      	movs	r3, #16
 800aecc:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800aece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3758      	adds	r7, #88	; 0x58
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	20014884 	.word	0x20014884
 800aedc:	2001491c 	.word	0x2001491c
 800aee0:	0800aee5 	.word	0x0800aee5

0800aee4 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b08e      	sub	sp, #56	; 0x38
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aeee:	f3ef 8310 	mrs	r3, PRIMASK
 800aef2:	623b      	str	r3, [r7, #32]
    return(posture);
 800aef4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800aef6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aef8:	b672      	cpsid	i
    return(int_posture);
 800aefa:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800aefc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af02:	4a33      	ldr	r2, [pc, #204]	; (800afd0 <_tx_byte_pool_cleanup+0xec>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d158      	bne.n	800afba <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	429a      	cmp	r2, r3
 800af12:	d152      	bne.n	800afba <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af18:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800af1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d04c      	beq.n	800afba <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a2b      	ldr	r2, [pc, #172]	; (800afd4 <_tx_byte_pool_cleanup+0xf0>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d147      	bne.n	800afba <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800af2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d043      	beq.n	800afba <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af3c:	1e5a      	subs	r2, r3, #1
 800af3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af40:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af46:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800af48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d103      	bne.n	800af56 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	2200      	movs	r2, #0
 800af52:	625a      	str	r2, [r3, #36]	; 0x24
 800af54:	e013      	b.n	800af7e <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af5a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af60:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800af62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af66:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af6c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	429a      	cmp	r2, r3
 800af76:	d102      	bne.n	800af7e <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800af78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af7c:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af82:	2b09      	cmp	r3, #9
 800af84:	d119      	bne.n	800afba <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2210      	movs	r2, #16
 800af8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800af8e:	4b12      	ldr	r3, [pc, #72]	; (800afd8 <_tx_byte_pool_cleanup+0xf4>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3301      	adds	r3, #1
 800af94:	4a10      	ldr	r2, [pc, #64]	; (800afd8 <_tx_byte_pool_cleanup+0xf4>)
 800af96:	6013      	str	r3, [r2, #0]
 800af98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af9a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	f383 8810 	msr	PRIMASK, r3
}
 800afa2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f001 fe7b 	bl	800cca0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800afaa:	f3ef 8310 	mrs	r3, PRIMASK
 800afae:	61bb      	str	r3, [r7, #24]
    return(posture);
 800afb0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800afb2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800afb4:	b672      	cpsid	i
    return(int_posture);
 800afb6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800afb8:	637b      	str	r3, [r7, #52]	; 0x34
 800afba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afbc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f383 8810 	msr	PRIMASK, r3
}
 800afc4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800afc6:	bf00      	nop
 800afc8:	3738      	adds	r7, #56	; 0x38
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	0800aee5 	.word	0x0800aee5
 800afd4:	42595445 	.word	0x42595445
 800afd8:	2001491c 	.word	0x2001491c

0800afdc <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b08e      	sub	sp, #56	; 0x38
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
 800afe8:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800afea:	2234      	movs	r2, #52	; 0x34
 800afec:	2100      	movs	r1, #0
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f003 f982 	bl	800e2f8 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	f023 0303 	bic.w	r3, r3, #3
 800affa:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	68ba      	ldr	r2, [r7, #8]
 800b000:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	f1a3 0208 	sub.w	r2, r3, #8
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2202      	movs	r2, #2
 800b028:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b02e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	4413      	add	r3, r2
 800b034:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b038:	3b04      	subs	r3, #4
 800b03a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b042:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800b044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b048:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b04c:	3b04      	subs	r3, #4
 800b04e:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b052:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b060:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800b062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b066:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b06e:	3304      	adds	r3, #4
 800b070:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b074:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b078:	4a1f      	ldr	r2, [pc, #124]	; (800b0f8 <_tx_byte_pool_create+0x11c>)
 800b07a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b082:	f3ef 8310 	mrs	r3, PRIMASK
 800b086:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b088:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b08a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b08c:	b672      	cpsid	i
    return(int_posture);
 800b08e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b090:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	4a19      	ldr	r2, [pc, #100]	; (800b0fc <_tx_byte_pool_create+0x120>)
 800b096:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b098:	4b19      	ldr	r3, [pc, #100]	; (800b100 <_tx_byte_pool_create+0x124>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d109      	bne.n	800b0b4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b0a0:	4a18      	ldr	r2, [pc, #96]	; (800b104 <_tx_byte_pool_create+0x128>)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	631a      	str	r2, [r3, #48]	; 0x30
 800b0b2:	e011      	b.n	800b0d8 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b0b4:	4b13      	ldr	r3, [pc, #76]	; (800b104 <_tx_byte_pool_create+0x128>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b0ba:	6a3b      	ldr	r3, [r7, #32]
 800b0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0be:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	69fa      	ldr	r2, [r7, #28]
 800b0d0:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6a3a      	ldr	r2, [r7, #32]
 800b0d6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b0d8:	4b09      	ldr	r3, [pc, #36]	; (800b100 <_tx_byte_pool_create+0x124>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	4a08      	ldr	r2, [pc, #32]	; (800b100 <_tx_byte_pool_create+0x124>)
 800b0e0:	6013      	str	r3, [r2, #0]
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	f383 8810 	msr	PRIMASK, r3
}
 800b0ec:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3738      	adds	r7, #56	; 0x38
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	ffffeeee 	.word	0xffffeeee
 800b0fc:	42595445 	.word	0x42595445
 800b100:	20014878 	.word	0x20014878
 800b104:	20014874 	.word	0x20014874

0800b108 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800b108:	b480      	push	{r7}
 800b10a:	b097      	sub	sp, #92	; 0x5c
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800b112:	2300      	movs	r3, #0
 800b114:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b116:	f3ef 8310 	mrs	r3, PRIMASK
 800b11a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800b11e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b120:	b672      	cpsid	i
    return(int_posture);
 800b122:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800b124:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	689a      	ldr	r2, [r3, #8]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	3b02      	subs	r3, #2
 800b130:	00db      	lsls	r3, r3, #3
 800b132:	4413      	add	r3, r2
 800b134:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800b136:	683a      	ldr	r2, [r7, #0]
 800b138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d308      	bcc.n	800b150 <_tx_byte_pool_search+0x48>
 800b13e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b140:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	f383 8810 	msr	PRIMASK, r3
}
 800b148:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	653b      	str	r3, [r7, #80]	; 0x50
 800b14e:	e0dd      	b.n	800b30c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800b150:	4b72      	ldr	r3, [pc, #456]	; (800b31c <_tx_byte_pool_search+0x214>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b15a:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	695b      	ldr	r3, [r3, #20]
 800b160:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	3301      	adds	r3, #1
 800b168:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800b16a:	2300      	movs	r3, #0
 800b16c:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b170:	3304      	adds	r3, #4
 800b172:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b176:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a68      	ldr	r2, [pc, #416]	; (800b320 <_tx_byte_pool_search+0x218>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d143      	bne.n	800b20a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800b182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b184:	2b00      	cmp	r3, #0
 800b186:	d104      	bne.n	800b192 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b18c:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800b18e:	2301      	movs	r3, #1
 800b190:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b194:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800b19c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b1a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a6:	3b08      	subs	r3, #8
 800b1a8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800b1aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d257      	bcs.n	800b262 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b8:	3304      	adds	r3, #4
 800b1ba:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1be:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a56      	ldr	r2, [pc, #344]	; (800b320 <_tx_byte_pool_search+0x218>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d113      	bne.n	800b1f2 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1cc:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800b1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d4:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	1e5a      	subs	r2, r3, #1
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	695b      	ldr	r3, [r3, #20]
 800b1e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d114      	bne.n	800b214 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1ee:	615a      	str	r2, [r3, #20]
 800b1f0:	e010      	b.n	800b214 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f4:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800b1fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d008      	beq.n	800b214 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800b202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b204:	3b01      	subs	r3, #1
 800b206:	64bb      	str	r3, [r7, #72]	; 0x48
 800b208:	e004      	b.n	800b214 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b20a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b20c:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800b20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800b214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b216:	2b00      	cmp	r3, #0
 800b218:	d002      	beq.n	800b220 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800b21a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b21c:	3b01      	subs	r3, #1
 800b21e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b222:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	f383 8810 	msr	PRIMASK, r3
}
 800b22a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b22c:	f3ef 8310 	mrs	r3, PRIMASK
 800b230:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b232:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b234:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b236:	b672      	cpsid	i
    return(int_posture);
 800b238:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800b23a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a1b      	ldr	r3, [r3, #32]
 800b240:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b242:	429a      	cmp	r2, r3
 800b244:	d009      	beq.n	800b25a <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	695b      	ldr	r3, [r3, #20]
 800b24a:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	3301      	adds	r3, #1
 800b252:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b258:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800b25a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d186      	bne.n	800b16e <_tx_byte_pool_search+0x66>
 800b260:	e000      	b.n	800b264 <_tx_byte_pool_search+0x15c>
                    break;
 800b262:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800b264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b266:	2b00      	cmp	r3, #0
 800b268:	d048      	beq.n	800b2fc <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800b26a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	1ad3      	subs	r3, r2, r3
 800b270:	2b13      	cmp	r3, #19
 800b272:	d91e      	bls.n	800b2b2 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	3308      	adds	r3, #8
 800b278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b27a:	4413      	add	r3, r2
 800b27c:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b280:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b284:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800b286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28c:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b290:	3304      	adds	r3, #4
 800b292:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b296:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800b298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b29a:	4a21      	ldr	r2, [pc, #132]	; (800b320 <_tx_byte_pool_search+0x218>)
 800b29c:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	1c5a      	adds	r2, r3, #1
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800b2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2ac:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b2b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2b4:	3304      	adds	r3, #4
 800b2b6:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800b2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ba:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	689a      	ldr	r2, [r3, #8]
 800b2c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2c8:	1ad3      	subs	r3, r2, r3
 800b2ca:	f1a3 0208 	sub.w	r2, r3, #8
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	695b      	ldr	r3, [r3, #20]
 800b2d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d105      	bne.n	800b2e8 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b2dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2de:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	615a      	str	r2, [r3, #20]
 800b2e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f383 8810 	msr	PRIMASK, r3
}
 800b2f2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b2f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2f6:	3308      	adds	r3, #8
 800b2f8:	653b      	str	r3, [r7, #80]	; 0x50
 800b2fa:	e007      	b.n	800b30c <_tx_byte_pool_search+0x204>
 800b2fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2fe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	f383 8810 	msr	PRIMASK, r3
}
 800b306:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800b308:	2300      	movs	r3, #0
 800b30a:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800b30c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b30e:	4618      	mov	r0, r3
 800b310:	375c      	adds	r7, #92	; 0x5c
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	20014884 	.word	0x20014884
 800b320:	ffffeeee 	.word	0xffffeeee

0800b324 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b08e      	sub	sp, #56	; 0x38
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b32e:	f3ef 8310 	mrs	r3, PRIMASK
 800b332:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b334:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b336:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b338:	b672      	cpsid	i
    return(int_posture);
 800b33a:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 800b33c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b342:	4a38      	ldr	r2, [pc, #224]	; (800b424 <_tx_event_flags_cleanup+0x100>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d162      	bne.n	800b40e <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	429a      	cmp	r2, r3
 800b352:	d15c      	bne.n	800b40e <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b358:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800b35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d056      	beq.n	800b40e <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a30      	ldr	r2, [pc, #192]	; (800b428 <_tx_event_flags_cleanup+0x104>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d151      	bne.n	800b40e <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800b36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d04d      	beq.n	800b40e <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800b378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37a:	695b      	ldr	r3, [r3, #20]
 800b37c:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800b37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 800b384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b386:	2b00      	cmp	r3, #0
 800b388:	d020      	beq.n	800b3cc <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800b38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38c:	3b01      	subs	r3, #1
 800b38e:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800b390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b394:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800b396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d103      	bne.n	800b3a4 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800b39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39e:	2200      	movs	r2, #0
 800b3a0:	611a      	str	r2, [r3, #16]
 800b3a2:	e016      	b.n	800b3d2 <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3a8:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3ae:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	6a3a      	ldr	r2, [r7, #32]
 800b3b4:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800b3b6:	6a3b      	ldr	r3, [r7, #32]
 800b3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3ba:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 800b3bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d106      	bne.n	800b3d2 <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3c8:	611a      	str	r2, [r3, #16]
 800b3ca:	e002      	b.n	800b3d2 <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d6:	2b07      	cmp	r3, #7
 800b3d8:	d119      	bne.n	800b40e <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2207      	movs	r2, #7
 800b3de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b3e2:	4b12      	ldr	r3, [pc, #72]	; (800b42c <_tx_event_flags_cleanup+0x108>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	4a10      	ldr	r2, [pc, #64]	; (800b42c <_tx_event_flags_cleanup+0x108>)
 800b3ea:	6013      	str	r3, [r2, #0]
 800b3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f383 8810 	msr	PRIMASK, r3
}
 800b3f6:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f001 fc51 	bl	800cca0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3fe:	f3ef 8310 	mrs	r3, PRIMASK
 800b402:	617b      	str	r3, [r7, #20]
    return(posture);
 800b404:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b406:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b408:	b672      	cpsid	i
    return(int_posture);
 800b40a:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b40c:	637b      	str	r3, [r7, #52]	; 0x34
 800b40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b410:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	f383 8810 	msr	PRIMASK, r3
}
 800b418:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b41a:	bf00      	nop
 800b41c:	3738      	adds	r7, #56	; 0x38
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	0800b325 	.word	0x0800b325
 800b428:	4456444e 	.word	0x4456444e
 800b42c:	2001491c 	.word	0x2001491c

0800b430 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b088      	sub	sp, #32
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800b43a:	2224      	movs	r2, #36	; 0x24
 800b43c:	2100      	movs	r1, #0
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f002 ff5a 	bl	800e2f8 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b44a:	f3ef 8310 	mrs	r3, PRIMASK
 800b44e:	613b      	str	r3, [r7, #16]
    return(posture);
 800b450:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800b452:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b454:	b672      	cpsid	i
    return(int_posture);
 800b456:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800b458:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4a18      	ldr	r2, [pc, #96]	; (800b4c0 <_tx_event_flags_create+0x90>)
 800b45e:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800b460:	4b18      	ldr	r3, [pc, #96]	; (800b4c4 <_tx_event_flags_create+0x94>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d109      	bne.n	800b47c <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800b468:	4a17      	ldr	r2, [pc, #92]	; (800b4c8 <_tx_event_flags_create+0x98>)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	61da      	str	r2, [r3, #28]
 800b47a:	e011      	b.n	800b4a0 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800b47c:	4b12      	ldr	r3, [pc, #72]	; (800b4c8 <_tx_event_flags_create+0x98>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	69ba      	ldr	r2, [r7, #24]
 800b49e:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800b4a0:	4b08      	ldr	r3, [pc, #32]	; (800b4c4 <_tx_event_flags_create+0x94>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	4a07      	ldr	r2, [pc, #28]	; (800b4c4 <_tx_event_flags_create+0x94>)
 800b4a8:	6013      	str	r3, [r2, #0]
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	f383 8810 	msr	PRIMASK, r3
}
 800b4b4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3720      	adds	r7, #32
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	4456444e 	.word	0x4456444e
 800b4c4:	20014860 	.word	0x20014860
 800b4c8:	2001485c 	.word	0x2001485c

0800b4cc <_tx_event_flags_get>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b096      	sub	sp, #88	; 0x58
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
 800b4d8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4da:	f3ef 8310 	mrs	r3, PRIMASK
 800b4de:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800b4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800b4e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b4e4:	b672      	cpsid	i
    return(int_posture);
 800b4e6:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 800b4e8:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return the actual event flags and apply delayed clearing.  */
    *actual_flags_ptr =  current_flags & ~group_ptr -> tx_event_flags_group_delayed_clear;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6a1b      	ldr	r3, [r3, #32]
 800b4f4:	43da      	mvns	r2, r3
 800b4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4f8:	401a      	ands	r2, r3
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	601a      	str	r2, [r3, #0]

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f003 0302 	and.w	r3, r3, #2
 800b504:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	6a1b      	ldr	r3, [r3, #32]
 800b50a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800b50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d004      	beq.n	800b51c <_tx_event_flags_get+0x50>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800b512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b514:	43db      	mvns	r3, r3
 800b516:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b518:	4013      	ands	r3, r2
 800b51a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 800b51c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d10a      	bne.n	800b538 <_tx_event_flags_get+0x6c>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800b522:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	4013      	ands	r3, r2
 800b528:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800b52a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d006      	beq.n	800b540 <_tx_event_flags_get+0x74>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 800b532:	2300      	movs	r3, #0
 800b534:	64bb      	str	r3, [r7, #72]	; 0x48
 800b536:	e003      	b.n	800b540 <_tx_event_flags_get+0x74>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800b538:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	4013      	ands	r3, r2
 800b53e:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 800b540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b542:	2b00      	cmp	r3, #0
 800b544:	d026      	beq.n	800b594 <_tx_event_flags_get+0xc8>
    {

        /* Yes, this request can be handled immediately.  */

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f003 0301 	and.w	r3, r3, #1
 800b54c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 800b54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b550:	2b01      	cmp	r3, #1
 800b552:	d11c      	bne.n	800b58e <_tx_event_flags_get+0xc2>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 800b554:	2300      	movs	r3, #0
 800b556:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	695b      	ldr	r3, [r3, #20]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d005      	beq.n	800b56c <_tx_event_flags_get+0xa0>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d101      	bne.n	800b56c <_tx_event_flags_get+0xa0>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 800b568:	2301      	movs	r3, #1
 800b56a:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 800b56c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d106      	bne.n	800b580 <_tx_event_flags_get+0xb4>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6a1a      	ldr	r2, [r3, #32]
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	621a      	str	r2, [r3, #32]
 800b57e:	e006      	b.n	800b58e <_tx_event_flags_get+0xc2>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	689a      	ldr	r2, [r3, #8]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	43db      	mvns	r3, r3
 800b588:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800b58e:	2300      	movs	r3, #0
 800b590:	653b      	str	r3, [r7, #80]	; 0x50
 800b592:	e073      	b.n	800b67c <_tx_event_flags_get+0x1b0>
#endif
    else
    {
        /* flags_satisfied is 0.  */
        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b594:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b596:	2b00      	cmp	r3, #0
 800b598:	d06e      	beq.n	800b678 <_tx_event_flags_get+0x1ac>
        {

            /* Determine if the preempt disable flag is non-zero OR the requested events is 0.  */
            if ((_tx_thread_preempt_disable != ((UINT) 0)) || (requested_flags == (UINT) 0))
 800b59a:	4b3e      	ldr	r3, [pc, #248]	; (800b694 <_tx_event_flags_get+0x1c8>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d102      	bne.n	800b5a8 <_tx_event_flags_get+0xdc>
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d102      	bne.n	800b5ae <_tx_event_flags_get+0xe2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
                   or if requested_flags is 0, return error completion.  */
                status =  TX_NO_EVENTS;
 800b5a8:	2307      	movs	r3, #7
 800b5aa:	653b      	str	r3, [r7, #80]	; 0x50
 800b5ac:	e066      	b.n	800b67c <_tx_event_flags_get+0x1b0>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 800b5ae:	4b3a      	ldr	r3, [pc, #232]	; (800b698 <_tx_event_flags_get+0x1cc>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 800b5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b6:	4a39      	ldr	r2, [pc, #228]	; (800b69c <_tx_event_flags_get+0x1d0>)
 800b5b8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 800b5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 800b5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 800b5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d0:	68fa      	ldr	r2, [r7, #12]
 800b5d2:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5de:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	695b      	ldr	r3, [r3, #20]
 800b5e6:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d109      	bne.n	800b602 <_tx_event_flags_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5f2:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5f8:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 800b5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5fe:	675a      	str	r2, [r3, #116]	; 0x74
 800b600:	e011      	b.n	800b626 <_tx_event_flags_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b60c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b612:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b618:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b61e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b624:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	695b      	ldr	r3, [r3, #20]
 800b62a:	1c5a      	adds	r2, r3, #1
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800b630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b632:	2207      	movs	r2, #7
 800b634:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b638:	2201      	movs	r2, #1
 800b63a:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b640:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b642:	4b14      	ldr	r3, [pc, #80]	; (800b694 <_tx_event_flags_get+0x1c8>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3301      	adds	r3, #1
 800b648:	4a12      	ldr	r2, [pc, #72]	; (800b694 <_tx_event_flags_get+0x1c8>)
 800b64a:	6013      	str	r3, [r2, #0]
 800b64c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b64e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	f383 8810 	msr	PRIMASK, r3
}
 800b656:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800b658:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b65a:	f001 fc21 	bl	800cea0 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b65e:	f3ef 8310 	mrs	r3, PRIMASK
 800b662:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b664:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b666:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b668:	b672      	cpsid	i
    return(int_posture);
 800b66a:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 800b66c:	657b      	str	r3, [r7, #84]	; 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800b66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b674:	653b      	str	r3, [r7, #80]	; 0x50
 800b676:	e001      	b.n	800b67c <_tx_event_flags_get+0x1b0>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 800b678:	2307      	movs	r3, #7
 800b67a:	653b      	str	r3, [r7, #80]	; 0x50
 800b67c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b67e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	f383 8810 	msr	PRIMASK, r3
}
 800b686:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800b688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3758      	adds	r7, #88	; 0x58
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	2001491c 	.word	0x2001491c
 800b698:	20014884 	.word	0x20014884
 800b69c:	0800b325 	.word	0x0800b325

0800b6a0 <_tx_event_flags_set>:
/*                                            check logic, resulting in   */
/*                                            version 6.1.11              */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b0a6      	sub	sp, #152	; 0x98
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b6ac:	f3ef 8310 	mrs	r3, PRIMASK
 800b6b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800b6b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800b6b4:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800b6b6:	b672      	cpsid	i
    return(int_posture);
 800b6b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800b6ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f003 0302 	and.w	r3, r3, #2
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d023      	beq.n	800b710 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	695b      	ldr	r3, [r3, #20]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d005      	beq.n	800b6e0 <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d101      	bne.n	800b6e0 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800b6e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d107      	bne.n	800b6f6 <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6a1a      	ldr	r2, [r3, #32]
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	43db      	mvns	r3, r3
 800b6ee:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	621a      	str	r2, [r3, #32]
 800b6f4:	e005      	b.n	800b702 <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	689a      	ldr	r2, [r3, #8]
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	609a      	str	r2, [r3, #8]
 800b702:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b706:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b70a:	f383 8810 	msr	PRIMASK, r3
}
 800b70e:	e1d2      	b.n	800bab6 <_tx_event_flags_set+0x416>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	689a      	ldr	r2, [r3, #8]
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6a1b      	ldr	r3, [r3, #32]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d006      	beq.n	800b732 <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6a1a      	ldr	r2, [r3, #32]
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	43db      	mvns	r3, r3
 800b72c:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800b732:	2300      	movs	r3, #0
 800b734:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	695b      	ldr	r3, [r3, #20]
 800b73a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 81a4 	beq.w	800ba90 <_tx_event_flags_set+0x3f0>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 800b748:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d167      	bne.n	800b820 <_tx_event_flags_set+0x180>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800b75e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b764:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800b766:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b76a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b76e:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 800b770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b772:	f003 0302 	and.w	r3, r3, #2
 800b776:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800b778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d10a      	bne.n	800b794 <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800b77e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b782:	4013      	ands	r3, r2
 800b784:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800b786:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d006      	beq.n	800b79c <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 800b78e:	2300      	movs	r3, #0
 800b790:	67bb      	str	r3, [r7, #120]	; 0x78
 800b792:	e003      	b.n	800b79c <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800b794:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b796:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b798:	4013      	ands	r3, r2
 800b79a:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 800b79c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f000 817d 	beq.w	800ba9e <_tx_event_flags_set+0x3fe>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800b7a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b7a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7aa:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 800b7ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b7b0:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800b7b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7b4:	f003 0301 	and.w	r3, r3, #1
 800b7b8:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 800b7ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d106      	bne.n	800b7ce <_tx_event_flags_set+0x12e>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	689a      	ldr	r2, [r3, #8]
 800b7c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7c6:	43db      	mvns	r3, r3
 800b7c8:	401a      	ands	r2, r3
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b7da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b7de:	2200      	movs	r2, #0
 800b7e0:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b7e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800b7ec:	4ba7      	ldr	r3, [pc, #668]	; (800ba8c <_tx_event_flags_set+0x3ec>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	4aa6      	ldr	r2, [pc, #664]	; (800ba8c <_tx_event_flags_set+0x3ec>)
 800b7f4:	6013      	str	r3, [r2, #0]
 800b7f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b7fa:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fe:	f383 8810 	msr	PRIMASK, r3
}
 800b802:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800b804:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800b808:	f001 fa4a 	bl	800cca0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b80c:	f3ef 8310 	mrs	r3, PRIMASK
 800b810:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800b812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800b814:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b816:	b672      	cpsid	i
    return(int_posture);
 800b818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800b81a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b81e:	e13e      	b.n	800ba9e <_tx_event_flags_set+0x3fe>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 800b828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b82c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800b836:	2300      	movs	r3, #0
 800b838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 800b83c:	2300      	movs	r3, #0
 800b83e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 800b848:	4b90      	ldr	r3, [pc, #576]	; (800ba8c <_tx_event_flags_set+0x3ec>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3301      	adds	r3, #1
 800b84e:	4a8f      	ldr	r2, [pc, #572]	; (800ba8c <_tx_event_flags_set+0x3ec>)
 800b850:	6013      	str	r3, [r2, #0]

                /* Since we have temporarily disabled preemption globally, set the preempt 
                   check flag to check for any preemption condition - including from 
                   unrelated ISR processing.  */
                preempt_check =  TX_TRUE;
 800b852:	2301      	movs	r3, #1
 800b854:	677b      	str	r3, [r7, #116]	; 0x74
 800b856:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b85a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85e:	f383 8810 	msr	PRIMASK, r3
}
 800b862:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b864:	f3ef 8310 	mrs	r3, PRIMASK
 800b868:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800b86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800b86c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800b86e:	b672      	cpsid	i
    return(int_posture);
 800b870:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800b872:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00f      	beq.n	800b89e <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2200      	movs	r2, #0
 800b882:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800b884:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	695b      	ldr	r3, [r3, #20]
 800b890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b89a:	4313      	orrs	r3, r2
 800b89c:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800b89e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8a4:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800b8a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8ac:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800b8ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8b6:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800b8b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8ba:	f003 0302 	and.w	r3, r3, #2
 800b8be:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800b8c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d10a      	bne.n	800b8dc <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800b8c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b8c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800b8ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b8d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d006      	beq.n	800b8e4 <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b8da:	e003      	b.n	800b8e4 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800b8dc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b8de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800b8e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ea:	2b07      	cmp	r3, #7
 800b8ec:	d001      	beq.n	800b8f2 <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800b8f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d069      	beq.n	800b9cc <_tx_event_flags_set+0x32c>

                        /* Yes, this request can be handled now.  */

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800b8f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8fe:	2b07      	cmp	r3, #7
 800b900:	d11d      	bne.n	800b93e <_tx_event_flags_set+0x29e>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800b902:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b908:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 800b90a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b90c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b90e:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800b910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b912:	f003 0301 	and.w	r3, r3, #1
 800b916:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800b918:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d106      	bne.n	800b92c <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	689a      	ldr	r2, [r3, #8]
 800b922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b924:	43db      	mvns	r3, r3
 800b926:	401a      	ands	r2, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b92c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b930:	2200      	movs	r2, #0
 800b932:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b934:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b938:	2200      	movs	r2, #0
 800b93a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800b93e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b944:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b948:	429a      	cmp	r2, r3
 800b94a:	d103      	bne.n	800b954 <_tx_event_flags_set+0x2b4>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800b94c:	2300      	movs	r3, #0
 800b94e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b952:	e018      	b.n	800b986 <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800b954:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b95a:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800b95c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b962:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800b964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b966:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b968:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800b96a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b96c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b96e:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 800b970:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b974:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b978:	429a      	cmp	r2, r3
 800b97a:	d104      	bne.n	800b986 <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800b97c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	695b      	ldr	r3, [r3, #20]
 800b98a:	1e5a      	subs	r2, r3, #1
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 800b990:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10c      	bne.n	800b9b2 <_tx_event_flags_set+0x312>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 800b998:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b99c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 800b9a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 800b9a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	671a      	str	r2, [r3, #112]	; 0x70
 800b9b0:	e00c      	b.n	800b9cc <_tx_event_flags_set+0x32c>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800b9b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9b6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b9ba:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800b9bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 800b9c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 800b9cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 800b9d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 800b9dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f47f af38 	bne.w	800b856 <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b9ec:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6a1b      	ldr	r3, [r3, #32]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00a      	beq.n	800ba0c <_tx_event_flags_set+0x36c>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	689a      	ldr	r2, [r3, #8]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	6a1b      	ldr	r3, [r3, #32]
 800b9fe:	43db      	mvns	r3, r3
 800ba00:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	621a      	str	r2, [r3, #32]
 800ba0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ba10:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	f383 8810 	msr	PRIMASK, r3
}
 800ba18:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 800ba1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800ba22:	e01f      	b.n	800ba64 <_tx_event_flags_set+0x3c4>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800ba24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ba30:	623b      	str	r3, [r7, #32]
    return(posture);
 800ba32:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ba34:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba36:	b672      	cpsid	i
    return(int_posture);
 800ba38:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800ba3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800ba3e:	4b13      	ldr	r3, [pc, #76]	; (800ba8c <_tx_event_flags_set+0x3ec>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	3301      	adds	r3, #1
 800ba44:	4a11      	ldr	r2, [pc, #68]	; (800ba8c <_tx_event_flags_set+0x3ec>)
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ba4c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba50:	f383 8810 	msr	PRIMASK, r3
}
 800ba54:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800ba56:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800ba5a:	f001 f921 	bl	800cca0 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 800ba5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800ba64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d1db      	bne.n	800ba24 <_tx_event_flags_set+0x384>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ba70:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ba72:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ba74:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba76:	b672      	cpsid	i
    return(int_posture);
 800ba78:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 800ba7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 800ba7e:	4b03      	ldr	r3, [pc, #12]	; (800ba8c <_tx_event_flags_set+0x3ec>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	3b01      	subs	r3, #1
 800ba84:	4a01      	ldr	r2, [pc, #4]	; (800ba8c <_tx_event_flags_set+0x3ec>)
 800ba86:	6013      	str	r3, [r2, #0]
 800ba88:	e009      	b.n	800ba9e <_tx_event_flags_set+0x3fe>
 800ba8a:	bf00      	nop
 800ba8c:	2001491c 	.word	0x2001491c
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	695b      	ldr	r3, [r3, #20]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d002      	beq.n	800ba9e <_tx_event_flags_set+0x3fe>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	60da      	str	r2, [r3, #12]
 800ba9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800baa2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	f383 8810 	msr	PRIMASK, r3
}
 800baaa:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 800baac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d101      	bne.n	800bab6 <_tx_event_flags_set+0x416>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 800bab2:	f001 f8bb 	bl	800cc2c <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 800bab6:	2300      	movs	r3, #0
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3798      	adds	r7, #152	; 0x98
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800bac4:	f000 ff36 	bl	800c934 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800bac8:	f001 fc16 	bl	800d2f8 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800bacc:	4b12      	ldr	r3, [pc, #72]	; (800bb18 <_tx_initialize_high_level+0x58>)
 800bace:	2200      	movs	r2, #0
 800bad0:	601a      	str	r2, [r3, #0]
 800bad2:	4b12      	ldr	r3, [pc, #72]	; (800bb1c <_tx_initialize_high_level+0x5c>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800bad8:	4b11      	ldr	r3, [pc, #68]	; (800bb20 <_tx_initialize_high_level+0x60>)
 800bada:	2200      	movs	r2, #0
 800badc:	601a      	str	r2, [r3, #0]
 800bade:	4b11      	ldr	r3, [pc, #68]	; (800bb24 <_tx_initialize_high_level+0x64>)
 800bae0:	2200      	movs	r2, #0
 800bae2:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800bae4:	4b10      	ldr	r3, [pc, #64]	; (800bb28 <_tx_initialize_high_level+0x68>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	601a      	str	r2, [r3, #0]
 800baea:	4b10      	ldr	r3, [pc, #64]	; (800bb2c <_tx_initialize_high_level+0x6c>)
 800baec:	2200      	movs	r2, #0
 800baee:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800baf0:	4b0f      	ldr	r3, [pc, #60]	; (800bb30 <_tx_initialize_high_level+0x70>)
 800baf2:	2200      	movs	r2, #0
 800baf4:	601a      	str	r2, [r3, #0]
 800baf6:	4b0f      	ldr	r3, [pc, #60]	; (800bb34 <_tx_initialize_high_level+0x74>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800bafc:	4b0e      	ldr	r3, [pc, #56]	; (800bb38 <_tx_initialize_high_level+0x78>)
 800bafe:	2200      	movs	r2, #0
 800bb00:	601a      	str	r2, [r3, #0]
 800bb02:	4b0e      	ldr	r3, [pc, #56]	; (800bb3c <_tx_initialize_high_level+0x7c>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800bb08:	4b0d      	ldr	r3, [pc, #52]	; (800bb40 <_tx_initialize_high_level+0x80>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	601a      	str	r2, [r3, #0]
 800bb0e:	4b0d      	ldr	r3, [pc, #52]	; (800bb44 <_tx_initialize_high_level+0x84>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	601a      	str	r2, [r3, #0]
#endif
}
 800bb14:	bf00      	nop
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	2001484c 	.word	0x2001484c
 800bb1c:	20014850 	.word	0x20014850
 800bb20:	20014854 	.word	0x20014854
 800bb24:	20014858 	.word	0x20014858
 800bb28:	2001485c 	.word	0x2001485c
 800bb2c:	20014860 	.word	0x20014860
 800bb30:	2001486c 	.word	0x2001486c
 800bb34:	20014870 	.word	0x20014870
 800bb38:	20014874 	.word	0x20014874
 800bb3c:	20014878 	.word	0x20014878
 800bb40:	20014864 	.word	0x20014864
 800bb44:	20014868 	.word	0x20014868

0800bb48 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800bb4c:	4b10      	ldr	r3, [pc, #64]	; (800bb90 <_tx_initialize_kernel_enter+0x48>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800bb54:	d00c      	beq.n	800bb70 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800bb56:	4b0e      	ldr	r3, [pc, #56]	; (800bb90 <_tx_initialize_kernel_enter+0x48>)
 800bb58:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800bb5c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800bb5e:	f7f4 fb95 	bl	800028c <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800bb62:	f7ff ffad 	bl	800bac0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800bb66:	4b0b      	ldr	r3, [pc, #44]	; (800bb94 <_tx_initialize_kernel_enter+0x4c>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	4a09      	ldr	r2, [pc, #36]	; (800bb94 <_tx_initialize_kernel_enter+0x4c>)
 800bb6e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800bb70:	4b07      	ldr	r3, [pc, #28]	; (800bb90 <_tx_initialize_kernel_enter+0x48>)
 800bb72:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800bb76:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800bb78:	4b07      	ldr	r3, [pc, #28]	; (800bb98 <_tx_initialize_kernel_enter+0x50>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7f4 fca3 	bl	80004c8 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800bb82:	4b03      	ldr	r3, [pc, #12]	; (800bb90 <_tx_initialize_kernel_enter+0x48>)
 800bb84:	2200      	movs	r2, #0
 800bb86:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800bb88:	f7f4 fbbc 	bl	8000304 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800bb8c:	bf00      	nop
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	20000088 	.word	0x20000088
 800bb94:	2001491c 	.word	0x2001491c
 800bb98:	2001487c 	.word	0x2001487c

0800bb9c <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b08e      	sub	sp, #56	; 0x38
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bba6:	f3ef 8310 	mrs	r3, PRIMASK
 800bbaa:	623b      	str	r3, [r7, #32]
    return(posture);
 800bbac:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bbae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bbb0:	b672      	cpsid	i
    return(int_posture);
 800bbb2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 800bbb4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbba:	4a33      	ldr	r2, [pc, #204]	; (800bc88 <_tx_mutex_cleanup+0xec>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d158      	bne.n	800bc72 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bbc6:	683a      	ldr	r2, [r7, #0]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d152      	bne.n	800bc72 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbd0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 800bbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d04c      	beq.n	800bc72 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a2b      	ldr	r2, [pc, #172]	; (800bc8c <_tx_mutex_cleanup+0xf0>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d147      	bne.n	800bc72 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800bbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d043      	beq.n	800bc72 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 800bbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf2:	69db      	ldr	r3, [r3, #28]
 800bbf4:	1e5a      	subs	r2, r3, #1
 800bbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf8:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfc:	69db      	ldr	r3, [r3, #28]
 800bbfe:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800bc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d103      	bne.n	800bc0e <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800bc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc08:	2200      	movs	r2, #0
 800bc0a:	619a      	str	r2, [r3, #24]
 800bc0c:	e013      	b.n	800bc36 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc12:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc18:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800bc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc1e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800bc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc24:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800bc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d102      	bne.n	800bc36 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc34:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc3a:	2b0d      	cmp	r3, #13
 800bc3c:	d119      	bne.n	800bc72 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	221d      	movs	r2, #29
 800bc42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800bc46:	4b12      	ldr	r3, [pc, #72]	; (800bc90 <_tx_mutex_cleanup+0xf4>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	4a10      	ldr	r2, [pc, #64]	; (800bc90 <_tx_mutex_cleanup+0xf4>)
 800bc4e:	6013      	str	r3, [r2, #0]
 800bc50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	f383 8810 	msr	PRIMASK, r3
}
 800bc5a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f001 f81f 	bl	800cca0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc62:	f3ef 8310 	mrs	r3, PRIMASK
 800bc66:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bc68:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bc6a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc6c:	b672      	cpsid	i
    return(int_posture);
 800bc6e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800bc70:	637b      	str	r3, [r7, #52]	; 0x34
 800bc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc74:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f383 8810 	msr	PRIMASK, r3
}
 800bc7c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800bc7e:	bf00      	nop
 800bc80:	3738      	adds	r7, #56	; 0x38
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	0800bb9d 	.word	0x0800bb9d
 800bc8c:	4d555445 	.word	0x4d555445
 800bc90:	2001491c 	.word	0x2001491c

0800bc94 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b08a      	sub	sp, #40	; 0x28
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc9c:	f3ef 8310 	mrs	r3, PRIMASK
 800bca0:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bca2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bca4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bca6:	b672      	cpsid	i
    return(int_posture);
 800bca8:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800bcaa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800bcac:	4b1a      	ldr	r3, [pc, #104]	; (800bd18 <_tx_mutex_thread_release+0x84>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	4a19      	ldr	r2, [pc, #100]	; (800bd18 <_tx_mutex_thread_release+0x84>)
 800bcb4:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bcbc:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 800bcbe:	6a3b      	ldr	r3, [r7, #32]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d017      	beq.n	800bcf4 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800bcc4:	6a3b      	ldr	r3, [r7, #32]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	609a      	str	r2, [r3, #8]
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bccc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f383 8810 	msr	PRIMASK, r3
}
 800bcd4:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800bcd6:	6a38      	ldr	r0, [r7, #32]
 800bcd8:	f000 faf2 	bl	800c2c0 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcdc:	f3ef 8310 	mrs	r3, PRIMASK
 800bce0:	617b      	str	r3, [r7, #20]
    return(posture);
 800bce2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800bce4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bce6:	b672      	cpsid	i
    return(int_posture);
 800bce8:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 800bcea:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bcf2:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 800bcf4:	6a3b      	ldr	r3, [r7, #32]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1dd      	bne.n	800bcb6 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800bcfa:	4b07      	ldr	r3, [pc, #28]	; (800bd18 <_tx_mutex_thread_release+0x84>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	4a05      	ldr	r2, [pc, #20]	; (800bd18 <_tx_mutex_thread_release+0x84>)
 800bd02:	6013      	str	r3, [r2, #0]
 800bd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd06:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	f383 8810 	msr	PRIMASK, r3
}
 800bd0e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 800bd10:	bf00      	nop
 800bd12:	3728      	adds	r7, #40	; 0x28
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	2001491c 	.word	0x2001491c

0800bd1c <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b08a      	sub	sp, #40	; 0x28
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800bd28:	2234      	movs	r2, #52	; 0x34
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f002 fae3 	bl	800e2f8 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd3e:	f3ef 8310 	mrs	r3, PRIMASK
 800bd42:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bd44:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bd46:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd48:	b672      	cpsid	i
    return(int_posture);
 800bd4a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 800bd4c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	4a1a      	ldr	r2, [pc, #104]	; (800bdbc <_tx_mutex_create+0xa0>)
 800bd52:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800bd54:	4b1a      	ldr	r3, [pc, #104]	; (800bdc0 <_tx_mutex_create+0xa4>)
 800bd56:	4a1b      	ldr	r2, [pc, #108]	; (800bdc4 <_tx_mutex_create+0xa8>)
 800bd58:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800bd5a:	4b1b      	ldr	r3, [pc, #108]	; (800bdc8 <_tx_mutex_create+0xac>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d109      	bne.n	800bd76 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800bd62:	4a1a      	ldr	r2, [pc, #104]	; (800bdcc <_tx_mutex_create+0xb0>)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	625a      	str	r2, [r3, #36]	; 0x24
 800bd74:	e011      	b.n	800bd9a <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800bd76:	4b15      	ldr	r3, [pc, #84]	; (800bdcc <_tx_mutex_create+0xb0>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800bd7c:	6a3b      	ldr	r3, [r7, #32]
 800bd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd80:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800bd82:	6a3b      	ldr	r3, [r7, #32]
 800bd84:	68fa      	ldr	r2, [r7, #12]
 800bd86:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800bd88:	69fb      	ldr	r3, [r7, #28]
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	69fa      	ldr	r2, [r7, #28]
 800bd92:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6a3a      	ldr	r2, [r7, #32]
 800bd98:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800bd9a:	4b0b      	ldr	r3, [pc, #44]	; (800bdc8 <_tx_mutex_create+0xac>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	4a09      	ldr	r2, [pc, #36]	; (800bdc8 <_tx_mutex_create+0xac>)
 800bda2:	6013      	str	r3, [r2, #0]
 800bda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	f383 8810 	msr	PRIMASK, r3
}
 800bdae:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3728      	adds	r7, #40	; 0x28
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	4d555445 	.word	0x4d555445
 800bdc0:	20014920 	.word	0x20014920
 800bdc4:	0800bc95 	.word	0x0800bc95
 800bdc8:	20014868 	.word	0x20014868
 800bdcc:	20014864 	.word	0x20014864

0800bdd0 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b092      	sub	sp, #72	; 0x48
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bdda:	f3ef 8310 	mrs	r3, PRIMASK
 800bdde:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800bde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800bde2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bde4:	b672      	cpsid	i
    return(int_posture);
 800bde6:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800bde8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800bdea:	4b7a      	ldr	r3, [pc, #488]	; (800bfd4 <_tx_mutex_get+0x204>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d144      	bne.n	800be82 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be02:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800be04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be06:	2b00      	cmp	r3, #0
 800be08:	d032      	beq.n	800be70 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d106      	bne.n	800be20 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800be12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2220      	movs	r2, #32
 800be1e:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800be20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800be26:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800be28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00f      	beq.n	800be4e <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800be2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be32:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800be34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be44:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be4a:	62da      	str	r2, [r3, #44]	; 0x2c
 800be4c:	e009      	b.n	800be62 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800be4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800be62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be68:	1c5a      	adds	r2, r3, #1
 800be6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800be70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be72:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	f383 8810 	msr	PRIMASK, r3
}
 800be7a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800be7c:	2300      	movs	r3, #0
 800be7e:	647b      	str	r3, [r7, #68]	; 0x44
 800be80:	e0a2      	b.n	800bfc8 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be88:	429a      	cmp	r2, r3
 800be8a:	d10d      	bne.n	800bea8 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	1c5a      	adds	r2, r3, #1
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	609a      	str	r2, [r3, #8]
 800be96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be98:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	f383 8810 	msr	PRIMASK, r3
}
 800bea0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800bea2:	2300      	movs	r3, #0
 800bea4:	647b      	str	r3, [r7, #68]	; 0x44
 800bea6:	e08f      	b.n	800bfc8 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f000 8084 	beq.w	800bfb8 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800beb0:	4b49      	ldr	r3, [pc, #292]	; (800bfd8 <_tx_mutex_get+0x208>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d008      	beq.n	800beca <_tx_mutex_get+0xfa>
 800beb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	f383 8810 	msr	PRIMASK, r3
}
 800bec2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800bec4:	231d      	movs	r3, #29
 800bec6:	647b      	str	r3, [r7, #68]	; 0x44
 800bec8:	e07e      	b.n	800bfc8 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800bed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bed2:	4a42      	ldr	r2, [pc, #264]	; (800bfdc <_tx_mutex_get+0x20c>)
 800bed4:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800bed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800bedc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bede:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bee6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	69db      	ldr	r3, [r3, #28]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d109      	bne.n	800bf06 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bef6:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800bef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800befa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800befc:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800befe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf02:	675a      	str	r2, [r3, #116]	; 0x74
 800bf04:	e011      	b.n	800bf2a <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	699b      	ldr	r3, [r3, #24]
 800bf0a:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800bf0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf10:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800bf12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf16:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800bf18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf1c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf22:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800bf24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf28:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	69db      	ldr	r3, [r3, #28]
 800bf2e:	1c5a      	adds	r2, r3, #1
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800bf34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf36:	220d      	movs	r2, #13
 800bf38:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bf3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800bf40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf42:	683a      	ldr	r2, [r7, #0]
 800bf44:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bf46:	4b24      	ldr	r3, [pc, #144]	; (800bfd8 <_tx_mutex_get+0x208>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	4a22      	ldr	r2, [pc, #136]	; (800bfd8 <_tx_mutex_get+0x208>)
 800bf4e:	6013      	str	r3, [r2, #0]
 800bf50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	f383 8810 	msr	PRIMASK, r3
}
 800bf5a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	691b      	ldr	r3, [r3, #16]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d121      	bne.n	800bfa8 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d903      	bls.n	800bf78 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800bf70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800bf78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d204      	bcs.n	800bf90 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800bf86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800bf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d905      	bls.n	800bfa8 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800bf9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfa4:	f000 f8ce 	bl	800c144 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800bfa8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bfaa:	f000 ff79 	bl	800cea0 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800bfae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfb4:	647b      	str	r3, [r7, #68]	; 0x44
 800bfb6:	e007      	b.n	800bfc8 <_tx_mutex_get+0x1f8>
 800bfb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f383 8810 	msr	PRIMASK, r3
}
 800bfc2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800bfc4:	231d      	movs	r3, #29
 800bfc6:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 800bfc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3748      	adds	r7, #72	; 0x48
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	20014884 	.word	0x20014884
 800bfd8:	2001491c 	.word	0x2001491c
 800bfdc:	0800bb9d 	.word	0x0800bb9d

0800bfe0 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b092      	sub	sp, #72	; 0x48
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bfe8:	f3ef 8310 	mrs	r3, PRIMASK
 800bfec:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800bfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800bff0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bff2:	b672      	cpsid	i
    return(int_posture);
 800bff4:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800bff6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	69db      	ldr	r3, [r3, #28]
 800bffc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800bffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c000:	2b01      	cmp	r3, #1
 800c002:	d805      	bhi.n	800c010 <_tx_mutex_prioritize+0x30>
 800c004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c006:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	f383 8810 	msr	PRIMASK, r3
}
 800c00e:	e092      	b.n	800c136 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800c010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c012:	2b02      	cmp	r3, #2
 800c014:	d114      	bne.n	800c040 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800c01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c020:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800c022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d202      	bcs.n	800c034 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c032:	619a      	str	r2, [r3, #24]
 800c034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c036:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	f383 8810 	msr	PRIMASK, r3
}
 800c03e:	e07a      	b.n	800c136 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	699b      	ldr	r3, [r3, #24]
 800c044:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800c046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c048:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800c04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c04c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c04e:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800c050:	4b3b      	ldr	r3, [pc, #236]	; (800c140 <_tx_mutex_prioritize+0x160>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	3301      	adds	r3, #1
 800c056:	4a3a      	ldr	r2, [pc, #232]	; (800c140 <_tx_mutex_prioritize+0x160>)
 800c058:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800c05a:	2300      	movs	r3, #0
 800c05c:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800c05e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c066:	429a      	cmp	r2, r3
 800c068:	d201      	bcs.n	800c06e <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800c06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c06c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c06e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c070:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f383 8810 	msr	PRIMASK, r3
}
 800c078:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c07a:	f3ef 8310 	mrs	r3, PRIMASK
 800c07e:	617b      	str	r3, [r7, #20]
    return(posture);
 800c080:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c082:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c084:	b672      	cpsid	i
    return(int_posture);
 800c086:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800c088:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	699b      	ldr	r3, [r3, #24]
 800c08e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c090:	429a      	cmp	r2, r3
 800c092:	d002      	beq.n	800c09a <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800c094:	2301      	movs	r3, #1
 800c096:	633b      	str	r3, [r7, #48]	; 0x30
 800c098:	e006      	b.n	800c0a8 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	69db      	ldr	r3, [r3, #28]
 800c09e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d001      	beq.n	800c0a8 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800c0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d103      	bne.n	800c0b6 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c0ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0b2:	643b      	str	r3, [r7, #64]	; 0x40
 800c0b4:	e00c      	b.n	800c0d0 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	699b      	ldr	r3, [r3, #24]
 800c0ba:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	69db      	ldr	r3, [r3, #28]
 800c0c0:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800c0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800c0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ca:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 800c0d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d1c2      	bne.n	800c05e <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800c0d8:	4b19      	ldr	r3, [pc, #100]	; (800c140 <_tx_mutex_prioritize+0x160>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	4a18      	ldr	r2, [pc, #96]	; (800c140 <_tx_mutex_prioritize+0x160>)
 800c0e0:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800c0e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d01d      	beq.n	800c126 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800c0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800c0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0f4:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800c0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0fa:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800c0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c100:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800c102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c106:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800c108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c10a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c10c:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800c10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c112:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800c114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c116:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c118:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800c11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c11e:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c124:	619a      	str	r2, [r3, #24]
 800c126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c128:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	f383 8810 	msr	PRIMASK, r3
}
 800c130:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c132:	f000 fd7b 	bl	800cc2c <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800c136:	2300      	movs	r3, #0
#endif
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3748      	adds	r7, #72	; 0x48
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	2001491c 	.word	0x2001491c

0800c144 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b090      	sub	sp, #64	; 0x40
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c14e:	f3ef 8310 	mrs	r3, PRIMASK
 800c152:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c156:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c158:	b672      	cpsid	i
    return(int_posture);
 800c15a:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800c15c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c162:	2b00      	cmp	r3, #0
 800c164:	d017      	beq.n	800c196 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	683a      	ldr	r2, [r7, #0]
 800c16a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c172:	683a      	ldr	r2, [r7, #0]
 800c174:	429a      	cmp	r2, r3
 800c176:	d905      	bls.n	800c184 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	63da      	str	r2, [r3, #60]	; 0x3c
 800c182:	e002      	b.n	800c18a <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	63da      	str	r2, [r3, #60]	; 0x3c
 800c18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c18c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c190:	f383 8810 	msr	PRIMASK, r3
}
 800c194:	e089      	b.n	800c2aa <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800c196:	4b47      	ldr	r3, [pc, #284]	; (800c2b4 <_tx_mutex_priority_change+0x170>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a0:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800c1a2:	4b45      	ldr	r3, [pc, #276]	; (800c2b8 <_tx_mutex_priority_change+0x174>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	3302      	adds	r3, #2
 800c1a8:	4a43      	ldr	r2, [pc, #268]	; (800c2b8 <_tx_mutex_priority_change+0x174>)
 800c1aa:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	220e      	movs	r2, #14
 800c1b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	64da      	str	r2, [r3, #76]	; 0x4c
 800c1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1c0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	f383 8810 	msr	PRIMASK, r3
}
 800c1c8:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 fe68 	bl	800cea0 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c1d0:	f3ef 8310 	mrs	r3, PRIMASK
 800c1d4:	623b      	str	r3, [r7, #32]
    return(posture);
 800c1d6:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c1d8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c1da:	b672      	cpsid	i
    return(int_posture);
 800c1dc:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 800c1de:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	683a      	ldr	r2, [r7, #0]
 800c1e4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c1ec:	683a      	ldr	r2, [r7, #0]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d905      	bls.n	800c1fe <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	63da      	str	r2, [r3, #60]	; 0x3c
 800c1fc:	e002      	b.n	800c204 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	63da      	str	r2, [r3, #60]	; 0x3c
 800c204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c206:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f383 8810 	msr	PRIMASK, r3
}
 800c20e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fd45 	bl	800cca0 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c216:	f3ef 8310 	mrs	r3, PRIMASK
 800c21a:	617b      	str	r3, [r7, #20]
    return(posture);
 800c21c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c21e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c220:	b672      	cpsid	i
    return(int_posture);
 800c222:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800c224:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800c226:	4b23      	ldr	r3, [pc, #140]	; (800c2b4 <_tx_mutex_priority_change+0x170>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c230:	429a      	cmp	r2, r3
 800c232:	d034      	beq.n	800c29e <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d130      	bne.n	800c29e <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c244:	429a      	cmp	r2, r3
 800c246:	d811      	bhi.n	800c26c <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d126      	bne.n	800c29e <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800c250:	4a18      	ldr	r2, [pc, #96]	; (800c2b4 <_tx_mutex_priority_change+0x170>)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800c256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d21f      	bcs.n	800c29e <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c262:	4916      	ldr	r1, [pc, #88]	; (800c2bc <_tx_mutex_priority_change+0x178>)
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c26a:	e018      	b.n	800c29e <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c274:	429a      	cmp	r2, r3
 800c276:	d212      	bcs.n	800c29e <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c280:	429a      	cmp	r2, r3
 800c282:	d80c      	bhi.n	800c29e <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800c284:	4a0b      	ldr	r2, [pc, #44]	; (800c2b4 <_tx_mutex_priority_change+0x170>)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800c28a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d205      	bcs.n	800c29e <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c296:	4909      	ldr	r1, [pc, #36]	; (800c2bc <_tx_mutex_priority_change+0x178>)
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c29e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2a0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	f383 8810 	msr	PRIMASK, r3
}
 800c2a8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800c2aa:	bf00      	nop
 800c2ac:	3740      	adds	r7, #64	; 0x40
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20014888 	.word	0x20014888
 800c2b8:	2001491c 	.word	0x2001491c
 800c2bc:	2001489c 	.word	0x2001489c

0800c2c0 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b0a6      	sub	sp, #152	; 0x98
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800c2c8:	2320      	movs	r3, #32
 800c2ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2ce:	f3ef 8310 	mrs	r3, PRIMASK
 800c2d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 800c2d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 800c2d6:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800c2d8:	b672      	cpsid	i
    return(int_posture);
 800c2da:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800c2dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f000 81ff 	beq.w	800c6e8 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800c2f0:	4ba3      	ldr	r3, [pc, #652]	; (800c580 <_tx_mutex_put+0x2c0>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d00d      	beq.n	800c31c <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800c300:	4ba0      	ldr	r3, [pc, #640]	; (800c584 <_tx_mutex_put+0x2c4>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d109      	bne.n	800c31c <_tx_mutex_put+0x5c>
 800c308:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c30c:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c30e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c310:	f383 8810 	msr	PRIMASK, r3
}
 800c314:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800c316:	231e      	movs	r3, #30
 800c318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800c31c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c320:	2b20      	cmp	r3, #32
 800c322:	f040 81eb 	bne.w	800c6fc <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	1e5a      	subs	r2, r3, #1
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d00a      	beq.n	800c34e <_tx_mutex_put+0x8e>
 800c338:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c33c:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c33e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c340:	f383 8810 	msr	PRIMASK, r3
}
 800c344:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800c346:	2300      	movs	r3, #0
 800c348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c34c:	e1d6      	b.n	800c6fc <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800c34e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10a      	bne.n	800c36a <_tx_mutex_put+0xaa>
 800c354:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c358:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c35a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c35c:	f383 8810 	msr	PRIMASK, r3
}
 800c360:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800c362:	2300      	movs	r3, #0
 800c364:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c368:	e1c8      	b.n	800c6fc <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800c36a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c36c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c370:	1e5a      	subs	r2, r3, #1
 800c372:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c374:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800c378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c37a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d104      	bne.n	800c38c <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800c382:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c384:	2200      	movs	r2, #0
 800c386:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800c38a:	e019      	b.n	800c3c0 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c398:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800c39a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c39e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c3a0:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800c3a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c3a8:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800c3aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d104      	bne.n	800c3c0 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800c3b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c3bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	699b      	ldr	r3, [r3, #24]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d110      	bne.n	800c3ea <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10c      	bne.n	800c3ea <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	60da      	str	r2, [r3, #12]
 800c3d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3da:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3de:	f383 8810 	msr	PRIMASK, r3
}
 800c3e2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800c3ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c3ee:	2b20      	cmp	r3, #32
 800c3f0:	f040 8184 	bne.w	800c6fc <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800c3fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d155      	bne.n	800c4b8 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c40c:	4b5d      	ldr	r3, [pc, #372]	; (800c584 <_tx_mutex_put+0x2c4>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	3301      	adds	r3, #1
 800c412:	4a5c      	ldr	r2, [pc, #368]	; (800c584 <_tx_mutex_put+0x2c4>)
 800c414:	6013      	str	r3, [r2, #0]
 800c416:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c41a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c41c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c41e:	f383 8810 	msr	PRIMASK, r3
}
 800c422:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c424:	2320      	movs	r3, #32
 800c426:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800c42a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c42c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800c434:	e01f      	b.n	800c476 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800c436:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d10b      	bne.n	800c458 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800c440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c446:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d904      	bls.n	800c458 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800c44e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800c458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800c462:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c464:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c468:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d102      	bne.n	800c476 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800c470:	2300      	movs	r3, #0
 800c472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800c476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1db      	bne.n	800c436 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c47e:	f3ef 8310 	mrs	r3, PRIMASK
 800c482:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800c484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800c486:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c488:	b672      	cpsid	i
    return(int_posture);
 800c48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c48c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800c490:	4b3c      	ldr	r3, [pc, #240]	; (800c584 <_tx_mutex_put+0x2c4>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	3b01      	subs	r3, #1
 800c496:	4a3b      	ldr	r2, [pc, #236]	; (800c584 <_tx_mutex_put+0x2c4>)
 800c498:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800c49a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c49c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c4a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800c4a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c4a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d203      	bcs.n	800c4b8 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 800c4b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c4b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	69db      	ldr	r3, [r3, #28]
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d920      	bls.n	800c502 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	691b      	ldr	r3, [r3, #16]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d11c      	bne.n	800c502 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800c4c8:	4b2e      	ldr	r3, [pc, #184]	; (800c584 <_tx_mutex_put+0x2c4>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	4a2d      	ldr	r2, [pc, #180]	; (800c584 <_tx_mutex_put+0x2c4>)
 800c4d0:	6013      	str	r3, [r2, #0]
 800c4d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c4d6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4da:	f383 8810 	msr	PRIMASK, r3
}
 800c4de:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f7ff fd7d 	bl	800bfe0 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c4e6:	f3ef 8310 	mrs	r3, PRIMASK
 800c4ea:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800c4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800c4ee:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800c4f0:	b672      	cpsid	i
    return(int_posture);
 800c4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 800c4f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800c4f8:	4b22      	ldr	r3, [pc, #136]	; (800c584 <_tx_mutex_put+0x2c4>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	3b01      	subs	r3, #1
 800c4fe:	4a21      	ldr	r2, [pc, #132]	; (800c584 <_tx_mutex_put+0x2c4>)
 800c500:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	699b      	ldr	r3, [r3, #24]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d13e      	bne.n	800c588 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c50a:	4b1e      	ldr	r3, [pc, #120]	; (800c584 <_tx_mutex_put+0x2c4>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	3301      	adds	r3, #1
 800c510:	4a1c      	ldr	r2, [pc, #112]	; (800c584 <_tx_mutex_put+0x2c4>)
 800c512:	6013      	str	r3, [r2, #0]
 800c514:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c518:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51c:	f383 8810 	msr	PRIMASK, r3
}
 800c520:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2220      	movs	r2, #32
 800c526:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c52e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c532:	429a      	cmp	r2, r3
 800c534:	d006      	beq.n	800c544 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c53e:	4618      	mov	r0, r3
 800c540:	f7ff fe00 	bl	800c144 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c544:	f3ef 8310 	mrs	r3, PRIMASK
 800c548:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c54c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c54e:	b672      	cpsid	i
    return(int_posture);
 800c550:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800c552:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800c556:	4b0b      	ldr	r3, [pc, #44]	; (800c584 <_tx_mutex_put+0x2c4>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	3b01      	subs	r3, #1
 800c55c:	4a09      	ldr	r2, [pc, #36]	; (800c584 <_tx_mutex_put+0x2c4>)
 800c55e:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	60da      	str	r2, [r3, #12]
 800c566:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c56a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	f383 8810 	msr	PRIMASK, r3
}
 800c572:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800c574:	f000 fb5a 	bl	800cc2c <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 800c578:	2300      	movs	r3, #0
 800c57a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c57e:	e0bd      	b.n	800c6fc <_tx_mutex_put+0x43c>
 800c580:	20014884 	.word	0x20014884
 800c584:	2001491c 	.word	0x2001491c
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	699b      	ldr	r3, [r3, #24]
 800c58c:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	2b01      	cmp	r3, #1
 800c594:	d10a      	bne.n	800c5ac <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800c59e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2220      	movs	r2, #32
 800c5aa:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800c5ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c5ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c5b2:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800c5b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10a      	bne.n	800c5d0 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800c5ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	631a      	str	r2, [r3, #48]	; 0x30
 800c5ce:	e016      	b.n	800c5fe <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800c5d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c5d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c5d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800c5da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5e0:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800c5e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800c5ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c5f4:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c5fc:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800c5fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c600:	1c5a      	adds	r2, r3, #1
 800c602:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c604:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c612:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	69db      	ldr	r3, [r3, #28]
 800c618:	1e5a      	subs	r2, r3, #1
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	69db      	ldr	r3, [r3, #28]
 800c622:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800c624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c626:	2b00      	cmp	r3, #0
 800c628:	d103      	bne.n	800c632 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	619a      	str	r2, [r3, #24]
 800c630:	e00e      	b.n	800c650 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800c632:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c636:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c63c:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800c63e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c642:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800c644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c646:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c648:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800c64a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c64c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c64e:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c650:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c652:	2200      	movs	r2, #0
 800c654:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800c656:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c658:	2200      	movs	r2, #0
 800c65a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c65e:	4b2a      	ldr	r3, [pc, #168]	; (800c708 <_tx_mutex_put+0x448>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	3301      	adds	r3, #1
 800c664:	4a28      	ldr	r2, [pc, #160]	; (800c708 <_tx_mutex_put+0x448>)
 800c666:	6013      	str	r3, [r2, #0]
 800c668:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c66c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c66e:	69fb      	ldr	r3, [r7, #28]
 800c670:	f383 8810 	msr	PRIMASK, r3
}
 800c674:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	691b      	ldr	r3, [r3, #16]
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d12d      	bne.n	800c6da <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	69db      	ldr	r3, [r3, #28]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d01c      	beq.n	800c6c0 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7ff fcaa 	bl	800bfe0 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c68c:	f3ef 8310 	mrs	r3, PRIMASK
 800c690:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c692:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c694:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c696:	b672      	cpsid	i
    return(int_posture);
 800c698:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800c69a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	699b      	ldr	r3, [r3, #24]
 800c6a2:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 800c6a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d003      	beq.n	800c6b2 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800c6aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	629a      	str	r2, [r3, #40]	; 0x28
 800c6b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c6b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	f383 8810 	msr	PRIMASK, r3
}
 800c6be:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 800c6c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d005      	beq.n	800c6da <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800c6ce:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c6d2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c6d6:	f7ff fd35 	bl	800c144 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800c6da:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800c6dc:	f000 fae0 	bl	800cca0 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c6e6:	e009      	b.n	800c6fc <_tx_mutex_put+0x43c>
 800c6e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c6ec:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f383 8810 	msr	PRIMASK, r3
}
 800c6f4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800c6f6:	231e      	movs	r3, #30
 800c6f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 800c6fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800c700:	4618      	mov	r0, r3
 800c702:	3798      	adds	r7, #152	; 0x98
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	2001491c 	.word	0x2001491c

0800c70c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b092      	sub	sp, #72	; 0x48
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	607a      	str	r2, [r7, #4]
 800c718:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800c71a:	2300      	movs	r3, #0
 800c71c:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800c71e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c720:	21ef      	movs	r1, #239	; 0xef
 800c722:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c724:	f001 fde8 	bl	800e2f8 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800c728:	22b0      	movs	r2, #176	; 0xb0
 800c72a:	2100      	movs	r1, #0
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f001 fde3 	bl	800e2f8 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	68ba      	ldr	r2, [r7, #8]
 800c736:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	683a      	ldr	r2, [r7, #0]
 800c742:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c748:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c74e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c754:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c75a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c762:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c768:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2220      	movs	r2, #32
 800c76e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800c772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c774:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800c776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c778:	3b01      	subs	r3, #1
 800c77a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c77c:	4413      	add	r3, r2
 800c77e:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c784:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800c786:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d007      	beq.n	800c79e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2200      	movs	r2, #0
 800c792:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2200      	movs	r2, #0
 800c798:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800c79c:	e006      	b.n	800c7ac <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c7a2:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c7a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2203      	movs	r2, #3
 800c7b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	4a48      	ldr	r2, [pc, #288]	; (800c8d8 <_tx_thread_create+0x1cc>)
 800c7b6:	655a      	str	r2, [r3, #84]	; 0x54
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800c7be:	4947      	ldr	r1, [pc, #284]	; (800c8dc <_tx_thread_create+0x1d0>)
 800c7c0:	68f8      	ldr	r0, [r7, #12]
 800c7c2:	f7f3 fe05 	bl	80003d0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c7c6:	f3ef 8310 	mrs	r3, PRIMASK
 800c7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c7ce:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c7d0:	b672      	cpsid	i
    return(int_posture);
 800c7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800c7d4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	4a41      	ldr	r2, [pc, #260]	; (800c8e0 <_tx_thread_create+0x1d4>)
 800c7da:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800c7dc:	4b41      	ldr	r3, [pc, #260]	; (800c8e4 <_tx_thread_create+0x1d8>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10b      	bne.n	800c7fc <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800c7e4:	4a40      	ldr	r2, [pc, #256]	; (800c8e8 <_tx_thread_create+0x1dc>)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800c7fa:	e016      	b.n	800c82a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800c7fc:	4b3a      	ldr	r3, [pc, #232]	; (800c8e8 <_tx_thread_create+0x1dc>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800c802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c808:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800c80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800c812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c81e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800c82a:	4b2e      	ldr	r3, [pc, #184]	; (800c8e4 <_tx_thread_create+0x1d8>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	3301      	adds	r3, #1
 800c830:	4a2c      	ldr	r2, [pc, #176]	; (800c8e4 <_tx_thread_create+0x1d8>)
 800c832:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800c834:	4b2d      	ldr	r3, [pc, #180]	; (800c8ec <_tx_thread_create+0x1e0>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	3301      	adds	r3, #1
 800c83a:	4a2c      	ldr	r2, [pc, #176]	; (800c8ec <_tx_thread_create+0x1e0>)
 800c83c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800c83e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c840:	2b01      	cmp	r3, #1
 800c842:	d129      	bne.n	800c898 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c844:	f3ef 8305 	mrs	r3, IPSR
 800c848:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800c84a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800c84c:	4b28      	ldr	r3, [pc, #160]	; (800c8f0 <_tx_thread_create+0x1e4>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4313      	orrs	r3, r2
 800c852:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c856:	d30d      	bcc.n	800c874 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800c858:	4b26      	ldr	r3, [pc, #152]	; (800c8f4 <_tx_thread_create+0x1e8>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800c85e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c860:	2b00      	cmp	r3, #0
 800c862:	d009      	beq.n	800c878 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800c864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c868:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800c86a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c86c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c86e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c870:	63da      	str	r2, [r3, #60]	; 0x3c
 800c872:	e001      	b.n	800c878 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800c874:	2300      	movs	r3, #0
 800c876:	647b      	str	r3, [r7, #68]	; 0x44
 800c878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c87c:	6a3b      	ldr	r3, [r7, #32]
 800c87e:	f383 8810 	msr	PRIMASK, r3
}
 800c882:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f000 fa0b 	bl	800cca0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800c88a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d01e      	beq.n	800c8ce <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800c890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c892:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c894:	63da      	str	r2, [r3, #60]	; 0x3c
 800c896:	e01a      	b.n	800c8ce <_tx_thread_create+0x1c2>
 800c898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	f383 8810 	msr	PRIMASK, r3
}
 800c8a2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8a4:	f3ef 8310 	mrs	r3, PRIMASK
 800c8a8:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c8aa:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c8ac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c8ae:	b672      	cpsid	i
    return(int_posture);
 800c8b0:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800c8b2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800c8b4:	4b0d      	ldr	r3, [pc, #52]	; (800c8ec <_tx_thread_create+0x1e0>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	4a0c      	ldr	r2, [pc, #48]	; (800c8ec <_tx_thread_create+0x1e0>)
 800c8bc:	6013      	str	r3, [r2, #0]
 800c8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	f383 8810 	msr	PRIMASK, r3
}
 800c8c8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c8ca:	f000 f9af 	bl	800cc2c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800c8ce:	2300      	movs	r3, #0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3748      	adds	r7, #72	; 0x48
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	0800d175 	.word	0x0800d175
 800c8dc:	0800ca95 	.word	0x0800ca95
 800c8e0:	54485244 	.word	0x54485244
 800c8e4:	20014890 	.word	0x20014890
 800c8e8:	2001488c 	.word	0x2001488c
 800c8ec:	2001491c 	.word	0x2001491c
 800c8f0:	20000088 	.word	0x20000088
 800c8f4:	20014888 	.word	0x20014888

0800c8f8 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b087      	sub	sp, #28
 800c8fc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8fe:	f3ef 8310 	mrs	r3, PRIMASK
 800c902:	60bb      	str	r3, [r7, #8]
    return(posture);
 800c904:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 800c906:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c908:	b672      	cpsid	i
    return(int_posture);
 800c90a:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800c90c:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c90e:	4b08      	ldr	r3, [pc, #32]	; (800c930 <_tx_thread_identify+0x38>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	613b      	str	r3, [r7, #16]
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f383 8810 	msr	PRIMASK, r3
}
 800c91e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 800c920:	693b      	ldr	r3, [r7, #16]
}
 800c922:	4618      	mov	r0, r3
 800c924:	371c      	adds	r7, #28
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	20014884 	.word	0x20014884

0800c934 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800c938:	4b12      	ldr	r3, [pc, #72]	; (800c984 <_tx_thread_initialize+0x50>)
 800c93a:	2200      	movs	r2, #0
 800c93c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800c93e:	4b12      	ldr	r3, [pc, #72]	; (800c988 <_tx_thread_initialize+0x54>)
 800c940:	2200      	movs	r2, #0
 800c942:	601a      	str	r2, [r3, #0]
 800c944:	4b11      	ldr	r3, [pc, #68]	; (800c98c <_tx_thread_initialize+0x58>)
 800c946:	2200      	movs	r2, #0
 800c948:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c94a:	4b11      	ldr	r3, [pc, #68]	; (800c990 <_tx_thread_initialize+0x5c>)
 800c94c:	2220      	movs	r2, #32
 800c94e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800c950:	2280      	movs	r2, #128	; 0x80
 800c952:	2100      	movs	r1, #0
 800c954:	480f      	ldr	r0, [pc, #60]	; (800c994 <_tx_thread_initialize+0x60>)
 800c956:	f001 fccf 	bl	800e2f8 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800c95a:	4b0f      	ldr	r3, [pc, #60]	; (800c998 <_tx_thread_initialize+0x64>)
 800c95c:	2200      	movs	r2, #0
 800c95e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800c960:	4b0e      	ldr	r3, [pc, #56]	; (800c99c <_tx_thread_initialize+0x68>)
 800c962:	2200      	movs	r2, #0
 800c964:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800c966:	4b0e      	ldr	r3, [pc, #56]	; (800c9a0 <_tx_thread_initialize+0x6c>)
 800c968:	2200      	movs	r2, #0
 800c96a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800c96c:	4b0d      	ldr	r3, [pc, #52]	; (800c9a4 <_tx_thread_initialize+0x70>)
 800c96e:	2200      	movs	r2, #0
 800c970:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800c972:	4b0d      	ldr	r3, [pc, #52]	; (800c9a8 <_tx_thread_initialize+0x74>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800c97a:	4a0b      	ldr	r2, [pc, #44]	; (800c9a8 <_tx_thread_initialize+0x74>)
 800c97c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800c97e:	bf00      	nop
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	20014884 	.word	0x20014884
 800c988:	20014888 	.word	0x20014888
 800c98c:	20014894 	.word	0x20014894
 800c990:	20014898 	.word	0x20014898
 800c994:	2001489c 	.word	0x2001489c
 800c998:	2001488c 	.word	0x2001488c
 800c99c:	20014890 	.word	0x20014890
 800c9a0:	2001491c 	.word	0x2001491c
 800c9a4:	20014920 	.word	0x20014920
 800c9a8:	20014924 	.word	0x20014924

0800c9ac <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b08c      	sub	sp, #48	; 0x30
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9c2:	68ba      	ldr	r2, [r7, #8]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d004      	beq.n	800c9d2 <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d001      	beq.n	800c9d2 <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c9d2:	f3ef 8310 	mrs	r3, PRIMASK
 800c9d6:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c9da:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c9dc:	b672      	cpsid	i
    return(int_posture);
 800c9de:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800c9e0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d902      	bls.n	800c9f4 <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 800c9ee:	2318      	movs	r3, #24
 800c9f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9f2:	e03e      	b.n	800ca72 <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	68ba      	ldr	r2, [r7, #8]
 800ca02:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d203      	bcs.n	800ca1a <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	63da      	str	r2, [r3, #60]	; 0x3c
 800ca18:	e004      	b.n	800ca24 <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca28:	4b17      	ldr	r3, [pc, #92]	; (800ca88 <_tx_thread_preemption_change+0xdc>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d920      	bls.n	800ca72 <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 800ca30:	4b15      	ldr	r3, [pc, #84]	; (800ca88 <_tx_thread_preemption_change+0xdc>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d91b      	bls.n	800ca72 <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 800ca3a:	4b14      	ldr	r3, [pc, #80]	; (800ca8c <_tx_thread_preemption_change+0xe0>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d116      	bne.n	800ca72 <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800ca44:	4b10      	ldr	r3, [pc, #64]	; (800ca88 <_tx_thread_preemption_change+0xdc>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a11      	ldr	r2, [pc, #68]	; (800ca90 <_tx_thread_preemption_change+0xe4>)
 800ca4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca4e:	4a0f      	ldr	r2, [pc, #60]	; (800ca8c <_tx_thread_preemption_change+0xe0>)
 800ca50:	6013      	str	r3, [r2, #0]
 800ca52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca54:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	f383 8810 	msr	PRIMASK, r3
}
 800ca5c:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 800ca5e:	f000 f8e5 	bl	800cc2c <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ca62:	f3ef 8310 	mrs	r3, PRIMASK
 800ca66:	61fb      	str	r3, [r7, #28]
    return(posture);
 800ca68:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800ca6a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ca6c:	b672      	cpsid	i
    return(int_posture);
 800ca6e:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800ca70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca74:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	f383 8810 	msr	PRIMASK, r3
}
 800ca7c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3730      	adds	r7, #48	; 0x30
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	20014898 	.word	0x20014898
 800ca8c:	20014888 	.word	0x20014888
 800ca90:	2001489c 	.word	0x2001489c

0800ca94 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b088      	sub	sp, #32
 800ca98:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ca9a:	4b21      	ldr	r3, [pc, #132]	; (800cb20 <_tx_thread_shell_entry+0x8c>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caa4:	69fa      	ldr	r2, [r7, #28]
 800caa6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800caa8:	4610      	mov	r0, r2
 800caaa:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800caac:	4b1d      	ldr	r3, [pc, #116]	; (800cb24 <_tx_thread_shell_entry+0x90>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d003      	beq.n	800cabc <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800cab4:	4b1b      	ldr	r3, [pc, #108]	; (800cb24 <_tx_thread_shell_entry+0x90>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	69f8      	ldr	r0, [r7, #28]
 800caba:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cabc:	f3ef 8310 	mrs	r3, PRIMASK
 800cac0:	607b      	str	r3, [r7, #4]
    return(posture);
 800cac2:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800cac4:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cac6:	b672      	cpsid	i
    return(int_posture);
 800cac8:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800caca:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	2201      	movs	r2, #1
 800cad0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	2201      	movs	r2, #1
 800cad6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	2200      	movs	r2, #0
 800cadc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800cade:	4b12      	ldr	r3, [pc, #72]	; (800cb28 <_tx_thread_shell_entry+0x94>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	3301      	adds	r3, #1
 800cae4:	4a10      	ldr	r2, [pc, #64]	; (800cb28 <_tx_thread_shell_entry+0x94>)
 800cae6:	6013      	str	r3, [r2, #0]
 800cae8:	69bb      	ldr	r3, [r7, #24]
 800caea:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	f383 8810 	msr	PRIMASK, r3
}
 800caf2:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800caf4:	f3ef 8314 	mrs	r3, CONTROL
 800caf8:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800cafa:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800cafc:	617b      	str	r3, [r7, #20]
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	f023 0304 	bic.w	r3, r3, #4
 800cb04:	617b      	str	r3, [r7, #20]
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	f383 8814 	msr	CONTROL, r3
}
 800cb10:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800cb12:	69f8      	ldr	r0, [r7, #28]
 800cb14:	f000 f9c4 	bl	800cea0 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800cb18:	bf00      	nop
 800cb1a:	3720      	adds	r7, #32
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	20014884 	.word	0x20014884
 800cb24:	20014920 	.word	0x20014920
 800cb28:	2001491c 	.word	0x2001491c

0800cb2c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b08e      	sub	sp, #56	; 0x38
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb34:	f3ef 8310 	mrs	r3, PRIMASK
 800cb38:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800cb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800cb3c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb3e:	b672      	cpsid	i
    return(int_posture);
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800cb42:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cb44:	4b35      	ldr	r3, [pc, #212]	; (800cc1c <_tx_thread_sleep+0xf0>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800cb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d108      	bne.n	800cb62 <_tx_thread_sleep+0x36>
 800cb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb52:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb54:	6a3b      	ldr	r3, [r7, #32]
 800cb56:	f383 8810 	msr	PRIMASK, r3
}
 800cb5a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cb5c:	2313      	movs	r3, #19
 800cb5e:	637b      	str	r3, [r7, #52]	; 0x34
 800cb60:	e056      	b.n	800cc10 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cb62:	f3ef 8305 	mrs	r3, IPSR
 800cb66:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800cb68:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cb6a:	4b2d      	ldr	r3, [pc, #180]	; (800cc20 <_tx_thread_sleep+0xf4>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d008      	beq.n	800cb86 <_tx_thread_sleep+0x5a>
 800cb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb76:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	f383 8810 	msr	PRIMASK, r3
}
 800cb7e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cb80:	2313      	movs	r3, #19
 800cb82:	637b      	str	r3, [r7, #52]	; 0x34
 800cb84:	e044      	b.n	800cc10 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800cb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb88:	4a26      	ldr	r2, [pc, #152]	; (800cc24 <_tx_thread_sleep+0xf8>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d108      	bne.n	800cba0 <_tx_thread_sleep+0x74>
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb90:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	f383 8810 	msr	PRIMASK, r3
}
 800cb98:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cb9a:	2313      	movs	r3, #19
 800cb9c:	637b      	str	r3, [r7, #52]	; 0x34
 800cb9e:	e037      	b.n	800cc10 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d108      	bne.n	800cbb8 <_tx_thread_sleep+0x8c>
 800cba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	f383 8810 	msr	PRIMASK, r3
}
 800cbb0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	637b      	str	r3, [r7, #52]	; 0x34
 800cbb6:	e02b      	b.n	800cc10 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800cbb8:	4b1b      	ldr	r3, [pc, #108]	; (800cc28 <_tx_thread_sleep+0xfc>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d008      	beq.n	800cbd2 <_tx_thread_sleep+0xa6>
 800cbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f383 8810 	msr	PRIMASK, r3
}
 800cbca:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800cbcc:	2313      	movs	r3, #19
 800cbce:	637b      	str	r3, [r7, #52]	; 0x34
 800cbd0:	e01e      	b.n	800cc10 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800cbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd4:	2204      	movs	r2, #4
 800cbd6:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbda:	2201      	movs	r2, #1
 800cbdc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800cbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800cbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800cbec:	4b0e      	ldr	r3, [pc, #56]	; (800cc28 <_tx_thread_sleep+0xfc>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	4a0d      	ldr	r2, [pc, #52]	; (800cc28 <_tx_thread_sleep+0xfc>)
 800cbf4:	6013      	str	r3, [r2, #0]
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	f383 8810 	msr	PRIMASK, r3
}
 800cc00:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800cc02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc04:	f000 f94c 	bl	800cea0 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800cc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc0e:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800cc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3738      	adds	r7, #56	; 0x38
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	20014884 	.word	0x20014884
 800cc20:	20000088 	.word	0x20000088
 800cc24:	200149cc 	.word	0x200149cc
 800cc28:	2001491c 	.word	0x2001491c

0800cc2c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b089      	sub	sp, #36	; 0x24
 800cc30:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800cc32:	4b17      	ldr	r3, [pc, #92]	; (800cc90 <_tx_thread_system_preempt_check+0x64>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d121      	bne.n	800cc82 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800cc3e:	4b15      	ldr	r3, [pc, #84]	; (800cc94 <_tx_thread_system_preempt_check+0x68>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800cc44:	4b14      	ldr	r3, [pc, #80]	; (800cc98 <_tx_thread_system_preempt_check+0x6c>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800cc4a:	69ba      	ldr	r2, [r7, #24]
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d017      	beq.n	800cc82 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800cc52:	4b12      	ldr	r3, [pc, #72]	; (800cc9c <_tx_thread_system_preempt_check+0x70>)
 800cc54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc58:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cc5a:	f3ef 8305 	mrs	r3, IPSR
 800cc5e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800cc60:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d10c      	bne.n	800cc80 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc66:	f3ef 8310 	mrs	r3, PRIMASK
 800cc6a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800cc6e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800cc70:	b662      	cpsie	i
}
 800cc72:	bf00      	nop
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f383 8810 	msr	PRIMASK, r3
}
 800cc7e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800cc80:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800cc82:	bf00      	nop
 800cc84:	3724      	adds	r7, #36	; 0x24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	2001491c 	.word	0x2001491c
 800cc94:	20014884 	.word	0x20014884
 800cc98:	20014888 	.word	0x20014888
 800cc9c:	e000ed04 	.word	0xe000ed04

0800cca0 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b096      	sub	sp, #88	; 0x58
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cca8:	f3ef 8310 	mrs	r3, PRIMASK
 800ccac:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800ccae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800ccb0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800ccb2:	b672      	cpsid	i
    return(int_posture);
 800ccb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800ccb6:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d005      	beq.n	800cccc <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	334c      	adds	r3, #76	; 0x4c
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f000 fbf5 	bl	800d4b4 <_tx_timer_system_deactivate>
 800ccca:	e002      	b.n	800ccd2 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800ccd2:	4b6c      	ldr	r3, [pc, #432]	; (800ce84 <_tx_thread_system_resume+0x1e4>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	4a6a      	ldr	r2, [pc, #424]	; (800ce84 <_tx_thread_system_resume+0x1e4>)
 800ccda:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f040 8083 	bne.w	800cdec <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f000 8097 	beq.w	800ce1e <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d172      	bne.n	800cdde <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd02:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800cd04:	4a60      	ldr	r2, [pc, #384]	; (800ce88 <_tx_thread_system_resume+0x1e8>)
 800cd06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd0c:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800cd0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d154      	bne.n	800cdbe <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800cd14:	495c      	ldr	r1, [pc, #368]	; (800ce88 <_tx_thread_system_resume+0x1e8>)
 800cd16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd2e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd32:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800cd34:	4b55      	ldr	r3, [pc, #340]	; (800ce8c <_tx_thread_system_resume+0x1ec>)
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	4a53      	ldr	r2, [pc, #332]	; (800ce8c <_tx_thread_system_resume+0x1ec>)
 800cd3e:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800cd40:	4b53      	ldr	r3, [pc, #332]	; (800ce90 <_tx_thread_system_resume+0x1f0>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d269      	bcs.n	800ce1e <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800cd4a:	4a51      	ldr	r2, [pc, #324]	; (800ce90 <_tx_thread_system_resume+0x1f0>)
 800cd4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd4e:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800cd50:	4b50      	ldr	r3, [pc, #320]	; (800ce94 <_tx_thread_system_resume+0x1f4>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800cd56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d103      	bne.n	800cd64 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800cd5c:	4a4d      	ldr	r2, [pc, #308]	; (800ce94 <_tx_thread_system_resume+0x1f4>)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6013      	str	r3, [r2, #0]
 800cd62:	e05c      	b.n	800ce1e <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800cd64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d257      	bcs.n	800ce1e <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800cd6e:	4a49      	ldr	r2, [pc, #292]	; (800ce94 <_tx_thread_system_resume+0x1f4>)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6013      	str	r3, [r2, #0]
 800cd74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd76:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7a:	f383 8810 	msr	PRIMASK, r3
}
 800cd7e:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800cd80:	4b40      	ldr	r3, [pc, #256]	; (800ce84 <_tx_thread_system_resume+0x1e4>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800cd86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d174      	bne.n	800ce76 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800cd8c:	4b42      	ldr	r3, [pc, #264]	; (800ce98 <_tx_thread_system_resume+0x1f8>)
 800cd8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd92:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cd94:	f3ef 8305 	mrs	r3, IPSR
 800cd98:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800cd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10c      	bne.n	800cdba <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cda0:	f3ef 8310 	mrs	r3, PRIMASK
 800cda4:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800cda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800cda8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800cdaa:	b662      	cpsie	i
}
 800cdac:	bf00      	nop
 800cdae:	6a3b      	ldr	r3, [r7, #32]
 800cdb0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	f383 8810 	msr	PRIMASK, r3
}
 800cdb8:	bf00      	nop
}
 800cdba:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800cdbc:	e05b      	b.n	800ce76 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800cdbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc2:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800cdc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800cdca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdd4:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cdda:	621a      	str	r2, [r3, #32]
 800cddc:	e01f      	b.n	800ce1e <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2200      	movs	r2, #0
 800cde2:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2203      	movs	r2, #3
 800cde8:	631a      	str	r2, [r3, #48]	; 0x30
 800cdea:	e018      	b.n	800ce1e <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d014      	beq.n	800ce1e <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdf8:	2b02      	cmp	r3, #2
 800cdfa:	d010      	beq.n	800ce1e <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d106      	bne.n	800ce12 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2200      	movs	r2, #0
 800ce08:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	631a      	str	r2, [r3, #48]	; 0x30
 800ce10:	e005      	b.n	800ce1e <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2200      	movs	r2, #0
 800ce16:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2203      	movs	r2, #3
 800ce1c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800ce1e:	4b1f      	ldr	r3, [pc, #124]	; (800ce9c <_tx_thread_system_resume+0x1fc>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce26:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	f383 8810 	msr	PRIMASK, r3
}
 800ce2e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800ce30:	4b18      	ldr	r3, [pc, #96]	; (800ce94 <_tx_thread_system_resume+0x1f4>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d020      	beq.n	800ce7c <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800ce3a:	4b12      	ldr	r3, [pc, #72]	; (800ce84 <_tx_thread_system_resume+0x1e4>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800ce40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d11a      	bne.n	800ce7c <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800ce46:	4b14      	ldr	r3, [pc, #80]	; (800ce98 <_tx_thread_system_resume+0x1f8>)
 800ce48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce4c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce4e:	f3ef 8305 	mrs	r3, IPSR
 800ce52:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ce54:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d10f      	bne.n	800ce7a <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ce5e:	613b      	str	r3, [r7, #16]
    return(posture);
 800ce60:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800ce62:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800ce64:	b662      	cpsie	i
}
 800ce66:	bf00      	nop
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	f383 8810 	msr	PRIMASK, r3
}
 800ce72:	bf00      	nop
}
 800ce74:	e001      	b.n	800ce7a <_tx_thread_system_resume+0x1da>
                                return;
 800ce76:	bf00      	nop
 800ce78:	e000      	b.n	800ce7c <_tx_thread_system_resume+0x1dc>
 800ce7a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800ce7c:	3758      	adds	r7, #88	; 0x58
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	2001491c 	.word	0x2001491c
 800ce88:	2001489c 	.word	0x2001489c
 800ce8c:	20014894 	.word	0x20014894
 800ce90:	20014898 	.word	0x20014898
 800ce94:	20014888 	.word	0x20014888
 800ce98:	e000ed04 	.word	0xe000ed04
 800ce9c:	20014884 	.word	0x20014884

0800cea0 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b09e      	sub	sp, #120	; 0x78
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800cea8:	4b81      	ldr	r3, [pc, #516]	; (800d0b0 <_tx_thread_system_suspend+0x210>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ceae:	f3ef 8310 	mrs	r3, PRIMASK
 800ceb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800ceb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800ceb6:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800ceb8:	b672      	cpsid	i
    return(int_posture);
 800ceba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800cebc:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d112      	bne.n	800ceec <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceca:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800cecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d008      	beq.n	800cee4 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800ced2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ced4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced8:	d004      	beq.n	800cee4 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	334c      	adds	r3, #76	; 0x4c
 800cede:	4618      	mov	r0, r3
 800cee0:	f000 fa86 	bl	800d3f0 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	69db      	ldr	r3, [r3, #28]
 800cee8:	4a72      	ldr	r2, [pc, #456]	; (800d0b4 <_tx_thread_system_suspend+0x214>)
 800ceea:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800ceec:	4b72      	ldr	r3, [pc, #456]	; (800d0b8 <_tx_thread_system_suspend+0x218>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	3b01      	subs	r3, #1
 800cef2:	4a71      	ldr	r2, [pc, #452]	; (800d0b8 <_tx_thread_system_suspend+0x218>)
 800cef4:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	f040 80a6 	bne.w	800d04c <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0a:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a1b      	ldr	r3, [r3, #32]
 800cf10:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800cf12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d015      	beq.n	800cf46 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1e:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800cf20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cf24:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800cf26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cf2a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800cf2c:	4a63      	ldr	r2, [pc, #396]	; (800d0bc <_tx_thread_system_suspend+0x21c>)
 800cf2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d157      	bne.n	800cfea <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800cf3a:	4960      	ldr	r1, [pc, #384]	; (800d0bc <_tx_thread_system_suspend+0x21c>)
 800cf3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cf40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cf44:	e051      	b.n	800cfea <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800cf46:	4a5d      	ldr	r2, [pc, #372]	; (800d0bc <_tx_thread_system_suspend+0x21c>)
 800cf48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf4a:	2100      	movs	r1, #0
 800cf4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800cf50:	2201      	movs	r2, #1
 800cf52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf54:	fa02 f303 	lsl.w	r3, r2, r3
 800cf58:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800cf5a:	4b59      	ldr	r3, [pc, #356]	; (800d0c0 <_tx_thread_system_suspend+0x220>)
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf60:	43db      	mvns	r3, r3
 800cf62:	4013      	ands	r3, r2
 800cf64:	4a56      	ldr	r2, [pc, #344]	; (800d0c0 <_tx_thread_system_suspend+0x220>)
 800cf66:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800cf68:	2300      	movs	r3, #0
 800cf6a:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800cf6c:	4b54      	ldr	r3, [pc, #336]	; (800d0c0 <_tx_thread_system_suspend+0x220>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800cf72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d12b      	bne.n	800cfd0 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cf78:	4b52      	ldr	r3, [pc, #328]	; (800d0c4 <_tx_thread_system_suspend+0x224>)
 800cf7a:	2220      	movs	r2, #32
 800cf7c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800cf7e:	4b52      	ldr	r3, [pc, #328]	; (800d0c8 <_tx_thread_system_suspend+0x228>)
 800cf80:	2200      	movs	r2, #0
 800cf82:	601a      	str	r2, [r3, #0]
 800cf84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf86:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf8a:	f383 8810 	msr	PRIMASK, r3
}
 800cf8e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800cf90:	4b49      	ldr	r3, [pc, #292]	; (800d0b8 <_tx_thread_system_suspend+0x218>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800cf96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f040 8081 	bne.w	800d0a0 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800cf9e:	4b4b      	ldr	r3, [pc, #300]	; (800d0cc <_tx_thread_system_suspend+0x22c>)
 800cfa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfa4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cfa6:	f3ef 8305 	mrs	r3, IPSR
 800cfaa:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800cfac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d10c      	bne.n	800cfcc <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cfb2:	f3ef 8310 	mrs	r3, PRIMASK
 800cfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800cfb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800cfba:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800cfbc:	b662      	cpsie	i
}
 800cfbe:	bf00      	nop
 800cfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc2:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc6:	f383 8810 	msr	PRIMASK, r3
}
 800cfca:	bf00      	nop
}
 800cfcc:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800cfce:	e067      	b.n	800d0a0 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800cfd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfd2:	fa93 f3a3 	rbit	r3, r3
 800cfd6:	65bb      	str	r3, [r7, #88]	; 0x58
 800cfd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cfda:	fab3 f383 	clz	r3, r3
 800cfde:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800cfe0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfe4:	4413      	add	r3, r2
 800cfe6:	4a37      	ldr	r2, [pc, #220]	; (800d0c4 <_tx_thread_system_suspend+0x224>)
 800cfe8:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800cfea:	4b37      	ldr	r3, [pc, #220]	; (800d0c8 <_tx_thread_system_suspend+0x228>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d12b      	bne.n	800d04c <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800cff4:	4b33      	ldr	r3, [pc, #204]	; (800d0c4 <_tx_thread_system_suspend+0x224>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4a30      	ldr	r2, [pc, #192]	; (800d0bc <_tx_thread_system_suspend+0x21c>)
 800cffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cffe:	4a32      	ldr	r2, [pc, #200]	; (800d0c8 <_tx_thread_system_suspend+0x228>)
 800d000:	6013      	str	r3, [r2, #0]
 800d002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d004:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d008:	f383 8810 	msr	PRIMASK, r3
}
 800d00c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d00e:	4b2a      	ldr	r3, [pc, #168]	; (800d0b8 <_tx_thread_system_suspend+0x218>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800d014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d016:	2b00      	cmp	r3, #0
 800d018:	d144      	bne.n	800d0a4 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d01a:	4b2c      	ldr	r3, [pc, #176]	; (800d0cc <_tx_thread_system_suspend+0x22c>)
 800d01c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d020:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d022:	f3ef 8305 	mrs	r3, IPSR
 800d026:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800d028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d10c      	bne.n	800d048 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d02e:	f3ef 8310 	mrs	r3, PRIMASK
 800d032:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d034:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800d036:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d038:	b662      	cpsie	i
}
 800d03a:	bf00      	nop
 800d03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d040:	6a3b      	ldr	r3, [r7, #32]
 800d042:	f383 8810 	msr	PRIMASK, r3
}
 800d046:	bf00      	nop
}
 800d048:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800d04a:	e02b      	b.n	800d0a4 <_tx_thread_system_suspend+0x204>
 800d04c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d04e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	f383 8810 	msr	PRIMASK, r3
}
 800d056:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d058:	4b1b      	ldr	r3, [pc, #108]	; (800d0c8 <_tx_thread_system_suspend+0x228>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d05e:	429a      	cmp	r2, r3
 800d060:	d022      	beq.n	800d0a8 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d062:	4b15      	ldr	r3, [pc, #84]	; (800d0b8 <_tx_thread_system_suspend+0x218>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800d068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d11c      	bne.n	800d0a8 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d06e:	4b17      	ldr	r3, [pc, #92]	; (800d0cc <_tx_thread_system_suspend+0x22c>)
 800d070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d074:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d076:	f3ef 8305 	mrs	r3, IPSR
 800d07a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d07c:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d10c      	bne.n	800d09c <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d082:	f3ef 8310 	mrs	r3, PRIMASK
 800d086:	617b      	str	r3, [r7, #20]
    return(posture);
 800d088:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800d08a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d08c:	b662      	cpsie	i
}
 800d08e:	bf00      	nop
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f383 8810 	msr	PRIMASK, r3
}
 800d09a:	bf00      	nop
}
 800d09c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800d09e:	e003      	b.n	800d0a8 <_tx_thread_system_suspend+0x208>
                return;
 800d0a0:	bf00      	nop
 800d0a2:	e002      	b.n	800d0aa <_tx_thread_system_suspend+0x20a>
            return;
 800d0a4:	bf00      	nop
 800d0a6:	e000      	b.n	800d0aa <_tx_thread_system_suspend+0x20a>
    return;
 800d0a8:	bf00      	nop
}
 800d0aa:	3778      	adds	r7, #120	; 0x78
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	20014884 	.word	0x20014884
 800d0b4:	20014e88 	.word	0x20014e88
 800d0b8:	2001491c 	.word	0x2001491c
 800d0bc:	2001489c 	.word	0x2001489c
 800d0c0:	20014894 	.word	0x20014894
 800d0c4:	20014898 	.word	0x20014898
 800d0c8:	20014888 	.word	0x20014888
 800d0cc:	e000ed04 	.word	0xe000ed04

0800d0d0 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b087      	sub	sp, #28
 800d0d4:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d0d6:	4b21      	ldr	r3, [pc, #132]	; (800d15c <_tx_thread_time_slice+0x8c>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0dc:	f3ef 8310 	mrs	r3, PRIMASK
 800d0e0:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800d0e4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d0e6:	b672      	cpsid	i
    return(int_posture);
 800d0e8:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800d0ea:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d0ec:	4b1c      	ldr	r3, [pc, #112]	; (800d160 <_tx_thread_time_slice+0x90>)
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d024      	beq.n	800d142 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d120      	bne.n	800d142 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	69da      	ldr	r2, [r3, #28]
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	699b      	ldr	r3, [r3, #24]
 800d10c:	4a15      	ldr	r2, [pc, #84]	; (800d164 <_tx_thread_time_slice+0x94>)
 800d10e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	6a1b      	ldr	r3, [r3, #32]
 800d114:	697a      	ldr	r2, [r7, #20]
 800d116:	429a      	cmp	r2, r3
 800d118:	d013      	beq.n	800d142 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d122:	429a      	cmp	r2, r3
 800d124:	d10d      	bne.n	800d142 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d12a:	697a      	ldr	r2, [r7, #20]
 800d12c:	6a12      	ldr	r2, [r2, #32]
 800d12e:	490e      	ldr	r1, [pc, #56]	; (800d168 <_tx_thread_time_slice+0x98>)
 800d130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d134:	4b0d      	ldr	r3, [pc, #52]	; (800d16c <_tx_thread_time_slice+0x9c>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a0b      	ldr	r2, [pc, #44]	; (800d168 <_tx_thread_time_slice+0x98>)
 800d13a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d13e:	4a0c      	ldr	r2, [pc, #48]	; (800d170 <_tx_thread_time_slice+0xa0>)
 800d140:	6013      	str	r3, [r2, #0]
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f383 8810 	msr	PRIMASK, r3
}
 800d14c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800d14e:	bf00      	nop
 800d150:	371c      	adds	r7, #28
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr
 800d15a:	bf00      	nop
 800d15c:	20014884 	.word	0x20014884
 800d160:	2001492c 	.word	0x2001492c
 800d164:	20014e88 	.word	0x20014e88
 800d168:	2001489c 	.word	0x2001489c
 800d16c:	20014898 	.word	0x20014898
 800d170:	20014888 	.word	0x20014888

0800d174 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b08a      	sub	sp, #40	; 0x28
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d180:	f3ef 8310 	mrs	r3, PRIMASK
 800d184:	617b      	str	r3, [r7, #20]
    return(posture);
 800d186:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d188:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d18a:	b672      	cpsid	i
    return(int_posture);
 800d18c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800d18e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800d190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d194:	2b04      	cmp	r3, #4
 800d196:	d10e      	bne.n	800d1b6 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800d198:	4b13      	ldr	r3, [pc, #76]	; (800d1e8 <_tx_thread_timeout+0x74>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	3301      	adds	r3, #1
 800d19e:	4a12      	ldr	r2, [pc, #72]	; (800d1e8 <_tx_thread_timeout+0x74>)
 800d1a0:	6013      	str	r3, [r2, #0]
 800d1a2:	6a3b      	ldr	r3, [r7, #32]
 800d1a4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f383 8810 	msr	PRIMASK, r3
}
 800d1ac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d1ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1b0:	f7ff fd76 	bl	800cca0 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800d1b4:	e013      	b.n	800d1de <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800d1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1ba:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800d1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d1c2:	61bb      	str	r3, [r7, #24]
 800d1c4:	6a3b      	ldr	r3, [r7, #32]
 800d1c6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	f383 8810 	msr	PRIMASK, r3
}
 800d1ce:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d003      	beq.n	800d1de <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	69b9      	ldr	r1, [r7, #24]
 800d1da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1dc:	4798      	blx	r3
}
 800d1de:	bf00      	nop
 800d1e0:	3728      	adds	r7, #40	; 0x28
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	2001491c 	.word	0x2001491c

0800d1ec <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b08a      	sub	sp, #40	; 0x28
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
 800d1f8:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800d1fa:	222c      	movs	r2, #44	; 0x2c
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	68f8      	ldr	r0, [r7, #12]
 800d200:	f001 f87a 	bl	800e2f8 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	68ba      	ldr	r2, [r7, #8]
 800d208:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d20e:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d214:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	683a      	ldr	r2, [r7, #0]
 800d220:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d222:	f3ef 8310 	mrs	r3, PRIMASK
 800d226:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d228:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d22a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d22c:	b672      	cpsid	i
    return(int_posture);
 800d22e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800d230:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	4a1c      	ldr	r2, [pc, #112]	; (800d2a8 <_tx_timer_create+0xbc>)
 800d236:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800d238:	4b1c      	ldr	r3, [pc, #112]	; (800d2ac <_tx_timer_create+0xc0>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d109      	bne.n	800d254 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800d240:	4a1b      	ldr	r2, [pc, #108]	; (800d2b0 <_tx_timer_create+0xc4>)
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	68fa      	ldr	r2, [r7, #12]
 800d24a:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	68fa      	ldr	r2, [r7, #12]
 800d250:	629a      	str	r2, [r3, #40]	; 0x28
 800d252:	e011      	b.n	800d278 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800d254:	4b16      	ldr	r3, [pc, #88]	; (800d2b0 <_tx_timer_create+0xc4>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800d25a:	6a3b      	ldr	r3, [r7, #32]
 800d25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d25e:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800d260:	6a3b      	ldr	r3, [r7, #32]
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	68fa      	ldr	r2, [r7, #12]
 800d26a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	69fa      	ldr	r2, [r7, #28]
 800d270:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6a3a      	ldr	r2, [r7, #32]
 800d276:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800d278:	4b0c      	ldr	r3, [pc, #48]	; (800d2ac <_tx_timer_create+0xc0>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3301      	adds	r3, #1
 800d27e:	4a0b      	ldr	r2, [pc, #44]	; (800d2ac <_tx_timer_create+0xc0>)
 800d280:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800d282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d284:	2b01      	cmp	r3, #1
 800d286:	d104      	bne.n	800d292 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	3308      	adds	r3, #8
 800d28c:	4618      	mov	r0, r3
 800d28e:	f000 f8af 	bl	800d3f0 <_tx_timer_system_activate>
 800d292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d294:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	f383 8810 	msr	PRIMASK, r3
}
 800d29c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800d29e:	2300      	movs	r3, #0
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3728      	adds	r7, #40	; 0x28
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	4154494d 	.word	0x4154494d
 800d2ac:	200149c4 	.word	0x200149c4
 800d2b0:	200149c0 	.word	0x200149c0

0800d2b4 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d2ba:	f3ef 8310 	mrs	r3, PRIMASK
 800d2be:	607b      	str	r3, [r7, #4]
    return(posture);
 800d2c0:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800d2c2:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d2c4:	b672      	cpsid	i
    return(int_posture);
 800d2c6:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800d2c8:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800d2ca:	4b09      	ldr	r3, [pc, #36]	; (800d2f0 <_tx_timer_expiration_process+0x3c>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	4a07      	ldr	r2, [pc, #28]	; (800d2f0 <_tx_timer_expiration_process+0x3c>)
 800d2d2:	6013      	str	r3, [r2, #0]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	f383 8810 	msr	PRIMASK, r3
}
 800d2de:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800d2e0:	4804      	ldr	r0, [pc, #16]	; (800d2f4 <_tx_timer_expiration_process+0x40>)
 800d2e2:	f7ff fcdd 	bl	800cca0 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800d2e6:	bf00      	nop
 800d2e8:	3710      	adds	r7, #16
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	2001491c 	.word	0x2001491c
 800d2f4:	200149cc 	.word	0x200149cc

0800d2f8 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800d2f8:	b590      	push	{r4, r7, lr}
 800d2fa:	b089      	sub	sp, #36	; 0x24
 800d2fc:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800d2fe:	4b28      	ldr	r3, [pc, #160]	; (800d3a0 <_tx_timer_initialize+0xa8>)
 800d300:	2200      	movs	r2, #0
 800d302:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800d304:	4b27      	ldr	r3, [pc, #156]	; (800d3a4 <_tx_timer_initialize+0xac>)
 800d306:	2200      	movs	r2, #0
 800d308:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d30a:	4b27      	ldr	r3, [pc, #156]	; (800d3a8 <_tx_timer_initialize+0xb0>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800d310:	4b26      	ldr	r3, [pc, #152]	; (800d3ac <_tx_timer_initialize+0xb4>)
 800d312:	2200      	movs	r2, #0
 800d314:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800d316:	4b26      	ldr	r3, [pc, #152]	; (800d3b0 <_tx_timer_initialize+0xb8>)
 800d318:	2200      	movs	r2, #0
 800d31a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800d31c:	2280      	movs	r2, #128	; 0x80
 800d31e:	2100      	movs	r1, #0
 800d320:	4824      	ldr	r0, [pc, #144]	; (800d3b4 <_tx_timer_initialize+0xbc>)
 800d322:	f000 ffe9 	bl	800e2f8 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800d326:	4b24      	ldr	r3, [pc, #144]	; (800d3b8 <_tx_timer_initialize+0xc0>)
 800d328:	4a22      	ldr	r2, [pc, #136]	; (800d3b4 <_tx_timer_initialize+0xbc>)
 800d32a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800d32c:	4b23      	ldr	r3, [pc, #140]	; (800d3bc <_tx_timer_initialize+0xc4>)
 800d32e:	4a21      	ldr	r2, [pc, #132]	; (800d3b4 <_tx_timer_initialize+0xbc>)
 800d330:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800d332:	4b23      	ldr	r3, [pc, #140]	; (800d3c0 <_tx_timer_initialize+0xc8>)
 800d334:	4a23      	ldr	r2, [pc, #140]	; (800d3c4 <_tx_timer_initialize+0xcc>)
 800d336:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800d338:	4b21      	ldr	r3, [pc, #132]	; (800d3c0 <_tx_timer_initialize+0xc8>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	3304      	adds	r3, #4
 800d33e:	4a20      	ldr	r2, [pc, #128]	; (800d3c0 <_tx_timer_initialize+0xc8>)
 800d340:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800d342:	4b21      	ldr	r3, [pc, #132]	; (800d3c8 <_tx_timer_initialize+0xd0>)
 800d344:	4a21      	ldr	r2, [pc, #132]	; (800d3cc <_tx_timer_initialize+0xd4>)
 800d346:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800d348:	4b21      	ldr	r3, [pc, #132]	; (800d3d0 <_tx_timer_initialize+0xd8>)
 800d34a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d34e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800d350:	4b20      	ldr	r3, [pc, #128]	; (800d3d4 <_tx_timer_initialize+0xdc>)
 800d352:	2200      	movs	r2, #0
 800d354:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800d356:	4b1c      	ldr	r3, [pc, #112]	; (800d3c8 <_tx_timer_initialize+0xd0>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a1d      	ldr	r2, [pc, #116]	; (800d3d0 <_tx_timer_initialize+0xd8>)
 800d35c:	6812      	ldr	r2, [r2, #0]
 800d35e:	491d      	ldr	r1, [pc, #116]	; (800d3d4 <_tx_timer_initialize+0xdc>)
 800d360:	6809      	ldr	r1, [r1, #0]
 800d362:	481c      	ldr	r0, [pc, #112]	; (800d3d4 <_tx_timer_initialize+0xdc>)
 800d364:	6800      	ldr	r0, [r0, #0]
 800d366:	2400      	movs	r4, #0
 800d368:	9405      	str	r4, [sp, #20]
 800d36a:	2400      	movs	r4, #0
 800d36c:	9404      	str	r4, [sp, #16]
 800d36e:	9003      	str	r0, [sp, #12]
 800d370:	9102      	str	r1, [sp, #8]
 800d372:	9201      	str	r2, [sp, #4]
 800d374:	9300      	str	r3, [sp, #0]
 800d376:	4b18      	ldr	r3, [pc, #96]	; (800d3d8 <_tx_timer_initialize+0xe0>)
 800d378:	4a18      	ldr	r2, [pc, #96]	; (800d3dc <_tx_timer_initialize+0xe4>)
 800d37a:	4919      	ldr	r1, [pc, #100]	; (800d3e0 <_tx_timer_initialize+0xe8>)
 800d37c:	4819      	ldr	r0, [pc, #100]	; (800d3e4 <_tx_timer_initialize+0xec>)
 800d37e:	f7ff f9c5 	bl	800c70c <_tx_thread_create>
 800d382:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1e5      	bne.n	800d356 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800d38a:	4b17      	ldr	r3, [pc, #92]	; (800d3e8 <_tx_timer_initialize+0xf0>)
 800d38c:	2200      	movs	r2, #0
 800d38e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800d390:	4b16      	ldr	r3, [pc, #88]	; (800d3ec <_tx_timer_initialize+0xf4>)
 800d392:	2200      	movs	r2, #0
 800d394:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800d396:	bf00      	nop
 800d398:	370c      	adds	r7, #12
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd90      	pop	{r4, r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	20014928 	.word	0x20014928
 800d3a4:	20014e88 	.word	0x20014e88
 800d3a8:	2001492c 	.word	0x2001492c
 800d3ac:	200149bc 	.word	0x200149bc
 800d3b0:	200149c8 	.word	0x200149c8
 800d3b4:	20014930 	.word	0x20014930
 800d3b8:	200149b0 	.word	0x200149b0
 800d3bc:	200149b8 	.word	0x200149b8
 800d3c0:	200149b4 	.word	0x200149b4
 800d3c4:	200149ac 	.word	0x200149ac
 800d3c8:	20014a7c 	.word	0x20014a7c
 800d3cc:	20014a88 	.word	0x20014a88
 800d3d0:	20014a80 	.word	0x20014a80
 800d3d4:	20014a84 	.word	0x20014a84
 800d3d8:	4154494d 	.word	0x4154494d
 800d3dc:	0800d525 	.word	0x0800d525
 800d3e0:	0800efa0 	.word	0x0800efa0
 800d3e4:	200149cc 	.word	0x200149cc
 800d3e8:	200149c0 	.word	0x200149c0
 800d3ec:	200149c4 	.word	0x200149c4

0800d3f0 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b089      	sub	sp, #36	; 0x24
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d04a      	beq.n	800d49a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d40a:	d046      	beq.n	800d49a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	699b      	ldr	r3, [r3, #24]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d142      	bne.n	800d49a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	2b20      	cmp	r3, #32
 800d418:	d902      	bls.n	800d420 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800d41a:	231f      	movs	r3, #31
 800d41c:	61bb      	str	r3, [r7, #24]
 800d41e:	e002      	b.n	800d426 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	3b01      	subs	r3, #1
 800d424:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800d426:	4b20      	ldr	r3, [pc, #128]	; (800d4a8 <_tx_timer_system_activate+0xb8>)
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	4413      	add	r3, r2
 800d430:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800d432:	4b1e      	ldr	r3, [pc, #120]	; (800d4ac <_tx_timer_system_activate+0xbc>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	69fa      	ldr	r2, [r7, #28]
 800d438:	429a      	cmp	r2, r3
 800d43a:	d30b      	bcc.n	800d454 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800d43c:	4b1b      	ldr	r3, [pc, #108]	; (800d4ac <_tx_timer_system_activate+0xbc>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	69fa      	ldr	r2, [r7, #28]
 800d442:	1ad3      	subs	r3, r2, r3
 800d444:	109b      	asrs	r3, r3, #2
 800d446:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800d448:	4b19      	ldr	r3, [pc, #100]	; (800d4b0 <_tx_timer_system_activate+0xc0>)
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	009b      	lsls	r3, r3, #2
 800d450:	4413      	add	r3, r2
 800d452:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800d454:	69fb      	ldr	r3, [r7, #28]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d109      	bne.n	800d470 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	687a      	ldr	r2, [r7, #4]
 800d46c:	601a      	str	r2, [r3, #0]
 800d46e:	e011      	b.n	800d494 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800d470:	69fb      	ldr	r3, [r7, #28]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	695b      	ldr	r3, [r3, #20]
 800d47a:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	68fa      	ldr	r2, [r7, #12]
 800d48c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	68ba      	ldr	r2, [r7, #8]
 800d492:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	69fa      	ldr	r2, [r7, #28]
 800d498:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800d49a:	bf00      	nop
 800d49c:	3724      	adds	r7, #36	; 0x24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	200149b8 	.word	0x200149b8
 800d4ac:	200149b4 	.word	0x200149b4
 800d4b0:	200149b0 	.word	0x200149b0

0800d4b4 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b087      	sub	sp, #28
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	699b      	ldr	r3, [r3, #24]
 800d4c0:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d026      	beq.n	800d516 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	691b      	ldr	r3, [r3, #16]
 800d4cc:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d108      	bne.n	800d4e8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d117      	bne.n	800d510 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	601a      	str	r2, [r3, #0]
 800d4e6:	e013      	b.n	800d510 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	695b      	ldr	r3, [r3, #20]
 800d4ec:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	68fa      	ldr	r2, [r7, #12]
 800d4f2:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	693a      	ldr	r2, [r7, #16]
 800d4f8:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	429a      	cmp	r2, r3
 800d502:	d105      	bne.n	800d510 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	697a      	ldr	r2, [r7, #20]
 800d508:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	693a      	ldr	r2, [r7, #16]
 800d50e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	619a      	str	r2, [r3, #24]
    }
}
 800d516:	bf00      	nop
 800d518:	371c      	adds	r7, #28
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
	...

0800d524 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b098      	sub	sp, #96	; 0x60
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800d52c:	2300      	movs	r3, #0
 800d52e:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	4a73      	ldr	r2, [pc, #460]	; (800d700 <_tx_timer_thread_entry+0x1dc>)
 800d534:	4293      	cmp	r3, r2
 800d536:	f040 80de 	bne.w	800d6f6 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d53a:	f3ef 8310 	mrs	r3, PRIMASK
 800d53e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800d540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800d542:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d544:	b672      	cpsid	i
    return(int_posture);
 800d546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800d548:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800d54a:	4b6e      	ldr	r3, [pc, #440]	; (800d704 <_tx_timer_thread_entry+0x1e0>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d003      	beq.n	800d560 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f107 020c 	add.w	r2, r7, #12
 800d55e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800d560:	4b68      	ldr	r3, [pc, #416]	; (800d704 <_tx_timer_thread_entry+0x1e0>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2200      	movs	r2, #0
 800d566:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800d568:	4b66      	ldr	r3, [pc, #408]	; (800d704 <_tx_timer_thread_entry+0x1e0>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	3304      	adds	r3, #4
 800d56e:	4a65      	ldr	r2, [pc, #404]	; (800d704 <_tx_timer_thread_entry+0x1e0>)
 800d570:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800d572:	4b64      	ldr	r3, [pc, #400]	; (800d704 <_tx_timer_thread_entry+0x1e0>)
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	4b64      	ldr	r3, [pc, #400]	; (800d708 <_tx_timer_thread_entry+0x1e4>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d103      	bne.n	800d586 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800d57e:	4b63      	ldr	r3, [pc, #396]	; (800d70c <_tx_timer_thread_entry+0x1e8>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4a60      	ldr	r2, [pc, #384]	; (800d704 <_tx_timer_thread_entry+0x1e0>)
 800d584:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800d586:	4b62      	ldr	r3, [pc, #392]	; (800d710 <_tx_timer_thread_entry+0x1ec>)
 800d588:	2200      	movs	r2, #0
 800d58a:	601a      	str	r2, [r3, #0]
 800d58c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d58e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d592:	f383 8810 	msr	PRIMASK, r3
}
 800d596:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d598:	f3ef 8310 	mrs	r3, PRIMASK
 800d59c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800d59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800d5a0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800d5a2:	b672      	cpsid	i
    return(int_posture);
 800d5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800d5a6:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800d5a8:	e07f      	b.n	800d6aa <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800d5b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d5ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d102      	bne.n	800d5c6 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	60fb      	str	r3, [r7, #12]
 800d5c4:	e00e      	b.n	800d5e4 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800d5c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5c8:	695b      	ldr	r3, [r3, #20]
 800d5ca:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800d5cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5d0:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800d5d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5d6:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800d5d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5da:	f107 020c 	add.w	r2, r7, #12
 800d5de:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800d5e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5e2:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800d5e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b20      	cmp	r3, #32
 800d5ea:	d911      	bls.n	800d610 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800d5ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800d5f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5f6:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800d5fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5fe:	f107 0208 	add.w	r2, r7, #8
 800d602:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800d604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d608:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800d60a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d60c:	60bb      	str	r3, [r7, #8]
 800d60e:	e01a      	b.n	800d646 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800d610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d612:	689b      	ldr	r3, [r3, #8]
 800d614:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800d616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800d61c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d61e:	685a      	ldr	r2, [r3, #4]
 800d620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d622:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800d624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d009      	beq.n	800d640 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800d62c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d62e:	f107 0208 	add.w	r2, r7, #8
 800d632:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800d634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d636:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d638:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800d63a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d63c:	60bb      	str	r3, [r7, #8]
 800d63e:	e002      	b.n	800d646 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800d640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d642:	2200      	movs	r2, #0
 800d644:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800d646:	4a33      	ldr	r2, [pc, #204]	; (800d714 <_tx_timer_thread_entry+0x1f0>)
 800d648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d64a:	6013      	str	r3, [r2, #0]
 800d64c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d64e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d652:	f383 8810 	msr	PRIMASK, r3
}
 800d656:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800d658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d002      	beq.n	800d664 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800d65e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d660:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d662:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d664:	f3ef 8310 	mrs	r3, PRIMASK
 800d668:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d66c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d66e:	b672      	cpsid	i
    return(int_posture);
 800d670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800d672:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800d674:	4b27      	ldr	r3, [pc, #156]	; (800d714 <_tx_timer_thread_entry+0x1f0>)
 800d676:	2200      	movs	r2, #0
 800d678:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d67e:	429a      	cmp	r2, r3
 800d680:	d105      	bne.n	800d68e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800d682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d684:	2200      	movs	r2, #0
 800d686:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800d688:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d68a:	f7ff feb1 	bl	800d3f0 <_tx_timer_system_activate>
 800d68e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d690:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	f383 8810 	msr	PRIMASK, r3
}
 800d698:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d69a:	f3ef 8310 	mrs	r3, PRIMASK
 800d69e:	623b      	str	r3, [r7, #32]
    return(posture);
 800d6a0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d6a2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d6a4:	b672      	cpsid	i
    return(int_posture);
 800d6a6:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800d6a8:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f47f af7c 	bne.w	800d5aa <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800d6b2:	4b17      	ldr	r3, [pc, #92]	; (800d710 <_tx_timer_thread_entry+0x1ec>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d116      	bne.n	800d6e8 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800d6ba:	4b17      	ldr	r3, [pc, #92]	; (800d718 <_tx_timer_thread_entry+0x1f4>)
 800d6bc:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800d6be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6c0:	2203      	movs	r2, #3
 800d6c2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d6c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800d6ca:	4b14      	ldr	r3, [pc, #80]	; (800d71c <_tx_timer_thread_entry+0x1f8>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	4a12      	ldr	r2, [pc, #72]	; (800d71c <_tx_timer_thread_entry+0x1f8>)
 800d6d2:	6013      	str	r3, [r2, #0]
 800d6d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6d6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	f383 8810 	msr	PRIMASK, r3
}
 800d6de:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800d6e0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d6e2:	f7ff fbdd 	bl	800cea0 <_tx_thread_system_suspend>
 800d6e6:	e728      	b.n	800d53a <_tx_timer_thread_entry+0x16>
 800d6e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6ea:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	f383 8810 	msr	PRIMASK, r3
}
 800d6f2:	bf00      	nop
            TX_DISABLE
 800d6f4:	e721      	b.n	800d53a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800d6f6:	bf00      	nop
 800d6f8:	3760      	adds	r7, #96	; 0x60
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	4154494d 	.word	0x4154494d
 800d704:	200149b8 	.word	0x200149b8
 800d708:	200149b4 	.word	0x200149b4
 800d70c:	200149b0 	.word	0x200149b0
 800d710:	200149bc 	.word	0x200149bc
 800d714:	200149c8 	.word	0x200149c8
 800d718:	200149cc 	.word	0x200149cc
 800d71c:	2001491c 	.word	0x2001491c

0800d720 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b08a      	sub	sp, #40	; 0x28
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	607a      	str	r2, [r7, #4]
 800d72c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d72e:	2300      	movs	r3, #0
 800d730:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d102      	bne.n	800d73e <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800d738:	2302      	movs	r3, #2
 800d73a:	627b      	str	r3, [r7, #36]	; 0x24
 800d73c:	e029      	b.n	800d792 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4a2d      	ldr	r2, [pc, #180]	; (800d7f8 <_txe_byte_allocate+0xd8>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d002      	beq.n	800d74e <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800d748:	2302      	movs	r3, #2
 800d74a:	627b      	str	r3, [r7, #36]	; 0x24
 800d74c:	e021      	b.n	800d792 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d102      	bne.n	800d75a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800d754:	2303      	movs	r3, #3
 800d756:	627b      	str	r3, [r7, #36]	; 0x24
 800d758:	e01b      	b.n	800d792 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d102      	bne.n	800d766 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800d760:	2305      	movs	r3, #5
 800d762:	627b      	str	r3, [r7, #36]	; 0x24
 800d764:	e015      	b.n	800d792 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	69db      	ldr	r3, [r3, #28]
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d902      	bls.n	800d776 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800d770:	2305      	movs	r3, #5
 800d772:	627b      	str	r3, [r7, #36]	; 0x24
 800d774:	e00d      	b.n	800d792 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00a      	beq.n	800d792 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d77c:	f3ef 8305 	mrs	r3, IPSR
 800d780:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d782:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d784:	4b1d      	ldr	r3, [pc, #116]	; (800d7fc <_txe_byte_allocate+0xdc>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4313      	orrs	r3, r2
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d001      	beq.n	800d792 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800d78e:	2304      	movs	r3, #4
 800d790:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800d792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d794:	2b00      	cmp	r3, #0
 800d796:	d108      	bne.n	800d7aa <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800d798:	4b19      	ldr	r3, [pc, #100]	; (800d800 <_txe_byte_allocate+0xe0>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800d79e:	6a3b      	ldr	r3, [r7, #32]
 800d7a0:	4a18      	ldr	r2, [pc, #96]	; (800d804 <_txe_byte_allocate+0xe4>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d101      	bne.n	800d7aa <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800d7a6:	2313      	movs	r3, #19
 800d7a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800d7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d114      	bne.n	800d7da <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d7b0:	f3ef 8305 	mrs	r3, IPSR
 800d7b4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d7b6:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d7b8:	4b10      	ldr	r3, [pc, #64]	; (800d7fc <_txe_byte_allocate+0xdc>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4313      	orrs	r3, r2
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d00b      	beq.n	800d7da <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d7c2:	f3ef 8305 	mrs	r3, IPSR
 800d7c6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d7c8:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d7ca:	4b0c      	ldr	r3, [pc, #48]	; (800d7fc <_txe_byte_allocate+0xdc>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d7d4:	d201      	bcs.n	800d7da <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d7d6:	2313      	movs	r3, #19
 800d7d8:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d106      	bne.n	800d7ee <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	68b9      	ldr	r1, [r7, #8]
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f7fd fab6 	bl	800ad58 <_tx_byte_allocate>
 800d7ec:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800d7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3728      	adds	r7, #40	; 0x28
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	42595445 	.word	0x42595445
 800d7fc:	20000088 	.word	0x20000088
 800d800:	20014884 	.word	0x20014884
 800d804:	200149cc 	.word	0x200149cc

0800d808 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b092      	sub	sp, #72	; 0x48
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	607a      	str	r2, [r7, #4]
 800d814:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d816:	2300      	movs	r3, #0
 800d818:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d102      	bne.n	800d826 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800d820:	2302      	movs	r3, #2
 800d822:	647b      	str	r3, [r7, #68]	; 0x44
 800d824:	e075      	b.n	800d912 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800d826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d828:	2b34      	cmp	r3, #52	; 0x34
 800d82a:	d002      	beq.n	800d832 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800d82c:	2302      	movs	r3, #2
 800d82e:	647b      	str	r3, [r7, #68]	; 0x44
 800d830:	e06f      	b.n	800d912 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d832:	f3ef 8310 	mrs	r3, PRIMASK
 800d836:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800d838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800d83a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d83c:	b672      	cpsid	i
    return(int_posture);
 800d83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d840:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d842:	4b3b      	ldr	r3, [pc, #236]	; (800d930 <_txe_byte_pool_create+0x128>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	3301      	adds	r3, #1
 800d848:	4a39      	ldr	r2, [pc, #228]	; (800d930 <_txe_byte_pool_create+0x128>)
 800d84a:	6013      	str	r3, [r2, #0]
 800d84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d852:	f383 8810 	msr	PRIMASK, r3
}
 800d856:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800d858:	4b36      	ldr	r3, [pc, #216]	; (800d934 <_txe_byte_pool_create+0x12c>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800d85e:	2300      	movs	r3, #0
 800d860:	643b      	str	r3, [r7, #64]	; 0x40
 800d862:	e009      	b.n	800d878 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800d864:	68fa      	ldr	r2, [r7, #12]
 800d866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d868:	429a      	cmp	r2, r3
 800d86a:	d00b      	beq.n	800d884 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800d86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d870:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800d872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d874:	3301      	adds	r3, #1
 800d876:	643b      	str	r3, [r7, #64]	; 0x40
 800d878:	4b2f      	ldr	r3, [pc, #188]	; (800d938 <_txe_byte_pool_create+0x130>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d87e:	429a      	cmp	r2, r3
 800d880:	d3f0      	bcc.n	800d864 <_txe_byte_pool_create+0x5c>
 800d882:	e000      	b.n	800d886 <_txe_byte_pool_create+0x7e>
                break;
 800d884:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d886:	f3ef 8310 	mrs	r3, PRIMASK
 800d88a:	623b      	str	r3, [r7, #32]
    return(posture);
 800d88c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d88e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d890:	b672      	cpsid	i
    return(int_posture);
 800d892:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d894:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d896:	4b26      	ldr	r3, [pc, #152]	; (800d930 <_txe_byte_pool_create+0x128>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	3b01      	subs	r3, #1
 800d89c:	4a24      	ldr	r2, [pc, #144]	; (800d930 <_txe_byte_pool_create+0x128>)
 800d89e:	6013      	str	r3, [r2, #0]
 800d8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a6:	f383 8810 	msr	PRIMASK, r3
}
 800d8aa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d8ac:	f7ff f9be 	bl	800cc2c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d102      	bne.n	800d8be <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800d8b8:	2302      	movs	r3, #2
 800d8ba:	647b      	str	r3, [r7, #68]	; 0x44
 800d8bc:	e029      	b.n	800d912 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d102      	bne.n	800d8ca <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800d8c4:	2303      	movs	r3, #3
 800d8c6:	647b      	str	r3, [r7, #68]	; 0x44
 800d8c8:	e023      	b.n	800d912 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	2b63      	cmp	r3, #99	; 0x63
 800d8ce:	d802      	bhi.n	800d8d6 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800d8d0:	2305      	movs	r3, #5
 800d8d2:	647b      	str	r3, [r7, #68]	; 0x44
 800d8d4:	e01d      	b.n	800d912 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800d8d6:	4b19      	ldr	r3, [pc, #100]	; (800d93c <_txe_byte_pool_create+0x134>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800d8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8de:	4a18      	ldr	r2, [pc, #96]	; (800d940 <_txe_byte_pool_create+0x138>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d101      	bne.n	800d8e8 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d8e4:	2313      	movs	r3, #19
 800d8e6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d8e8:	f3ef 8305 	mrs	r3, IPSR
 800d8ec:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d8ee:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d8f0:	4b14      	ldr	r3, [pc, #80]	; (800d944 <_txe_byte_pool_create+0x13c>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d00b      	beq.n	800d912 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d8fa:	f3ef 8305 	mrs	r3, IPSR
 800d8fe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d900:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d902:	4b10      	ldr	r3, [pc, #64]	; (800d944 <_txe_byte_pool_create+0x13c>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4313      	orrs	r3, r2
 800d908:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d90c:	d201      	bcs.n	800d912 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800d90e:	2313      	movs	r3, #19
 800d910:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d914:	2b00      	cmp	r3, #0
 800d916:	d106      	bne.n	800d926 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	68b9      	ldr	r1, [r7, #8]
 800d91e:	68f8      	ldr	r0, [r7, #12]
 800d920:	f7fd fb5c 	bl	800afdc <_tx_byte_pool_create>
 800d924:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800d926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3748      	adds	r7, #72	; 0x48
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	2001491c 	.word	0x2001491c
 800d934:	20014874 	.word	0x20014874
 800d938:	20014878 	.word	0x20014878
 800d93c:	20014884 	.word	0x20014884
 800d940:	200149cc 	.word	0x200149cc
 800d944:	20000088 	.word	0x20000088

0800d948 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b09a      	sub	sp, #104	; 0x68
 800d94c:	af06      	add	r7, sp, #24
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	60b9      	str	r1, [r7, #8]
 800d952:	607a      	str	r2, [r7, #4]
 800d954:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d956:	2300      	movs	r3, #0
 800d958:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d102      	bne.n	800d966 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d960:	230e      	movs	r3, #14
 800d962:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d964:	e0bb      	b.n	800dade <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800d966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d968:	2bb0      	cmp	r3, #176	; 0xb0
 800d96a:	d002      	beq.n	800d972 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d96c:	230e      	movs	r3, #14
 800d96e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d970:	e0b5      	b.n	800dade <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d972:	f3ef 8310 	mrs	r3, PRIMASK
 800d976:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d978:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d97a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d97c:	b672      	cpsid	i
    return(int_posture);
 800d97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d980:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d982:	4b64      	ldr	r3, [pc, #400]	; (800db14 <_txe_thread_create+0x1cc>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	3301      	adds	r3, #1
 800d988:	4a62      	ldr	r2, [pc, #392]	; (800db14 <_txe_thread_create+0x1cc>)
 800d98a:	6013      	str	r3, [r2, #0]
 800d98c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d98e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d992:	f383 8810 	msr	PRIMASK, r3
}
 800d996:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800d998:	2300      	movs	r3, #0
 800d99a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800d99c:	4b5e      	ldr	r3, [pc, #376]	; (800db18 <_txe_thread_create+0x1d0>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800d9a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9a4:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800d9a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9a8:	3b01      	subs	r3, #1
 800d9aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9ac:	4413      	add	r3, r2
 800d9ae:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800d9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b2:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	647b      	str	r3, [r7, #68]	; 0x44
 800d9b8:	e02b      	b.n	800da12 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800d9ba:	68fa      	ldr	r2, [r7, #12]
 800d9bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d101      	bne.n	800d9c6 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800d9c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d028      	beq.n	800da1e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800d9cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9ce:	68db      	ldr	r3, [r3, #12]
 800d9d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d308      	bcc.n	800d9e8 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800d9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9d8:	691b      	ldr	r3, [r3, #16]
 800d9da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d203      	bcs.n	800d9e8 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800d9e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9ea:	68db      	ldr	r3, [r3, #12]
 800d9ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d308      	bcc.n	800da04 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800d9f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9f4:	691b      	ldr	r3, [r3, #16]
 800d9f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d203      	bcs.n	800da04 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800da00:	2301      	movs	r3, #1
 800da02:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800da04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da0a:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800da0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da0e:	3301      	adds	r3, #1
 800da10:	647b      	str	r3, [r7, #68]	; 0x44
 800da12:	4b42      	ldr	r3, [pc, #264]	; (800db1c <_txe_thread_create+0x1d4>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da18:	429a      	cmp	r2, r3
 800da1a:	d3ce      	bcc.n	800d9ba <_txe_thread_create+0x72>
 800da1c:	e000      	b.n	800da20 <_txe_thread_create+0xd8>
                break;
 800da1e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da20:	f3ef 8310 	mrs	r3, PRIMASK
 800da24:	61fb      	str	r3, [r7, #28]
    return(posture);
 800da26:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800da28:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800da2a:	b672      	cpsid	i
    return(int_posture);
 800da2c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800da2e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800da30:	4b38      	ldr	r3, [pc, #224]	; (800db14 <_txe_thread_create+0x1cc>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	3b01      	subs	r3, #1
 800da36:	4a37      	ldr	r2, [pc, #220]	; (800db14 <_txe_thread_create+0x1cc>)
 800da38:	6013      	str	r3, [r2, #0]
 800da3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da3c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da3e:	6a3b      	ldr	r3, [r7, #32]
 800da40:	f383 8810 	msr	PRIMASK, r3
}
 800da44:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800da46:	f7ff f8f1 	bl	800cc2c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800da4a:	68fa      	ldr	r2, [r7, #12]
 800da4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da4e:	429a      	cmp	r2, r3
 800da50:	d102      	bne.n	800da58 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800da52:	230e      	movs	r3, #14
 800da54:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da56:	e042      	b.n	800dade <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800da58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d102      	bne.n	800da64 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800da5e:	2303      	movs	r3, #3
 800da60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da62:	e03c      	b.n	800dade <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d102      	bne.n	800da70 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800da6a:	2303      	movs	r3, #3
 800da6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da6e:	e036      	b.n	800dade <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800da70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da72:	2bc7      	cmp	r3, #199	; 0xc7
 800da74:	d802      	bhi.n	800da7c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800da76:	2305      	movs	r3, #5
 800da78:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da7a:	e030      	b.n	800dade <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800da7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da7e:	2b1f      	cmp	r3, #31
 800da80:	d902      	bls.n	800da88 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800da82:	230f      	movs	r3, #15
 800da84:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da86:	e02a      	b.n	800dade <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800da88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800da8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d902      	bls.n	800da96 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800da90:	2318      	movs	r3, #24
 800da92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da94:	e023      	b.n	800dade <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800da96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d902      	bls.n	800daa2 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800da9c:	2310      	movs	r3, #16
 800da9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800daa0:	e01d      	b.n	800dade <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800daa2:	4b1f      	ldr	r3, [pc, #124]	; (800db20 <_txe_thread_create+0x1d8>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800daa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daaa:	4a1e      	ldr	r2, [pc, #120]	; (800db24 <_txe_thread_create+0x1dc>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d101      	bne.n	800dab4 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800dab0:	2313      	movs	r3, #19
 800dab2:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dab4:	f3ef 8305 	mrs	r3, IPSR
 800dab8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800daba:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800dabc:	4b1a      	ldr	r3, [pc, #104]	; (800db28 <_txe_thread_create+0x1e0>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4313      	orrs	r3, r2
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00b      	beq.n	800dade <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dac6:	f3ef 8305 	mrs	r3, IPSR
 800daca:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800dacc:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800dace:	4b16      	ldr	r3, [pc, #88]	; (800db28 <_txe_thread_create+0x1e0>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4313      	orrs	r3, r2
 800dad4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800dad8:	d201      	bcs.n	800dade <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800dada:	2313      	movs	r3, #19
 800dadc:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800dade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d112      	bne.n	800db0a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800dae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dae6:	9305      	str	r3, [sp, #20]
 800dae8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800daea:	9304      	str	r3, [sp, #16]
 800daec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800daee:	9303      	str	r3, [sp, #12]
 800daf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800daf2:	9302      	str	r3, [sp, #8]
 800daf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800daf6:	9301      	str	r3, [sp, #4]
 800daf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dafa:	9300      	str	r3, [sp, #0]
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	68b9      	ldr	r1, [r7, #8]
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	f7fe fe02 	bl	800c70c <_tx_thread_create>
 800db08:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800db0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3750      	adds	r7, #80	; 0x50
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	2001491c 	.word	0x2001491c
 800db18:	2001488c 	.word	0x2001488c
 800db1c:	20014890 	.word	0x20014890
 800db20:	20014884 	.word	0x20014884
 800db24:	200149cc 	.word	0x200149cc
 800db28:	20000088 	.word	0x20000088

0800db2c <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b08e      	sub	sp, #56	; 0x38
 800db30:	af08      	add	r7, sp, #32
 800db32:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 800db34:	2300      	movs	r3, #0
 800db36:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	613b      	str	r3, [r7, #16]

   /* USER CODE BEGIN App_NetXDuo_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_NetXDuo_MEM_POOL */
  /* USER CODE BEGIN 0 */
  printf("Application started...\n");
 800db3c:	4850      	ldr	r0, [pc, #320]	; (800dc80 <MX_NetXDuo_Init+0x154>)
 800db3e:	f000 fafb 	bl	800e138 <puts>
  /* USER CODE END 0 */

  /* Initialize the NetXDuo system. */
  CHAR *pointer;
  nx_system_initialize();
 800db42:	f7fb fa23 	bl	8008f8c <_nx_system_initialize>

    /* Allocate the memory for packet_pool.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, NX_APP_PACKET_POOL_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800db46:	f107 010c 	add.w	r1, r7, #12
 800db4a:	2300      	movs	r3, #0
 800db4c:	f641 722c 	movw	r2, #7980	; 0x1f2c
 800db50:	6938      	ldr	r0, [r7, #16]
 800db52:	f7ff fde5 	bl	800d720 <_txe_byte_allocate>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d001      	beq.n	800db60 <MX_NetXDuo_Init+0x34>
  {
    return TX_POOL_ERROR;
 800db5c:	2302      	movs	r3, #2
 800db5e:	e08a      	b.n	800dc76 <MX_NetXDuo_Init+0x14a>
  }

  /* Create the Packet pool to be used for packet allocation,
   * If extra NX_PACKET are to be used the NX_APP_PACKET_POOL_SIZE should be increased
   */
  ret = nx_packet_pool_create(&NxAppPool, "NetXDuo App Pool", DEFAULT_PAYLOAD_SIZE, pointer, NX_APP_PACKET_POOL_SIZE);
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	223c      	movs	r2, #60	; 0x3c
 800db64:	9201      	str	r2, [sp, #4]
 800db66:	f641 722c 	movw	r2, #7980	; 0x1f2c
 800db6a:	9200      	str	r2, [sp, #0]
 800db6c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800db70:	4944      	ldr	r1, [pc, #272]	; (800dc84 <MX_NetXDuo_Init+0x158>)
 800db72:	4845      	ldr	r0, [pc, #276]	; (800dc88 <MX_NetXDuo_Init+0x15c>)
 800db74:	f7fc fd64 	bl	800a640 <_nxe_packet_pool_create>
 800db78:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d001      	beq.n	800db84 <MX_NetXDuo_Init+0x58>
  {
    return NX_POOL_ERROR;
 800db80:	2306      	movs	r3, #6
 800db82:	e078      	b.n	800dc76 <MX_NetXDuo_Init+0x14a>
  }

    /* Allocate the memory for Ip_Instance */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, Nx_IP_INSTANCE_THREAD_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800db84:	f107 010c 	add.w	r1, r7, #12
 800db88:	2300      	movs	r3, #0
 800db8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db8e:	6938      	ldr	r0, [r7, #16]
 800db90:	f7ff fdc6 	bl	800d720 <_txe_byte_allocate>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d001      	beq.n	800db9e <MX_NetXDuo_Init+0x72>
  {
    return TX_POOL_ERROR;
 800db9a:	2302      	movs	r3, #2
 800db9c:	e06b      	b.n	800dc76 <MX_NetXDuo_Init+0x14a>
  }

   /* Create the main NX_IP instance */
  ret = nx_ip_create(&NetXDuoEthIpInstance, "NetX Ip instance", NX_APP_DEFAULT_IP_ADDRESS, NX_APP_DEFAULT_NET_MASK, &NxAppPool, nx_stm32_eth_driver,
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f44f 62f9 	mov.w	r2, #1992	; 0x7c8
 800dba4:	9205      	str	r2, [sp, #20]
 800dba6:	220a      	movs	r2, #10
 800dba8:	9204      	str	r2, [sp, #16]
 800dbaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dbae:	9203      	str	r2, [sp, #12]
 800dbb0:	9302      	str	r3, [sp, #8]
 800dbb2:	4b36      	ldr	r3, [pc, #216]	; (800dc8c <MX_NetXDuo_Init+0x160>)
 800dbb4:	9301      	str	r3, [sp, #4]
 800dbb6:	4b34      	ldr	r3, [pc, #208]	; (800dc88 <MX_NetXDuo_Init+0x15c>)
 800dbb8:	9300      	str	r3, [sp, #0]
 800dbba:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800dbbe:	4a34      	ldr	r2, [pc, #208]	; (800dc90 <MX_NetXDuo_Init+0x164>)
 800dbc0:	4934      	ldr	r1, [pc, #208]	; (800dc94 <MX_NetXDuo_Init+0x168>)
 800dbc2:	4835      	ldr	r0, [pc, #212]	; (800dc98 <MX_NetXDuo_Init+0x16c>)
 800dbc4:	f7fc fbce 	bl	800a364 <_nxe_ip_create>
 800dbc8:	6178      	str	r0, [r7, #20]
                     pointer, Nx_IP_INSTANCE_THREAD_SIZE, NX_APP_INSTANCE_PRIORITY);

  if (ret != NX_SUCCESS)
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d001      	beq.n	800dbd4 <MX_NetXDuo_Init+0xa8>
  {
    return NX_NOT_SUCCESSFUL;
 800dbd0:	2343      	movs	r3, #67	; 0x43
 800dbd2:	e050      	b.n	800dc76 <MX_NetXDuo_Init+0x14a>
  }

    /* Allocate the memory for ARP */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, DEFAULT_ARP_CACHE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800dbd4:	f107 010c 	add.w	r1, r7, #12
 800dbd8:	2300      	movs	r3, #0
 800dbda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dbde:	6938      	ldr	r0, [r7, #16]
 800dbe0:	f7ff fd9e 	bl	800d720 <_txe_byte_allocate>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d001      	beq.n	800dbee <MX_NetXDuo_Init+0xc2>
  {
    return TX_POOL_ERROR;
 800dbea:	2302      	movs	r3, #2
 800dbec:	e043      	b.n	800dc76 <MX_NetXDuo_Init+0x14a>

  /* USER CODE BEGIN ARP_Protocol_Initialization */

  /* USER CODE END ARP_Protocol_Initialization */

  ret = nx_arp_enable(&NetXDuoEthIpInstance, (VOID *)pointer, DEFAULT_ARP_CACHE_SIZE);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	4828      	ldr	r0, [pc, #160]	; (800dc98 <MX_NetXDuo_Init+0x16c>)
 800dbf8:	f7fc fb68 	bl	800a2cc <_nxe_arp_enable>
 800dbfc:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d001      	beq.n	800dc08 <MX_NetXDuo_Init+0xdc>
  {
    return NX_NOT_SUCCESSFUL;
 800dc04:	2343      	movs	r3, #67	; 0x43
 800dc06:	e036      	b.n	800dc76 <MX_NetXDuo_Init+0x14a>

  /* USER CODE BEGIN UDP_Protocol_Initialization */

  /* USER CODE END UDP_Protocol_Initialization */

  ret = nx_udp_enable(&NetXDuoEthIpInstance);
 800dc08:	4823      	ldr	r0, [pc, #140]	; (800dc98 <MX_NetXDuo_Init+0x16c>)
 800dc0a:	f7fc fe53 	bl	800a8b4 <_nxe_udp_enable>
 800dc0e:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d001      	beq.n	800dc1a <MX_NetXDuo_Init+0xee>
  {
    return NX_NOT_SUCCESSFUL;
 800dc16:	2343      	movs	r3, #67	; 0x43
 800dc18:	e02d      	b.n	800dc76 <MX_NetXDuo_Init+0x14a>
  }

   /* Allocate the memory for main thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, NX_APP_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800dc1a:	f107 010c 	add.w	r1, r7, #12
 800dc1e:	2300      	movs	r3, #0
 800dc20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc24:	6938      	ldr	r0, [r7, #16]
 800dc26:	f7ff fd7b 	bl	800d720 <_txe_byte_allocate>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d001      	beq.n	800dc34 <MX_NetXDuo_Init+0x108>
  {
    return TX_POOL_ERROR;
 800dc30:	2302      	movs	r3, #2
 800dc32:	e020      	b.n	800dc76 <MX_NetXDuo_Init+0x14a>
  }

  /* Create the main thread */
  ret = tx_thread_create(&NxAppThread, "NetXDuo App thread", nx_app_thread_entry , 0, pointer, NX_APP_THREAD_STACK_SIZE,
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	22b0      	movs	r2, #176	; 0xb0
 800dc38:	9206      	str	r2, [sp, #24]
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	9205      	str	r2, [sp, #20]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	9204      	str	r2, [sp, #16]
 800dc42:	220a      	movs	r2, #10
 800dc44:	9203      	str	r2, [sp, #12]
 800dc46:	220a      	movs	r2, #10
 800dc48:	9202      	str	r2, [sp, #8]
 800dc4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc4e:	9201      	str	r2, [sp, #4]
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	2300      	movs	r3, #0
 800dc54:	4a11      	ldr	r2, [pc, #68]	; (800dc9c <MX_NetXDuo_Init+0x170>)
 800dc56:	4912      	ldr	r1, [pc, #72]	; (800dca0 <MX_NetXDuo_Init+0x174>)
 800dc58:	4812      	ldr	r0, [pc, #72]	; (800dca4 <MX_NetXDuo_Init+0x178>)
 800dc5a:	f7ff fe75 	bl	800d948 <_txe_thread_create>
 800dc5e:	6178      	str	r0, [r7, #20]
                         NX_APP_THREAD_PRIORITY, NX_APP_THREAD_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d001      	beq.n	800dc6a <MX_NetXDuo_Init+0x13e>
  {
    return TX_THREAD_ERROR;
 800dc66:	230e      	movs	r3, #14
 800dc68:	e005      	b.n	800dc76 <MX_NetXDuo_Init+0x14a>





  if (ret != TX_SUCCESS)
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d001      	beq.n	800dc74 <MX_NetXDuo_Init+0x148>
  {
	return TX_THREAD_ERROR;
 800dc70:	230e      	movs	r3, #14
 800dc72:	e000      	b.n	800dc76 <MX_NetXDuo_Init+0x14a>
  }

  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 800dc74:	697b      	ldr	r3, [r7, #20]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3718      	adds	r7, #24
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	0800efb4 	.word	0x0800efb4
 800dc84:	0800efcc 	.word	0x0800efcc
 800dc88:	2001502c 	.word	0x2001502c
 800dc8c:	08004bb9 	.word	0x08004bb9
 800dc90:	c0a80101 	.word	0xc0a80101
 800dc94:	0800efe0 	.word	0x0800efe0
 800dc98:	20015068 	.word	0x20015068
 800dc9c:	0800dca9 	.word	0x0800dca9
 800dca0:	0800eff4 	.word	0x0800eff4
 800dca4:	20014f7c 	.word	0x20014f7c

0800dca8 <nx_app_thread_entry>:
* @brief  Main thread entry.
* @param thread_input: ULONG user argument used by the thread entry
* @retval none
*/
static VOID nx_app_thread_entry (ULONG thread_input)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b090      	sub	sp, #64	; 0x40
 800dcac:	af04      	add	r7, sp, #16
 800dcae:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 800dcb0:	2101      	movs	r1, #1
 800dcb2:	486e      	ldr	r0, [pc, #440]	; (800de6c <nx_app_thread_entry+0x1c4>)
 800dcb4:	f7f5 fb30 	bl	8003318 <HAL_GPIO_TogglePin>
	  UINT ret;

	  NX_PACKET *server_packet;
	  NX_PACKET *data_packet;
	  ULONG sent = 0;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	627b      	str	r3, [r7, #36]	; 0x24
	  UINT pkt_number_new;
	  UINT pkt_number = 0;	/* packet number */
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	  UINT offset = 0;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	62bb      	str	r3, [r7, #40]	; 0x28
	  UINT packet_size = 1472;  /* Maximum safe packet size for Ethernet without fragmentation */
 800dcc4:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 800dcc8:	623b      	str	r3, [r7, #32]
	  UINT header_size = sizeof(UINT);  /* Size of the packet number header */
 800dcca:	2304      	movs	r3, #4
 800dccc:	61fb      	str	r3, [r7, #28]

	  /* create the UDP socket */
	  ret = nx_udp_socket_create(&NetXDuoEthIpInstance, &UDPSocket, "UDP Client Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, NX_IP_TIME_TO_LIVE, QUEUE_MAX_SIZE);
 800dcce:	2378      	movs	r3, #120	; 0x78
 800dcd0:	9303      	str	r3, [sp, #12]
 800dcd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dcd6:	9302      	str	r3, [sp, #8]
 800dcd8:	2380      	movs	r3, #128	; 0x80
 800dcda:	9301      	str	r3, [sp, #4]
 800dcdc:	2300      	movs	r3, #0
 800dcde:	9300      	str	r3, [sp, #0]
 800dce0:	2300      	movs	r3, #0
 800dce2:	4a63      	ldr	r2, [pc, #396]	; (800de70 <nx_app_thread_entry+0x1c8>)
 800dce4:	4963      	ldr	r1, [pc, #396]	; (800de74 <nx_app_thread_entry+0x1cc>)
 800dce6:	4864      	ldr	r0, [pc, #400]	; (800de78 <nx_app_thread_entry+0x1d0>)
 800dce8:	f7fc fe62 	bl	800a9b0 <_nxe_udp_socket_create>
 800dcec:	61b8      	str	r0, [r7, #24]
	  if (ret != NX_SUCCESS)
 800dcee:	69bb      	ldr	r3, [r7, #24]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d001      	beq.n	800dcf8 <nx_app_thread_entry+0x50>
	  {
	    Error_Handler();
 800dcf4:	f7f2 fdda 	bl	80008ac <Error_Handler>
	  }

	  /* bind UDP socket to the DEFAULT PORT */
	  ret = nx_udp_socket_bind(&UDPSocket, 6000, TX_WAIT_FOREVER);
 800dcf8:	f04f 32ff 	mov.w	r2, #4294967295
 800dcfc:	f241 7170 	movw	r1, #6000	; 0x1770
 800dd00:	485c      	ldr	r0, [pc, #368]	; (800de74 <nx_app_thread_entry+0x1cc>)
 800dd02:	f7fc fe0f 	bl	800a924 <_nxe_udp_socket_bind>
 800dd06:	61b8      	str	r0, [r7, #24]
	  if (ret != NX_SUCCESS)
 800dd08:	69bb      	ldr	r3, [r7, #24]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d056      	beq.n	800ddbc <nx_app_thread_entry+0x114>
	  {
	    Error_Handler();
 800dd0e:	f7f2 fdcd 	bl	80008ac <Error_Handler>
	  }

	  while (offset < MEMORY_SIZE)
 800dd12:	e053      	b.n	800ddbc <nx_app_thread_entry+0x114>
	  {
	    /* create the packet to send over the UDP socket */
	    ret = nx_packet_allocate(&NxAppPool, &data_packet, NX_UDP_PACKET, TX_WAIT_FOREVER);
 800dd14:	f107 010c 	add.w	r1, r7, #12
 800dd18:	f04f 33ff 	mov.w	r3, #4294967295
 800dd1c:	222c      	movs	r2, #44	; 0x2c
 800dd1e:	4857      	ldr	r0, [pc, #348]	; (800de7c <nx_app_thread_entry+0x1d4>)
 800dd20:	f7fc fbee 	bl	800a500 <_nxe_packet_allocate>
 800dd24:	61b8      	str	r0, [r7, #24]
	    if (ret != NX_SUCCESS)
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d001      	beq.n	800dd30 <nx_app_thread_entry+0x88>
	    {
	      Error_Handler();
 800dd2c:	f7f2 fdbe 	bl	80008ac <Error_Handler>
	    }

	    /* Determine the size of the current packet */
	    ULONG current_packet_size = (MEMORY_SIZE - offset) > (packet_size - header_size) ? (packet_size - header_size) : (MEMORY_SIZE - offset);
 800dd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd32:	f5c3 4248 	rsb	r2, r3, #51200	; 0xc800
 800dd36:	6a39      	ldr	r1, [r7, #32]
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	1acb      	subs	r3, r1, r3
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	bf28      	it	cs
 800dd40:	4613      	movcs	r3, r2
 800dd42:	617b      	str	r3, [r7, #20]


	    pkt_number_new = htonl(pkt_number);
 800dd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd46:	ba1b      	rev	r3, r3
 800dd48:	60bb      	str	r3, [r7, #8]

	    /* Append packet number to the packet */
	    ret = nx_packet_data_append(data_packet, (VOID *) &pkt_number_new, header_size, &NxAppPool, TX_WAIT_FOREVER);
 800dd4a:	68f8      	ldr	r0, [r7, #12]
 800dd4c:	f107 0108 	add.w	r1, r7, #8
 800dd50:	f04f 33ff 	mov.w	r3, #4294967295
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	4b49      	ldr	r3, [pc, #292]	; (800de7c <nx_app_thread_entry+0x1d4>)
 800dd58:	69fa      	ldr	r2, [r7, #28]
 800dd5a:	f7fc fc17 	bl	800a58c <_nxe_packet_data_append>
 800dd5e:	61b8      	str	r0, [r7, #24]
	    if (ret != NX_SUCCESS)
 800dd60:	69bb      	ldr	r3, [r7, #24]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d001      	beq.n	800dd6a <nx_app_thread_entry+0xc2>
	    {
	      Error_Handler();
 800dd66:	f7f2 fda1 	bl	80008ac <Error_Handler>
	    }

	    /* Append data from the memory area to the packet */
	    ret = nx_packet_data_append(data_packet, (VOID *)(memory_area + offset), current_packet_size, &NxAppPool, TX_WAIT_FOREVER);
 800dd6a:	68f8      	ldr	r0, [r7, #12]
 800dd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6e:	4a44      	ldr	r2, [pc, #272]	; (800de80 <nx_app_thread_entry+0x1d8>)
 800dd70:	1899      	adds	r1, r3, r2
 800dd72:	f04f 33ff 	mov.w	r3, #4294967295
 800dd76:	9300      	str	r3, [sp, #0]
 800dd78:	4b40      	ldr	r3, [pc, #256]	; (800de7c <nx_app_thread_entry+0x1d4>)
 800dd7a:	697a      	ldr	r2, [r7, #20]
 800dd7c:	f7fc fc06 	bl	800a58c <_nxe_packet_data_append>
 800dd80:	61b8      	str	r0, [r7, #24]
	    if (ret != NX_SUCCESS)
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d001      	beq.n	800dd8c <nx_app_thread_entry+0xe4>
	    {
	      Error_Handler();
 800dd88:	f7f2 fd90 	bl	80008ac <Error_Handler>
	    }

	    /* Send the packet */
	    ret = nx_udp_socket_send(&UDPSocket, data_packet, UDP_SERVER_ADDRESS, UDP_SERVER_PORT);
 800dd8c:	f107 010c 	add.w	r1, r7, #12
 800dd90:	f241 7370 	movw	r3, #6000	; 0x1770
 800dd94:	4a3b      	ldr	r2, [pc, #236]	; (800de84 <nx_app_thread_entry+0x1dc>)
 800dd96:	4837      	ldr	r0, [pc, #220]	; (800de74 <nx_app_thread_entry+0x1cc>)
 800dd98:	f7fc ff1c 	bl	800abd4 <_nxe_udp_socket_send>
 800dd9c:	61b8      	str	r0, [r7, #24]
	    if (ret != NX_SUCCESS)
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d001      	beq.n	800dda8 <nx_app_thread_entry+0x100>
	    {
	      Error_Handler();
 800dda4:	f7f2 fd82 	bl	80008ac <Error_Handler>
	    }



	    /* Move the offset for the next packet */
	    offset += current_packet_size;
 800dda8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	4413      	add	r3, r2
 800ddae:	62bb      	str	r3, [r7, #40]	; 0x28
		  /* Increase sequence number of the packets */
	    pkt_number++;
 800ddb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	62fb      	str	r3, [r7, #44]	; 0x2c

	    tx_thread_sleep(10);
 800ddb6:	200a      	movs	r0, #10
 800ddb8:	f7fe feb8 	bl	800cb2c <_tx_thread_sleep>
	  while (offset < MEMORY_SIZE)
 800ddbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbe:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 800ddc2:	d3a7      	bcc.n	800dd14 <nx_app_thread_entry+0x6c>




	  	 /* Size of the packet number header */
	  	  nx_udp_socket_create(&NetXDuoEthIpInstance, &UDPSocket2, "UDP Client Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, NX_IP_TIME_TO_LIVE, QUEUE_MAX_SIZE);
 800ddc4:	2378      	movs	r3, #120	; 0x78
 800ddc6:	9303      	str	r3, [sp, #12]
 800ddc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddcc:	9302      	str	r3, [sp, #8]
 800ddce:	2380      	movs	r3, #128	; 0x80
 800ddd0:	9301      	str	r3, [sp, #4]
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	9300      	str	r3, [sp, #0]
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	4a25      	ldr	r2, [pc, #148]	; (800de70 <nx_app_thread_entry+0x1c8>)
 800ddda:	492b      	ldr	r1, [pc, #172]	; (800de88 <nx_app_thread_entry+0x1e0>)
 800dddc:	4826      	ldr	r0, [pc, #152]	; (800de78 <nx_app_thread_entry+0x1d0>)
 800ddde:	f7fc fde7 	bl	800a9b0 <_nxe_udp_socket_create>

	  	  /* create the UDP socket */
	  	  nx_udp_socket_create(&NetXDuoEthIpInstance, &UDPSocket2, "UDP Client Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, NX_IP_TIME_TO_LIVE, QUEUE_MAX_SIZE);
 800dde2:	2378      	movs	r3, #120	; 0x78
 800dde4:	9303      	str	r3, [sp, #12]
 800dde6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddea:	9302      	str	r3, [sp, #8]
 800ddec:	2380      	movs	r3, #128	; 0x80
 800ddee:	9301      	str	r3, [sp, #4]
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	9300      	str	r3, [sp, #0]
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4a1e      	ldr	r2, [pc, #120]	; (800de70 <nx_app_thread_entry+0x1c8>)
 800ddf8:	4923      	ldr	r1, [pc, #140]	; (800de88 <nx_app_thread_entry+0x1e0>)
 800ddfa:	481f      	ldr	r0, [pc, #124]	; (800de78 <nx_app_thread_entry+0x1d0>)
 800ddfc:	f7fc fdd8 	bl	800a9b0 <_nxe_udp_socket_create>



	  	  /* bind UDP socket to the DEFAULT PORT */
	  	  ret = nx_udp_socket_bind(&UDPSocket2, 6001, NX_WAIT_FOREVER);
 800de00:	f04f 32ff 	mov.w	r2, #4294967295
 800de04:	f241 7171 	movw	r1, #6001	; 0x1771
 800de08:	481f      	ldr	r0, [pc, #124]	; (800de88 <nx_app_thread_entry+0x1e0>)
 800de0a:	f7fc fd8b 	bl	800a924 <_nxe_udp_socket_bind>
 800de0e:	61b8      	str	r0, [r7, #24]
	  	  ret = 0;
 800de10:	2300      	movs	r3, #0
 800de12:	61bb      	str	r3, [r7, #24]

	  	  do{

	  	  ret = nx_udp_socket_receive(&UDPSocket2, &server_packet, NX_WAIT_FOREVER); // aspetta 2 secondi se non riceve nulla
 800de14:	f107 0310 	add.w	r3, r7, #16
 800de18:	f04f 32ff 	mov.w	r2, #4294967295
 800de1c:	4619      	mov	r1, r3
 800de1e:	481a      	ldr	r0, [pc, #104]	; (800de88 <nx_app_thread_entry+0x1e0>)
 800de20:	f7fc fe96 	bl	800ab50 <_nxe_udp_socket_receive>
 800de24:	61b8      	str	r0, [r7, #24]

	  	  }while(ret != NX_SUCCESS);
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d1f3      	bne.n	800de14 <nx_app_thread_entry+0x16c>

	  	  /* wait to receive response from the server */

		  HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 800de2c:	2101      	movs	r1, #1
 800de2e:	480f      	ldr	r0, [pc, #60]	; (800de6c <nx_app_thread_entry+0x1c4>)
 800de30:	f7f5 fa72 	bl	8003318 <HAL_GPIO_TogglePin>

	  	  HAL_GPIO_TogglePin(LED3_RED_GPIO_Port, LED3_RED_Pin);
 800de34:	2110      	movs	r1, #16
 800de36:	4815      	ldr	r0, [pc, #84]	; (800de8c <nx_app_thread_entry+0x1e4>)
 800de38:	f7f5 fa6e 	bl	8003318 <HAL_GPIO_TogglePin>

	  	  	/* unbind the socket and delete it */
	  	  	 nx_udp_socket_unbind(&UDPSocket);
 800de3c:	480d      	ldr	r0, [pc, #52]	; (800de74 <nx_app_thread_entry+0x1cc>)
 800de3e:	f7fc ff4f 	bl	800ace0 <_nxe_udp_socket_unbind>
	  		nx_udp_socket_delete(&UDPSocket);
 800de42:	480c      	ldr	r0, [pc, #48]	; (800de74 <nx_app_thread_entry+0x1cc>)
 800de44:	f7fc fe48 	bl	800aad8 <_nxe_udp_socket_delete>
	  	  	nx_udp_socket_unbind(&UDPSocket2);
 800de48:	480f      	ldr	r0, [pc, #60]	; (800de88 <nx_app_thread_entry+0x1e0>)
 800de4a:	f7fc ff49 	bl	800ace0 <_nxe_udp_socket_unbind>
	  	  	nx_udp_socket_delete(&UDPSocket2);
 800de4e:	480e      	ldr	r0, [pc, #56]	; (800de88 <nx_app_thread_entry+0x1e0>)
 800de50:	f7fc fe42 	bl	800aad8 <_nxe_udp_socket_delete>

	  	    HAL_PWR_DisableWakeUpPin(PWR_WKUP1);
 800de54:	2001      	movs	r0, #1
 800de56:	f7f5 fa9f 	bl	8003398 <HAL_PWR_DisableWakeUpPin>
	  	    HAL_PWR_EnableWakeUpPin(PWR_WKUP1);
 800de5a:	2001      	movs	r0, #1
 800de5c:	f7f5 fa86 	bl	800336c <HAL_PWR_EnableWakeUpPin>
	  	    HAL_PWR_EnterSTANDBYMode();
 800de60:	f7f5 faae 	bl	80033c0 <HAL_PWR_EnterSTANDBYMode>
  /* USER CODE END Nx_App_Thread_Entry 0 */

}
 800de64:	bf00      	nop
 800de66:	3730      	adds	r7, #48	; 0x30
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	42020400 	.word	0x42020400
 800de70:	0800f008 	.word	0x0800f008
 800de74:	20014e8c 	.word	0x20014e8c
 800de78:	20015068 	.word	0x20015068
 800de7c:	2001502c 	.word	0x2001502c
 800de80:	20007f14 	.word	0x20007f14
 800de84:	c0a80165 	.word	0xc0a80165
 800de88:	20014f04 	.word	0x20014f04
 800de8c:	42021800 	.word	0x42021800

0800de90 <rand>:
 800de90:	4b16      	ldr	r3, [pc, #88]	; (800deec <rand+0x5c>)
 800de92:	b510      	push	{r4, lr}
 800de94:	681c      	ldr	r4, [r3, #0]
 800de96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800de98:	b9b3      	cbnz	r3, 800dec8 <rand+0x38>
 800de9a:	2018      	movs	r0, #24
 800de9c:	f000 fb1e 	bl	800e4dc <malloc>
 800dea0:	4602      	mov	r2, r0
 800dea2:	6320      	str	r0, [r4, #48]	; 0x30
 800dea4:	b920      	cbnz	r0, 800deb0 <rand+0x20>
 800dea6:	4b12      	ldr	r3, [pc, #72]	; (800def0 <rand+0x60>)
 800dea8:	2152      	movs	r1, #82	; 0x52
 800deaa:	4812      	ldr	r0, [pc, #72]	; (800def4 <rand+0x64>)
 800deac:	f000 faac 	bl	800e408 <__assert_func>
 800deb0:	4911      	ldr	r1, [pc, #68]	; (800def8 <rand+0x68>)
 800deb2:	4b12      	ldr	r3, [pc, #72]	; (800defc <rand+0x6c>)
 800deb4:	e9c0 1300 	strd	r1, r3, [r0]
 800deb8:	4b11      	ldr	r3, [pc, #68]	; (800df00 <rand+0x70>)
 800deba:	2100      	movs	r1, #0
 800debc:	6083      	str	r3, [r0, #8]
 800debe:	230b      	movs	r3, #11
 800dec0:	8183      	strh	r3, [r0, #12]
 800dec2:	2001      	movs	r0, #1
 800dec4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800dec8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800deca:	480e      	ldr	r0, [pc, #56]	; (800df04 <rand+0x74>)
 800decc:	690b      	ldr	r3, [r1, #16]
 800dece:	694c      	ldr	r4, [r1, #20]
 800ded0:	4a0d      	ldr	r2, [pc, #52]	; (800df08 <rand+0x78>)
 800ded2:	4358      	muls	r0, r3
 800ded4:	fb02 0004 	mla	r0, r2, r4, r0
 800ded8:	fba3 3202 	umull	r3, r2, r3, r2
 800dedc:	3301      	adds	r3, #1
 800dede:	eb40 0002 	adc.w	r0, r0, r2
 800dee2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800dee6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800deea:	bd10      	pop	{r4, pc}
 800deec:	200000e4 	.word	0x200000e4
 800def0:	0800f034 	.word	0x0800f034
 800def4:	0800f04b 	.word	0x0800f04b
 800def8:	abcd330e 	.word	0xabcd330e
 800defc:	e66d1234 	.word	0xe66d1234
 800df00:	0005deec 	.word	0x0005deec
 800df04:	5851f42d 	.word	0x5851f42d
 800df08:	4c957f2d 	.word	0x4c957f2d

0800df0c <std>:
 800df0c:	2300      	movs	r3, #0
 800df0e:	b510      	push	{r4, lr}
 800df10:	4604      	mov	r4, r0
 800df12:	6083      	str	r3, [r0, #8]
 800df14:	8181      	strh	r1, [r0, #12]
 800df16:	4619      	mov	r1, r3
 800df18:	6643      	str	r3, [r0, #100]	; 0x64
 800df1a:	81c2      	strh	r2, [r0, #14]
 800df1c:	2208      	movs	r2, #8
 800df1e:	6183      	str	r3, [r0, #24]
 800df20:	e9c0 3300 	strd	r3, r3, [r0]
 800df24:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df28:	305c      	adds	r0, #92	; 0x5c
 800df2a:	f000 f9e5 	bl	800e2f8 <memset>
 800df2e:	4b0d      	ldr	r3, [pc, #52]	; (800df64 <std+0x58>)
 800df30:	6224      	str	r4, [r4, #32]
 800df32:	6263      	str	r3, [r4, #36]	; 0x24
 800df34:	4b0c      	ldr	r3, [pc, #48]	; (800df68 <std+0x5c>)
 800df36:	62a3      	str	r3, [r4, #40]	; 0x28
 800df38:	4b0c      	ldr	r3, [pc, #48]	; (800df6c <std+0x60>)
 800df3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df3c:	4b0c      	ldr	r3, [pc, #48]	; (800df70 <std+0x64>)
 800df3e:	6323      	str	r3, [r4, #48]	; 0x30
 800df40:	4b0c      	ldr	r3, [pc, #48]	; (800df74 <std+0x68>)
 800df42:	429c      	cmp	r4, r3
 800df44:	d006      	beq.n	800df54 <std+0x48>
 800df46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800df4a:	4294      	cmp	r4, r2
 800df4c:	d002      	beq.n	800df54 <std+0x48>
 800df4e:	33d0      	adds	r3, #208	; 0xd0
 800df50:	429c      	cmp	r4, r3
 800df52:	d105      	bne.n	800df60 <std+0x54>
 800df54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800df58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df5c:	f000 ba44 	b.w	800e3e8 <__retarget_lock_init_recursive>
 800df60:	bd10      	pop	{r4, pc}
 800df62:	bf00      	nop
 800df64:	0800e149 	.word	0x0800e149
 800df68:	0800e16b 	.word	0x0800e16b
 800df6c:	0800e1a3 	.word	0x0800e1a3
 800df70:	0800e1c7 	.word	0x0800e1c7
 800df74:	20015830 	.word	0x20015830

0800df78 <stdio_exit_handler>:
 800df78:	4a02      	ldr	r2, [pc, #8]	; (800df84 <stdio_exit_handler+0xc>)
 800df7a:	4903      	ldr	r1, [pc, #12]	; (800df88 <stdio_exit_handler+0x10>)
 800df7c:	4803      	ldr	r0, [pc, #12]	; (800df8c <stdio_exit_handler+0x14>)
 800df7e:	f000 b869 	b.w	800e054 <_fwalk_sglue>
 800df82:	bf00      	nop
 800df84:	2000008c 	.word	0x2000008c
 800df88:	0800e74d 	.word	0x0800e74d
 800df8c:	20000098 	.word	0x20000098

0800df90 <cleanup_stdio>:
 800df90:	6841      	ldr	r1, [r0, #4]
 800df92:	4b0c      	ldr	r3, [pc, #48]	; (800dfc4 <cleanup_stdio+0x34>)
 800df94:	4299      	cmp	r1, r3
 800df96:	b510      	push	{r4, lr}
 800df98:	4604      	mov	r4, r0
 800df9a:	d001      	beq.n	800dfa0 <cleanup_stdio+0x10>
 800df9c:	f000 fbd6 	bl	800e74c <_fflush_r>
 800dfa0:	68a1      	ldr	r1, [r4, #8]
 800dfa2:	4b09      	ldr	r3, [pc, #36]	; (800dfc8 <cleanup_stdio+0x38>)
 800dfa4:	4299      	cmp	r1, r3
 800dfa6:	d002      	beq.n	800dfae <cleanup_stdio+0x1e>
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f000 fbcf 	bl	800e74c <_fflush_r>
 800dfae:	68e1      	ldr	r1, [r4, #12]
 800dfb0:	4b06      	ldr	r3, [pc, #24]	; (800dfcc <cleanup_stdio+0x3c>)
 800dfb2:	4299      	cmp	r1, r3
 800dfb4:	d004      	beq.n	800dfc0 <cleanup_stdio+0x30>
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfbc:	f000 bbc6 	b.w	800e74c <_fflush_r>
 800dfc0:	bd10      	pop	{r4, pc}
 800dfc2:	bf00      	nop
 800dfc4:	20015830 	.word	0x20015830
 800dfc8:	20015898 	.word	0x20015898
 800dfcc:	20015900 	.word	0x20015900

0800dfd0 <global_stdio_init.part.0>:
 800dfd0:	b510      	push	{r4, lr}
 800dfd2:	4b0b      	ldr	r3, [pc, #44]	; (800e000 <global_stdio_init.part.0+0x30>)
 800dfd4:	2104      	movs	r1, #4
 800dfd6:	4c0b      	ldr	r4, [pc, #44]	; (800e004 <global_stdio_init.part.0+0x34>)
 800dfd8:	4a0b      	ldr	r2, [pc, #44]	; (800e008 <global_stdio_init.part.0+0x38>)
 800dfda:	4620      	mov	r0, r4
 800dfdc:	601a      	str	r2, [r3, #0]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f7ff ff94 	bl	800df0c <std>
 800dfe4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800dfe8:	2201      	movs	r2, #1
 800dfea:	2109      	movs	r1, #9
 800dfec:	f7ff ff8e 	bl	800df0c <std>
 800dff0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800dff4:	2202      	movs	r2, #2
 800dff6:	2112      	movs	r1, #18
 800dff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dffc:	f7ff bf86 	b.w	800df0c <std>
 800e000:	20015968 	.word	0x20015968
 800e004:	20015830 	.word	0x20015830
 800e008:	0800df79 	.word	0x0800df79

0800e00c <__sfp_lock_acquire>:
 800e00c:	4801      	ldr	r0, [pc, #4]	; (800e014 <__sfp_lock_acquire+0x8>)
 800e00e:	f000 b9ec 	b.w	800e3ea <__retarget_lock_acquire_recursive>
 800e012:	bf00      	nop
 800e014:	20015971 	.word	0x20015971

0800e018 <__sfp_lock_release>:
 800e018:	4801      	ldr	r0, [pc, #4]	; (800e020 <__sfp_lock_release+0x8>)
 800e01a:	f000 b9e7 	b.w	800e3ec <__retarget_lock_release_recursive>
 800e01e:	bf00      	nop
 800e020:	20015971 	.word	0x20015971

0800e024 <__sinit>:
 800e024:	b510      	push	{r4, lr}
 800e026:	4604      	mov	r4, r0
 800e028:	f7ff fff0 	bl	800e00c <__sfp_lock_acquire>
 800e02c:	6a23      	ldr	r3, [r4, #32]
 800e02e:	b11b      	cbz	r3, 800e038 <__sinit+0x14>
 800e030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e034:	f7ff bff0 	b.w	800e018 <__sfp_lock_release>
 800e038:	4b04      	ldr	r3, [pc, #16]	; (800e04c <__sinit+0x28>)
 800e03a:	6223      	str	r3, [r4, #32]
 800e03c:	4b04      	ldr	r3, [pc, #16]	; (800e050 <__sinit+0x2c>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d1f5      	bne.n	800e030 <__sinit+0xc>
 800e044:	f7ff ffc4 	bl	800dfd0 <global_stdio_init.part.0>
 800e048:	e7f2      	b.n	800e030 <__sinit+0xc>
 800e04a:	bf00      	nop
 800e04c:	0800df91 	.word	0x0800df91
 800e050:	20015968 	.word	0x20015968

0800e054 <_fwalk_sglue>:
 800e054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e058:	4607      	mov	r7, r0
 800e05a:	4688      	mov	r8, r1
 800e05c:	4614      	mov	r4, r2
 800e05e:	2600      	movs	r6, #0
 800e060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e064:	f1b9 0901 	subs.w	r9, r9, #1
 800e068:	d505      	bpl.n	800e076 <_fwalk_sglue+0x22>
 800e06a:	6824      	ldr	r4, [r4, #0]
 800e06c:	2c00      	cmp	r4, #0
 800e06e:	d1f7      	bne.n	800e060 <_fwalk_sglue+0xc>
 800e070:	4630      	mov	r0, r6
 800e072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e076:	89ab      	ldrh	r3, [r5, #12]
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d907      	bls.n	800e08c <_fwalk_sglue+0x38>
 800e07c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e080:	3301      	adds	r3, #1
 800e082:	d003      	beq.n	800e08c <_fwalk_sglue+0x38>
 800e084:	4629      	mov	r1, r5
 800e086:	4638      	mov	r0, r7
 800e088:	47c0      	blx	r8
 800e08a:	4306      	orrs	r6, r0
 800e08c:	3568      	adds	r5, #104	; 0x68
 800e08e:	e7e9      	b.n	800e064 <_fwalk_sglue+0x10>

0800e090 <_puts_r>:
 800e090:	6a03      	ldr	r3, [r0, #32]
 800e092:	b570      	push	{r4, r5, r6, lr}
 800e094:	4605      	mov	r5, r0
 800e096:	460e      	mov	r6, r1
 800e098:	6884      	ldr	r4, [r0, #8]
 800e09a:	b90b      	cbnz	r3, 800e0a0 <_puts_r+0x10>
 800e09c:	f7ff ffc2 	bl	800e024 <__sinit>
 800e0a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0a2:	07db      	lsls	r3, r3, #31
 800e0a4:	d405      	bmi.n	800e0b2 <_puts_r+0x22>
 800e0a6:	89a3      	ldrh	r3, [r4, #12]
 800e0a8:	0598      	lsls	r0, r3, #22
 800e0aa:	d402      	bmi.n	800e0b2 <_puts_r+0x22>
 800e0ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0ae:	f000 f99c 	bl	800e3ea <__retarget_lock_acquire_recursive>
 800e0b2:	89a3      	ldrh	r3, [r4, #12]
 800e0b4:	0719      	lsls	r1, r3, #28
 800e0b6:	d513      	bpl.n	800e0e0 <_puts_r+0x50>
 800e0b8:	6923      	ldr	r3, [r4, #16]
 800e0ba:	b18b      	cbz	r3, 800e0e0 <_puts_r+0x50>
 800e0bc:	3e01      	subs	r6, #1
 800e0be:	68a3      	ldr	r3, [r4, #8]
 800e0c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	60a3      	str	r3, [r4, #8]
 800e0c8:	b9e9      	cbnz	r1, 800e106 <_puts_r+0x76>
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	da2e      	bge.n	800e12c <_puts_r+0x9c>
 800e0ce:	4622      	mov	r2, r4
 800e0d0:	210a      	movs	r1, #10
 800e0d2:	4628      	mov	r0, r5
 800e0d4:	f000 f87b 	bl	800e1ce <__swbuf_r>
 800e0d8:	3001      	adds	r0, #1
 800e0da:	d007      	beq.n	800e0ec <_puts_r+0x5c>
 800e0dc:	250a      	movs	r5, #10
 800e0de:	e007      	b.n	800e0f0 <_puts_r+0x60>
 800e0e0:	4621      	mov	r1, r4
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	f000 f8b0 	bl	800e248 <__swsetup_r>
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	d0e7      	beq.n	800e0bc <_puts_r+0x2c>
 800e0ec:	f04f 35ff 	mov.w	r5, #4294967295
 800e0f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0f2:	07da      	lsls	r2, r3, #31
 800e0f4:	d405      	bmi.n	800e102 <_puts_r+0x72>
 800e0f6:	89a3      	ldrh	r3, [r4, #12]
 800e0f8:	059b      	lsls	r3, r3, #22
 800e0fa:	d402      	bmi.n	800e102 <_puts_r+0x72>
 800e0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0fe:	f000 f975 	bl	800e3ec <__retarget_lock_release_recursive>
 800e102:	4628      	mov	r0, r5
 800e104:	bd70      	pop	{r4, r5, r6, pc}
 800e106:	2b00      	cmp	r3, #0
 800e108:	da04      	bge.n	800e114 <_puts_r+0x84>
 800e10a:	69a2      	ldr	r2, [r4, #24]
 800e10c:	429a      	cmp	r2, r3
 800e10e:	dc06      	bgt.n	800e11e <_puts_r+0x8e>
 800e110:	290a      	cmp	r1, #10
 800e112:	d004      	beq.n	800e11e <_puts_r+0x8e>
 800e114:	6823      	ldr	r3, [r4, #0]
 800e116:	1c5a      	adds	r2, r3, #1
 800e118:	6022      	str	r2, [r4, #0]
 800e11a:	7019      	strb	r1, [r3, #0]
 800e11c:	e7cf      	b.n	800e0be <_puts_r+0x2e>
 800e11e:	4622      	mov	r2, r4
 800e120:	4628      	mov	r0, r5
 800e122:	f000 f854 	bl	800e1ce <__swbuf_r>
 800e126:	3001      	adds	r0, #1
 800e128:	d1c9      	bne.n	800e0be <_puts_r+0x2e>
 800e12a:	e7df      	b.n	800e0ec <_puts_r+0x5c>
 800e12c:	6823      	ldr	r3, [r4, #0]
 800e12e:	250a      	movs	r5, #10
 800e130:	1c5a      	adds	r2, r3, #1
 800e132:	6022      	str	r2, [r4, #0]
 800e134:	701d      	strb	r5, [r3, #0]
 800e136:	e7db      	b.n	800e0f0 <_puts_r+0x60>

0800e138 <puts>:
 800e138:	4b02      	ldr	r3, [pc, #8]	; (800e144 <puts+0xc>)
 800e13a:	4601      	mov	r1, r0
 800e13c:	6818      	ldr	r0, [r3, #0]
 800e13e:	f7ff bfa7 	b.w	800e090 <_puts_r>
 800e142:	bf00      	nop
 800e144:	200000e4 	.word	0x200000e4

0800e148 <__sread>:
 800e148:	b510      	push	{r4, lr}
 800e14a:	460c      	mov	r4, r1
 800e14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e150:	f000 f8fc 	bl	800e34c <_read_r>
 800e154:	2800      	cmp	r0, #0
 800e156:	bfab      	itete	ge
 800e158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e15a:	89a3      	ldrhlt	r3, [r4, #12]
 800e15c:	181b      	addge	r3, r3, r0
 800e15e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e162:	bfac      	ite	ge
 800e164:	6563      	strge	r3, [r4, #84]	; 0x54
 800e166:	81a3      	strhlt	r3, [r4, #12]
 800e168:	bd10      	pop	{r4, pc}

0800e16a <__swrite>:
 800e16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e16e:	461f      	mov	r7, r3
 800e170:	898b      	ldrh	r3, [r1, #12]
 800e172:	4605      	mov	r5, r0
 800e174:	460c      	mov	r4, r1
 800e176:	05db      	lsls	r3, r3, #23
 800e178:	4616      	mov	r6, r2
 800e17a:	d505      	bpl.n	800e188 <__swrite+0x1e>
 800e17c:	2302      	movs	r3, #2
 800e17e:	2200      	movs	r2, #0
 800e180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e184:	f000 f8d0 	bl	800e328 <_lseek_r>
 800e188:	89a3      	ldrh	r3, [r4, #12]
 800e18a:	4632      	mov	r2, r6
 800e18c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e190:	4628      	mov	r0, r5
 800e192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e196:	81a3      	strh	r3, [r4, #12]
 800e198:	463b      	mov	r3, r7
 800e19a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e19e:	f000 b8e7 	b.w	800e370 <_write_r>

0800e1a2 <__sseek>:
 800e1a2:	b510      	push	{r4, lr}
 800e1a4:	460c      	mov	r4, r1
 800e1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1aa:	f000 f8bd 	bl	800e328 <_lseek_r>
 800e1ae:	1c43      	adds	r3, r0, #1
 800e1b0:	89a3      	ldrh	r3, [r4, #12]
 800e1b2:	bf15      	itete	ne
 800e1b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e1b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e1ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e1be:	81a3      	strheq	r3, [r4, #12]
 800e1c0:	bf18      	it	ne
 800e1c2:	81a3      	strhne	r3, [r4, #12]
 800e1c4:	bd10      	pop	{r4, pc}

0800e1c6 <__sclose>:
 800e1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1ca:	f000 b89d 	b.w	800e308 <_close_r>

0800e1ce <__swbuf_r>:
 800e1ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1d0:	460e      	mov	r6, r1
 800e1d2:	4614      	mov	r4, r2
 800e1d4:	4605      	mov	r5, r0
 800e1d6:	b118      	cbz	r0, 800e1e0 <__swbuf_r+0x12>
 800e1d8:	6a03      	ldr	r3, [r0, #32]
 800e1da:	b90b      	cbnz	r3, 800e1e0 <__swbuf_r+0x12>
 800e1dc:	f7ff ff22 	bl	800e024 <__sinit>
 800e1e0:	69a3      	ldr	r3, [r4, #24]
 800e1e2:	60a3      	str	r3, [r4, #8]
 800e1e4:	89a3      	ldrh	r3, [r4, #12]
 800e1e6:	071a      	lsls	r2, r3, #28
 800e1e8:	d525      	bpl.n	800e236 <__swbuf_r+0x68>
 800e1ea:	6923      	ldr	r3, [r4, #16]
 800e1ec:	b31b      	cbz	r3, 800e236 <__swbuf_r+0x68>
 800e1ee:	6823      	ldr	r3, [r4, #0]
 800e1f0:	b2f6      	uxtb	r6, r6
 800e1f2:	6922      	ldr	r2, [r4, #16]
 800e1f4:	4637      	mov	r7, r6
 800e1f6:	1a98      	subs	r0, r3, r2
 800e1f8:	6963      	ldr	r3, [r4, #20]
 800e1fa:	4283      	cmp	r3, r0
 800e1fc:	dc04      	bgt.n	800e208 <__swbuf_r+0x3a>
 800e1fe:	4621      	mov	r1, r4
 800e200:	4628      	mov	r0, r5
 800e202:	f000 faa3 	bl	800e74c <_fflush_r>
 800e206:	b9e0      	cbnz	r0, 800e242 <__swbuf_r+0x74>
 800e208:	68a3      	ldr	r3, [r4, #8]
 800e20a:	3b01      	subs	r3, #1
 800e20c:	60a3      	str	r3, [r4, #8]
 800e20e:	6823      	ldr	r3, [r4, #0]
 800e210:	1c5a      	adds	r2, r3, #1
 800e212:	6022      	str	r2, [r4, #0]
 800e214:	701e      	strb	r6, [r3, #0]
 800e216:	1c43      	adds	r3, r0, #1
 800e218:	6962      	ldr	r2, [r4, #20]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d004      	beq.n	800e228 <__swbuf_r+0x5a>
 800e21e:	89a3      	ldrh	r3, [r4, #12]
 800e220:	07db      	lsls	r3, r3, #31
 800e222:	d506      	bpl.n	800e232 <__swbuf_r+0x64>
 800e224:	2e0a      	cmp	r6, #10
 800e226:	d104      	bne.n	800e232 <__swbuf_r+0x64>
 800e228:	4621      	mov	r1, r4
 800e22a:	4628      	mov	r0, r5
 800e22c:	f000 fa8e 	bl	800e74c <_fflush_r>
 800e230:	b938      	cbnz	r0, 800e242 <__swbuf_r+0x74>
 800e232:	4638      	mov	r0, r7
 800e234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e236:	4621      	mov	r1, r4
 800e238:	4628      	mov	r0, r5
 800e23a:	f000 f805 	bl	800e248 <__swsetup_r>
 800e23e:	2800      	cmp	r0, #0
 800e240:	d0d5      	beq.n	800e1ee <__swbuf_r+0x20>
 800e242:	f04f 37ff 	mov.w	r7, #4294967295
 800e246:	e7f4      	b.n	800e232 <__swbuf_r+0x64>

0800e248 <__swsetup_r>:
 800e248:	b538      	push	{r3, r4, r5, lr}
 800e24a:	4b2a      	ldr	r3, [pc, #168]	; (800e2f4 <__swsetup_r+0xac>)
 800e24c:	4605      	mov	r5, r0
 800e24e:	460c      	mov	r4, r1
 800e250:	6818      	ldr	r0, [r3, #0]
 800e252:	b118      	cbz	r0, 800e25c <__swsetup_r+0x14>
 800e254:	6a03      	ldr	r3, [r0, #32]
 800e256:	b90b      	cbnz	r3, 800e25c <__swsetup_r+0x14>
 800e258:	f7ff fee4 	bl	800e024 <__sinit>
 800e25c:	89a3      	ldrh	r3, [r4, #12]
 800e25e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e262:	0718      	lsls	r0, r3, #28
 800e264:	d422      	bmi.n	800e2ac <__swsetup_r+0x64>
 800e266:	06d9      	lsls	r1, r3, #27
 800e268:	d407      	bmi.n	800e27a <__swsetup_r+0x32>
 800e26a:	2309      	movs	r3, #9
 800e26c:	602b      	str	r3, [r5, #0]
 800e26e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e272:	f04f 30ff 	mov.w	r0, #4294967295
 800e276:	81a3      	strh	r3, [r4, #12]
 800e278:	e034      	b.n	800e2e4 <__swsetup_r+0x9c>
 800e27a:	0758      	lsls	r0, r3, #29
 800e27c:	d512      	bpl.n	800e2a4 <__swsetup_r+0x5c>
 800e27e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e280:	b141      	cbz	r1, 800e294 <__swsetup_r+0x4c>
 800e282:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e286:	4299      	cmp	r1, r3
 800e288:	d002      	beq.n	800e290 <__swsetup_r+0x48>
 800e28a:	4628      	mov	r0, r5
 800e28c:	f000 f8da 	bl	800e444 <_free_r>
 800e290:	2300      	movs	r3, #0
 800e292:	6363      	str	r3, [r4, #52]	; 0x34
 800e294:	89a3      	ldrh	r3, [r4, #12]
 800e296:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e29a:	81a3      	strh	r3, [r4, #12]
 800e29c:	2300      	movs	r3, #0
 800e29e:	6063      	str	r3, [r4, #4]
 800e2a0:	6923      	ldr	r3, [r4, #16]
 800e2a2:	6023      	str	r3, [r4, #0]
 800e2a4:	89a3      	ldrh	r3, [r4, #12]
 800e2a6:	f043 0308 	orr.w	r3, r3, #8
 800e2aa:	81a3      	strh	r3, [r4, #12]
 800e2ac:	6923      	ldr	r3, [r4, #16]
 800e2ae:	b94b      	cbnz	r3, 800e2c4 <__swsetup_r+0x7c>
 800e2b0:	89a3      	ldrh	r3, [r4, #12]
 800e2b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e2b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2ba:	d003      	beq.n	800e2c4 <__swsetup_r+0x7c>
 800e2bc:	4621      	mov	r1, r4
 800e2be:	4628      	mov	r0, r5
 800e2c0:	f000 faa3 	bl	800e80a <__smakebuf_r>
 800e2c4:	89a0      	ldrh	r0, [r4, #12]
 800e2c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2ca:	f010 0301 	ands.w	r3, r0, #1
 800e2ce:	d00a      	beq.n	800e2e6 <__swsetup_r+0x9e>
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	60a3      	str	r3, [r4, #8]
 800e2d4:	6963      	ldr	r3, [r4, #20]
 800e2d6:	425b      	negs	r3, r3
 800e2d8:	61a3      	str	r3, [r4, #24]
 800e2da:	6923      	ldr	r3, [r4, #16]
 800e2dc:	b943      	cbnz	r3, 800e2f0 <__swsetup_r+0xa8>
 800e2de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e2e2:	d1c4      	bne.n	800e26e <__swsetup_r+0x26>
 800e2e4:	bd38      	pop	{r3, r4, r5, pc}
 800e2e6:	0781      	lsls	r1, r0, #30
 800e2e8:	bf58      	it	pl
 800e2ea:	6963      	ldrpl	r3, [r4, #20]
 800e2ec:	60a3      	str	r3, [r4, #8]
 800e2ee:	e7f4      	b.n	800e2da <__swsetup_r+0x92>
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	e7f7      	b.n	800e2e4 <__swsetup_r+0x9c>
 800e2f4:	200000e4 	.word	0x200000e4

0800e2f8 <memset>:
 800e2f8:	4402      	add	r2, r0
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d100      	bne.n	800e302 <memset+0xa>
 800e300:	4770      	bx	lr
 800e302:	f803 1b01 	strb.w	r1, [r3], #1
 800e306:	e7f9      	b.n	800e2fc <memset+0x4>

0800e308 <_close_r>:
 800e308:	b538      	push	{r3, r4, r5, lr}
 800e30a:	2300      	movs	r3, #0
 800e30c:	4d05      	ldr	r5, [pc, #20]	; (800e324 <_close_r+0x1c>)
 800e30e:	4604      	mov	r4, r0
 800e310:	4608      	mov	r0, r1
 800e312:	602b      	str	r3, [r5, #0]
 800e314:	f7f2 fcc1 	bl	8000c9a <_close>
 800e318:	1c43      	adds	r3, r0, #1
 800e31a:	d102      	bne.n	800e322 <_close_r+0x1a>
 800e31c:	682b      	ldr	r3, [r5, #0]
 800e31e:	b103      	cbz	r3, 800e322 <_close_r+0x1a>
 800e320:	6023      	str	r3, [r4, #0]
 800e322:	bd38      	pop	{r3, r4, r5, pc}
 800e324:	2001596c 	.word	0x2001596c

0800e328 <_lseek_r>:
 800e328:	b538      	push	{r3, r4, r5, lr}
 800e32a:	4604      	mov	r4, r0
 800e32c:	4d06      	ldr	r5, [pc, #24]	; (800e348 <_lseek_r+0x20>)
 800e32e:	4608      	mov	r0, r1
 800e330:	4611      	mov	r1, r2
 800e332:	2200      	movs	r2, #0
 800e334:	602a      	str	r2, [r5, #0]
 800e336:	461a      	mov	r2, r3
 800e338:	f7f2 fcd6 	bl	8000ce8 <_lseek>
 800e33c:	1c43      	adds	r3, r0, #1
 800e33e:	d102      	bne.n	800e346 <_lseek_r+0x1e>
 800e340:	682b      	ldr	r3, [r5, #0]
 800e342:	b103      	cbz	r3, 800e346 <_lseek_r+0x1e>
 800e344:	6023      	str	r3, [r4, #0]
 800e346:	bd38      	pop	{r3, r4, r5, pc}
 800e348:	2001596c 	.word	0x2001596c

0800e34c <_read_r>:
 800e34c:	b538      	push	{r3, r4, r5, lr}
 800e34e:	4604      	mov	r4, r0
 800e350:	4d06      	ldr	r5, [pc, #24]	; (800e36c <_read_r+0x20>)
 800e352:	4608      	mov	r0, r1
 800e354:	4611      	mov	r1, r2
 800e356:	2200      	movs	r2, #0
 800e358:	602a      	str	r2, [r5, #0]
 800e35a:	461a      	mov	r2, r3
 800e35c:	f7f2 fc64 	bl	8000c28 <_read>
 800e360:	1c43      	adds	r3, r0, #1
 800e362:	d102      	bne.n	800e36a <_read_r+0x1e>
 800e364:	682b      	ldr	r3, [r5, #0]
 800e366:	b103      	cbz	r3, 800e36a <_read_r+0x1e>
 800e368:	6023      	str	r3, [r4, #0]
 800e36a:	bd38      	pop	{r3, r4, r5, pc}
 800e36c:	2001596c 	.word	0x2001596c

0800e370 <_write_r>:
 800e370:	b538      	push	{r3, r4, r5, lr}
 800e372:	4604      	mov	r4, r0
 800e374:	4d06      	ldr	r5, [pc, #24]	; (800e390 <_write_r+0x20>)
 800e376:	4608      	mov	r0, r1
 800e378:	4611      	mov	r1, r2
 800e37a:	2200      	movs	r2, #0
 800e37c:	602a      	str	r2, [r5, #0]
 800e37e:	461a      	mov	r2, r3
 800e380:	f7f2 fc6f 	bl	8000c62 <_write>
 800e384:	1c43      	adds	r3, r0, #1
 800e386:	d102      	bne.n	800e38e <_write_r+0x1e>
 800e388:	682b      	ldr	r3, [r5, #0]
 800e38a:	b103      	cbz	r3, 800e38e <_write_r+0x1e>
 800e38c:	6023      	str	r3, [r4, #0]
 800e38e:	bd38      	pop	{r3, r4, r5, pc}
 800e390:	2001596c 	.word	0x2001596c

0800e394 <__errno>:
 800e394:	4b01      	ldr	r3, [pc, #4]	; (800e39c <__errno+0x8>)
 800e396:	6818      	ldr	r0, [r3, #0]
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	200000e4 	.word	0x200000e4

0800e3a0 <__libc_init_array>:
 800e3a0:	b570      	push	{r4, r5, r6, lr}
 800e3a2:	4d0d      	ldr	r5, [pc, #52]	; (800e3d8 <__libc_init_array+0x38>)
 800e3a4:	2600      	movs	r6, #0
 800e3a6:	4c0d      	ldr	r4, [pc, #52]	; (800e3dc <__libc_init_array+0x3c>)
 800e3a8:	1b64      	subs	r4, r4, r5
 800e3aa:	10a4      	asrs	r4, r4, #2
 800e3ac:	42a6      	cmp	r6, r4
 800e3ae:	d109      	bne.n	800e3c4 <__libc_init_array+0x24>
 800e3b0:	4d0b      	ldr	r5, [pc, #44]	; (800e3e0 <__libc_init_array+0x40>)
 800e3b2:	2600      	movs	r6, #0
 800e3b4:	4c0b      	ldr	r4, [pc, #44]	; (800e3e4 <__libc_init_array+0x44>)
 800e3b6:	f000 fdc5 	bl	800ef44 <_init>
 800e3ba:	1b64      	subs	r4, r4, r5
 800e3bc:	10a4      	asrs	r4, r4, #2
 800e3be:	42a6      	cmp	r6, r4
 800e3c0:	d105      	bne.n	800e3ce <__libc_init_array+0x2e>
 800e3c2:	bd70      	pop	{r4, r5, r6, pc}
 800e3c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3c8:	3601      	adds	r6, #1
 800e3ca:	4798      	blx	r3
 800e3cc:	e7ee      	b.n	800e3ac <__libc_init_array+0xc>
 800e3ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3d2:	3601      	adds	r6, #1
 800e3d4:	4798      	blx	r3
 800e3d6:	e7f2      	b.n	800e3be <__libc_init_array+0x1e>
 800e3d8:	0800f114 	.word	0x0800f114
 800e3dc:	0800f114 	.word	0x0800f114
 800e3e0:	0800f114 	.word	0x0800f114
 800e3e4:	0800f118 	.word	0x0800f118

0800e3e8 <__retarget_lock_init_recursive>:
 800e3e8:	4770      	bx	lr

0800e3ea <__retarget_lock_acquire_recursive>:
 800e3ea:	4770      	bx	lr

0800e3ec <__retarget_lock_release_recursive>:
 800e3ec:	4770      	bx	lr

0800e3ee <memcpy>:
 800e3ee:	440a      	add	r2, r1
 800e3f0:	1e43      	subs	r3, r0, #1
 800e3f2:	4291      	cmp	r1, r2
 800e3f4:	d100      	bne.n	800e3f8 <memcpy+0xa>
 800e3f6:	4770      	bx	lr
 800e3f8:	b510      	push	{r4, lr}
 800e3fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3fe:	4291      	cmp	r1, r2
 800e400:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e404:	d1f9      	bne.n	800e3fa <memcpy+0xc>
 800e406:	bd10      	pop	{r4, pc}

0800e408 <__assert_func>:
 800e408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e40a:	4614      	mov	r4, r2
 800e40c:	461a      	mov	r2, r3
 800e40e:	4b09      	ldr	r3, [pc, #36]	; (800e434 <__assert_func+0x2c>)
 800e410:	4605      	mov	r5, r0
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	68d8      	ldr	r0, [r3, #12]
 800e416:	b14c      	cbz	r4, 800e42c <__assert_func+0x24>
 800e418:	4b07      	ldr	r3, [pc, #28]	; (800e438 <__assert_func+0x30>)
 800e41a:	9100      	str	r1, [sp, #0]
 800e41c:	4907      	ldr	r1, [pc, #28]	; (800e43c <__assert_func+0x34>)
 800e41e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e422:	462b      	mov	r3, r5
 800e424:	f000 f9ba 	bl	800e79c <fiprintf>
 800e428:	f000 fa5e 	bl	800e8e8 <abort>
 800e42c:	4b04      	ldr	r3, [pc, #16]	; (800e440 <__assert_func+0x38>)
 800e42e:	461c      	mov	r4, r3
 800e430:	e7f3      	b.n	800e41a <__assert_func+0x12>
 800e432:	bf00      	nop
 800e434:	200000e4 	.word	0x200000e4
 800e438:	0800f0a3 	.word	0x0800f0a3
 800e43c:	0800f0b0 	.word	0x0800f0b0
 800e440:	0800f0de 	.word	0x0800f0de

0800e444 <_free_r>:
 800e444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e446:	2900      	cmp	r1, #0
 800e448:	d043      	beq.n	800e4d2 <_free_r+0x8e>
 800e44a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e44e:	1f0c      	subs	r4, r1, #4
 800e450:	9001      	str	r0, [sp, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	bfb8      	it	lt
 800e456:	18e4      	addlt	r4, r4, r3
 800e458:	f000 f8e8 	bl	800e62c <__malloc_lock>
 800e45c:	4a1e      	ldr	r2, [pc, #120]	; (800e4d8 <_free_r+0x94>)
 800e45e:	9801      	ldr	r0, [sp, #4]
 800e460:	6813      	ldr	r3, [r2, #0]
 800e462:	b933      	cbnz	r3, 800e472 <_free_r+0x2e>
 800e464:	6063      	str	r3, [r4, #4]
 800e466:	6014      	str	r4, [r2, #0]
 800e468:	b003      	add	sp, #12
 800e46a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e46e:	f000 b8e3 	b.w	800e638 <__malloc_unlock>
 800e472:	42a3      	cmp	r3, r4
 800e474:	d908      	bls.n	800e488 <_free_r+0x44>
 800e476:	6825      	ldr	r5, [r4, #0]
 800e478:	1961      	adds	r1, r4, r5
 800e47a:	428b      	cmp	r3, r1
 800e47c:	bf01      	itttt	eq
 800e47e:	6819      	ldreq	r1, [r3, #0]
 800e480:	685b      	ldreq	r3, [r3, #4]
 800e482:	1949      	addeq	r1, r1, r5
 800e484:	6021      	streq	r1, [r4, #0]
 800e486:	e7ed      	b.n	800e464 <_free_r+0x20>
 800e488:	461a      	mov	r2, r3
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	b10b      	cbz	r3, 800e492 <_free_r+0x4e>
 800e48e:	42a3      	cmp	r3, r4
 800e490:	d9fa      	bls.n	800e488 <_free_r+0x44>
 800e492:	6811      	ldr	r1, [r2, #0]
 800e494:	1855      	adds	r5, r2, r1
 800e496:	42a5      	cmp	r5, r4
 800e498:	d10b      	bne.n	800e4b2 <_free_r+0x6e>
 800e49a:	6824      	ldr	r4, [r4, #0]
 800e49c:	4421      	add	r1, r4
 800e49e:	1854      	adds	r4, r2, r1
 800e4a0:	6011      	str	r1, [r2, #0]
 800e4a2:	42a3      	cmp	r3, r4
 800e4a4:	d1e0      	bne.n	800e468 <_free_r+0x24>
 800e4a6:	681c      	ldr	r4, [r3, #0]
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	440c      	add	r4, r1
 800e4ac:	6053      	str	r3, [r2, #4]
 800e4ae:	6014      	str	r4, [r2, #0]
 800e4b0:	e7da      	b.n	800e468 <_free_r+0x24>
 800e4b2:	d902      	bls.n	800e4ba <_free_r+0x76>
 800e4b4:	230c      	movs	r3, #12
 800e4b6:	6003      	str	r3, [r0, #0]
 800e4b8:	e7d6      	b.n	800e468 <_free_r+0x24>
 800e4ba:	6825      	ldr	r5, [r4, #0]
 800e4bc:	1961      	adds	r1, r4, r5
 800e4be:	428b      	cmp	r3, r1
 800e4c0:	bf02      	ittt	eq
 800e4c2:	6819      	ldreq	r1, [r3, #0]
 800e4c4:	685b      	ldreq	r3, [r3, #4]
 800e4c6:	1949      	addeq	r1, r1, r5
 800e4c8:	6063      	str	r3, [r4, #4]
 800e4ca:	bf08      	it	eq
 800e4cc:	6021      	streq	r1, [r4, #0]
 800e4ce:	6054      	str	r4, [r2, #4]
 800e4d0:	e7ca      	b.n	800e468 <_free_r+0x24>
 800e4d2:	b003      	add	sp, #12
 800e4d4:	bd30      	pop	{r4, r5, pc}
 800e4d6:	bf00      	nop
 800e4d8:	20015974 	.word	0x20015974

0800e4dc <malloc>:
 800e4dc:	4b02      	ldr	r3, [pc, #8]	; (800e4e8 <malloc+0xc>)
 800e4de:	4601      	mov	r1, r0
 800e4e0:	6818      	ldr	r0, [r3, #0]
 800e4e2:	f000 b823 	b.w	800e52c <_malloc_r>
 800e4e6:	bf00      	nop
 800e4e8:	200000e4 	.word	0x200000e4

0800e4ec <sbrk_aligned>:
 800e4ec:	b570      	push	{r4, r5, r6, lr}
 800e4ee:	4e0e      	ldr	r6, [pc, #56]	; (800e528 <sbrk_aligned+0x3c>)
 800e4f0:	460c      	mov	r4, r1
 800e4f2:	4605      	mov	r5, r0
 800e4f4:	6831      	ldr	r1, [r6, #0]
 800e4f6:	b911      	cbnz	r1, 800e4fe <sbrk_aligned+0x12>
 800e4f8:	f000 f9e6 	bl	800e8c8 <_sbrk_r>
 800e4fc:	6030      	str	r0, [r6, #0]
 800e4fe:	4621      	mov	r1, r4
 800e500:	4628      	mov	r0, r5
 800e502:	f000 f9e1 	bl	800e8c8 <_sbrk_r>
 800e506:	1c43      	adds	r3, r0, #1
 800e508:	d00a      	beq.n	800e520 <sbrk_aligned+0x34>
 800e50a:	1cc4      	adds	r4, r0, #3
 800e50c:	f024 0403 	bic.w	r4, r4, #3
 800e510:	42a0      	cmp	r0, r4
 800e512:	d007      	beq.n	800e524 <sbrk_aligned+0x38>
 800e514:	1a21      	subs	r1, r4, r0
 800e516:	4628      	mov	r0, r5
 800e518:	f000 f9d6 	bl	800e8c8 <_sbrk_r>
 800e51c:	3001      	adds	r0, #1
 800e51e:	d101      	bne.n	800e524 <sbrk_aligned+0x38>
 800e520:	f04f 34ff 	mov.w	r4, #4294967295
 800e524:	4620      	mov	r0, r4
 800e526:	bd70      	pop	{r4, r5, r6, pc}
 800e528:	20015978 	.word	0x20015978

0800e52c <_malloc_r>:
 800e52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e530:	1ccd      	adds	r5, r1, #3
 800e532:	4607      	mov	r7, r0
 800e534:	f025 0503 	bic.w	r5, r5, #3
 800e538:	3508      	adds	r5, #8
 800e53a:	2d0c      	cmp	r5, #12
 800e53c:	bf38      	it	cc
 800e53e:	250c      	movcc	r5, #12
 800e540:	2d00      	cmp	r5, #0
 800e542:	db01      	blt.n	800e548 <_malloc_r+0x1c>
 800e544:	42a9      	cmp	r1, r5
 800e546:	d905      	bls.n	800e554 <_malloc_r+0x28>
 800e548:	230c      	movs	r3, #12
 800e54a:	2600      	movs	r6, #0
 800e54c:	603b      	str	r3, [r7, #0]
 800e54e:	4630      	mov	r0, r6
 800e550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e554:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e628 <_malloc_r+0xfc>
 800e558:	f000 f868 	bl	800e62c <__malloc_lock>
 800e55c:	f8d8 3000 	ldr.w	r3, [r8]
 800e560:	461c      	mov	r4, r3
 800e562:	bb5c      	cbnz	r4, 800e5bc <_malloc_r+0x90>
 800e564:	4629      	mov	r1, r5
 800e566:	4638      	mov	r0, r7
 800e568:	f7ff ffc0 	bl	800e4ec <sbrk_aligned>
 800e56c:	1c43      	adds	r3, r0, #1
 800e56e:	4604      	mov	r4, r0
 800e570:	d155      	bne.n	800e61e <_malloc_r+0xf2>
 800e572:	f8d8 4000 	ldr.w	r4, [r8]
 800e576:	4626      	mov	r6, r4
 800e578:	2e00      	cmp	r6, #0
 800e57a:	d145      	bne.n	800e608 <_malloc_r+0xdc>
 800e57c:	2c00      	cmp	r4, #0
 800e57e:	d048      	beq.n	800e612 <_malloc_r+0xe6>
 800e580:	6823      	ldr	r3, [r4, #0]
 800e582:	4631      	mov	r1, r6
 800e584:	4638      	mov	r0, r7
 800e586:	eb04 0903 	add.w	r9, r4, r3
 800e58a:	f000 f99d 	bl	800e8c8 <_sbrk_r>
 800e58e:	4581      	cmp	r9, r0
 800e590:	d13f      	bne.n	800e612 <_malloc_r+0xe6>
 800e592:	6821      	ldr	r1, [r4, #0]
 800e594:	4638      	mov	r0, r7
 800e596:	1a6d      	subs	r5, r5, r1
 800e598:	4629      	mov	r1, r5
 800e59a:	f7ff ffa7 	bl	800e4ec <sbrk_aligned>
 800e59e:	3001      	adds	r0, #1
 800e5a0:	d037      	beq.n	800e612 <_malloc_r+0xe6>
 800e5a2:	6823      	ldr	r3, [r4, #0]
 800e5a4:	442b      	add	r3, r5
 800e5a6:	6023      	str	r3, [r4, #0]
 800e5a8:	f8d8 3000 	ldr.w	r3, [r8]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d038      	beq.n	800e622 <_malloc_r+0xf6>
 800e5b0:	685a      	ldr	r2, [r3, #4]
 800e5b2:	42a2      	cmp	r2, r4
 800e5b4:	d12b      	bne.n	800e60e <_malloc_r+0xe2>
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	605a      	str	r2, [r3, #4]
 800e5ba:	e00f      	b.n	800e5dc <_malloc_r+0xb0>
 800e5bc:	6822      	ldr	r2, [r4, #0]
 800e5be:	1b52      	subs	r2, r2, r5
 800e5c0:	d41f      	bmi.n	800e602 <_malloc_r+0xd6>
 800e5c2:	2a0b      	cmp	r2, #11
 800e5c4:	d917      	bls.n	800e5f6 <_malloc_r+0xca>
 800e5c6:	1961      	adds	r1, r4, r5
 800e5c8:	42a3      	cmp	r3, r4
 800e5ca:	6025      	str	r5, [r4, #0]
 800e5cc:	bf18      	it	ne
 800e5ce:	6059      	strne	r1, [r3, #4]
 800e5d0:	6863      	ldr	r3, [r4, #4]
 800e5d2:	bf08      	it	eq
 800e5d4:	f8c8 1000 	streq.w	r1, [r8]
 800e5d8:	5162      	str	r2, [r4, r5]
 800e5da:	604b      	str	r3, [r1, #4]
 800e5dc:	f104 060b 	add.w	r6, r4, #11
 800e5e0:	4638      	mov	r0, r7
 800e5e2:	f000 f829 	bl	800e638 <__malloc_unlock>
 800e5e6:	1d23      	adds	r3, r4, #4
 800e5e8:	f026 0607 	bic.w	r6, r6, #7
 800e5ec:	1af2      	subs	r2, r6, r3
 800e5ee:	d0ae      	beq.n	800e54e <_malloc_r+0x22>
 800e5f0:	1b9b      	subs	r3, r3, r6
 800e5f2:	50a3      	str	r3, [r4, r2]
 800e5f4:	e7ab      	b.n	800e54e <_malloc_r+0x22>
 800e5f6:	42a3      	cmp	r3, r4
 800e5f8:	6862      	ldr	r2, [r4, #4]
 800e5fa:	d1dd      	bne.n	800e5b8 <_malloc_r+0x8c>
 800e5fc:	f8c8 2000 	str.w	r2, [r8]
 800e600:	e7ec      	b.n	800e5dc <_malloc_r+0xb0>
 800e602:	4623      	mov	r3, r4
 800e604:	6864      	ldr	r4, [r4, #4]
 800e606:	e7ac      	b.n	800e562 <_malloc_r+0x36>
 800e608:	4634      	mov	r4, r6
 800e60a:	6876      	ldr	r6, [r6, #4]
 800e60c:	e7b4      	b.n	800e578 <_malloc_r+0x4c>
 800e60e:	4613      	mov	r3, r2
 800e610:	e7cc      	b.n	800e5ac <_malloc_r+0x80>
 800e612:	230c      	movs	r3, #12
 800e614:	4638      	mov	r0, r7
 800e616:	603b      	str	r3, [r7, #0]
 800e618:	f000 f80e 	bl	800e638 <__malloc_unlock>
 800e61c:	e797      	b.n	800e54e <_malloc_r+0x22>
 800e61e:	6025      	str	r5, [r4, #0]
 800e620:	e7dc      	b.n	800e5dc <_malloc_r+0xb0>
 800e622:	605b      	str	r3, [r3, #4]
 800e624:	deff      	udf	#255	; 0xff
 800e626:	bf00      	nop
 800e628:	20015974 	.word	0x20015974

0800e62c <__malloc_lock>:
 800e62c:	4801      	ldr	r0, [pc, #4]	; (800e634 <__malloc_lock+0x8>)
 800e62e:	f7ff bedc 	b.w	800e3ea <__retarget_lock_acquire_recursive>
 800e632:	bf00      	nop
 800e634:	20015970 	.word	0x20015970

0800e638 <__malloc_unlock>:
 800e638:	4801      	ldr	r0, [pc, #4]	; (800e640 <__malloc_unlock+0x8>)
 800e63a:	f7ff bed7 	b.w	800e3ec <__retarget_lock_release_recursive>
 800e63e:	bf00      	nop
 800e640:	20015970 	.word	0x20015970

0800e644 <__sflush_r>:
 800e644:	898a      	ldrh	r2, [r1, #12]
 800e646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e64a:	4605      	mov	r5, r0
 800e64c:	0710      	lsls	r0, r2, #28
 800e64e:	460c      	mov	r4, r1
 800e650:	d458      	bmi.n	800e704 <__sflush_r+0xc0>
 800e652:	684b      	ldr	r3, [r1, #4]
 800e654:	2b00      	cmp	r3, #0
 800e656:	dc05      	bgt.n	800e664 <__sflush_r+0x20>
 800e658:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	dc02      	bgt.n	800e664 <__sflush_r+0x20>
 800e65e:	2000      	movs	r0, #0
 800e660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e666:	2e00      	cmp	r6, #0
 800e668:	d0f9      	beq.n	800e65e <__sflush_r+0x1a>
 800e66a:	2300      	movs	r3, #0
 800e66c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e670:	682f      	ldr	r7, [r5, #0]
 800e672:	6a21      	ldr	r1, [r4, #32]
 800e674:	602b      	str	r3, [r5, #0]
 800e676:	d032      	beq.n	800e6de <__sflush_r+0x9a>
 800e678:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e67a:	89a3      	ldrh	r3, [r4, #12]
 800e67c:	075a      	lsls	r2, r3, #29
 800e67e:	d505      	bpl.n	800e68c <__sflush_r+0x48>
 800e680:	6863      	ldr	r3, [r4, #4]
 800e682:	1ac0      	subs	r0, r0, r3
 800e684:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e686:	b10b      	cbz	r3, 800e68c <__sflush_r+0x48>
 800e688:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e68a:	1ac0      	subs	r0, r0, r3
 800e68c:	2300      	movs	r3, #0
 800e68e:	4602      	mov	r2, r0
 800e690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e692:	4628      	mov	r0, r5
 800e694:	6a21      	ldr	r1, [r4, #32]
 800e696:	47b0      	blx	r6
 800e698:	1c43      	adds	r3, r0, #1
 800e69a:	89a3      	ldrh	r3, [r4, #12]
 800e69c:	d106      	bne.n	800e6ac <__sflush_r+0x68>
 800e69e:	6829      	ldr	r1, [r5, #0]
 800e6a0:	291d      	cmp	r1, #29
 800e6a2:	d82b      	bhi.n	800e6fc <__sflush_r+0xb8>
 800e6a4:	4a28      	ldr	r2, [pc, #160]	; (800e748 <__sflush_r+0x104>)
 800e6a6:	410a      	asrs	r2, r1
 800e6a8:	07d6      	lsls	r6, r2, #31
 800e6aa:	d427      	bmi.n	800e6fc <__sflush_r+0xb8>
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	04d9      	lsls	r1, r3, #19
 800e6b0:	6062      	str	r2, [r4, #4]
 800e6b2:	6922      	ldr	r2, [r4, #16]
 800e6b4:	6022      	str	r2, [r4, #0]
 800e6b6:	d504      	bpl.n	800e6c2 <__sflush_r+0x7e>
 800e6b8:	1c42      	adds	r2, r0, #1
 800e6ba:	d101      	bne.n	800e6c0 <__sflush_r+0x7c>
 800e6bc:	682b      	ldr	r3, [r5, #0]
 800e6be:	b903      	cbnz	r3, 800e6c2 <__sflush_r+0x7e>
 800e6c0:	6560      	str	r0, [r4, #84]	; 0x54
 800e6c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6c4:	602f      	str	r7, [r5, #0]
 800e6c6:	2900      	cmp	r1, #0
 800e6c8:	d0c9      	beq.n	800e65e <__sflush_r+0x1a>
 800e6ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6ce:	4299      	cmp	r1, r3
 800e6d0:	d002      	beq.n	800e6d8 <__sflush_r+0x94>
 800e6d2:	4628      	mov	r0, r5
 800e6d4:	f7ff feb6 	bl	800e444 <_free_r>
 800e6d8:	2000      	movs	r0, #0
 800e6da:	6360      	str	r0, [r4, #52]	; 0x34
 800e6dc:	e7c0      	b.n	800e660 <__sflush_r+0x1c>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	47b0      	blx	r6
 800e6e4:	1c41      	adds	r1, r0, #1
 800e6e6:	d1c8      	bne.n	800e67a <__sflush_r+0x36>
 800e6e8:	682b      	ldr	r3, [r5, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d0c5      	beq.n	800e67a <__sflush_r+0x36>
 800e6ee:	2b1d      	cmp	r3, #29
 800e6f0:	d001      	beq.n	800e6f6 <__sflush_r+0xb2>
 800e6f2:	2b16      	cmp	r3, #22
 800e6f4:	d101      	bne.n	800e6fa <__sflush_r+0xb6>
 800e6f6:	602f      	str	r7, [r5, #0]
 800e6f8:	e7b1      	b.n	800e65e <__sflush_r+0x1a>
 800e6fa:	89a3      	ldrh	r3, [r4, #12]
 800e6fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e700:	81a3      	strh	r3, [r4, #12]
 800e702:	e7ad      	b.n	800e660 <__sflush_r+0x1c>
 800e704:	690f      	ldr	r7, [r1, #16]
 800e706:	2f00      	cmp	r7, #0
 800e708:	d0a9      	beq.n	800e65e <__sflush_r+0x1a>
 800e70a:	0793      	lsls	r3, r2, #30
 800e70c:	680e      	ldr	r6, [r1, #0]
 800e70e:	600f      	str	r7, [r1, #0]
 800e710:	bf0c      	ite	eq
 800e712:	694b      	ldreq	r3, [r1, #20]
 800e714:	2300      	movne	r3, #0
 800e716:	eba6 0807 	sub.w	r8, r6, r7
 800e71a:	608b      	str	r3, [r1, #8]
 800e71c:	f1b8 0f00 	cmp.w	r8, #0
 800e720:	dd9d      	ble.n	800e65e <__sflush_r+0x1a>
 800e722:	4643      	mov	r3, r8
 800e724:	463a      	mov	r2, r7
 800e726:	6a21      	ldr	r1, [r4, #32]
 800e728:	4628      	mov	r0, r5
 800e72a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e72c:	47b0      	blx	r6
 800e72e:	2800      	cmp	r0, #0
 800e730:	dc06      	bgt.n	800e740 <__sflush_r+0xfc>
 800e732:	89a3      	ldrh	r3, [r4, #12]
 800e734:	f04f 30ff 	mov.w	r0, #4294967295
 800e738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e73c:	81a3      	strh	r3, [r4, #12]
 800e73e:	e78f      	b.n	800e660 <__sflush_r+0x1c>
 800e740:	4407      	add	r7, r0
 800e742:	eba8 0800 	sub.w	r8, r8, r0
 800e746:	e7e9      	b.n	800e71c <__sflush_r+0xd8>
 800e748:	dfbffffe 	.word	0xdfbffffe

0800e74c <_fflush_r>:
 800e74c:	b538      	push	{r3, r4, r5, lr}
 800e74e:	690b      	ldr	r3, [r1, #16]
 800e750:	4605      	mov	r5, r0
 800e752:	460c      	mov	r4, r1
 800e754:	b913      	cbnz	r3, 800e75c <_fflush_r+0x10>
 800e756:	2500      	movs	r5, #0
 800e758:	4628      	mov	r0, r5
 800e75a:	bd38      	pop	{r3, r4, r5, pc}
 800e75c:	b118      	cbz	r0, 800e766 <_fflush_r+0x1a>
 800e75e:	6a03      	ldr	r3, [r0, #32]
 800e760:	b90b      	cbnz	r3, 800e766 <_fflush_r+0x1a>
 800e762:	f7ff fc5f 	bl	800e024 <__sinit>
 800e766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d0f3      	beq.n	800e756 <_fflush_r+0xa>
 800e76e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e770:	07d0      	lsls	r0, r2, #31
 800e772:	d404      	bmi.n	800e77e <_fflush_r+0x32>
 800e774:	0599      	lsls	r1, r3, #22
 800e776:	d402      	bmi.n	800e77e <_fflush_r+0x32>
 800e778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e77a:	f7ff fe36 	bl	800e3ea <__retarget_lock_acquire_recursive>
 800e77e:	4628      	mov	r0, r5
 800e780:	4621      	mov	r1, r4
 800e782:	f7ff ff5f 	bl	800e644 <__sflush_r>
 800e786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e788:	4605      	mov	r5, r0
 800e78a:	07da      	lsls	r2, r3, #31
 800e78c:	d4e4      	bmi.n	800e758 <_fflush_r+0xc>
 800e78e:	89a3      	ldrh	r3, [r4, #12]
 800e790:	059b      	lsls	r3, r3, #22
 800e792:	d4e1      	bmi.n	800e758 <_fflush_r+0xc>
 800e794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e796:	f7ff fe29 	bl	800e3ec <__retarget_lock_release_recursive>
 800e79a:	e7dd      	b.n	800e758 <_fflush_r+0xc>

0800e79c <fiprintf>:
 800e79c:	b40e      	push	{r1, r2, r3}
 800e79e:	b503      	push	{r0, r1, lr}
 800e7a0:	ab03      	add	r3, sp, #12
 800e7a2:	4601      	mov	r1, r0
 800e7a4:	4805      	ldr	r0, [pc, #20]	; (800e7bc <fiprintf+0x20>)
 800e7a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7aa:	6800      	ldr	r0, [r0, #0]
 800e7ac:	9301      	str	r3, [sp, #4]
 800e7ae:	f000 f8cb 	bl	800e948 <_vfiprintf_r>
 800e7b2:	b002      	add	sp, #8
 800e7b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7b8:	b003      	add	sp, #12
 800e7ba:	4770      	bx	lr
 800e7bc:	200000e4 	.word	0x200000e4

0800e7c0 <__swhatbuf_r>:
 800e7c0:	b570      	push	{r4, r5, r6, lr}
 800e7c2:	460c      	mov	r4, r1
 800e7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7c8:	b096      	sub	sp, #88	; 0x58
 800e7ca:	4615      	mov	r5, r2
 800e7cc:	2900      	cmp	r1, #0
 800e7ce:	461e      	mov	r6, r3
 800e7d0:	da0c      	bge.n	800e7ec <__swhatbuf_r+0x2c>
 800e7d2:	89a3      	ldrh	r3, [r4, #12]
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e7da:	bf0c      	ite	eq
 800e7dc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e7e0:	2340      	movne	r3, #64	; 0x40
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	6031      	str	r1, [r6, #0]
 800e7e6:	602b      	str	r3, [r5, #0]
 800e7e8:	b016      	add	sp, #88	; 0x58
 800e7ea:	bd70      	pop	{r4, r5, r6, pc}
 800e7ec:	466a      	mov	r2, sp
 800e7ee:	f000 f849 	bl	800e884 <_fstat_r>
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	dbed      	blt.n	800e7d2 <__swhatbuf_r+0x12>
 800e7f6:	9901      	ldr	r1, [sp, #4]
 800e7f8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e7fc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e800:	4259      	negs	r1, r3
 800e802:	4159      	adcs	r1, r3
 800e804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e808:	e7eb      	b.n	800e7e2 <__swhatbuf_r+0x22>

0800e80a <__smakebuf_r>:
 800e80a:	898b      	ldrh	r3, [r1, #12]
 800e80c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e80e:	079d      	lsls	r5, r3, #30
 800e810:	4606      	mov	r6, r0
 800e812:	460c      	mov	r4, r1
 800e814:	d507      	bpl.n	800e826 <__smakebuf_r+0x1c>
 800e816:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e81a:	6023      	str	r3, [r4, #0]
 800e81c:	6123      	str	r3, [r4, #16]
 800e81e:	2301      	movs	r3, #1
 800e820:	6163      	str	r3, [r4, #20]
 800e822:	b002      	add	sp, #8
 800e824:	bd70      	pop	{r4, r5, r6, pc}
 800e826:	ab01      	add	r3, sp, #4
 800e828:	466a      	mov	r2, sp
 800e82a:	f7ff ffc9 	bl	800e7c0 <__swhatbuf_r>
 800e82e:	9900      	ldr	r1, [sp, #0]
 800e830:	4605      	mov	r5, r0
 800e832:	4630      	mov	r0, r6
 800e834:	f7ff fe7a 	bl	800e52c <_malloc_r>
 800e838:	b948      	cbnz	r0, 800e84e <__smakebuf_r+0x44>
 800e83a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e83e:	059a      	lsls	r2, r3, #22
 800e840:	d4ef      	bmi.n	800e822 <__smakebuf_r+0x18>
 800e842:	f023 0303 	bic.w	r3, r3, #3
 800e846:	f043 0302 	orr.w	r3, r3, #2
 800e84a:	81a3      	strh	r3, [r4, #12]
 800e84c:	e7e3      	b.n	800e816 <__smakebuf_r+0xc>
 800e84e:	89a3      	ldrh	r3, [r4, #12]
 800e850:	6020      	str	r0, [r4, #0]
 800e852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e856:	6120      	str	r0, [r4, #16]
 800e858:	81a3      	strh	r3, [r4, #12]
 800e85a:	9b00      	ldr	r3, [sp, #0]
 800e85c:	6163      	str	r3, [r4, #20]
 800e85e:	9b01      	ldr	r3, [sp, #4]
 800e860:	b15b      	cbz	r3, 800e87a <__smakebuf_r+0x70>
 800e862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e866:	4630      	mov	r0, r6
 800e868:	f000 f81e 	bl	800e8a8 <_isatty_r>
 800e86c:	b128      	cbz	r0, 800e87a <__smakebuf_r+0x70>
 800e86e:	89a3      	ldrh	r3, [r4, #12]
 800e870:	f023 0303 	bic.w	r3, r3, #3
 800e874:	f043 0301 	orr.w	r3, r3, #1
 800e878:	81a3      	strh	r3, [r4, #12]
 800e87a:	89a3      	ldrh	r3, [r4, #12]
 800e87c:	431d      	orrs	r5, r3
 800e87e:	81a5      	strh	r5, [r4, #12]
 800e880:	e7cf      	b.n	800e822 <__smakebuf_r+0x18>
	...

0800e884 <_fstat_r>:
 800e884:	b538      	push	{r3, r4, r5, lr}
 800e886:	2300      	movs	r3, #0
 800e888:	4d06      	ldr	r5, [pc, #24]	; (800e8a4 <_fstat_r+0x20>)
 800e88a:	4604      	mov	r4, r0
 800e88c:	4608      	mov	r0, r1
 800e88e:	4611      	mov	r1, r2
 800e890:	602b      	str	r3, [r5, #0]
 800e892:	f7f2 fa0e 	bl	8000cb2 <_fstat>
 800e896:	1c43      	adds	r3, r0, #1
 800e898:	d102      	bne.n	800e8a0 <_fstat_r+0x1c>
 800e89a:	682b      	ldr	r3, [r5, #0]
 800e89c:	b103      	cbz	r3, 800e8a0 <_fstat_r+0x1c>
 800e89e:	6023      	str	r3, [r4, #0]
 800e8a0:	bd38      	pop	{r3, r4, r5, pc}
 800e8a2:	bf00      	nop
 800e8a4:	2001596c 	.word	0x2001596c

0800e8a8 <_isatty_r>:
 800e8a8:	b538      	push	{r3, r4, r5, lr}
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	4d05      	ldr	r5, [pc, #20]	; (800e8c4 <_isatty_r+0x1c>)
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	4608      	mov	r0, r1
 800e8b2:	602b      	str	r3, [r5, #0]
 800e8b4:	f7f2 fa0d 	bl	8000cd2 <_isatty>
 800e8b8:	1c43      	adds	r3, r0, #1
 800e8ba:	d102      	bne.n	800e8c2 <_isatty_r+0x1a>
 800e8bc:	682b      	ldr	r3, [r5, #0]
 800e8be:	b103      	cbz	r3, 800e8c2 <_isatty_r+0x1a>
 800e8c0:	6023      	str	r3, [r4, #0]
 800e8c2:	bd38      	pop	{r3, r4, r5, pc}
 800e8c4:	2001596c 	.word	0x2001596c

0800e8c8 <_sbrk_r>:
 800e8c8:	b538      	push	{r3, r4, r5, lr}
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	4d05      	ldr	r5, [pc, #20]	; (800e8e4 <_sbrk_r+0x1c>)
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	4608      	mov	r0, r1
 800e8d2:	602b      	str	r3, [r5, #0]
 800e8d4:	f7f2 fa16 	bl	8000d04 <_sbrk>
 800e8d8:	1c43      	adds	r3, r0, #1
 800e8da:	d102      	bne.n	800e8e2 <_sbrk_r+0x1a>
 800e8dc:	682b      	ldr	r3, [r5, #0]
 800e8de:	b103      	cbz	r3, 800e8e2 <_sbrk_r+0x1a>
 800e8e0:	6023      	str	r3, [r4, #0]
 800e8e2:	bd38      	pop	{r3, r4, r5, pc}
 800e8e4:	2001596c 	.word	0x2001596c

0800e8e8 <abort>:
 800e8e8:	2006      	movs	r0, #6
 800e8ea:	b508      	push	{r3, lr}
 800e8ec:	f000 fb00 	bl	800eef0 <raise>
 800e8f0:	2001      	movs	r0, #1
 800e8f2:	f7f2 f98f 	bl	8000c14 <_exit>

0800e8f6 <__sfputc_r>:
 800e8f6:	6893      	ldr	r3, [r2, #8]
 800e8f8:	3b01      	subs	r3, #1
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	6093      	str	r3, [r2, #8]
 800e8fe:	b410      	push	{r4}
 800e900:	da08      	bge.n	800e914 <__sfputc_r+0x1e>
 800e902:	6994      	ldr	r4, [r2, #24]
 800e904:	42a3      	cmp	r3, r4
 800e906:	db01      	blt.n	800e90c <__sfputc_r+0x16>
 800e908:	290a      	cmp	r1, #10
 800e90a:	d103      	bne.n	800e914 <__sfputc_r+0x1e>
 800e90c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e910:	f7ff bc5d 	b.w	800e1ce <__swbuf_r>
 800e914:	6813      	ldr	r3, [r2, #0]
 800e916:	1c58      	adds	r0, r3, #1
 800e918:	6010      	str	r0, [r2, #0]
 800e91a:	4608      	mov	r0, r1
 800e91c:	7019      	strb	r1, [r3, #0]
 800e91e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e922:	4770      	bx	lr

0800e924 <__sfputs_r>:
 800e924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e926:	4606      	mov	r6, r0
 800e928:	460f      	mov	r7, r1
 800e92a:	4614      	mov	r4, r2
 800e92c:	18d5      	adds	r5, r2, r3
 800e92e:	42ac      	cmp	r4, r5
 800e930:	d101      	bne.n	800e936 <__sfputs_r+0x12>
 800e932:	2000      	movs	r0, #0
 800e934:	e007      	b.n	800e946 <__sfputs_r+0x22>
 800e936:	463a      	mov	r2, r7
 800e938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e93c:	4630      	mov	r0, r6
 800e93e:	f7ff ffda 	bl	800e8f6 <__sfputc_r>
 800e942:	1c43      	adds	r3, r0, #1
 800e944:	d1f3      	bne.n	800e92e <__sfputs_r+0xa>
 800e946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e948 <_vfiprintf_r>:
 800e948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e94c:	460d      	mov	r5, r1
 800e94e:	b09d      	sub	sp, #116	; 0x74
 800e950:	4614      	mov	r4, r2
 800e952:	4698      	mov	r8, r3
 800e954:	4606      	mov	r6, r0
 800e956:	b118      	cbz	r0, 800e960 <_vfiprintf_r+0x18>
 800e958:	6a03      	ldr	r3, [r0, #32]
 800e95a:	b90b      	cbnz	r3, 800e960 <_vfiprintf_r+0x18>
 800e95c:	f7ff fb62 	bl	800e024 <__sinit>
 800e960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e962:	07d9      	lsls	r1, r3, #31
 800e964:	d405      	bmi.n	800e972 <_vfiprintf_r+0x2a>
 800e966:	89ab      	ldrh	r3, [r5, #12]
 800e968:	059a      	lsls	r2, r3, #22
 800e96a:	d402      	bmi.n	800e972 <_vfiprintf_r+0x2a>
 800e96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e96e:	f7ff fd3c 	bl	800e3ea <__retarget_lock_acquire_recursive>
 800e972:	89ab      	ldrh	r3, [r5, #12]
 800e974:	071b      	lsls	r3, r3, #28
 800e976:	d501      	bpl.n	800e97c <_vfiprintf_r+0x34>
 800e978:	692b      	ldr	r3, [r5, #16]
 800e97a:	b99b      	cbnz	r3, 800e9a4 <_vfiprintf_r+0x5c>
 800e97c:	4629      	mov	r1, r5
 800e97e:	4630      	mov	r0, r6
 800e980:	f7ff fc62 	bl	800e248 <__swsetup_r>
 800e984:	b170      	cbz	r0, 800e9a4 <_vfiprintf_r+0x5c>
 800e986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e988:	07dc      	lsls	r4, r3, #31
 800e98a:	d504      	bpl.n	800e996 <_vfiprintf_r+0x4e>
 800e98c:	f04f 30ff 	mov.w	r0, #4294967295
 800e990:	b01d      	add	sp, #116	; 0x74
 800e992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e996:	89ab      	ldrh	r3, [r5, #12]
 800e998:	0598      	lsls	r0, r3, #22
 800e99a:	d4f7      	bmi.n	800e98c <_vfiprintf_r+0x44>
 800e99c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e99e:	f7ff fd25 	bl	800e3ec <__retarget_lock_release_recursive>
 800e9a2:	e7f3      	b.n	800e98c <_vfiprintf_r+0x44>
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9aa:	f04f 0901 	mov.w	r9, #1
 800e9ae:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800eb68 <_vfiprintf_r+0x220>
 800e9b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e9b4:	2320      	movs	r3, #32
 800e9b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9ba:	2330      	movs	r3, #48	; 0x30
 800e9bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9c0:	4623      	mov	r3, r4
 800e9c2:	469a      	mov	sl, r3
 800e9c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9c8:	b10a      	cbz	r2, 800e9ce <_vfiprintf_r+0x86>
 800e9ca:	2a25      	cmp	r2, #37	; 0x25
 800e9cc:	d1f9      	bne.n	800e9c2 <_vfiprintf_r+0x7a>
 800e9ce:	ebba 0b04 	subs.w	fp, sl, r4
 800e9d2:	d00b      	beq.n	800e9ec <_vfiprintf_r+0xa4>
 800e9d4:	465b      	mov	r3, fp
 800e9d6:	4622      	mov	r2, r4
 800e9d8:	4629      	mov	r1, r5
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f7ff ffa2 	bl	800e924 <__sfputs_r>
 800e9e0:	3001      	adds	r0, #1
 800e9e2:	f000 80a9 	beq.w	800eb38 <_vfiprintf_r+0x1f0>
 800e9e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9e8:	445a      	add	r2, fp
 800e9ea:	9209      	str	r2, [sp, #36]	; 0x24
 800e9ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	f000 80a1 	beq.w	800eb38 <_vfiprintf_r+0x1f0>
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9fc:	f10a 0a01 	add.w	sl, sl, #1
 800ea00:	9304      	str	r3, [sp, #16]
 800ea02:	9307      	str	r3, [sp, #28]
 800ea04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea08:	931a      	str	r3, [sp, #104]	; 0x68
 800ea0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea0e:	4654      	mov	r4, sl
 800ea10:	2205      	movs	r2, #5
 800ea12:	4855      	ldr	r0, [pc, #340]	; (800eb68 <_vfiprintf_r+0x220>)
 800ea14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea18:	f000 fa86 	bl	800ef28 <memchr>
 800ea1c:	9a04      	ldr	r2, [sp, #16]
 800ea1e:	b9d8      	cbnz	r0, 800ea58 <_vfiprintf_r+0x110>
 800ea20:	06d1      	lsls	r1, r2, #27
 800ea22:	bf44      	itt	mi
 800ea24:	2320      	movmi	r3, #32
 800ea26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea2a:	0713      	lsls	r3, r2, #28
 800ea2c:	bf44      	itt	mi
 800ea2e:	232b      	movmi	r3, #43	; 0x2b
 800ea30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea34:	f89a 3000 	ldrb.w	r3, [sl]
 800ea38:	2b2a      	cmp	r3, #42	; 0x2a
 800ea3a:	d015      	beq.n	800ea68 <_vfiprintf_r+0x120>
 800ea3c:	9a07      	ldr	r2, [sp, #28]
 800ea3e:	4654      	mov	r4, sl
 800ea40:	2000      	movs	r0, #0
 800ea42:	f04f 0c0a 	mov.w	ip, #10
 800ea46:	4621      	mov	r1, r4
 800ea48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea4c:	3b30      	subs	r3, #48	; 0x30
 800ea4e:	2b09      	cmp	r3, #9
 800ea50:	d94d      	bls.n	800eaee <_vfiprintf_r+0x1a6>
 800ea52:	b1b0      	cbz	r0, 800ea82 <_vfiprintf_r+0x13a>
 800ea54:	9207      	str	r2, [sp, #28]
 800ea56:	e014      	b.n	800ea82 <_vfiprintf_r+0x13a>
 800ea58:	eba0 0308 	sub.w	r3, r0, r8
 800ea5c:	46a2      	mov	sl, r4
 800ea5e:	fa09 f303 	lsl.w	r3, r9, r3
 800ea62:	4313      	orrs	r3, r2
 800ea64:	9304      	str	r3, [sp, #16]
 800ea66:	e7d2      	b.n	800ea0e <_vfiprintf_r+0xc6>
 800ea68:	9b03      	ldr	r3, [sp, #12]
 800ea6a:	1d19      	adds	r1, r3, #4
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	9103      	str	r1, [sp, #12]
 800ea72:	bfbb      	ittet	lt
 800ea74:	425b      	neglt	r3, r3
 800ea76:	f042 0202 	orrlt.w	r2, r2, #2
 800ea7a:	9307      	strge	r3, [sp, #28]
 800ea7c:	9307      	strlt	r3, [sp, #28]
 800ea7e:	bfb8      	it	lt
 800ea80:	9204      	strlt	r2, [sp, #16]
 800ea82:	7823      	ldrb	r3, [r4, #0]
 800ea84:	2b2e      	cmp	r3, #46	; 0x2e
 800ea86:	d10c      	bne.n	800eaa2 <_vfiprintf_r+0x15a>
 800ea88:	7863      	ldrb	r3, [r4, #1]
 800ea8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ea8c:	d134      	bne.n	800eaf8 <_vfiprintf_r+0x1b0>
 800ea8e:	9b03      	ldr	r3, [sp, #12]
 800ea90:	3402      	adds	r4, #2
 800ea92:	1d1a      	adds	r2, r3, #4
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	9203      	str	r2, [sp, #12]
 800ea9a:	bfb8      	it	lt
 800ea9c:	f04f 33ff 	movlt.w	r3, #4294967295
 800eaa0:	9305      	str	r3, [sp, #20]
 800eaa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800eb78 <_vfiprintf_r+0x230>
 800eaa6:	2203      	movs	r2, #3
 800eaa8:	7821      	ldrb	r1, [r4, #0]
 800eaaa:	4650      	mov	r0, sl
 800eaac:	f000 fa3c 	bl	800ef28 <memchr>
 800eab0:	b138      	cbz	r0, 800eac2 <_vfiprintf_r+0x17a>
 800eab2:	eba0 000a 	sub.w	r0, r0, sl
 800eab6:	2240      	movs	r2, #64	; 0x40
 800eab8:	9b04      	ldr	r3, [sp, #16]
 800eaba:	3401      	adds	r4, #1
 800eabc:	4082      	lsls	r2, r0
 800eabe:	4313      	orrs	r3, r2
 800eac0:	9304      	str	r3, [sp, #16]
 800eac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eac6:	2206      	movs	r2, #6
 800eac8:	4828      	ldr	r0, [pc, #160]	; (800eb6c <_vfiprintf_r+0x224>)
 800eaca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eace:	f000 fa2b 	bl	800ef28 <memchr>
 800ead2:	2800      	cmp	r0, #0
 800ead4:	d03f      	beq.n	800eb56 <_vfiprintf_r+0x20e>
 800ead6:	4b26      	ldr	r3, [pc, #152]	; (800eb70 <_vfiprintf_r+0x228>)
 800ead8:	bb1b      	cbnz	r3, 800eb22 <_vfiprintf_r+0x1da>
 800eada:	9b03      	ldr	r3, [sp, #12]
 800eadc:	3307      	adds	r3, #7
 800eade:	f023 0307 	bic.w	r3, r3, #7
 800eae2:	3308      	adds	r3, #8
 800eae4:	9303      	str	r3, [sp, #12]
 800eae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eae8:	443b      	add	r3, r7
 800eaea:	9309      	str	r3, [sp, #36]	; 0x24
 800eaec:	e768      	b.n	800e9c0 <_vfiprintf_r+0x78>
 800eaee:	fb0c 3202 	mla	r2, ip, r2, r3
 800eaf2:	460c      	mov	r4, r1
 800eaf4:	2001      	movs	r0, #1
 800eaf6:	e7a6      	b.n	800ea46 <_vfiprintf_r+0xfe>
 800eaf8:	2300      	movs	r3, #0
 800eafa:	3401      	adds	r4, #1
 800eafc:	f04f 0c0a 	mov.w	ip, #10
 800eb00:	4619      	mov	r1, r3
 800eb02:	9305      	str	r3, [sp, #20]
 800eb04:	4620      	mov	r0, r4
 800eb06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb0a:	3a30      	subs	r2, #48	; 0x30
 800eb0c:	2a09      	cmp	r2, #9
 800eb0e:	d903      	bls.n	800eb18 <_vfiprintf_r+0x1d0>
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d0c6      	beq.n	800eaa2 <_vfiprintf_r+0x15a>
 800eb14:	9105      	str	r1, [sp, #20]
 800eb16:	e7c4      	b.n	800eaa2 <_vfiprintf_r+0x15a>
 800eb18:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	2301      	movs	r3, #1
 800eb20:	e7f0      	b.n	800eb04 <_vfiprintf_r+0x1bc>
 800eb22:	ab03      	add	r3, sp, #12
 800eb24:	462a      	mov	r2, r5
 800eb26:	a904      	add	r1, sp, #16
 800eb28:	4630      	mov	r0, r6
 800eb2a:	9300      	str	r3, [sp, #0]
 800eb2c:	4b11      	ldr	r3, [pc, #68]	; (800eb74 <_vfiprintf_r+0x22c>)
 800eb2e:	f3af 8000 	nop.w
 800eb32:	4607      	mov	r7, r0
 800eb34:	1c78      	adds	r0, r7, #1
 800eb36:	d1d6      	bne.n	800eae6 <_vfiprintf_r+0x19e>
 800eb38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb3a:	07d9      	lsls	r1, r3, #31
 800eb3c:	d405      	bmi.n	800eb4a <_vfiprintf_r+0x202>
 800eb3e:	89ab      	ldrh	r3, [r5, #12]
 800eb40:	059a      	lsls	r2, r3, #22
 800eb42:	d402      	bmi.n	800eb4a <_vfiprintf_r+0x202>
 800eb44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb46:	f7ff fc51 	bl	800e3ec <__retarget_lock_release_recursive>
 800eb4a:	89ab      	ldrh	r3, [r5, #12]
 800eb4c:	065b      	lsls	r3, r3, #25
 800eb4e:	f53f af1d 	bmi.w	800e98c <_vfiprintf_r+0x44>
 800eb52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb54:	e71c      	b.n	800e990 <_vfiprintf_r+0x48>
 800eb56:	ab03      	add	r3, sp, #12
 800eb58:	462a      	mov	r2, r5
 800eb5a:	a904      	add	r1, sp, #16
 800eb5c:	4630      	mov	r0, r6
 800eb5e:	9300      	str	r3, [sp, #0]
 800eb60:	4b04      	ldr	r3, [pc, #16]	; (800eb74 <_vfiprintf_r+0x22c>)
 800eb62:	f000 f87d 	bl	800ec60 <_printf_i>
 800eb66:	e7e4      	b.n	800eb32 <_vfiprintf_r+0x1ea>
 800eb68:	0800f0df 	.word	0x0800f0df
 800eb6c:	0800f0e9 	.word	0x0800f0e9
 800eb70:	00000000 	.word	0x00000000
 800eb74:	0800e925 	.word	0x0800e925
 800eb78:	0800f0e5 	.word	0x0800f0e5

0800eb7c <_printf_common>:
 800eb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb80:	4616      	mov	r6, r2
 800eb82:	4699      	mov	r9, r3
 800eb84:	688a      	ldr	r2, [r1, #8]
 800eb86:	4607      	mov	r7, r0
 800eb88:	690b      	ldr	r3, [r1, #16]
 800eb8a:	460c      	mov	r4, r1
 800eb8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb90:	4293      	cmp	r3, r2
 800eb92:	bfb8      	it	lt
 800eb94:	4613      	movlt	r3, r2
 800eb96:	6033      	str	r3, [r6, #0]
 800eb98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb9c:	b10a      	cbz	r2, 800eba2 <_printf_common+0x26>
 800eb9e:	3301      	adds	r3, #1
 800eba0:	6033      	str	r3, [r6, #0]
 800eba2:	6823      	ldr	r3, [r4, #0]
 800eba4:	0699      	lsls	r1, r3, #26
 800eba6:	bf42      	ittt	mi
 800eba8:	6833      	ldrmi	r3, [r6, #0]
 800ebaa:	3302      	addmi	r3, #2
 800ebac:	6033      	strmi	r3, [r6, #0]
 800ebae:	6825      	ldr	r5, [r4, #0]
 800ebb0:	f015 0506 	ands.w	r5, r5, #6
 800ebb4:	d106      	bne.n	800ebc4 <_printf_common+0x48>
 800ebb6:	f104 0a19 	add.w	sl, r4, #25
 800ebba:	68e3      	ldr	r3, [r4, #12]
 800ebbc:	6832      	ldr	r2, [r6, #0]
 800ebbe:	1a9b      	subs	r3, r3, r2
 800ebc0:	42ab      	cmp	r3, r5
 800ebc2:	dc2b      	bgt.n	800ec1c <_printf_common+0xa0>
 800ebc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ebc8:	1e13      	subs	r3, r2, #0
 800ebca:	6822      	ldr	r2, [r4, #0]
 800ebcc:	bf18      	it	ne
 800ebce:	2301      	movne	r3, #1
 800ebd0:	0692      	lsls	r2, r2, #26
 800ebd2:	d430      	bmi.n	800ec36 <_printf_common+0xba>
 800ebd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebd8:	4649      	mov	r1, r9
 800ebda:	4638      	mov	r0, r7
 800ebdc:	47c0      	blx	r8
 800ebde:	3001      	adds	r0, #1
 800ebe0:	d023      	beq.n	800ec2a <_printf_common+0xae>
 800ebe2:	6823      	ldr	r3, [r4, #0]
 800ebe4:	341a      	adds	r4, #26
 800ebe6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800ebea:	f003 0306 	and.w	r3, r3, #6
 800ebee:	2b04      	cmp	r3, #4
 800ebf0:	bf0a      	itet	eq
 800ebf2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800ebf6:	2500      	movne	r5, #0
 800ebf8:	6833      	ldreq	r3, [r6, #0]
 800ebfa:	f04f 0600 	mov.w	r6, #0
 800ebfe:	bf08      	it	eq
 800ec00:	1aed      	subeq	r5, r5, r3
 800ec02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ec06:	bf08      	it	eq
 800ec08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	bfc4      	itt	gt
 800ec10:	1a9b      	subgt	r3, r3, r2
 800ec12:	18ed      	addgt	r5, r5, r3
 800ec14:	42b5      	cmp	r5, r6
 800ec16:	d11a      	bne.n	800ec4e <_printf_common+0xd2>
 800ec18:	2000      	movs	r0, #0
 800ec1a:	e008      	b.n	800ec2e <_printf_common+0xb2>
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	4652      	mov	r2, sl
 800ec20:	4649      	mov	r1, r9
 800ec22:	4638      	mov	r0, r7
 800ec24:	47c0      	blx	r8
 800ec26:	3001      	adds	r0, #1
 800ec28:	d103      	bne.n	800ec32 <_printf_common+0xb6>
 800ec2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec32:	3501      	adds	r5, #1
 800ec34:	e7c1      	b.n	800ebba <_printf_common+0x3e>
 800ec36:	18e1      	adds	r1, r4, r3
 800ec38:	1c5a      	adds	r2, r3, #1
 800ec3a:	2030      	movs	r0, #48	; 0x30
 800ec3c:	3302      	adds	r3, #2
 800ec3e:	4422      	add	r2, r4
 800ec40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec4c:	e7c2      	b.n	800ebd4 <_printf_common+0x58>
 800ec4e:	2301      	movs	r3, #1
 800ec50:	4622      	mov	r2, r4
 800ec52:	4649      	mov	r1, r9
 800ec54:	4638      	mov	r0, r7
 800ec56:	47c0      	blx	r8
 800ec58:	3001      	adds	r0, #1
 800ec5a:	d0e6      	beq.n	800ec2a <_printf_common+0xae>
 800ec5c:	3601      	adds	r6, #1
 800ec5e:	e7d9      	b.n	800ec14 <_printf_common+0x98>

0800ec60 <_printf_i>:
 800ec60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec64:	7e0f      	ldrb	r7, [r1, #24]
 800ec66:	4691      	mov	r9, r2
 800ec68:	4680      	mov	r8, r0
 800ec6a:	460c      	mov	r4, r1
 800ec6c:	2f78      	cmp	r7, #120	; 0x78
 800ec6e:	469a      	mov	sl, r3
 800ec70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ec76:	d807      	bhi.n	800ec88 <_printf_i+0x28>
 800ec78:	2f62      	cmp	r7, #98	; 0x62
 800ec7a:	d80a      	bhi.n	800ec92 <_printf_i+0x32>
 800ec7c:	2f00      	cmp	r7, #0
 800ec7e:	f000 80d3 	beq.w	800ee28 <_printf_i+0x1c8>
 800ec82:	2f58      	cmp	r7, #88	; 0x58
 800ec84:	f000 80bf 	beq.w	800ee06 <_printf_i+0x1a6>
 800ec88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec90:	e03a      	b.n	800ed08 <_printf_i+0xa8>
 800ec92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec96:	2b15      	cmp	r3, #21
 800ec98:	d8f6      	bhi.n	800ec88 <_printf_i+0x28>
 800ec9a:	a101      	add	r1, pc, #4	; (adr r1, 800eca0 <_printf_i+0x40>)
 800ec9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eca0:	0800ecf9 	.word	0x0800ecf9
 800eca4:	0800ed0d 	.word	0x0800ed0d
 800eca8:	0800ec89 	.word	0x0800ec89
 800ecac:	0800ec89 	.word	0x0800ec89
 800ecb0:	0800ec89 	.word	0x0800ec89
 800ecb4:	0800ec89 	.word	0x0800ec89
 800ecb8:	0800ed0d 	.word	0x0800ed0d
 800ecbc:	0800ec89 	.word	0x0800ec89
 800ecc0:	0800ec89 	.word	0x0800ec89
 800ecc4:	0800ec89 	.word	0x0800ec89
 800ecc8:	0800ec89 	.word	0x0800ec89
 800eccc:	0800ee0f 	.word	0x0800ee0f
 800ecd0:	0800ed39 	.word	0x0800ed39
 800ecd4:	0800edcb 	.word	0x0800edcb
 800ecd8:	0800ec89 	.word	0x0800ec89
 800ecdc:	0800ec89 	.word	0x0800ec89
 800ece0:	0800ee31 	.word	0x0800ee31
 800ece4:	0800ec89 	.word	0x0800ec89
 800ece8:	0800ed39 	.word	0x0800ed39
 800ecec:	0800ec89 	.word	0x0800ec89
 800ecf0:	0800ec89 	.word	0x0800ec89
 800ecf4:	0800edd3 	.word	0x0800edd3
 800ecf8:	682b      	ldr	r3, [r5, #0]
 800ecfa:	1d1a      	adds	r2, r3, #4
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	602a      	str	r2, [r5, #0]
 800ed00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed08:	2301      	movs	r3, #1
 800ed0a:	e09e      	b.n	800ee4a <_printf_i+0x1ea>
 800ed0c:	6820      	ldr	r0, [r4, #0]
 800ed0e:	682b      	ldr	r3, [r5, #0]
 800ed10:	0607      	lsls	r7, r0, #24
 800ed12:	f103 0104 	add.w	r1, r3, #4
 800ed16:	6029      	str	r1, [r5, #0]
 800ed18:	d501      	bpl.n	800ed1e <_printf_i+0xbe>
 800ed1a:	681e      	ldr	r6, [r3, #0]
 800ed1c:	e003      	b.n	800ed26 <_printf_i+0xc6>
 800ed1e:	0646      	lsls	r6, r0, #25
 800ed20:	d5fb      	bpl.n	800ed1a <_printf_i+0xba>
 800ed22:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ed26:	2e00      	cmp	r6, #0
 800ed28:	da03      	bge.n	800ed32 <_printf_i+0xd2>
 800ed2a:	232d      	movs	r3, #45	; 0x2d
 800ed2c:	4276      	negs	r6, r6
 800ed2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed32:	4859      	ldr	r0, [pc, #356]	; (800ee98 <_printf_i+0x238>)
 800ed34:	230a      	movs	r3, #10
 800ed36:	e012      	b.n	800ed5e <_printf_i+0xfe>
 800ed38:	682b      	ldr	r3, [r5, #0]
 800ed3a:	6820      	ldr	r0, [r4, #0]
 800ed3c:	1d19      	adds	r1, r3, #4
 800ed3e:	6029      	str	r1, [r5, #0]
 800ed40:	0605      	lsls	r5, r0, #24
 800ed42:	d501      	bpl.n	800ed48 <_printf_i+0xe8>
 800ed44:	681e      	ldr	r6, [r3, #0]
 800ed46:	e002      	b.n	800ed4e <_printf_i+0xee>
 800ed48:	0641      	lsls	r1, r0, #25
 800ed4a:	d5fb      	bpl.n	800ed44 <_printf_i+0xe4>
 800ed4c:	881e      	ldrh	r6, [r3, #0]
 800ed4e:	2f6f      	cmp	r7, #111	; 0x6f
 800ed50:	4851      	ldr	r0, [pc, #324]	; (800ee98 <_printf_i+0x238>)
 800ed52:	bf0c      	ite	eq
 800ed54:	2308      	moveq	r3, #8
 800ed56:	230a      	movne	r3, #10
 800ed58:	2100      	movs	r1, #0
 800ed5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed5e:	6865      	ldr	r5, [r4, #4]
 800ed60:	2d00      	cmp	r5, #0
 800ed62:	60a5      	str	r5, [r4, #8]
 800ed64:	bfa2      	ittt	ge
 800ed66:	6821      	ldrge	r1, [r4, #0]
 800ed68:	f021 0104 	bicge.w	r1, r1, #4
 800ed6c:	6021      	strge	r1, [r4, #0]
 800ed6e:	b90e      	cbnz	r6, 800ed74 <_printf_i+0x114>
 800ed70:	2d00      	cmp	r5, #0
 800ed72:	d04a      	beq.n	800ee0a <_printf_i+0x1aa>
 800ed74:	4615      	mov	r5, r2
 800ed76:	fbb6 f1f3 	udiv	r1, r6, r3
 800ed7a:	fb03 6711 	mls	r7, r3, r1, r6
 800ed7e:	5dc7      	ldrb	r7, [r0, r7]
 800ed80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ed84:	4637      	mov	r7, r6
 800ed86:	460e      	mov	r6, r1
 800ed88:	42bb      	cmp	r3, r7
 800ed8a:	d9f4      	bls.n	800ed76 <_printf_i+0x116>
 800ed8c:	2b08      	cmp	r3, #8
 800ed8e:	d10b      	bne.n	800eda8 <_printf_i+0x148>
 800ed90:	6823      	ldr	r3, [r4, #0]
 800ed92:	07de      	lsls	r6, r3, #31
 800ed94:	d508      	bpl.n	800eda8 <_printf_i+0x148>
 800ed96:	6923      	ldr	r3, [r4, #16]
 800ed98:	6861      	ldr	r1, [r4, #4]
 800ed9a:	4299      	cmp	r1, r3
 800ed9c:	bfde      	ittt	le
 800ed9e:	2330      	movle	r3, #48	; 0x30
 800eda0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eda4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eda8:	1b52      	subs	r2, r2, r5
 800edaa:	6122      	str	r2, [r4, #16]
 800edac:	464b      	mov	r3, r9
 800edae:	aa03      	add	r2, sp, #12
 800edb0:	4621      	mov	r1, r4
 800edb2:	4640      	mov	r0, r8
 800edb4:	f8cd a000 	str.w	sl, [sp]
 800edb8:	f7ff fee0 	bl	800eb7c <_printf_common>
 800edbc:	3001      	adds	r0, #1
 800edbe:	d149      	bne.n	800ee54 <_printf_i+0x1f4>
 800edc0:	f04f 30ff 	mov.w	r0, #4294967295
 800edc4:	b004      	add	sp, #16
 800edc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edca:	6823      	ldr	r3, [r4, #0]
 800edcc:	f043 0320 	orr.w	r3, r3, #32
 800edd0:	6023      	str	r3, [r4, #0]
 800edd2:	2778      	movs	r7, #120	; 0x78
 800edd4:	4831      	ldr	r0, [pc, #196]	; (800ee9c <_printf_i+0x23c>)
 800edd6:	6823      	ldr	r3, [r4, #0]
 800edd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eddc:	061f      	lsls	r7, r3, #24
 800edde:	6829      	ldr	r1, [r5, #0]
 800ede0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ede4:	d402      	bmi.n	800edec <_printf_i+0x18c>
 800ede6:	065f      	lsls	r7, r3, #25
 800ede8:	bf48      	it	mi
 800edea:	b2b6      	uxthmi	r6, r6
 800edec:	07df      	lsls	r7, r3, #31
 800edee:	6029      	str	r1, [r5, #0]
 800edf0:	bf44      	itt	mi
 800edf2:	f043 0320 	orrmi.w	r3, r3, #32
 800edf6:	6023      	strmi	r3, [r4, #0]
 800edf8:	b91e      	cbnz	r6, 800ee02 <_printf_i+0x1a2>
 800edfa:	6823      	ldr	r3, [r4, #0]
 800edfc:	f023 0320 	bic.w	r3, r3, #32
 800ee00:	6023      	str	r3, [r4, #0]
 800ee02:	2310      	movs	r3, #16
 800ee04:	e7a8      	b.n	800ed58 <_printf_i+0xf8>
 800ee06:	4824      	ldr	r0, [pc, #144]	; (800ee98 <_printf_i+0x238>)
 800ee08:	e7e5      	b.n	800edd6 <_printf_i+0x176>
 800ee0a:	4615      	mov	r5, r2
 800ee0c:	e7be      	b.n	800ed8c <_printf_i+0x12c>
 800ee0e:	682b      	ldr	r3, [r5, #0]
 800ee10:	6826      	ldr	r6, [r4, #0]
 800ee12:	1d18      	adds	r0, r3, #4
 800ee14:	6961      	ldr	r1, [r4, #20]
 800ee16:	6028      	str	r0, [r5, #0]
 800ee18:	0635      	lsls	r5, r6, #24
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	d501      	bpl.n	800ee22 <_printf_i+0x1c2>
 800ee1e:	6019      	str	r1, [r3, #0]
 800ee20:	e002      	b.n	800ee28 <_printf_i+0x1c8>
 800ee22:	0670      	lsls	r0, r6, #25
 800ee24:	d5fb      	bpl.n	800ee1e <_printf_i+0x1be>
 800ee26:	8019      	strh	r1, [r3, #0]
 800ee28:	2300      	movs	r3, #0
 800ee2a:	4615      	mov	r5, r2
 800ee2c:	6123      	str	r3, [r4, #16]
 800ee2e:	e7bd      	b.n	800edac <_printf_i+0x14c>
 800ee30:	682b      	ldr	r3, [r5, #0]
 800ee32:	2100      	movs	r1, #0
 800ee34:	1d1a      	adds	r2, r3, #4
 800ee36:	602a      	str	r2, [r5, #0]
 800ee38:	681d      	ldr	r5, [r3, #0]
 800ee3a:	6862      	ldr	r2, [r4, #4]
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	f000 f873 	bl	800ef28 <memchr>
 800ee42:	b108      	cbz	r0, 800ee48 <_printf_i+0x1e8>
 800ee44:	1b40      	subs	r0, r0, r5
 800ee46:	6060      	str	r0, [r4, #4]
 800ee48:	6863      	ldr	r3, [r4, #4]
 800ee4a:	6123      	str	r3, [r4, #16]
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee52:	e7ab      	b.n	800edac <_printf_i+0x14c>
 800ee54:	6923      	ldr	r3, [r4, #16]
 800ee56:	462a      	mov	r2, r5
 800ee58:	4649      	mov	r1, r9
 800ee5a:	4640      	mov	r0, r8
 800ee5c:	47d0      	blx	sl
 800ee5e:	3001      	adds	r0, #1
 800ee60:	d0ae      	beq.n	800edc0 <_printf_i+0x160>
 800ee62:	6823      	ldr	r3, [r4, #0]
 800ee64:	079b      	lsls	r3, r3, #30
 800ee66:	d413      	bmi.n	800ee90 <_printf_i+0x230>
 800ee68:	68e0      	ldr	r0, [r4, #12]
 800ee6a:	9b03      	ldr	r3, [sp, #12]
 800ee6c:	4298      	cmp	r0, r3
 800ee6e:	bfb8      	it	lt
 800ee70:	4618      	movlt	r0, r3
 800ee72:	e7a7      	b.n	800edc4 <_printf_i+0x164>
 800ee74:	2301      	movs	r3, #1
 800ee76:	4632      	mov	r2, r6
 800ee78:	4649      	mov	r1, r9
 800ee7a:	4640      	mov	r0, r8
 800ee7c:	47d0      	blx	sl
 800ee7e:	3001      	adds	r0, #1
 800ee80:	d09e      	beq.n	800edc0 <_printf_i+0x160>
 800ee82:	3501      	adds	r5, #1
 800ee84:	68e3      	ldr	r3, [r4, #12]
 800ee86:	9903      	ldr	r1, [sp, #12]
 800ee88:	1a5b      	subs	r3, r3, r1
 800ee8a:	42ab      	cmp	r3, r5
 800ee8c:	dcf2      	bgt.n	800ee74 <_printf_i+0x214>
 800ee8e:	e7eb      	b.n	800ee68 <_printf_i+0x208>
 800ee90:	2500      	movs	r5, #0
 800ee92:	f104 0619 	add.w	r6, r4, #25
 800ee96:	e7f5      	b.n	800ee84 <_printf_i+0x224>
 800ee98:	0800f0f0 	.word	0x0800f0f0
 800ee9c:	0800f101 	.word	0x0800f101

0800eea0 <_raise_r>:
 800eea0:	291f      	cmp	r1, #31
 800eea2:	b538      	push	{r3, r4, r5, lr}
 800eea4:	4604      	mov	r4, r0
 800eea6:	460d      	mov	r5, r1
 800eea8:	d904      	bls.n	800eeb4 <_raise_r+0x14>
 800eeaa:	2316      	movs	r3, #22
 800eeac:	6003      	str	r3, [r0, #0]
 800eeae:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb2:	bd38      	pop	{r3, r4, r5, pc}
 800eeb4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800eeb6:	b112      	cbz	r2, 800eebe <_raise_r+0x1e>
 800eeb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eebc:	b94b      	cbnz	r3, 800eed2 <_raise_r+0x32>
 800eebe:	4620      	mov	r0, r4
 800eec0:	f000 f830 	bl	800ef24 <_getpid_r>
 800eec4:	462a      	mov	r2, r5
 800eec6:	4601      	mov	r1, r0
 800eec8:	4620      	mov	r0, r4
 800eeca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eece:	f000 b817 	b.w	800ef00 <_kill_r>
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d00a      	beq.n	800eeec <_raise_r+0x4c>
 800eed6:	1c59      	adds	r1, r3, #1
 800eed8:	d103      	bne.n	800eee2 <_raise_r+0x42>
 800eeda:	2316      	movs	r3, #22
 800eedc:	6003      	str	r3, [r0, #0]
 800eede:	2001      	movs	r0, #1
 800eee0:	e7e7      	b.n	800eeb2 <_raise_r+0x12>
 800eee2:	2400      	movs	r4, #0
 800eee4:	4628      	mov	r0, r5
 800eee6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eeea:	4798      	blx	r3
 800eeec:	2000      	movs	r0, #0
 800eeee:	e7e0      	b.n	800eeb2 <_raise_r+0x12>

0800eef0 <raise>:
 800eef0:	4b02      	ldr	r3, [pc, #8]	; (800eefc <raise+0xc>)
 800eef2:	4601      	mov	r1, r0
 800eef4:	6818      	ldr	r0, [r3, #0]
 800eef6:	f7ff bfd3 	b.w	800eea0 <_raise_r>
 800eefa:	bf00      	nop
 800eefc:	200000e4 	.word	0x200000e4

0800ef00 <_kill_r>:
 800ef00:	b538      	push	{r3, r4, r5, lr}
 800ef02:	2300      	movs	r3, #0
 800ef04:	4d06      	ldr	r5, [pc, #24]	; (800ef20 <_kill_r+0x20>)
 800ef06:	4604      	mov	r4, r0
 800ef08:	4608      	mov	r0, r1
 800ef0a:	4611      	mov	r1, r2
 800ef0c:	602b      	str	r3, [r5, #0]
 800ef0e:	f7f1 fe71 	bl	8000bf4 <_kill>
 800ef12:	1c43      	adds	r3, r0, #1
 800ef14:	d102      	bne.n	800ef1c <_kill_r+0x1c>
 800ef16:	682b      	ldr	r3, [r5, #0]
 800ef18:	b103      	cbz	r3, 800ef1c <_kill_r+0x1c>
 800ef1a:	6023      	str	r3, [r4, #0]
 800ef1c:	bd38      	pop	{r3, r4, r5, pc}
 800ef1e:	bf00      	nop
 800ef20:	2001596c 	.word	0x2001596c

0800ef24 <_getpid_r>:
 800ef24:	f7f1 be5e 	b.w	8000be4 <_getpid>

0800ef28 <memchr>:
 800ef28:	b2c9      	uxtb	r1, r1
 800ef2a:	4402      	add	r2, r0
 800ef2c:	b510      	push	{r4, lr}
 800ef2e:	4290      	cmp	r0, r2
 800ef30:	4603      	mov	r3, r0
 800ef32:	d101      	bne.n	800ef38 <memchr+0x10>
 800ef34:	2300      	movs	r3, #0
 800ef36:	e003      	b.n	800ef40 <memchr+0x18>
 800ef38:	781c      	ldrb	r4, [r3, #0]
 800ef3a:	3001      	adds	r0, #1
 800ef3c:	428c      	cmp	r4, r1
 800ef3e:	d1f6      	bne.n	800ef2e <memchr+0x6>
 800ef40:	4618      	mov	r0, r3
 800ef42:	bd10      	pop	{r4, pc}

0800ef44 <_init>:
 800ef44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef46:	bf00      	nop
 800ef48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef4a:	bc08      	pop	{r3}
 800ef4c:	469e      	mov	lr, r3
 800ef4e:	4770      	bx	lr

0800ef50 <_fini>:
 800ef50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef52:	bf00      	nop
 800ef54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef56:	bc08      	pop	{r3}
 800ef58:	469e      	mov	lr, r3
 800ef5a:	4770      	bx	lr
