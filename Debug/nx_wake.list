
nx_wake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6d8  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  0800f924  0800f924  0001f924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbc8  0800fbc8  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800fbc8  0800fbc8  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fbc8  0800fbc8  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbc8  0800fbc8  0001fbc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbcc  0800fbcc  0001fbcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800fbd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015984  200000e8  0800fcb8  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015a6c  0800fcb8  00025a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002011e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000b9852  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000f367  00000000  00000000  000d99b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002160  00000000  00000000  000e8d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016f4  00000000  00000000  000eae80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004341d  00000000  00000000  000ec574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004d03a  00000000  00000000  0012f991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00155ad0  00000000  00000000  0017c9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e0c  00000000  00000000  002d249c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000103  00000000  00000000  002d92a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	200000e8 	.word	0x200000e8
 8000268:	00000000 	.word	0x00000000
 800026c:	0800f90c 	.word	0x0800f90c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	200000ec 	.word	0x200000ec
 8000288:	0800f90c 	.word	0x0800f90c

0800028c <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 800028c:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800028e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000292:	4917      	ldr	r1, [pc, #92]	; (80002f0 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000294:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000298:	4816      	ldr	r0, [pc, #88]	; (80002f4 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029a:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 800029c:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a0:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a2:	4815      	ldr	r0, [pc, #84]	; (80002f8 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a4:	4912      	ldr	r1, [pc, #72]	; (80002f0 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002a6:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002a8:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002aa:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ae:	4913      	ldr	r1, [pc, #76]	; (80002fc <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b0:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b2:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002b6:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002b8:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002bc:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c4:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002c8:	490d      	ldr	r1, [pc, #52]	; (8000300 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ca:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ce:	4770      	bx	lr

080002d0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d0:	f7ff bffe 	b.w	80002d0 <__tx_BadHandler>

080002d4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002dc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002de:	f000 f897 	bl	8000410 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002e6:	4770      	bx	lr

080002e8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002e8:	f7ff bffe 	b.w	80002e8 <__tx_NMIHandler>

080002ec <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f0:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f4:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002f8:	20014880 	.word	0x20014880
    LDR     r1, =SYSTICK_CYCLES
 80002fc:	0026259f 	.word	0x0026259f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000300:	40ff0000 	.word	0x40ff0000

08000304 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000304:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000308:	4a2d      	ldr	r2, [pc, #180]	; (80003c0 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800030c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000310:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000314:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000318:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800031e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000322:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000326:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032a:	f3bf 8f6f 	isb	sy

0800032e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800032e:	e7fe      	b.n	800032e <__tx_wait_here>

08000330 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000330:	4824      	ldr	r0, [pc, #144]	; (80003c4 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000332:	4a25      	ldr	r2, [pc, #148]	; (80003c8 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000334:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000338:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033a:	b191      	cbz	r1, 8000362 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800033c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800033e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000342:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000346:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034a:	d101      	bne.n	8000350 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 800034c:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000350 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000350:	4c1e      	ldr	r4, [pc, #120]	; (80003cc <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000352:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000356:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035a:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 800035c:	b10d      	cbz	r5, 8000362 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800035e:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000360:	6023      	str	r3, [r4, #0]

08000362 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000362:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000364:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000366:	b1d1      	cbz	r1, 800039e <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000368:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036a:	b662      	cpsie	i

0800036c <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 800036c:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800036e:	4c17      	ldr	r4, [pc, #92]	; (80003cc <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000370:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000372:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000376:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000378:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800037e:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000382:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000386:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800038e:	d101      	bne.n	8000394 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000390:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000394 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000394:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000398:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 800039c:	4770      	bx	lr

0800039e <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800039e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a0:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a2:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a4:	b909      	cbnz	r1, 80003aa <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a6:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a8:	e7f9      	b.n	800039e <__tx_ts_wait>

080003aa <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003aa:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003ae:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b2:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b6:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b8:	e7d8      	b.n	800036c <__tx_ts_restore>
 80003ba:	bf00      	nop

080003bc <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003bc:	4770      	bx	lr
 80003be:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c0:	2001491c 	.word	0x2001491c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c4:	20014884 	.word	0x20014884
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c8:	20014888 	.word	0x20014888
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003cc:	20014e88 	.word	0x20014e88

080003d0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d6:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003da:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003de:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ea:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003ec:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ee:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f4:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f6:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003fc:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000402:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000404:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000406:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800040c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040e:	4770      	bx	lr

08000410 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000410:	4922      	ldr	r1, [pc, #136]	; (800049c <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000412:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000414:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000418:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041a:	4b21      	ldr	r3, [pc, #132]	; (80004a0 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800041c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041e:	b13a      	cbz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000420:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000424:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000426:	b91a      	cbnz	r2, 8000430 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000428:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042e:	6018      	str	r0, [r3, #0]

08000430 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000430:	491d      	ldr	r1, [pc, #116]	; (80004a8 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000432:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000434:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000436:	b122      	cbz	r2, 8000442 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000438:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000440:	e008      	b.n	8000454 <__tx_timer_done>

08000442 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000442:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000448:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800044c:	d101      	bne.n	8000452 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044e:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000450:	6818      	ldr	r0, [r3, #0]

08000452 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000452:	6008      	str	r0, [r1, #0]

08000454 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000456:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000458:	b912      	cbnz	r2, 8000460 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045a:	4914      	ldr	r1, [pc, #80]	; (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800045c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045e:	b1c8      	cbz	r0, 8000494 <__tx_timer_nothing_expired>

08000460 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000460:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000462:	4912      	ldr	r1, [pc, #72]	; (80004ac <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000464:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000466:	b108      	cbz	r0, 800046c <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000468:	f00d faf0 	bl	800da4c <_tx_timer_expiration_process>

0800046c <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800046c:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046e:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000470:	b172      	cbz	r2, 8000490 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000472:	f00d f9f9 	bl	800d868 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000476:	4810      	ldr	r0, [pc, #64]	; (80004b8 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000478:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047a:	b949      	cbnz	r1, 8000490 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800047c:	480f      	ldr	r0, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047e:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000480:	4a0f      	ldr	r2, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000482:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000484:	480f      	ldr	r0, [pc, #60]	; (80004c4 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048a:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800048c:	d000      	beq.n	8000490 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048e:	6002      	str	r2, [r0, #0]

08000490 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000490:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000494 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000494:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000498:	4770      	bx	lr
 800049a:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800049c:	20014928 	.word	0x20014928
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a0:	20014e88 	.word	0x20014e88
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a4:	2001492c 	.word	0x2001492c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a8:	200149b8 	.word	0x200149b8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004ac:	200149bc 	.word	0x200149bc
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b0:	200149b4 	.word	0x200149b4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b4:	200149b0 	.word	0x200149b0
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b8:	2001491c 	.word	0x2001491c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004bc:	20014884 	.word	0x20014884
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c0:	20014888 	.word	0x20014888
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c4:	e000ed04 	.word	0xe000ed04

080004c8 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80004d4:	2334      	movs	r3, #52	; 0x34
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004dc:	4a15      	ldr	r2, [pc, #84]	; (8000534 <tx_application_define+0x6c>)
 80004de:	4916      	ldr	r1, [pc, #88]	; (8000538 <tx_application_define+0x70>)
 80004e0:	4816      	ldr	r0, [pc, #88]	; (800053c <tx_application_define+0x74>)
 80004e2:	f00d fd5d 	bl	800dfa0 <_txe_byte_pool_create>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d109      	bne.n	8000500 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <tx_application_define+0x74>)
 80004ee:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80004f0:	68b8      	ldr	r0, [r7, #8]
 80004f2:	f000 f82b 	bl	800054c <App_ThreadX_Init>
 80004f6:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d000      	beq.n	8000500 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80004fe:	e7fe      	b.n	80004fe <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000500:	2334      	movs	r3, #52	; 0x34
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <tx_application_define+0x78>)
 800050a:	490e      	ldr	r1, [pc, #56]	; (8000544 <tx_application_define+0x7c>)
 800050c:	480e      	ldr	r0, [pc, #56]	; (8000548 <tx_application_define+0x80>)
 800050e:	f00d fd47 	bl	800dfa0 <_txe_byte_pool_create>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d109      	bne.n	800052c <tx_application_define+0x64>
  {
    /* USER CODE BEGIN NX_Byte_Pool_Success */

    /* USER CODE END NX_Byte_Pool_Success */

    memory_ptr = (VOID *)&nx_app_byte_pool;
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <tx_application_define+0x80>)
 800051a:	60bb      	str	r3, [r7, #8]
    status = MX_NetXDuo_Init(memory_ptr);
 800051c:	68b8      	ldr	r0, [r7, #8]
 800051e:	f00d ff0b 	bl	800e338 <MX_NetXDuo_Init>
 8000522:	60f8      	str	r0, [r7, #12]
    if (status != NX_SUCCESS)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d000      	beq.n	800052c <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_NetXDuo_Init_Error */
      while(1)
 800052a:	e7fe      	b.n	800052a <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000104 	.word	0x20000104
 8000538:	0800f924 	.word	0x0800f924
 800053c:	20000504 	.word	0x20000504
 8000540:	20000538 	.word	0x20000538
 8000544:	0800f938 	.word	0x0800f938
 8000548:	20007d38 	.word	0x20007d38

0800054c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000558:	68fb      	ldr	r3, [r7, #12]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800056a:	f00b fdf3 	bl	800c154 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fe73 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f81b 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8d7 	bl	8000734 <MX_GPIO_Init>
  MX_ETH_Init();
 8000586:	f000 f87d 	bl	8000684 <MX_ETH_Init>
  MX_ICACHE_Init();
 800058a:	f000 f8c7 	bl	800071c <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  // Inizializzazione dell'area di memoria con valori dummy
  for (ULONG i = 0; i < MEMORY_SIZE; i++)
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	e007      	b.n	80005a4 <main+0x30>
  {
    memory_area[i] = 'a';
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <main+0x40>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	2261      	movs	r2, #97	; 0x61
 800059c:	701a      	strb	r2, [r3, #0]
  for (ULONG i = 0; i < MEMORY_SIZE; i++)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3301      	adds	r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 80005aa:	d3f3      	bcc.n	8000594 <main+0x20>
  }
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80005ac:	f7ff ffdb 	bl	8000566 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x3c>
 80005b2:	bf00      	nop
 80005b4:	20007f14 	.word	0x20007f14

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b09c      	sub	sp, #112	; 0x70
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2250      	movs	r2, #80	; 0x50
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00e fb78 	bl	800ecbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
 80005dc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <SystemClock_Config+0xc8>)
 80005e0:	691b      	ldr	r3, [r3, #16]
 80005e2:	4a27      	ldr	r2, [pc, #156]	; (8000680 <SystemClock_Config+0xc8>)
 80005e4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80005e8:	6113      	str	r3, [r2, #16]
 80005ea:	4b25      	ldr	r3, [pc, #148]	; (8000680 <SystemClock_Config+0xc8>)
 80005ec:	691b      	ldr	r3, [r3, #16]
 80005ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005f6:	bf00      	nop
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <SystemClock_Config+0xc8>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	f003 0308 	and.w	r3, r3, #8
 8000600:	2b08      	cmp	r3, #8
 8000602:	d1f9      	bne.n	80005f8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000608:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000612:	2303      	movs	r3, #3
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000616:	2304      	movs	r3, #4
 8000618:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 800061a:	23fa      	movs	r3, #250	; 0xfa
 800061c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 800062a:	2304      	movs	r3, #4
 800062c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800062e:	2300      	movs	r3, #0
 8000630:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	4618      	mov	r0, r3
 800063c:	f002 feb6 	bl	80033ac <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000646:	f000 f931 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	231f      	movs	r3, #31
 800064c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2303      	movs	r3, #3
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	2105      	movs	r1, #5
 8000668:	4618      	mov	r0, r3
 800066a:	f003 fad7 	bl	8003c1c <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000674:	f000 f91a 	bl	80008ac <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3770      	adds	r7, #112	; 0x70
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	44020800 	.word	0x44020800

08000684 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_ETH_Init+0x80>)
 800068a:	4a1f      	ldr	r2, [pc, #124]	; (8000708 <MX_ETH_Init+0x84>)
 800068c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800068e:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_ETH_Init+0x88>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_ETH_Init+0x88>)
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_ETH_Init+0x88>)
 800069c:	22e1      	movs	r2, #225	; 0xe1
 800069e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_ETH_Init+0x88>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_ETH_Init+0x88>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_ETH_Init+0x88>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_ETH_Init+0x80>)
 80006b4:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_ETH_Init+0x88>)
 80006b6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_ETH_Init+0x80>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_ETH_Init+0x80>)
 80006c0:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_ETH_Init+0x8c>)
 80006c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_ETH_Init+0x80>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <MX_ETH_Init+0x90>)
 80006c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_ETH_Init+0x80>)
 80006cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006d2:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_ETH_Init+0x80>)
 80006d4:	f000 ff02 	bl	80014dc <HAL_ETH_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80006de:	f000 f8e5 	bl	80008ac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006e2:	2238      	movs	r2, #56	; 0x38
 80006e4:	2100      	movs	r1, #0
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_ETH_Init+0x94>)
 80006e8:	f00e fae8 	bl	800ecbc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_ETH_Init+0x94>)
 80006ee:	2221      	movs	r2, #33	; 0x21
 80006f0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_ETH_Init+0x94>)
 80006f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006f8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_ETH_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20007e64 	.word	0x20007e64
 8000708:	40028000 	.word	0x40028000
 800070c:	20014714 	.word	0x20014714
 8000710:	20007e04 	.word	0x20007e04
 8000714:	20007da4 	.word	0x20007da4
 8000718:	20007d6c 	.word	0x20007d6c

0800071c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000720:	f002 fdf2 	bl	8003308 <HAL_ICACHE_Enable>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 800072a:	f000 f8bf 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b4b      	ldr	r3, [pc, #300]	; (8000878 <MX_GPIO_Init+0x144>)
 800074c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000750:	4a49      	ldr	r2, [pc, #292]	; (8000878 <MX_GPIO_Init+0x144>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800075a:	4b47      	ldr	r3, [pc, #284]	; (8000878 <MX_GPIO_Init+0x144>)
 800075c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000768:	4b43      	ldr	r3, [pc, #268]	; (8000878 <MX_GPIO_Init+0x144>)
 800076a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800076e:	4a42      	ldr	r2, [pc, #264]	; (8000878 <MX_GPIO_Init+0x144>)
 8000770:	f043 0320 	orr.w	r3, r3, #32
 8000774:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000778:	4b3f      	ldr	r3, [pc, #252]	; (8000878 <MX_GPIO_Init+0x144>)
 800077a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800077e:	f003 0320 	and.w	r3, r3, #32
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b3c      	ldr	r3, [pc, #240]	; (8000878 <MX_GPIO_Init+0x144>)
 8000788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800078c:	4a3a      	ldr	r2, [pc, #232]	; (8000878 <MX_GPIO_Init+0x144>)
 800078e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000792:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000796:	4b38      	ldr	r3, [pc, #224]	; (8000878 <MX_GPIO_Init+0x144>)
 8000798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800079c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b34      	ldr	r3, [pc, #208]	; (8000878 <MX_GPIO_Init+0x144>)
 80007a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007aa:	4a33      	ldr	r2, [pc, #204]	; (8000878 <MX_GPIO_Init+0x144>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007b4:	4b30      	ldr	r3, [pc, #192]	; (8000878 <MX_GPIO_Init+0x144>)
 80007b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <MX_GPIO_Init+0x144>)
 80007c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007c8:	4a2b      	ldr	r2, [pc, #172]	; (8000878 <MX_GPIO_Init+0x144>)
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <MX_GPIO_Init+0x144>)
 80007d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <MX_GPIO_Init+0x144>)
 80007e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007e6:	4a24      	ldr	r2, [pc, #144]	; (8000878 <MX_GPIO_Init+0x144>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <MX_GPIO_Init+0x144>)
 80007f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2110      	movs	r1, #16
 8000802:	481e      	ldr	r0, [pc, #120]	; (800087c <MX_GPIO_Init+0x148>)
 8000804:	f002 fd68 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2101      	movs	r1, #1
 800080c:	481c      	ldr	r0, [pc, #112]	; (8000880 <MX_GPIO_Init+0x14c>)
 800080e:	f002 fd63 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2110      	movs	r1, #16
 8000816:	481b      	ldr	r0, [pc, #108]	; (8000884 <MX_GPIO_Init+0x150>)
 8000818:	f002 fd5e 	bl	80032d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_YELLOW_Pin;
 800081c:	2310      	movs	r3, #16
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4812      	ldr	r0, [pc, #72]	; (800087c <MX_GPIO_Init+0x148>)
 8000834:	f002 fbfe 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000838:	2301      	movs	r3, #1
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	480c      	ldr	r0, [pc, #48]	; (8000880 <MX_GPIO_Init+0x14c>)
 8000850:	f002 fbf0 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000854:	2310      	movs	r3, #16
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_GPIO_Init+0x150>)
 800086c:	f002 fbe2 	bl	8003034 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000870:	bf00      	nop
 8000872:	3730      	adds	r7, #48	; 0x30
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	44020c00 	.word	0x44020c00
 800087c:	42021400 	.word	0x42021400
 8000880:	42020400 	.word	0x42020400
 8000884:	42021800 	.word	0x42021800

08000888 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d101      	bne.n	800089e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089a:	f000 fd09 	bl	80012b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40001000 	.word	0x40001000

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <Error_Handler+0x8>

080008b6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	; 0x38
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a61      	ldr	r2, [pc, #388]	; (8000a68 <HAL_ETH_MspInit+0x1a4>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	f040 80bb 	bne.w	8000a5e <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80008e8:	4b60      	ldr	r3, [pc, #384]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a5f      	ldr	r2, [pc, #380]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 80008f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80008f8:	4b5c      	ldr	r3, [pc, #368]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 80008fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000902:	623b      	str	r3, [r7, #32]
 8000904:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8000906:	4b59      	ldr	r3, [pc, #356]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090c:	4a57      	ldr	r2, [pc, #348]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 800090e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000912:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000916:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000920:	61fb      	str	r3, [r7, #28]
 8000922:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8000924:	4b51      	ldr	r3, [pc, #324]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a50      	ldr	r2, [pc, #320]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 800092c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000934:	4b4d      	ldr	r3, [pc, #308]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b4a      	ldr	r3, [pc, #296]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000948:	4a48      	ldr	r2, [pc, #288]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000952:	4b46      	ldr	r3, [pc, #280]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b42      	ldr	r3, [pc, #264]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000966:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000970:	4b3e      	ldr	r3, [pc, #248]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000984:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000986:	f043 0302 	orr.w	r3, r3, #2
 800098a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800098e:	4b37      	ldr	r3, [pc, #220]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 8000990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000994:	f003 0302 	and.w	r3, r3, #2
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800099c:	4b33      	ldr	r3, [pc, #204]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 800099e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009a2:	4a32      	ldr	r2, [pc, #200]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 80009a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009ac:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <HAL_ETH_MspInit+0x1a8>)
 80009ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009ba:	2332      	movs	r3, #50	; 0x32
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c6:	2302      	movs	r3, #2
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ca:	230b      	movs	r3, #11
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4826      	ldr	r0, [pc, #152]	; (8000a70 <HAL_ETH_MspInit+0x1ac>)
 80009d6:	f002 fb2d 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80009da:	2386      	movs	r3, #134	; 0x86
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e6:	2302      	movs	r3, #2
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ea:	230b      	movs	r3, #11
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	481f      	ldr	r0, [pc, #124]	; (8000a74 <HAL_ETH_MspInit+0x1b0>)
 80009f6:	f002 fb1d 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a0c:	230b      	movs	r3, #11
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a14:	4619      	mov	r1, r3
 8000a16:	4818      	ldr	r0, [pc, #96]	; (8000a78 <HAL_ETH_MspInit+0x1b4>)
 8000a18:	f002 fb0c 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a1c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a2e:	230b      	movs	r3, #11
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	4810      	ldr	r0, [pc, #64]	; (8000a7c <HAL_ETH_MspInit+0x1b8>)
 8000a3a:	f002 fafb 	bl	8003034 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2107      	movs	r1, #7
 8000a42:	206a      	movs	r0, #106	; 0x6a
 8000a44:	f000 fd22 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000a48:	206a      	movs	r0, #106	; 0x6a
 8000a4a:	f000 fd39 	bl	80014c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	206b      	movs	r0, #107	; 0x6b
 8000a54:	f000 fd1a 	bl	800148c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8000a58:	206b      	movs	r0, #107	; 0x6b
 8000a5a:	f000 fd31 	bl	80014c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3738      	adds	r7, #56	; 0x38
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40028000 	.word	0x40028000
 8000a6c:	44020c00 	.word	0x44020c00
 8000a70:	42020800 	.word	0x42020800
 8000a74:	42020000 	.word	0x42020000
 8000a78:	42020400 	.word	0x42020400
 8000a7c:	42021800 	.word	0x42021800

08000a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a88:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <HAL_InitTick+0xd8>)
 8000a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a8e:	4a32      	ldr	r2, [pc, #200]	; (8000b58 <HAL_InitTick+0xd8>)
 8000a90:	f043 0310 	orr.w	r3, r3, #16
 8000a94:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000a98:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <HAL_InitTick+0xd8>)
 8000a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a9e:	f003 0310 	and.w	r3, r3, #16
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa6:	f107 020c 	add.w	r2, r7, #12
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f003 fbc9 	bl	8004248 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d103      	bne.n	8000ac8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ac0:	f003 fbac 	bl	800421c <HAL_RCC_GetPCLK1Freq>
 8000ac4:	6378      	str	r0, [r7, #52]	; 0x34
 8000ac6:	e004      	b.n	8000ad2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ac8:	f003 fba8 	bl	800421c <HAL_RCC_GetPCLK1Freq>
 8000acc:	4603      	mov	r3, r0
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad4:	095b      	lsrs	r3, r3, #5
 8000ad6:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <HAL_InitTick+0xdc>)
 8000ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8000adc:	09db      	lsrs	r3, r3, #7
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <HAL_InitTick+0xe0>)
 8000ae4:	4a1f      	ldr	r2, [pc, #124]	; (8000b64 <HAL_InitTick+0xe4>)
 8000ae6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <HAL_InitTick+0xe0>)
 8000aea:	2263      	movs	r2, #99	; 0x63
 8000aec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aee:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <HAL_InitTick+0xe0>)
 8000af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <HAL_InitTick+0xe0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_InitTick+0xe0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000b00:	4817      	ldr	r0, [pc, #92]	; (8000b60 <HAL_InitTick+0xe0>)
 8000b02:	f003 fbd9 	bl	80042b8 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d118      	bne.n	8000b46 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b14:	4812      	ldr	r0, [pc, #72]	; (8000b60 <HAL_InitTick+0xe0>)
 8000b16:	f003 fc31 	bl	800437c <HAL_TIM_Base_Start_IT>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10e      	bne.n	8000b46 <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b0f      	cmp	r3, #15
 8000b2c:	d808      	bhi.n	8000b40 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	6879      	ldr	r1, [r7, #4]
 8000b32:	2031      	movs	r0, #49	; 0x31
 8000b34:	f000 fcaa 	bl	800148c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b38:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <HAL_InitTick+0xe8>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	e002      	b.n	8000b46 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000b46:	2031      	movs	r0, #49	; 0x31
 8000b48:	f000 fcba 	bl	80014c0 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	44020c00 	.word	0x44020c00
 8000b5c:	0a7c5ac5 	.word	0x0a7c5ac5
 8000b60:	2001471c 	.word	0x2001471c
 8000b64:	40001000 	.word	0x40001000
 8000b68:	20000004 	.word	0x20000004

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <TIM6_IRQHandler+0x10>)
 8000b9e:	f003 fc9b 	bl	80044d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2001471c 	.word	0x2001471c

08000bac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <ETH_IRQHandler+0x10>)
 8000bb2:	f001 f831 	bl	8001c18 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20007e64 	.word	0x20007e64

08000bc0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet Wakeup global interrupt.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <ETH_WKUP_IRQHandler+0x10>)
 8000bc6:	f001 f827 	bl	8001c18 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20007e64 	.word	0x20007e64

08000bd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return 1;
 8000bd8:	2301      	movs	r3, #1
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_kill>:

int _kill(int pid, int sig)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bee:	f00e f8b3 	bl	800ed58 <__errno>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2216      	movs	r2, #22
 8000bf6:	601a      	str	r2, [r3, #0]
  return -1;
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_exit>:

void _exit (int status)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ffe7 	bl	8000be4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c16:	e7fe      	b.n	8000c16 <_exit+0x12>

08000c18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	e00a      	b.n	8000c40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c2a:	f3af 8000 	nop.w
 8000c2e:	4601      	mov	r1, r0
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	60ba      	str	r2, [r7, #8]
 8000c36:	b2ca      	uxtb	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf0      	blt.n	8000c2a <_read+0x12>
  }

  return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e009      	b.n	8000c78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf1      	blt.n	8000c64 <_write+0x12>
  }
  return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_close>:

int _close(int file)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <_isatty>:

int _isatty(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f00e f818 	bl	800ed58 <__errno>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <_sbrk+0x64>)
 8000d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200a0000 	.word	0x200a0000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	20014768 	.word	0x20014768
 8000d5c:	20015a70 	.word	0x20015a70

08000d60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d66:	4b35      	ldr	r3, [pc, #212]	; (8000e3c <SystemInit+0xdc>)
 8000d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6c:	4a33      	ldr	r2, [pc, #204]	; (8000e3c <SystemInit+0xdc>)
 8000d6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000d76:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <SystemInit+0xe0>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000d7c:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <SystemInit+0xe0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000d82:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <SystemInit+0xe0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <SystemInit+0xe0>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	492c      	ldr	r1, [pc, #176]	; (8000e40 <SystemInit+0xe0>)
 8000d8e:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <SystemInit+0xe4>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000d94:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <SystemInit+0xe0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000d9a:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <SystemInit+0xe0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000da0:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <SystemInit+0xe0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000da6:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <SystemInit+0xe0>)
 8000da8:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <SystemInit+0xe8>)
 8000daa:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <SystemInit+0xe0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000db2:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <SystemInit+0xe0>)
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <SystemInit+0xe8>)
 8000db6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000db8:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <SystemInit+0xe0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <SystemInit+0xe0>)
 8000dc0:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <SystemInit+0xe8>)
 8000dc2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <SystemInit+0xe0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <SystemInit+0xe0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a1c      	ldr	r2, [pc, #112]	; (8000e40 <SystemInit+0xe0>)
 8000dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <SystemInit+0xe0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <SystemInit+0xdc>)
 8000dde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000de2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <SystemInit+0xec>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000dec:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000df4:	d003      	beq.n	8000dfe <SystemInit+0x9e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000dfc:	d117      	bne.n	8000e2e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <SystemInit+0xec>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d005      	beq.n	8000e16 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <SystemInit+0xec>)
 8000e0c:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <SystemInit+0xf0>)
 8000e0e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <SystemInit+0xec>)
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <SystemInit+0xf4>)
 8000e14:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <SystemInit+0xec>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <SystemInit+0xec>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <SystemInit+0xec>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <SystemInit+0xec>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	61d3      	str	r3, [r2, #28]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00
 8000e40:	44020c00 	.word	0x44020c00
 8000e44:	eae2eae3 	.word	0xeae2eae3
 8000e48:	01010280 	.word	0x01010280
 8000e4c:	40022000 	.word	0x40022000
 8000e50:	08192a3b 	.word	0x08192a3b
 8000e54:	4c5d6e7f 	.word	0x4c5d6e7f

08000e58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e5c:	f7ff ff80 	bl	8000d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	; (8000e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <LoopForever+0xe>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	; (8000ea4 <LoopForever+0x16>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e86:	f00d ff6d 	bl	800ed64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e8a:	f7ff fb73 	bl	8000574 <main>

08000e8e <LoopForever>:

LoopForever:
    b LoopForever
 8000e8e:	e7fe      	b.n	8000e8e <LoopForever>
  ldr   r0, =_estack
 8000e90:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8000e9c:	0800fbd0 	.word	0x0800fbd0
  ldr r2, =_sbss
 8000ea0:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000ea4:	20015a6c 	.word	0x20015a6c

08000ea8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC1_IRQHandler>

08000eaa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00b      	beq.n	8000ed2 <LAN8742_RegisterBusIO+0x28>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d007      	beq.n	8000ed2 <LAN8742_RegisterBusIO+0x28>
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <LAN8742_RegisterBusIO+0x28>
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d102      	bne.n	8000ed8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e014      	b.n	8000f02 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d17c      	bne.n	8001028 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2220      	movs	r2, #32
 8000f40:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e01c      	b.n	8000f82 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	f107 0208 	add.w	r2, r7, #8
 8000f50:	2112      	movs	r1, #18
 8000f52:	6978      	ldr	r0, [r7, #20]
 8000f54:	4798      	blx	r3
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	da03      	bge.n	8000f64 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000f5c:	f06f 0304 	mvn.w	r3, #4
 8000f60:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000f62:	e00b      	b.n	8000f7c <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d105      	bne.n	8000f7c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
         break;
 8000f7a:	e005      	b.n	8000f88 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2b1f      	cmp	r3, #31
 8000f86:	d9df      	bls.n	8000f48 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b1f      	cmp	r3, #31
 8000f8e:	d902      	bls.n	8000f96 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f90:	f06f 0302 	mvn.w	r3, #2
 8000f94:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d145      	bne.n	8001028 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6810      	ldr	r0, [r2, #0]
 8000fa4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4798      	blx	r3
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db37      	blt.n	8001022 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6810      	ldr	r0, [r2, #0]
 8000fba:	f107 0208 	add.w	r2, r7, #8
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4798      	blx	r3
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db28      	blt.n	800101a <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4798      	blx	r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000fd2:	e01c      	b.n	800100e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4798      	blx	r3
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fe6:	d80e      	bhi.n	8001006 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6810      	ldr	r0, [r2, #0]
 8000ff0:	f107 0208 	add.w	r2, r7, #8
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4798      	blx	r3
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da07      	bge.n	800100e <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8000ffe:	f06f 0304 	mvn.w	r3, #4
 8001002:	613b      	str	r3, [r7, #16]
                 break;
 8001004:	e010      	b.n	8001028 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001006:	f06f 0301 	mvn.w	r3, #1
 800100a:	613b      	str	r3, [r7, #16]
               break;
 800100c:	e00c      	b.n	8001028 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1dd      	bne.n	8000fd4 <LAN8742_Init+0xc6>
 8001018:	e006      	b.n	8001028 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800101a:	f06f 0304 	mvn.w	r3, #4
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	e002      	b.n	8001028 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001022:	f06f 0303 	mvn.w	r3, #3
 8001026:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d112      	bne.n	8001054 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	4798      	blx	r3
 8001034:	4603      	mov	r3, r0
 8001036:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001038:	bf00      	nop
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	4798      	blx	r3
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800104c:	d9f5      	bls.n	800103a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	605a      	str	r2, [r3, #4]
   }

   LAN8742_enable_wol(pObj);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f88c 	bl	8001172 <LAN8742_enable_wol>

   return status;
 800105a:	693b      	ldr	r3, [r7, #16]
 }
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6810      	ldr	r0, [r2, #0]
 8001078:	f107 020c 	add.w	r2, r7, #12
 800107c:	2101      	movs	r1, #1
 800107e:	4798      	blx	r3
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	da02      	bge.n	800108c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001086:	f06f 0304 	mvn.w	r3, #4
 800108a:	e06e      	b.n	800116a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6810      	ldr	r0, [r2, #0]
 8001094:	f107 020c 	add.w	r2, r7, #12
 8001098:	2101      	movs	r1, #1
 800109a:	4798      	blx	r3
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da02      	bge.n	80010a8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010a2:	f06f 0304 	mvn.w	r3, #4
 80010a6:	e060      	b.n	800116a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e059      	b.n	800116a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	6810      	ldr	r0, [r2, #0]
 80010be:	f107 020c 	add.w	r2, r7, #12
 80010c2:	2100      	movs	r1, #0
 80010c4:	4798      	blx	r3
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	da02      	bge.n	80010d2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80010cc:	f06f 0304 	mvn.w	r3, #4
 80010d0:	e04b      	b.n	800116a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d11b      	bne.n	8001114 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d006      	beq.n	80010f4 <LAN8742_GetLinkState+0x90>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010f0:	2302      	movs	r3, #2
 80010f2:	e03a      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010fe:	2303      	movs	r3, #3
 8001100:	e033      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800110c:	2304      	movs	r3, #4
 800110e:	e02c      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001110:	2305      	movs	r3, #5
 8001112:	e02a      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6810      	ldr	r0, [r2, #0]
 800111c:	f107 020c 	add.w	r2, r7, #12
 8001120:	211f      	movs	r1, #31
 8001122:	4798      	blx	r3
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	da02      	bge.n	8001130 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800112a:	f06f 0304 	mvn.w	r3, #4
 800112e:	e01c      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800113a:	2306      	movs	r3, #6
 800113c:	e015      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f003 031c 	and.w	r3, r3, #28
 8001144:	2b18      	cmp	r3, #24
 8001146:	d101      	bne.n	800114c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001148:	2302      	movs	r3, #2
 800114a:	e00e      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 031c 	and.w	r3, r3, #28
 8001152:	2b08      	cmp	r3, #8
 8001154:	d101      	bne.n	800115a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001156:	2303      	movs	r3, #3
 8001158:	e007      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f003 031c 	and.w	r3, r3, #28
 8001160:	2b14      	cmp	r3, #20
 8001162:	d101      	bne.n	8001168 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001164:	2304      	movs	r3, #4
 8001166:	e000      	b.n	800116a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001168:	2305      	movs	r3, #5
    }
  }
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <LAN8742_enable_wol>:
#define LAN8742_PME_ENABLE	((uint16_t)0x4000U)		/* Bit 14 to 1 to enable PME on Led1 (YELLOW) */
#define LAN8742_SELF_CLEAR	((uint16_t)0x0200U)		/* Bit 9 to 1 to enable self clear */
#define LAN8742_WOL_ENABLE	((uint16_t)0x0002U)		/* Bit 1 to 1 to enable wake on lan with magic packet */
#define LAN8742_MPR_RESET	((uint16_t)0x0020U)		/* The MAC sets this bit upon receiving a valid Magic Packet */

void LAN8742_enable_wol(lan8742_Object_t *pObj){
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 	 uint16_t val;

 	 val = LAN8742_PME_ENABLE;
 800117a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800117e:	81fb      	strh	r3, [r7, #14]
 	 val |= LAN8742_SELF_CLEAR;
 8001180:	89fb      	ldrh	r3, [r7, #14]
 8001182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001186:	81fb      	strh	r3, [r7, #14]
 	 val |= LAN8742_WOL_ENABLE;
 8001188:	89fb      	ldrh	r3, [r7, #14]
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	81fb      	strh	r3, [r7, #14]
 	 val |= LAN8742_MPR_RESET;
 8001190:	89fb      	ldrh	r3, [r7, #14]
 8001192:	f043 0320 	orr.w	r3, r3, #32
 8001196:	81fb      	strh	r3, [r7, #14]
 	// abilitiamo anche il self clear ponendo il bit 9 a 1
 	// alzo il secondo bit a 1 per abilitare il wake on lan tramite magic packet
 	// alzo il bit Magic Packet Received (MPR) (bit 5)  a 1 per sollecitarne il reset
     // valore binario finale: 0100 0010 0010 0010
 	// hex: 0x4222
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_MMD_WOL_WUCSR, val);
 8001198:	89fb      	ldrh	r3, [r7, #14]
 800119a:	461a      	mov	r2, r3
 800119c:	f248 0110 	movw	r1, #32784	; 0x8010
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f82a 	bl	80011fa <LAN8742_write_mmd>


 	 val = 0x1000;
 80011a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011aa:	81fb      	strh	r3, [r7, #14]
 	// passo 1 impostiamo il tempo di reset per il self clear del bit PME
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_MCFGR, val);
 80011ac:	89fb      	ldrh	r3, [r7, #14]
 80011ae:	461a      	mov	r2, r3
 80011b0:	f248 0164 	movw	r1, #32868	; 0x8064
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f820 	bl	80011fa <LAN8742_write_mmd>

 	 // imposto i registri ADDR per riconoscere il MAC nel magic packet
 	 // assumento che il MAC sia 00:80:E1:00:00:00

 	 // registro A:
 	 uint16_t A = 0x0000;
 80011ba:	2300      	movs	r3, #0
 80011bc:	81bb      	strh	r3, [r7, #12]
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_RX_ADDRA, A);
 80011be:	89bb      	ldrh	r3, [r7, #12]
 80011c0:	461a      	mov	r2, r3
 80011c2:	f248 0161 	movw	r1, #32865	; 0x8061
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f817 	bl	80011fa <LAN8742_write_mmd>
 	 // registro B:
 	 uint16_t B = 0x00E1;
 80011cc:	23e1      	movs	r3, #225	; 0xe1
 80011ce:	817b      	strh	r3, [r7, #10]
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_RX_ADDRB, B);
 80011d0:	897b      	ldrh	r3, [r7, #10]
 80011d2:	461a      	mov	r2, r3
 80011d4:	f248 0162 	movw	r1, #32866	; 0x8062
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f80e 	bl	80011fa <LAN8742_write_mmd>
 	 // registro C:
 	 uint16_t C = 0x8000;
 80011de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011e2:	813b      	strh	r3, [r7, #8]
 	 LAN8742_write_mmd(pObj, LAN8742_PHY_RX_ADDRC, C);
 80011e4:	893b      	ldrh	r3, [r7, #8]
 80011e6:	461a      	mov	r2, r3
 80011e8:	f248 0163 	movw	r1, #32867	; 0x8063
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f804 	bl	80011fa <LAN8742_write_mmd>
  }
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <LAN8742_write_mmd>:
  * @param pObj: device object LAN8742_Object_t.
  * @param target: address to write in.
  * @param content: content to write in target register
  *
  * */
 void LAN8742_write_mmd(lan8742_Object_t *pObj, uint16_t target, uint16_t content){
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b084      	sub	sp, #16
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	807b      	strh	r3, [r7, #2]
 8001206:	4613      	mov	r3, r2
 8001208:	803b      	strh	r3, [r7, #0]

	 // Imposta funzione: bit 14-15 a 00 (MMD_ADDRESS)
	 uint16_t val = 0x00;
 800120a:	2300      	movs	r3, #0
 800120c:	81fb      	strh	r3, [r7, #14]

	 // imposto l'indirizzo del dispositivo (bit 0-4) a 00011 (3)
	 val |= 0x03;
 800120e:	89fb      	ldrh	r3, [r7, #14]
 8001210:	f043 0303 	orr.w	r3, r3, #3
 8001214:	81fb      	strh	r3, [r7, #14]

	 // scrivo nel registro Access control register
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDACR, val);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6810      	ldr	r0, [r2, #0]
 800121e:	89fa      	ldrh	r2, [r7, #14]
 8001220:	210d      	movs	r1, #13
 8001222:	4798      	blx	r3

	 // scrivo nel registro MMD ACCESS ADDRESS/DATA REGISTER l'indirizzo del registro target della scrittura
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDAADR, target);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6810      	ldr	r0, [r2, #0]
 800122c:	887a      	ldrh	r2, [r7, #2]
 800122e:	210e      	movs	r1, #14
 8001230:	4798      	blx	r3

	 //------------ scrittura inizializzata --------------

	 //imposta funzione: bit 14-15 a 01
	 val = LAN8742_MMDACR_MMD_FUNCTION_DATA; // 0x4000U
 8001232:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001236:	81fb      	strh	r3, [r7, #14]
	 val |= 0x03;
 8001238:	89fb      	ldrh	r3, [r7, #14]
 800123a:	f043 0303 	orr.w	r3, r3, #3
 800123e:	81fb      	strh	r3, [r7, #14]

	 // scrivo nel registro Access control register
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDACR, val);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	6810      	ldr	r0, [r2, #0]
 8001248:	89fa      	ldrh	r2, [r7, #14]
 800124a:	210d      	movs	r1, #13
 800124c:	4798      	blx	r3

	 // scrivo nel registro MMD ACCESS ADDRESS/DATA REGISTER i dati da inviare
	 pObj->IO.WriteReg(pObj->DevAddr, LAN8742_MMDAADR, content);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6810      	ldr	r0, [r2, #0]
 8001256:	883a      	ldrh	r2, [r7, #0]
 8001258:	210e      	movs	r1, #14
 800125a:	4798      	blx	r3
 }
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f904 	bl	8001476 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800126e:	f002 fe8d 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8001272:	4602      	mov	r2, r0
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_Init+0x40>)
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	490a      	ldr	r1, [pc, #40]	; (80012a8 <HAL_Init+0x44>)
 800127e:	5ccb      	ldrb	r3, [r1, r3]
 8001280:	fa22 f303 	lsr.w	r3, r2, r3
 8001284:	4a09      	ldr	r2, [pc, #36]	; (80012ac <HAL_Init+0x48>)
 8001286:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001288:	200f      	movs	r0, #15
 800128a:	f7ff fbf9 	bl	8000a80 <HAL_InitTick>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e002      	b.n	800129e <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001298:	f7ff fb0d 	bl	80008b6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	44020c00 	.word	0x44020c00
 80012a8:	0800fad0 	.word	0x0800fad0
 80012ac:	20000000 	.word	0x20000000

080012b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x20>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x24>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_IncTick+0x24>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000008 	.word	0x20000008
 80012d4:	2001476c 	.word	0x2001476c

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	2001476c 	.word	0x2001476c

080012f0 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_SBS_ETHInterfaceSelect+0x28>)
 80012fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80012fe:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001302:	4905      	ldr	r1, [pc, #20]	; (8001318 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4313      	orrs	r3, r2
 8001308:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	44000400 	.word	0x44000400

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ff4c 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800149a:	f7ff ff63 	bl	8001364 <__NVIC_GetPriorityGrouping>
 800149e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	6978      	ldr	r0, [r7, #20]
 80014a6:	f7ff ffb3 	bl	8001410 <NVIC_EncodePriority>
 80014aa:	4602      	mov	r2, r0
 80014ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff82 	bl	80013bc <__NVIC_SetPriority>
}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff56 	bl	8001380 <__NVIC_EnableIRQ>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e0d2      	b.n	8001694 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d106      	bne.n	8001506 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2223      	movs	r2, #35	; 0x23
 80014fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff f9df 	bl	80008c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 8001506:	4b65      	ldr	r3, [pc, #404]	; (800169c <HAL_ETH_Init+0x1c0>)
 8001508:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800150c:	4a63      	ldr	r2, [pc, #396]	; (800169c <HAL_ETH_Init+0x1c0>)
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001516:	4b61      	ldr	r3, [pc, #388]	; (800169c <HAL_ETH_Init+0x1c0>)
 8001518:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7a1b      	ldrb	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d103      	bne.n	8001534 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff fedf 	bl	80012f0 <HAL_SBS_ETHInterfaceSelect>
 8001532:	e003      	b.n	800153c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8001534:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001538:	f7ff feda 	bl	80012f0 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 800153c:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <HAL_ETH_Init+0x1c4>)
 800153e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001558:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800155a:	f7ff febd 	bl	80012d8 <HAL_GetTick>
 800155e:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001560:	e011      	b.n	8001586 <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001562:	f7ff feb9 	bl	80012d8 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001570:	d909      	bls.n	8001586 <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2204      	movs	r2, #4
 8001576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	22e0      	movs	r2, #224	; 0xe0
 800157e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e086      	b.n	8001694 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1e4      	bne.n	8001562 <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 ff25 	bl	80023e8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800159e:	f002 fe21 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4a3f      	ldr	r2, [pc, #252]	; (80016a4 <HAL_ETH_Init+0x1c8>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	0c9a      	lsrs	r2, r3, #18
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3a01      	subs	r2, #1
 80015b2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f001 f96c 	bl	8002894 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80015c8:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015d8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d009      	beq.n	80015fc <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	22e0      	movs	r2, #224	; 0xe0
 80015f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e04b      	b.n	8001694 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001604:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001608:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800160c:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6952      	ldr	r2, [r2, #20]
 8001614:	0051      	lsls	r1, r2, #1
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	430b      	orrs	r3, r1
 800161c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001620:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f001 f9d2 	bl	80029ce <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f001 fa18 	bl	8002a60 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	3305      	adds	r3, #5
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	021a      	lsls	r2, r3, #8
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	3304      	adds	r3, #4
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	4619      	mov	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	3303      	adds	r3, #3
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	061a      	lsls	r2, r3, #24
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	3302      	adds	r3, #2
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	041b      	lsls	r3, r3, #16
 8001662:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	3301      	adds	r3, #1
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800166e:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800167c:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800167e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2210      	movs	r2, #16
 800168e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	44020c00 	.word	0x44020c00
 80016a0:	44000400 	.word	0x44000400
 80016a4:	431bde83 	.word	0x431bde83

080016a8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d17c      	bne.n	80017b4 <HAL_ETH_Start_IT+0x10c>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2223      	movs	r2, #35	; 0x23
 80016be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <HAL_ETH_Start_IT+0x118>)
 80016d6:	430b      	orrs	r3, r1
 80016d8:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	f043 6342 	orr.w	r3, r3, #203423744	; 0xc200000
 80016ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016f0:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2204      	movs	r2, #4
 80016f8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f9c3 	bl	8001a86 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0202 	orr.w	r2, r2, #2
 800170e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 0201 	orr.w	r2, r2, #1
 8001730:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800174c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001758:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001768:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001774:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001780:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001784:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001790:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	f443 4350 	orr.w	r3, r3, #53248	; 0xd000
 800179c:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 80017a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017a4:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2223      	movs	r2, #35	; 0x23
 80017ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e000      	b.n	80017b6 <HAL_ETH_Start_IT+0x10e>
  }
  else
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
  }
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	0c020060 	.word	0x0c020060

080017c4 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017d2:	2b23      	cmp	r3, #35	; 0x23
 80017d4:	d13f      	bne.n	8001856 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2223      	movs	r2, #35	; 0x23
 80017da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017f6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001802:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	f023 0301 	bic.w	r3, r3, #1
 800180e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001812:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0201 	bic.w	r2, r2, #1
 8001824:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0202 	bic.w	r2, r2, #2
 8001848:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2210      	movs	r2, #16
 800184e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
  }
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d109      	bne.n	8001888 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187a:	f043 0201 	orr.w	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e03a      	b.n	80018fe <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800188e:	2b23      	cmp	r3, #35	; 0x23
 8001890:	d134      	bne.n	80018fc <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800189a:	2201      	movs	r2, #1
 800189c:	6839      	ldr	r1, [r7, #0]
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f001 f93b 	bl	8002b1a <ETH_Prepare_Tx_Descriptors>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b0:	f043 0202 	orr.w	r2, r3, #2
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e01f      	b.n	80018fe <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80018be:	f3bf 8f4f 	dsb	sy
}
 80018c2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d904      	bls.n	80018e0 <HAL_ETH_Transmit_IT+0x7c>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	1f1a      	subs	r2, r3, #4
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3106      	adds	r1, #6
 80018ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018f4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	e000      	b.n	80018fe <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b088      	sub	sp, #32
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001924:	f043 0201 	orr.w	r2, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0a5      	b.n	8001a7e <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001938:	2b23      	cmp	r3, #35	; 0x23
 800193a:	d001      	beq.n	8001940 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e09e      	b.n	8001a7e <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	3212      	adds	r2, #18
 800194c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001950:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001956:	f1c3 0304 	rsb	r3, r3, #4
 800195a:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800195c:	e067      	b.n	8001a2e <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d007      	beq.n	800197a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <HAL_ETH_ReadData+0x88>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800198a:	2b00      	cmp	r3, #0
 800198c:	d03d      	beq.n	8001a0a <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00d      	beq.n	80019d4 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019e4:	461a      	mov	r2, r3
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f003 fe0f 	bl	800560c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	441a      	add	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d902      	bls.n	8001a1c <HAL_ETH_ReadData+0x116>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b04      	subs	r3, #4
 8001a1a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	3212      	adds	r2, #18
 8001a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a26:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db06      	blt.n	8001a44 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d202      	bcs.n	8001a44 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d08c      	beq.n	800195e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	441a      	add	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f814 	bl	8001a86 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e000      	b.n	8001a7e <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3720      	adds	r7, #32
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b088      	sub	sp, #32
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001a92:	2301      	movs	r3, #1
 8001a94:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a9a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	3212      	adds	r2, #18
 8001aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa6:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001aac:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001aae:	e03b      	b.n	8001b28 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d112      	bne.n	8001ade <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 fd83 	bl	80055c8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	e007      	b.n	8001ade <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001ade:	7cfb      	ldrb	r3, [r7, #19]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d021      	beq.n	8001b28 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001ae4:	f3bf 8f5f 	dmb	sy
}
 8001ae8:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d004      	beq.n	8001afc <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	e003      	b.n	8001b04 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001b02:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	3301      	adds	r3, #1
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d902      	bls.n	8001b16 <ETH_UpdateDescriptor+0x90>
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	3b04      	subs	r3, #4
 8001b14:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	3212      	adds	r2, #18
 8001b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b20:	617b      	str	r3, [r7, #20]
      desccount--;
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <ETH_UpdateDescriptor+0xae>
 8001b2e:	7cfb      	ldrb	r3, [r7, #19]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1bd      	bne.n	8001ab0 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d00d      	beq.n	8001b5a <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0U);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b46:	461a      	mov	r2, r3
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3318      	adds	r3, #24
 8001b6e:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b80:	e03f      	b.n	8001c02 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	3304      	adds	r3, #4
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d106      	bne.n	8001baa <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001baa:	7bbb      	ldrb	r3, [r7, #14]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d028      	beq.n	8001c02 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68d9      	ldr	r1, [r3, #12]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db1b      	blt.n	8001bfe <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 fcc2 	bl	800555c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	2200      	movs	r2, #0
 8001be4:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	3301      	adds	r3, #1
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bfc:	e001      	b.n	8001c02 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_ETH_ReleaseTxPacket+0xac>
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1b9      	bne.n	8001b82 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;

  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c28:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c30:	2b40      	cmp	r3, #64	; 0x40
 8001c32:	d115      	bne.n	8001c60 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c44:	2b40      	cmp	r3, #64	; 0x40
 8001c46:	d10b      	bne.n	8001c60 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c50:	461a      	mov	r2, r3
 8001c52:	f248 0340 	movw	r3, #32832	; 0x8040
 8001c56:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f003 fd18 	bl	8005690 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c68:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d115      	bne.n	8001ca0 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d10b      	bne.n	8001ca0 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c90:	461a      	mov	r2, r3
 8001c92:	f248 0301 	movw	r3, #32769	; 0x8001
 8001c96:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f003 fd14 	bl	80056c8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cb4:	d153      	bne.n	8001d5e <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cca:	d148      	bne.n	8001d5e <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd2:	f043 0208 	orr.w	r2, r3, #8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf0:	d11e      	bne.n	8001d30 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfa:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001cfe:	f241 1302 	movw	r3, #4354	; 0x1102
 8001d02:	4013      	ands	r3, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d12:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d22:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	22e0      	movs	r2, #224	; 0xe0
 8001d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001d2e:	e013      	b.n	8001d58 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d38:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001d3c:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001d54:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f86d 	bl	8001e38 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d66:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d104      	bne.n	8001d7c <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d019      	beq.n	8001db0 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	f043 0210 	orr.w	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	22e0      	movs	r2, #224	; 0xe0
 8001d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f848 	bl	8001e38 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d10f      	bne.n	8001de0 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001dc8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f83a 	bl	8001e4c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001de8:	f003 0320 	and.w	r3, r3, #32
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d10f      	bne.n	8001e10 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001df8:	f003 020f 	and.w	r2, r3, #15
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f82c 	bl	8001e60 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_ETH_IRQHandler+0x21c>)
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_ETH_IRQHandler+0x21c>)
 8001e1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e22:	62da      	str	r2, [r3, #44]	; 0x2c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f825 	bl	8001e74 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	44022000 	.word	0x44022000

08001e38 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e03e      	b.n	8001f28 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eb2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	055b      	lsls	r3, r3, #21
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	041b      	lsls	r3, r3, #16
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f043 030c 	orr.w	r3, r3, #12
 8001ed6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001eea:	f7ff f9f5 	bl	80012d8 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001ef0:	e009      	b.n	8001f06 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001ef2:	f7ff f9f1 	bl	80012d8 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f00:	d901      	bls.n	8001f06 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e010      	b.n	8001f28 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1ed      	bne.n	8001ef2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e03c      	b.n	8001fcc <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f5a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	055b      	lsls	r3, r3, #21
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	041b      	lsls	r3, r3, #16
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f023 030c 	bic.w	r3, r3, #12
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_ETH_WritePHYRegister+0xa4>)
 8001f92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001f96:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <HAL_ETH_WritePHYRegister+0xa4>)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001f9e:	f7ff f99b 	bl	80012d8 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001fa4:	e009      	b.n	8001fba <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001fa6:	f7ff f997 	bl	80012d8 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fb4:	d901      	bls.n	8001fba <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e008      	b.n	8001fcc <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ed      	bne.n	8001fa6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40028000 	.word	0x40028000

08001fd8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e1c3      	b.n	8002374 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 020c 	and.w	r2, r3, #12
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf14      	ite	ne
 8002008:	2301      	movne	r3, #1
 800200a:	2300      	moveq	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf0c      	ite	eq
 8002032:	2301      	moveq	r3, #1
 8002034:	2300      	movne	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800204a:	2b00      	cmp	r3, #0
 800204c:	bf14      	ite	ne
 800204e:	2301      	movne	r3, #1
 8002050:	2300      	moveq	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800207a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800207e:	2b00      	cmp	r3, #0
 8002080:	bf14      	ite	ne
 8002082:	2301      	movne	r3, #1
 8002084:	2300      	moveq	r3, #0
 8002086:	b2db      	uxtb	r3, r3
 8002088:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf14      	ite	ne
 800209c:	2301      	movne	r3, #1
 800209e:	2300      	moveq	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf14      	ite	ne
 80020d2:	2301      	movne	r3, #1
 80020d4:	2300      	moveq	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf14      	ite	ne
 8002120:	2301      	movne	r3, #1
 8002122:	2300      	moveq	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf14      	ite	ne
 800213a:	2301      	movne	r3, #1
 800213c:	2300      	moveq	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002150:	2b00      	cmp	r3, #0
 8002152:	bf14      	ite	ne
 8002154:	2301      	movne	r3, #1
 8002156:	2300      	moveq	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800216a:	2b00      	cmp	r3, #0
 800216c:	bf14      	ite	ne
 800216e:	2301      	movne	r3, #1
 8002170:	2300      	moveq	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	bf14      	ite	ne
 8002196:	2301      	movne	r3, #1
 8002198:	2300      	moveq	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf14      	ite	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	2300      	moveq	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80021fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf14      	ite	ne
 8002220:	2301      	movne	r3, #1
 8002222:	2300      	moveq	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	0e5b      	lsrs	r3, r3, #25
 8002236:	f003 021f 	and.w	r2, r3, #31
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	63da      	str	r2, [r3, #60]	; 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 020f 	and.w	r2, r3, #15
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf14      	ite	ne
 8002276:	2301      	movne	r3, #1
 8002278:	2300      	moveq	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228e:	2b00      	cmp	r3, #0
 8002290:	bf0c      	ite	eq
 8002292:	2301      	moveq	r3, #1
 8002294:	2300      	movne	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf14      	ite	ne
 80022cc:	2301      	movne	r3, #1
 80022ce:	2300      	moveq	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf14      	ite	ne
 80022ea:	2301      	movne	r3, #1
 80022ec:	2300      	moveq	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002300:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002310:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf14      	ite	ne
 8002328:	2301      	movne	r3, #1
 800232a:	2300      	moveq	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b00      	cmp	r3, #0
 8002344:	bf14      	ite	ne
 8002346:	2301      	movne	r3, #1
 8002348:	2300      	moveq	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800235c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e00b      	b.n	80023ac <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800239a:	2b10      	cmp	r3, #16
 800239c:	d105      	bne.n	80023aa <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800239e:	6839      	ldr	r1, [r7, #0]
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f8d5 	bl	8002550 <ETH_SetMACConfig>

    return HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	e000      	b.n	80023ac <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
  }
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e00b      	b.n	80023e0 <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ce:	2b10      	cmp	r3, #16
 80023d0:	d105      	bne.n	80023de <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 80023d2:	6839      	ldr	r1, [r7, #0]
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f9d7 	bl	8002788 <ETH_SetDMAConfig>

    return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e000      	b.n	80023e0 <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
  }
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002400:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002402:	f001 feef 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8002406:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4a25      	ldr	r2, [pc, #148]	; (80024a0 <HAL_ETH_SetMDIOClockRange+0xb8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d908      	bls.n	8002422 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4a24      	ldr	r2, [pc, #144]	; (80024a4 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d804      	bhi.n	8002422 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e034      	b.n	800248c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d908      	bls.n	800243c <HAL_ETH_SetMDIOClockRange+0x54>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <HAL_ETH_SetMDIOClockRange+0xc0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d204      	bcs.n	800243c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	e027      	b.n	800248c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4a1a      	ldr	r2, [pc, #104]	; (80024a8 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d303      	bcc.n	800244c <HAL_ETH_SetMDIOClockRange+0x64>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4a19      	ldr	r2, [pc, #100]	; (80024ac <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d91e      	bls.n	800248a <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4a17      	ldr	r2, [pc, #92]	; (80024ac <HAL_ETH_SetMDIOClockRange+0xc4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d908      	bls.n	8002466 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4a16      	ldr	r2, [pc, #88]	; (80024b0 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d804      	bhi.n	8002466 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	e012      	b.n	800248c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4a11      	ldr	r2, [pc, #68]	; (80024b0 <HAL_ETH_SetMDIOClockRange+0xc8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d908      	bls.n	8002480 <HAL_ETH_SetMDIOClockRange+0x98>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4a10      	ldr	r2, [pc, #64]	; (80024b4 <HAL_ETH_SetMDIOClockRange+0xcc>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d804      	bhi.n	8002480 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	e005      	b.n	800248c <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	e000      	b.n	800248c <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800248a:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	01312cff 	.word	0x01312cff
 80024a4:	02160ebf 	.word	0x02160ebf
 80024a8:	03938700 	.word	0x03938700
 80024ac:	05f5e0ff 	.word	0x05f5e0ff
 80024b0:	08f0d17f 	.word	0x08f0d17f
 80024b4:	0ee6b280 	.word	0x0ee6b280

080024b8 <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;

  if (pFilterConfig == NULL)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e039      	b.n	8002540 <HAL_ETH_SetMACFilterConfig+0x88>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	78db      	ldrb	r3, [r3, #3]
 80024d6:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80024d8:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	791b      	ldrb	r3, [r3, #4]
 80024de:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80024e0:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	7a1b      	ldrb	r3, [r3, #8]
 80024e6:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80024e8:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	795b      	ldrb	r3, [r3, #5]
 80024ee:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80024f0:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	7a52      	ldrb	r2, [r2, #9]
 80024f6:	2a00      	cmp	r2, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ETH_SetMACFilterConfig+0x46>
 80024fa:	2220      	movs	r2, #32
 80024fc:	e000      	b.n	8002500 <HAL_ETH_SetMACFilterConfig+0x48>
 80024fe:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8002500:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	79db      	ldrb	r3, [r3, #7]
 8002506:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8002508:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	799b      	ldrb	r3, [r3, #6]
 800250e:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8002510:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	789b      	ldrb	r3, [r3, #2]
 8002516:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8002518:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8002520:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_ETH_SetMACFilterConfig+0x94>)
 8002532:	4013      	ands	r3, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	430b      	orrs	r3, r1
 800253c:	6093      	str	r3, [r2, #8]

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	7ffff800 	.word	0x7ffff800

08002550 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002562:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	791b      	ldrb	r3, [r3, #4]
 8002568:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800256a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	7b1b      	ldrb	r3, [r3, #12]
 8002570:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002572:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	7b5b      	ldrb	r3, [r3, #13]
 8002578:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800257a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	7b9b      	ldrb	r3, [r3, #14]
 8002580:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002582:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	7bdb      	ldrb	r3, [r3, #15]
 8002588:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800258a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	7c12      	ldrb	r2, [r2, #16]
 8002590:	2a00      	cmp	r2, #0
 8002592:	d102      	bne.n	800259a <ETH_SetMACConfig+0x4a>
 8002594:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002598:	e000      	b.n	800259c <ETH_SetMACConfig+0x4c>
 800259a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800259c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	7c52      	ldrb	r2, [r2, #17]
 80025a2:	2a00      	cmp	r2, #0
 80025a4:	d102      	bne.n	80025ac <ETH_SetMACConfig+0x5c>
 80025a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025aa:	e000      	b.n	80025ae <ETH_SetMACConfig+0x5e>
 80025ac:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80025ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	7c9b      	ldrb	r3, [r3, #18]
 80025b4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025b6:	431a      	orrs	r2, r3
               macconf->Speed |
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80025bc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80025c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	7f1b      	ldrb	r3, [r3, #28]
 80025c8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80025ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	7f5b      	ldrb	r3, [r3, #29]
 80025d0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80025d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	7f92      	ldrb	r2, [r2, #30]
 80025d8:	2a00      	cmp	r2, #0
 80025da:	d102      	bne.n	80025e2 <ETH_SetMACConfig+0x92>
 80025dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025e0:	e000      	b.n	80025e4 <ETH_SetMACConfig+0x94>
 80025e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80025e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	7fdb      	ldrb	r3, [r3, #31]
 80025ea:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80025ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80025f4:	2a00      	cmp	r2, #0
 80025f6:	d102      	bne.n	80025fe <ETH_SetMACConfig+0xae>
 80025f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025fc:	e000      	b.n	8002600 <ETH_SetMACConfig+0xb0>
 80025fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002600:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002606:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800260e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002610:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b57      	ldr	r3, [pc, #348]	; (8002780 <ETH_SetMACConfig+0x230>)
 8002622:	4013      	ands	r3, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	68f9      	ldr	r1, [r7, #12]
 800262a:	430b      	orrs	r3, r1
 800262c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800263a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800263c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002644:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002646:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800264e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002650:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002658:	2a00      	cmp	r2, #0
 800265a:	d102      	bne.n	8002662 <ETH_SetMACConfig+0x112>
 800265c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002660:	e000      	b.n	8002664 <ETH_SetMACConfig+0x114>
 8002662:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002664:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4b43      	ldr	r3, [pc, #268]	; (8002784 <ETH_SetMACConfig+0x234>)
 8002676:	4013      	ands	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	68f9      	ldr	r1, [r7, #12]
 800267e:	430b      	orrs	r3, r1
 8002680:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002688:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	68f9      	ldr	r1, [r7, #12]
 80026a6:	430b      	orrs	r3, r1
 80026a8:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80026b0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80026be:	2a00      	cmp	r2, #0
 80026c0:	d101      	bne.n	80026c6 <ETH_SetMACConfig+0x176>
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	e000      	b.n	80026c8 <ETH_SetMACConfig+0x178>
 80026c6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80026c8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ce:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026da:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80026de:	4013      	ands	r3, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	68f9      	ldr	r1, [r7, #12]
 80026e6:	430b      	orrs	r3, r1
 80026e8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80026f0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80026f8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	f023 0103 	bic.w	r1, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	430a      	orrs	r2, r1
 8002712:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800271e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800273a:	2a00      	cmp	r2, #0
 800273c:	d101      	bne.n	8002742 <ETH_SetMACConfig+0x1f2>
 800273e:	2240      	movs	r2, #64	; 0x40
 8002740:	e000      	b.n	8002744 <ETH_SetMACConfig+0x1f4>
 8002742:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002744:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800274c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800274e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002756:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002764:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	430a      	orrs	r2, r1
 8002770:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	00048083 	.word	0x00048083
 8002784:	c0f88000 	.word	0xc0f88000

08002788 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80027a0:	f023 0302 	bic.w	r3, r3, #2
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	6811      	ldr	r1, [r2, #0]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	430b      	orrs	r3, r1
 80027ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027b2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	791b      	ldrb	r3, [r3, #4]
 80027b8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027be:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	7b1b      	ldrb	r3, [r3, #12]
 80027c4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	68f9      	ldr	r1, [r7, #12]
 80027e2:	430b      	orrs	r3, r1
 80027e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027e8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	7b5b      	ldrb	r3, [r3, #13]
 80027ee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002800:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002804:	4b21      	ldr	r3, [pc, #132]	; (800288c <ETH_SetDMAConfig+0x104>)
 8002806:	4013      	ands	r3, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	68f9      	ldr	r1, [r7, #12]
 800280e:	430b      	orrs	r3, r1
 8002810:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002814:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	7d1b      	ldrb	r3, [r3, #20]
 8002820:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002822:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	7f5b      	ldrb	r3, [r3, #29]
 8002828:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002836:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <ETH_SetDMAConfig+0x108>)
 800283c:	4013      	ands	r3, r2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	68f9      	ldr	r1, [r7, #12]
 8002844:	430b      	orrs	r3, r1
 8002846:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800284a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	7f1b      	ldrb	r3, [r3, #28]
 8002852:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002864:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002868:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800286c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	68f9      	ldr	r1, [r7, #12]
 8002876:	430b      	orrs	r3, r1
 8002878:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800287c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	fffec000 	.word	0xfffec000
 8002890:	ffc0efef 	.word	0xffc0efef

08002894 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b0a4      	sub	sp, #144	; 0x90
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800289c:	2301      	movs	r3, #1
 800289e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028a2:	2300      	movs	r3, #0
 80028a4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80028ec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80028f0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80028f8:	2300      	movs	r3, #0
 80028fa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800290e:	2300      	movs	r3, #0
 8002910:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002912:	2300      	movs	r3, #0
 8002914:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002916:	2300      	movs	r3, #0
 8002918:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002920:	2300      	movs	r3, #0
 8002922:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002926:	2301      	movs	r3, #1
 8002928:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800292c:	2320      	movs	r3, #32
 800292e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002938:	2300      	movs	r3, #0
 800293a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800293e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002944:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002948:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002950:	2302      	movs	r3, #2
 8002952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002956:	2300      	movs	r3, #0
 8002958:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002968:	2301      	movs	r3, #1
 800296a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800296e:	2300      	movs	r3, #0
 8002970:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fde6 	bl	8002550 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002984:	2301      	movs	r3, #1
 8002986:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002988:	2301      	movs	r3, #1
 800298a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800299a:	2300      	movs	r3, #0
 800299c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800299e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80029b4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	4619      	mov	r1, r3
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fee1 	bl	8002788 <ETH_SetDMAConfig>
}
 80029c6:	bf00      	nop
 80029c8:	3790      	adds	r7, #144	; 0x90
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e01d      	b.n	8002a18 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68d9      	ldr	r1, [r3, #12]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	440b      	add	r3, r1
 80029ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2200      	movs	r2, #0
 80029f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	3206      	adds	r2, #6
 8002a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3301      	adds	r3, #1
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d9de      	bls.n	80029dc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2303      	movs	r3, #3
 8002a30:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a40:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a50:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e023      	b.n	8002ab6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6919      	ldr	r1, [r3, #16]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	440b      	add	r3, r1
 8002a7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2200      	movs	r2, #0
 8002a96:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	3212      	adds	r2, #18
 8002aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d9d8      	bls.n	8002a6e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b08d      	sub	sp, #52	; 0x34
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3318      	adds	r3, #24
 8002b2a:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b44:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b5c:	d007      	beq.n	8002b6e <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b62:	3304      	adds	r3, #4
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e25a      	b.n	8003028 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d044      	beq.n	8002c08 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	0c1b      	lsrs	r3, r3, #16
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002baa:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d027      	beq.n	8002c08 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	431a      	orrs	r2, r3
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bf6:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c06:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d010      	beq.n	8002c36 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	6992      	ldr	r2, [r2, #24]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d105      	bne.n	8002c4e <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d036      	beq.n	8002cbc <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c5a:	f3bf 8f5f 	dmb	sy
}
 8002c5e:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	3301      	adds	r3, #1
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d902      	bls.n	8002c7e <ETH_Prepare_Tx_Descriptors+0x164>
 8002c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7a:	3b04      	subs	r3, #4
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c86:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c9a:	d10f      	bne.n	8002cbc <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ca6:	f3bf 8f5f 	dmb	sy
}
 8002caa:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e1b5      	b.n	8003028 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cd8:	69fa      	ldr	r2, [r7, #28]
 8002cda:	6852      	ldr	r2, [r2, #4]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d014      	beq.n	8002d14 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002d02:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	6852      	ldr	r2, [r2, #4]
 8002d0a:	0412      	lsls	r2, r2, #16
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	609a      	str	r2, [r3, #8]
 8002d12:	e00a      	b.n	8002d2a <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	2200      	movs	r2, #0
 8002d18:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002d22:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002d26:	6a3a      	ldr	r2, [r7, #32]
 8002d28:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d019      	beq.n	8002d6a <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	04db      	lsls	r3, r3, #19
 8002d44:	431a      	orrs	r2, r3
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	0c9b      	lsrs	r3, r3, #18
 8002d50:	049b      	lsls	r3, r3, #18
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	69d2      	ldr	r2, [r2, #28]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	60da      	str	r2, [r3, #12]
 8002d68:	e028      	b.n	8002dbc <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	6852      	ldr	r2, [r2, #4]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d008      	beq.n	8002dbc <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002df2:	f3bf 8f5f 	dmb	sy
}
 8002df6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80d9 	beq.w	8002fc4 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e24:	e0ce      	b.n	8002fc4 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	3301      	adds	r3, #1
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d902      	bls.n	8002e44 <ETH_Prepare_Tx_Descriptors+0x32a>
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	3b04      	subs	r3, #4
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e4c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e66:	d007      	beq.n	8002e78 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d029      	beq.n	8002ecc <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e84:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8a:	e019      	b.n	8002ec0 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8002e8c:	f3bf 8f5f 	dmb	sy
}
 8002e90:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d902      	bls.n	8002eb0 <ETH_Prepare_Tx_Descriptors+0x396>
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	3b04      	subs	r3, #4
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d3e1      	bcc.n	8002e8c <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e0ad      	b.n	8003028 <ETH_Prepare_Tx_Descriptors+0x50e>
    }

    descnbr += 1U;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	3301      	adds	r3, #1
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002eea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	6852      	ldr	r2, [r2, #4]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d014      	beq.n	8002f2a <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002f18:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	6852      	ldr	r2, [r2, #4]
 8002f20:	0412      	lsls	r2, r2, #16
 8002f22:	431a      	orrs	r2, r3
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	e00a      	b.n	8002f40 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8002f38:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002f3c:	6a3a      	ldr	r2, [r7, #32]
 8002f3e:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00f      	beq.n	8002f6c <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	0c9b      	lsrs	r3, r3, #18
 8002f52:	049b      	lsls	r3, r3, #18
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	69d2      	ldr	r2, [r2, #28]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	e019      	b.n	8002fa0 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	6852      	ldr	r2, [r2, #4]
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002fa6:	f3bf 8f5f 	dmb	sy
}
 8002faa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f47f af2c 	bne.w	8002e26 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d006      	beq.n	8002fe2 <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	e005      	b.n	8002fee <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ffe:	6979      	ldr	r1, [r7, #20]
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003002:	3304      	adds	r3, #4
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800300e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003010:	b672      	cpsid	i
}
 8003012:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	4413      	add	r3, r2
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003022:	b662      	cpsie	i
}
 8003024:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3734      	adds	r7, #52	; 0x34
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003042:	e136      	b.n	80032b2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	2101      	movs	r1, #1
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	fa01 f303 	lsl.w	r3, r1, r3
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8128 	beq.w	80032ac <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x38>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b12      	cmp	r3, #18
 800306a:	d125      	bne.n	80030b8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	08da      	lsrs	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3208      	adds	r2, #8
 8003074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003078:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	220f      	movs	r2, #15
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4013      	ands	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	08da      	lsrs	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3208      	adds	r2, #8
 80030b2:	6979      	ldr	r1, [r7, #20]
 80030b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4013      	ands	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0203 	and.w	r2, r3, #3
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d00b      	beq.n	800310c <HAL_GPIO_Init+0xd8>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d007      	beq.n	800310c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003100:	2b11      	cmp	r3, #17
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b12      	cmp	r3, #18
 800310a:	d130      	bne.n	800316e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4013      	ands	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003142:	2201      	movs	r2, #1
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4013      	ands	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	f003 0201 	and.w	r2, r3, #1
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b03      	cmp	r3, #3
 8003174:	d017      	beq.n	80031a6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	2203      	movs	r2, #3
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4013      	ands	r3, r2
 800318c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d07c      	beq.n	80032ac <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80031b2:	4a47      	ldr	r2, [pc, #284]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	3318      	adds	r3, #24
 80031ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031be:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	220f      	movs	r2, #15
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4013      	ands	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	0a9a      	lsrs	r2, r3, #10
 80031da:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <HAL_GPIO_Init+0x2a0>)
 80031dc:	4013      	ands	r3, r2
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	f002 0203 	and.w	r2, r2, #3
 80031e4:	00d2      	lsls	r2, r2, #3
 80031e6:	4093      	lsls	r3, r2
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80031ee:	4938      	ldr	r1, [pc, #224]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3318      	adds	r3, #24
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80031fc:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43db      	mvns	r3, r3
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4013      	ands	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003220:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	43db      	mvns	r3, r3
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4013      	ands	r3, r2
 8003234:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800324a:	4a21      	ldr	r2, [pc, #132]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003250:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 8003252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003256:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	43db      	mvns	r3, r3
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	4013      	ands	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003276:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 8003280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003284:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	43db      	mvns	r3, r3
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4013      	ands	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80032a4:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <HAL_GPIO_Init+0x29c>)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	3301      	adds	r3, #1
 80032b0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f47f aec1 	bne.w	8003044 <HAL_GPIO_Init+0x10>
  }
}
 80032c2:	bf00      	nop
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	44022000 	.word	0x44022000
 80032d4:	002f7f7f 	.word	0x002f7f7f

080032d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	807b      	strh	r3, [r7, #2]
 80032e4:	4613      	mov	r3, r2
 80032e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032e8:	787b      	ldrb	r3, [r7, #1]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ee:	887a      	ldrh	r2, [r7, #2]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032f4:	e002      	b.n	80032fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_ICACHE_Enable+0x1c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a04      	ldr	r2, [pc, #16]	; (8003324 <HAL_ICACHE_Enable+0x1c>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40030400 	.word	0x40030400

08003328 <HAL_PWR_EnableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN6_HIGH, PWR_WAKEUP_PIN6_LOW, PWR_WAKEUP_PIN7_HIGH, PWR_WAKEUP_PIN7_LOW,
  *         PWR_WAKEUP_PIN8_HIGH and PWR_WAKEUP_PIN8_LOW are not available for STM32H503xx devices.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  /*
     Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge).
  */
  MODIFY_REG(PWR->WUCR, PWR_EWUP_MASK, WakeUpPinPolarity);
 8003330:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_PWR_EnableWakeUpPin+0x24>)
 8003332:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_PWR_EnableWakeUpPin+0x28>)
 8003336:	4013      	ands	r3, r2
 8003338:	4904      	ldr	r1, [pc, #16]	; (800334c <HAL_PWR_EnableWakeUpPin+0x24>)
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	4313      	orrs	r3, r2
 800333e:	648b      	str	r3, [r1, #72]	; 0x48
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	44020800 	.word	0x44020800
 8003350:	f000c0c0 	.word	0xf000c0c0

08003354 <HAL_PWR_DisableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN6_HIGH, PWR_WAKEUP_PIN6_LOW, PWR_WAKEUP_PIN7_HIGH, PWR_WAKEUP_PIN7_LOW,
  *         PWR_WAKEUP_PIN8_HIGH and PWR_WAKEUP_PIN8_LOW are not available for STM32H503xx devices.
  * @retval None.
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT(PWR->WUCR, (PWR_WUCR_WUPEN & WakeUpPinx));
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_PWR_DisableWakeUpPin+0x24>)
 800335e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	4904      	ldr	r1, [pc, #16]	; (8003378 <HAL_PWR_DisableWakeUpPin+0x24>)
 8003368:	4013      	ands	r3, r2
 800336a:	648b      	str	r3, [r1, #72]	; 0x48
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	44020800 	.word	0x44020800

0800337c <HAL_PWR_EnterSTANDBYMode>:
  *         except for registers and backup SRAM in the Backup domain and
  *         STANDBY circuitry.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  /* Select STANDBY mode */
  SET_BIT(PWR->PMCR, PWR_PMCR_LPMS);
 8003380:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003392:	f043 0304 	orr.w	r3, r3, #4
 8003396:	6113      	str	r3, [r2, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Wait For Interrupt Request */
  __WFI();
 8003398:	bf30      	wfi
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	44020800 	.word	0x44020800
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d102      	bne.n	80033c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	f000 bc28 	b.w	8003c10 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033c0:	4b94      	ldr	r3, [pc, #592]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f003 0318 	and.w	r3, r3, #24
 80033c8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80033ca:	4b92      	ldr	r3, [pc, #584]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d05b      	beq.n	8003498 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_OscConfig+0x46>
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	2b18      	cmp	r3, #24
 80033ea:	d114      	bne.n	8003416 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d111      	bne.n	8003416 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d102      	bne.n	8003400 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f000 bc08 	b.w	8003c10 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003400:	4b84      	ldr	r3, [pc, #528]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	041b      	lsls	r3, r3, #16
 800340e:	4981      	ldr	r1, [pc, #516]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003410:	4313      	orrs	r3, r2
 8003412:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003414:	e040      	b.n	8003498 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d023      	beq.n	8003466 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800341e:	4b7d      	ldr	r3, [pc, #500]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a7c      	ldr	r2, [pc, #496]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fd ff55 	bl	80012d8 <HAL_GetTick>
 800342e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003432:	f7fd ff51 	bl	80012d8 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e3e5      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003444:	4b73      	ldr	r3, [pc, #460]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003450:	4b70      	ldr	r3, [pc, #448]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	041b      	lsls	r3, r3, #16
 800345e:	496d      	ldr	r1, [pc, #436]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003460:	4313      	orrs	r3, r2
 8003462:	618b      	str	r3, [r1, #24]
 8003464:	e018      	b.n	8003498 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003466:	4b6b      	ldr	r3, [pc, #428]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6a      	ldr	r2, [pc, #424]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 800346c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fd ff31 	bl	80012d8 <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800347a:	f7fd ff2d 	bl	80012d8 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e3c1      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800348c:	4b61      	ldr	r3, [pc, #388]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f0      	bne.n	800347a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80a0 	beq.w	80035e6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	2b10      	cmp	r3, #16
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_OscConfig+0x10c>
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	2b18      	cmp	r3, #24
 80034b0:	d109      	bne.n	80034c6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d106      	bne.n	80034c6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f040 8092 	bne.w	80035e6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e3a4      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x132>
 80034d0:	4b50      	ldr	r3, [pc, #320]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a4f      	ldr	r2, [pc, #316]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 80034d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	e058      	b.n	8003590 <HAL_RCC_OscConfig+0x1e4>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d112      	bne.n	800350c <HAL_RCC_OscConfig+0x160>
 80034e6:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a4a      	ldr	r2, [pc, #296]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 80034ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	4b48      	ldr	r3, [pc, #288]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a47      	ldr	r2, [pc, #284]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 80034f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b45      	ldr	r3, [pc, #276]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a44      	ldr	r2, [pc, #272]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e041      	b.n	8003590 <HAL_RCC_OscConfig+0x1e4>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003514:	d112      	bne.n	800353c <HAL_RCC_OscConfig+0x190>
 8003516:	4b3f      	ldr	r3, [pc, #252]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a3e      	ldr	r2, [pc, #248]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 800351c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	4b3c      	ldr	r3, [pc, #240]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a3b      	ldr	r2, [pc, #236]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003528:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b39      	ldr	r3, [pc, #228]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a38      	ldr	r2, [pc, #224]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e029      	b.n	8003590 <HAL_RCC_OscConfig+0x1e4>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003544:	d112      	bne.n	800356c <HAL_RCC_OscConfig+0x1c0>
 8003546:	4b33      	ldr	r3, [pc, #204]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a32      	ldr	r2, [pc, #200]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 800354c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b30      	ldr	r3, [pc, #192]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2f      	ldr	r2, [pc, #188]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4b2d      	ldr	r3, [pc, #180]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a2c      	ldr	r2, [pc, #176]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e011      	b.n	8003590 <HAL_RCC_OscConfig+0x1e4>
 800356c:	4b29      	ldr	r3, [pc, #164]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a28      	ldr	r2, [pc, #160]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4b26      	ldr	r3, [pc, #152]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a25      	ldr	r2, [pc, #148]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 800357e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b23      	ldr	r3, [pc, #140]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a22      	ldr	r2, [pc, #136]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 800358a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800358e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d013      	beq.n	80035c0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fd fe9e 	bl	80012d8 <HAL_GetTick>
 800359c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80035a0:	f7fd fe9a 	bl	80012d8 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	; 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e32e      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b2:	4b18      	ldr	r3, [pc, #96]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x1f4>
 80035be:	e012      	b.n	80035e6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fd fe8a 	bl	80012d8 <HAL_GetTick>
 80035c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80035c8:	f7fd fe86 	bl	80012d8 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e31a      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035da:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <HAL_RCC_OscConfig+0x268>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 809a 	beq.w	8003728 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_RCC_OscConfig+0x25a>
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	2b18      	cmp	r3, #24
 80035fe:	d149      	bne.n	8003694 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d146      	bne.n	8003694 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d104      	bne.n	8003618 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e2fe      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
 8003612:	bf00      	nop
 8003614:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d11c      	bne.n	8003658 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800361e:	4b9a      	ldr	r3, [pc, #616]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0218 	and.w	r2, r3, #24
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	429a      	cmp	r2, r3
 800362c:	d014      	beq.n	8003658 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800362e:	4b96      	ldr	r3, [pc, #600]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 0218 	bic.w	r2, r3, #24
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	4993      	ldr	r1, [pc, #588]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 800363c:	4313      	orrs	r3, r2
 800363e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003640:	f000 fdd0 	bl	80041e4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003644:	4b91      	ldr	r3, [pc, #580]	; (800388c <HAL_RCC_OscConfig+0x4e0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7fd fa19 	bl	8000a80 <HAL_InitTick>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e2db      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd fe3e 	bl	80012d8 <HAL_GetTick>
 800365c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003660:	f7fd fe3a 	bl	80012d8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e2ce      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003672:	4b85      	ldr	r3, [pc, #532]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800367e:	4b82      	ldr	r3, [pc, #520]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	041b      	lsls	r3, r3, #16
 800368c:	497e      	ldr	r1, [pc, #504]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003692:	e049      	b.n	8003728 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d02c      	beq.n	80036f6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800369c:	4b7a      	ldr	r3, [pc, #488]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f023 0218 	bic.w	r2, r3, #24
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	4977      	ldr	r1, [pc, #476]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80036ae:	4b76      	ldr	r3, [pc, #472]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a75      	ldr	r2, [pc, #468]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7fd fe0d 	bl	80012d8 <HAL_GetTick>
 80036be:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80036c2:	f7fd fe09 	bl	80012d8 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e29d      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036d4:	4b6c      	ldr	r3, [pc, #432]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80036e0:	4b69      	ldr	r3, [pc, #420]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	041b      	lsls	r3, r3, #16
 80036ee:	4966      	ldr	r1, [pc, #408]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	610b      	str	r3, [r1, #16]
 80036f4:	e018      	b.n	8003728 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f6:	4b64      	ldr	r3, [pc, #400]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a63      	ldr	r2, [pc, #396]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fd fde9 	bl	80012d8 <HAL_GetTick>
 8003706:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800370a:	f7fd fde5 	bl	80012d8 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e279      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800371c:	4b5a      	ldr	r3, [pc, #360]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f0      	bne.n	800370a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d03c      	beq.n	80037ae <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01c      	beq.n	8003776 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373c:	4b52      	ldr	r3, [pc, #328]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 800373e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003742:	4a51      	ldr	r2, [pc, #324]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 8003744:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003748:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374c:	f7fd fdc4 	bl	80012d8 <HAL_GetTick>
 8003750:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003754:	f7fd fdc0 	bl	80012d8 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e254      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003766:	4b48      	ldr	r3, [pc, #288]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 8003768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800376c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ef      	beq.n	8003754 <HAL_RCC_OscConfig+0x3a8>
 8003774:	e01b      	b.n	80037ae <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003776:	4b44      	ldr	r3, [pc, #272]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 8003778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800377c:	4a42      	ldr	r2, [pc, #264]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 800377e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003782:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003786:	f7fd fda7 	bl	80012d8 <HAL_GetTick>
 800378a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800378e:	f7fd fda3 	bl	80012d8 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e237      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80037a0:	4b39      	ldr	r3, [pc, #228]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 80037a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1ef      	bne.n	800378e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 80d2 	beq.w	8003960 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80037bc:	4b34      	ldr	r3, [pc, #208]	; (8003890 <HAL_RCC_OscConfig+0x4e4>)
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d118      	bne.n	80037fa <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80037c8:	4b31      	ldr	r3, [pc, #196]	; (8003890 <HAL_RCC_OscConfig+0x4e4>)
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	4a30      	ldr	r2, [pc, #192]	; (8003890 <HAL_RCC_OscConfig+0x4e4>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d4:	f7fd fd80 	bl	80012d8 <HAL_GetTick>
 80037d8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037dc:	f7fd fd7c 	bl	80012d8 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e210      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80037ee:	4b28      	ldr	r3, [pc, #160]	; (8003890 <HAL_RCC_OscConfig+0x4e4>)
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d108      	bne.n	8003814 <HAL_RCC_OscConfig+0x468>
 8003802:	4b21      	ldr	r3, [pc, #132]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 8003804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003808:	4a1f      	ldr	r2, [pc, #124]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 800380a:	f043 0301 	orr.w	r3, r3, #1
 800380e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003812:	e074      	b.n	80038fe <HAL_RCC_OscConfig+0x552>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d118      	bne.n	800384e <HAL_RCC_OscConfig+0x4a2>
 800381c:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 800381e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003822:	4a19      	ldr	r2, [pc, #100]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800382c:	4b16      	ldr	r3, [pc, #88]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 800382e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003832:	4a15      	ldr	r2, [pc, #84]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 8003834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003838:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800383c:	4b12      	ldr	r3, [pc, #72]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 800383e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003842:	4a11      	ldr	r2, [pc, #68]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 8003844:	f023 0304 	bic.w	r3, r3, #4
 8003848:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800384c:	e057      	b.n	80038fe <HAL_RCC_OscConfig+0x552>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b05      	cmp	r3, #5
 8003854:	d11e      	bne.n	8003894 <HAL_RCC_OscConfig+0x4e8>
 8003856:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 8003858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800385c:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 800385e:	f043 0304 	orr.w	r3, r3, #4
 8003862:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003866:	4b08      	ldr	r3, [pc, #32]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 8003868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800386c:	4a06      	ldr	r2, [pc, #24]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 800386e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003872:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003876:	4b04      	ldr	r3, [pc, #16]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 8003878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800387c:	4a02      	ldr	r2, [pc, #8]	; (8003888 <HAL_RCC_OscConfig+0x4dc>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003886:	e03a      	b.n	80038fe <HAL_RCC_OscConfig+0x552>
 8003888:	44020c00 	.word	0x44020c00
 800388c:	20000004 	.word	0x20000004
 8003890:	44020800 	.word	0x44020800
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b85      	cmp	r3, #133	; 0x85
 800389a:	d118      	bne.n	80038ce <HAL_RCC_OscConfig+0x522>
 800389c:	4ba2      	ldr	r3, [pc, #648]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 800389e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038a2:	4aa1      	ldr	r2, [pc, #644]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80038a4:	f043 0304 	orr.w	r3, r3, #4
 80038a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038ac:	4b9e      	ldr	r3, [pc, #632]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80038ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038b2:	4a9d      	ldr	r2, [pc, #628]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80038b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038bc:	4b9a      	ldr	r3, [pc, #616]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80038be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038c2:	4a99      	ldr	r2, [pc, #612]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038cc:	e017      	b.n	80038fe <HAL_RCC_OscConfig+0x552>
 80038ce:	4b96      	ldr	r3, [pc, #600]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80038d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038d4:	4a94      	ldr	r2, [pc, #592]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038de:	4b92      	ldr	r3, [pc, #584]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80038e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038e4:	4a90      	ldr	r2, [pc, #576]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80038e6:	f023 0304 	bic.w	r3, r3, #4
 80038ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038ee:	4b8e      	ldr	r3, [pc, #568]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80038f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038f4:	4a8c      	ldr	r2, [pc, #560]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80038f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d016      	beq.n	8003934 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003906:	f7fd fce7 	bl	80012d8 <HAL_GetTick>
 800390a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800390c:	e00a      	b.n	8003924 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390e:	f7fd fce3 	bl	80012d8 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f241 3288 	movw	r2, #5000	; 0x1388
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e175      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003924:	4b80      	ldr	r3, [pc, #512]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0ed      	beq.n	800390e <HAL_RCC_OscConfig+0x562>
 8003932:	e015      	b.n	8003960 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7fd fcd0 	bl	80012d8 <HAL_GetTick>
 8003938:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800393a:	e00a      	b.n	8003952 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393c:	f7fd fccc 	bl	80012d8 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	; 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e15e      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003952:	4b75      	ldr	r3, [pc, #468]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1ed      	bne.n	800393c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d036      	beq.n	80039da <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	2b00      	cmp	r3, #0
 8003972:	d019      	beq.n	80039a8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003974:	4b6c      	ldr	r3, [pc, #432]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a6b      	ldr	r2, [pc, #428]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 800397a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800397e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fd fcaa 	bl	80012d8 <HAL_GetTick>
 8003984:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003988:	f7fd fca6 	bl	80012d8 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e13a      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800399a:	4b63      	ldr	r3, [pc, #396]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x5dc>
 80039a6:	e018      	b.n	80039da <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039a8:	4b5f      	ldr	r3, [pc, #380]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a5e      	ldr	r2, [pc, #376]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80039ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fd fc90 	bl	80012d8 <HAL_GetTick>
 80039b8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80039bc:	f7fd fc8c 	bl	80012d8 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e120      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80039ce:	4b56      	ldr	r3, [pc, #344]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8115 	beq.w	8003c0e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b18      	cmp	r3, #24
 80039e8:	f000 80af 	beq.w	8003b4a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	f040 8086 	bne.w	8003b02 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80039f6:	4b4c      	ldr	r3, [pc, #304]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a4b      	ldr	r2, [pc, #300]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 80039fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a02:	f7fd fc69 	bl	80012d8 <HAL_GetTick>
 8003a06:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003a0a:	f7fd fc65 	bl	80012d8 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e0f9      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a1c:	4b42      	ldr	r3, [pc, #264]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003a28:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a30:	f023 0303 	bic.w	r3, r3, #3
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a3c:	0212      	lsls	r2, r2, #8
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	4939      	ldr	r1, [pc, #228]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	628b      	str	r3, [r1, #40]	; 0x28
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	3b01      	subs	r3, #1
 8003a56:	025b      	lsls	r3, r3, #9
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a60:	3b01      	subs	r3, #1
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	061b      	lsls	r3, r3, #24
 8003a72:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a76:	492c      	ldr	r1, [pc, #176]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	4a29      	ldr	r2, [pc, #164]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003a82:	f023 0310 	bic.w	r3, r3, #16
 8003a86:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8c:	4a26      	ldr	r2, [pc, #152]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003a92:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	4a24      	ldr	r2, [pc, #144]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003a98:	f043 0310 	orr.w	r3, r3, #16
 8003a9c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	f023 020c 	bic.w	r2, r3, #12
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	491f      	ldr	r1, [pc, #124]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	f023 0220 	bic.w	r2, r3, #32
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abc:	491a      	ldr	r1, [pc, #104]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ac2:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003acc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8003ace:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003ad4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ada:	f7fd fbfd 	bl	80012d8 <HAL_GetTick>
 8003ade:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003ae2:	f7fd fbf9 	bl	80012d8 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e08d      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x736>
 8003b00:	e085      	b.n	8003c0e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003b02:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a08      	ldr	r2, [pc, #32]	; (8003b28 <HAL_RCC_OscConfig+0x77c>)
 8003b08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7fd fbe3 	bl	80012d8 <HAL_GetTick>
 8003b12:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b14:	e00a      	b.n	8003b2c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003b16:	f7fd fbdf 	bl	80012d8 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d903      	bls.n	8003b2c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e073      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
 8003b28:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003b2c:	4b3a      	ldr	r3, [pc, #232]	; (8003c18 <HAL_RCC_OscConfig+0x86c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1ee      	bne.n	8003b16 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003b38:	4b37      	ldr	r3, [pc, #220]	; (8003c18 <HAL_RCC_OscConfig+0x86c>)
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	4a36      	ldr	r2, [pc, #216]	; (8003c18 <HAL_RCC_OscConfig+0x86c>)
 8003b3e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003b42:	f023 0303 	bic.w	r3, r3, #3
 8003b46:	6293      	str	r3, [r2, #40]	; 0x28
 8003b48:	e061      	b.n	8003c0e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003b4a:	4b33      	ldr	r3, [pc, #204]	; (8003c18 <HAL_RCC_OscConfig+0x86c>)
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b50:	4b31      	ldr	r3, [pc, #196]	; (8003c18 <HAL_RCC_OscConfig+0x86c>)
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d031      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f003 0203 	and.w	r2, r3, #3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d12a      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d122      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b86:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d11a      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	0a5b      	lsrs	r3, r3, #9
 8003b90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d111      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d108      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	0e1b      	lsrs	r3, r3, #24
 8003bb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e024      	b.n	8003c10 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003bc6:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <HAL_RCC_OscConfig+0x86c>)
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	08db      	lsrs	r3, r3, #3
 8003bcc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d01a      	beq.n	8003c0e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <HAL_RCC_OscConfig+0x86c>)
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	4a0e      	ldr	r2, [pc, #56]	; (8003c18 <HAL_RCC_OscConfig+0x86c>)
 8003bde:	f023 0310 	bic.w	r3, r3, #16
 8003be2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fd fb78 	bl	80012d8 <HAL_GetTick>
 8003be8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8003bea:	bf00      	nop
 8003bec:	f7fd fb74 	bl	80012d8 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d0f9      	beq.n	8003bec <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfc:	4a06      	ldr	r2, [pc, #24]	; (8003c18 <HAL_RCC_OscConfig+0x86c>)
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_RCC_OscConfig+0x86c>)
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <HAL_RCC_OscConfig+0x86c>)
 8003c08:	f043 0310 	orr.w	r3, r3, #16
 8003c0c:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3720      	adds	r7, #32
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	44020c00 	.word	0x44020c00

08003c1c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e19e      	b.n	8003f6e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b83      	ldr	r3, [pc, #524]	; (8003e40 <HAL_RCC_ClockConfig+0x224>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d910      	bls.n	8003c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b80      	ldr	r3, [pc, #512]	; (8003e40 <HAL_RCC_ClockConfig+0x224>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 020f 	bic.w	r2, r3, #15
 8003c46:	497e      	ldr	r1, [pc, #504]	; (8003e40 <HAL_RCC_ClockConfig+0x224>)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b7c      	ldr	r3, [pc, #496]	; (8003e40 <HAL_RCC_ClockConfig+0x224>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e186      	b.n	8003f6e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d012      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	4b74      	ldr	r3, [pc, #464]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d909      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003c7e:	4b71      	ldr	r3, [pc, #452]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	496d      	ldr	r1, [pc, #436]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d012      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	4b68      	ldr	r3, [pc, #416]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d909      	bls.n	8003cc4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003cb0:	4b64      	ldr	r3, [pc, #400]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	4961      	ldr	r1, [pc, #388]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d010      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	4b5b      	ldr	r3, [pc, #364]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d908      	bls.n	8003cf2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003ce0:	4b58      	ldr	r3, [pc, #352]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4955      	ldr	r1, [pc, #340]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d010      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d908      	bls.n	8003d20 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003d0e:	4b4d      	ldr	r3, [pc, #308]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f023 020f 	bic.w	r2, r3, #15
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	494a      	ldr	r1, [pc, #296]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8093 	beq.w	8003e54 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003d36:	4b43      	ldr	r3, [pc, #268]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d121      	bne.n	8003d86 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e113      	b.n	8003f6e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d4e:	4b3d      	ldr	r3, [pc, #244]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d115      	bne.n	8003d86 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e107      	b.n	8003f6e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003d66:	4b37      	ldr	r3, [pc, #220]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e0fb      	b.n	8003f6e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d76:	4b33      	ldr	r3, [pc, #204]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e0f3      	b.n	8003f6e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003d86:	4b2f      	ldr	r3, [pc, #188]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	f023 0203 	bic.w	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	492c      	ldr	r1, [pc, #176]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d98:	f7fd fa9e 	bl	80012d8 <HAL_GetTick>
 8003d9c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d112      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da6:	e00a      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003da8:	f7fd fa96 	bl	80012d8 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e0d7      	b.n	8003f6e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dbe:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f003 0318 	and.w	r3, r3, #24
 8003dc6:	2b18      	cmp	r3, #24
 8003dc8:	d1ee      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x18c>
 8003dca:	e043      	b.n	8003e54 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d112      	bne.n	8003dfa <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd6:	f7fd fa7f 	bl	80012d8 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e0c0      	b.n	8003f6e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dec:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f003 0318 	and.w	r3, r3, #24
 8003df4:	2b10      	cmp	r3, #16
 8003df6:	d1ee      	bne.n	8003dd6 <HAL_RCC_ClockConfig+0x1ba>
 8003df8:	e02c      	b.n	8003e54 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d122      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e04:	f7fd fa68 	bl	80012d8 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e0a9      	b.n	8003f6e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <HAL_RCC_ClockConfig+0x228>)
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f003 0318 	and.w	r3, r3, #24
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d1ee      	bne.n	8003e04 <HAL_RCC_ClockConfig+0x1e8>
 8003e26:	e015      	b.n	8003e54 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003e28:	f7fd fa56 	bl	80012d8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d906      	bls.n	8003e48 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e097      	b.n	8003f6e <HAL_RCC_ClockConfig+0x352>
 8003e3e:	bf00      	nop
 8003e40:	40022000 	.word	0x40022000
 8003e44:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e48:	4b4b      	ldr	r3, [pc, #300]	; (8003f78 <HAL_RCC_ClockConfig+0x35c>)
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f003 0318 	and.w	r3, r3, #24
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e9      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d010      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	4b44      	ldr	r3, [pc, #272]	; (8003f78 <HAL_RCC_ClockConfig+0x35c>)
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d208      	bcs.n	8003e82 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003e70:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <HAL_RCC_ClockConfig+0x35c>)
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f023 020f 	bic.w	r2, r3, #15
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	493e      	ldr	r1, [pc, #248]	; (8003f78 <HAL_RCC_ClockConfig+0x35c>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e82:	4b3e      	ldr	r3, [pc, #248]	; (8003f7c <HAL_RCC_ClockConfig+0x360>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d210      	bcs.n	8003eb2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e90:	4b3a      	ldr	r3, [pc, #232]	; (8003f7c <HAL_RCC_ClockConfig+0x360>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f023 020f 	bic.w	r2, r3, #15
 8003e98:	4938      	ldr	r1, [pc, #224]	; (8003f7c <HAL_RCC_ClockConfig+0x360>)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea0:	4b36      	ldr	r3, [pc, #216]	; (8003f7c <HAL_RCC_ClockConfig+0x360>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d001      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e05d      	b.n	8003f6e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d010      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <HAL_RCC_ClockConfig+0x35c>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d208      	bcs.n	8003ee0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003ece:	4b2a      	ldr	r3, [pc, #168]	; (8003f78 <HAL_RCC_ClockConfig+0x35c>)
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	4927      	ldr	r1, [pc, #156]	; (8003f78 <HAL_RCC_ClockConfig+0x35c>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d012      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <HAL_RCC_ClockConfig+0x35c>)
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d209      	bcs.n	8003f12 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003efe:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <HAL_RCC_ClockConfig+0x35c>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	491a      	ldr	r1, [pc, #104]	; (8003f78 <HAL_RCC_ClockConfig+0x35c>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0310 	and.w	r3, r3, #16
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d012      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695a      	ldr	r2, [r3, #20]
 8003f22:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <HAL_RCC_ClockConfig+0x35c>)
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	0a1b      	lsrs	r3, r3, #8
 8003f28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d209      	bcs.n	8003f44 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <HAL_RCC_ClockConfig+0x35c>)
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	490e      	ldr	r1, [pc, #56]	; (8003f78 <HAL_RCC_ClockConfig+0x35c>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003f44:	f000 f822 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCC_ClockConfig+0x35c>)
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	490b      	ldr	r1, [pc, #44]	; (8003f80 <HAL_RCC_ClockConfig+0x364>)
 8003f54:	5ccb      	ldrb	r3, [r1, r3]
 8003f56:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <HAL_RCC_ClockConfig+0x368>)
 8003f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <HAL_RCC_ClockConfig+0x36c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fc fd8c 	bl	8000a80 <HAL_InitTick>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003f6c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	44020c00 	.word	0x44020c00
 8003f7c:	40022000 	.word	0x40022000
 8003f80:	0800fad0 	.word	0x0800fad0
 8003f84:	20000000 	.word	0x20000000
 8003f88:	20000004 	.word	0x20000004

08003f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	; 0x24
 8003f90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003f92:	4b8c      	ldr	r3, [pc, #560]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f003 0318 	and.w	r3, r3, #24
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d102      	bne.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003f9e:	4b8a      	ldr	r3, [pc, #552]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	e107      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fa4:	4b87      	ldr	r3, [pc, #540]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f003 0318 	and.w	r3, r3, #24
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d112      	bne.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003fb0:	4b84      	ldr	r3, [pc, #528]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d009      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fbc:	4b81      	ldr	r3, [pc, #516]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	08db      	lsrs	r3, r3, #3
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	4a81      	ldr	r2, [pc, #516]	; (80041cc <HAL_RCC_GetSysClockFreq+0x240>)
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	e0f1      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003fd0:	4b7e      	ldr	r3, [pc, #504]	; (80041cc <HAL_RCC_GetSysClockFreq+0x240>)
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	e0ee      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fd6:	4b7b      	ldr	r3, [pc, #492]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f003 0318 	and.w	r3, r3, #24
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d102      	bne.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fe2:	4b7b      	ldr	r3, [pc, #492]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x244>)
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	e0e5      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fe8:	4b76      	ldr	r3, [pc, #472]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f003 0318 	and.w	r3, r3, #24
 8003ff0:	2b18      	cmp	r3, #24
 8003ff2:	f040 80dd 	bne.w	80041b0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003ff6:	4b73      	ldr	r3, [pc, #460]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004000:	4b70      	ldr	r3, [pc, #448]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	0a1b      	lsrs	r3, r3, #8
 8004006:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800400a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800400c:	4b6d      	ldr	r3, [pc, #436]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004018:	4b6a      	ldr	r3, [pc, #424]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800401c:	08db      	lsrs	r3, r3, #3
 800401e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	fb02 f303 	mul.w	r3, r2, r3
 8004028:	ee07 3a90 	vmov	s15, r3
 800402c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004030:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 80b7 	beq.w	80041aa <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d003      	beq.n	800404a <HAL_RCC_GetSysClockFreq+0xbe>
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b03      	cmp	r3, #3
 8004046:	d056      	beq.n	80040f6 <HAL_RCC_GetSysClockFreq+0x16a>
 8004048:	e077      	b.n	800413a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800404a:	4b5e      	ldr	r3, [pc, #376]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d02d      	beq.n	80040b2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004056:	4b5b      	ldr	r3, [pc, #364]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	08db      	lsrs	r3, r3, #3
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	4a5a      	ldr	r2, [pc, #360]	; (80041cc <HAL_RCC_GetSysClockFreq+0x240>)
 8004062:	fa22 f303 	lsr.w	r3, r2, r3
 8004066:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004080:	4b50      	ldr	r3, [pc, #320]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004088:	ee07 3a90 	vmov	s15, r3
 800408c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004090:	ed97 6a02 	vldr	s12, [r7, #8]
 8004094:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80041d4 <HAL_RCC_GetSysClockFreq+0x248>
 8004098:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800409c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80040a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ac:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80040b0:	e065      	b.n	800417e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	ee07 3a90 	vmov	s15, r3
 80040b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040bc:	eddf 6a46 	vldr	s13, [pc, #280]	; 80041d8 <HAL_RCC_GetSysClockFreq+0x24c>
 80040c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040c4:	4b3f      	ldr	r3, [pc, #252]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 80040c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040cc:	ee07 3a90 	vmov	s15, r3
 80040d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80040d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80040d8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80041d4 <HAL_RCC_GetSysClockFreq+0x248>
 80040dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80040e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80040f4:	e043      	b.n	800417e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	ee07 3a90 	vmov	s15, r3
 80040fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004100:	eddf 6a36 	vldr	s13, [pc, #216]	; 80041dc <HAL_RCC_GetSysClockFreq+0x250>
 8004104:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004108:	4b2e      	ldr	r3, [pc, #184]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800410a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004110:	ee07 3a90 	vmov	s15, r3
 8004114:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004118:	ed97 6a02 	vldr	s12, [r7, #8]
 800411c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80041d4 <HAL_RCC_GetSysClockFreq+0x248>
 8004120:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004124:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004128:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800412c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004134:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004138:	e021      	b.n	800417e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	ee07 3a90 	vmov	s15, r3
 8004140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004144:	eddf 6a26 	vldr	s13, [pc, #152]	; 80041e0 <HAL_RCC_GetSysClockFreq+0x254>
 8004148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800414c:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 800414e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004154:	ee07 3a90 	vmov	s15, r3
 8004158:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800415c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004160:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80041d4 <HAL_RCC_GetSysClockFreq+0x248>
 8004164:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004168:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800416c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004170:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004178:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800417c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800417e:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x238>)
 8004180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004182:	0a5b      	lsrs	r3, r3, #9
 8004184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004188:	3301      	adds	r3, #1
 800418a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004196:	edd7 6a06 	vldr	s13, [r7, #24]
 800419a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800419e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a2:	ee17 3a90 	vmov	r3, s15
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	e004      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	e001      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_RCC_GetSysClockFreq+0x240>)
 80041b2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80041b4:	69fb      	ldr	r3, [r7, #28]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3724      	adds	r7, #36	; 0x24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	44020c00 	.word	0x44020c00
 80041c8:	003d0900 	.word	0x003d0900
 80041cc:	03d09000 	.word	0x03d09000
 80041d0:	007a1200 	.word	0x007a1200
 80041d4:	46000000 	.word	0x46000000
 80041d8:	4c742400 	.word	0x4c742400
 80041dc:	4af42400 	.word	0x4af42400
 80041e0:	4a742400 	.word	0x4a742400

080041e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80041e8:	f7ff fed0 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b08      	ldr	r3, [pc, #32]	; (8004210 <HAL_RCC_GetHCLKFreq+0x2c>)
 80041f0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80041f2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80041f6:	4907      	ldr	r1, [pc, #28]	; (8004214 <HAL_RCC_GetHCLKFreq+0x30>)
 80041f8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80041fa:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80041fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004202:	4a05      	ldr	r2, [pc, #20]	; (8004218 <HAL_RCC_GetHCLKFreq+0x34>)
 8004204:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004206:	4b04      	ldr	r3, [pc, #16]	; (8004218 <HAL_RCC_GetHCLKFreq+0x34>)
 8004208:	681b      	ldr	r3, [r3, #0]
}
 800420a:	4618      	mov	r0, r3
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	44020c00 	.word	0x44020c00
 8004214:	0800fad0 	.word	0x0800fad0
 8004218:	20000000 	.word	0x20000000

0800421c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004220:	f7ff ffe0 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004224:	4602      	mov	r2, r0
 8004226:	4b06      	ldr	r3, [pc, #24]	; (8004240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	4904      	ldr	r1, [pc, #16]	; (8004244 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004232:	5ccb      	ldrb	r3, [r1, r3]
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800423c:	4618      	mov	r0, r3
 800423e:	bd80      	pop	{r7, pc}
 8004240:	44020c00 	.word	0x44020c00
 8004244:	0800fae0 	.word	0x0800fae0

08004248 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	221f      	movs	r2, #31
 8004256:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004258:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <HAL_RCC_GetClockConfig+0x68>)
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	f003 0203 	and.w	r2, r3, #3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8004264:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <HAL_RCC_GetClockConfig+0x68>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f003 020f 	and.w	r2, r3, #15
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <HAL_RCC_GetClockConfig+0x6c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 020f 	and.w	r2, r3, #15
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	601a      	str	r2, [r3, #0]
}
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	44020c00 	.word	0x44020c00
 80042b4:	40022000 	.word	0x40022000

080042b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e049      	b.n	800435e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f841 	bl	8004366 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f000 fa60 	bl	80047bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	d001      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e07c      	b.n	800448e <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a3a      	ldr	r2, [pc, #232]	; (800449c <HAL_TIM_Base_Start_IT+0x120>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d04a      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xd0>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a39      	ldr	r2, [pc, #228]	; (80044a0 <HAL_TIM_Base_Start_IT+0x124>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d045      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xd0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c8:	d040      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xd0>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043d2:	d03b      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xd0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a32      	ldr	r2, [pc, #200]	; (80044a4 <HAL_TIM_Base_Start_IT+0x128>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d036      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xd0>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a31      	ldr	r2, [pc, #196]	; (80044a8 <HAL_TIM_Base_Start_IT+0x12c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d031      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xd0>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a2f      	ldr	r2, [pc, #188]	; (80044ac <HAL_TIM_Base_Start_IT+0x130>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d02c      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xd0>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a2e      	ldr	r2, [pc, #184]	; (80044b0 <HAL_TIM_Base_Start_IT+0x134>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d027      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xd0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a2c      	ldr	r2, [pc, #176]	; (80044b4 <HAL_TIM_Base_Start_IT+0x138>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d022      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xd0>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a2b      	ldr	r2, [pc, #172]	; (80044b8 <HAL_TIM_Base_Start_IT+0x13c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d01d      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xd0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a29      	ldr	r2, [pc, #164]	; (80044bc <HAL_TIM_Base_Start_IT+0x140>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d018      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xd0>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a28      	ldr	r2, [pc, #160]	; (80044c0 <HAL_TIM_Base_Start_IT+0x144>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d013      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xd0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a26      	ldr	r2, [pc, #152]	; (80044c4 <HAL_TIM_Base_Start_IT+0x148>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00e      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xd0>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a25      	ldr	r2, [pc, #148]	; (80044c8 <HAL_TIM_Base_Start_IT+0x14c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d009      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xd0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a23      	ldr	r2, [pc, #140]	; (80044cc <HAL_TIM_Base_Start_IT+0x150>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xd0>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a22      	ldr	r2, [pc, #136]	; (80044d0 <HAL_TIM_Base_Start_IT+0x154>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d115      	bne.n	8004478 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	4b20      	ldr	r3, [pc, #128]	; (80044d4 <HAL_TIM_Base_Start_IT+0x158>)
 8004454:	4013      	ands	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b06      	cmp	r3, #6
 800445c:	d015      	beq.n	800448a <HAL_TIM_Base_Start_IT+0x10e>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004464:	d011      	beq.n	800448a <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004476:	e008      	b.n	800448a <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e000      	b.n	800448c <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	50012c00 	.word	0x50012c00
 80044a4:	40000400 	.word	0x40000400
 80044a8:	50000400 	.word	0x50000400
 80044ac:	40000800 	.word	0x40000800
 80044b0:	50000800 	.word	0x50000800
 80044b4:	40000c00 	.word	0x40000c00
 80044b8:	50000c00 	.word	0x50000c00
 80044bc:	40013400 	.word	0x40013400
 80044c0:	50013400 	.word	0x50013400
 80044c4:	40001800 	.word	0x40001800
 80044c8:	50001800 	.word	0x50001800
 80044cc:	40014000 	.word	0x40014000
 80044d0:	50014000 	.word	0x50014000
 80044d4:	00010007 	.word	0x00010007

080044d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d020      	beq.n	800453c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01b      	beq.n	800453c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0202 	mvn.w	r2, #2
 800450c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f92c 	bl	8004780 <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f91e 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f92f 	bl	8004794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d020      	beq.n	8004588 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01b      	beq.n	8004588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0204 	mvn.w	r2, #4
 8004558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2202      	movs	r2, #2
 800455e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f906 	bl	8004780 <HAL_TIM_IC_CaptureCallback>
 8004574:	e005      	b.n	8004582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8f8 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f909 	bl	8004794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d020      	beq.n	80045d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01b      	beq.n	80045d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0208 	mvn.w	r2, #8
 80045a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2204      	movs	r2, #4
 80045aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f8e0 	bl	8004780 <HAL_TIM_IC_CaptureCallback>
 80045c0:	e005      	b.n	80045ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f8d2 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f8e3 	bl	8004794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d020      	beq.n	8004620 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01b      	beq.n	8004620 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0210 	mvn.w	r2, #16
 80045f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2208      	movs	r2, #8
 80045f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f8ba 	bl	8004780 <HAL_TIM_IC_CaptureCallback>
 800460c:	e005      	b.n	800461a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f8ac 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f8bd 	bl	8004794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00c      	beq.n	8004644 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0201 	mvn.w	r2, #1
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fc f922 	bl	8000888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00c      	beq.n	8004668 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f9d2 	bl	8004a0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00c      	beq.n	800468c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f9ca 	bl	8004a20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00c      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f87c 	bl	80047a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00c      	beq.n	80046d4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d007      	beq.n	80046d4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0220 	mvn.w	r2, #32
 80046cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f992 	bl	80049f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00c      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80046f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f99e 	bl	8004a34 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00c      	beq.n	800471c <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f996 	bl	8004a48 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00c      	beq.n	8004740 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f98e 	bl	8004a5c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00c      	beq.n	8004764 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d007      	beq.n	8004764 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800475c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f986 	bl	8004a70 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a74      	ldr	r2, [pc, #464]	; (80049a0 <TIM_Base_SetConfig+0x1e4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d02b      	beq.n	800482c <TIM_Base_SetConfig+0x70>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a73      	ldr	r2, [pc, #460]	; (80049a4 <TIM_Base_SetConfig+0x1e8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d027      	beq.n	800482c <TIM_Base_SetConfig+0x70>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e2:	d023      	beq.n	800482c <TIM_Base_SetConfig+0x70>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047ea:	d01f      	beq.n	800482c <TIM_Base_SetConfig+0x70>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a6e      	ldr	r2, [pc, #440]	; (80049a8 <TIM_Base_SetConfig+0x1ec>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d01b      	beq.n	800482c <TIM_Base_SetConfig+0x70>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a6d      	ldr	r2, [pc, #436]	; (80049ac <TIM_Base_SetConfig+0x1f0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d017      	beq.n	800482c <TIM_Base_SetConfig+0x70>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a6c      	ldr	r2, [pc, #432]	; (80049b0 <TIM_Base_SetConfig+0x1f4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d013      	beq.n	800482c <TIM_Base_SetConfig+0x70>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a6b      	ldr	r2, [pc, #428]	; (80049b4 <TIM_Base_SetConfig+0x1f8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00f      	beq.n	800482c <TIM_Base_SetConfig+0x70>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a6a      	ldr	r2, [pc, #424]	; (80049b8 <TIM_Base_SetConfig+0x1fc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00b      	beq.n	800482c <TIM_Base_SetConfig+0x70>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a69      	ldr	r2, [pc, #420]	; (80049bc <TIM_Base_SetConfig+0x200>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d007      	beq.n	800482c <TIM_Base_SetConfig+0x70>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a68      	ldr	r2, [pc, #416]	; (80049c0 <TIM_Base_SetConfig+0x204>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_Base_SetConfig+0x70>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a67      	ldr	r2, [pc, #412]	; (80049c4 <TIM_Base_SetConfig+0x208>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d108      	bne.n	800483e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a57      	ldr	r2, [pc, #348]	; (80049a0 <TIM_Base_SetConfig+0x1e4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d05b      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a56      	ldr	r2, [pc, #344]	; (80049a4 <TIM_Base_SetConfig+0x1e8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d057      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004854:	d053      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800485c:	d04f      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a51      	ldr	r2, [pc, #324]	; (80049a8 <TIM_Base_SetConfig+0x1ec>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d04b      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a50      	ldr	r2, [pc, #320]	; (80049ac <TIM_Base_SetConfig+0x1f0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d047      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a4f      	ldr	r2, [pc, #316]	; (80049b0 <TIM_Base_SetConfig+0x1f4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d043      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a4e      	ldr	r2, [pc, #312]	; (80049b4 <TIM_Base_SetConfig+0x1f8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d03f      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a4d      	ldr	r2, [pc, #308]	; (80049b8 <TIM_Base_SetConfig+0x1fc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d03b      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a4c      	ldr	r2, [pc, #304]	; (80049bc <TIM_Base_SetConfig+0x200>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d037      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a4b      	ldr	r2, [pc, #300]	; (80049c0 <TIM_Base_SetConfig+0x204>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d033      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a4a      	ldr	r2, [pc, #296]	; (80049c4 <TIM_Base_SetConfig+0x208>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d02f      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a49      	ldr	r2, [pc, #292]	; (80049c8 <TIM_Base_SetConfig+0x20c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d02b      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a48      	ldr	r2, [pc, #288]	; (80049cc <TIM_Base_SetConfig+0x210>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d027      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a47      	ldr	r2, [pc, #284]	; (80049d0 <TIM_Base_SetConfig+0x214>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d023      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a46      	ldr	r2, [pc, #280]	; (80049d4 <TIM_Base_SetConfig+0x218>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01f      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a45      	ldr	r2, [pc, #276]	; (80049d8 <TIM_Base_SetConfig+0x21c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01b      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a44      	ldr	r2, [pc, #272]	; (80049dc <TIM_Base_SetConfig+0x220>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d017      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a43      	ldr	r2, [pc, #268]	; (80049e0 <TIM_Base_SetConfig+0x224>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a42      	ldr	r2, [pc, #264]	; (80049e4 <TIM_Base_SetConfig+0x228>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00f      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a41      	ldr	r2, [pc, #260]	; (80049e8 <TIM_Base_SetConfig+0x22c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00b      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a40      	ldr	r2, [pc, #256]	; (80049ec <TIM_Base_SetConfig+0x230>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d007      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a3f      	ldr	r2, [pc, #252]	; (80049f0 <TIM_Base_SetConfig+0x234>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d003      	beq.n	80048fe <TIM_Base_SetConfig+0x142>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a3e      	ldr	r2, [pc, #248]	; (80049f4 <TIM_Base_SetConfig+0x238>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d108      	bne.n	8004910 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a1a      	ldr	r2, [pc, #104]	; (80049a0 <TIM_Base_SetConfig+0x1e4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d023      	beq.n	8004984 <TIM_Base_SetConfig+0x1c8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a19      	ldr	r2, [pc, #100]	; (80049a4 <TIM_Base_SetConfig+0x1e8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d01f      	beq.n	8004984 <TIM_Base_SetConfig+0x1c8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <TIM_Base_SetConfig+0x204>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d01b      	beq.n	8004984 <TIM_Base_SetConfig+0x1c8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <TIM_Base_SetConfig+0x208>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d017      	beq.n	8004984 <TIM_Base_SetConfig+0x1c8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a22      	ldr	r2, [pc, #136]	; (80049e0 <TIM_Base_SetConfig+0x224>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d013      	beq.n	8004984 <TIM_Base_SetConfig+0x1c8>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a21      	ldr	r2, [pc, #132]	; (80049e4 <TIM_Base_SetConfig+0x228>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00f      	beq.n	8004984 <TIM_Base_SetConfig+0x1c8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a20      	ldr	r2, [pc, #128]	; (80049e8 <TIM_Base_SetConfig+0x22c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00b      	beq.n	8004984 <TIM_Base_SetConfig+0x1c8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <TIM_Base_SetConfig+0x230>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d007      	beq.n	8004984 <TIM_Base_SetConfig+0x1c8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a1e      	ldr	r2, [pc, #120]	; (80049f0 <TIM_Base_SetConfig+0x234>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <TIM_Base_SetConfig+0x1c8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a1d      	ldr	r2, [pc, #116]	; (80049f4 <TIM_Base_SetConfig+0x238>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d103      	bne.n	800498c <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	615a      	str	r2, [r3, #20]
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40012c00 	.word	0x40012c00
 80049a4:	50012c00 	.word	0x50012c00
 80049a8:	40000400 	.word	0x40000400
 80049ac:	50000400 	.word	0x50000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	50000800 	.word	0x50000800
 80049b8:	40000c00 	.word	0x40000c00
 80049bc:	50000c00 	.word	0x50000c00
 80049c0:	40013400 	.word	0x40013400
 80049c4:	50013400 	.word	0x50013400
 80049c8:	40001800 	.word	0x40001800
 80049cc:	50001800 	.word	0x50001800
 80049d0:	40001c00 	.word	0x40001c00
 80049d4:	50001c00 	.word	0x50001c00
 80049d8:	40002000 	.word	0x40002000
 80049dc:	50002000 	.word	0x50002000
 80049e0:	40014000 	.word	0x40014000
 80049e4:	50014000 	.word	0x50014000
 80049e8:	40014400 	.word	0x40014400
 80049ec:	50014400 	.word	0x50014400
 80049f0:	40014800 	.word	0x40014800
 80049f4:	50014800 	.word	0x50014800

080049f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <nx_eth_phy_init>:
  * @param  none
  * @retval ETH_PHY_STATUS_OK on success, ETH_PHY_STATUS_ERROR otherwise
  */

int32_t nx_eth_phy_init(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
    int32_t ret = ETH_PHY_STATUS_ERROR;
 8004a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8e:	607b      	str	r3, [r7, #4]
    /* Set PHY IO functions */

    LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004a90:	4908      	ldr	r1, [pc, #32]	; (8004ab4 <nx_eth_phy_init+0x30>)
 8004a92:	4809      	ldr	r0, [pc, #36]	; (8004ab8 <nx_eth_phy_init+0x34>)
 8004a94:	f7fc fa09 	bl	8000eaa <LAN8742_RegisterBusIO>
    /* Initialize the LAN8742 ETH PHY */

    if (LAN8742_Init(&LAN8742) == LAN8742_STATUS_OK)
 8004a98:	4807      	ldr	r0, [pc, #28]	; (8004ab8 <nx_eth_phy_init+0x34>)
 8004a9a:	f7fc fa38 	bl	8000f0e <LAN8742_Init>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <nx_eth_phy_init+0x24>
    {
        ret = ETH_PHY_STATUS_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	607b      	str	r3, [r7, #4]
    }

    return ret;
 8004aa8:	687b      	ldr	r3, [r7, #4]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	2000000c 	.word	0x2000000c
 8004ab8:	20014770 	.word	0x20014770

08004abc <nx_eth_phy_get_link_state>:
  * @param  none
  * @retval the link status.
  */

int32_t nx_eth_phy_get_link_state(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
    int32_t  linkstate = LAN8742_GetLinkState(&LAN8742);
 8004ac2:	4804      	ldr	r0, [pc, #16]	; (8004ad4 <nx_eth_phy_get_link_state+0x18>)
 8004ac4:	f7fc face 	bl	8001064 <LAN8742_GetLinkState>
 8004ac8:	6078      	str	r0, [r7, #4]

    return linkstate;
 8004aca:	687b      	ldr	r3, [r7, #4]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20014770 	.word	0x20014770

08004ad8 <lan8742_io_init>:
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */

int32_t lan8742_io_init(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&eth_handle);
 8004adc:	4802      	ldr	r0, [pc, #8]	; (8004ae8 <lan8742_io_init+0x10>)
 8004ade:	f7fd fc83 	bl	80023e8 <HAL_ETH_SetMDIOClockRange>

  return ETH_PHY_STATUS_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20007e64 	.word	0x20007e64

08004aec <lan8742_io_deinit>:
  * @brief  De-Initialize the MDIO interface
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t lan8742_io_deinit (void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
    return ETH_PHY_STATUS_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <lan8742_io_read_reg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t lan8742_io_read_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&eth_handle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	68f9      	ldr	r1, [r7, #12]
 8004b0e:	4807      	ldr	r0, [pc, #28]	; (8004b2c <lan8742_io_read_reg+0x30>)
 8004b10:	f7fd f9ba 	bl	8001e88 <HAL_ETH_ReadPHYRegister>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <lan8742_io_read_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8004b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1e:	e000      	b.n	8004b22 <lan8742_io_read_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20007e64 	.word	0x20007e64

08004b30 <lan8742_io_write_reg>:

int32_t lan8742_io_write_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&eth_handle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	68f9      	ldr	r1, [r7, #12]
 8004b42:	4807      	ldr	r0, [pc, #28]	; (8004b60 <lan8742_io_write_reg+0x30>)
 8004b44:	f7fd f9f4 	bl	8001f30 <HAL_ETH_WritePHYRegister>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <lan8742_io_write_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8004b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b52:	e000      	b.n	8004b56 <lan8742_io_write_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20007e64 	.word	0x20007e64

08004b64 <lan8742_io_get_tick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t lan8742_io_get_tick(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004b68:	f7fc fbb6 	bl	80012d8 <HAL_GetTick>
 8004b6c:	4603      	mov	r3, r0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <nx_stm32_eth_driver>:
/*                                                                        */
/**************************************************************************/
/****** DRIVER SPECIFIC ****** Start of part/vendor specific global driver entry function name.  */
VOID  nx_stm32_eth_driver(NX_IP_DRIVER *driver_req_ptr)
/****** DRIVER SPECIFIC ****** End of part/vendor specific global driver entry function name.  */
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	605a      	str	r2, [r3, #4]

  /* Process according to the driver request type in the IP control
  block.  */
  switch (driver_req_ptr -> nx_ip_driver_command)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b16      	cmp	r3, #22
 8004b88:	d85c      	bhi.n	8004c44 <nx_stm32_eth_driver+0xd0>
 8004b8a:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <nx_stm32_eth_driver+0x1c>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004c0d 	.word	0x08004c0d
 8004b94:	08004bf5 	.word	0x08004bf5
 8004b98:	08004bfd 	.word	0x08004bfd
 8004b9c:	08004c05 	.word	0x08004c05
 8004ba0:	08004c0d 	.word	0x08004c0d
 8004ba4:	08004c0d 	.word	0x08004c0d
 8004ba8:	08004c0d 	.word	0x08004c0d
 8004bac:	08004c0d 	.word	0x08004c0d
 8004bb0:	08004c15 	.word	0x08004c15
 8004bb4:	08004c1d 	.word	0x08004c1d
 8004bb8:	08004c25 	.word	0x08004c25
 8004bbc:	08004c45 	.word	0x08004c45
 8004bc0:	08004c45 	.word	0x08004c45
 8004bc4:	08004c45 	.word	0x08004c45
 8004bc8:	08004c45 	.word	0x08004c45
 8004bcc:	08004c45 	.word	0x08004c45
 8004bd0:	08004c45 	.word	0x08004c45
 8004bd4:	08004c45 	.word	0x08004c45
 8004bd8:	08004c2d 	.word	0x08004c2d
 8004bdc:	08004bed 	.word	0x08004bed
 8004be0:	08004c45 	.word	0x08004c45
 8004be4:	08004c35 	.word	0x08004c35
 8004be8:	08004c3d 	.word	0x08004c3d
  {

  case NX_LINK_INTERFACE_ATTACH:

    /* Process link interface attach requests.  */
    _nx_driver_interface_attach(driver_req_ptr);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f835 	bl	8004c5c <_nx_driver_interface_attach>
    break;
 8004bf2:	e02e      	b.n	8004c52 <nx_stm32_eth_driver+0xde>

  case NX_LINK_INITIALIZE:
    {

      /* Process link initialize requests.  */
      _nx_driver_initialize(driver_req_ptr);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f849 	bl	8004c8c <_nx_driver_initialize>
      break;
 8004bfa:	e02a      	b.n	8004c52 <nx_stm32_eth_driver+0xde>

  case NX_LINK_ENABLE:
    {

      /* Process link enable requests.  */
      _nx_driver_enable(driver_req_ptr);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f8b9 	bl	8004d74 <_nx_driver_enable>
      break;
 8004c02:	e026      	b.n	8004c52 <nx_stm32_eth_driver+0xde>

  case NX_LINK_DISABLE:
    {

      /* Process link disable requests.  */
      _nx_driver_disable(driver_req_ptr);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f93d 	bl	8004e84 <_nx_driver_disable>
      break;
 8004c0a:	e022      	b.n	8004c52 <nx_stm32_eth_driver+0xde>
  case NX_LINK_RARP_SEND:
  case NX_LINK_PACKET_SEND:
    {

      /* Process packet send requests.  */
      _nx_driver_packet_send(driver_req_ptr);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f963 	bl	8004ed8 <_nx_driver_packet_send>
      break;
 8004c12:	e01e      	b.n	8004c52 <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_JOIN:
    {

      /* Process multicast join requests.  */
      _nx_driver_multicast_join(driver_req_ptr);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fa21 	bl	800505c <_nx_driver_multicast_join>
      break;
 8004c1a:	e01a      	b.n	8004c52 <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_LEAVE:
    {

      /* Process multicast leave requests.  */
      _nx_driver_multicast_leave(driver_req_ptr);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fa33 	bl	8005088 <_nx_driver_multicast_leave>
      break;
 8004c22:	e016      	b.n	8004c52 <nx_stm32_eth_driver+0xde>

  case NX_LINK_GET_STATUS:
    {

      /* Process get status requests.  */
      _nx_driver_get_status(driver_req_ptr);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fa45 	bl	80050b4 <_nx_driver_get_status>
      break;
 8004c2a:	e012      	b.n	8004c52 <nx_stm32_eth_driver+0xde>
    {

      /* Process driver deferred requests.  */

      /* Process a device driver function on behave of the IP thread. */
      _nx_driver_deferred_processing(driver_req_ptr);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fa7f 	bl	8005130 <_nx_driver_deferred_processing>

      break;
 8004c32:	e00e      	b.n	8004c52 <nx_stm32_eth_driver+0xde>
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  case NX_INTERFACE_CAPABILITY_GET:
    {

      /* Process get capability requests.  */
      _nx_driver_capability_get(driver_req_ptr);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fa53 	bl	80050e0 <_nx_driver_capability_get>
      break;
 8004c3a:	e00a      	b.n	8004c52 <nx_stm32_eth_driver+0xde>

  case NX_INTERFACE_CAPABILITY_SET:
    {

      /* Process set capability requests.  */
      _nx_driver_capability_set(driver_req_ptr);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fa61 	bl	8005104 <_nx_driver_capability_set>
      break;
 8004c42:	e006      	b.n	8004c52 <nx_stm32_eth_driver+0xde>


    /* Invalid driver request.  */

    /* Return the unhandled command status.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_UNHANDLED_COMMAND;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2244      	movs	r2, #68	; 0x44
 8004c48:	605a      	str	r2, [r3, #4]

    /* Default to successful return.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	225a      	movs	r2, #90	; 0x5a
 8004c4e:	605a      	str	r2, [r3, #4]
  }
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop

08004c5c <_nx_driver_interface_attach>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_interface_attach(NX_IP_DRIVER *driver_req_ptr)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]


  /* Setup the driver's interface.  This example is for a simple one-interface
  Ethernet driver. Additional logic is necessary for multiple port devices.  */
  nx_driver_information.nx_driver_information_interface =  driver_req_ptr -> nx_ip_driver_interface;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	4a07      	ldr	r2, [pc, #28]	; (8004c88 <_nx_driver_interface_attach+0x2c>)
 8004c6a:	60d3      	str	r3, [r2, #12]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  driver_req_ptr -> nx_ip_driver_interface -> nx_interface_capability_flag = NX_DRIVER_CAPABILITY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  /* Return successful status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	605a      	str	r2, [r3, #4]
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	20014790 	.word	0x20014790

08004c8c <_nx_driver_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UINT            status;
  CHAR           *payload_address;       /* Address of the first payload*/
  VOID           *rounded_pool_start;    /* Rounded stating address     */

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	61fb      	str	r3, [r7, #28]

  /* Setup interface pointer.  */
  interface_ptr = driver_req_ptr -> nx_ip_driver_interface;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	61bb      	str	r3, [r7, #24]

  /* Initialize the driver's information structure.  */

  /* Default IP pointer to NULL.  */
  nx_driver_information.nx_driver_information_ip_ptr =               NX_NULL;
 8004ca0:	4b31      	ldr	r3, [pc, #196]	; (8004d68 <_nx_driver_initialize+0xdc>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Setup the driver state to not initialized.  */
  nx_driver_information.nx_driver_information_state =                NX_DRIVER_STATE_NOT_INITIALIZED;
 8004ca6:	4b30      	ldr	r3, [pc, #192]	; (8004d68 <_nx_driver_initialize+0xdc>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	605a      	str	r2, [r3, #4]

  /* Setup the default packet pool for the driver's received packets.  */
  nx_driver_information.nx_driver_information_packet_pool_ptr = ip_ptr -> nx_ip_default_packet_pool;
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8004cb2:	4a2d      	ldr	r2, [pc, #180]	; (8004d68 <_nx_driver_initialize+0xdc>)
 8004cb4:	6093      	str	r3, [r2, #8]

  /* Get the rounded start pool start. */
  rounded_pool_start = nx_driver_information.nx_driver_information_packet_pool_ptr->nx_packet_pool_start;
 8004cb6:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <_nx_driver_initialize+0xdc>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Calculate the address of payload. */
  payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	333c      	adds	r3, #60	; 0x3c
 8004cc2:	613b      	str	r3, [r7, #16]

  /* Align the address of payload. */
  payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	3303      	adds	r3, #3
 8004cc8:	f023 0303 	bic.w	r3, r3, #3
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Calculate the header size. */
  header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	4a25      	ldr	r2, [pc, #148]	; (8004d6c <_nx_driver_initialize+0xe0>)
 8004cd6:	6013      	str	r3, [r2, #0]

  /* Clear the deferred events for the driver.  */
  nx_driver_information.nx_driver_information_deferred_events =       0;
 8004cd8:	4b23      	ldr	r3, [pc, #140]	; (8004d68 <_nx_driver_initialize+0xdc>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	611a      	str	r2, [r3, #16]

  /* Call the hardware-specific ethernet controller initialization.  */
  status =  _nx_driver_hardware_initialize(driver_req_ptr);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fabc 	bl	800525c <_nx_driver_hardware_initialize>
 8004ce4:	60f8      	str	r0, [r7, #12]

  /* Determine if the request was successful.  */
  if (status == NX_SUCCESS)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d136      	bne.n	8004d5a <_nx_driver_initialize+0xce>
  {

    /* Successful hardware initialization.  */

    /* Setup driver information to point to IP pointer.  */
    nx_driver_information.nx_driver_information_ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	4a1d      	ldr	r2, [pc, #116]	; (8004d68 <_nx_driver_initialize+0xdc>)
 8004cf2:	6013      	str	r3, [r2, #0]

    /* Setup the link maximum transfer unit. */
    interface_ptr -> nx_interface_ip_mtu_size =  NX_DRIVER_ETHERNET_MTU - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004cfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the physical address of this IP instance.  Increment the
    physical address lsw to simulate multiple nodes hanging on the
    ethernet.  */
    interface_ptr -> nx_interface_physical_address_msw =
      (ULONG)(( eth_handle.Init.MACAddr[0] << 8) | ( eth_handle.Init.MACAddr[1]));
 8004cfc:	4b1c      	ldr	r3, [pc, #112]	; (8004d70 <_nx_driver_initialize+0xe4>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	4a1a      	ldr	r2, [pc, #104]	; (8004d70 <_nx_driver_initialize+0xe4>)
 8004d06:	6852      	ldr	r2, [r2, #4]
 8004d08:	3201      	adds	r2, #1
 8004d0a:	7812      	ldrb	r2, [r2, #0]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_msw =
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	60da      	str	r2, [r3, #12]
    interface_ptr -> nx_interface_physical_address_lsw =
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8004d14:	4b16      	ldr	r3, [pc, #88]	; (8004d70 <_nx_driver_initialize+0xe4>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	3302      	adds	r3, #2
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	061a      	lsls	r2, r3, #24
 8004d1e:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <_nx_driver_initialize+0xe4>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	3303      	adds	r3, #3
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	041b      	lsls	r3, r3, #16
 8004d28:	431a      	orrs	r2, r3
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8004d2a:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <_nx_driver_initialize+0xe4>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	021b      	lsls	r3, r3, #8
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8004d34:	4313      	orrs	r3, r2
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 8004d36:	4a0e      	ldr	r2, [pc, #56]	; (8004d70 <_nx_driver_initialize+0xe4>)
 8004d38:	6852      	ldr	r2, [r2, #4]
 8004d3a:	3205      	adds	r2, #5
 8004d3c:	7812      	ldrb	r2, [r2, #0]
 8004d3e:	4313      	orrs	r3, r2
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 8004d40:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_lsw =
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	611a      	str	r2, [r3, #16]

    /* Indicate to the IP software that IP to physical mapping
    is required.  */
    interface_ptr -> nx_interface_address_mapping_needed =  NX_TRUE;
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	715a      	strb	r2, [r3, #5]

    /* Move the driver's state to initialized.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_INITIALIZED;
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <_nx_driver_initialize+0xdc>)
 8004d4e:	2203      	movs	r2, #3
 8004d50:	605a      	str	r2, [r3, #4]

    /* Indicate successful initialize.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	605a      	str	r2, [r3, #4]
  {

    /* Initialization failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
  }
}
 8004d58:	e002      	b.n	8004d60 <_nx_driver_initialize+0xd4>
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	225a      	movs	r2, #90	; 0x5a
 8004d5e:	605a      	str	r2, [r3, #4]
}
 8004d60:	bf00      	nop
 8004d62:	3720      	adds	r7, #32
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	20014790 	.word	0x20014790
 8004d6c:	200147dc 	.word	0x200147dc
 8004d70:	20007e64 	.word	0x20007e64

08004d74 <_nx_driver_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b0a0      	sub	sp, #128	; 0x80
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]

  NX_IP           *ip_ptr;
  ETH_MACConfigTypeDef MACConf;
  UINT            status, duplex, speed = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	67bb      	str	r3, [r7, #120]	; 0x78
  INT             PHYLinkState;

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	677b      	str	r3, [r7, #116]	; 0x74

  /* See if we can honor the NX_LINK_ENABLE request.  */
  if (nx_driver_information.nx_driver_information_state < NX_DRIVER_STATE_INITIALIZED)
 8004d86:	4b3d      	ldr	r3, [pc, #244]	; (8004e7c <_nx_driver_enable+0x108>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d803      	bhi.n	8004d96 <_nx_driver_enable+0x22>
  {

    /* Mark the request as not successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	225a      	movs	r2, #90	; 0x5a
 8004d92:	605a      	str	r2, [r3, #4]
    return;
 8004d94:	e06e      	b.n	8004e74 <_nx_driver_enable+0x100>
  }

  /* Check if it is enabled by someone already */
  if (nx_driver_information.nx_driver_information_state >=  NX_DRIVER_STATE_LINK_ENABLED)
 8004d96:	4b39      	ldr	r3, [pc, #228]	; (8004e7c <_nx_driver_enable+0x108>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d903      	bls.n	8004da6 <_nx_driver_enable+0x32>
  {

    /* Yes, the request has already been made.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_ALREADY_ENABLED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2215      	movs	r2, #21
 8004da2:	605a      	str	r2, [r3, #4]
    return;
 8004da4:	e066      	b.n	8004e74 <_nx_driver_enable+0x100>
  }

  if (nx_eth_phy_init() != ETH_PHY_STATUS_OK)
 8004da6:	f7ff fe6d 	bl	8004a84 <nx_eth_phy_init>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <_nx_driver_enable+0x44>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	225a      	movs	r2, #90	; 0x5a
 8004db4:	605a      	str	r2, [r3, #4]
    return;
 8004db6:	e05d      	b.n	8004e74 <_nx_driver_enable+0x100>
  }

  PHYLinkState = nx_eth_phy_get_link_state();
 8004db8:	f7ff fe80 	bl	8004abc <nx_eth_phy_get_link_state>
 8004dbc:	6738      	str	r0, [r7, #112]	; 0x70

  /* Get link state */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 8004dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	dc03      	bgt.n	8004dcc <_nx_driver_enable+0x58>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	225a      	movs	r2, #90	; 0x5a
 8004dc8:	605a      	str	r2, [r3, #4]
    return;
 8004dca:	e053      	b.n	8004e74 <_nx_driver_enable+0x100>
  }
  else
  {
    switch (PHYLinkState)
 8004dcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dce:	3b02      	subs	r3, #2
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d823      	bhi.n	8004e1c <_nx_driver_enable+0xa8>
 8004dd4:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <_nx_driver_enable+0x68>)
 8004dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dda:	bf00      	nop
 8004ddc:	08004ded 	.word	0x08004ded
 8004de0:	08004dfb 	.word	0x08004dfb
 8004de4:	08004e07 	.word	0x08004e07
 8004de8:	08004e13 	.word	0x08004e13
      duplex = ETH_HALFDUPLEX_MODE;
      speed = ETH_SPEED_1000M;
      break;
#endif
case ETH_PHY_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004df0:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8004df2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004df6:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004df8:	e017      	b.n	8004e2a <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8004dfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e02:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e04:	e011      	b.n	8004e2a <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e10:	e00b      	b.n	8004e2a <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004e12:	2300      	movs	r3, #0
 8004e14:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_10M;
 8004e16:	2300      	movs	r3, #0
 8004e18:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e1a:	e006      	b.n	8004e2a <_nx_driver_enable+0xb6>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 8004e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e20:	67fb      	str	r3, [r7, #124]	; 0x7c
      speed = ETH_SPEED_100M;
 8004e22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e26:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8004e28:	bf00      	nop
    }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&eth_handle, &MACConf);
 8004e2a:	f107 0308 	add.w	r3, r7, #8
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4813      	ldr	r0, [pc, #76]	; (8004e80 <_nx_driver_enable+0x10c>)
 8004e32:	f7fd f8d1 	bl	8001fd8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004e36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e38:	623b      	str	r3, [r7, #32]
    MACConf.Speed = speed;
 8004e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e3c:	61fb      	str	r3, [r7, #28]
    MACConf.PortSelect = 0;
#else
    MACConf.PortSelect = 1;
#endif
#endif
    HAL_ETH_SetMACConfig(&eth_handle, &MACConf);
 8004e3e:	f107 0308 	add.w	r3, r7, #8
 8004e42:	4619      	mov	r1, r3
 8004e44:	480e      	ldr	r0, [pc, #56]	; (8004e80 <_nx_driver_enable+0x10c>)
 8004e46:	f7fd fa9b 	bl	8002380 <HAL_ETH_SetMACConfig>
  }

  /* Call hardware specific enable.  */
  status =  _nx_driver_hardware_enable(driver_req_ptr);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fa7e 	bl	800534c <_nx_driver_hardware_enable>
 8004e50:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* Was the hardware enable successful?  */
  if (status == NX_SUCCESS)
 8004e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <_nx_driver_enable+0xfa>
  {

    /* Update the driver state to link enabled.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_LINK_ENABLED;
 8004e58:	4b08      	ldr	r3, [pc, #32]	; (8004e7c <_nx_driver_enable+0x108>)
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	605a      	str	r2, [r3, #4]

    /* Mark the IP instance as link up.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_TRUE;
 8004e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
 8004e6c:	e002      	b.n	8004e74 <_nx_driver_enable+0x100>
  }
  else
  {

    /* Enable failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	225a      	movs	r2, #90	; 0x5a
 8004e72:	605a      	str	r2, [r3, #4]
  }
}
 8004e74:	3780      	adds	r7, #128	; 0x80
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20014790 	.word	0x20014790
 8004e80:	20007e64 	.word	0x20007e64

08004e84 <_nx_driver_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Check if the link is enabled.  */
  if (nx_driver_information.nx_driver_information_state !=  NX_DRIVER_STATE_LINK_ENABLED)
 8004e92:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <_nx_driver_disable+0x50>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d003      	beq.n	8004ea2 <_nx_driver_disable+0x1e>
  {

    /* The link is not enabled, so just return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	225a      	movs	r2, #90	; 0x5a
 8004e9e:	605a      	str	r2, [r3, #4]
    return;
 8004ea0:	e014      	b.n	8004ecc <_nx_driver_disable+0x48>
  }

  /* Call hardware specific disable.  */
  status =  _nx_driver_hardware_disable(driver_req_ptr);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fa60 	bl	8005368 <_nx_driver_hardware_disable>
 8004ea8:	60b8      	str	r0, [r7, #8]

  /* Was the hardware disable successful?  */
  if (status == NX_SUCCESS)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10a      	bne.n	8004ec6 <_nx_driver_disable+0x42>
  {

    /* Mark the IP instance as link down.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_FALSE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726

    /* Update the driver state back to initialized.  */
    nx_driver_information.nx_driver_information_state =  NX_DRIVER_STATE_INITIALIZED;
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <_nx_driver_disable+0x50>)
 8004eba:	2203      	movs	r2, #3
 8004ebc:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	605a      	str	r2, [r3, #4]
 8004ec4:	e002      	b.n	8004ecc <_nx_driver_disable+0x48>
  }
  else
  {

    /* Disable failed, return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	225a      	movs	r2, #90	; 0x5a
 8004eca:	605a      	str	r2, [r3, #4]
  }
}
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20014790 	.word	0x20014790

08004ed8 <_nx_driver_packet_send>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_packet_send(NX_IP_DRIVER *driver_req_ptr)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  ULONG           *ethernet_frame_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Check to make sure the link is up.  */
  if (nx_driver_information.nx_driver_information_state != NX_DRIVER_STATE_LINK_ENABLED)
 8004ee6:	4b5c      	ldr	r3, [pc, #368]	; (8005058 <_nx_driver_packet_send+0x180>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d008      	beq.n	8004f00 <_nx_driver_packet_send+0x28>
  {

    /* Inidate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	225a      	movs	r2, #90	; 0x5a
 8004ef2:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(driver_req_ptr -> nx_ip_driver_packet);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3310      	adds	r3, #16
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f005 ffeb 	bl	800aed4 <_nxe_packet_transmit_release>
    return;
 8004efe:	e0a7      	b.n	8005050 <_nx_driver_packet_send+0x178>
  }

  /* Process driver send packet.  */

  /* Place the ethernet frame at the front of the packet.  */
  packet_ptr =  driver_req_ptr -> nx_ip_driver_packet;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	60bb      	str	r3, [r7, #8]

  /* Adjust the prepend pointer.  */
  packet_ptr -> nx_packet_prepend_ptr =
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	689a      	ldr	r2, [r3, #8]
  packet_ptr -> nx_packet_prepend_ptr =
 8004f0a:	68bb      	ldr	r3, [r7, #8]
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004f0c:	3a0e      	subs	r2, #14
  packet_ptr -> nx_packet_prepend_ptr =
 8004f0e:	609a      	str	r2, [r3, #8]

  /* Adjust the packet length.  */
  packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + NX_DRIVER_ETHERNET_FRAME_SIZE;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	320e      	adds	r2, #14
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Setup the ethernet frame pointer to build the ethernet frame.  Backup another 2
  * bytes to get 32-bit word alignment.  */
  ethernet_frame_ptr =  (ULONG *) (packet_ptr -> nx_packet_prepend_ptr - 2);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	3b02      	subs	r3, #2
 8004f20:	613b      	str	r3, [r7, #16]

  /* Set up the hardware addresses in the Ethernet header. */
  *ethernet_frame_ptr       =  driver_req_ptr -> nx_ip_driver_physical_address_msw;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 1) =  driver_req_ptr -> nx_ip_driver_physical_address_lsw;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	68d2      	ldr	r2, [r2, #12]
 8004f32:	601a      	str	r2, [r3, #0]

  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f8d3 372c 	ldr.w	r3, [r3, #1836]	; 0x72c
 8004f3a:	0419      	lsls	r1, r3, #16
    (ip_ptr -> nx_ip_arp_physical_address_lsw >> 16);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f8d3 3730 	ldr.w	r3, [r3, #1840]	; 0x730
 8004f42:	0c1a      	lsrs	r2, r3, #16
  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	3308      	adds	r3, #8
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 3) =  (ip_ptr -> nx_ip_arp_physical_address_lsw << 16);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f8d3 2730 	ldr.w	r2, [r3, #1840]	; 0x730
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	330c      	adds	r3, #12
 8004f56:	0412      	lsls	r2, r2, #16
 8004f58:	601a      	str	r2, [r3, #0]

  /* Set up the frame type field in the Ethernet harder. */
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b05      	cmp	r3, #5
 8004f60:	d003      	beq.n	8004f6a <_nx_driver_packet_send+0x92>
      (driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 8004f66:	2b06      	cmp	r3, #6
 8004f68:	d10a      	bne.n	8004f80 <_nx_driver_packet_send+0xa8>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_ARP;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	320c      	adds	r2, #12
 8004f74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f78:	f043 0306 	orr.w	r3, r3, #6
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	e016      	b.n	8004fae <_nx_driver_packet_send+0xd6>
  }
  else if(driver_req_ptr -> nx_ip_driver_command == NX_LINK_RARP_SEND)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b07      	cmp	r3, #7
 8004f86:	d10a      	bne.n	8004f9e <_nx_driver_packet_send+0xc6>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_RARP;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	320c      	adds	r2, #12
 8004f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f96:	f043 0335 	orr.w	r3, r3, #53	; 0x35
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	e007      	b.n	8004fae <_nx_driver_packet_send+0xd6>
#endif /* FEATURE_NX_IPV6 */

  else
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IP;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	330c      	adds	r3, #12
 8004fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fac:	601a      	str	r2, [r3, #0]
  }

  /* Endian swapping if NX_LITTLE_ENDIAN is defined.  */
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr));
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	ba1a      	rev	r2, r3
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 1));
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	ba12      	rev	r2, r2
 8004fc4:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	3308      	adds	r3, #8
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	3308      	adds	r3, #8
 8004fd0:	ba12      	rev	r2, r2
 8004fd2:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 3));
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	330c      	adds	r3, #12
 8004fde:	ba12      	rev	r2, r2
 8004fe0:	601a      	str	r2, [r3, #0]

  /* Determine if the packet exceeds the driver's MTU.  */
  if (packet_ptr -> nx_packet_length > NX_DRIVER_ETHERNET_MTU)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d912      	bls.n	8005014 <_nx_driver_packet_send+0x13c>
  {

    /* This packet exceeds the size of the driver's MTU. Simply throw it away! */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	320e      	adds	r2, #14
 8004ff6:	609a      	str	r2, [r3, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	3a0e      	subs	r2, #14
 8005000:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	225a      	movs	r2, #90	; 0x5a
 8005006:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 8005008:	f107 0308 	add.w	r3, r7, #8
 800500c:	4618      	mov	r0, r3
 800500e:	f005 ff61 	bl	800aed4 <_nxe_packet_transmit_release>
    return;
 8005012:	e01d      	b.n	8005050 <_nx_driver_packet_send+0x178>
  }

  /* Transmit the packet through the Ethernet controller low level access routine. */
  status = _nx_driver_hardware_packet_send(packet_ptr);
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	4618      	mov	r0, r3
 8005018:	f000 f9b4 	bl	8005384 <_nx_driver_hardware_packet_send>
 800501c:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d012      	beq.n	800504a <_nx_driver_packet_send+0x172>
  {

    /* Driver's hardware send packet routine failed to send the packet.  */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	320e      	adds	r2, #14
 800502c:	609a      	str	r2, [r3, #8]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	3a0e      	subs	r2, #14
 8005036:	625a      	str	r2, [r3, #36]	; 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	225a      	movs	r2, #90	; 0x5a
 800503c:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 800503e:	f107 0308 	add.w	r3, r7, #8
 8005042:	4618      	mov	r0, r3
 8005044:	f005 ff46 	bl	800aed4 <_nxe_packet_transmit_release>
 8005048:	e002      	b.n	8005050 <_nx_driver_packet_send+0x178>
  }
  else
  {

    /* Set the status of the request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	605a      	str	r2, [r3, #4]
  }
}
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20014790 	.word	0x20014790

0800505c <_nx_driver_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast join function. */
  status =  _nx_driver_hardware_multicast_join(driver_req_ptr);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fa25 	bl	80054b4 <_nx_driver_hardware_multicast_join>
 800506a:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <_nx_driver_multicast_join+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	225a      	movs	r2, #90	; 0x5a
 8005076:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8005078:	e002      	b.n	8005080 <_nx_driver_multicast_join+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	605a      	str	r2, [r3, #4]
}
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <_nx_driver_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast leave function. */
  status =  _nx_driver_hardware_multicast_leave(driver_req_ptr);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fa2b 	bl	80054ec <_nx_driver_hardware_multicast_leave>
 8005096:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <_nx_driver_multicast_leave+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	225a      	movs	r2, #90	; 0x5a
 80050a2:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80050a4:	e002      	b.n	80050ac <_nx_driver_multicast_leave+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	605a      	str	r2, [r3, #4]
}
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <_nx_driver_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_get_status(driver_req_ptr);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fa35 	bl	800552c <_nx_driver_hardware_get_status>
 80050c2:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <_nx_driver_get_status+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	225a      	movs	r2, #90	; 0x5a
 80050ce:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80050d0:	e002      	b.n	80050d8 <_nx_driver_get_status+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	605a      	str	r2, [r3, #4]
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <_nx_driver_capability_get>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_get(NX_IP_DRIVER *driver_req_ptr)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

  /* Return the capability of the Ethernet controller.  */
  *(driver_req_ptr -> nx_ip_driver_return_ptr) = NX_DRIVER_CAPABILITY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80050f0:	601a      	str	r2, [r3, #0]

  /* Return the success status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	605a      	str	r2, [r3, #4]
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <_nx_driver_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_capability_set(driver_req_ptr);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fab3 	bl	8005678 <_nx_driver_hardware_capability_set>
 8005112:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <_nx_driver_capability_set+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	225a      	movs	r2, #90	; 0x5a
 800511e:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8005120:	e002      	b.n	8005128 <_nx_driver_capability_set+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	605a      	str	r2, [r3, #4]
}
 8005128:	bf00      	nop
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <_nx_driver_deferred_processing>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_deferred_processing(NX_IP_DRIVER *driver_req_ptr)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005138:	f3ef 8310 	mrs	r3, PRIMASK
 800513c:	613b      	str	r3, [r7, #16]
#endif
    return(posture);
 800513e:	693b      	ldr	r3, [r7, #16]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8005140:	60fb      	str	r3, [r7, #12]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8005142:	b672      	cpsid	i
#endif
    return(int_posture);
 8005144:	68fb      	ldr	r3, [r7, #12]

    ULONG       deferred_events;


  /* Disable interrupts.  */
  TX_DISABLE
 8005146:	61fb      	str	r3, [r7, #28]

    /* Pickup deferred events.  */
    deferred_events =  nx_driver_information.nx_driver_information_deferred_events;
 8005148:	4b10      	ldr	r3, [pc, #64]	; (800518c <_nx_driver_deferred_processing+0x5c>)
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	61bb      	str	r3, [r7, #24]
  nx_driver_information.nx_driver_information_deferred_events =  0;
 800514e:	4b0f      	ldr	r3, [pc, #60]	; (800518c <_nx_driver_deferred_processing+0x5c>)
 8005150:	2200      	movs	r2, #0
 8005152:	611a      	str	r2, [r3, #16]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f383 8810 	msr	PRIMASK, r3
}
 800515e:	bf00      	nop

  /* Restore interrupts.  */
  TX_RESTORE
    /* Check for a transmit complete event.  */
    if(deferred_events & NX_DRIVER_DEFERRED_PACKET_TRANSMITTED)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	f003 0304 	and.w	r3, r3, #4
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <_nx_driver_deferred_processing+0x40>
    {

      /* Process transmitted packet(s).  */
      HAL_ETH_ReleaseTxPacket(&eth_handle);
 800516a:	4809      	ldr	r0, [pc, #36]	; (8005190 <_nx_driver_deferred_processing+0x60>)
 800516c:	f7fc fcf9 	bl	8001b62 <HAL_ETH_ReleaseTxPacket>
    }
  /* Check for received packet.  */
  if(deferred_events & NX_DRIVER_DEFERRED_PACKET_RECEIVED)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <_nx_driver_deferred_processing+0x4e>
  {

    /* Process received packet(s).  */
    _nx_driver_hardware_packet_received();
 800517a:	f000 fa09 	bl	8005590 <_nx_driver_hardware_packet_received>
  }

  /* Mark request as successful.  */
  driver_req_ptr->nx_ip_driver_status =  NX_SUCCESS;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	605a      	str	r2, [r3, #4]
}
 8005184:	bf00      	nop
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20014790 	.word	0x20014790
 8005190:	20007e64 	.word	0x20007e64

08005194 <_nx_driver_transfer_to_netx>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID _nx_driver_transfer_to_netx(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]

  USHORT    packet_type;


  /* Set the interface for the incoming packet.  */
  packet_ptr -> nx_packet_ip_interface = nx_driver_information.nx_driver_information_interface;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	4a2d      	ldr	r2, [pc, #180]	; (8005258 <_nx_driver_transfer_to_netx+0xc4>)
 80051a2:	68d2      	ldr	r2, [r2, #12]
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Pickup the packet header to determine where the packet needs to be
  sent.  */
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	330c      	adds	r3, #12
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	b29a      	uxth	r2, r3
    ((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+13)));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	330d      	adds	r3, #13
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 80051be:	4313      	orrs	r3, r2
 80051c0:	81fb      	strh	r3, [r7, #14]

  /* Route the incoming packet according to its ethernet type.  */
  if (packet_type == NX_DRIVER_ETHERNET_IP || packet_type == NX_DRIVER_ETHERNET_IPV6)
 80051c2:	89fb      	ldrh	r3, [r7, #14]
 80051c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c8:	d004      	beq.n	80051d4 <_nx_driver_transfer_to_netx+0x40>
 80051ca:	89fb      	ldrh	r3, [r7, #14]
 80051cc:	f248 62dd 	movw	r2, #34525	; 0x86dd
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d10f      	bne.n	80051f4 <_nx_driver_transfer_to_netx+0x60>
    cases, the actual packet length after the Ethernet header should
    be derived from the length in the IP header (lower 16 bits of
    the first 32-bit word).  */

    /* Clean off the Ethernet header.  */
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	320e      	adds	r2, #14
 80051dc:	609a      	str	r2, [r3, #8]

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	3a0e      	subs	r2, #14
 80051e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Route to the ip receive function.  */
    _nx_ip_packet_deferred_receive(ip_ptr, packet_ptr);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f002 fe57 	bl	8007ea0 <_nx_ip_packet_deferred_receive>
  else
  {
    /* Invalid ethernet header... release the packet.  */
    nx_packet_release(packet_ptr);
  }
}
 80051f2:	e02d      	b.n	8005250 <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_ARP)
 80051f4:	89fb      	ldrh	r3, [r7, #14]
 80051f6:	f640 0206 	movw	r2, #2054	; 0x806
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d10f      	bne.n	800521e <_nx_driver_transfer_to_netx+0x8a>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	320e      	adds	r2, #14
 8005206:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	3a0e      	subs	r2, #14
 8005210:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_arp_packet_deferred_receive(ip_ptr, packet_ptr);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	4619      	mov	r1, r3
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fc0d 	bl	8005a36 <_nx_arp_packet_deferred_receive>
}
 800521c:	e018      	b.n	8005250 <_nx_driver_transfer_to_netx+0xbc>
  else if (packet_type == NX_DRIVER_ETHERNET_RARP)
 800521e:	89fb      	ldrh	r3, [r7, #14]
 8005220:	f248 0235 	movw	r2, #32821	; 0x8035
 8005224:	4293      	cmp	r3, r2
 8005226:	d10f      	bne.n	8005248 <_nx_driver_transfer_to_netx+0xb4>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	320e      	adds	r2, #14
 8005230:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	3a0e      	subs	r2, #14
 800523a:	625a      	str	r2, [r3, #36]	; 0x24
    _nx_rarp_packet_deferred_receive(ip_ptr, packet_ptr);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f004 fa47 	bl	80096d4 <_nx_rarp_packet_deferred_receive>
}
 8005246:	e003      	b.n	8005250 <_nx_driver_transfer_to_netx+0xbc>
    nx_packet_release(packet_ptr);
 8005248:	463b      	mov	r3, r7
 800524a:	4618      	mov	r0, r3
 800524c:	f005 fe0a 	bl	800ae64 <_nxe_packet_release>
}
 8005250:	bf00      	nop
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20014790 	.word	0x20014790

0800525c <_nx_driver_hardware_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08c      	sub	sp, #48	; 0x30
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	605a      	str	r2, [r3, #4]

  /* Setup indices.  */
  nx_driver_information.nx_driver_information_receive_current_index = 0;
 800526a:	4b34      	ldr	r3, [pc, #208]	; (800533c <_nx_driver_hardware_initialize+0xe0>)
 800526c:	2200      	movs	r2, #0
 800526e:	615a      	str	r2, [r3, #20]
  nx_driver_information.nx_driver_information_transmit_current_index = 0;
 8005270:	4b32      	ldr	r3, [pc, #200]	; (800533c <_nx_driver_hardware_initialize+0xe0>)
 8005272:	2200      	movs	r2, #0
 8005274:	619a      	str	r2, [r3, #24]
  nx_driver_information.nx_driver_information_transmit_release_index = 0;
 8005276:	4b31      	ldr	r3, [pc, #196]	; (800533c <_nx_driver_hardware_initialize+0xe0>)
 8005278:	2200      	movs	r2, #0
 800527a:	61da      	str	r2, [r3, #28]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = 0;
 800527c:	4b2f      	ldr	r3, [pc, #188]	; (800533c <_nx_driver_hardware_initialize+0xe0>)
 800527e:	2200      	movs	r2, #0
 8005280:	621a      	str	r2, [r3, #32]

  /* Make sure there are receive packets... otherwise, return an error.  */
  if (nx_driver_information.nx_driver_information_packet_pool_ptr == NULL)
 8005282:	4b2e      	ldr	r3, [pc, #184]	; (800533c <_nx_driver_hardware_initialize+0xe0>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <_nx_driver_hardware_initialize+0x32>
  {

    /* There must be receive packets. If not, return an error!  */
    return(NX_DRIVER_ERROR);
 800528a:	235a      	movs	r3, #90	; 0x5a
 800528c:	e052      	b.n	8005334 <_nx_driver_hardware_initialize+0xd8>
#ifdef NX_DRIVER_ETH_HW_IP_INIT
  nx_eth_init();
#endif /* NX_DRIVER_ETH_HW_IP_INIT */

  ETH_DMAConfigTypeDef dmaDefaultConf;
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005292:	2301      	movs	r3, #1
 8005294:	743b      	strb	r3, [r7, #16]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005296:	2301      	movs	r3, #1
 8005298:	617b      	str	r3, [r7, #20]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800529a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800529e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80052a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052a4:	627b      	str	r3, [r7, #36]	; 0x24
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
#ifndef STM32_ETH_HAL_LEGACY
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80052ac:	2300      	movs	r3, #0
 80052ae:	767b      	strb	r3, [r7, #25]
#if defined(ETH_DMASBMR_BLEN4) /* ETH AXI support*/
  dmaDefaultConf.RxOSRLimit = ETH_RX_OSR_LIMIT_3;
  dmaDefaultConf.TxOSRLimit = ETH_TX_OSR_LIMIT_3;
  dmaDefaultConf.AXIBLENMaxSize = ETH_BLEN_MAX_SIZE_16;
#else
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	763b      	strb	r3, [r7, #24]
#endif
  dmaDefaultConf.SecondPacketOperate = ENABLE;
 80052b4:	2301      	movs	r3, #1
 80052b6:	f887 3020 	strb.w	r3, [r7, #32]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  dmaDefaultConf.MaximumSegmentSize = 536;
 80052c0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.SecondFrameOperate =  DISABLE;
  dmaDefaultConf.EnhancedDescriptorFormat =  DISABLE;
  dmaDefaultConf.DescriptorSkipLength =  DISABLE;
#endif
  /* enable OSF bit to enhance throughput */
  HAL_ETH_SetDMAConfig(&eth_handle, &dmaDefaultConf);
 80052c6:	f107 030c 	add.w	r3, r7, #12
 80052ca:	4619      	mov	r1, r3
 80052cc:	481c      	ldr	r0, [pc, #112]	; (8005340 <_nx_driver_hardware_initialize+0xe4>)
 80052ce:	f7fd f871 	bl	80023b4 <HAL_ETH_SetDMAConfig>
#ifdef STM32_ETH_PROMISCUOUS_ENABLE
  FilterConfig.PromiscuousMode = ENABLE;
#else
  FilterConfig.PromiscuousMode = DISABLE;
 80052d2:	4b1c      	ldr	r3, [pc, #112]	; (8005344 <_nx_driver_hardware_initialize+0xe8>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
#endif
  FilterConfig.HashUnicast = DISABLE;
 80052d8:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <_nx_driver_hardware_initialize+0xe8>)
 80052da:	2200      	movs	r2, #0
 80052dc:	70da      	strb	r2, [r3, #3]
  FilterConfig.HashMulticast = DISABLE;
 80052de:	4b19      	ldr	r3, [pc, #100]	; (8005344 <_nx_driver_hardware_initialize+0xe8>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	711a      	strb	r2, [r3, #4]
  FilterConfig.DestAddrInverseFiltering = DISABLE;
 80052e4:	4b17      	ldr	r3, [pc, #92]	; (8005344 <_nx_driver_hardware_initialize+0xe8>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	721a      	strb	r2, [r3, #8]
  FilterConfig.PassAllMulticast = DISABLE;
 80052ea:	4b16      	ldr	r3, [pc, #88]	; (8005344 <_nx_driver_hardware_initialize+0xe8>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	715a      	strb	r2, [r3, #5]
  FilterConfig.BroadcastFilter = ENABLE;
 80052f0:	4b14      	ldr	r3, [pc, #80]	; (8005344 <_nx_driver_hardware_initialize+0xe8>)
 80052f2:	2201      	movs	r2, #1
 80052f4:	725a      	strb	r2, [r3, #9]
  FilterConfig.SrcAddrInverseFiltering = DISABLE;
 80052f6:	4b13      	ldr	r3, [pc, #76]	; (8005344 <_nx_driver_hardware_initialize+0xe8>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	71da      	strb	r2, [r3, #7]
  FilterConfig.SrcAddrFiltering = DISABLE;
 80052fc:	4b11      	ldr	r3, [pc, #68]	; (8005344 <_nx_driver_hardware_initialize+0xe8>)
 80052fe:	2200      	movs	r2, #0
 8005300:	719a      	strb	r2, [r3, #6]
  FilterConfig.HachOrPerfectFilter = DISABLE;
 8005302:	4b10      	ldr	r3, [pc, #64]	; (8005344 <_nx_driver_hardware_initialize+0xe8>)
 8005304:	2200      	movs	r2, #0
 8005306:	709a      	strb	r2, [r3, #2]
  FilterConfig.ReceiveAllMode = DISABLE;
 8005308:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <_nx_driver_hardware_initialize+0xe8>)
 800530a:	2200      	movs	r2, #0
 800530c:	705a      	strb	r2, [r3, #1]
  FilterConfig.ControlPacketsFilter = 0x00;
 800530e:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <_nx_driver_hardware_initialize+0xe8>)
 8005310:	2200      	movs	r2, #0
 8005312:	60da      	str	r2, [r3, #12]

  /* Set Tx packet config common parameters */
  memset(&TxPacketCfg, 0, sizeof(ETH_TxPacketConfig));
 8005314:	2238      	movs	r2, #56	; 0x38
 8005316:	2100      	movs	r1, #0
 8005318:	480b      	ldr	r0, [pc, #44]	; (8005348 <_nx_driver_hardware_initialize+0xec>)
 800531a:	f009 fccf 	bl	800ecbc <memset>
  TxPacketCfg.Attributes = ETH_TX_PACKETS_FEATURES_CSUM ;
 800531e:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <_nx_driver_hardware_initialize+0xec>)
 8005320:	2201      	movs	r2, #1
 8005322:	601a      	str	r2, [r3, #0]
  TxPacketCfg.CRCPadCtrl = ETH_CRC_PAD_DISABLE;
 8005324:	4b08      	ldr	r3, [pc, #32]	; (8005348 <_nx_driver_hardware_initialize+0xec>)
 8005326:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800532a:	611a      	str	r2, [r3, #16]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_multicast_count = 0;
 800532c:	4b03      	ldr	r3, [pc, #12]	; (800533c <_nx_driver_hardware_initialize+0xe0>)
 800532e:	2200      	movs	r2, #0
 8005330:	649a      	str	r2, [r3, #72]	; 0x48

  /* Return success!  */
  return(NX_SUCCESS);
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3730      	adds	r7, #48	; 0x30
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	20014790 	.word	0x20014790
 8005340:	20007e64 	.word	0x20007e64
 8005344:	20014818 	.word	0x20014818
 8005348:	200147e0 	.word	0x200147e0

0800534c <_nx_driver_hardware_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_enable(NX_IP_DRIVER *driver_req_ptr)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]

  /* Call STM32 library to start Ethernet operation.  */
  HAL_ETH_Start_IT(&eth_handle);
 8005354:	4803      	ldr	r0, [pc, #12]	; (8005364 <_nx_driver_hardware_enable+0x18>)
 8005356:	f7fc f9a7 	bl	80016a8 <HAL_ETH_Start_IT>

  /* Return success!  */
  return(NX_SUCCESS);
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	20007e64 	.word	0x20007e64

08005368 <_nx_driver_hardware_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

  HAL_ETH_Stop(&eth_handle);
 8005370:	4803      	ldr	r0, [pc, #12]	; (8005380 <_nx_driver_hardware_disable+0x18>)
 8005372:	f7fc fa27 	bl	80017c4 <HAL_ETH_Stop>

  /* Return success!  */
  return(NX_SUCCESS);
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	20007e64 	.word	0x20007e64

08005384 <_nx_driver_hardware_packet_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/

static UINT  _nx_driver_hardware_packet_send(NX_PACKET *packet_ptr)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b092      	sub	sp, #72	; 0x48
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]

  NX_PACKET       *pktIdx;
  UINT            buffLen = 0;
 800538c:	2300      	movs	r3, #0
 800538e:	643b      	str	r3, [r7, #64]	; 0x40

  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005390:	f107 030c 	add.w	r3, r7, #12
 8005394:	2230      	movs	r2, #48	; 0x30
 8005396:	2100      	movs	r1, #0
 8005398:	4618      	mov	r0, r3
 800539a:	f009 fc8f 	bl	800ecbc <memset>


  int i = 0;
 800539e:	2300      	movs	r3, #0
 80053a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	647b      	str	r3, [r7, #68]	; 0x44
 80053a6:	e050      	b.n	800544a <_nx_driver_hardware_packet_send+0xc6>
  {
    if (i >= ETH_TX_DESC_CNT)
 80053a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d901      	bls.n	80053b2 <_nx_driver_hardware_packet_send+0x2e>
    {
      return NX_DRIVER_ERROR;
 80053ae:	235a      	movs	r3, #90	; 0x5a
 80053b0:	e077      	b.n	80054a2 <_nx_driver_hardware_packet_send+0x11e>
    }

    Txbuffer[i].buffer = pktIdx->nx_packet_prepend_ptr;
 80053b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b4:	6899      	ldr	r1, [r3, #8]
 80053b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053b8:	4613      	mov	r3, r2
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	4413      	add	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	3348      	adds	r3, #72	; 0x48
 80053c2:	443b      	add	r3, r7
 80053c4:	3b3c      	subs	r3, #60	; 0x3c
 80053c6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 80053c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	4619      	mov	r1, r3
 80053d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053d6:	4613      	mov	r3, r2
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	3348      	adds	r3, #72	; 0x48
 80053e0:	443b      	add	r3, r7
 80053e2:	3b38      	subs	r3, #56	; 0x38
 80053e4:	6019      	str	r1, [r3, #0]
    buffLen += (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 80053e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f4:	4413      	add	r3, r2
 80053f6:	643b      	str	r3, [r7, #64]	; 0x40

    if(i>0)
 80053f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	dd11      	ble.n	8005422 <_nx_driver_hardware_packet_send+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80053fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005400:	1e5a      	subs	r2, r3, #1
 8005402:	f107 000c 	add.w	r0, r7, #12
 8005406:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005408:	460b      	mov	r3, r1
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	440b      	add	r3, r1
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	18c1      	adds	r1, r0, r3
 8005412:	4613      	mov	r3, r2
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	3348      	adds	r3, #72	; 0x48
 800541c:	443b      	add	r3, r7
 800541e:	3b34      	subs	r3, #52	; 0x34
 8005420:	6019      	str	r1, [r3, #0]
    }

    if (pktIdx-> nx_packet_next ==NULL)
 8005422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <_nx_driver_hardware_packet_send+0xba>
    {
      Txbuffer[i].next = NULL;
 800542a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800542c:	4613      	mov	r3, r2
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	3348      	adds	r3, #72	; 0x48
 8005436:	443b      	add	r3, r7
 8005438:	3b34      	subs	r3, #52	; 0x34
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005440:	3301      	adds	r3, #1
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 8005444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	647b      	str	r3, [r7, #68]	; 0x44
 800544a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1ab      	bne.n	80053a8 <_nx_driver_hardware_packet_send+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)(pktIdx -> nx_packet_data_start), pktIdx -> nx_packet_data_end - pktIdx -> nx_packet_data_start);
#endif
  }

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  if (packet_ptr -> nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	f403 7315 	and.w	r3, r3, #596	; 0x254
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <_nx_driver_hardware_packet_send+0xe2>
                                                           NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM |
                                                             NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM |
                                                               NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM))
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800545c:	4b13      	ldr	r3, [pc, #76]	; (80054ac <_nx_driver_hardware_packet_send+0x128>)
 800545e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005462:	615a      	str	r2, [r3, #20]
 8005464:	e009      	b.n	800547a <_nx_driver_hardware_packet_send+0xf6>
  }
  else if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <_nx_driver_hardware_packet_send+0xf6>
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_INSERT;
 8005472:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <_nx_driver_hardware_packet_send+0x128>)
 8005474:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005478:	615a      	str	r2, [r3, #20]
  }
#else
  TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  TxPacketCfg.Length = buffLen;
 800547a:	4a0c      	ldr	r2, [pc, #48]	; (80054ac <_nx_driver_hardware_packet_send+0x128>)
 800547c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800547e:	6053      	str	r3, [r2, #4]
  TxPacketCfg.TxBuffer = Txbuffer;
 8005480:	4a0a      	ldr	r2, [pc, #40]	; (80054ac <_nx_driver_hardware_packet_send+0x128>)
 8005482:	f107 030c 	add.w	r3, r7, #12
 8005486:	6093      	str	r3, [r2, #8]
  TxPacketCfg.pData = (uint32_t *)packet_ptr;
 8005488:	4a08      	ldr	r2, [pc, #32]	; (80054ac <_nx_driver_hardware_packet_send+0x128>)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6353      	str	r3, [r2, #52]	; 0x34

  if(HAL_ETH_Transmit_IT(&eth_handle, &TxPacketCfg))
 800548e:	4907      	ldr	r1, [pc, #28]	; (80054ac <_nx_driver_hardware_packet_send+0x128>)
 8005490:	4807      	ldr	r0, [pc, #28]	; (80054b0 <_nx_driver_hardware_packet_send+0x12c>)
 8005492:	f7fc f9e7 	bl	8001864 <HAL_ETH_Transmit_IT>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <_nx_driver_hardware_packet_send+0x11c>
  {
    return(NX_DRIVER_ERROR);
 800549c:	235a      	movs	r3, #90	; 0x5a
 800549e:	e000      	b.n	80054a2 <_nx_driver_hardware_packet_send+0x11e>
  }

  return(NX_SUCCESS);
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3748      	adds	r7, #72	; 0x48
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	200147e0 	.word	0x200147e0
 80054b0:	20007e64 	.word	0x20007e64

080054b4 <_nx_driver_hardware_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]


  /* Increase the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count++;
 80054bc:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <_nx_driver_hardware_multicast_join+0x2c>)
 80054be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c0:	3301      	adds	r3, #1
 80054c2:	4a07      	ldr	r2, [pc, #28]	; (80054e0 <_nx_driver_hardware_multicast_join+0x2c>)
 80054c4:	6493      	str	r3, [r2, #72]	; 0x48

  /* Enable multicast frame reception.  */
  FilterConfig.PassAllMulticast = ENABLE;
 80054c6:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <_nx_driver_hardware_multicast_join+0x30>)
 80054c8:	2201      	movs	r2, #1
 80054ca:	715a      	strb	r2, [r3, #5]
  HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 80054cc:	4905      	ldr	r1, [pc, #20]	; (80054e4 <_nx_driver_hardware_multicast_join+0x30>)
 80054ce:	4806      	ldr	r0, [pc, #24]	; (80054e8 <_nx_driver_hardware_multicast_join+0x34>)
 80054d0:	f7fc fff2 	bl	80024b8 <HAL_ETH_SetMACFilterConfig>

  /* Return success.  */
  return(NX_SUCCESS);
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20014790 	.word	0x20014790
 80054e4:	20014818 	.word	0x20014818
 80054e8:	20007e64 	.word	0x20007e64

080054ec <_nx_driver_hardware_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]

  /* Decrease the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count--;
 80054f4:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <_nx_driver_hardware_multicast_leave+0x34>)
 80054f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f8:	3b01      	subs	r3, #1
 80054fa:	4a09      	ldr	r2, [pc, #36]	; (8005520 <_nx_driver_hardware_multicast_leave+0x34>)
 80054fc:	6493      	str	r3, [r2, #72]	; 0x48

  /* If multicast count reaches zero, disable multicast frame reception.  */
  if (nx_driver_information.nx_driver_information_multicast_count == 0)
 80054fe:	4b08      	ldr	r3, [pc, #32]	; (8005520 <_nx_driver_hardware_multicast_leave+0x34>)
 8005500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <_nx_driver_hardware_multicast_leave+0x28>
  {

    /* Disable multicast frame reception.  */
    FilterConfig.PassAllMulticast = DISABLE;
 8005506:	4b07      	ldr	r3, [pc, #28]	; (8005524 <_nx_driver_hardware_multicast_leave+0x38>)
 8005508:	2200      	movs	r2, #0
 800550a:	715a      	strb	r2, [r3, #5]
    HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 800550c:	4905      	ldr	r1, [pc, #20]	; (8005524 <_nx_driver_hardware_multicast_leave+0x38>)
 800550e:	4806      	ldr	r0, [pc, #24]	; (8005528 <_nx_driver_hardware_multicast_leave+0x3c>)
 8005510:	f7fc ffd2 	bl	80024b8 <HAL_ETH_SetMACFilterConfig>
  }

  /* Return success.  */
  return(NX_SUCCESS);
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20014790 	.word	0x20014790
 8005524:	20014818 	.word	0x20014818
 8005528:	20007e64 	.word	0x20007e64

0800552c <_nx_driver_hardware_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  INT PHYLinkState;

  /* Get link status. */
  PHYLinkState = nx_eth_phy_get_link_state();
 8005534:	f7ff fac2 	bl	8004abc <nx_eth_phy_get_link_state>
 8005538:	60f8      	str	r0, [r7, #12]

  /* Check link status. */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b01      	cmp	r3, #1
 800553e:	dc04      	bgt.n	800554a <_nx_driver_hardware_get_status+0x1e>
  {
    /* Update Link status if physical link is down. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_FALSE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	e003      	b.n	8005552 <_nx_driver_hardware_get_status+0x26>
  }
  else
  {
    /* Update Link status if physical link is up. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_TRUE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	2201      	movs	r2, #1
 8005550:	601a      	str	r2, [r3, #0]
  }

  /* Return success. */
  return NX_SUCCESS;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  NX_PACKET * release_packet = (NX_PACKET *) buff;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Remove the Ethernet header and release the packet.  */
  NX_DRIVER_ETHERNET_HEADER_REMOVE(release_packet);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	320e      	adds	r2, #14
 8005570:	609a      	str	r2, [r3, #8]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3a0e      	subs	r2, #14
 800557a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Release the packet.  */
  nx_packet_transmit_release(release_packet);
 800557c:	f107 030c 	add.w	r3, r7, #12
 8005580:	4618      	mov	r0, r3
 8005582:	f005 fca7 	bl	800aed4 <_nxe_packet_transmit_release>
}
 8005586:	bf00      	nop
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <_nx_driver_hardware_packet_received>:

static VOID  _nx_driver_hardware_packet_received(VOID)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
  NX_PACKET  *received_packet_ptr;

  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 8005596:	e006      	b.n	80055a6 <_nx_driver_hardware_packet_received+0x16>
  {
      /* Transfer the packet to NetX.  */
      _nx_driver_transfer_to_netx(nx_driver_information.nx_driver_information_ip_ptr, received_packet_ptr);
 8005598:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <_nx_driver_hardware_packet_received+0x30>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	4611      	mov	r1, r2
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff fdf7 	bl	8005194 <_nx_driver_transfer_to_netx>
  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 80055a6:	1d3b      	adds	r3, r7, #4
 80055a8:	4619      	mov	r1, r3
 80055aa:	4806      	ldr	r0, [pc, #24]	; (80055c4 <_nx_driver_hardware_packet_received+0x34>)
 80055ac:	f7fc f9ab 	bl	8001906 <HAL_ETH_ReadData>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f0      	beq.n	8005598 <_nx_driver_hardware_packet_received+0x8>
  }
}
 80055b6:	bf00      	nop
 80055b8:	bf00      	nop
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	20014790 	.word	0x20014790
 80055c4:	20007e64 	.word	0x20007e64

080055c8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t ** buff)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  NX_PACKET     *packet_ptr;
  if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 80055d0:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <HAL_ETH_RxAllocateCallback+0x40>)
 80055d2:	6898      	ldr	r0, [r3, #8]
 80055d4:	f107 010c 	add.w	r1, r7, #12
 80055d8:	2300      	movs	r3, #0
 80055da:	2200      	movs	r2, #0
 80055dc:	f005 fad8 	bl	800ab90 <_nxe_packet_allocate>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <HAL_ETH_RxAllocateCallback+0x32>
                         NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
  {
    /* Adjust the packet.  */
    packet_ptr -> nx_packet_prepend_ptr += 2;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3202      	adds	r2, #2
 80055ee:	609a      	str	r2, [r3, #8]
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_InvalidateDCache_by_Addr((uint32_t*)packet_ptr -> nx_packet_data_start, packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start);
#endif
    *buff = packet_ptr -> nx_packet_prepend_ptr;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Rx Buffer Pool is exhausted. */
    *buff = NULL;
  }
}
 80055f8:	e002      	b.n	8005600 <HAL_ETH_RxAllocateCallback+0x38>
    *buff = NULL;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
}
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20014790 	.word	0x20014790

0800560c <HAL_ETH_RxLinkCallback>:
/*                                                                        */
/*    HAL_ETH_ReadData              Read a received packet                */
/*                                                                        */
/**************************************************************************/
void HAL_ETH_RxLinkCallback(void **first_packet_ptr, void **last_packet_ptr, uint8_t *buff, uint16_t Length)
{
 800560c:	b480      	push	{r7}
 800560e:	b089      	sub	sp, #36	; 0x24
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	807b      	strh	r3, [r7, #2]
  NX_PACKET **first_nx_packet_ptr = (NX_PACKET **)first_packet_ptr;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	61fb      	str	r3, [r7, #28]
  NX_PACKET **last_nx_packet_ptr = (NX_PACKET **)last_packet_ptr;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	61bb      	str	r3, [r7, #24]
  NX_PACKET  *received_packet_ptr;

  /* Indicate the offset of the received data.  */
  uint8_t *data_buffer_ptr = buff - 2U - header_size;
 8005622:	4b14      	ldr	r3, [pc, #80]	; (8005674 <HAL_ETH_RxLinkCallback+0x68>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	f06f 0301 	mvn.w	r3, #1
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	4413      	add	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

  received_packet_ptr = (NX_PACKET *)data_buffer_ptr;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	613b      	str	r3, [r7, #16]
  received_packet_ptr->nx_packet_append_ptr = received_packet_ptr->nx_packet_prepend_ptr + Length;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	887b      	ldrh	r3, [r7, #2]
 800563c:	441a      	add	r2, r3
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	60da      	str	r2, [r3, #12]
  received_packet_ptr->nx_packet_length = Length;
 8005642:	887a      	ldrh	r2, [r7, #2]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check whether this is the first packet. */
  if (*first_nx_packet_ptr == NULL)
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d103      	bne.n	8005658 <HAL_ETH_RxLinkCallback+0x4c>
  {
    /* Add the first buffer of the packet. */
    *first_nx_packet_ptr = received_packet_ptr;
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	e003      	b.n	8005660 <HAL_ETH_RxLinkCallback+0x54>
  }
  /* This is not the first packet. */
  else
  {
    /* Add the rest of the buffer to the end of the packet. */
    (*last_nx_packet_ptr)->nx_packet_next = received_packet_ptr;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	605a      	str	r2, [r3, #4]
  }
  /* Save the current packet in order to use it in the next iteration. */
  *last_nx_packet_ptr  = received_packet_ptr;
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	601a      	str	r2, [r3, #0]
}
 8005666:	bf00      	nop
 8005668:	3724      	adds	r7, #36	; 0x24
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	200147dc 	.word	0x200147dc

08005678 <_nx_driver_hardware_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT _nx_driver_hardware_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

  return NX_SUCCESS;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
	...

08005690 <HAL_ETH_RxCpltCallback>:
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]

  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 8005698:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <HAL_ETH_RxCpltCallback+0x34>)
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	60fb      	str	r3, [r7, #12]

  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_RECEIVED;
 800569e:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <HAL_ETH_RxCpltCallback+0x34>)
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f043 0301 	orr.w	r3, r3, #1
 80056a6:	4a07      	ldr	r2, [pc, #28]	; (80056c4 <HAL_ETH_RxCpltCallback+0x34>)
 80056a8:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d104      	bne.n	80056ba <HAL_ETH_RxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 80056b0:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <HAL_ETH_RxCpltCallback+0x34>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f001 fdbf 	bl	8007238 <_nx_ip_driver_deferred_processing>
  }
}
 80056ba:	bf00      	nop
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20014790 	.word	0x20014790

080056c8 <HAL_ETH_TxCpltCallback>:

void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 80056d0:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <HAL_ETH_TxCpltCallback+0x34>)
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	60fb      	str	r3, [r7, #12]


  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_TRANSMITTED;
 80056d6:	4b09      	ldr	r3, [pc, #36]	; (80056fc <HAL_ETH_TxCpltCallback+0x34>)
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f043 0304 	orr.w	r3, r3, #4
 80056de:	4a07      	ldr	r2, [pc, #28]	; (80056fc <HAL_ETH_TxCpltCallback+0x34>)
 80056e0:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d104      	bne.n	80056f2 <HAL_ETH_TxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 80056e8:	4b04      	ldr	r3, [pc, #16]	; (80056fc <HAL_ETH_TxCpltCallback+0x34>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f001 fda3 	bl	8007238 <_nx_ip_driver_deferred_processing>
  }
}
 80056f2:	bf00      	nop
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20014790 	.word	0x20014790

08005700 <_nx_arp_dynamic_entry_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_dynamic_entry_delete(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_PACKET *packet_ptr, *next_packet_ptr;


    /* Determine if this ARP entry is already active.  */
    if (arp_ptr -> nx_arp_active_list_head)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d050      	beq.n	80057b4 <_nx_arp_dynamic_entry_delete+0xb4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005712:	f3ef 8310 	mrs	r3, PRIMASK
 8005716:	613b      	str	r3, [r7, #16]
    return(posture);
 8005718:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800571a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800571c:	b672      	cpsid	i
    return(int_posture);
 800571e:	68fb      	ldr	r3, [r7, #12]
    {

        /* Remove this dynamic ARP entry from the associated list.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8005720:	61bb      	str	r3, [r7, #24]

        /* Determine if this is the only ARP entry on the list.  */
        if (arp_ptr == arp_ptr -> nx_arp_active_next)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d104      	bne.n	8005736 <_nx_arp_dynamic_entry_delete+0x36>
        {

            /* Remove the entry from the list.  */
            *(arp_ptr -> nx_arp_active_list_head) =  NX_NULL;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	e014      	b.n	8005760 <_nx_arp_dynamic_entry_delete+0x60>
        {

            /* Remove the entry from a list of more than one entry.  */

            /* Update the list head pointer.  */
            if (*(arp_ptr -> nx_arp_active_list_head) == arp_ptr)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	d104      	bne.n	800574c <_nx_arp_dynamic_entry_delete+0x4c>
            {
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	6952      	ldr	r2, [r2, #20]
 800574a:	601a      	str	r2, [r3, #0]
            }

            /* Update the links of the adjacent ARP entries.  */
            (arp_ptr -> nx_arp_active_next) -> nx_arp_active_previous = arp_ptr -> nx_arp_active_previous;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	6992      	ldr	r2, [r2, #24]
 8005754:	619a      	str	r2, [r3, #24]
            (arp_ptr -> nx_arp_active_previous) -> nx_arp_active_next =  arp_ptr -> nx_arp_active_next;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	6952      	ldr	r2, [r2, #20]
 800575e:	615a      	str	r2, [r3, #20]
        }

        /* No longer active, clear the active list head.  */
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2200      	movs	r2, #0
 8005764:	61da      	str	r2, [r3, #28]

        /* Decrease the number of active ARP entries.  */
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 800576c:	1e5a      	subs	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

        /* Pickup the queued packets head pointer.  */
        next_packet_ptr =  arp_ptr -> nx_arp_packets_waiting;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	61fb      	str	r3, [r7, #28]

        /* Clear the queued packets head pointer.  */
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2200      	movs	r2, #0
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f383 8810 	msr	PRIMASK, r3
}
 800578a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Loop to remove all queued packets.  */
        while (next_packet_ptr)
 800578c:	e00f      	b.n	80057ae <_nx_arp_dynamic_entry_delete+0xae>
        {

            /* Pickup the packet pointer at the head of the queue.  */
            packet_ptr =  next_packet_ptr;
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	617b      	str	r3, [r7, #20]

            /* Move to the next packet in the queue.  */
            next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	61fb      	str	r3, [r7, #28]

            /* Clear the next packet queue pointer.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2200      	movs	r2, #0
 800579c:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	655a      	str	r2, [r3, #84]	; 0x54
#endif

            /* Release the packet that was queued from the previous ARP entry.  */
            _nx_packet_transmit_release(packet_ptr);
 80057a8:	6978      	ldr	r0, [r7, #20]
 80057aa:	f003 ff4d 	bl	8009648 <_nx_packet_transmit_release>
        while (next_packet_ptr)
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1ec      	bne.n	800578e <_nx_arp_dynamic_entry_delete+0x8e>
        }
    }

    return(NX_SUCCESS);
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <_nx_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ARP_ENABLE, ip_ptr, arp_cache_memory, arp_cache_size, 0, NX_TRACE_ARP_EVENTS, 0, 0);

    /* Clear the entire ARP cache.  */
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	2100      	movs	r1, #0
 80057d0:	68b8      	ldr	r0, [r7, #8]
 80057d2:	f009 fa73 	bl	800ecbc <memset>

    /* Pickup starting address of ARP entry array.  */
    entry_ptr =  (NX_ARP *)arp_cache_memory;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	61bb      	str	r3, [r7, #24]

    /* Determine how many ARP entries will fit in this cache area.  */
    arp_entries =  arp_cache_size / sizeof(NX_ARP);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a2d      	ldr	r2, [pc, #180]	; (8005894 <_nx_arp_enable+0xd4>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	091b      	lsrs	r3, r3, #4
 80057e4:	617b      	str	r3, [r7, #20]

    /* Initialize the forward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	e00a      	b.n	8005802 <_nx_arp_enable+0x42>
    {
        /* Setup each entry to point to the next entry.  */
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	60da      	str	r2, [r3, #12]
        entry_ptr++;
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	3334      	adds	r3, #52	; 0x34
 80057fa:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	3301      	adds	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	3b01      	subs	r3, #1
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	429a      	cmp	r2, r3
 800580a:	d3ef      	bcc.n	80057ec <_nx_arp_enable+0x2c>
    }

    /* The entry now points to the last entry in the ARP array.  Set its
       next pointer to the first entry.  */
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	60da      	str	r2, [r3, #12]

    /* Initialize the backward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	e00a      	b.n	800582e <_nx_arp_enable+0x6e>
    {
        /* Setup each entry to point to the previous entry.  */
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f1a3 0234 	sub.w	r2, r3, #52	; 0x34
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	611a      	str	r2, [r3, #16]
        entry_ptr--;
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	3b34      	subs	r3, #52	; 0x34
 8005826:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	3301      	adds	r3, #1
 800582c:	61fb      	str	r3, [r7, #28]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	3b01      	subs	r3, #1
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	429a      	cmp	r2, r3
 8005836:	d3ef      	bcc.n	8005818 <_nx_arp_enable+0x58>
    }

    /* The entry now points to the first entry, set the previous pointer
       to the last entry.  */
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2234      	movs	r2, #52	; 0x34
 800583c:	fb02 f303 	mul.w	r3, r2, r3
 8005840:	3b34      	subs	r3, #52	; 0x34
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	441a      	add	r2, r3
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	611a      	str	r2, [r3, #16]
       information in the IP structure.  */

    /* Setup the list head pointers in the IP instance.  At first all ARP
       entries are associated with the dynamic ARP list.  The static ARP list
       is NULL until static ARP entry calls are made.  */
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
    ip_ptr -> nx_ip_arp_dynamic_list =  (NX_ARP *)arp_cache_memory;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4

    /* Store the initial ARP cache information in the IP control block.  */
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	f8c3 26f8 	str.w	r2, [r3, #1784]	; 0x6f8
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc

    /* Setup the ARP periodic update routine.  */
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4a0a      	ldr	r2, [pc, #40]	; (8005898 <_nx_arp_enable+0xd8>)
 800586e:	f8c3 26e8 	str.w	r2, [r3, #1768]	; 0x6e8

    /* Setup the ARP queue process routine.  */
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4a09      	ldr	r2, [pc, #36]	; (800589c <_nx_arp_enable+0xdc>)
 8005876:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec

    /* Setup the ARP send packet routine.  */
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4a08      	ldr	r2, [pc, #32]	; (80058a0 <_nx_arp_enable+0xe0>)
 800587e:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0

    /* Setup the ARP allocate service request pointer.  */
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4a07      	ldr	r2, [pc, #28]	; (80058a4 <_nx_arp_enable+0xe4>)
 8005886:	f8c3 26e4 	str.w	r2, [r3, #1764]	; 0x6e4

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800588a:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800588c:	4618      	mov	r0, r3
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	4ec4ec4f 	.word	0x4ec4ec4f
 8005898:	08006075 	.word	0x08006075
 800589c:	08006277 	.word	0x08006277
 80058a0:	08005f31 	.word	0x08005f31
 80058a4:	080058a9 	.word	0x080058a9

080058a8 <_nx_arp_entry_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_entry_allocate(NX_IP *ip_ptr, NX_ARP **arp_list_ptr, UINT is_static)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	; 0x28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
NX_ARP *arp_entry;
UINT    status;


    /* Determine if there is an ARP entry available in the dynamic list.  */
    if (ip_ptr -> nx_ip_arp_dynamic_list)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 80b4 	beq.w	8005a28 <_nx_arp_entry_allocate+0x180>
    {

        /* Yes there are one or more free entries.  */

        /* Pickup pointer to last used dynamic ARP entry.  */
        arp_entry =  (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	623b      	str	r3, [r7, #32]

        /* Remove from the dynamic list. */
        _nx_arp_dynamic_entry_delete(ip_ptr, arp_entry);
 80058ca:	6a39      	ldr	r1, [r7, #32]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7ff ff17 	bl	8005700 <_nx_arp_dynamic_entry_delete>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80058d2:	f3ef 8310 	mrs	r3, PRIMASK
 80058d6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80058d8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80058da:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80058dc:	b672      	cpsid	i
    return(int_posture);
 80058de:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts temporarily.  */
        TX_DISABLE
 80058e0:	61fb      	str	r3, [r7, #28]

        /* Link the ARP entry at the head of the IP list.  */

        /* Determine if the ARP entry is being added to an empty list.  */
        if (*arp_list_ptr)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d014      	beq.n	8005914 <_nx_arp_entry_allocate+0x6c>
        {

            /* Add the ARP entry to the beginning of the nonempty ARP
               list.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =      *arp_list_ptr;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	619a      	str	r2, [r3, #24]
            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =  arp_entry;
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	6a3a      	ldr	r2, [r7, #32]
 8005908:	615a      	str	r2, [r3, #20]
            (*arp_list_ptr) -> nx_arp_active_previous =  arp_entry;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6a3a      	ldr	r2, [r7, #32]
 8005910:	619a      	str	r2, [r3, #24]
 8005912:	e00b      	b.n	800592c <_nx_arp_entry_allocate+0x84>
        }
        else
        {
            /* Empty list, just put the ARP entry at the beginning.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =       arp_entry;
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	6a3a      	ldr	r2, [r7, #32]
 800591e:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =   arp_entry;
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	6a3a      	ldr	r2, [r7, #32]
 8005924:	619a      	str	r2, [r3, #24]

            /* Now setup the list head.  */
            *arp_list_ptr =  arp_entry;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6a3a      	ldr	r2, [r7, #32]
 800592a:	601a      	str	r2, [r3, #0]
        }

        /* Determine if this is a static entry. */
        if (is_static == NX_TRUE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d141      	bne.n	80059b6 <_nx_arp_entry_allocate+0x10e>
        {

            /* Remove this entry from the ARP dynamic list.  */

            /* Determine if this is the only ARP entry on the dynamic list.  */
            if (arp_entry == arp_entry -> nx_arp_pool_next)
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	6a3a      	ldr	r2, [r7, #32]
 8005938:	429a      	cmp	r2, r3
 800593a:	d104      	bne.n	8005946 <_nx_arp_entry_allocate+0x9e>
            {

                /* Remove the sole entry from the dynamic list head.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  NX_NULL;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
 8005944:	e009      	b.n	800595a <_nx_arp_entry_allocate+0xb2>
            {

                /* Remove the entry from a list of more than one entry.  */

                /* Update the links of the adjacent ARP dynamic pool entries.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	6a3a      	ldr	r2, [r7, #32]
 800594c:	6912      	ldr	r2, [r2, #16]
 800594e:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	6a3a      	ldr	r2, [r7, #32]
 8005956:	68d2      	ldr	r2, [r2, #12]
 8005958:	60da      	str	r2, [r3, #12]
            }

            /* Add the entry to the ARP static list.  */

            /* Determine if the ARP static list is empty.  */
            if (ip_ptr -> nx_ip_arp_static_list == NX_NULL)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <_nx_arp_entry_allocate+0xd2>
            {

                /* Just place this single ARP entry on the list.  */
                arp_entry -> nx_arp_pool_next =     arp_entry;
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	6a3a      	ldr	r2, [r7, #32]
 8005968:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = arp_entry;
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	6a3a      	ldr	r2, [r7, #32]
 800596e:	611a      	str	r2, [r3, #16]
                ip_ptr -> nx_ip_arp_static_list =   arp_entry;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a3a      	ldr	r2, [r7, #32]
 8005974:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
 8005978:	e015      	b.n	80059a6 <_nx_arp_entry_allocate+0xfe>
            }
            else
            {

                /* Add to the end of the ARP static list.  */
                arp_entry -> nx_arp_pool_next = ip_ptr -> nx_ip_arp_static_list;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f8d3 26d0 	ldr.w	r2, [r3, #1744]	; 0x6d0
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	611a      	str	r2, [r3, #16]
                ((ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	6a3a      	ldr	r2, [r7, #32]
 800599a:	60da      	str	r2, [r3, #12]
                (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous = arp_entry;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8d3 36d0 	ldr.w	r3, [r3, #1744]	; 0x6d0
 80059a2:	6a3a      	ldr	r2, [r7, #32]
 80059a4:	611a      	str	r2, [r3, #16]
            }

#ifndef NX_DISABLE_ARP_INFO
            /* Increment the ARP static entry count.  */
            ip_ptr -> nx_ip_arp_static_entries++;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80059b4:	e02c      	b.n	8005a10 <_nx_arp_entry_allocate+0x168>
        }
        else  /* Allocate entry from dynamic list. */
        {

            /* Move this ARP entry to the front of the general ARP dynamic entry pool.  */
            if (arp_entry != ip_ptr -> nx_ip_arp_dynamic_list)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 80059bc:	6a3a      	ldr	r2, [r7, #32]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d01f      	beq.n	8005a02 <_nx_arp_entry_allocate+0x15a>

                /* The current ARP entry is not at the front of the list, so it
                   must be moved.  */

                /* Link up the neighbors first.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	6a3a      	ldr	r2, [r7, #32]
 80059c8:	6912      	ldr	r2, [r2, #16]
 80059ca:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	6a3a      	ldr	r2, [r7, #32]
 80059d2:	68d2      	ldr	r2, [r2, #12]
 80059d4:	60da      	str	r2, [r3, #12]

                /* Now link this ARP entry to the head of the list.  */
                arp_entry -> nx_arp_pool_next =  ip_ptr -> nx_ip_arp_dynamic_list;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8d3 26d4 	ldr.w	r2, [r3, #1748]	; 0x6d4
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	691a      	ldr	r2, [r3, #16]
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =  arp_entry;
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	6a3a      	ldr	r2, [r7, #32]
 80059f0:	60da      	str	r2, [r3, #12]
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =  arp_entry;
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	6a3a      	ldr	r2, [r7, #32]
 80059f8:	611a      	str	r2, [r3, #16]

                /* Now set the list head to this ARP entry.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a3a      	ldr	r2, [r7, #32]
 80059fe:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
            }

            /* Increment the number of active dynamic entries.  */
            ip_ptr -> nx_ip_arp_dynamic_active_count++;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8
        }

        /* Set the entry type.  */
        arp_entry -> nx_arp_route_static = is_static;
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f383 8810 	msr	PRIMASK, r3
}
 8005a20:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Setup a successful status return.  */
        status =  NX_SUCCESS;
 8005a22:	2300      	movs	r3, #0
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
 8005a26:	e001      	b.n	8005a2c <_nx_arp_entry_allocate+0x184>
    else
    {

        /* No more ARP entries are available, all the ARP entries must be
           allocated on the static list.  */
        status =  NX_NO_MORE_ENTRIES;
 8005a28:	2317      	movs	r3, #23
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Return status to the caller.  */
    return(status);
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3728      	adds	r7, #40	; 0x28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <_nx_arp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b088      	sub	sp, #32
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005a40:	f3ef 8310 	mrs	r3, PRIMASK
 8005a44:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005a46:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005a48:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005a4a:	b672      	cpsid	i
    return(int_posture);
 8005a4c:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8005a4e:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if ARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_arp_queue_process)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d110      	bne.n	8005a7c <_nx_arp_packet_deferred_receive+0x46>

        /* ARP is not enabled.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count...  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f383 8810 	msr	PRIMASK, r3
}
 8005a72:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since ARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8005a74:	6838      	ldr	r0, [r7, #0]
 8005a76:	f003 fd2f 	bl	80094d8 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8005a7a:	e02f      	b.n	8005adc <_nx_arp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the ARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d011      	beq.n	8005aaa <_nx_arp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the ARP deferred queue.  */
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	; 0x6e0
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2200      	movs	r2, #0
 8005a94:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f383 8810 	msr	PRIMASK, r3
}
 8005aa8:	e018      	b.n	8005adc <_nx_arp_packet_deferred_receive+0xa6>
    {

        /* Empty ARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the ARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
        packet_ptr -> nx_packet_queue_next =                 NX_NULL;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2200      	movs	r2, #0
 8005abe:	61da      	str	r2, [r3, #28]
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f383 8810 	msr	PRIMASK, r3
}
 8005aca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the ARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2110      	movs	r1, #16
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f006 f8e8 	bl	800bcac <_tx_event_flags_set>
    }
}
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <_nx_arp_packet_receive>:
/*                                            fixed compiler errors,      */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8005ae2:	b590      	push	{r4, r7, lr}
 8005ae4:	b097      	sub	sp, #92	; 0x5c
 8005ae6:	af02      	add	r7, sp, #8
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	6039      	str	r1, [r7, #0]
ULONG         sender_physical_lsw;
ULONG         sender_ip_address;
ULONG         target_ip_address;
ULONG         message_type;
ULONG         index;
UCHAR         consumed = NX_FALSE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
NX_INTERFACE *interface_ptr;


#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Determine if the packet length is valid.  */
    if (packet_ptr -> nx_packet_length < NX_ARP_MESSAGE_SIZE)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b1b      	cmp	r3, #27
 8005af8:	d80a      	bhi.n	8005b10 <_nx_arp_packet_receive+0x2e>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8005b08:	6838      	ldr	r0, [r7, #0]
 8005b0a:	f003 fce5 	bl	80094d8 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8005b0e:	e20b      	b.n	8005f28 <_nx_arp_packet_receive+0x446>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING  */

    /* Setup a pointer to the ARP message.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	643b      	str	r3, [r7, #64]	; 0x40

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b18:	3304      	adds	r3, #4
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b1e:	3304      	adds	r3, #4
 8005b20:	ba12      	rev	r2, r2
 8005b22:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b26:	3308      	adds	r3, #8
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	ba12      	rev	r2, r2
 8005b30:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b34:	330c      	adds	r3, #12
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	ba12      	rev	r2, r2
 8005b3e:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b42:	3310      	adds	r3, #16
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b48:	3310      	adds	r3, #16
 8005b4a:	ba12      	rev	r2, r2
 8005b4c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8005b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b50:	3314      	adds	r3, #20
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b56:	3314      	adds	r3, #20
 8005b58:	ba12      	rev	r2, r2
 8005b5a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5e:	3318      	adds	r3, #24
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b64:	3318      	adds	r3, #24
 8005b66:	ba12      	rev	r2, r2
 8005b68:	601a      	str	r2, [r3, #0]

    /* Pickup the ARP message type.  */
    message_type =  (ULONG)(*(message_ptr + 1) & 0xFFFF);
 8005b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the ARP message type is valid.  */
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 8005b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d00d      	beq.n	8005b96 <_nx_arp_packet_receive+0xb4>
 8005b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d00a      	beq.n	8005b96 <_nx_arp_packet_receive+0xb4>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8005b8e:	6838      	ldr	r0, [r7, #0]
 8005b90:	f003 fca2 	bl	80094d8 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8005b94:	e1c8      	b.n	8005f28 <_nx_arp_packet_receive+0x446>
    }

    /* Pick up the sender's physical address from the message.  */
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
 8005b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b98:	3308      	adds	r3, #8
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	0c1b      	lsrs	r3, r3, #16
 8005b9e:	63bb      	str	r3, [r7, #56]	; 0x38
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 8005ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	041a      	lsls	r2, r3, #16
 8005ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005baa:	330c      	adds	r3, #12
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	0c1b      	lsrs	r3, r3, #16
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	637b      	str	r3, [r7, #52]	; 0x34
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 8005bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb6:	330c      	adds	r3, #12
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	041a      	lsls	r2, r3, #16
 8005bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bbe:	3310      	adds	r3, #16
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	0c1b      	lsrs	r3, r3, #16
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	633b      	str	r3, [r7, #48]	; 0x30
    target_ip_address =    *(message_ptr + 6);
 8005bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Does the packet have an interface assigned? */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d104      	bne.n	8005be0 <_nx_arp_packet_receive+0xfe>
    {

        /* No, so default it to the primary interface. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f503 62e4 	add.w	r2, r3, #1824	; 0x720
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Pickup the interface information from the incoming packet. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if it is an IP address conflict when IP address probing.  */
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d12e      	bne.n	8005c4c <_nx_arp_packet_receive+0x16a>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d02a      	beq.n	8005c4c <_nx_arp_packet_receive+0x16a>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8005bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d007      	beq.n	8005c10 <_nx_arp_packet_receive+0x12e>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d122      	bne.n	8005c4c <_nx_arp_packet_receive+0x16a>
         ((sender_ip_address == 0) && (target_ip_address == interface_ptr -> nx_interface_ip_probe_address))))
 8005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d11d      	bne.n	8005c4c <_nx_arp_packet_receive+0x16a>
    {

        /* Make sure the sender physical address is not ours.  */
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d104      	bne.n	8005c24 <_nx_arp_packet_receive+0x142>
            (sender_physical_lsw != interface_ptr -> nx_interface_physical_address_lsw))
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 8005c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d00f      	beq.n	8005c44 <_nx_arp_packet_receive+0x162>
        {

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00b      	beq.n	8005c44 <_nx_arp_packet_receive+0x162>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	79db      	ldrb	r3, [r3, #7]
 8005c34:	4619      	mov	r1, r3
 8005c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	47a0      	blx	r4
                                                                           sender_physical_msw, sender_physical_lsw);
            }
        }

        /* Release the packet. */
        _nx_packet_release(packet_ptr);
 8005c44:	6838      	ldr	r0, [r7, #0]
 8005c46:	f003 fc47 	bl	80094d8 <_nx_packet_release>

        return;
 8005c4a:	e16d      	b.n	8005f28 <_nx_arp_packet_receive+0x446>
    }

    /* Determine if it is an address conflict packet after set the IP address.  */
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d040      	beq.n	8005cd4 <_nx_arp_packet_receive+0x1f2>
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d13b      	bne.n	8005cd4 <_nx_arp_packet_receive+0x1f2>
    {

        /* Is it sent from other devices. */
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d105      	bne.n	8005c74 <_nx_arp_packet_receive+0x192>
            (sender_physical_lsw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw))
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6c:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8005c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d02b      	beq.n	8005ccc <_nx_arp_packet_receive+0x1ea>
        {

            /* Yes it is.  */
            if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout == 0)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <_nx_arp_packet_receive+0x1b2>
            {

                /* Set defend timeout. */
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	220a      	movs	r2, #10
 8005c84:	645a      	str	r2, [r3, #68]	; 0x44

                /* Send the announcement. */
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f94e 	bl	8005f30 <_nx_arp_packet_send>
            }

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00b      	beq.n	8005cb4 <_nx_arp_packet_receive+0x1d2>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	79db      	ldrb	r3, [r3, #7]
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	47a0      	blx	r4

            /* This is likely in response to our previous gratuitous ARP from another entity on the
               network has the same IP address.  */

            /* Determine if there is a gratuitous ARP response handler.  */
            if (ip_ptr -> nx_ip_arp_gratuitous_response_handler)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d006      	beq.n	8005ccc <_nx_arp_packet_receive+0x1ea>
            {

                /* Yes, call the gratuitous ARP response handler. Note that it is responsible
                   for releasing the packet!  */
                (ip_ptr -> nx_ip_arp_gratuitous_response_handler)(ip_ptr, packet_ptr);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	; 0x6f4
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	4798      	blx	r3

                return;
 8005cca:	e12d      	b.n	8005f28 <_nx_arp_packet_receive+0x446>
            return;
#endif /* NX_ARP_DEFEND_BY_REPLY */
        }

        /* Release the conflict packet. */
        _nx_packet_release(packet_ptr);
 8005ccc:	6838      	ldr	r0, [r7, #0]
 8005cce:	f003 fc03 	bl	80094d8 <_nx_packet_release>

        return;
 8005cd2:	e129      	b.n	8005f28 <_nx_arp_packet_receive+0x446>
    }

    /* Determine what type of ARP message this is.  Note that ARP requests must
       also specify this IP instance's IP address.  */
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 8005cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	f040 808f 	bne.w	8005dfa <_nx_arp_packet_receive+0x318>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	f040 8088 	bne.w	8005dfa <_nx_arp_packet_receive+0x318>
    {

#ifndef NX_DISABLE_ARP_INFO

        /* Increment the ARP requests received count.  */
        ip_ptr -> nx_ip_arp_requests_received++;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Increment the ARP responses sent count.  */
        ip_ptr -> nx_ip_arp_responses_sent++;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	675a      	str	r2, [r3, #116]	; 0x74

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_RESPONSE_SEND, ip_ptr, sender_ip_address, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the ARP message type to ARP response.  */
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 8005cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d00:	3304      	adds	r3, #4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	0c1b      	lsrs	r3, r3, #16
 8005d06:	041b      	lsls	r3, r3, #16
 8005d08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d0a:	3204      	adds	r2, #4
 8005d0c:	f043 0302 	orr.w	r3, r3, #2
 8005d10:	6013      	str	r3, [r2, #0]


        /* Now fill in the new source and destination information for the ARP response.  */
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw >> 16);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 8005d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d24:	3308      	adds	r3, #8
 8005d26:	430a      	orrs	r2, r1
 8005d28:	601a      	str	r2, [r3, #0]
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address >> 16);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8005d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	601a      	str	r2, [r3, #0]
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	0419      	lsls	r1, r3, #16
 8005d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d4c:	3310      	adds	r3, #16
 8005d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d50:	430a      	orrs	r2, r1
 8005d52:	601a      	str	r2, [r3, #0]
        *(message_ptr + 5) =  (ULONG)sender_physical_lsw;
 8005d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d56:	3314      	adds	r3, #20
 8005d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d5a:	601a      	str	r2, [r3, #0]
        *(message_ptr + 6) =  (ULONG)sender_ip_address;
 8005d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d5e:	3318      	adds	r3, #24
 8005d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d62:	601a      	str	r2, [r3, #0]

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the ARP message.  */
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d66:	3304      	adds	r3, #4
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	ba12      	rev	r2, r2
 8005d70:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d74:	3308      	adds	r3, #8
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	ba12      	rev	r2, r2
 8005d7e:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8005d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d82:	330c      	adds	r3, #12
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d88:	330c      	adds	r3, #12
 8005d8a:	ba12      	rev	r2, r2
 8005d8c:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8005d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d90:	3310      	adds	r3, #16
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d96:	3310      	adds	r3, #16
 8005d98:	ba12      	rev	r2, r2
 8005d9a:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8005d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d9e:	3314      	adds	r3, #20
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da4:	3314      	adds	r3, #20
 8005da6:	ba12      	rev	r2, r2
 8005da8:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8005daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dac:	3318      	adds	r3, #24
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db2:	3318      	adds	r3, #24
 8005db4:	ba12      	rev	r2, r2
 8005db6:	601a      	str	r2, [r3, #0]

        /* Make sure the packet length is set properly.  */
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	221c      	movs	r2, #28
 8005dbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup the append pointer, since the received ARP packet can be padded
           with unnecessary bytes.  */
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f103 021c 	add.w	r2, r3, #28
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	60da      	str	r2, [r3, #12]

        /* Send the ARP request to the driver.  */
        driver_request.nx_ip_driver_ptr =      ip_ptr;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 8005dce:	2306      	movs	r3, #6
 8005dd0:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet =   packet_ptr;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_physical_address_msw =  sender_physical_msw;
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  sender_physical_lsw;
 8005dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ddc:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_ARP_RESPONSE_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* No need to update interface.  When responding to an ARP request, use the same interface where the request was received. */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dea:	f107 0208 	add.w	r2, r7, #8
 8005dee:	4610      	mov	r0, r2
 8005df0:	4798      	blx	r3

        /* Set the consumed as NX_TRUE, do not need to release the packet.  */
        consumed = NX_TRUE;
 8005df2:	2301      	movs	r3, #1
 8005df4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8005df8:	e00d      	b.n	8005e16 <_nx_arp_packet_receive+0x334>
        /* We have a response to a previous ARP request or Gratuitous ARP from another network entity.  */

#ifndef NX_DISABLE_ARP_INFO

        /* Check for the message type to see which counter to increment.  */
        if (message_type == NX_ARP_OPTION_REQUEST)
 8005dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d105      	bne.n	8005e0c <_nx_arp_packet_receive+0x32a>
        {

            /* Increment the ARP requests received count.  */
            ip_ptr -> nx_ip_arp_requests_received++;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	671a      	str	r2, [r3, #112]	; 0x70
 8005e0a:	e004      	b.n	8005e16 <_nx_arp_packet_receive+0x334>
        }
        else
        {

            /* Increment the ARP responses received count.  */
            ip_ptr -> nx_ip_arp_responses_received++;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	679a      	str	r2, [r3, #120]	; 0x78

    /* Now we need to search through the active ARP list for the IP address
       to see if there is a matching entry.  */

    /* Calculate the hash index for the sender IP address.  */
    index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	0a1a      	lsrs	r2, r3, #8
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f003 031f 	and.w	r3, r3, #31
 8005e22:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup the first ARP entry.  */
    arp_ptr = NX_NULL;
 8005e24:	2300      	movs	r3, #0
 8005e26:	647b      	str	r3, [r7, #68]	; 0x44

    /* Ignore anything from any ARP packet with a zero sender IP address. */
    if (sender_ip_address != 0)
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d03a      	beq.n	8005ea4 <_nx_arp_packet_receive+0x3c2>
    {
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ROUTE_TABLE_MASK);
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	0a1a      	lsrs	r2, r3, #8
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	4413      	add	r3, r2
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the first ARP entry.  */
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e40:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e48:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Loop to look for an ARP match.  */
    while (arp_ptr)
 8005e4a:	e02b      	b.n	8005ea4 <_nx_arp_packet_receive+0x3c2>
    {

        /* Check for an IP match.  */
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 8005e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d117      	bne.n	8005e86 <_nx_arp_packet_receive+0x3a4>
                }
            }
#endif /* NX_ENABLE_ARP_MAC_CHANGE_NOTIFICATION */

            /* No need to update the static ARP entry. */
            if (arp_ptr -> nx_arp_route_static)
 8005e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d126      	bne.n	8005eac <_nx_arp_packet_receive+0x3ca>
            {
                break;
            }

            /* Save the physical address found in this ARP response.  */
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8005e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e62:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8005e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e68:	629a      	str	r2, [r3, #40]	; 0x28

            /* Set the update rate to the expiration rate since we now have an ARP
               response.  */
            arp_ptr -> nx_arp_entry_next_update =  NX_ARP_EXPIRATION_RATE;
 8005e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	605a      	str	r2, [r3, #4]

            /* Reset the retry counter for this ARP entry.  */
            arp_ptr -> nx_arp_retries =  0;
 8005e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e72:	2200      	movs	r2, #0
 8005e74:	609a      	str	r2, [r3, #8]

            /* Set the interface attached to this packet. */
            arp_ptr -> nx_arp_ip_interface = interface_ptr;
 8005e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e7a:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Call queue send function to send the packet queued up.  */
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 8005e7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fa2c 	bl	80062dc <_nx_arp_queue_send>

            /* Yes, we found a match.  Get out of the loop!  */
            break;
 8005e84:	e013      	b.n	8005eae <_nx_arp_packet_receive+0x3cc>
        }

        /* Move to the next active ARP entry.  */
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 8005e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	647b      	str	r3, [r7, #68]	; 0x44

        /* Determine if we are at the end of the ARP list.  */
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e90:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d102      	bne.n	8005ea4 <_nx_arp_packet_receive+0x3c2>
        {

            /* Clear the ARP pointer.  */
            arp_ptr =  NX_NULL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	647b      	str	r3, [r7, #68]	; 0x44
            break;
 8005ea2:	e004      	b.n	8005eae <_nx_arp_packet_receive+0x3cc>
    while (arp_ptr)
 8005ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1d0      	bne.n	8005e4c <_nx_arp_packet_receive+0x36a>
 8005eaa:	e000      	b.n	8005eae <_nx_arp_packet_receive+0x3cc>
                break;
 8005eac:	bf00      	nop
        }
    }

    /* Determine if we have a packet to release. */
    if (consumed == NX_FALSE)
 8005eae:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d102      	bne.n	8005ebc <_nx_arp_packet_receive+0x3da>
    {
        _nx_packet_release(packet_ptr);
 8005eb6:	6838      	ldr	r0, [r7, #0]
 8005eb8:	f003 fb0e 	bl	80094d8 <_nx_packet_release>
    }

#ifndef NX_DISABLE_ARP_AUTO_ENTRY

    /* Determine if anything was found.  Ignore ARP messages with a zero IP sender address.   */
    if ((arp_ptr == NX_NULL) && (sender_ip_address != 0))
 8005ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d132      	bne.n	8005f28 <_nx_arp_packet_receive+0x446>
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d02f      	beq.n	8005f28 <_nx_arp_packet_receive+0x446>
    {

        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	0a1a      	lsrs	r2, r3, #8
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ece:	4413      	add	r3, r2
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Allocate a new ARP entry in advance of the need to send to the IP
           address.  */
        if (((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)) == NX_SUCCESS)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 8005edc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ede:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005ee2:	0092      	lsls	r2, r2, #2
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	4411      	add	r1, r2
 8005ee8:	2200      	movs	r2, #0
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	4798      	blx	r3
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d119      	bne.n	8005f28 <_nx_arp_packet_receive+0x446>
        {

            /* Setup a pointer to the new ARP entry.  */
            arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ef8:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8005efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	647b      	str	r3, [r7, #68]	; 0x44

            /* Setup the IP address and clear the physical mapping.  */
            arp_ptr -> nx_arp_ip_address =            sender_ip_address;
 8005f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f08:	621a      	str	r2, [r3, #32]
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8005f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8005f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f14:	629a      	str	r2, [r3, #40]	; 0x28
            arp_ptr -> nx_arp_entry_next_update =     NX_ARP_EXPIRATION_RATE;
 8005f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f18:	2200      	movs	r2, #0
 8005f1a:	605a      	str	r2, [r3, #4]
            arp_ptr -> nx_arp_retries =               0;
 8005f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1e:	2200      	movs	r2, #0
 8005f20:	609a      	str	r2, [r3, #8]
            arp_ptr -> nx_arp_ip_interface         =  interface_ptr;
 8005f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f26:	62da      	str	r2, [r3, #44]	; 0x2c
        }
    }
#endif /* NX_DISABLE_ARP_AUTO_ENTRY */
}
 8005f28:	3754      	adds	r7, #84	; 0x54
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd90      	pop	{r4, r7, pc}
	...

08005f30 <_nx_arp_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_send(NX_IP *ip_ptr, ULONG destination_ip, NX_INTERFACE *nx_interface)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08e      	sub	sp, #56	; 0x38
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
NX_PACKET   *request_ptr;
ULONG       *message_ptr;
NX_IP_DRIVER driver_request;

    /* nx_interface must not be NX_NULL. */
    NX_ASSERT(nx_interface != NX_NULL);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d104      	bne.n	8005f4c <_nx_arp_packet_send+0x1c>
 8005f42:	f04f 30ff 	mov.w	r0, #4294967295
 8005f46:	f007 f9bd 	bl	800d2c4 <_tx_thread_sleep>
 8005f4a:	e7fa      	b.n	8005f42 <_nx_arp_packet_send+0x12>
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 8005f52:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8005f56:	2300      	movs	r3, #0
 8005f58:	222c      	movs	r2, #44	; 0x2c
 8005f5a:	f002 ff5b 	bl	8008e14 <_nx_packet_allocate>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f040 8081 	bne.w	8006068 <_nx_arp_packet_send+0x138>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Stamp the packet with the outgoing interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "request_ptr" was initialized in _nx_packet_allocate. */
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef NX_DISABLE_ARP_INFO
    /* Increment the ARP requests sent count.  */
    ip_ptr -> nx_ip_arp_requests_sent++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	66da      	str	r2, [r3, #108]	; 0x6c
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_REQUEST_SEND, ip_ptr, destination_ip, request_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Build the ARP request packet.  */

    /* Setup the size of the ARP message.  */
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	221c      	movs	r2, #28
 8005f7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the prepend pointer.  */
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	3a1c      	subs	r2, #28
 8005f84:	609a      	str	r2, [r3, #8]

    /* Setup the pointer to the message area.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)request_ptr -> nx_packet_prepend_ptr;
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Write the Hardware type into the message.  */
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 8005f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8e:	f44f 3284 	mov.w	r2, #67584	; 0x10800
 8005f92:	601a      	str	r2, [r3, #0]
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 8005f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f96:	3304      	adds	r3, #4
 8005f98:	4a35      	ldr	r2, [pc, #212]	; (8006070 <_nx_arp_packet_send+0x140>)
 8005f9a:	601a      	str	r2, [r3, #0]
        NX_ARP_OPTION_REQUEST;

    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_physical_address_lsw >> 16);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8005fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005faa:	3308      	adds	r3, #8
 8005fac:	430a      	orrs	r2, r1
 8005fae:	601a      	str	r2, [r3, #0]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_ip_address >> 16);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	601a      	str	r2, [r3, #0]
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	695a      	ldr	r2, [r3, #20]
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fca:	3310      	adds	r3, #16
 8005fcc:	0412      	lsls	r2, r2, #16
 8005fce:	601a      	str	r2, [r3, #0]
    *(message_ptr + 5) =  (ULONG)0;
 8005fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd2:	3314      	adds	r3, #20
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]
    *(message_ptr + 6) =  (ULONG)destination_ip;
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fda:	3318      	adds	r3, #24
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	601a      	str	r2, [r3, #0]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 8005fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	ba1a      	rev	r2, r3
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe8:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8005fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fec:	3304      	adds	r3, #4
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	ba12      	rev	r2, r2
 8005ff6:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8005ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006000:	3308      	adds	r3, #8
 8006002:	ba12      	rev	r2, r2
 8006004:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8006006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006008:	330c      	adds	r3, #12
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	330c      	adds	r3, #12
 8006010:	ba12      	rev	r2, r2
 8006012:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	3310      	adds	r3, #16
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	3310      	adds	r3, #16
 800601e:	ba12      	rev	r2, r2
 8006020:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8006022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006024:	3314      	adds	r3, #20
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602a:	3314      	adds	r3, #20
 800602c:	ba12      	rev	r2, r2
 800602e:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8006030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006032:	3318      	adds	r3, #24
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006038:	3318      	adds	r3, #24
 800603a:	ba12      	rev	r2, r2
 800603c:	601a      	str	r2, [r3, #0]

    /* Set up the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 8006042:	2305      	movs	r3, #5
 8006044:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_packet =                request_ptr;
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 800604a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800604e:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8006050:	f04f 33ff 	mov.w	r3, #4294967295
 8006054:	61fb      	str	r3, [r7, #28]
    driver_request.nx_ip_driver_interface            =  nx_interface;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Send the ARP request to the driver.  */
    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	f107 0210 	add.w	r2, r7, #16
 8006062:	4610      	mov	r0, r2
 8006064:	4798      	blx	r3
 8006066:	e000      	b.n	800606a <_nx_arp_packet_send+0x13a>
                return;
 8006068:	bf00      	nop
}
 800606a:	3738      	adds	r7, #56	; 0x38
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	06040001 	.word	0x06040001

08006074 <_nx_arp_periodic_update>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_periodic_update(NX_IP *ip_ptr)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b08a      	sub	sp, #40	; 0x28
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Pickup pointer to ARP dynamic list.  */
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8006082:	623b      	str	r3, [r7, #32]

    /* Loop through the active ARP entries to see if they need updating.  */
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8006084:	2300      	movs	r3, #0
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
 8006088:	e0af      	b.n	80061ea <_nx_arp_periodic_update+0x176>
    {

        /* Check this ARP entry to see if it need updating.  */
        if (arp_entry -> nx_arp_entry_next_update)
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 80a5 	beq.w	80061de <_nx_arp_periodic_update+0x16a>
        {

            /* Decrement the next update field.  */
            arp_entry -> nx_arp_entry_next_update--;
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	1e5a      	subs	r2, r3, #1
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	605a      	str	r2, [r3, #4]

            /* Determine if an ARP expiration is present.  */
            if (!arp_entry -> nx_arp_entry_next_update)
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f040 809b 	bne.w	80061de <_nx_arp_periodic_update+0x16a>
            {

                /* Yes, an ARP expiration is present.   */

                /* Determine if the retry counter has been exceeded.  */
                if (arp_entry -> nx_arp_retries == NX_ARP_MAXIMUM_RETRIES)
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b12      	cmp	r3, #18
 80060ae:	f040 8086 	bne.w	80061be <_nx_arp_periodic_update+0x14a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80060b2:	f3ef 8310 	mrs	r3, PRIMASK
 80060b6:	613b      	str	r3, [r7, #16]
    return(posture);
 80060b8:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80060ba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80060bc:	b672      	cpsid	i
    return(int_posture);
 80060be:	68fb      	ldr	r3, [r7, #12]

                    /* The number of retries has been exceeded. The entry is removed
                       from the active list and any queued packet is released.  */

                    /* Disable interrupts.  */
                    TX_DISABLE
 80060c0:	61bb      	str	r3, [r7, #24]

                    /* This ARP entry has expired, remove it from the active ARP list.  Check to make
                       sure it is still active.  */
                    if (arp_entry -> nx_arp_active_list_head)
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d028      	beq.n	800611c <_nx_arp_periodic_update+0xa8>
                    {

                        /* Determine if this is the only ARP entry on the list.  */
                        if (arp_entry == arp_entry -> nx_arp_active_next)
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	6a3a      	ldr	r2, [r7, #32]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d104      	bne.n	80060de <_nx_arp_periodic_update+0x6a>
                        {

                            /* Remove the entry from the list.  */
                            *(arp_entry -> nx_arp_active_list_head) =  NX_NULL;
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	e014      	b.n	8006108 <_nx_arp_periodic_update+0x94>
                        {

                            /* Remove the entry from a list of more than one entry.  */

                            /* Update the list head pointer.  */
                            if (*(arp_entry -> nx_arp_active_list_head) == arp_entry)
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6a3a      	ldr	r2, [r7, #32]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d104      	bne.n	80060f4 <_nx_arp_periodic_update+0x80>
                            {
                                *(arp_entry -> nx_arp_active_list_head) =  arp_entry -> nx_arp_active_next;
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	6a3a      	ldr	r2, [r7, #32]
 80060f0:	6952      	ldr	r2, [r2, #20]
 80060f2:	601a      	str	r2, [r3, #0]
                            }

                            /* Update the links of the adjacent ARP entries.  */
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	695b      	ldr	r3, [r3, #20]
                                arp_entry -> nx_arp_active_previous;
 80060f8:	6a3a      	ldr	r2, [r7, #32]
 80060fa:	6992      	ldr	r2, [r2, #24]
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 80060fc:	619a      	str	r2, [r3, #24]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	699b      	ldr	r3, [r3, #24]
                                arp_entry -> nx_arp_active_next;
 8006102:	6a3a      	ldr	r2, [r7, #32]
 8006104:	6952      	ldr	r2, [r2, #20]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 8006106:	615a      	str	r2, [r3, #20]
                        }

                        /* Decrease the number of active ARP entries.  */
                        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 800610e:	1e5a      	subs	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8c3 26d8 	str.w	r2, [r3, #1752]	; 0x6d8

                        /* Clear the active head pointer.  */
                        arp_entry -> nx_arp_active_list_head =  NX_NULL;
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	2200      	movs	r2, #0
 800611a:	61da      	str	r2, [r3, #28]
                    }

                    /* Determine if this is the only ARP entry on the dynamic list.  */
                    if (arp_entry != arp_entry -> nx_arp_pool_next)
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	6a3a      	ldr	r2, [r7, #32]
 8006122:	429a      	cmp	r2, r3
 8006124:	d02a      	beq.n	800617c <_nx_arp_periodic_update+0x108>
                        /* No. Place the ARP entry at the end of the dynamic ARP pool, which is where new
                           ARP requests are allocated from.  */

                        /* Remove the entry from a list of more than one entry.  */
                        /* Update the links of the adjacent ARP dynamic pool entries.  */
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	68db      	ldr	r3, [r3, #12]
                            arp_entry -> nx_arp_pool_previous;
 800612a:	6a3a      	ldr	r2, [r7, #32]
 800612c:	6912      	ldr	r2, [r2, #16]
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 800612e:	611a      	str	r2, [r3, #16]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	691b      	ldr	r3, [r3, #16]
                            arp_entry -> nx_arp_pool_next;
 8006134:	6a3a      	ldr	r2, [r7, #32]
 8006136:	68d2      	ldr	r2, [r2, #12]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8006138:	60da      	str	r2, [r3, #12]

                        /* Update the list head pointer.  */
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8006140:	6a3a      	ldr	r2, [r7, #32]
 8006142:	429a      	cmp	r2, r3
 8006144:	d104      	bne.n	8006150 <_nx_arp_periodic_update+0xdc>
                        {
                            ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry -> nx_arp_pool_next;
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8c3 26d4 	str.w	r2, [r3, #1748]	; 0x6d4
                        }


                        /* Add ARP entry to the end of the list.  */
                        arp_entry -> nx_arp_pool_next =
                            ip_ptr -> nx_ip_arp_dynamic_list;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 26d4 	ldr.w	r2, [r3, #1748]	; 0x6d4
                        arp_entry -> nx_arp_pool_next =
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	60da      	str	r2, [r3, #12]
                        arp_entry -> nx_arp_pool_previous =
                            (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8006160:	691a      	ldr	r2, [r3, #16]
                        arp_entry -> nx_arp_pool_previous =
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	611a      	str	r2, [r3, #16]
                        ((ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	6a3a      	ldr	r2, [r7, #32]
 8006170:	60da      	str	r2, [r3, #12]
                            arp_entry;
                        (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous =   arp_entry;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	; 0x6d4
 8006178:	6a3a      	ldr	r2, [r7, #32]
 800617a:	611a      	str	r2, [r3, #16]
                    }

                    /* Pickup the queued packets head pointer.  */
                    next_packet_ptr =  arp_entry -> nx_arp_packets_waiting;
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	61fb      	str	r3, [r7, #28]

                    /* Clear the queued packets head pointer.  */
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	2200      	movs	r2, #0
 8006186:	631a      	str	r2, [r3, #48]	; 0x30
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f383 8810 	msr	PRIMASK, r3
}
 8006192:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Loop to remove all queued packets.  */
                    while (next_packet_ptr)
 8006194:	e00f      	b.n	80061b6 <_nx_arp_periodic_update+0x142>
                    {

                        /* Pickup the packet pointer at the head of the queue.  */
                        packet_ptr =  next_packet_ptr;
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	617b      	str	r3, [r7, #20]

                        /* Move to the next packet in the queue.  */
                        next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	61fb      	str	r3, [r7, #28]

                        /* Clear the next packet queue pointer.  */
                        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2200      	movs	r2, #0
 80061a4:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                        /* Release the packet that was queued for the expired ARP entry.  */
                        _nx_packet_transmit_release(packet_ptr);
 80061b0:	6978      	ldr	r0, [r7, #20]
 80061b2:	f003 fa49 	bl	8009648 <_nx_packet_transmit_release>
                    while (next_packet_ptr)
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1ec      	bne.n	8006196 <_nx_arp_periodic_update+0x122>
 80061bc:	e00f      	b.n	80061de <_nx_arp_periodic_update+0x16a>
                {

                    /* We haven't yet had a response to this ARP request so send it again!  */

                    /* Increment the ARP retry counter.  */
                    arp_entry -> nx_arp_retries++;
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	609a      	str	r2, [r3, #8]

                    /* Setup the ARP update rate to the maximum value again.  */
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	220a      	movs	r2, #10
 80061cc:	605a      	str	r2, [r3, #4]

                    /* Send the ARP request out.  */
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	6a19      	ldr	r1, [r3, #32]
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	461a      	mov	r2, r3
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7ff fea9 	bl	8005f30 <_nx_arp_packet_send>
                }
            }
        }

        /* Move to the next ARP entry.  */
        arp_entry =  arp_entry -> nx_arp_pool_next;
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	623b      	str	r3, [r7, #32]
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	3301      	adds	r3, #1
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	; 0x6d8
 80061f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f2:	429a      	cmp	r2, r3
 80061f4:	f4ff af49 	bcc.w	800608a <_nx_arp_periodic_update+0x16>
    }


    /* Reduce the defend timeout of interfaces.  */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80061f8:	2300      	movs	r3, #0
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
 80061fc:	e033      	b.n	8006266 <_nx_arp_periodic_update+0x1f2>
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_FALSE)
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	440b      	add	r3, r1
 800620c:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d021      	beq.n	800625a <_nx_arp_periodic_update+0x1e6>
        {
            continue;
        }

        if (ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout == 0)
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800621a:	4613      	mov	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	440b      	add	r3, r1
 8006224:	f203 7364 	addw	r3, r3, #1892	; 0x764
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d017      	beq.n	800625e <_nx_arp_periodic_update+0x1ea>
        {
            continue;
        }

        ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout--;
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	440b      	add	r3, r1
 800623c:	f203 7364 	addw	r3, r3, #1892	; 0x764
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	1e59      	subs	r1, r3, #1
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	4403      	add	r3, r0
 8006252:	f203 7364 	addw	r3, r3, #1892	; 0x764
 8006256:	6019      	str	r1, [r3, #0]
 8006258:	e002      	b.n	8006260 <_nx_arp_periodic_update+0x1ec>
            continue;
 800625a:	bf00      	nop
 800625c:	e000      	b.n	8006260 <_nx_arp_periodic_update+0x1ec>
            continue;
 800625e:	bf00      	nop
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	3301      	adds	r3, #1
 8006264:	627b      	str	r3, [r7, #36]	; 0x24
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0c8      	beq.n	80061fe <_nx_arp_periodic_update+0x18a>
    }
}
 800626c:	bf00      	nop
 800626e:	bf00      	nop
 8006270:	3728      	adds	r7, #40	; 0x28
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <_nx_arp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_process(NX_IP *ip_ptr)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b088      	sub	sp, #32
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]

NX_PACKET *packet_ptr;


    /* Loop to process all ARP deferred packet requests.  */
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 800627e:	e023      	b.n	80062c8 <_nx_arp_queue_process+0x52>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006280:	f3ef 8310 	mrs	r3, PRIMASK
 8006284:	617b      	str	r3, [r7, #20]
    return(posture);
 8006286:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8006288:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800628a:	b672      	cpsid	i
    return(int_posture);
 800628c:	693b      	ldr	r3, [r7, #16]
    {

        /* Remove the first packet and process it!  */

        /* Disable interrupts.  */
        TX_DISABLE
 800628e:	61fb      	str	r3, [r7, #28]

        /* Pickup the first packet.  */
        packet_ptr =  ip_ptr -> nx_ip_arp_deferred_received_packet_head;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 8006296:	61bb      	str	r3, [r7, #24]

        /* Move the head pointer to the next packet.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	69da      	ldr	r2, [r3, #28]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8c3 26dc 	str.w	r2, [r3, #1756]	; 0x6dc

        /* Check for end of ARP deferred processing queue.  */
        if (ip_ptr -> nx_ip_arp_deferred_received_packet_head == NX_NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d103      	bne.n	80062b4 <_nx_arp_queue_process+0x3e>
        {

            /* Yes, the ARP deferred queue is empty.  Set the tail pointer to NULL.  */
            ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  NX_NULL;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c3 26e0 	str.w	r2, [r3, #1760]	; 0x6e0
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f383 8810 	msr	PRIMASK, r3
}
 80062be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual ARP packet receive function.  */
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 80062c0:	69b9      	ldr	r1, [r7, #24]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff fc0d 	bl	8005ae2 <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	; 0x6dc
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1d6      	bne.n	8006280 <_nx_arp_queue_process+0xa>
    }
}
 80062d2:	bf00      	nop
 80062d4:	bf00      	nop
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <_nx_arp_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_send(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b090      	sub	sp, #64	; 0x40
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
NX_PACKET   *queued_list_head;
NX_PACKET   *packet_ptr;
NX_IP_DRIVER driver_request;

    /* Initialize the queued list head to NULL.  */
    queued_list_head =  NX_NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80062ea:	f3ef 8310 	mrs	r3, PRIMASK
 80062ee:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 80062f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 80062f4:	b672      	cpsid	i
    return(int_posture);
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Determine if this ARP entry has a packet queued up for sending.  */

    /* Disable interrupts before checking.  */
    TX_DISABLE
 80062f8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Look at the ARP packet queue pointer.  */
    if (arp_ptr -> nx_arp_packets_waiting)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <_nx_arp_queue_send+0x32>
    {

        /* Pickup the packet pointer and clear the ARP queue pointer.  */
        queued_list_head =  arp_ptr -> nx_arp_packets_waiting;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	63fb      	str	r3, [r7, #60]	; 0x3c
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2200      	movs	r2, #0
 800630c:	631a      	str	r2, [r3, #48]	; 0x30
 800630e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006310:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	f383 8810 	msr	PRIMASK, r3
}
 8006318:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Are there any packets queued to send?  */
    while (queued_list_head)
 800631a:	e04c      	b.n	80063b6 <_nx_arp_queue_send+0xda>
    {

        /* Pickup the first entry on the list.  */
        packet_ptr =  queued_list_head;
 800631c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631e:	637b      	str	r3, [r7, #52]	; 0x34

        /* Move to the next entry on the ARP packet queue.  */
        queued_list_head =  queued_list_head -> nx_packet_queue_next;
 8006320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the packet's queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8006326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006328:	2200      	movs	r2, #0
 800632a:	61da      	str	r2, [r3, #28]

        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006332:	631a      	str	r2, [r3, #48]	; 0x30

        /* Build the driver request packet.  */
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633e:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 8006344:	2300      	movs	r3, #0
 8006346:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet               =  packet_ptr;
 8006348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634a:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800634c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8006352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	429a      	cmp	r2, r3
 800635e:	d915      	bls.n	800638c <_nx_arp_queue_send+0xb0>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Fragmentation is needed, call the fragment routine if available. */
            if (ip_ptr -> nx_ip_fragment_processing)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <_nx_arp_queue_send+0x9e>
            {

                /* Call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006370:	f107 0208 	add.w	r2, r7, #8
 8006374:	4610      	mov	r0, r2
 8006376:	4798      	blx	r3
 8006378:	e01d      	b.n	80063b6 <_nx_arp_queue_send+0xda>
#endif /* NX_DISABLE_FRAGMENTATION */

#ifndef NX_DISABLE_IP_INFO

                /* Increment the IP send packets dropped count.  */
                ip_ptr -> nx_ip_send_packets_dropped++;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	655a      	str	r2, [r3, #84]	; 0x54
#endif

                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
 8006384:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006386:	f003 f95f 	bl	8009648 <_nx_packet_transmit_release>
 800638a:	e014      	b.n	80063b6 <_nx_arp_queue_send+0xda>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	4413      	add	r3, r2
 80063a0:	f1a3 0214 	sub.w	r2, r3, #20
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	619a      	str	r2, [r3, #24]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_PACKET_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 80063a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ae:	f107 0208 	add.w	r2, r7, #8
 80063b2:	4610      	mov	r0, r2
 80063b4:	4798      	blx	r3
    while (queued_list_head)
 80063b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1af      	bne.n	800631c <_nx_arp_queue_send+0x40>
        }
    }
}
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	3740      	adds	r7, #64	; 0x40
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <_nx_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_icmp_enable(NX_IP *ip_ptr)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ICMP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_ICMP_EVENTS, 0, 0);

    /* Setup the ICMP packet queue processing routine.  */
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a09      	ldr	r2, [pc, #36]	; (80063f8 <_nx_icmp_enable+0x30>)
 80063d4:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c

    /* Setup the ICMP packet receiving routine, thereby enabling ICMP traffic.  */
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a08      	ldr	r2, [pc, #32]	; (80063fc <_nx_icmp_enable+0x34>)
 80063dc:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368

    /* Setup the ICMPv4 packet process routine */
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a07      	ldr	r2, [pc, #28]	; (8006400 <_nx_icmp_enable+0x38>)
 80063e4:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370

    /* Return a successful status!  */
    return(NX_SUCCESS);
 80063e8:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	08006501 	.word	0x08006501
 80063fc:	08006441 	.word	0x08006441
 8006400:	0800655f 	.word	0x0800655f

08006404 <_nx_icmp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* FEATURE_NX_IPV6 not defined */
    if (ip_ptr -> nx_ip_icmpv4_packet_process)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 8006414:	2b00      	cmp	r3, #0
 8006416:	d006      	beq.n	8006426 <_nx_icmp_packet_process+0x22>
    {
        ip_ptr -> nx_ip_icmpv4_packet_process(ip_ptr, packet_ptr);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
        return;
 8006424:	e009      	b.n	800643a <_nx_icmp_packet_process+0x36>
    }

#ifndef NX_DISABLE_ICMP_INFO
    ip_ptr -> nx_ip_icmp_invalid_packets++;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

    _nx_packet_release(packet_ptr);
 8006434:	6838      	ldr	r0, [r7, #0]
 8006436:	f003 f84f 	bl	80094d8 <_nx_packet_release>
}
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <_nx_icmp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP total messages received counter.  */
    ip_ptr -> nx_ip_icmp_total_messages_received++;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_ICMP_HEADER))
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	2b07      	cmp	r3, #7
 800645e:	d80a      	bhi.n	8006476 <_nx_icmp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error.  */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800646e:	6838      	ldr	r0, [r7, #0]
 8006470:	f003 f832 	bl	80094d8 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8006474:	e03c      	b.n	80064f0 <_nx_icmp_packet_receive+0xb0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006476:	f3ef 8305 	mrs	r3, IPSR
 800647a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800647c:	69ba      	ldr	r2, [r7, #24]
        return;
    }
#endif /* NX_ENABLE_ICMP_ADDRESS_CHECK  */

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 800647e:	4b1e      	ldr	r3, [pc, #120]	; (80064f8 <_nx_icmp_packet_receive+0xb8>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4313      	orrs	r3, r2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d106      	bne.n	8006496 <_nx_icmp_packet_receive+0x56>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800648e:	4b1b      	ldr	r3, [pc, #108]	; (80064fc <_nx_icmp_packet_receive+0xbc>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	429a      	cmp	r2, r3
 8006494:	d028      	beq.n	80064e8 <_nx_icmp_packet_receive+0xa8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006496:	f3ef 8310 	mrs	r3, PRIMASK
 800649a:	617b      	str	r3, [r7, #20]
    return(posture);
 800649c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800649e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80064a0:	b672      	cpsid	i
    return(int_posture);
 80064a2:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback. Just place the message at the
           end of the ICMP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 80064a4:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the ICMP message queue.  */
        if (ip_ptr -> nx_ip_icmp_queue_head)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <_nx_icmp_packet_receive+0x7c>
        {

            /* Link the current packet to the list head.  */
            packet_ptr -> nx_packet_queue_next =  ip_ptr -> nx_ip_icmp_queue_head;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 2374 	ldr.w	r2, [r3, #884]	; 0x374
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	61da      	str	r2, [r3, #28]
 80064ba:	e002      	b.n	80064c2 <_nx_icmp_packet_receive+0x82>
        }
        else
        {

            /* Empty queue, add to the head of the ICMP message queue.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2200      	movs	r2, #0
 80064c0:	61da      	str	r2, [r3, #28]
        }

        /* Update the queue head pointer.  */
        ip_ptr -> nx_ip_icmp_queue_head =  packet_ptr;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f383 8810 	msr	PRIMASK, r3
}
 80064d4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the ICMP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ICMP_EVENT, TX_OR);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80064dc:	2200      	movs	r2, #0
 80064de:	2104      	movs	r1, #4
 80064e0:	4618      	mov	r0, r3
 80064e2:	f005 fbe3 	bl	800bcac <_tx_event_flags_set>
 80064e6:	e003      	b.n	80064f0 <_nx_icmp_packet_receive+0xb0>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the ICMP processing directly.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff ff8a 	bl	8006404 <_nx_icmp_packet_process>
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* NX_DISABLE_IPV4 */
}
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000088 	.word	0x20000088
 80064fc:	20014884 	.word	0x20014884

08006500 <_nx_icmp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_queue_process(NX_IP *ip_ptr)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006508:	f3ef 8310 	mrs	r3, PRIMASK
 800650c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800650e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8006510:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006512:	b672      	cpsid	i
    return(int_posture);
 8006514:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 8006516:	61bb      	str	r3, [r7, #24]

    /* Remove the ICMP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_icmp_queue_head;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 800651e:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_icmp_queue_head =  NX_NULL;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f383 8810 	msr	PRIMASK, r3
}
 8006532:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire ICMP message queue and process packets
       one by one.  */
    while (queue_head)
 8006534:	e00b      	b.n	800654e <_nx_icmp_queue_process+0x4e>
    {

        /* Pickup the first queued ICMP message and remove it from the
           ICMP queue.  */
        packet_ptr =  queue_head;
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2200      	movs	r2, #0
 8006544:	61da      	str	r2, [r3, #28]

        /* Process the packet.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 8006546:	6979      	ldr	r1, [r7, #20]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff ff5b 	bl	8006404 <_nx_icmp_packet_process>
    while (queue_head)
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1f0      	bne.n	8006536 <_nx_icmp_queue_process+0x36>
    }
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop
 8006558:	3720      	adds	r7, #32
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <_nx_icmpv4_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b088      	sub	sp, #32
 8006562:	af02      	add	r7, sp, #8
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
USHORT            checksum;
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT              compute_checksum = 1;
 8006568:	2301      	movs	r3, #1
 800656a:	617b      	str	r3, [r7, #20]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	613b      	str	r3, [r7, #16]
#ifdef NX_DISABLE_ICMPV4_RX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_RX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_RX_CHECKSUM)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <_nx_icmpv4_packet_process+0x26>
    {
        compute_checksum = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	617b      	str	r3, [r7, #20]
    {
        compute_checksum = 1;
    }
#endif
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d023      	beq.n	80065d2 <_nx_icmpv4_packet_process+0x74>
#endif /* defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Calculate the ICMP message checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
                                            (UINT)packet_ptr -> nx_packet_length,
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 800658e:	2300      	movs	r3, #0
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	2300      	movs	r3, #0
 8006594:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006598:	6838      	ldr	r0, [r7, #0]
 800659a:	f000 fb14 	bl	8006bc6 <_nx_ip_checksum_compute>
 800659e:	4603      	mov	r3, r0
 80065a0:	81fb      	strh	r3, [r7, #14]
                                            /* ICMPv4 checksum does not include
                                               src/dest addresses */
                                            NX_NULL, NX_NULL);

        checksum =  ((USHORT) ~checksum) & NX_LOWER_16_MASK;
 80065a2:	89fb      	ldrh	r3, [r7, #14]
 80065a4:	43db      	mvns	r3, r3
 80065a6:	81fb      	strh	r3, [r7, #14]

        /* Determine if the checksum is valid.  */
        if (checksum)
 80065a8:	89fb      	ldrh	r3, [r7, #14]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d011      	beq.n	80065d2 <_nx_icmpv4_packet_process+0x74>
        {

#ifndef NX_DISABLE_ICMP_INFO

            /* Increment the ICMP invalid packet error.  */
            ip_ptr -> nx_ip_icmp_invalid_packets++;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

            /* Increment the ICMP checksum error count.  */
            ip_ptr -> nx_ip_icmp_checksum_errors++;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
#endif

            /* Nope, the checksum is invalid.  Toss this ICMP packet out.  */
            _nx_packet_release(packet_ptr);
 80065ca:	6838      	ldr	r0, [r7, #0]
 80065cc:	f002 ff84 	bl	80094d8 <_nx_packet_release>
            return;
 80065d0:	e01b      	b.n	800660a <_nx_icmpv4_packet_process+0xac>
        }
    }

    /* Determine the message type and call the appropriate handler.  */
    if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REPLY_TYPE)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d104      	bne.n	80065e4 <_nx_icmpv4_packet_process+0x86>
    {
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f817 	bl	8006610 <_nx_icmpv4_process_echo_reply>
 80065e2:	e012      	b.n	800660a <_nx_icmpv4_packet_process+0xac>
    }
    else if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REQUEST_TYPE)
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d104      	bne.n	80065f6 <_nx_icmpv4_packet_process+0x98>
    {
        _nx_icmpv4_process_echo_request(ip_ptr, packet_ptr);
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f8cc 	bl	800678c <_nx_icmpv4_process_echo_request>
 80065f4:	e009      	b.n	800660a <_nx_icmpv4_packet_process+0xac>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP unhandled message count.  */
        ip_ptr -> nx_ip_icmp_unhandled_messages++;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);
#endif /* TX_ENABLE_EVENT_TRACE  */

        /* Unhandled ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
 8006604:	6838      	ldr	r0, [r7, #0]
 8006606:	f002 ff67 	bl	80094d8 <_nx_packet_release>
    }
}
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <_nx_icmpv4_process_echo_reply>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_reply(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b090      	sub	sp, #64	; 0x40
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    echo_ptr =  (NX_ICMPV4_ECHO *)packet_ptr -> nx_packet_prepend_ptr;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	637b      	str	r3, [r7, #52]	; 0x34

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP responses received count.  */
    ip_ptr -> nx_ip_ping_responses_received++;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#endif

    /* Pickup sequence number.  */
    sequence_num = echo_ptr -> nx_icmpv4_echo_sequence_num;
 800662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006630:	88db      	ldrh	r3, [r3, #6]
 8006632:	867b      	strh	r3, [r7, #50]	; 0x32

    /* Convert to host byte order, if little endian taget. */
    NX_CHANGE_USHORT_ENDIAN(sequence_num);
 8006634:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006636:	ba5b      	rev16	r3, r3
 8006638:	867b      	strh	r3, [r7, #50]	; 0x32
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800663a:	f3ef 8310 	mrs	r3, PRIMASK
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8006642:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006644:	b672      	cpsid	i
    return(int_posture);
 8006646:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts.  */
    TX_DISABLE
 8006648:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup the head pointer and the suspended count.  */
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006658:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800665a:	4b4b      	ldr	r3, [pc, #300]	; (8006788 <_nx_icmpv4_process_echo_reply+0x178>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3301      	adds	r3, #1
 8006660:	4a49      	ldr	r2, [pc, #292]	; (8006788 <_nx_icmpv4_process_echo_reply+0x178>)
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	f383 8810 	msr	PRIMASK, r3
}
 800666e:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Search through the suspended threads waiting for a ECHO (ping) response
       in an attempt to find a matching sequence number.  */
    while (suspended--)
 8006670:	e05e      	b.n	8006730 <_nx_icmpv4_process_echo_reply+0x120>
    {

        /* Determine if the sequence number matches a suspended thread.  */
        if ((USHORT)(thread_ptr ->  tx_thread_suspend_info) == sequence_num)
 8006672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006676:	b29b      	uxth	r3, r3
 8006678:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800667a:	429a      	cmp	r2, r3
 800667c:	d155      	bne.n	800672a <_nx_icmpv4_process_echo_reply+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800667e:	f3ef 8310 	mrs	r3, PRIMASK
 8006682:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006684:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006686:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006688:	b672      	cpsid	i
    return(int_posture);
 800668a:	69bb      	ldr	r3, [r7, #24]
        {

            /* Disable interrupts.  */
            TX_DISABLE
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800668e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006694:	429a      	cmp	r2, r3
 8006696:	d104      	bne.n	80066a2 <_nx_icmpv4_process_echo_reply+0x92>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  NX_NULL;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 80066a0:	e014      	b.n	80066cc <_nx_icmpv4_process_echo_reply+0xbc>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d104      	bne.n	80066b8 <_nx_icmpv4_process_echo_reply+0xa8>
                {
                    ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80066ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
                }

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80066b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 80066bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066be:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80066c0:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80066c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 80066c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066c8:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80066ca:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066d2:	1e5a      	subs	r2, r3, #1
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80066da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066dc:	2200      	movs	r2, #0
 80066de:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80066e0:	4b29      	ldr	r3, [pc, #164]	; (8006788 <_nx_icmpv4_process_echo_reply+0x178>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3301      	adds	r3, #1
 80066e6:	4a28      	ldr	r2, [pc, #160]	; (8006788 <_nx_icmpv4_process_echo_reply+0x178>)
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f383 8810 	msr	PRIMASK, r3
}
 80066f4:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to remove the ICMP header that is still in front of
               the response message.  */
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	f1a3 0208 	sub.w	r2, r3, #8
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f103 0208 	add.w	r2, r3, #8
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	609a      	str	r2, [r3, #8]

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800670e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	601a      	str	r2, [r3, #0]

            /* Clear packet pointer so we don't try to release it below.  */
            packet_ptr =  NX_NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	603b      	str	r3, [r7, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800671a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671c:	2200      	movs	r2, #0
 800671e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8006722:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006724:	f006 fe88 	bl	800d438 <_tx_thread_system_resume>

            /* Get out of the loop.  */
            break;
 8006728:	e007      	b.n	800673a <_nx_icmpv4_process_echo_reply+0x12a>
        }
        else
        {
            /* Just move to the next suspended thread.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800672a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (suspended--)
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	1e5a      	subs	r2, r3, #1
 8006734:	63ba      	str	r2, [r7, #56]	; 0x38
 8006736:	2b00      	cmp	r3, #0
 8006738:	d19b      	bne.n	8006672 <_nx_icmpv4_process_echo_reply+0x62>
        }
    }

    /* Determine if no match was made and we just have to release the packet.  */
    if (packet_ptr)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d009      	beq.n	8006754 <_nx_icmpv4_process_echo_reply+0x144>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif /* NX_DISABLE_ICMP_INFO */

        /* Yes, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800674e:	6838      	ldr	r0, [r7, #0]
 8006750:	f002 fec2 	bl	80094d8 <_nx_packet_release>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006754:	f3ef 8310 	mrs	r3, PRIMASK
 8006758:	60fb      	str	r3, [r7, #12]
    return(posture);
 800675a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800675c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800675e:	b672      	cpsid	i
    return(int_posture);
 8006760:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release preemption disable.  */
    _tx_thread_preempt_disable--;
 8006764:	4b08      	ldr	r3, [pc, #32]	; (8006788 <_nx_icmpv4_process_echo_reply+0x178>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3b01      	subs	r3, #1
 800676a:	4a07      	ldr	r2, [pc, #28]	; (8006788 <_nx_icmpv4_process_echo_reply+0x178>)
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f383 8810 	msr	PRIMASK, r3
}
 8006778:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800677a:	f006 fe23 	bl	800d3c4 <_tx_thread_system_preempt_check>
}
 800677e:	bf00      	nop
 8006780:	3740      	adds	r7, #64	; 0x40
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	2001491c 	.word	0x2001491c

0800678c <_nx_icmpv4_process_echo_request>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_request(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08c      	sub	sp, #48	; 0x30
 8006790:	af04      	add	r7, sp, #16
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
ULONG             checksum;
ULONG             old_m;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
ULONG             compute_checksum = 1;
 8006796:	2301      	movs	r3, #1
 8006798:	61fb      	str	r3, [r7, #28]
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
NX_IPV4_HEADER   *ipv4_header;
ULONG             next_hop_address = NX_NULL;
 800679a:	2300      	movs	r3, #0
 800679c:	60bb      	str	r3, [r7, #8]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	61bb      	str	r3, [r7, #24]

    /* Pickup the return IP address.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a8:	617b      	str	r3, [r7, #20]

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings received count.  */
    ip_ptr -> nx_ip_pings_received++;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#endif

    /* Change the type to Echo Reply and send back the message to the caller.  */
    header_ptr -> nx_icmpv4_header_type = NX_ICMP_ECHO_REPLY_TYPE;
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <_nx_icmpv4_process_echo_request+0x44>
    {
        compute_checksum = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	61fb      	str	r3, [r7, #28]
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d02c      	beq.n	8006830 <_nx_icmpv4_process_echo_request+0xa4>
           m'  - new value of a 16-bit field
           HC' = ~(C + (-m) + m')
           = ~(~HC + ~m + m') */

        /* Endian swapping logic.  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	885b      	ldrh	r3, [r3, #2]
 80067da:	ba5b      	rev16	r3, r3
 80067dc:	b29a      	uxth	r2, r3
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	805a      	strh	r2, [r3, #2]

        /* Get the old checksum (HC) in header. */
        checksum = header_ptr -> nx_icmpv4_header_checksum;
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	885b      	ldrh	r3, [r3, #2]
 80067e6:	613b      	str	r3, [r7, #16]

        /* Get the old type(m). */
        old_m = (ULONG)(NX_ICMP_ECHO_REQUEST_TYPE << 8);
 80067e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80067ec:	60fb      	str	r3, [r7, #12]

        /* Update the checksum, get the new checksum(HC'). */
        /* The m' is value of echo reply type. It is zero so can be ignored. */
        checksum = ((~checksum) & 0xFFFF) + ((~old_m) & 0xFFFF);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	43db      	mvns	r3, r3
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	43db      	mvns	r3, r3
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	4413      	add	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	0c1a      	lsrs	r2, r3, #16
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	b29b      	uxth	r3, r3
 8006806:	4413      	add	r3, r2
 8006808:	613b      	str	r3, [r7, #16]

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	0c1a      	lsrs	r2, r3, #16
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	b29b      	uxth	r3, r3
 8006812:	4413      	add	r3, r2
 8006814:	613b      	str	r3, [r7, #16]

        /* Store the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = (~checksum & NX_LOWER_16_MASK);
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	b29b      	uxth	r3, r3
 800681a:	43db      	mvns	r3, r3
 800681c:	b29a      	uxth	r2, r3
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	805a      	strh	r2, [r3, #2]

        /* If NX_LITTLE_ENDIAN is defined, the header need to be swapped back
           for output (network byte order).  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	885b      	ldrh	r3, [r3, #2]
 8006826:	ba5b      	rev16	r3, r3
 8006828:	b29a      	uxth	r2, r3
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	805a      	strh	r2, [r3, #2]
 800682e:	e008      	b.n	8006842 <_nx_icmpv4_process_echo_request+0xb6>
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    else
    {

        /* Clear the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = 0;
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	2200      	movs	r2, #0
 8006834:	805a      	strh	r2, [r3, #2]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
    }
#endif

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	68d9      	ldr	r1, [r3, #12]
                      &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 800684c:	f107 0308 	add.w	r3, r7, #8
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 fc1f 	bl	8008094 <_nx_ip_route_find>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ipv4_header -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings responded to count.  */
    ip_ptr -> nx_ip_pings_responded_to++;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif

    /* Send the ICMP packet to the IP component.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, packet_ptr, ipv4_header -> nx_ip_header_source_ip,
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	9303      	str	r3, [sp, #12]
 800686c:	2300      	movs	r3, #0
 800686e:	9302      	str	r3, [sp, #8]
 8006870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	2380      	movs	r3, #128	; 0x80
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	2300      	movs	r3, #0
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f001 fb92 	bl	8007fa8 <_nx_ip_packet_send>
                       NX_IP_NORMAL, NX_IP_TIME_TO_LIVE, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);
}
 8006884:	bf00      	nop
 8006886:	3720      	adds	r7, #32
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <_nx_icmpv4_send_error_message>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv4_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b096      	sub	sp, #88	; 0x58
 8006890:	af04      	add	r7, sp, #16
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]

NX_PACKET       *pkt_ptr;
USHORT           checksum;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT             compute_checksum = 1;
 800689a:	2301      	movs	r3, #1
 800689c:	647b      	str	r3, [r7, #68]	; 0x44
NX_ICMPV4_ERROR *icmpv4_error;
NX_IPV4_HEADER  *ip_header_ptr;
UINT             ip_header_size;
UINT             bytes_to_copy, i;
ULONG            src_ip;
ULONG            next_hop_address = NX_NULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv4 error message if ICMPv4 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 8113 	beq.w	8006ad4 <_nx_icmpv4_send_error_message+0x248>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(offending_packet -> nx_packet_ip_header);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b2:	633b      	str	r3, [r7, #48]	; 0x30
    src_ip = ip_header_ptr -> nx_ip_header_source_ip;
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Get the incoming interface. */
    if_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	62bb      	str	r3, [r7, #40]	; 0x28

    /* An ICMP error message MUST NOT be sent as the result of receiving:
       RFC1122, Section3.2.2, Page39.  */

    /* A datagram destined to an IP broadcast or IP multicast address.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c8:	f000 8106 	beq.w	8006ad8 <_nx_icmpv4_send_error_message+0x24c>
        ((ip_header_ptr -> nx_ip_header_destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 80068d4:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80068d8:	f000 80fe 	beq.w	8006ad8 <_nx_icmpv4_send_error_message+0x24c>
    {
        return;
    }

    /* A datagram sent as a link-layer broadcast.  */
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	401a      	ands	r2, r3
         if_ptr -> nx_interface_ip_network) &&
 80068e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e8:	69db      	ldr	r3, [r3, #28]
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d10b      	bne.n	8006906 <_nx_icmpv4_send_error_message+0x7a>
        ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	691a      	ldr	r2, [r3, #16]
 80068f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	43db      	mvns	r3, r3
 80068f8:	401a      	ands	r2, r3
         ~(if_ptr -> nx_interface_ip_network_mask)))
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	43db      	mvns	r3, r3
         if_ptr -> nx_interface_ip_network) &&
 8006900:	429a      	cmp	r2, r3
 8006902:	f000 80eb 	beq.w	8006adc <_nx_icmpv4_send_error_message+0x250>
    {
        return;
    }

    /* A non-initial fragment.  */
    if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_OFFSET_MASK)
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800690e:	2b00      	cmp	r3, #0
 8006910:	f040 80e6 	bne.w	8006ae0 <_nx_icmpv4_send_error_message+0x254>
    }

    /* A datagram whose source address does not define a single host,
       e.g., a zero address, a loopback address, a broadcast address,
       a multicast address, or a Class E address.  */
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 80e3 	beq.w	8006ae4 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	68db      	ldr	r3, [r3, #12]
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 8006922:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8006926:	d304      	bcc.n	8006932 <_nx_icmpv4_send_error_message+0xa6>
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	68db      	ldr	r3, [r3, #12]
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 800692c:	2b00      	cmp	r3, #0
 800692e:	f280 80d9 	bge.w	8006ae4 <_nx_icmpv4_send_error_message+0x258>
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	68db      	ldr	r3, [r3, #12]
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	f000 80d3 	beq.w	8006ae4 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 8006946:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800694a:	f000 80cb 	beq.w	8006ae4 <_nx_icmpv4_send_error_message+0x258>
    {
        return;
    }

    /* Allocate a packet to build the ICMPv4 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv4_ICMP_PACKET, NX_NO_WAIT))
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
 8006954:	f107 0118 	add.w	r1, r7, #24
 8006958:	2300      	movs	r3, #0
 800695a:	2224      	movs	r2, #36	; 0x24
 800695c:	f002 fa5a 	bl	8008e14 <_nx_packet_allocate>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	f040 80c0 	bne.w	8006ae8 <_nx_icmpv4_send_error_message+0x25c>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv4. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	2204      	movs	r2, #4
 800696c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Size of the message is ICMPv4 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	0e1b      	lsrs	r3, r3, #24
 800697a:	b2da      	uxtb	r2, r3
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	701a      	strb	r2, [r3, #0]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	0c1b      	lsrs	r3, r3, #16
 8006984:	b2da      	uxtb	r2, r3
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	705a      	strb	r2, [r3, #1]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	2200      	movs	r2, #0
 800698e:	805a      	strh	r2, [r3, #2]
    icmpv4_error -> nx_icmpv4_error_pointer = (error_pointer << 24);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	061a      	lsls	r2, r3, #24
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	605a      	str	r2, [r3, #4]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	ba1a      	rev	r2, r3
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	605a      	str	r2, [r3, #4]

    /* IP Header + 64 bits (64 bits = 2 ULONGs) of Data Datagram.  */
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 80069a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	0e1b      	lsrs	r3, r3, #24
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	623b      	str	r3, [r7, #32]
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	3302      	adds	r3, #2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the packet length and pointers.  The length will be increased to include
       the IPv4 header in the IP send function.  The Prepend function will be similarly
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ba:	3208      	adds	r2, #8
 80069bc:	625a      	str	r2, [r3, #36]	; 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	6899      	ldr	r1, [r3, #8]
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	440a      	add	r2, r1
 80069ca:	60da      	str	r2, [r3, #12]

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d0:	63bb      	str	r3, [r7, #56]	; 0x38

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv4_error, sizeof(NX_ICMPV4_ERROR));
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	3308      	adds	r3, #8
 80069d6:	637b      	str	r3, [r7, #52]	; 0x34

    /* Endian swap the incoming IPv4 normal header to network byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 80069d8:	2300      	movs	r3, #0
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069dc:	e00a      	b.n	80069f4 <_nx_icmpv4_send_error_message+0x168>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	ba1a      	rev	r2, r3
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	601a      	str	r2, [r3, #0]
        src_packet++;
 80069e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ea:	3304      	adds	r3, #4
 80069ec:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 80069ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f0:	3301      	adds	r3, #1
 80069f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d9f1      	bls.n	80069de <_nx_icmpv4_send_error_message+0x152>
    }

    /* Reset the packet pointer to the received packet IP header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fe:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Copy the data from the received packet to the ICMPv4 error packet. */
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 8006a00:	e00a      	b.n	8006a18 <_nx_icmpv4_send_error_message+0x18c>
    {

        *dest_packet++ = *src_packet++;
 8006a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a04:	1d13      	adds	r3, r2, #4
 8006a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0a:	1d19      	adds	r1, r3, #4
 8006a0c:	6379      	str	r1, [r7, #52]	; 0x34
 8006a0e:	6812      	ldr	r2, [r2, #0]
 8006a10:	601a      	str	r2, [r3, #0]
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 8006a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a14:	3b04      	subs	r3, #4
 8006a16:	643b      	str	r3, [r7, #64]	; 0x40
 8006a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1f1      	bne.n	8006a02 <_nx_icmpv4_send_error_message+0x176>
    }

    /* Get the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a22:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Endian swap the IPv4 normal header back to host byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8006a24:	2300      	movs	r3, #0
 8006a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a28:	e00a      	b.n	8006a40 <_nx_icmpv4_send_error_message+0x1b4>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	ba1a      	rev	r2, r3
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	601a      	str	r2, [r3, #0]
        src_packet++;
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	3304      	adds	r3, #4
 8006a38:	63bb      	str	r3, [r7, #56]	; 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 8006a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d9f1      	bls.n	8006a2a <_nx_icmpv4_send_error_message+0x19e>
    }

    /* Use the corresponding interface address as sender's address. */
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006a4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, src_ip,
                      &pkt_ptr -> nx_packet_address.nx_packet_interface_ptr,
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	f103 0230 	add.w	r2, r3, #48	; 0x30
    _nx_ip_route_find(ip_ptr, src_ip,
 8006a54:	f107 0314 	add.w	r3, r7, #20
 8006a58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f001 fb1a 	bl	8008094 <_nx_ip_route_find>
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (pkt_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <_nx_icmpv4_send_error_message+0x1e6>
    {
        compute_checksum = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	647b      	str	r3, [r7, #68]	; 0x44
    {
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 8006a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d017      	beq.n	8006aa8 <_nx_icmpv4_send_error_message+0x21c>
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Compute the checksum of the ICMP packet.  */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 8006a78:	69b8      	ldr	r0, [r7, #24]
                                           (UINT)pkt_ptr -> nx_packet_length,
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 8006a7e:	2300      	movs	r3, #0
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	2300      	movs	r3, #0
 8006a84:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006a88:	f000 f89d 	bl	8006bc6 <_nx_ip_checksum_compute>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	83fb      	strh	r3, [r7, #30]
                                           /* ICMPV4 checksum does not include
                                              src/dest addresses */
                                           NX_NULL, NX_NULL);

        icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = (USHORT)(~checksum);
 8006a90:	8bfb      	ldrh	r3, [r7, #30]
 8006a92:	43db      	mvns	r3, r3
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	805a      	strh	r2, [r3, #2]

        /* Swap to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	885b      	ldrh	r3, [r3, #2]
 8006a9e:	ba5b      	rev16	r3, r3
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	805a      	strh	r2, [r3, #2]
 8006aa6:	e005      	b.n	8006ab4 <_nx_icmpv4_send_error_message+0x228>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ab2:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Send the ICMP packet to the IP component. The time to live is set to 255.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, pkt_ptr, src_ip,
 8006ab4:	69b9      	ldr	r1, [r7, #24]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	9303      	str	r3, [sp, #12]
 8006aba:	2300      	movs	r3, #0
 8006abc:	9302      	str	r3, [sp, #8]
 8006abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ac2:	9301      	str	r3, [sp, #4]
 8006ac4:	23ff      	movs	r3, #255	; 0xff
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f001 fa6b 	bl	8007fa8 <_nx_ip_packet_send>
                       NX_IP_NORMAL, 255, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);

    return;
 8006ad2:	e00a      	b.n	8006aea <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006ad4:	bf00      	nop
 8006ad6:	e008      	b.n	8006aea <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006ad8:	bf00      	nop
 8006ada:	e006      	b.n	8006aea <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006adc:	bf00      	nop
 8006ade:	e004      	b.n	8006aea <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006ae0:	bf00      	nop
 8006ae2:	e002      	b.n	8006aea <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006ae4:	bf00      	nop
 8006ae6:	e000      	b.n	8006aea <_nx_icmpv4_send_error_message+0x25e>
        return;
 8006ae8:	bf00      	nop
}
 8006aea:	3748      	adds	r7, #72	; 0x48
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <_nx_igmp_multicast_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_igmp_multicast_check(NX_IP *ip_ptr, ULONG group, NX_INTERFACE *nx_interface)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]

UINT i;

    /* Check for "all hosts" group.  We always assume all hosts membership.  */
    /*lint -e{835} -e{845} suppress operating on zero. */
    if (group ==  NX_ALL_HOSTS_ADDRESS)
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4a18      	ldr	r2, [pc, #96]	; (8006b60 <_nx_igmp_multicast_check+0x70>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d101      	bne.n	8006b08 <_nx_igmp_multicast_check+0x18>
    {
        return(NX_TRUE);
 8006b04:	2301      	movs	r3, #1
 8006b06:	e025      	b.n	8006b54 <_nx_igmp_multicast_check+0x64>
    }

    /* Loop through the IP multicast join list to find the matching group that is being
       responded to by another host on this same network.  */

    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 8006b08:	2300      	movs	r3, #0
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	e01e      	b.n	8006b4c <_nx_igmp_multicast_check+0x5c>
    {

        /* Check for a match.  */
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8006b0e:	68f9      	ldr	r1, [r7, #12]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d10e      	bne.n	8006b46 <_nx_igmp_multicast_check+0x56>
            (nx_interface == ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_interface_list))
 8006b28:	68f9      	ldr	r1, [r7, #12]
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	440b      	add	r3, r1
 8006b36:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8006b3a:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d101      	bne.n	8006b46 <_nx_igmp_multicast_check+0x56>
        {
            return(NX_TRUE);
 8006b42:	2301      	movs	r3, #1
 8006b44:	e006      	b.n	8006b54 <_nx_igmp_multicast_check+0x64>
    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2b06      	cmp	r3, #6
 8006b50:	d9dd      	bls.n	8006b0e <_nx_igmp_multicast_check+0x1e>
        }
    }

    /* Otherwise, we have searched the entire list, return false.  */
    return(NX_FALSE);
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	e0000001 	.word	0xe0000001

08006b64 <_nx_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]

#ifndef NX_DISABLE_IPV4
TX_INTERRUPT_SAVE_AREA

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006b76:	f04f 31ff 	mov.w	r1, #4294967295
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f005 fc2e 	bl	800c3dc <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006b80:	f3ef 8310 	mrs	r3, PRIMASK
 8006b84:	617b      	str	r3, [r7, #20]
    return(posture);
 8006b86:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8006b88:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006b8a:	b672      	cpsid	i
    return(int_posture);
 8006b8c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8006b8e:	61fb      	str	r3, [r7, #28]

    /* Pickup the IP address and the network mask.  This service assumes
       the operation on the primary interface. */
    *ip_address =    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8d3 2734 	ldr.w	r2, [r3, #1844]	; 0x734
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8d3 2738 	ldr.w	r2, [r3, #1848]	; 0x738
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	f383 8810 	msr	PRIMASK, r3
}
 8006bae:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f005 fe88 	bl	800c8cc <_tx_mutex_put>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_GET, ip_ptr, ip_ptr -> nx_ip_interface[0].nx_interface_ip_address,
                            ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Return completion status.  */
    return(NX_SUCCESS);
 8006bbc:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <_nx_ip_checksum_compute>:
/*                                                                        */
/**************************************************************************/
USHORT  _nx_ip_checksum_compute(NX_PACKET *packet_ptr, ULONG protocol,
                                UINT data_length, ULONG *src_ip_addr,
                                ULONG *dest_ip_addr)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b08e      	sub	sp, #56	; 0x38
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	607a      	str	r2, [r7, #4]
 8006bd2:	603b      	str	r3, [r7, #0]

ULONG      checksum = 0;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	637b      	str	r3, [r7, #52]	; 0x34
UINT       i;
#endif

    /* For computing TCP/UDP/ICMPv6, we need to include the pseudo header.
       The ICMPv4 checksum does not cover the pseudo header. */
    if ((protocol == NX_PROTOCOL_UDP) ||
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b11      	cmp	r3, #17
 8006bdc:	d002      	beq.n	8006be4 <_nx_ip_checksum_compute+0x1e>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b06      	cmp	r3, #6
 8006be2:	d141      	bne.n	8006c68 <_nx_ip_checksum_compute+0xa2>
        (protocol == NX_PROTOCOL_TCP))
    {

    USHORT *src_ip_short, *dest_ip_short;

        checksum = protocol;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	637b      	str	r3, [r7, #52]	; 0x34

        /* The addresses must not be null.  */
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <_nx_ip_checksum_compute+0x2e>
 8006bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d104      	bne.n	8006bfe <_nx_ip_checksum_compute+0x38>
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf8:	f006 fb64 	bl	800d2c4 <_tx_thread_sleep>
 8006bfc:	e7fa      	b.n	8006bf4 <_nx_ip_checksum_compute+0x2e>

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        src_ip_short = (USHORT *)src_ip_addr;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	623b      	str	r3, [r7, #32]

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        dest_ip_short = (USHORT *)dest_ip_addr;
 8006c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c04:	61fb      	str	r3, [r7, #28]


        checksum += src_ip_short[0];
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0e:	4413      	add	r3, r2
 8006c10:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += src_ip_short[1];
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	3302      	adds	r3, #2
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1c:	4413      	add	r3, r2
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[0];
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c28:	4413      	add	r3, r2
 8006c2a:	637b      	str	r3, [r7, #52]	; 0x34
        checksum += dest_ip_short[1];
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	3302      	adds	r3, #2
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c36:	4413      	add	r3, r2
 8006c38:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif /* FEATURE_NX_IPV6 */

        /* Take care of data length */
        checksum += data_length;
 8006c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4413      	add	r3, r2
 8006c40:	637b      	str	r3, [r7, #52]	; 0x34

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c44:	0c1a      	lsrs	r2, r3, #16
 8006c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c50:	0c1a      	lsrs	r2, r3, #16
 8006c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	4413      	add	r3, r2
 8006c58:	637b      	str	r3, [r7, #52]	; 0x34

        /* Convert to network byte order. */
        tmp = (USHORT)checksum;
 8006c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5c:	837b      	strh	r3, [r7, #26]
        NX_CHANGE_USHORT_ENDIAN(tmp);
 8006c5e:	8b7b      	ldrh	r3, [r7, #26]
 8006c60:	ba5b      	rev16	r3, r3
 8006c62:	837b      	strh	r3, [r7, #26]
        checksum = tmp;
 8006c64:	8b7b      	ldrh	r3, [r7, #26]
 8006c66:	637b      	str	r3, [r7, #52]	; 0x34

    /* Now we need to go through the payloads */

    /* Setup the pointer to the start of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    long_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize the current packet to the input packet pointer.  */
    current_packet =  packet_ptr;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop the packet. */
    while (current_packet)
 8006c72:	e058      	b.n	8006d26 <_nx_ip_checksum_compute+0x160>
    {

        /* Calculate current packet size. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 8006c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	617b      	str	r3, [r7, #20]

        /* Calculate the end address in this packet. */
        if (data_length > (UINT)packet_size)
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d905      	bls.n	8006c94 <_nx_ip_checksum_compute+0xce>
        {

            /*lint -e{927} -e{923} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = ((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3);
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f023 0303 	bic.w	r3, r3, #3
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
 8006c92:	e006      	b.n	8006ca2 <_nx_ip_checksum_compute+0xdc>
        }
        else
        {
#endif /* NX_DISABLE_PACKET_CHAIN */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr + data_length - 3;
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	3b03      	subs	r3, #3
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Set the start address in this packet. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        long_ptr = (ULONG *)current_packet -> nx_packet_prepend_ptr;
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	62fb      	str	r3, [r7, #44]	; 0x2c

        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ALIGN_TYPE)long_ptr < end_ptr)
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d91c      	bls.n	8006cea <_nx_ip_checksum_compute+0x124>
        {

            /* Calculate the data_length. */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            data_length -= (UINT)(((end_ptr + 3) & (ALIGN_TYPE)(~3llu)) - (ALIGN_TYPE)long_ptr);
 8006cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	3303      	adds	r3, #3
 8006cb6:	f023 0303 	bic.w	r3, r3, #3
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	607b      	str	r3, [r7, #4]

            /* Loop to calculate the packet's checksum.  */
            /*lint -e{946} suppress pointer subtraction, since it is necessary. */
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8006cc2:	e00e      	b.n	8006ce2 <_nx_ip_checksum_compute+0x11c>
            {
                checksum += (*long_ptr & NX_LOWER_16_MASK);
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ccc:	4413      	add	r3, r2
 8006cce:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	0c1b      	lsrs	r3, r3, #16
 8006cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cd8:	4413      	add	r3, r2
 8006cda:	637b      	str	r3, [r7, #52]	; 0x34
                long_ptr++;
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	3304      	adds	r3, #4
 8006ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d8ec      	bhi.n	8006cc4 <_nx_ip_checksum_compute+0xfe>
            }
        }
#ifndef NX_DISABLE_PACKET_CHAIN

        /* Determine if we are at the end of the current packet.  */
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d018      	beq.n	8006d22 <_nx_ip_checksum_compute+0x15c>
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d014      	beq.n	8006d22 <_nx_ip_checksum_compute+0x15c>
        {

            /* Is append_ptr two bytes aligned but not four bytes aligned? */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            if ((((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & 3) == 2)
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d10a      	bne.n	8006d1a <_nx_ip_checksum_compute+0x154>
            {

                /* Yes it is. Process the last two bytes in chaining packets. */
                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                short_ptr = (USHORT *)long_ptr;
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	633b      	str	r3, [r7, #48]	; 0x30

                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                checksum += *short_ptr;
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d10:	4413      	add	r3, r2
 8006d12:	637b      	str	r3, [r7, #52]	; 0x34
                data_length -= 2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3b02      	subs	r3, #2
 8006d18:	607b      	str	r3, [r7, #4]
            }

            /* We have crossed the packet boundary.  Move to the next packet
               structure.  */
            current_packet =  current_packet -> nx_packet_next;
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d20:	e001      	b.n	8006d26 <_nx_ip_checksum_compute+0x160>
        }
        else
        {

            /* End the loop.  */
            current_packet = NX_NULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	62bb      	str	r3, [r7, #40]	; 0x28
    while (current_packet)
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1a3      	bne.n	8006c74 <_nx_ip_checksum_compute+0xae>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if there is only one byte left. */
    if (data_length)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d01f      	beq.n	8006d72 <_nx_ip_checksum_compute+0x1ac>
    {

        /* Set the short_ptr. */
        short_ptr = (USHORT *)(long_ptr);
 8006d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d34:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the data length.  */
        if (data_length == 1)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d104      	bne.n	8006d46 <_nx_ip_checksum_compute+0x180>
        {
            *((UCHAR *)short_ptr + 1) = 0;
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	3301      	adds	r3, #1
 8006d40:	2200      	movs	r2, #0
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	e00f      	b.n	8006d66 <_nx_ip_checksum_compute+0x1a0>
        }
        else if (data_length == 3)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d10c      	bne.n	8006d66 <_nx_ip_checksum_compute+0x1a0>
        {
            checksum += *short_ptr;
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	461a      	mov	r2, r3
 8006d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d54:	4413      	add	r3, r2
 8006d56:	637b      	str	r3, [r7, #52]	; 0x34
            short_ptr++;
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	3302      	adds	r3, #2
 8006d5c:	633b      	str	r3, [r7, #48]	; 0x30

            *((UCHAR *)short_ptr + 1) = 0;
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	3301      	adds	r3, #1
 8006d62:	2200      	movs	r2, #0
 8006d64:	701a      	strb	r2, [r3, #0]
        }

        checksum += *short_ptr;
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6e:	4413      	add	r3, r2
 8006d70:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Fold a 4-byte value into a two byte value */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d74:	0c1a      	lsrs	r2, r3, #16
 8006d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	4413      	add	r3, r2
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Do it again in case previous operation generates an overflow */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 8006d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d80:	0c1a      	lsrs	r2, r3, #16
 8006d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	4413      	add	r3, r2
 8006d88:	637b      	str	r3, [r7, #52]	; 0x34

    /* Convert to host byte order. */
    tmp = (USHORT)checksum;
 8006d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8c:	837b      	strh	r3, [r7, #26]
    NX_CHANGE_USHORT_ENDIAN(tmp);
 8006d8e:	8b7b      	ldrh	r3, [r7, #26]
 8006d90:	ba5b      	rev16	r3, r3
 8006d92:	837b      	strh	r3, [r7, #26]

    /* Return the computed checksum.  */
    return(tmp);
 8006d94:	8b7b      	ldrh	r3, [r7, #26]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3738      	adds	r7, #56	; 0x38
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <_nx_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                    NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                    VOID *memory_ptr, ULONG memory_size, UINT priority)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b092      	sub	sp, #72	; 0x48
 8006da4:	af06      	add	r7, sp, #24
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	603b      	str	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_IP     *tail_ptr;
UINT       i;
UINT       old_threshold = 0;
 8006dae:	2300      	movs	r3, #0
 8006db0:	613b      	str	r3, [r7, #16]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);
#endif /* NX_DISABLE_IPV4 */

    /* Reference the version ID and option words to ensure they are linked in.  */
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8006db2:	4b8a      	ldr	r3, [pc, #552]	; (8006fdc <_nx_ip_create+0x23c>)
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	4b8a      	ldr	r3, [pc, #552]	; (8006fe0 <_nx_ip_create+0x240>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	4b89      	ldr	r3, [pc, #548]	; (8006fe4 <_nx_ip_create+0x244>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8006dc2:	4b89      	ldr	r3, [pc, #548]	; (8006fe8 <_nx_ip_create+0x248>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8006dc6:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 8006dc8:	4b88      	ldr	r3, [pc, #544]	; (8006fec <_nx_ip_create+0x24c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	4a88      	ldr	r2, [pc, #544]	; (8006ff0 <_nx_ip_create+0x250>)
 8006dd0:	7812      	ldrb	r2, [r2, #0]
 8006dd2:	4313      	orrs	r3, r2
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <_nx_ip_create+0x3c>
    {

        /* We should never get here!  */
        return(NX_NOT_IMPLEMENTED);
 8006dd8:	234a      	movs	r3, #74	; 0x4a
 8006dda:	e0fb      	b.n	8006fd4 <_nx_ip_create+0x234>
    }

    /* Initialize the IP control block to zero.  */
    memset((void *)ip_ptr, 0, sizeof(NX_IP));
 8006ddc:	f44f 62f9 	mov.w	r2, #1992	; 0x7c8
 8006de0:	2100      	movs	r1, #0
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f007 ff6a 	bl	800ecbc <memset>

    /* Configure the primary interface. */
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724

#ifndef NX_DISABLE_IPV4
    /* Save the IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address =   ip_address;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	f8c3 2734 	str.w	r2, [r3, #1844]	; 0x734

    /* Save the network mask.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	f8c3 2738 	str.w	r2, [r3, #1848]	; 0x738

    /* Derive the network bits of this IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	401a      	ands	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_arp_defend_timeout = 0;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
#endif /* !NX_DISABLE_IPV4  */

    /* Setup the link driver address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e18:	f8c3 275c 	str.w	r2, [r3, #1884]	; 0x75c

    /* Set the device interface name to "PRI". */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4a75      	ldr	r2, [pc, #468]	; (8006ff4 <_nx_ip_create+0x254>)
 8006e20:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720

    /* Set index of each interface. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8006e24:	2300      	movs	r3, #0
 8006e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e28:	e00f      	b.n	8006e4a <_nx_ip_create+0xaa>
    {
        ip_ptr -> nx_ip_interface[i].nx_interface_index = (UCHAR)i;
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	b2d8      	uxtb	r0, r3
 8006e2e:	68f9      	ldr	r1, [r7, #12]
 8006e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e32:	4613      	mov	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	440b      	add	r3, r1
 8006e3c:	f203 7327 	addw	r3, r3, #1831	; 0x727
 8006e40:	4602      	mov	r2, r0
 8006e42:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8006e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e46:	3301      	adds	r3, #1
 8006e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d9ec      	bls.n	8006e2a <_nx_ip_create+0x8a>

#ifndef NX_DISABLE_LOOPBACK_INTERFACE

    /* Set the Loopback interface name. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4a69      	ldr	r2, [pc, #420]	; (8006ff8 <_nx_ip_create+0x258>)
 8006e54:	f8c3 2770 	str.w	r2, [r3, #1904]	; 0x770


    /* Mark the loopback interface as valid. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774

#ifndef NX_DISABLE_IPV4
    /* Set the loopback interface address. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4a66      	ldr	r2, [pc, #408]	; (8006ffc <_nx_ip_create+0x25c>)
 8006e64:	f8c3 2784 	str.w	r2, [r3, #1924]	; 0x784
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8006e6e:	f8c3 2788 	str.w	r2, [r3, #1928]	; 0x788
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f04f 42fe 	mov.w	r2, #2130706432	; 0x7f000000
 8006e78:	f8c3 278c 	str.w	r2, [r3, #1932]	; 0x78c
#endif /* !NX_DISABLE_IPV4  */

    /* Loopback interface is a special case. Therefore no dedicated link driver needed. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_driver_entry = NX_NULL;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c3 27ac 	str.w	r2, [r3, #1964]	; 0x7ac

    /* Loopback interface does not need IP/MAC address mapping. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_address_mapping_needed = 0;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2775 	strb.w	r2, [r3, #1909]	; 0x775

    /* There is actually no MTU limit for the loopback interface. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e92:	f8c3 2794 	str.w	r2, [r3, #1940]	; 0x794

    /* Mark the loopback interface as LINK UP */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_up = 1;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776

    /* Set all the link capability. */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_capability_flag = (NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM |
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006ea4:	f8c3 27b0 	str.w	r2, [r3, #1968]	; 0x7b0
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#endif /* !NX_DISABLE_LOOPBACK_INTERFACE */

    /* Save the supplied IP name.  */
    ip_ptr -> nx_ip_name =  name;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	605a      	str	r2, [r3, #4]

    /* Set the initial IP packet ID.  */
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    /* Setup the default packet pool for this IP instance.  */
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eba:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    /* Setup the auxiliary packet pool for this IP instance. By default it pointers to default pool. */
    ip_ptr -> nx_ip_auxiliary_packet_pool = default_pool;
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Create the internal IP protection mutex.  */
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	68b9      	ldr	r1, [r7, #8]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f005 fa2d 	bl	800c328 <_tx_mutex_create>

    /* Create the internal IP event flag object.  */
    tx_event_flags_create(&(ip_ptr -> nx_ip_events), name);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f004 fdb0 	bl	800ba3c <_tx_event_flags_create>

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 8006edc:	f006 f812 	bl	800cf04 <_tx_thread_identify>
 8006ee0:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Disable preemption temporarily.  */
    if (current_thread)
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d006      	beq.n	8006ef6 <_nx_ip_create+0x156>
    {
        tx_thread_preemption_change(current_thread, priority, &old_threshold);
 8006ee8:	f107 0310 	add.w	r3, r7, #16
 8006eec:	461a      	mov	r2, r3
 8006eee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ef2:	f006 f861 	bl	800cfb8 <_tx_thread_preemption_change>
    }

    /* Create the internal IP thread for handling more processing intensive
       duties.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_thread_create(&(ip_ptr -> nx_ip_thread), name, _nx_ip_thread_entry, (ULONG)(ALIGN_TYPE)(ip_ptr),
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	2301      	movs	r3, #1
 8006f00:	9305      	str	r3, [sp, #20]
 8006f02:	2301      	movs	r3, #1
 8006f04:	9304      	str	r3, [sp, #16]
 8006f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f08:	9303      	str	r3, [sp, #12]
 8006f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f0c:	9302      	str	r3, [sp, #8]
 8006f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	4613      	mov	r3, r2
 8006f18:	4a39      	ldr	r2, [pc, #228]	; (8007000 <_nx_ip_create+0x260>)
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	f005 fefc 	bl	800cd18 <_tx_thread_create>

    NX_THREAD_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_thread), ip_ptr)

    /* Create the periodic timer for this IP instance.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_periodic_timer), name,
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	9202      	str	r2, [sp, #8]
 8006f2c:	2264      	movs	r2, #100	; 0x64
 8006f2e:	9201      	str	r2, [sp, #4]
 8006f30:	2264      	movs	r2, #100	; 0x64
 8006f32:	9200      	str	r2, [sp, #0]
 8006f34:	4a33      	ldr	r2, [pc, #204]	; (8007004 <_nx_ip_create+0x264>)
 8006f36:	68b9      	ldr	r1, [r7, #8]
 8006f38:	f006 fd24 	bl	800d984 <_tx_timer_create>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_CREATE, ip_ptr, ip_address, network_mask, default_pool, NX_TRACE_IP_EVENTS, 0, 0);

#ifndef NX_DISABLE_IPV4
    /* Install IPv4 packet receive processing function pointer */
    ip_ptr -> nx_ipv4_packet_receive = _nx_ipv4_packet_receive;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4a32      	ldr	r2, [pc, #200]	; (8007008 <_nx_ip_create+0x268>)
 8006f40:	f8c3 27c0 	str.w	r2, [r3, #1984]	; 0x7c0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006f44:	f3ef 8310 	mrs	r3, PRIMASK
 8006f48:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006f4a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006f4c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006f4e:	b672      	cpsid	i
    return(int_posture);
 8006f50:	69bb      	ldr	r3, [r7, #24]
#endif

    /* Otherwise, the IP initialization was successful.  Place the
       IP control block on the list of created IP instances.  */
    TX_DISABLE
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the IP ID field in the IP control block.  */
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4a2d      	ldr	r2, [pc, #180]	; (800700c <_nx_ip_create+0x26c>)
 8006f58:	601a      	str	r2, [r3, #0]

    /* Place the new IP control block on the list of created IPs.  First,
       check for an empty list.  */
    if (_nx_ip_created_ptr)
 8006f5a:	4b2d      	ldr	r3, [pc, #180]	; (8007010 <_nx_ip_create+0x270>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d017      	beq.n	8006f92 <_nx_ip_create+0x1f2>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_ip_created_ptr -> nx_ip_created_previous;
 8006f62:	4b2b      	ldr	r3, [pc, #172]	; (8007010 <_nx_ip_create+0x270>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8006f6a:	623b      	str	r3, [r7, #32]

        /* Place the new IP control block in the list.  */
        _nx_ip_created_ptr -> nx_ip_created_previous =  ip_ptr;
 8006f6c:	4b28      	ldr	r3, [pc, #160]	; (8007010 <_nx_ip_create+0x270>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        tail_ptr -> nx_ip_created_next =  ip_ptr;
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710

        /* Setup this IP's created links.  */
        ip_ptr -> nx_ip_created_previous =  tail_ptr;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a3a      	ldr	r2, [r7, #32]
 8006f82:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
        ip_ptr -> nx_ip_created_next =      _nx_ip_created_ptr;
 8006f86:	4b22      	ldr	r3, [pc, #136]	; (8007010 <_nx_ip_create+0x270>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
 8006f90:	e00a      	b.n	8006fa8 <_nx_ip_create+0x208>
    }
    else
    {

        /* The created IP list is empty.  Add IP control block to empty list.  */
        _nx_ip_created_ptr =                ip_ptr;
 8006f92:	4a1f      	ldr	r2, [pc, #124]	; (8007010 <_nx_ip_create+0x270>)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6013      	str	r3, [r2, #0]
        ip_ptr -> nx_ip_created_next =      ip_ptr;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
    }

    /* Increment the created IP counter.  */
    _nx_ip_created_count++;
 8006fa8:	4b1a      	ldr	r3, [pc, #104]	; (8007014 <_nx_ip_create+0x274>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3301      	adds	r3, #1
 8006fae:	4a19      	ldr	r2, [pc, #100]	; (8007014 <_nx_ip_create+0x274>)
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f383 8810 	msr	PRIMASK, r3
}
 8006fbc:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Restore preemption.  */
    if (current_thread)
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d006      	beq.n	8006fd2 <_nx_ip_create+0x232>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized in previous tx_thread_preemption_change call. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f107 0210 	add.w	r2, r7, #16
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fce:	f005 fff3 	bl	800cfb8 <_tx_thread_preemption_change>
    }

    /* Return success to the caller.  */
    return(NX_SUCCESS);
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3730      	adds	r7, #48	; 0x30
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20014838 	.word	0x20014838
 8006fe0:	2001483c 	.word	0x2001483c
 8006fe4:	20014840 	.word	0x20014840
 8006fe8:	20014844 	.word	0x20014844
 8006fec:	20014848 	.word	0x20014848
 8006ff0:	20000020 	.word	0x20000020
 8006ff4:	0800f94c 	.word	0x0800f94c
 8006ff8:	0800f950 	.word	0x0800f950
 8006ffc:	7f000001 	.word	0x7f000001
 8007000:	08008391 	.word	0x08008391
 8007004:	08008071 	.word	0x08008071
 8007008:	08008951 	.word	0x08008951
 800700c:	49502020 	.word	0x49502020
 8007010:	20014828 	.word	0x20014828
 8007014:	2001482c 	.word	0x2001482c

08007018 <_nx_ip_deferred_link_status_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_deferred_link_status_process(NX_IP *ip_ptr)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08c      	sub	sp, #48	; 0x30
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]

UINT         i;
NX_IP_DRIVER driver_request;
ULONG        link_up;

    if (ip_ptr -> nx_ip_link_status_change_callback == NX_NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 8007026:	2b00      	cmp	r3, #0
 8007028:	d052      	beq.n	80070d0 <_nx_ip_deferred_link_status_process+0xb8>

        /* Callback function is not set. */
        return;
    }

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800702a:	2300      	movs	r3, #0
 800702c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800702e:	e04b      	b.n	80070c8 <_nx_ip_deferred_link_status_process+0xb0>
    {
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8007030:	6879      	ldr	r1, [r7, #4]
 8007032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	011b      	lsls	r3, r3, #4
 800703c:	440b      	add	r3, r1
 800703e:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d03c      	beq.n	80070c2 <_nx_ip_deferred_link_status_process+0xaa>
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change))
 8007048:	6879      	ldr	r1, [r7, #4]
 800704a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800704c:	4613      	mov	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	011b      	lsls	r3, r3, #4
 8007054:	440b      	add	r3, r1
 8007056:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 800705a:	781b      	ldrb	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800705c:	2b00      	cmp	r3, #0
 800705e:	d030      	beq.n	80070c2 <_nx_ip_deferred_link_status_process+0xaa>
        {

            /* Reset the flag. */
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007064:	4613      	mov	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	440b      	add	r3, r1
 800706e:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 8007072:	2200      	movs	r2, #0
 8007074:	701a      	strb	r2, [r3, #0]

            driver_request.nx_ip_driver_ptr       = ip_ptr;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 800707a:	230a      	movs	r3, #10
 800707c:	60fb      	str	r3, [r7, #12]
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 800707e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007080:	4613      	mov	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	4413      	add	r3, r2
 8007090:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_return_ptr = &link_up;
 8007092:	f107 0308 	add.w	r3, r7, #8
 8007096:	623b      	str	r3, [r7, #32]

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	440b      	add	r3, r1
 80070a6:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f107 020c 	add.w	r2, r7, #12
 80070b0:	4610      	mov	r0, r2
 80070b2:	4798      	blx	r3

            /* Invoke the callback function. */
            /*lint -e{644} suppress variable might not be initialized, since "link_up" was initialized in nx_interface_link_driver_entry. */
            ip_ptr -> nx_ip_link_status_change_callback(ip_ptr, i, link_up);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	3301      	adds	r3, #1
 80070c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0b0      	beq.n	8007030 <_nx_ip_deferred_link_status_process+0x18>
 80070ce:	e000      	b.n	80070d2 <_nx_ip_deferred_link_status_process+0xba>
        return;
 80070d0:	bf00      	nop
        }
    }
}
 80070d2:	3730      	adds	r7, #48	; 0x30
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <_nx_ip_dispatch_process>:
/*                                            packet,                     */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT _nx_ip_dispatch_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UINT protocol)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
#endif /* FEATURE_NX_IPV6 */
#endif /* NX_IPSEC_ENABLE */


    /* Initialize local variables. */
    drop_packet = 0;
 80070e4:	2300      	movs	r3, #0
 80070e6:	617b      	str	r3, [r7, #20]
    next_option_offset = (UINT)sizeof(NX_IPV6_HEADER);
    incoming_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
#endif /* FEATURE_NX_IPV6 */

    /* Parse all options in the packet till we're done or an error is encountered. */
    while (!drop_packet)
 80070e8:	e09a      	b.n	8007220 <_nx_ip_dispatch_process+0x148>

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* Set a local variable for convenience. */
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
#endif /* defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE) */
        switch (protocol)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b32      	cmp	r3, #50	; 0x32
 80070ee:	d005      	beq.n	80070fc <_nx_ip_dispatch_process+0x24>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b33      	cmp	r3, #51	; 0x33
 80070f4:	d104      	bne.n	8007100 <_nx_ip_dispatch_process+0x28>
                /* Continue processing the packet if status = NX_IPSEC_PKT_CONT */
            }
#else /* NX_IPSEC_ENABLE */

            /* Drop this packet if IPsec module is not present. */
            drop_packet = 1;
 80070f6:	2301      	movs	r3, #1
 80070f8:	617b      	str	r3, [r7, #20]
#endif /* NX_IPSEC_ENABLE */

            break;
 80070fa:	e07d      	b.n	80071f8 <_nx_ip_dispatch_process+0x120>
            }
            break;

#else /* NX_IPSEC_ENABLE */
            /* Drop this packet if IPsec module is not present. */
            return(1);
 80070fc:	2301      	movs	r3, #1
 80070fe:	e094      	b.n	800722a <_nx_ip_dispatch_process+0x152>
                    return(0);
                }
            }
#endif /* defined(NX_ENABLE_IP_RAW_PACKET_ALL_STACK) && defined(NX_ENABLE_IP_RAW_PACKET_FILTER) */

            if (protocol == NX_PROTOCOL_TCP)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b06      	cmp	r3, #6
 8007104:	d10f      	bne.n	8007126 <_nx_ip_dispatch_process+0x4e>
                     (incoming_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)))
                {
#endif /* FEATURE_NX_IPV6 */

                    /* Check that the host is enabled for TCP. */
                    if (ip_ptr -> nx_ip_tcp_packet_receive)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800710c:	2b00      	cmp	r3, #0
 800710e:	d007      	beq.n	8007120 <_nx_ip_dispatch_process+0x48>
                    {

                        /* Dispatch the packet to the TCP packet handler. */
                        (ip_ptr -> nx_ip_tcp_packet_receive)(ip_ptr, packet_ptr);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007116:	68b9      	ldr	r1, [r7, #8]
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	4798      	blx	r3

                        /* No need to free the packet as it is consumed by TCP packet receive.  */
                        return(0);
 800711c:	2300      	movs	r3, #0
 800711e:	e084      	b.n	800722a <_nx_ip_dispatch_process+0x152>
#ifdef FEATURE_NX_IPV6
                }
#endif /* FEATURE_NX_IPV6 */

                /* TCP is not enabled.  Drop the packet. */
                drop_packet = 1;
 8007120:	2301      	movs	r3, #1
 8007122:	617b      	str	r3, [r7, #20]
#endif /* NX_DISABLE_IP_INFO */


                drop_packet = 1;
            }
            break;
 8007124:	e067      	b.n	80071f6 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800712c:	2b04      	cmp	r3, #4
 800712e:	d112      	bne.n	8007156 <_nx_ip_dispatch_process+0x7e>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d10f      	bne.n	8007156 <_nx_ip_dispatch_process+0x7e>
                if (ip_ptr -> nx_ip_icmp_packet_receive != NX_NULL)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 800713c:	2b00      	cmp	r3, #0
 800713e:	d007      	beq.n	8007150 <_nx_ip_dispatch_process+0x78>
                    ip_ptr -> nx_ip_icmp_packet_receive(ip_ptr, packet_ptr);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 8007146:	68b9      	ldr	r1, [r7, #8]
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	4798      	blx	r3
                    return(0);
 800714c:	2300      	movs	r3, #0
 800714e:	e06c      	b.n	800722a <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8007150:	2301      	movs	r3, #1
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	e04f      	b.n	80071f6 <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800715c:	2b04      	cmp	r3, #4
 800715e:	d112      	bne.n	8007186 <_nx_ip_dispatch_process+0xae>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b02      	cmp	r3, #2
 8007164:	d10f      	bne.n	8007186 <_nx_ip_dispatch_process+0xae>
                if (ip_ptr -> nx_ip_igmp_packet_receive != NX_NULL)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 800716c:	2b00      	cmp	r3, #0
 800716e:	d007      	beq.n	8007180 <_nx_ip_dispatch_process+0xa8>
                    ip_ptr -> nx_ip_igmp_packet_receive(ip_ptr, packet_ptr);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8007176:	68b9      	ldr	r1, [r7, #8]
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	4798      	blx	r3
                    return(0);
 800717c:	2300      	movs	r3, #0
 800717e:	e054      	b.n	800722a <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 8007180:	2301      	movs	r3, #1
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	e037      	b.n	80071f6 <_nx_ip_dispatch_process+0x11e>
            else if (protocol == NX_PROTOCOL_UDP)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b11      	cmp	r3, #17
 800718a:	d10f      	bne.n	80071ac <_nx_ip_dispatch_process+0xd4>
                    if (ip_ptr -> nx_ip_udp_packet_receive)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007192:	2b00      	cmp	r3, #0
 8007194:	d007      	beq.n	80071a6 <_nx_ip_dispatch_process+0xce>
                        (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	4798      	blx	r3
                        return(0);
 80071a2:	2300      	movs	r3, #0
 80071a4:	e041      	b.n	800722a <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 80071a6:	2301      	movs	r3, #1
 80071a8:	617b      	str	r3, [r7, #20]
            break;
 80071aa:	e024      	b.n	80071f6 <_nx_ip_dispatch_process+0x11e>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00c      	beq.n	80071d0 <_nx_ip_dispatch_process+0xf8>
                        if ((ip_ptr -> nx_ip_raw_ip_processing)(ip_ptr, protocol << 16, packet_ptr) == NX_SUCCESS)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	0411      	lsls	r1, r2, #16
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	4798      	blx	r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <_nx_ip_dispatch_process+0xf8>
                            return(0);
 80071cc:	2300      	movs	r3, #0
 80071ce:	e02c      	b.n	800722a <_nx_ip_dispatch_process+0x152>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d105      	bne.n	80071e6 <_nx_ip_dispatch_process+0x10e>
                    NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PROTOCOL_UNREACH_CODE);
 80071da:	2300      	movs	r3, #0
 80071dc:	4a15      	ldr	r2, [pc, #84]	; (8007234 <_nx_ip_dispatch_process+0x15c>)
 80071de:	68b9      	ldr	r1, [r7, #8]
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f7ff fb53 	bl	800688c <_nx_icmpv4_send_error_message>
                ip_ptr -> nx_ip_unknown_protocols_received++;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	641a      	str	r2, [r3, #64]	; 0x40
                drop_packet = 1;
 80071f0:	2301      	movs	r3, #1
 80071f2:	617b      	str	r3, [r7, #20]
            break;
 80071f4:	e7ff      	b.n	80071f6 <_nx_ip_dispatch_process+0x11e>
 80071f6:	bf00      	nop
        }


        /* If the previous header is processed without errors, move on to the next optional
           header. */
        if (!drop_packet)
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d010      	beq.n	8007220 <_nx_ip_dispatch_process+0x148>
        else
        {
#ifndef NX_DISABLE_IP_INFO

            /* Decrement the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered--;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	1e5a      	subs	r2, r3, #1
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	621a      	str	r2, [r3, #32]

            /* Decrement the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	1ad2      	subs	r2, r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	625a      	str	r2, [r3, #36]	; 0x24

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721a:	1c5a      	adds	r2, r3, #1
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	64da      	str	r2, [r3, #76]	; 0x4c
    while (!drop_packet)
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2b00      	cmp	r3, #0
 8007224:	f43f af61 	beq.w	80070ea <_nx_ip_dispatch_process+0x12>
#endif /* NX_DISABLE_IP_INFO */
        }
    }

    return(drop_packet);
 8007228:	697b      	ldr	r3, [r7, #20]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	03020000 	.word	0x03020000

08007238 <_nx_ip_driver_deferred_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_deferred_processing(NX_IP *ip_ptr)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]

    /* Set event flags to wake the IP helper thread, which will in turn
       call the driver with the NX_LINK_DEFERRED_PROCESSING command.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_DRIVER_DEFERRED_EVENT, TX_OR);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007246:	2200      	movs	r2, #0
 8007248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800724c:	4618      	mov	r0, r3
 800724e:	f004 fd2d 	bl	800bcac <_tx_event_flags_set>
}
 8007252:	bf00      	nop
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <_nx_ip_driver_direct_command>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_driver_direct_command(NX_IP *ip_ptr, UINT command, ULONG *return_value_ptr)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b084      	sub	sp, #16
 800725e:	af00      	add	r7, sp, #0
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	607a      	str	r2, [r7, #4]

    return(_nx_ip_driver_interface_direct_command(ip_ptr, command, 0, return_value_ptr));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	68b9      	ldr	r1, [r7, #8]
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 f805 	bl	800727c <_nx_ip_driver_interface_direct_command>
 8007272:	4603      	mov	r3, r0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <_nx_ip_driver_interface_direct_command>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_driver_interface_direct_command(NX_IP *ip_ptr, UINT command, UINT interface_index, ULONG *return_value_ptr)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08c      	sub	sp, #48	; 0x30
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_DRIVER_DIRECT_COMMAND, ip_ptr, command, 0, 0, NX_TRACE_IP_EVENTS, &trace_event, &trace_timestamp);

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007290:	f04f 31ff 	mov.w	r1, #4294967295
 8007294:	4618      	mov	r0, r3
 8007296:	f005 f8a1 	bl	800c3dc <_tx_mutex_get>

    /* Build the driver request structure.  */
    driver_request.nx_ip_driver_ptr =         ip_ptr;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_command =     command;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_return_ptr =  return_value_ptr;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	627b      	str	r3, [r7, #36]	; 0x24
    driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	011b      	lsls	r3, r3, #4
 80072b0:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 80072ba:	68f9      	ldr	r1, [r7, #12]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	4613      	mov	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	440b      	add	r3, r1
 80072c8:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f107 0210 	add.w	r2, r7, #16
 80072d2:	4610      	mov	r0, r2
 80072d4:	4798      	blx	r3

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80072dc:	4618      	mov	r0, r3
 80072de:	f005 faf5 	bl	800c8cc <_tx_mutex_put>
    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_IP_DRIVER_DIRECT_COMMAND, 0, 0, driver_request.nx_ip_driver_status, 0);

    /* Return status to the caller.  */
    /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
    return(driver_request.nx_ip_driver_status);
 80072e2:	697b      	ldr	r3, [r7, #20]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3730      	adds	r7, #48	; 0x30
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <_nx_ip_driver_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip, ULONG fragment, ULONG next_hop_address)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b09e      	sub	sp, #120	; 0x78
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_IP_DRIVER driver_request;
UINT         index;
ULONG        network_mask;
ULONG        network;
UCHAR        loopback = NX_FALSE;
 80072fa:	2300      	movs	r3, #0
 80072fc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	633b      	str	r3, [r7, #48]	; 0x30
    driver_request.nx_ip_driver_packet =                packet_ptr;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	62bb      	str	r3, [r7, #40]	; 0x28
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730c:	637b      	str	r3, [r7, #52]	; 0x34
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 800730e:	2300      	movs	r3, #0
 8007310:	61bb      	str	r3, [r7, #24]

    /* Determine if physical mapping is needed by the link driver.  */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_address_mapping_needed)
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007316:	795b      	ldrb	r3, [r3, #5]
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 8174 	beq.w	8007606 <_nx_ip_driver_packet_send+0x31a>
    {

        /* Get the network and network mask.*/
        network_mask = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network_mask;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	65fb      	str	r3, [r7, #92]	; 0x5c
        network = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Determine if an IP limited or directed broadcast is requested.  */
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007334:	d00d      	beq.n	8007352 <_nx_ip_driver_packet_send+0x66>
            (((destination_ip & network_mask) == network) &&
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800733a:	4013      	ands	r3, r2
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800733c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800733e:	429a      	cmp	r2, r3
 8007340:	d110      	bne.n	8007364 <_nx_ip_driver_packet_send+0x78>
             ((destination_ip & ~network_mask) == ~network_mask)))
 8007342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007344:	43da      	mvns	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	401a      	ands	r2, r3
 800734a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800734c:	43db      	mvns	r3, r3
            (((destination_ip & network_mask) == network) &&
 800734e:	429a      	cmp	r2, r3
 8007350:	d108      	bne.n	8007364 <_nx_ip_driver_packet_send+0x78>
        {

            /* Build the driver request.  */
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 8007352:	2304      	movs	r3, #4
 8007354:	61bb      	str	r3, [r7, #24]
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8007356:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800735a:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 800735c:	f04f 33ff 	mov.w	r3, #4294967295
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
 8007362:	e162      	b.n	800762a <_nx_ip_driver_packet_send+0x33e>
        }
        /* Determine if we have a loopback address.  */
        else if (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	429a      	cmp	r2, r3
 800736e:	d105      	bne.n	800737c <_nx_ip_driver_packet_send+0x90>
        {
            loopback = NX_TRUE;
 8007370:	2301      	movs	r3, #1
 8007372:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 8007376:	2300      	movs	r3, #0
 8007378:	637b      	str	r3, [r7, #52]	; 0x34
 800737a:	e156      	b.n	800762a <_nx_ip_driver_packet_send+0x33e>
        }
        /* Determine if we have a class D multicast address.  */
        else if ((destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007382:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8007386:	d133      	bne.n	80073f0 <_nx_ip_driver_packet_send+0x104>

            /* Yes, we have a class D multicast address.  Derive the physical mapping from
               the class D address.  */

            /* Determine if the group address has been joined in this IP instance.  */
            index =  0;
 8007388:	2300      	movs	r3, #0
 800738a:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 800738c:	e00f      	b.n	80073ae <_nx_ip_driver_packet_send+0xc2>
            {

                /* Determine if the destination address matches the requested address.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_join_list == destination_ip)
 800738e:	68f9      	ldr	r1, [r7, #12]
 8007390:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	440b      	add	r3, r1
 800739c:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d006      	beq.n	80073b6 <_nx_ip_driver_packet_send+0xca>
                    /* Yes, break the loop!  */
                    break;
                }

                /* Increment the join list index.  */
                index++;
 80073a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073aa:	3301      	adds	r3, #1
 80073ac:	677b      	str	r3, [r7, #116]	; 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 80073ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073b0:	2b06      	cmp	r3, #6
 80073b2:	d9ec      	bls.n	800738e <_nx_ip_driver_packet_send+0xa2>
 80073b4:	e000      	b.n	80073b8 <_nx_ip_driver_packet_send+0xcc>
                    break;
 80073b6:	bf00      	nop
            }

            /* Determine if the group was joined by this IP instance.  */
            if (index < NX_MAX_MULTICAST_GROUPS)
 80073b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ba:	2b06      	cmp	r3, #6
 80073bc:	d80e      	bhi.n	80073dc <_nx_ip_driver_packet_send+0xf0>
            {

                /* Determine if the group has loopback enabled.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_loopback_enable)
 80073be:	68f9      	ldr	r1, [r7, #12]
 80073c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80073c2:	4613      	mov	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	440b      	add	r3, r1
 80073cc:	f503 7335 	add.w	r3, r3, #724	; 0x2d4
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <_nx_ip_driver_packet_send+0xf0>
                {
                    loopback = NX_TRUE;
 80073d6:	2301      	movs	r3, #1
 80073d8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                }
            }

            /* Build the driver request. Derive the physical mapping from
               the class D address.  */
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 80073dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073e0:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80073e8:	f043 43bc 	orr.w	r3, r3, #1577058304	; 0x5e000000
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
 80073ee:	e11c      	b.n	800762a <_nx_ip_driver_packet_send+0x33e>

            NX_PARAMETER_NOT_USED(fragment);
            /* Look into the ARP Routing Table to derive the physical address.  */

            /* If we get here, the packet destination is a unicast address.  */
            destination_ip = next_hop_address;
 80073f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073f4:	607b      	str	r3, [r7, #4]

            /* Calculate the hash index for the destination IP address.  */
            index =  (UINT)((destination_ip + (destination_ip >> 8)) & NX_ARP_TABLE_MASK);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	0a1a      	lsrs	r2, r3, #8
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4413      	add	r3, r2
 80073fe:	f003 031f 	and.w	r3, r3, #31
 8007402:	677b      	str	r3, [r7, #116]	; 0x74

            /* Determine if there is an entry for this IP address.  */
            arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007408:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 800740c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007410:	66fb      	str	r3, [r7, #108]	; 0x6c

            /* Loop to look for an ARP match.  */
            while (arp_ptr)
 8007412:	e013      	b.n	800743c <_nx_ip_driver_packet_send+0x150>
            {

                /* Determine if this arp entry matches the destination IP address.  */
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 8007414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	429a      	cmp	r2, r3
 800741c:	d012      	beq.n	8007444 <_nx_ip_driver_packet_send+0x158>
                    /* Yes, we found a match.  Get out of the loop!  */
                    break;
                }

                /* Move to the next active ARP entry.  */
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 800741e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Determine if we are at the end of the ARP list.  */
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007428:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 800742c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007430:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007432:	429a      	cmp	r2, r3
 8007434:	d102      	bne.n	800743c <_nx_ip_driver_packet_send+0x150>
                {
                    /* Clear the ARP pointer.  */
                    arp_ptr =  NX_NULL;
 8007436:	2300      	movs	r3, #0
 8007438:	66fb      	str	r3, [r7, #108]	; 0x6c
                    break;
 800743a:	e004      	b.n	8007446 <_nx_ip_driver_packet_send+0x15a>
            while (arp_ptr)
 800743c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e8      	bne.n	8007414 <_nx_ip_driver_packet_send+0x128>
 8007442:	e000      	b.n	8007446 <_nx_ip_driver_packet_send+0x15a>
                    break;
 8007444:	bf00      	nop
                }
            }

            /* Determine if we actually found a matching and effective ARP entry.  */
            if ((arp_ptr) && (arp_ptr -> nx_arp_physical_address_msw | arp_ptr -> nx_arp_physical_address_lsw))
 8007446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d022      	beq.n	8007492 <_nx_ip_driver_packet_send+0x1a6>
 800744c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800744e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007454:	4313      	orrs	r3, r2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d01b      	beq.n	8007492 <_nx_ip_driver_packet_send+0x1a6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800745a:	f3ef 8310 	mrs	r3, PRIMASK
 800745e:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8007460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8007462:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8007464:	b672      	cpsid	i
    return(int_posture);
 8007466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
            {

                /* Disable interrupts temporarily.  */
                TX_DISABLE
 8007468:	657b      	str	r3, [r7, #84]	; 0x54

                /* Yes, we have a physical mapping.  Copy the physical address into the driver
                   request structure.  */
                driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 800746a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	623b      	str	r3, [r7, #32]
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 8007470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007474:	627b      	str	r3, [r7, #36]	; 0x24

                /* Move this ARP entry to the head of the list.  */
                ip_ptr -> nx_ip_arp_table[index] =  arp_ptr;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800747a:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 800747e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007486:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800748a:	f383 8810 	msr	PRIMASK, r3
}
 800748e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE
 8007490:	e0cb      	b.n	800762a <_nx_ip_driver_packet_send+0x33e>
            }
            else
            {

                /* Determine if fragmentation is needed before queue the packet on the ARP waiting queue.  */
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	429a      	cmp	r2, r3
 800749e:	d910      	bls.n	80074c2 <_nx_ip_driver_packet_send+0x1d6>
                {

#ifndef NX_DISABLE_FRAGMENTATION
                    /* Check the DF bit flag.  */
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d002      	beq.n	80074b0 <_nx_ip_driver_packet_send+0x1c4>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d008      	beq.n	80074c2 <_nx_ip_driver_packet_send+0x1d6>
                    {

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	655a      	str	r2, [r3, #84]	; 0x54
#endif
                        /* Just release the packet.  */
                        _nx_packet_transmit_release(packet_ptr);
 80074ba:	68b8      	ldr	r0, [r7, #8]
 80074bc:	f002 f8c4 	bl	8009648 <_nx_packet_transmit_release>

                        /* Return... nothing more can be done!  */
                        return;
 80074c0:	e132      	b.n	8007728 <_nx_ip_driver_packet_send+0x43c>
                    }
                }

                /* Determine if we actually found a matching ARP entry.  */
                if (arp_ptr)
 80074c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d052      	beq.n	800756e <_nx_ip_driver_packet_send+0x282>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80074c8:	f3ef 8310 	mrs	r3, PRIMASK
 80074cc:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 80074ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    int_posture = __get_interrupt_posture();
 80074d0:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 80074d2:	b672      	cpsid	i
    return(int_posture);
 80074d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                {

                    /* Yes, we have an existing ARP mapping entry.  */

                    /* Disable interrupts temporarily.  */
                    TX_DISABLE
 80074d6:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Ensure the current packet's queue next pointer to NULL.  */
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2200      	movs	r2, #0
 80074dc:	61da      	str	r2, [r3, #28]

                    /* Determine if the queue is empty.  */
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 80074de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d109      	bne.n	80074fa <_nx_ip_driver_packet_send+0x20e>
                    {

                        /* Yes, we have an empty ARP packet queue.  Simply place the
                           packet at the head of the list.  */
                        arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 80074e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	631a      	str	r2, [r3, #48]	; 0x30
 80074ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80074f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f2:	f383 8810 	msr	PRIMASK, r3
}
 80074f6:	bf00      	nop
                    /* Call ARP send to send an ARP request.  */
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
                }

                /* Just return!  */
                return;
 80074f8:	e115      	b.n	8007726 <_nx_ip_driver_packet_send+0x43a>
                        last_packet =  arp_ptr -> nx_arp_packets_waiting;
 80074fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fe:	66bb      	str	r3, [r7, #104]	; 0x68
                        queued_count = 1;
 8007500:	2301      	movs	r3, #1
 8007502:	663b      	str	r3, [r7, #96]	; 0x60
                        while (last_packet -> nx_packet_queue_next)
 8007504:	e005      	b.n	8007512 <_nx_ip_driver_packet_send+0x226>
                            queued_count++;
 8007506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007508:	3301      	adds	r3, #1
 800750a:	663b      	str	r3, [r7, #96]	; 0x60
                            last_packet =  last_packet -> nx_packet_queue_next;
 800750c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	66bb      	str	r3, [r7, #104]	; 0x68
                        while (last_packet -> nx_packet_queue_next)
 8007512:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1f5      	bne.n	8007506 <_nx_ip_driver_packet_send+0x21a>
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 800751a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	61da      	str	r2, [r3, #28]
                        remove_packet =  NX_NULL;
 8007520:	2300      	movs	r3, #0
 8007522:	667b      	str	r3, [r7, #100]	; 0x64
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 8007524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007526:	2b03      	cmp	r3, #3
 8007528:	d913      	bls.n	8007552 <_nx_ip_driver_packet_send+0x266>
                            remove_packet =  arp_ptr -> nx_arp_packets_waiting;
 800752a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800752c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752e:	667b      	str	r3, [r7, #100]	; 0x64
                            arp_ptr -> nx_arp_packets_waiting =  remove_packet -> nx_packet_queue_next;
 8007530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007532:	69da      	ldr	r2, [r3, #28]
 8007534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007536:	631a      	str	r2, [r3, #48]	; 0x30
                            remove_packet -> nx_packet_queue_next =  NX_NULL;
 8007538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800753a:	2200      	movs	r2, #0
 800753c:	61da      	str	r2, [r3, #28]
                            ip_ptr -> nx_ip_transmit_resource_errors++;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	645a      	str	r2, [r3, #68]	; 0x44
                            ip_ptr -> nx_ip_send_packets_dropped++;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	655a      	str	r2, [r3, #84]	; 0x54
 8007552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007554:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007558:	f383 8810 	msr	PRIMASK, r3
}
 800755c:	bf00      	nop
                        if (remove_packet)
 800755e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 80e0 	beq.w	8007726 <_nx_ip_driver_packet_send+0x43a>
                            _nx_packet_transmit_release(remove_packet);
 8007566:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8007568:	f002 f86e 	bl	8009648 <_nx_packet_transmit_release>
                return;
 800756c:	e0db      	b.n	8007726 <_nx_ip_driver_packet_send+0x43a>
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00e      	beq.n	8007596 <_nx_ip_driver_packet_send+0x2aa>
                        ((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 800757e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007580:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 8007584:	0092      	lsls	r2, r2, #2
 8007586:	68f9      	ldr	r1, [r7, #12]
 8007588:	4411      	add	r1, r2
 800758a:	2200      	movs	r2, #0
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	4798      	blx	r3
 8007590:	4603      	mov	r3, r0
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00d      	beq.n	80075b2 <_nx_ip_driver_packet_send+0x2c6>
                        ip_ptr -> nx_ip_transmit_resource_errors++;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	645a      	str	r2, [r3, #68]	; 0x44
                        ip_ptr -> nx_ip_send_packets_dropped++;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	655a      	str	r2, [r3, #84]	; 0x54
                        _nx_packet_transmit_release(packet_ptr);
 80075aa:	68b8      	ldr	r0, [r7, #8]
 80075ac:	f002 f84c 	bl	8009648 <_nx_packet_transmit_release>
                        return;
 80075b0:	e0ba      	b.n	8007728 <_nx_ip_driver_packet_send+0x43c>
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80075b6:	f502 72ca 	add.w	r2, r2, #404	; 0x194
 80075ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	66fb      	str	r3, [r7, #108]	; 0x6c
                    arp_ptr -> nx_arp_ip_address =            destination_ip;
 80075c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	621a      	str	r2, [r3, #32]
                    arp_ptr -> nx_arp_physical_address_msw =  0;
 80075c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ca:	2200      	movs	r2, #0
 80075cc:	625a      	str	r2, [r3, #36]	; 0x24
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
 80075ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d0:	2200      	movs	r2, #0
 80075d2:	629a      	str	r2, [r3, #40]	; 0x28
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 80075d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d6:	220a      	movs	r2, #10
 80075d8:	605a      	str	r2, [r3, #4]
                    arp_ptr -> nx_arp_retries =               0;
 80075da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075dc:	2200      	movs	r2, #0
 80075de:	609a      	str	r2, [r3, #8]
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075e6:	62da      	str	r2, [r3, #44]	; 0x2c
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2200      	movs	r2, #0
 80075ec:	61da      	str	r2, [r3, #28]
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 80075ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	4798      	blx	r3
                return;
 8007604:	e08f      	b.n	8007726 <_nx_ip_driver_packet_send+0x43a>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */

        /* Determine if we have a loopback address.  */
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800760c:	d302      	bcc.n	8007614 <_nx_ip_driver_packet_send+0x328>
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 800760e:	687b      	ldr	r3, [r7, #4]
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8007610:	2b00      	cmp	r3, #0
 8007612:	da05      	bge.n	8007620 <_nx_ip_driver_packet_send+0x334>
            (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address))
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007618:	695b      	ldr	r3, [r3, #20]
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	429a      	cmp	r2, r3
 800761e:	d104      	bne.n	800762a <_nx_ip_driver_packet_send+0x33e>
        {

            /* Yes, we have an internal loopback address.  */
            loopback = NX_TRUE;
 8007620:	2301      	movs	r3, #1
 8007622:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 8007626:	2300      	movs	r3, #0
 8007628:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Check whether the packet should be loop back. */
    if (loopback == NX_TRUE)
 800762a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800762e:	2b01      	cmp	r3, #1
 8007630:	d131      	bne.n	8007696 <_nx_ip_driver_packet_send+0x3aa>
    {

        /* Copy the packet so it can be enqueued properly by the receive
           processing.  */
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8007638:	f107 0114 	add.w	r1, r7, #20
 800763c:	2300      	movs	r3, #0
 800763e:	68b8      	ldr	r0, [r7, #8]
 8007640:	f001 fcb2 	bl	8008fa8 <_nx_packet_copy>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d11b      	bne.n	8007682 <_nx_ip_driver_packet_send+0x396>

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

            /* Compute checksum for upper layer protocol. */
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            if (packet_copy -> nx_packet_interface_capability_flag)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <_nx_ip_driver_packet_send+0x36e>
            {
                _nx_ip_packet_checksum_compute(packet_copy);
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fa97 	bl	8007b88 <_nx_ip_packet_checksum_compute>
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	699a      	ldr	r2, [r3, #24]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	4413      	add	r3, r2
 800766e:	f1a3 0214 	sub.w	r2, r3, #20
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	619a      	str	r2, [r3, #24]
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_copy);

            /* Send the packet to this IP's receive processing like it came in from the
               driver.  */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	4619      	mov	r1, r3
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 fc10 	bl	8007ea0 <_nx_ip_packet_deferred_receive>
 8007680:	e009      	b.n	8007696 <_nx_ip_driver_packet_send+0x3aa>
#ifndef NX_DISABLE_IP_INFO
        else
        {

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Increment the IP transmit resource error count.  */
            ip_ptr -> nx_ip_transmit_resource_errors++;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	645a      	str	r2, [r3, #68]	; 0x44
        }
#endif
    }

    /* Check whether the packet should be sent through driver. */
    if (driver_request.nx_ip_driver_interface)
 8007696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007698:	2b00      	cmp	r3, #0
 800769a:	d040      	beq.n	800771e <_nx_ip_driver_packet_send+0x432>
    {

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d919      	bls.n	80076de <_nx_ip_driver_packet_send+0x3f2>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Check the DF bit flag.  */
            if ((ip_ptr -> nx_ip_fragment_processing) && (fragment != NX_DONT_FRAGMENT))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00b      	beq.n	80076cc <_nx_ip_driver_packet_send+0x3e0>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076ba:	d007      	beq.n	80076cc <_nx_ip_driver_packet_send+0x3e0>
            {

                /* Fragmentation is needed, call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80076c2:	f107 0218 	add.w	r2, r7, #24
 80076c6:	4610      	mov	r0, r2
 80076c8:	4798      	blx	r3
                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
            }

            /* In either case, this packet send is complete, just return.  */
            return;
 80076ca:	e02d      	b.n	8007728 <_nx_ip_driver_packet_send+0x43c>
                ip_ptr -> nx_ip_send_packets_dropped++;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d0:	1c5a      	adds	r2, r3, #1
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	655a      	str	r2, [r3, #84]	; 0x54
                _nx_packet_transmit_release(packet_ptr);
 80076d6:	68b8      	ldr	r0, [r7, #8]
 80076d8:	f001 ffb6 	bl	8009648 <_nx_packet_transmit_release>
            return;
 80076dc:	e024      	b.n	8007728 <_nx_ip_driver_packet_send+0x43c>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packet sent count.  */
        ip_ptr -> nx_ip_total_packets_sent++;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	615a      	str	r2, [r3, #20]

        /* Increment the IP bytes sent count.  */
        ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	699a      	ldr	r2, [r3, #24]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f0:	4413      	add	r3, r2
 80076f2:	f1a3 0214 	sub.w	r2, r3, #20
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	619a      	str	r2, [r3, #24]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Driver entry must not be NULL. */
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007700:	2b00      	cmp	r3, #0
 8007702:	d104      	bne.n	800770e <_nx_ip_driver_packet_send+0x422>
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	f005 fddc 	bl	800d2c4 <_tx_thread_sleep>
 800770c:	e7fa      	b.n	8007704 <_nx_ip_driver_packet_send+0x418>

        /* Broadcast packet.  */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007714:	f107 0218 	add.w	r2, r7, #24
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	e004      	b.n	8007728 <_nx_ip_driver_packet_send+0x43c>
    }
    else
    {

        /* Release the transmit packet.  */
        _nx_packet_transmit_release(packet_ptr);
 800771e:	68b8      	ldr	r0, [r7, #8]
 8007720:	f001 ff92 	bl	8009648 <_nx_packet_transmit_release>
 8007724:	e000      	b.n	8007728 <_nx_ip_driver_packet_send+0x43c>
                return;
 8007726:	bf00      	nop
    }
}
 8007728:	3778      	adds	r7, #120	; 0x78
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <_nx_ip_header_add>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_header_add(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG source_ip, ULONG destination_ip,
                        ULONG type_of_service, ULONG time_to_live,  ULONG protocol, ULONG fragment)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08c      	sub	sp, #48	; 0x30
 8007734:	af02      	add	r7, sp, #8
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	603b      	str	r3, [r7, #0]
ULONG           router_alert = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	627b      	str	r3, [r7, #36]	; 0x24
NX_IPV4_HEADER *ip_header_ptr;
ULONG           checksum;
#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT            compute_checksum = 1;
 8007742:	2301      	movs	r3, #1
 8007744:	623b      	str	r3, [r7, #32]
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
ULONG           val;

#ifndef NX_DISABLE_IGMPV2
    /* Check IGMPv2 protocol. */
    if ((protocol == NX_IP_IGMP) && (ip_ptr -> nx_ip_igmp_router_version == NX_IGMP_HOST_VERSION_2))
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800774c:	d106      	bne.n	800775c <_nx_ip_header_add+0x2c>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8007754:	2b02      	cmp	r3, #2
 8007756:	d101      	bne.n	800775c <_nx_ip_header_add+0x2c>
    {
        router_alert = 4;
 8007758:	2304      	movs	r3, #4
 800775a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007762:	f06f 0313 	mvn.w	r3, #19
 8007766:	1a5b      	subs	r3, r3, r1
 8007768:	441a      	add	r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	4413      	add	r3, r2
 8007776:	f103 0214 	add.w	r2, r3, #20
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Assert prepend pointer is no less than data start pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	689a      	ldr	r2, [r3, #8]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	429a      	cmp	r2, r3
 8007788:	d204      	bcs.n	8007794 <_nx_ip_header_add+0x64>
 800778a:	f04f 30ff 	mov.w	r0, #4294967295
 800778e:	f005 fd99 	bl	800d2c4 <_tx_thread_sleep>
 8007792:	e7fa      	b.n	800778a <_nx_ip_header_add+0x5a>

    /* Setup the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	61fb      	str	r3, [r7, #28]
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	689a      	ldr	r2, [r3, #8]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	635a      	str	r2, [r3, #52]	; 0x34
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
                                                       sizeof(NX_IPV4_HEADER) + router_alert);
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	4413      	add	r3, r2
 80077ae:	b2db      	uxtb	r3, r3
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 80077b0:	3314      	adds	r3, #20
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

    /* Determine if this is an identical copy for TCP retransmission.
       RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <_nx_ip_header_add+0x98>
    {

        /* Yes, this an identical copy for TCP retransmission.
           The IP header has been added, return.  */
        return(NX_SUCCESS);
 80077c4:	2300      	movs	r3, #0
 80077c6:	e089      	b.n	80078dc <_nx_ip_header_add+0x1ac>
    }

    /* Build the IP header.  */

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d009      	beq.n	80077e2 <_nx_ip_header_add+0xb2>

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
                                                        (NX_IP_HEADER_LENGTH_ENCODE_6 << 24) |
                                                        type_of_service |
                                                        (0xFFFF & packet_ptr -> nx_packet_length));
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	b29a      	uxth	r2, r3
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
 80077d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d6:	4313      	orrs	r3, r2
 80077d8:	f043 428c 	orr.w	r2, r3, #1174405120	; 0x46000000
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	e008      	b.n	80077f4 <_nx_ip_header_add+0xc4>
    else
#endif
    {

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ea:	4313      	orrs	r3, r2
 80077ec:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	601a      	str	r2, [r3, #0]
    }

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80077fa:	1c59      	adds	r1, r3, #1
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	f8c2 1134 	str.w	r1, [r2, #308]	; 0x134
 8007802:	041a      	lsls	r2, r3, #16
 8007804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007806:	431a      	orrs	r2, r3
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 800780c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800780e:	061a      	lsls	r2, r3, #24
 8007810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007812:	431a      	orrs	r2, r3
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  source_ip;
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  destination_ip;
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	2b00      	cmp	r3, #0
 8007828:	d004      	beq.n	8007834 <_nx_ip_header_add+0x104>
    {

        /* Append Router Alert Option. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))) = (NX_IP_OPTION_COPY_FLAG |
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	3314      	adds	r3, #20
 8007830:	4a2c      	ldr	r2, [pc, #176]	; (80078e4 <_nx_ip_header_add+0x1b4>)
 8007832:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	ba1a      	rev	r2, r3
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	ba1a      	rev	r2, r3
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	ba1a      	rev	r2, r3
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	ba1a      	rev	r2, r3
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	ba1a      	rev	r2, r3
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	611a      	str	r2, [r3, #16]
#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	2b00      	cmp	r3, #0
 800786a:	d008      	beq.n	800787e <_nx_ip_header_add+0x14e>
    {

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_CHANGE_ULONG_ENDIAN(*((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))));
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	3314      	adds	r3, #20
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	3314      	adds	r3, #20
 800787a:	ba12      	rev	r2, r2
 800787c:	601a      	str	r2, [r3, #0]

#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_IP_TX_CHECKSUM */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <_nx_ip_header_add+0x160>
    {
        compute_checksum = 0;
 800788c:	2300      	movs	r3, #0
 800788e:	623b      	str	r3, [r7, #32]
    }

#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d01b      	beq.n	80078ce <_nx_ip_header_add+0x19e>
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* Length is the size of IP header, including options */
                                           (UINT)(20 + router_alert),
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	f103 0214 	add.w	r2, r3, #20
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800789c:	2300      	movs	r3, #0
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	2300      	movs	r3, #0
 80078a2:	2104      	movs	r1, #4
 80078a4:	68b8      	ldr	r0, [r7, #8]
 80078a6:	f7ff f98e 	bl	8006bc6 <_nx_ip_checksum_compute>
 80078aa:	4603      	mov	r3, r0
 80078ac:	61bb      	str	r3, [r7, #24]
                                           /* IPv4 header checksum does not use src/dest addresses */
                                           NULL, NULL);

        val = (ULONG)(~checksum);
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	43db      	mvns	r3, r3
 80078b2:	617b      	str	r3, [r7, #20]
        val = val & NX_LOWER_16_MASK;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	617b      	str	r3, [r7, #20]

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	ba1b      	rev	r3, r3
 80078be:	617b      	str	r3, [r7, #20]

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	431a      	orrs	r2, r3
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	609a      	str	r2, [r3, #8]
 80078cc:	e005      	b.n	80078da <_nx_ip_header_add+0x1aa>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d2:	f043 0201 	orr.w	r2, r3, #1
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Return...  */
    return(NX_SUCCESS);
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3728      	adds	r7, #40	; 0x28
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	94040000 	.word	0x94040000

080078e8 <_nx_ip_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_initialize(VOID)
{
 80078e8:	b480      	push	{r7}
 80078ea:	af00      	add	r7, sp, #0

    /* Initialize the created IP instance variables.  */
    _nx_ip_created_ptr =     NX_NULL;
 80078ec:	4b05      	ldr	r3, [pc, #20]	; (8007904 <_nx_ip_initialize+0x1c>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
    _nx_ip_created_count =   0;
 80078f2:	4b05      	ldr	r3, [pc, #20]	; (8007908 <_nx_ip_initialize+0x20>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]
}
 80078f8:	bf00      	nop
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	20014828 	.word	0x20014828
 8007908:	2001482c 	.word	0x2001482c

0800790c <_nx_ip_interface_status_check>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_status_check(NX_IP *ip_ptr, UINT interface_index, ULONG needed_status,
                                    ULONG *actual_status, ULONG wait_option)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b08e      	sub	sp, #56	; 0x38
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
 8007918:	603b      	str	r3, [r7, #0]
    /* Loop to keep checking for the proper status bits.  */
    for (;;)
    {

        /* Clear the current status.  */
        current_status =  0;
 800791a:	2300      	movs	r3, #0
 800791c:	637b      	str	r3, [r7, #52]	; 0x34

        /*  Process according to the status option specified.  */

        if (needed_status & NX_IP_INITIALIZE_DONE)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <_nx_ip_interface_status_check+0x2e>
        {

            /* Check for initialization complete.  */
            if (ip_ptr -> nx_ip_initialize_done)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <_nx_ip_interface_status_check+0x2e>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_INITIALIZE_DONE;
 8007932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007934:	f043 0301 	orr.w	r3, r3, #1
 8007938:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

#ifndef NX_DISABLE_IPV4
        if (needed_status & NX_IP_ADDRESS_RESOLVED)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00f      	beq.n	8007964 <_nx_ip_interface_status_check+0x58>
        {

            /* Check for a non-zero IP address.  */
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 8007944:	68f9      	ldr	r1, [r7, #12]
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	4613      	mov	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	440b      	add	r3, r1
 8007952:	f203 7334 	addw	r3, r3, #1844	; 0x734
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <_nx_ip_interface_status_check+0x58>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_ADDRESS_RESOLVED;
 800795c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795e:	f043 0302 	orr.w	r3, r3, #2
 8007962:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_ARP_ENABLED)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f003 0308 	and.w	r3, r3, #8
 800796a:	2b00      	cmp	r3, #0
 800796c:	d008      	beq.n	8007980 <_nx_ip_interface_status_check+0x74>
        {

            /* Check for ARP being enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <_nx_ip_interface_status_check+0x74>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_ARP_ENABLED;
 8007978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797a:	f043 0308 	orr.w	r3, r3, #8
 800797e:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_RARP_COMPLETE)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00f      	beq.n	80079aa <_nx_ip_interface_status_check+0x9e>
        {

            /* This is effectively the same as the IP address resolved...  */

            /* Check for a non-zero IP address.  */
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	4613      	mov	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	440b      	add	r3, r1
 8007998:	f203 7334 	addw	r3, r3, #1844	; 0x734
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <_nx_ip_interface_status_check+0x9e>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_RARP_COMPLETE;
 80079a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a8:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_IGMP_ENABLED)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d008      	beq.n	80079c6 <_nx_ip_interface_status_check+0xba>
        {

            /* Check for IGMP being enabled.  */
            if (ip_ptr -> nx_ip_igmp_packet_receive)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <_nx_ip_interface_status_check+0xba>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_IGMP_ENABLED;
 80079be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        if (needed_status & NX_IP_LINK_ENABLED)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d04a      	beq.n	8007a66 <_nx_ip_interface_status_check+0x15a>
        {

            /* Get mutex protection.  */
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80079d6:	f04f 31ff 	mov.w	r1, #4294967295
 80079da:	4618      	mov	r0, r3
 80079dc:	f004 fcfe 	bl	800c3dc <_tx_mutex_get>

            /* Build the driver request structure.  */
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	62fb      	str	r3, [r7, #44]	; 0x2c
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 80079e4:	230a      	movs	r3, #10
 80079e6:	617b      	str	r3, [r7, #20]
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 80079e8:	f107 0310 	add.w	r3, r7, #16
 80079ec:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	4613      	mov	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	4413      	add	r3, r2
 8007a00:	633b      	str	r3, [r7, #48]	; 0x30

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_GET_STATUS, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Call link level driver.  */
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 8007a02:	68f9      	ldr	r1, [r7, #12]
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	011b      	lsls	r3, r3, #4
 8007a0e:	440b      	add	r3, r1
 8007a10:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f107 0214 	add.w	r2, r7, #20
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	4798      	blx	r3

            /* If the driver does not recognize this keyword, we fall back to reading the IP link status.*/
            /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d013      	beq.n	8007a4c <_nx_ip_interface_status_check+0x140>
            {
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	2b44      	cmp	r3, #68	; 0x44
 8007a28:	d117      	bne.n	8007a5a <_nx_ip_interface_status_check+0x14e>
                {
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 8007a2a:	68f9      	ldr	r1, [r7, #12]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	011b      	lsls	r3, r3, #4
 8007a36:	440b      	add	r3, r1
 8007a38:	f203 7326 	addw	r3, r3, #1830	; 0x726
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00b      	beq.n	8007a5a <_nx_ip_interface_status_check+0x14e>
                    {
                        current_status = current_status | NX_IP_LINK_ENABLED;
 8007a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a44:	f043 0304 	orr.w	r3, r3, #4
 8007a48:	637b      	str	r3, [r7, #52]	; 0x34
 8007a4a:	e006      	b.n	8007a5a <_nx_ip_interface_status_check+0x14e>
            else
            {

                /* Check for a link up condition.  */
                /*lint -e{644} suppress variable might not be initialized, since "return_value" was initialized in nx_interface_link_driver_entry. */
                if (return_value == NX_TRUE)
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d103      	bne.n	8007a5a <_nx_ip_interface_status_check+0x14e>
                {

                    /* Yes, set the appropriate bit in the current status.  */
                    current_status =  current_status | NX_IP_LINK_ENABLED;
 8007a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a54:	f043 0304 	orr.w	r3, r3, #4
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007a60:	4618      	mov	r0, r3
 8007a62:	f004 ff33 	bl	800c8cc <_tx_mutex_put>
        }

        if (needed_status &  NX_IP_UDP_ENABLED)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d008      	beq.n	8007a82 <_nx_ip_interface_status_check+0x176>
        {

            /* Check for UDP being enabled.  */
            if (ip_ptr -> nx_ip_udp_packet_receive)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <_nx_ip_interface_status_check+0x176>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_UDP_ENABLED;
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7c:	f043 0310 	orr.w	r3, r3, #16
 8007a80:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_TCP_ENABLED)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f003 0320 	and.w	r3, r3, #32
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d008      	beq.n	8007a9e <_nx_ip_interface_status_check+0x192>
        {

            /* Check for TCP being enabled.  */
            if (ip_ptr -> nx_ip_tcp_packet_receive)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <_nx_ip_interface_status_check+0x192>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_TCP_ENABLED;
 8007a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a98:	f043 0320 	orr.w	r3, r3, #32
 8007a9c:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }

        if (needed_status & NX_IP_INTERFACE_LINK_ENABLED)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d04a      	beq.n	8007b3e <_nx_ip_interface_status_check+0x232>
        {

            /* Get mutex protection.  */
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007aae:	f04f 31ff 	mov.w	r1, #4294967295
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f004 fc92 	bl	800c3dc <_tx_mutex_get>

            /* Build the driver request structure.  */
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	62fb      	str	r3, [r7, #44]	; 0x2c
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 8007abc:	230a      	movs	r3, #10
 8007abe:	617b      	str	r3, [r7, #20]
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 8007ac0:	f107 0310 	add.w	r3, r7, #16
 8007ac4:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	633b      	str	r3, [r7, #48]	; 0x30

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_GET_STATUS, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Call link level driver.  */
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 8007ada:	68f9      	ldr	r1, [r7, #12]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	440b      	add	r3, r1
 8007ae8:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f107 0214 	add.w	r2, r7, #20
 8007af2:	4610      	mov	r0, r2
 8007af4:	4798      	blx	r3

            /* If the driver does not recognize this keyword, we fall back to reading the IP link status.*/
            /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d013      	beq.n	8007b24 <_nx_ip_interface_status_check+0x218>
            {
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	2b44      	cmp	r3, #68	; 0x44
 8007b00:	d117      	bne.n	8007b32 <_nx_ip_interface_status_check+0x226>
                {
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 8007b02:	68f9      	ldr	r1, [r7, #12]
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	011b      	lsls	r3, r3, #4
 8007b0e:	440b      	add	r3, r1
 8007b10:	f203 7326 	addw	r3, r3, #1830	; 0x726
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00b      	beq.n	8007b32 <_nx_ip_interface_status_check+0x226>
                    {
                        current_status = current_status | NX_IP_INTERFACE_LINK_ENABLED;
 8007b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b20:	637b      	str	r3, [r7, #52]	; 0x34
 8007b22:	e006      	b.n	8007b32 <_nx_ip_interface_status_check+0x226>
            else
            {

                /* Check for a link up condition.  */
                /*lint -e{644} suppress variable might not be initialized, since "return_value" was initialized in nx_interface_link_driver_entry. */
                if (return_value == NX_TRUE)
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d103      	bne.n	8007b32 <_nx_ip_interface_status_check+0x226>
                {

                    /* Yes, set the appropriate bit in the current status.  */
                    current_status =  current_status | NX_IP_INTERFACE_LINK_ENABLED;
 8007b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b30:	637b      	str	r3, [r7, #52]	; 0x34
                }
            }

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f004 fec7 	bl	800c8cc <_tx_mutex_put>
        }

        /* Determine if current status is the same.  If so, break out
           of this polling loop.  */
        if (current_status == needed_status)
 8007b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d00f      	beq.n	8007b66 <_nx_ip_interface_status_check+0x25a>
        {
            break;
        }

        /* Check for suspension request.  */
        if (wait_option)
 8007b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00e      	beq.n	8007b6a <_nx_ip_interface_status_check+0x25e>
        {

            /* Decrease the wait time and sleep.  */
            if (wait_option > NX_IP_STATUS_CHECK_WAIT_TIME)
 8007b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d903      	bls.n	8007b5a <_nx_ip_interface_status_check+0x24e>
            {
                wait_option -= NX_IP_STATUS_CHECK_WAIT_TIME;
 8007b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b54:	3b01      	subs	r3, #1
 8007b56:	643b      	str	r3, [r7, #64]	; 0x40
 8007b58:	e001      	b.n	8007b5e <_nx_ip_interface_status_check+0x252>
            }
            else
            {
                wait_option = 0;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	643b      	str	r3, [r7, #64]	; 0x40
            }

            /* Sleep for a tick and check again.  */
            tx_thread_sleep(NX_IP_STATUS_CHECK_WAIT_TIME);
 8007b5e:	2001      	movs	r0, #1
 8007b60:	f005 fbb0 	bl	800d2c4 <_tx_thread_sleep>
        current_status =  0;
 8007b64:	e6d9      	b.n	800791a <_nx_ip_interface_status_check+0xe>
            break;
 8007b66:	bf00      	nop
 8007b68:	e000      	b.n	8007b6c <_nx_ip_interface_status_check+0x260>
        }
        else
        {

            /* Get out of the loop.  */
            break;
 8007b6a:	bf00      	nop
        }
    }

    /* Place the current status in the return destination.  */
    *actual_status =  current_status;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b70:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_IP_STATUS_CHECK, 0, 0, current_status, 0);

    /* Determine what status to return.  */
    if (needed_status == current_status)
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d101      	bne.n	8007b7e <_nx_ip_interface_status_check+0x272>
    {

        /* Return a success.  */
        return(NX_SUCCESS);
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	e000      	b.n	8007b80 <_nx_ip_interface_status_check+0x274>
    }
    else
    {

        /* Return an error.  */
        return(NX_NOT_SUCCESSFUL);
 8007b7e:	2343      	movs	r3, #67	; 0x43
    }
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3738      	adds	r7, #56	; 0x38
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <_nx_ip_packet_checksum_compute>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_checksum_compute(NX_PACKET *packet_ptr)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b098      	sub	sp, #96	; 0x60
 8007b8c:	af02      	add	r7, sp, #8
 8007b8e:	6078      	str	r0, [r7, #4]
ULONG             next_protocol;
UCHAR            *org_prepend_ptr;
ULONG             checksum;
ULONG             val;
UCHAR             is_done = NX_FALSE;
 8007b90:	2300      	movs	r3, #0
 8007b92:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
ULONG             ip_header_length;
ULONG             ip_src_addr[4];
ULONG             ip_dst_addr[4];
ULONG             data_length = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Get IP version. */
#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
    {
#endif
        next_protocol = NX_PROTOCOL_IPV4;
 8007b9a:	2304      	movs	r3, #4
 8007b9c:	657b      	str	r3, [r7, #84]	; 0x54
        next_protocol = NX_PROTOCOL_IPV6;
    }
#endif

    /* Store original prepend_ptr. */
    org_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Loop to process headers. */
    while (!is_done)
 8007ba4:	e170      	b.n	8007e88 <_nx_ip_packet_checksum_compute+0x300>
    {
        switch (next_protocol)
 8007ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	2b10      	cmp	r3, #16
 8007bac:	f200 8168 	bhi.w	8007e80 <_nx_ip_packet_checksum_compute+0x2f8>
 8007bb0:	a201      	add	r2, pc, #4	; (adr r2, 8007bb8 <_nx_ip_packet_checksum_compute+0x30>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007d7b 	.word	0x08007d7b
 8007bbc:	08007ddb 	.word	0x08007ddb
 8007bc0:	08007e81 	.word	0x08007e81
 8007bc4:	08007bfd 	.word	0x08007bfd
 8007bc8:	08007e81 	.word	0x08007e81
 8007bcc:	08007cad 	.word	0x08007cad
 8007bd0:	08007e81 	.word	0x08007e81
 8007bd4:	08007e81 	.word	0x08007e81
 8007bd8:	08007e81 	.word	0x08007e81
 8007bdc:	08007e81 	.word	0x08007e81
 8007be0:	08007e81 	.word	0x08007e81
 8007be4:	08007e81 	.word	0x08007e81
 8007be8:	08007e81 	.word	0x08007e81
 8007bec:	08007e81 	.word	0x08007e81
 8007bf0:	08007e81 	.word	0x08007e81
 8007bf4:	08007e81 	.word	0x08007e81
 8007bf8:	08007d17 	.word	0x08007d17
        {

            /* It's assumed that the IP link driver has positioned the top pointer in the
               packet to the start of the IP address... so that's where we will start.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Pick up the first word in the IP header. */
            val = ip_header_ptr -> nx_ip_header_word_0;
 8007c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	637b      	str	r3, [r7, #52]	; 0x34

            /* Convert to host byte order. */
            NX_CHANGE_ULONG_ENDIAN(val);
 8007c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0a:	ba1b      	rev	r3, r3
 8007c0c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Obtain IP header length. */
            ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 8007c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c10:	0e1b      	lsrs	r3, r3, #24
 8007c12:	f003 030f 	and.w	r3, r3, #15
 8007c16:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check if IPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d01f      	beq.n	8007c64 <_nx_ip_packet_checksum_compute+0xdc>
            {

                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                                   /* length is the size of IP header, including options */
                                                   ip_header_length << 2,
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	009a      	lsls	r2, r3, #2
                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8007c28:	2300      	movs	r3, #0
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	2104      	movs	r1, #4
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7fe ffc8 	bl	8006bc6 <_nx_ip_checksum_compute>
 8007c36:	4603      	mov	r3, r0
 8007c38:	647b      	str	r3, [r7, #68]	; 0x44
                                                   /* IPv4 header checksum doesn't care src/dest addresses */
                                                   NULL, NULL);

                val = (ULONG)(~checksum);
 8007c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c3c:	43db      	mvns	r3, r3
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34
                val = val & NX_LOWER_16_MASK;
 8007c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34

                /* Convert to network byte order. */
                NX_CHANGE_ULONG_ENDIAN(val);
 8007c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c48:	ba1b      	rev	r3, r3
 8007c4a:	637b      	str	r3, [r7, #52]	; 0x34

                /* Now store the checksum in the IP header.  */
                ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c52:	431a      	orrs	r2, r3
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	609a      	str	r2, [r3, #8]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5c:	f023 0201 	bic.w	r2, r3, #1
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	639a      	str	r2, [r3, #56]	; 0x38
            }


            /* Get src and dst addresses. */
            ip_src_addr[0] = ip_header_ptr -> nx_ip_header_source_ip;
 8007c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	61bb      	str	r3, [r7, #24]
            ip_dst_addr[0] = ip_header_ptr -> nx_ip_header_destination_ip;
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	60bb      	str	r3, [r7, #8]
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	ba1b      	rev	r3, r3
 8007c74:	61bb      	str	r3, [r7, #24]
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	ba1b      	rev	r3, r3
 8007c7a:	60bb      	str	r3, [r7, #8]

            /* Get next protocol. */
            val = ip_header_ptr -> nx_ip_header_word_2;
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	637b      	str	r3, [r7, #52]	; 0x34
            NX_CHANGE_ULONG_ENDIAN(val);
 8007c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c84:	ba1b      	rev	r3, r3
 8007c86:	637b      	str	r3, [r7, #52]	; 0x34
            next_protocol = (val >> 16) & 0xFF;
 8007c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8a:	0c1b      	lsrs	r3, r3, #16
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Remove IPv4 header. */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + (ip_header_length << 2);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689a      	ldr	r2, [r3, #8]
 8007c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	441a      	add	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	609a      	str	r2, [r3, #8]
            data_length = packet_ptr -> nx_packet_length - (ip_header_length << 2);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
            break;
 8007caa:	e0ed      	b.n	8007e88 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_TCP:
        {

            /* Check if TCP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d02a      	beq.n	8007d0e <_nx_ip_packet_checksum_compute+0x186>
            {

                /* Calculate the TCP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 8007cb8:	f107 0218 	add.w	r2, r7, #24
 8007cbc:	f107 0308 	add.w	r3, r7, #8
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cc6:	2106      	movs	r1, #6
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7fe ff7c 	bl	8006bc6 <_nx_ip_checksum_compute>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the TCP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	63fb      	str	r3, [r7, #60]	; 0x3c

                checksum = ~checksum & NX_LOWER_16_MASK;
 8007cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cda:	43db      	mvns	r3, r3
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	647b      	str	r3, [r7, #68]	; 0x44

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	ba1a      	rev	r2, r3
 8007ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce8:	611a      	str	r2, [r3, #16]
                tcp_header_ptr -> nx_tcp_header_word_4 |=  (checksum << NX_SHIFT_BY_16);
 8007cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cec:	691a      	ldr	r2, [r3, #16]
 8007cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cf0:	041b      	lsls	r3, r3, #16
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf6:	611a      	str	r2, [r3, #16]
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 8007cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	ba1a      	rev	r2, r3
 8007cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d00:	611a      	str	r2, [r3, #16]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	f023 0204 	bic.w	r2, r3, #4
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007d14:	e0b8      	b.n	8007e88 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_UDP:
        {

            /* Check if UDP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1a:	f003 0310 	and.w	r3, r3, #16
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d027      	beq.n	8007d72 <_nx_ip_packet_checksum_compute+0x1ea>
            {

                /* Calculate the UDP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_UDP,
 8007d22:	f107 0218 	add.w	r2, r7, #24
 8007d26:	f107 0308 	add.w	r3, r7, #8
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d30:	2111      	movs	r1, #17
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7fe ff47 	bl	8006bc6 <_nx_ip_checksum_compute>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	647b      	str	r3, [r7, #68]	; 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the UDP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	643b      	str	r3, [r7, #64]	; 0x40

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8007d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	ba1a      	rev	r2, r3
 8007d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4a:	605a      	str	r2, [r3, #4]
                udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | (~checksum & NX_LOWER_16_MASK);
 8007d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d52:	43db      	mvns	r3, r3
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	431a      	orrs	r2, r3
 8007d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d5a:	605a      	str	r2, [r3, #4]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8007d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	ba1a      	rev	r2, r3
 8007d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d64:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6a:	f023 0210 	bic.w	r2, r3, #16
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007d72:	2301      	movs	r3, #1
 8007d74:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007d78:	e086      	b.n	8007e88 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_ICMP:
        {

            /* Check if ICMPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d025      	beq.n	8007dd2 <_nx_ip_packet_checksum_compute+0x24a>
            {

                /* Calculate the ICMPv4 checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 8007d86:	2300      	movs	r3, #0
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d8e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7fe ff17 	bl	8006bc6 <_nx_ip_checksum_compute>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	647b      	str	r3, [r7, #68]	; 0x44
                                                    /* ICMPV4 header checksum doesn't care src/dest addresses */
                                                    NULL, NULL);

                /* Pickup the pointer to the head of the ICMPv4 packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                icmpv4_header_ptr =  (NX_ICMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 8007da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	ba1a      	rev	r2, r3
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	601a      	str	r2, [r3, #0]
                icmpv4_header_ptr -> nx_icmp_header_word_0 =  icmpv4_header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007db2:	43db      	mvns	r3, r3
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	431a      	orrs	r2, r3
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	ba1a      	rev	r2, r3
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	601a      	str	r2, [r3, #0]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dca:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007dd8:	e056      	b.n	8007e88 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_IGMP:
        {

            /* Check if IGMP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d048      	beq.n	8007e78 <_nx_ip_packet_checksum_compute+0x2f0>
            {

                /* Pickup the pointer to the head of the IGMP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                igmp_header_ptr =  (NX_IGMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 8007dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	ba1a      	rev	r2, r3
 8007df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df4:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	ba1a      	rev	r2, r3
 8007dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfe:	605a      	str	r2, [r3, #4]

                /* Calculate the checksum.  */
                val =       igmp_header_ptr -> nx_igmp_header_word_0;
 8007e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	637b      	str	r3, [r7, #52]	; 0x34
                checksum =  (val >> NX_SHIFT_BY_16);
 8007e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e08:	0c1b      	lsrs	r3, r3, #16
 8007e0a:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 8007e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e12:	4413      	add	r3, r2
 8007e14:	647b      	str	r3, [r7, #68]	; 0x44
                val =      igmp_header_ptr -> nx_igmp_header_word_1;
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	637b      	str	r3, [r7, #52]	; 0x34
                checksum += (val >> NX_SHIFT_BY_16);
 8007e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1e:	0c1b      	lsrs	r3, r3, #16
 8007e20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e22:	4413      	add	r3, r2
 8007e24:	647b      	str	r3, [r7, #68]	; 0x44
                checksum += (val & NX_LOWER_16_MASK);
 8007e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e2c:	4413      	add	r3, r2
 8007e2e:	647b      	str	r3, [r7, #68]	; 0x44

                /* Add in the carry bits into the checksum.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 8007e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e32:	0c1a      	lsrs	r2, r3, #16
 8007e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	4413      	add	r3, r2
 8007e3a:	647b      	str	r3, [r7, #68]	; 0x44

                /* Do it again in case previous operation generates an overflow.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 8007e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e3e:	0c1a      	lsrs	r2, r3, #16
 8007e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	4413      	add	r3, r2
 8007e46:	647b      	str	r3, [r7, #68]	; 0x44

                /* Place the checksum into the first header word.  */
                igmp_header_ptr -> nx_igmp_header_word_0 =  igmp_header_ptr -> nx_igmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 8007e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e4e:	43db      	mvns	r3, r3
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	431a      	orrs	r2, r3
 8007e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e56:	601a      	str	r2, [r3, #0]

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	ba1a      	rev	r2, r3
 8007e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e60:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	ba1a      	rev	r2, r3
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	639a      	str	r2, [r3, #56]	; 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007e7e:	e003      	b.n	8007e88 <_nx_ip_packet_checksum_compute+0x300>
        }
#endif

        default:
            /* Unsupported protocol. */
            is_done = NX_TRUE;
 8007e80:	2301      	movs	r3, #1
 8007e82:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            break;
 8007e86:	bf00      	nop
    while (!is_done)
 8007e88:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f43f ae8a 	beq.w	8007ba6 <_nx_ip_packet_checksum_compute+0x1e>
        }
    }


    /* Restore origianl prepend_ptr. */
    packet_ptr -> nx_packet_prepend_ptr = org_prepend_ptr;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e96:	609a      	str	r2, [r3, #8]
    return;
 8007e98:	bf00      	nop
}
 8007e9a:	3758      	adds	r7, #88	; 0x58
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <_nx_ip_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8007eae:	61bb      	str	r3, [r7, #24]
    return(posture);
 8007eb0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007eb2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007eb4:	b672      	cpsid	i
    return(int_posture);
 8007eb6:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8007eb8:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if the deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_deferred_received_packet_head)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d011      	beq.n	8007ee8 <_nx_ip_packet_deferred_receive+0x48>
    {

        /* Not empty, just place the packet at the end of the queue.  */
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	f383 8810 	msr	PRIMASK, r3
}
 8007ee6:	e019      	b.n	8007f1c <_nx_ip_packet_deferred_receive+0x7c>
    {

        /* Empty deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the deferred processing
           queue.  */
        ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        packet_ptr -> nx_packet_queue_next =             NX_NULL;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	2200      	movs	r2, #0
 8007efc:	61da      	str	r2, [r3, #28]
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f383 8810 	msr	PRIMASK, r3
}
 8007f08:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the IP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8007f10:	2200      	movs	r2, #0
 8007f12:	2108      	movs	r1, #8
 8007f14:	4618      	mov	r0, r3
 8007f16:	f003 fec9 	bl	800bcac <_tx_event_flags_set>
    }
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	3720      	adds	r7, #32
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <_nx_ip_packet_receive>:
/*                                            added new ip filter,        */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
UCHAR version_byte;


#ifndef NX_DISABLE_IP_INFO
    /* Increment the IP packet count.  */
    ip_ptr -> nx_ip_total_packets_received++;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	61da      	str	r2, [r3, #28]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* If packet_ptr -> nx_packet_interface_ptr is not set, stamp the packet with interface[0].
       Legacy Ethernet drivers do not stamp incoming packets. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d104      	bne.n	8007f4a <_nx_ip_packet_receive+0x26>
    {
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f503 62e4 	add.w	r2, r3, #1824	; 0x720
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    version_byte =  *(packet_ptr -> nx_packet_prepend_ptr);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	73fb      	strb	r3, [r7, #15]

    /* Check the version number */
    ip_version = (version_byte >> 4);
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	091b      	lsrs	r3, r3, #4
 8007f56:	73bb      	strb	r3, [r7, #14]

    packet_ptr -> nx_packet_ip_version = ip_version;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	7bba      	ldrb	r2, [r7, #14]
 8007f5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* NX_ENABLE_IP_PACKET_FILTER */

#ifndef NX_DISABLE_IPV4

    /* Process the packet according to IP version. */
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	d10b      	bne.n	8007f86 <_nx_ip_packet_receive+0x62>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d006      	beq.n	8007f86 <_nx_ip_packet_receive+0x62>
    {

        /* Call the IPv4 packet handler. */
        (ip_ptr -> nx_ipv4_packet_receive)(ip_ptr, packet_ptr);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 8007f7e:	6839      	ldr	r1, [r7, #0]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	4798      	blx	r3
        return;
 8007f84:	e00d      	b.n	8007fa2 <_nx_ip_packet_receive+0x7e>
        not defined.  In this case, the packet is reclaimed. */

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP invalid packet error.  */
    ip_ptr -> nx_ip_invalid_packets++;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8a:	1c5a      	adds	r2, r3, #1
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment the IP receive packets dropped count.  */
    ip_ptr -> nx_ip_receive_packets_dropped++;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f94:	1c5a      	adds	r2, r3, #1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

    _nx_packet_release(packet_ptr);
 8007f9a:	6838      	ldr	r0, [r7, #0]
 8007f9c:	f001 fa9c 	bl	80094d8 <_nx_packet_release>

    return;
 8007fa0:	bf00      	nop
}
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <_nx_ip_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                         ULONG destination_ip, ULONG type_of_service, ULONG time_to_live,
                         ULONG protocol, ULONG fragment, ULONG next_hop_address)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af04      	add	r7, sp, #16
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IP_INFO

    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	611a      	str	r2, [r3, #16]
#endif

    /* Make sure the packet interface is set. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d114      	bne.n	8007ff2 <_nx_ip_packet_send+0x4a>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_transmit_packets++;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fcc:	1c5a      	adds	r2, r3, #1
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

        /* Prepend the IP header to the packet.  First, make room for the IP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f1a3 0214 	sub.w	r2, r3, #20
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	609a      	str	r2, [r3, #8]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	f103 0214 	add.w	r2, r3, #20
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Release the packet.  */
        _nx_packet_transmit_release(packet_ptr);
 8007fea:	68b8      	ldr	r0, [r7, #8]
 8007fec:	f001 fb2c 	bl	8009648 <_nx_packet_transmit_release>

        /* Return... nothing more can be done!  */
        return;
 8007ff0:	e03b      	b.n	800806a <_nx_ip_packet_send+0xc2>
    if (!is_hw_processed)
#endif /* NX_IPSEC_ENABLE  */
    {

        /* Add the IP Header to the packet.  */
        _nx_ip_header_add(ip_ptr, packet_ptr, packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address,
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	695a      	ldr	r2, [r3, #20]
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	9303      	str	r3, [sp, #12]
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	9302      	str	r3, [sp, #8]
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68b9      	ldr	r1, [r7, #8]
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7ff fb8f 	bl	8007730 <_nx_ip_header_add>
    }

#endif

    /* If the next hop address is null, indicates the specified interface is unreached.  */
    if (next_hop_address == 0)
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	2b00      	cmp	r3, #0
 8008016:	d120      	bne.n	800805a <_nx_ip_packet_send+0xb2>
    {

        /* Check whether the forward feature is enabled.  */
        if (ip_ptr -> nx_ip_forward_packet_process)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00b      	beq.n	800803a <_nx_ip_packet_send+0x92>
        {

            /* Initialize the interface.  */
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2200      	movs	r2, #0
 8008026:	631a      	str	r2, [r3, #48]	; 0x30

            /* Figure out the best interface to send the packet on. */
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800802e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f82d 	bl	8008094 <_nx_ip_route_find>
        }

        /* Make sure the packet interface and next hop address are set. */
        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        if ((packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL) || (next_hop_address == 0))
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <_nx_ip_packet_send+0xa0>
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	2b00      	cmp	r3, #0
 8008046:	d108      	bne.n	800805a <_nx_ip_packet_send+0xb2>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_transmit_packets++;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* !NX_DISABLE_IP_INFO */

            /* Release the packet.  */
            _nx_packet_transmit_release(packet_ptr);
 8008052:	68b8      	ldr	r0, [r7, #8]
 8008054:	f001 faf8 	bl	8009648 <_nx_packet_transmit_release>

            /* Return... nothing more can be done!  */
            return;
 8008058:	e007      	b.n	800806a <_nx_ip_packet_send+0xc2>
        }
    }

    /* Directly send the packet.  */
    _nx_ip_driver_packet_send(ip_ptr, packet_ptr, destination_ip, fragment, next_hop_address);
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	68b9      	ldr	r1, [r7, #8]
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f7ff f941 	bl	80072ec <_nx_ip_driver_packet_send>
}
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <_nx_ip_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_periodic_timer_entry(ULONG ip_address)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_PERIODIC_EVENT, TX_OR);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008082:	2200      	movs	r2, #0
 8008084:	2101      	movs	r1, #1
 8008086:	4618      	mov	r0, r3
 8008088:	f003 fe10 	bl	800bcac <_tx_event_flags_set>
}
 800808c:	bf00      	nop
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <_nx_ip_route_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _nx_ip_route_find(NX_IP *ip_ptr, ULONG destination_address, NX_INTERFACE **ip_interface_ptr, ULONG *next_hop_address)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	603b      	str	r3, [r7, #0]

NX_INTERFACE *interface_ptr;
ULONG         i;

    /* Initialize the next hop address. */
    *next_hop_address = 0;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2200      	movs	r2, #0
 80080a6:	601a      	str	r2, [r3, #0]

    /* Determine if the destination_address is multicast or directed broadcast. */
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80080ae:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80080b2:	d003      	beq.n	80080bc <_nx_ip_route_find+0x28>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ba:	d132      	bne.n	8008122 <_nx_ip_route_find+0x8e>
        (destination_address  == NX_IP_LIMITED_BROADCAST))
    {

        *next_hop_address = destination_address;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	601a      	str	r2, [r3, #0]

        /* If the caller did not set the ip_interface value, find a link enabled 
           interface, starting with the primary interface, for transmission.  */
        if (*ip_interface_ptr == NX_NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d122      	bne.n	8008110 <_nx_ip_route_find+0x7c>
        {

            /* Find an interface whose link is up. */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80080ca:	2300      	movs	r3, #0
 80080cc:	617b      	str	r3, [r7, #20]
 80080ce:	e01b      	b.n	8008108 <_nx_ip_route_find+0x74>
            {

                if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up)
 80080d0:	68f9      	ldr	r1, [r7, #12]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	4613      	mov	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	440b      	add	r3, r1
 80080de:	f203 7326 	addw	r3, r3, #1830	; 0x726
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00c      	beq.n	8008102 <_nx_ip_route_find+0x6e>
                {
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	4613      	mov	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	441a      	add	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	601a      	str	r2, [r3, #0]
                    return(NX_SUCCESS);
 80080fe:	2300      	movs	r3, #0
 8008100:	e13d      	b.n	800837e <_nx_ip_route_find+0x2ea>
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	3301      	adds	r3, #1
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0e0      	beq.n	80080d0 <_nx_ip_route_find+0x3c>
 800810e:	e006      	b.n	800811e <_nx_ip_route_find+0x8a>
                }
            }
        }
        /* If the specified interface is up, return success. */
        else if ((*ip_interface_ptr) -> nx_interface_link_up)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	799b      	ldrb	r3, [r3, #6]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <_nx_ip_route_find+0x8a>
        {
            return(NX_SUCCESS);
 800811a:	2300      	movs	r3, #0
 800811c:	e12f      	b.n	800837e <_nx_ip_route_find+0x2ea>
        }

        /* No available interface. */
        return(NX_IP_ADDRESS_ERROR);
 800811e:	2321      	movs	r3, #33	; 0x21
 8008120:	e12d      	b.n	800837e <_nx_ip_route_find+0x2ea>
    }

    /* Search through the interfaces associated with the IP instance,
       check if the the destination address is one of the local interface addresses. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008122:	2300      	movs	r3, #0
 8008124:	617b      	str	r3, [r7, #20]
 8008126:	e02a      	b.n	800817e <_nx_ip_route_find+0xea>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	4613      	mov	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	011b      	lsls	r3, r3, #4
 8008132:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	4413      	add	r3, r2
 800813a:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	791b      	ldrb	r3, [r3, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d019      	beq.n	8008178 <_nx_ip_route_find+0xe4>
            (interface_ptr -> nx_interface_link_up) &&
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 8008148:	2b00      	cmp	r3, #0
 800814a:	d015      	beq.n	8008178 <_nx_ip_route_find+0xe4>
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	695b      	ldr	r3, [r3, #20]
            (interface_ptr -> nx_interface_link_up) &&
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	429a      	cmp	r2, r3
 8008154:	d110      	bne.n	8008178 <_nx_ip_route_find+0xe4>
            ((*ip_interface_ptr == NX_NULL) ||
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 800815a:	2b00      	cmp	r3, #0
 800815c:	d004      	beq.n	8008168 <_nx_ip_route_find+0xd4>
             (*ip_interface_ptr == interface_ptr)))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
            ((*ip_interface_ptr == NX_NULL) ||
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	429a      	cmp	r2, r3
 8008166:	d107      	bne.n	8008178 <_nx_ip_route_find+0xe4>
        {

            /* Yes, use the entry information for interface and next hop. */
            *ip_interface_ptr = interface_ptr;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	601a      	str	r2, [r3, #0]
            *next_hop_address = destination_address;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 8008174:	2300      	movs	r3, #0
 8008176:	e102      	b.n	800837e <_nx_ip_route_find+0x2ea>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	3301      	adds	r3, #1
 800817c:	617b      	str	r3, [r7, #20]
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d0d1      	beq.n	8008128 <_nx_ip_route_find+0x94>

#endif /* NX_ENABLE_IP_STATIC_ROUTING */

    /* Search through the interfaces associated with the IP instance,
       check if the entry exists. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8008184:	2300      	movs	r3, #0
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	e036      	b.n	80081f8 <_nx_ip_route_find+0x164>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	011b      	lsls	r3, r3, #4
 8008194:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4413      	add	r3, r2
 800819c:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	791b      	ldrb	r3, [r3, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d025      	beq.n	80081f2 <_nx_ip_route_find+0x15e>
            (interface_ptr -> nx_interface_link_up) &&
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d021      	beq.n	80081f2 <_nx_ip_route_find+0x15e>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	699a      	ldr	r2, [r3, #24]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	401a      	ands	r2, r3
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	69db      	ldr	r3, [r3, #28]
            (interface_ptr -> nx_interface_link_up) &&
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d119      	bne.n	80081f2 <_nx_ip_route_find+0x15e>
        {

            /* Yes, use the entry information for interface and next hop. */
            if (*ip_interface_ptr == NX_NULL)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d103      	bne.n	80081ce <_nx_ip_route_find+0x13a>
            {
                *ip_interface_ptr = interface_ptr;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	e00b      	b.n	80081e6 <_nx_ip_route_find+0x152>
            }
            /* Match loopback interface.  */
            /* Suppress constant value, since "NX_MAX_IP_INTERFACES" can be redefined. */
#if (NX_MAX_IP_INTERFACES == (NX_MAX_PHYSICAL_INTERFACES + 1))
            else if (i == NX_MAX_PHYSICAL_INTERFACES)
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d103      	bne.n	80081dc <_nx_ip_route_find+0x148>
            {
                *ip_interface_ptr = interface_ptr;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	e004      	b.n	80081e6 <_nx_ip_route_find+0x152>
            }
#endif
            else if (*ip_interface_ptr != interface_ptr)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d104      	bne.n	80081f0 <_nx_ip_route_find+0x15c>
            {
                continue;
            }

            *next_hop_address = destination_address;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 80081ec:	2300      	movs	r3, #0
 80081ee:	e0c6      	b.n	800837e <_nx_ip_route_find+0x2ea>
                continue;
 80081f0:	bf00      	nop
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	3301      	adds	r3, #1
 80081f6:	617b      	str	r3, [r7, #20]
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d9c5      	bls.n	800818a <_nx_ip_route_find+0xf6>
        }
    }

    /* Search the interfaces for IPv4 Link-Local Address according to RFC3927, section2.6.  */
    /* Determine if destination addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if ((destination_address & 0xFFFF0000) == 0xA9FE0000)
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	0c1b      	lsrs	r3, r3, #16
 8008202:	041b      	lsls	r3, r3, #16
 8008204:	4a61      	ldr	r2, [pc, #388]	; (800838c <_nx_ip_route_find+0x2f8>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d143      	bne.n	8008292 <_nx_ip_route_find+0x1fe>
    {

        /* Yes, check if the interface is set.  */
        if (*ip_interface_ptr)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00e      	beq.n	8008230 <_nx_ip_route_find+0x19c>
        {

            /* Determine if the interface is valid.  */
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	791b      	ldrb	r3, [r3, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d03a      	beq.n	8008292 <_nx_ip_route_find+0x1fe>
                ((*ip_interface_ptr) -> nx_interface_link_up))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	799b      	ldrb	r3, [r3, #6]
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 8008222:	2b00      	cmp	r3, #0
 8008224:	d035      	beq.n	8008292 <_nx_ip_route_find+0x1fe>
            {

                /* Set the next hop address.  */
                *next_hop_address = destination_address;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 800822c:	2300      	movs	r3, #0
 800822e:	e0a6      	b.n	800837e <_nx_ip_route_find+0x2ea>
        }
        else
        {

            /* Search through the interfaces associated with the IP instance, set the inteface as first valid interface.  */
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8008230:	2300      	movs	r3, #0
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	e02a      	b.n	800828c <_nx_ip_route_find+0x1f8>
            {

                /* Check for a valid interface that the address is link-local address.  */
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8008236:	68f9      	ldr	r1, [r7, #12]
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	4613      	mov	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	011b      	lsls	r3, r3, #4
 8008242:	440b      	add	r3, r1
 8008244:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d01b      	beq.n	8008286 <_nx_ip_route_find+0x1f2>
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_up))
 800824e:	68f9      	ldr	r1, [r7, #12]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	4613      	mov	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	011b      	lsls	r3, r3, #4
 800825a:	440b      	add	r3, r1
 800825c:	f203 7326 	addw	r3, r3, #1830	; 0x726
 8008260:	781b      	ldrb	r3, [r3, #0]
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00f      	beq.n	8008286 <_nx_ip_route_find+0x1f2>
                {

                    /* Yes, use the entry information for interface and next hop. */
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	4613      	mov	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	441a      	add	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	601a      	str	r2, [r3, #0]
                    *next_hop_address = destination_address;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	601a      	str	r2, [r3, #0]

                    return(NX_SUCCESS);
 8008282:	2300      	movs	r3, #0
 8008284:	e07b      	b.n	800837e <_nx_ip_route_find+0x2ea>
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	3301      	adds	r3, #1
 800828a:	617b      	str	r3, [r7, #20]
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d9d1      	bls.n	8008236 <_nx_ip_route_find+0x1a2>
            }
        }
    }

    /* Does the IP instance have a gateway? */
    if ((ip_ptr -> nx_ip_gateway_address) &&
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d02b      	beq.n	80082f2 <_nx_ip_route_find+0x25e>
        (ip_ptr -> nx_ip_gateway_interface) &&
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	68db      	ldr	r3, [r3, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d027      	beq.n	80082f2 <_nx_ip_route_find+0x25e>
        (ip_ptr -> nx_ip_gateway_interface -> nx_interface_link_up))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	799b      	ldrb	r3, [r3, #6]
        (ip_ptr -> nx_ip_gateway_interface) &&
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d022      	beq.n	80082f2 <_nx_ip_route_find+0x25e>
    {

        /* Get the interface. */
        interface_ptr = ip_ptr -> nx_ip_gateway_interface;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	613b      	str	r3, [r7, #16]

        /* Yes, is gateway address still reachable? */
        if (interface_ptr -> nx_interface_ip_network !=
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	69da      	ldr	r2, [r3, #28]
            (ip_ptr -> nx_ip_gateway_address &
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6899      	ldr	r1, [r3, #8]
             interface_ptr -> nx_interface_ip_network_mask))
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	699b      	ldr	r3, [r3, #24]
            (ip_ptr -> nx_ip_gateway_address &
 80082be:	400b      	ands	r3, r1
        if (interface_ptr -> nx_interface_ip_network !=
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d001      	beq.n	80082c8 <_nx_ip_route_find+0x234>
        {
            return(NX_IP_ADDRESS_ERROR);
 80082c4:	2321      	movs	r3, #33	; 0x21
 80082c6:	e05a      	b.n	800837e <_nx_ip_route_find+0x2ea>
        }

        /* Use the gateway as default. */
        if (*ip_interface_ptr == NX_NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d103      	bne.n	80082d8 <_nx_ip_route_find+0x244>
        {
            *ip_interface_ptr = interface_ptr;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	e006      	b.n	80082e6 <_nx_ip_route_find+0x252>
        }
        else if (*ip_interface_ptr != interface_ptr)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d001      	beq.n	80082e6 <_nx_ip_route_find+0x252>
        {
            return(NX_IP_ADDRESS_ERROR);
 80082e2:	2321      	movs	r3, #33	; 0x21
 80082e4:	e04b      	b.n	800837e <_nx_ip_route_find+0x2ea>
        }

        *next_hop_address = ip_ptr -> nx_ip_gateway_address;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	689a      	ldr	r2, [r3, #8]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	601a      	str	r2, [r3, #0]

        return(NX_SUCCESS);
 80082ee:	2300      	movs	r3, #0
 80082f0:	e045      	b.n	800837e <_nx_ip_route_find+0x2ea>
    }

    /* Determine if source addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if (*ip_interface_ptr)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d016      	beq.n	8008328 <_nx_ip_route_find+0x294>
    {

        /* Determine if the interface is valid and the address of interface is link-local address.  */
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	791b      	ldrb	r3, [r3, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d03b      	beq.n	800837c <_nx_ip_route_find+0x2e8>
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	799b      	ldrb	r3, [r3, #6]
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800830a:	2b00      	cmp	r3, #0
 800830c:	d036      	beq.n	800837c <_nx_ip_route_find+0x2e8>
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	0c1b      	lsrs	r3, r3, #16
 8008316:	041b      	lsls	r3, r3, #16
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 8008318:	4a1c      	ldr	r2, [pc, #112]	; (800838c <_nx_ip_route_find+0x2f8>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d12e      	bne.n	800837c <_nx_ip_route_find+0x2e8>
        {

            /* Set the next hop address.  */
            *next_hop_address = destination_address;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 8008324:	2300      	movs	r3, #0
 8008326:	e02a      	b.n	800837e <_nx_ip_route_find+0x2ea>
    else
    {

        /* Search through the interfaces associated with the IP instance,
           check if interface is valid and the address of interface is link-local address. */
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8008328:	2300      	movs	r3, #0
 800832a:	617b      	str	r3, [r7, #20]
 800832c:	e023      	b.n	8008376 <_nx_ip_route_find+0x2e2>
        {

            /* Use a local variable for convenience. */
            interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	4613      	mov	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	011b      	lsls	r3, r3, #4
 8008338:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	4413      	add	r3, r2
 8008340:	613b      	str	r3, [r7, #16]

            /* Check for a valid interface that the address is link-local address.  */
            if ((interface_ptr -> nx_interface_valid) &&
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	791b      	ldrb	r3, [r3, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d012      	beq.n	8008370 <_nx_ip_route_find+0x2dc>
                (interface_ptr -> nx_interface_link_up) &&
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	799b      	ldrb	r3, [r3, #6]
            if ((interface_ptr -> nx_interface_valid) &&
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00e      	beq.n	8008370 <_nx_ip_route_find+0x2dc>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	0c1b      	lsrs	r3, r3, #16
 8008358:	041b      	lsls	r3, r3, #16
                (interface_ptr -> nx_interface_link_up) &&
 800835a:	4a0c      	ldr	r2, [pc, #48]	; (800838c <_nx_ip_route_find+0x2f8>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d107      	bne.n	8008370 <_nx_ip_route_find+0x2dc>
            {

                /* Yes, use the entry information for interface and next hop. */
                *ip_interface_ptr = interface_ptr;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	601a      	str	r2, [r3, #0]
                *next_hop_address = destination_address;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 800836c:	2300      	movs	r3, #0
 800836e:	e006      	b.n	800837e <_nx_ip_route_find+0x2ea>
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	3301      	adds	r3, #1
 8008374:	617b      	str	r3, [r7, #20]
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d9d8      	bls.n	800832e <_nx_ip_route_find+0x29a>
        }
    }

    /* Cannot find a proper way to transmit this packet.
       Return the error status. */
    return(NX_IP_ADDRESS_ERROR);
 800837c:	2321      	movs	r3, #33	; 0x21
}
 800837e:	4618      	mov	r0, r3
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	a9fe0000 	.word	0xa9fe0000

08008390 <_nx_ip_thread_entry>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_thread_entry(ULONG ip_ptr_value)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b096      	sub	sp, #88	; 0x58
 8008394:	af02      	add	r7, sp, #8
 8008396:	6078      	str	r0, [r7, #4]
NXD_IPV6_ADDRESS *interface_ipv6_address;
#endif /* FEATURE_NX_IPV6 */


    /* Setup IP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_ptr_value)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain the IP internal mutex before calling the driver.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800839c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800839e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80083a2:	f04f 31ff 	mov.w	r1, #4294967295
 80083a6:	4618      	mov	r0, r3
 80083a8:	f004 f818 	bl	800c3dc <_tx_mutex_get>

    /* Set the IP initialization done flag to true.  */
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 80083ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083ae:	2201      	movs	r2, #1
 80083b0:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    /* Loop through all physical interfaces to initialize and enable the hardware. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80083b4:	2300      	movs	r3, #0
 80083b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083b8:	e070      	b.n	800849c <_nx_ip_thread_entry+0x10c>
    {

        /* Is this a valid interface with a link driver associated with it? */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 80083ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	011b      	lsls	r3, r3, #4
 80083c6:	440b      	add	r3, r1
 80083c8:	f203 7324 	addw	r3, r3, #1828	; 0x724
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d061      	beq.n	8008496 <_nx_ip_thread_entry+0x106>
 80083d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	011b      	lsls	r3, r3, #4
 80083de:	440b      	add	r3, r1
 80083e0:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d055      	beq.n	8008496 <_nx_ip_thread_entry+0x106>
        {

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            /* Clear capability flag first.  */
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
 80083ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083ee:	4613      	mov	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	011b      	lsls	r3, r3, #4
 80083f6:	440b      	add	r3, r1
 80083f8:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80083fc:	2200      	movs	r2, #0
 80083fe:	601a      	str	r2, [r3, #0]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


            ip_ptr -> nx_ip_interface[i].nx_interface_link_up = NX_TRUE;
 8008400:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008402:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008404:	4613      	mov	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	440b      	add	r3, r1
 800840e:	f203 7326 	addw	r3, r3, #1830	; 0x726
 8008412:	2201      	movs	r2, #1
 8008414:	701a      	strb	r2, [r3, #0]

            /* Yes; attach the interface to the device. */
            driver_request.nx_ip_driver_ptr        =  ip_ptr;
 8008416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008418:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 800841a:	2313      	movs	r3, #19
 800841c:	613b      	str	r3, [r7, #16]
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 800841e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008420:	4613      	mov	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	011b      	lsls	r3, r3, #4
 8008428:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800842c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800842e:	4413      	add	r3, r2
 8008430:	62fb      	str	r3, [r7, #44]	; 0x2c
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8008432:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008436:	4613      	mov	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	011b      	lsls	r3, r3, #4
 800843e:	440b      	add	r3, r1
 8008440:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f107 0210 	add.w	r2, r7, #16
 800844a:	4610      	mov	r0, r2
 800844c:	4798      	blx	r3
            /* Call the link driver to initialize the hardware. Among other
               responsibilities, the driver is required to provide the
               Maximum Transfer Unit (MTU) for the physical layer. The MTU
               should represent the actual physical layer transfer size
               less the physical layer headers and trailers.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800844e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008450:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_INITIALIZE;
 8008452:	2301      	movs	r3, #1
 8008454:	613b      	str	r3, [r7, #16]
               When an IP instance is created, the first interface (nx_ip_interface[0]) is configured using parameters
               provided in the IP create call.

               When IP thread runs, it invokes the first interface link driver for link initialization.
             */
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 8008456:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800845a:	4613      	mov	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	011b      	lsls	r3, r3, #4
 8008462:	440b      	add	r3, r1
 8008464:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f107 0210 	add.w	r2, r7, #16
 800846e:	4610      	mov	r0, r2
 8008470:	4798      	blx	r3

            /* Call the link driver again to enable the interface.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 8008472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008474:	62bb      	str	r3, [r7, #40]	; 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 8008476:	2302      	movs	r3, #2
 8008478:	613b      	str	r3, [r7, #16]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_LINK_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800847a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800847c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800847e:	4613      	mov	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	011b      	lsls	r3, r3, #4
 8008486:	440b      	add	r3, r1
 8008488:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f107 0210 	add.w	r2, r7, #16
 8008492:	4610      	mov	r0, r2
 8008494:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008498:	3301      	adds	r3, #1
 800849a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800849c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d08b      	beq.n	80083ba <_nx_ip_thread_entry+0x2a>
    /* Loop to process events for this IP instance.  */
    for (;;)
    {

        /* Release the IP internal mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80084a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80084a8:	4618      	mov	r0, r3
 80084aa:	f004 fa0f 	bl	800c8cc <_tx_mutex_put>

        /* Pickup IP event flags.  */
        tx_event_flags_get(&(ip_ptr -> nx_ip_events), NX_IP_ALL_EVENTS, TX_OR_CLEAR, &ip_events, TX_WAIT_FOREVER);
 80084ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084b0:	f503 7012 	add.w	r0, r3, #584	; 0x248
 80084b4:	f107 030c 	add.w	r3, r7, #12
 80084b8:	f04f 32ff 	mov.w	r2, #4294967295
 80084bc:	9200      	str	r2, [sp, #0]
 80084be:	2201      	movs	r2, #1
 80084c0:	f04f 31ff 	mov.w	r1, #4294967295
 80084c4:	f003 fb08 	bl	800bad8 <_tx_event_flags_get>

        /* Obtain the IP internal mutex before processing the IP event.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 80084c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ca:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80084ce:	f04f 31ff 	mov.w	r1, #4294967295
 80084d2:	4618      	mov	r0, r3
 80084d4:	f003 ff82 	bl	800c3dc <_tx_mutex_get>
        }
#endif

        /* Check for an IP receive packet event.  */
        /*lint -e{644} suppress variable might not be initialized, since "ip_events" was initialized by tx_event_flags_get. */
        if (ip_events & NX_IP_RECEIVE_EVENT)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f003 0308 	and.w	r3, r3, #8
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d031      	beq.n	8008546 <_nx_ip_thread_entry+0x1b6>
        {

            /* Loop to process all deferred packet requests.  */
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 80084e2:	e023      	b.n	800852c <_nx_ip_thread_entry+0x19c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80084e4:	f3ef 8310 	mrs	r3, PRIMASK
 80084e8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80084ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80084ec:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80084ee:	b672      	cpsid	i
    return(int_posture);
 80084f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
            {

                /* Remove the first packet and process it!  */

                /* Disable interrupts.  */
                TX_DISABLE
 80084f2:	643b      	str	r3, [r7, #64]	; 0x40

                /* Pickup the first packet.  */
                packet_ptr =  ip_ptr -> nx_ip_deferred_received_packet_head;
 80084f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084f6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80084fa:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Move the head pointer to the next packet.  */
                ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 80084fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fe:	69da      	ldr	r2, [r3, #28]
 8008500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008502:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

                /* Check for end of deferred processing queue.  */
                if (ip_ptr -> nx_ip_deferred_received_packet_head == NX_NULL)
 8008506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008508:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800850c:	2b00      	cmp	r3, #0
 800850e:	d103      	bne.n	8008518 <_nx_ip_thread_entry+0x188>
                {

                    /* Yes, the queue is empty.  Set the tail pointer to NULL.  */
                    ip_ptr -> nx_ip_deferred_received_packet_tail =  NX_NULL;
 8008510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008512:	2200      	movs	r2, #0
 8008514:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8008518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800851a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	f383 8810 	msr	PRIMASK, r3
}
 8008522:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call the actual IP packet receive function.  */
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 8008524:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008526:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008528:	f7ff fcfc 	bl	8007f24 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 800852c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800852e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1d6      	bne.n	80084e4 <_nx_ip_thread_entry+0x154>
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_RECEIVE_EVENT);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f023 0308 	bic.w	r3, r3, #8
 800853c:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8131 	beq.w	80087a8 <_nx_ip_thread_entry+0x418>
                continue;
            }
        }

        /* Check for a TCP message event.  */
        if (ip_events & NX_IP_TCP_EVENT)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00c      	beq.n	800856a <_nx_ip_thread_entry+0x1da>
        {

            /* Process the TCP packet queue.  */
            (ip_ptr -> nx_ip_tcp_queue_process)(ip_ptr);
 8008550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008552:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008556:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008558:	4798      	blx	r3

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_TCP_EVENT);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008560:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 8121 	beq.w	80087ac <_nx_ip_thread_entry+0x41c>
                continue;
            }
        }

        /* Check for a fast TCP event.  */
        if (ip_events & NX_IP_FAST_EVENT)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008570:	2b00      	cmp	r3, #0
 8008572:	d011      	beq.n	8008598 <_nx_ip_thread_entry+0x208>
            }

#endif /* FEATURE_NX_IPV6 */

            /* Process the fast TCP processing.  */
            if (ip_ptr -> nx_ip_tcp_fast_periodic_processing)
 8008574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008576:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 800857a:	2b00      	cmp	r3, #0
 800857c:	d004      	beq.n	8008588 <_nx_ip_thread_entry+0x1f8>
            {
                (ip_ptr -> nx_ip_tcp_fast_periodic_processing)(ip_ptr);
 800857e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008580:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8008584:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008586:	4798      	blx	r3
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_FAST_EVENT);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800858e:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 810c 	beq.w	80087b0 <_nx_ip_thread_entry+0x420>
                continue;
            }
        }

        /* Check for a periodic events.  */
        if (ip_events & NX_IP_PERIODIC_EVENT)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d039      	beq.n	8008616 <_nx_ip_thread_entry+0x286>
        {

#ifndef NX_DISABLE_IPV4
            /* Process the ARP periodic update, if ARP has been enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 80085a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085a4:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d004      	beq.n	80085b6 <_nx_ip_thread_entry+0x226>
            {
                (ip_ptr -> nx_ip_arp_periodic_update)(ip_ptr);
 80085ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ae:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	; 0x6e8
 80085b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80085b4:	4798      	blx	r3
            }

            /* Process the RARP periodic update, if RARP has been enabled.  */
            if (ip_ptr -> nx_ip_rarp_periodic_update)
 80085b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085b8:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d004      	beq.n	80085ca <_nx_ip_thread_entry+0x23a>
            {
                (ip_ptr -> nx_ip_rarp_periodic_update)(ip_ptr);
 80085c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085c2:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 80085c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80085c8:	4798      	blx	r3
            }

            /* Process IGMP periodic events, if IGMP has been enabled.  */
            if (ip_ptr -> nx_ip_igmp_periodic_processing)
 80085ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085cc:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d004      	beq.n	80085de <_nx_ip_thread_entry+0x24e>
            {
                (ip_ptr -> nx_ip_igmp_periodic_processing)(ip_ptr);
 80085d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085d6:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 80085da:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80085dc:	4798      	blx	r3
            }
#endif /* !NX_DISABLE_IPV4  */

            /* Process IP fragmentation timeouts, if IP fragmenting has been
               enabled.  */
            if (ip_ptr -> nx_ip_fragment_timeout_check)
 80085de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085e0:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d004      	beq.n	80085f2 <_nx_ip_thread_entry+0x262>
            {
                (ip_ptr -> nx_ip_fragment_timeout_check)(ip_ptr);
 80085e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ea:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 80085ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80085f0:	4798      	blx	r3
            }

            /* Process TCP periodic events, if TCP has been enabled.  */
            if (ip_ptr -> nx_ip_tcp_periodic_processing)
 80085f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085f4:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d004      	beq.n	8008606 <_nx_ip_thread_entry+0x276>
            {
                (ip_ptr -> nx_ip_tcp_periodic_processing)(ip_ptr);
 80085fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085fe:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8008602:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008604:	4798      	blx	r3
            }
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

#endif /* FEATURE_NX_IPV6 */
            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_PERIODIC_EVENT);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f023 0301 	bic.w	r3, r3, #1
 800860c:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 80cf 	beq.w	80087b4 <_nx_ip_thread_entry+0x424>
        }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Check for an ARP receive packet event.  */
        if ((ip_events & NX_IP_ARP_REC_EVENT) && (ip_ptr -> nx_ip_arp_queue_process))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f003 0310 	and.w	r3, r3, #16
 800861c:	2b00      	cmp	r3, #0
 800861e:	d009      	beq.n	8008634 <_nx_ip_thread_entry+0x2a4>
 8008620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008622:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8008626:	2b00      	cmp	r3, #0
 8008628:	d004      	beq.n	8008634 <_nx_ip_thread_entry+0x2a4>
        {

            /* Process the ARP queue.  */
            (ip_ptr -> nx_ip_arp_queue_process)(ip_ptr);
 800862a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800862c:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	; 0x6ec
 8008630:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008632:	4798      	blx	r3
        }

        /* Check for an RARP receive packet event.  */
        if ((ip_events & NX_IP_RARP_REC_EVENT) && (ip_ptr -> nx_ip_rarp_queue_process))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f003 0320 	and.w	r3, r3, #32
 800863a:	2b00      	cmp	r3, #0
 800863c:	d009      	beq.n	8008652 <_nx_ip_thread_entry+0x2c2>
 800863e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008640:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 8008644:	2b00      	cmp	r3, #0
 8008646:	d004      	beq.n	8008652 <_nx_ip_thread_entry+0x2c2>
        {

            /* Process the RARP queue.  */
            (ip_ptr -> nx_ip_rarp_queue_process)(ip_ptr);
 8008648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800864a:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 800864e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008650:	4798      	blx	r3
        }

        /* Check for an IGMP message event.  */
        if (ip_events & NX_IP_IGMP_EVENT)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <_nx_ip_thread_entry+0x2d6>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_igmp_queue_process)(ip_ptr);
 800865c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800865e:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 8008662:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008664:	4798      	blx	r3
        }

        /* Check for an IGMP enable event.  */
        if (ip_events & NX_IP_IGMP_ENABLE_EVENT)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800866c:	2b00      	cmp	r3, #0
 800866e:	d035      	beq.n	80086dc <_nx_ip_thread_entry+0x34c>
        {

            /* Call the associated driver for this IP instance to register the "all hosts"
               multicast address.  */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8008670:	2300      	movs	r3, #0
 8008672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008674:	e02f      	b.n	80086d6 <_nx_ip_thread_entry+0x346>
            {
                /* Enable the hardware for IGMP for all valid interfaces. */
                if (ip_ptr -> nx_ip_interface[i].nx_interface_valid)
 8008676:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008678:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800867a:	4613      	mov	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	011b      	lsls	r3, r3, #4
 8008682:	440b      	add	r3, r1
 8008684:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d020      	beq.n	80086d0 <_nx_ip_thread_entry+0x340>
                {
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
 800868e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008690:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 8008692:	2308      	movs	r3, #8
 8008694:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 8008696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800869a:	61bb      	str	r3, [r7, #24]
                    /*lint -e{835} -e{845} suppress operating on zero. */
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 800869c:	4b46      	ldr	r3, [pc, #280]	; (80087b8 <_nx_ip_thread_entry+0x428>)
 800869e:	61fb      	str	r3, [r7, #28]
                    driver_request.nx_ip_driver_interface            =   &(ip_ptr -> nx_ip_interface[i]);
 80086a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086a2:	4613      	mov	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	011b      	lsls	r3, r3, #4
 80086aa:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 80086ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086b0:	4413      	add	r3, r2
 80086b2:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_MULTICAST_JOIN, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 80086b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086b8:	4613      	mov	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	011b      	lsls	r3, r3, #4
 80086c0:	440b      	add	r3, r1
 80086c2:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f107 0210 	add.w	r2, r7, #16
 80086cc:	4610      	mov	r0, r2
 80086ce:	4798      	blx	r3
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 80086d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d2:	3301      	adds	r3, #1
 80086d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0cc      	beq.n	8008676 <_nx_ip_thread_entry+0x2e6>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        /* Check for an IP unfragment event.  */
        if (ip_events & NX_IP_UNFRAG_EVENT)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f003 0302 	and.w	r3, r3, #2
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d009      	beq.n	80086fa <_nx_ip_thread_entry+0x36a>
        {

            /* Process the IP fragment reassemble, if fragment has been enabled.  */
            if (ip_ptr -> nx_ip_fragment_assembly)
 80086e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086e8:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d004      	beq.n	80086fa <_nx_ip_thread_entry+0x36a>
            {
                (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
 80086f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086f2:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80086f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80086f8:	4798      	blx	r3
            }
        }

#ifndef NX_DISABLE_IPV4
        /* Check for an ICMP message event.  */
        if (ip_events & NX_IP_ICMP_EVENT)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b00      	cmp	r3, #0
 8008702:	d004      	beq.n	800870e <_nx_ip_thread_entry+0x37e>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_icmp_queue_process)(ip_ptr);
 8008704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008706:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 800870a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800870c:	4798      	blx	r3
        }
#endif /* NX_DISABLE_IPV4 */

        /* Check for a deferred processing request from the driver.  */
        if (ip_events & NX_IP_DRIVER_DEFERRED_EVENT)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008714:	2b00      	cmp	r3, #0
 8008716:	d033      	beq.n	8008780 <_nx_ip_thread_entry+0x3f0>
        {

            /* Go through each valid interface. */
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 8008718:	2300      	movs	r3, #0
 800871a:	64bb      	str	r3, [r7, #72]	; 0x48
 800871c:	e02d      	b.n	800877a <_nx_ip_thread_entry+0x3ea>
            {
                if (ip_ptr -> nx_ip_interface[index].nx_interface_valid)
 800871e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008722:	4613      	mov	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	011b      	lsls	r3, r3, #4
 800872a:	440b      	add	r3, r1
 800872c:	f203 7324 	addw	r3, r3, #1828	; 0x724
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d01e      	beq.n	8008774 <_nx_ip_thread_entry+0x3e4>
                {

                    /* Yes, there is a deferred processing event from the driver. The only valid information
                       fields are the IP pointer and the command.  */
                    driver_request.nx_ip_driver_ptr =        ip_ptr;
 8008736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008738:	62bb      	str	r3, [r7, #40]	; 0x28
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 800873a:	2312      	movs	r3, #18
 800873c:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[index]);
 800873e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	f503 63e4 	add.w	r3, r3, #1824	; 0x720
 800874c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800874e:	4413      	add	r3, r2
 8008750:	62fb      	str	r3, [r7, #44]	; 0x2c
                    driver_request.nx_ip_driver_return_ptr = &foo;
 8008752:	f107 0308 	add.w	r3, r7, #8
 8008756:	627b      	str	r3, [r7, #36]	; 0x24

                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 8008758:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800875a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800875c:	4613      	mov	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	011b      	lsls	r3, r3, #4
 8008764:	440b      	add	r3, r1
 8008766:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f107 0210 	add.w	r2, r7, #16
 8008770:	4610      	mov	r0, r2
 8008772:	4798      	blx	r3
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 8008774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008776:	3301      	adds	r3, #1
 8008778:	64bb      	str	r3, [r7, #72]	; 0x48
 800877a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0ce      	beq.n	800871e <_nx_ip_thread_entry+0x38e>
                }
            }
        }

        /* Check for a deferred TCP cleanup processing request from the driver.  */
        if (ip_events & NX_IP_TCP_CLEANUP_DEFERRED)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d004      	beq.n	8008794 <_nx_ip_thread_entry+0x404>
        {

            /* Yes, there is a deferred cleanup processing event. Call the TCP deferred cleanup
               processing function.  */
            (ip_ptr -> nx_tcp_deferred_cleanup_check)(ip_ptr);
 800878a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800878c:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
 8008790:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008792:	4798      	blx	r3
        }

        /* Check for a link status change request from the driver.  */
        if (ip_events & NX_IP_LINK_STATUS_EVENT)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800879a:	2b00      	cmp	r3, #0
 800879c:	f43f ae81 	beq.w	80084a2 <_nx_ip_thread_entry+0x112>
        {

            /* Yes, there is a link status change  event. Call the deferred link status processing function. */
            _nx_ip_deferred_link_status_process(ip_ptr);
 80087a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80087a2:	f7fe fc39 	bl	8007018 <_nx_ip_deferred_link_status_process>
 80087a6:	e67c      	b.n	80084a2 <_nx_ip_thread_entry+0x112>
                continue;
 80087a8:	bf00      	nop
 80087aa:	e67a      	b.n	80084a2 <_nx_ip_thread_entry+0x112>
                continue;
 80087ac:	bf00      	nop
 80087ae:	e678      	b.n	80084a2 <_nx_ip_thread_entry+0x112>
                continue;
 80087b0:	bf00      	nop
 80087b2:	e676      	b.n	80084a2 <_nx_ip_thread_entry+0x112>
                continue;
 80087b4:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80087b6:	e674      	b.n	80084a2 <_nx_ip_thread_entry+0x112>
 80087b8:	5e000001 	.word	0x5e000001

080087bc <_nx_ipv4_option_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ipv4_option_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b08a      	sub	sp, #40	; 0x28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]

NX_IPV4_HEADER *ip_header_ptr;
UCHAR          *option_ptr;
ULONG           ip_option_length;
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
ULONG           ip_normal_length = 20;
 80087c6:	2314      	movs	r3, #20
 80087c8:	61bb      	str	r3, [r7, #24]
#endif /* NX_DISABLE_ICMPV4_ERROR_MESSAGE */
UINT            index = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	623b      	str	r3, [r7, #32]
UCHAR           op_type;
UCHAR           op_length;
UCHAR           op_timestamp_offset;
UCHAR           op_timestamp_overflow;
UCHAR           op_timestamp_flags;
UINT            op_timestamp_counter = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	61fb      	str	r3, [r7, #28]

    /* Set the IPv4 header and IPv4 option pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	617b      	str	r3, [r7, #20]
    option_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	3314      	adds	r3, #20
 80087de:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate the IPv4 option length.  */
    ip_option_length = ((((ip_header_ptr -> nx_ip_header_word_0 & NX_IP_LENGTH_MASK) >> 24) - NX_IP_NORMAL_LENGTH) & 0xFF) * (ULONG)sizeof(ULONG);
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	0e1b      	lsrs	r3, r3, #24
 80087e6:	f003 030f 	and.w	r3, r3, #15
 80087ea:	3b05      	subs	r3, #5
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	613b      	str	r3, [r7, #16]

    /* Loop to process the IPv4 option.  */
    while (index < ip_option_length)
 80087f2:	e0a3      	b.n	800893c <_nx_ipv4_option_process+0x180>
    {

        /* Get the option type.  */
        op_type = *option_ptr;
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	73fb      	strb	r3, [r7, #15]

        /* Process the option type. */
        switch (op_type)
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	2b44      	cmp	r3, #68	; 0x44
 80087fe:	d010      	beq.n	8008822 <_nx_ipv4_option_process+0x66>
 8008800:	2b44      	cmp	r3, #68	; 0x44
 8008802:	f300 8082 	bgt.w	800890a <_nx_ipv4_option_process+0x14e>
 8008806:	2b00      	cmp	r3, #0
 8008808:	d002      	beq.n	8008810 <_nx_ipv4_option_process+0x54>
 800880a:	2b01      	cmp	r3, #1
 800880c:	d002      	beq.n	8008814 <_nx_ipv4_option_process+0x58>
                return(NX_FALSE);
            }
            break;
        }
        default:
            break;
 800880e:	e07c      	b.n	800890a <_nx_ipv4_option_process+0x14e>
            return(NX_TRUE);
 8008810:	2301      	movs	r3, #1
 8008812:	e099      	b.n	8008948 <_nx_ipv4_option_process+0x18c>
            option_ptr++;
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	3301      	adds	r3, #1
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
            index++;
 800881a:	6a3b      	ldr	r3, [r7, #32]
 800881c:	3301      	adds	r3, #1
 800881e:	623b      	str	r3, [r7, #32]
            continue;
 8008820:	e08c      	b.n	800893c <_nx_ipv4_option_process+0x180>
            op_timestamp_counter++;
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	3301      	adds	r3, #1
 8008826:	61fb      	str	r3, [r7, #28]
            if (op_timestamp_counter > 1)
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d90b      	bls.n	8008846 <_nx_ipv4_option_process+0x8a>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800882e:	69ba      	ldr	r2, [r7, #24]
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	4413      	add	r3, r2
 8008834:	3302      	adds	r3, #2
 8008836:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800883a:	6839      	ldr	r1, [r7, #0]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7fe f825 	bl	800688c <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8008842:	2300      	movs	r3, #0
 8008844:	e080      	b.n	8008948 <_nx_ipv4_option_process+0x18c>
            op_length = *(option_ptr + 1);
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	785b      	ldrb	r3, [r3, #1]
 800884a:	73bb      	strb	r3, [r7, #14]
            op_timestamp_offset = *(option_ptr + 2);
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	789b      	ldrb	r3, [r3, #2]
 8008850:	737b      	strb	r3, [r7, #13]
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	3303      	adds	r3, #3
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	091b      	lsrs	r3, r3, #4
 800885a:	733b      	strb	r3, [r7, #12]
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	3303      	adds	r3, #3
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	f003 030f 	and.w	r3, r3, #15
 8008866:	72fb      	strb	r3, [r7, #11]
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	2b07      	cmp	r3, #7
 800886c:	d908      	bls.n	8008880 <_nx_ipv4_option_process+0xc4>
 800886e:	7bbb      	ldrb	r3, [r7, #14]
 8008870:	2b28      	cmp	r3, #40	; 0x28
 8008872:	d805      	bhi.n	8008880 <_nx_ipv4_option_process+0xc4>
 8008874:	7bbb      	ldrb	r3, [r7, #14]
 8008876:	f003 0303 	and.w	r3, r3, #3
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00b      	beq.n	8008898 <_nx_ipv4_option_process+0xdc>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 8008880:	69ba      	ldr	r2, [r7, #24]
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	4413      	add	r3, r2
 8008886:	3302      	adds	r3, #2
 8008888:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7fd fffc 	bl	800688c <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8008894:	2300      	movs	r3, #0
 8008896:	e057      	b.n	8008948 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_offset < 5) || ((op_timestamp_offset % 2) == 0))
 8008898:	7b7b      	ldrb	r3, [r7, #13]
 800889a:	2b04      	cmp	r3, #4
 800889c:	d905      	bls.n	80088aa <_nx_ipv4_option_process+0xee>
 800889e:	7b7b      	ldrb	r3, [r7, #13]
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10b      	bne.n	80088c2 <_nx_ipv4_option_process+0x106>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 3));
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	4413      	add	r3, r2
 80088b0:	3303      	adds	r3, #3
 80088b2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7fd ffe7 	bl	800688c <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 80088be:	2300      	movs	r3, #0
 80088c0:	e042      	b.n	8008948 <_nx_ipv4_option_process+0x18c>
            if (op_timestamp_overflow == 15)
 80088c2:	7b3b      	ldrb	r3, [r7, #12]
 80088c4:	2b0f      	cmp	r3, #15
 80088c6:	d10b      	bne.n	80088e0 <_nx_ipv4_option_process+0x124>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	6a3b      	ldr	r3, [r7, #32]
 80088cc:	4413      	add	r3, r2
 80088ce:	3304      	adds	r3, #4
 80088d0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7fd ffd8 	bl	800688c <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 80088dc:	2300      	movs	r3, #0
 80088de:	e033      	b.n	8008948 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_flags != 0) && (op_timestamp_flags != 1) && (op_timestamp_flags != 3))
 80088e0:	7afb      	ldrb	r3, [r7, #11]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d013      	beq.n	800890e <_nx_ipv4_option_process+0x152>
 80088e6:	7afb      	ldrb	r3, [r7, #11]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d010      	beq.n	800890e <_nx_ipv4_option_process+0x152>
 80088ec:	7afb      	ldrb	r3, [r7, #11]
 80088ee:	2b03      	cmp	r3, #3
 80088f0:	d00d      	beq.n	800890e <_nx_ipv4_option_process+0x152>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 80088f2:	69ba      	ldr	r2, [r7, #24]
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	4413      	add	r3, r2
 80088f8:	3304      	adds	r3, #4
 80088fa:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7fd ffc3 	bl	800688c <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 8008906:	2300      	movs	r3, #0
 8008908:	e01e      	b.n	8008948 <_nx_ipv4_option_process+0x18c>
            break;
 800890a:	bf00      	nop
 800890c:	e000      	b.n	8008910 <_nx_ipv4_option_process+0x154>
            break;
 800890e:	bf00      	nop
        }

        /* Get the option length.  */
        op_length = *(option_ptr + 1);
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	785b      	ldrb	r3, [r3, #1]
 8008914:	73bb      	strb	r3, [r7, #14]

        /* Check for invalid option length.
           RFC 791: The option-length octet counts the option-type octet and the 
           option-length octet as well as the option-data octets.  */
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d905      	bls.n	8008928 <_nx_ipv4_option_process+0x16c>
 800891c:	7bba      	ldrb	r2, [r7, #14]
 800891e:	6a3b      	ldr	r3, [r7, #32]
 8008920:	4413      	add	r3, r2
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	429a      	cmp	r2, r3
 8008926:	d201      	bcs.n	800892c <_nx_ipv4_option_process+0x170>
        {
            return(NX_FALSE);
 8008928:	2300      	movs	r3, #0
 800892a:	e00d      	b.n	8008948 <_nx_ipv4_option_process+0x18c>
        }

        /* Move to the next top level option. */
        option_ptr += op_length;
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008930:	4413      	add	r3, r2
 8008932:	627b      	str	r3, [r7, #36]	; 0x24

        /* Update the index.  */
        index += op_length;
 8008934:	7bbb      	ldrb	r3, [r7, #14]
 8008936:	6a3a      	ldr	r2, [r7, #32]
 8008938:	4413      	add	r3, r2
 800893a:	623b      	str	r3, [r7, #32]
    while (index < ip_option_length)
 800893c:	6a3a      	ldr	r2, [r7, #32]
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	429a      	cmp	r2, r3
 8008942:	f4ff af57 	bcc.w	80087f4 <_nx_ipv4_option_process+0x38>
    }

    /* Return NX_TRUE.  */
    return(NX_TRUE);
 8008946:	2301      	movs	r3, #1
}
 8008948:	4618      	mov	r0, r3
 800894a:	3728      	adds	r7, #40	; 0x28
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <_nx_ipv4_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv4_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b098      	sub	sp, #96	; 0x60
 8008954:	af02      	add	r7, sp, #8
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
NX_INTERFACE   *if_ptr;
NX_UDP_HEADER  *udp_header_ptr;
UINT            dest_port;
UINT            option_processed;
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
UINT            compute_checksum = 1;
 800895a:	2301      	movs	r3, #1
 800895c:	64bb      	str	r3, [r7, #72]	; 0x48
#endif /* NX_DISABLE_IP_RX_CHECKSUM */

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	653b      	str	r3, [r7, #80]	; 0x50
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, packet_ptr -> nx_packet_length, NX_TRACE_INTERNAL_EVENTS, 0, 0);


    /* Pick up the first word in the IP header. */
    val = ip_header_ptr -> nx_ip_header_word_0;
 8008964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	647b      	str	r3, [r7, #68]	; 0x44

    /* Convert to host byte order. */
    NX_CHANGE_ULONG_ENDIAN(val);
 800896a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800896c:	ba1b      	rev	r3, r3
 800896e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Obtain packet length. */
    pkt_length = val & NX_LOWER_16_MASK;
 8008970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008972:	b29b      	uxth	r3, r3
 8008974:	643b      	str	r3, [r7, #64]	; 0x40

    /* Make sure the IP length matches the packet length.  Some Ethernet devices
       add padding to small packets, which results in a discrepancy between the
       packet length and the IP header length.  */
    if (packet_ptr -> nx_packet_length != pkt_length)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800897c:	429a      	cmp	r2, r3
 800897e:	d066      	beq.n	8008a4e <_nx_ipv4_packet_receive+0xfe>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < pkt_length)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008986:	429a      	cmp	r2, r3
 8008988:	d90d      	bls.n	80089a6 <_nx_ipv4_packet_receive+0x56>
            /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898e:	1c5a      	adds	r2, r3, #1
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008998:	1c5a      	adds	r2, r3, #1
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Invalid packet length, just release it.  */
            _nx_packet_release(packet_ptr);
 800899e:	6838      	ldr	r0, [r7, #0]
 80089a0:	f000 fd9a 	bl	80094d8 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 80089a4:	e233      	b.n	8008e0e <_nx_ipv4_packet_receive+0x4be>
        }

        /* Calculate the difference in the length.  */
        delta =  packet_ptr -> nx_packet_length - pkt_length;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Adjust the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b6:	1ad2      	subs	r2, r2, r3
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 80089bc:	e044      	b.n	8008a48 <_nx_ipv4_packet_receive+0xf8>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d107      	bne.n	80089d6 <_nx_ipv4_packet_receive+0x86>
            {

                /* No, packet is not chained, simply adjust the append pointer in the packet.  */
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	68da      	ldr	r2, [r3, #12]
 80089ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089cc:	425b      	negs	r3, r3
 80089ce:	441a      	add	r2, r3
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	60da      	str	r2, [r3, #12]

                /* Break out of the loop, since the adjustment is complete.  */
                break;
 80089d4:	e03b      	b.n	8008a4e <_nx_ipv4_packet_receive+0xfe>
            }

            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 80089dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089de:	68da      	ldr	r2, [r3, #12]
 80089e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	461a      	mov	r2, r3
 80089e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d207      	bcs.n	80089fe <_nx_ipv4_packet_receive+0xae>
            {

                /* Yes, simply adjust the append pointer of the last packet in the chain.  */
                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 80089ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f4:	425b      	negs	r3, r3
 80089f6:	441a      	add	r2, r3
 80089f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089fa:	60da      	str	r2, [r3, #12]

                /* Get out of the loop, since the adjustment is complete.  */
                break;
 80089fc:	e027      	b.n	8008a4e <_nx_ipv4_packet_receive+0xfe>
            }
            else
            {

                /* Adjust the delta by the amount in the last packet.  */
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 80089fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a00:	68da      	ldr	r2, [r3, #12]
 8008a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	461a      	mov	r2, r3
 8008a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a0c:	1a9b      	subs	r3, r3, r2
 8008a0e:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Find the packet before the last packet.  */
                before_last_packet =  packet_ptr;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 8008a14:	e002      	b.n	8008a1c <_nx_ipv4_packet_receive+0xcc>
                {

                    /* Move to the next packet in the chain.  */
                    before_last_packet =  before_last_packet -> nx_packet_next;
 8008a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	657b      	str	r3, [r7, #84]	; 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 8008a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d1f7      	bne.n	8008a16 <_nx_ipv4_packet_receive+0xc6>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 8008a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a28:	2200      	movs	r2, #0
 8008a2a:	605a      	str	r2, [r3, #4]

                /* Determine if the packet is still chained.  */
                if (packet_ptr != before_last_packet)
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d003      	beq.n	8008a3c <_nx_ipv4_packet_receive+0xec>
                {

                    /* Yes, the packet is still chained, setup the last packet pointer.  */
                    packet_ptr -> nx_packet_last =  before_last_packet;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a38:	619a      	str	r2, [r3, #24]
 8008a3a:	e002      	b.n	8008a42 <_nx_ipv4_packet_receive+0xf2>
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	619a      	str	r2, [r3, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 8008a42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008a44:	f000 fd48 	bl	80094d8 <_nx_packet_release>
        while (delta)
 8008a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1b7      	bne.n	80089be <_nx_ipv4_packet_receive+0x6e>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Get the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a52:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Obtain IP header length. */
    ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 8008a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a56:	0e1b      	lsrs	r3, r3, #24
 8008a58:	f003 030f 	and.w	r3, r3, #15
 8008a5c:	637b      	str	r3, [r7, #52]	; 0x34
    /* Check for minimal packet length. The check is done after the endian swapping
       since the compiler may possibly be able to optimize the lookup of
       "nx_packet_length" and therefore reduce the amount of work performing these
       size checks. The endian logic is okay since packets must always have
       payloads greater than the IP header in size.  */
    if ((packet_ptr -> nx_packet_length <= (ip_header_length << 2)) ||
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d902      	bls.n	8008a70 <_nx_ipv4_packet_receive+0x120>
 8008a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6c:	2b04      	cmp	r3, #4
 8008a6e:	d80d      	bhi.n	8008a8c <_nx_ipv4_packet_receive+0x13c>
        /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_packets++;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	635a      	str	r2, [r3, #52]	; 0x34

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a7e:	1c5a      	adds	r2, r3, #1
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8008a84:	6838      	ldr	r0, [r7, #0]
 8008a86:	f000 fd27 	bl	80094d8 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8008a8a:	e1c0      	b.n	8008e0e <_nx_ipv4_packet_receive+0x4be>
    }
#endif

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (if_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_RX_CHECKSUM)
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <_nx_ipv4_packet_receive+0x14c>
    {
        compute_checksum = 0;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	64bb      	str	r3, [r7, #72]	; 0x48
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    if (compute_checksum == 1)
 8008a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d124      	bne.n	8008aec <_nx_ipv4_packet_receive+0x19c>
    {


        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* length is the size of IP header, including options */
                                           (UINT)(ip_header_length << 2),
 8008aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa4:	009a      	lsls	r2, r3, #2
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	2104      	movs	r1, #4
 8008aae:	6838      	ldr	r0, [r7, #0]
 8008ab0:	f7fe f889 	bl	8006bc6 <_nx_ip_checksum_compute>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	633b      	str	r3, [r7, #48]	; 0x30
                                           /* IPv4 header checksum doesn't care src/dest addresses */
                                           NULL, NULL);
        checksum =  ~checksum & NX_LOWER_16_MASK;
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	43db      	mvns	r3, r3
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check the checksum again.  */
        if (checksum)
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d012      	beq.n	8008aec <_nx_ipv4_packet_receive+0x19c>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aca:	1c5a      	adds	r2, r3, #1
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	635a      	str	r2, [r3, #52]	; 0x34

            /* Increment the IP checksum error.  */
            ip_ptr -> nx_ip_receive_checksum_errors++;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad4:	1c5a      	adds	r2, r3, #1
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* Checksum error, just release it.  */
            _nx_packet_release(packet_ptr);
 8008ae4:	6838      	ldr	r0, [r7, #0]
 8008ae6:	f000 fcf7 	bl	80094d8 <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 8008aea:	e190      	b.n	8008e0e <_nx_ipv4_packet_receive+0x4be>
    /* IP receive checksum processing is disabled... just check for and remove if
       necessary the IP option words.  */

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8008aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	ba1a      	rev	r2, r3
 8008af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008af4:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8008af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	ba1a      	rev	r2, r3
 8008afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008afe:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8008b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	ba1a      	rev	r2, r3
 8008b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b08:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8008b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	ba1a      	rev	r2, r3
 8008b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b12:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8008b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	ba1a      	rev	r2, r3
 8008b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b1c:	611a      	str	r2, [r3, #16]
    }
#endif /* NX_ENABLE_SOURCE_ADDRESS_CHECK */

    /* Determine if there are options in the IP header that make the length greater
       than the default length.  */
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 8008b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b20:	2b05      	cmp	r3, #5
 8008b22:	d949      	bls.n	8008bb8 <_nx_ipv4_packet_receive+0x268>
    {

        /* Process the IPv4 option.  */
        option_processed = _nx_ipv4_option_process(ip_ptr, packet_ptr);
 8008b24:	6839      	ldr	r1, [r7, #0]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7ff fe48 	bl	80087bc <_nx_ipv4_option_process>
 8008b2c:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Check the status.  */
        if (option_processed == NX_FALSE)
 8008b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d108      	bne.n	8008b46 <_nx_ipv4_packet_receive+0x1f6>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b38:	1c5a      	adds	r2, r3, #1
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

            /* IPv4 option error, toss the packet!  */
            _nx_packet_release(packet_ptr);
 8008b3e:	6838      	ldr	r0, [r7, #0]
 8008b40:	f000 fcca 	bl	80094d8 <_nx_packet_release>

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 8008b44:	e163      	b.n	8008e0e <_nx_ipv4_packet_receive+0x4be>
        }

        /* Setup a pointer to the last option word.  */
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 8008b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b52:	4413      	add	r3, r2
 8008b54:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Remove the option words prior to handling the IP header.  */
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 8008b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b58:	1f1a      	subs	r2, r3, #4
 8008b5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8008b5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b5e:	6912      	ldr	r2, [r2, #16]
 8008b60:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 8008b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b64:	1f1a      	subs	r2, r3, #4
 8008b66:	62ba      	str	r2, [r7, #40]	; 0x28
 8008b68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b6a:	68d2      	ldr	r2, [r2, #12]
 8008b6c:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_2;
 8008b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b70:	1f1a      	subs	r2, r3, #4
 8008b72:	62ba      	str	r2, [r7, #40]	; 0x28
 8008b74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b76:	6892      	ldr	r2, [r2, #8]
 8008b78:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 8008b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7c:	1f1a      	subs	r2, r3, #4
 8008b7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008b80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b82:	6852      	ldr	r2, [r2, #4]
 8008b84:	601a      	str	r2, [r3, #0]
        *word_ptr = (ULONG)(((ip_header_ptr -> nx_ip_header_word_0) & (~NX_IP_LENGTH_MASK)) | NX_IP_VERSION);
 8008b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f023 439e 	bic.w	r3, r3, #1325400064	; 0x4f000000
 8008b8e:	f043 428a 	orr.w	r2, r3, #1157627904	; 0x45000000
 8008b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b94:	601a      	str	r2, [r3, #0]

        /* Update the ip_header_ptr and the packet and the packet prepend pointer, ip header pointer and length.  */
        /*lint -e{929} -e{740} -e{826} suppress cast from pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)word_ptr;
 8008b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b98:	653b      	str	r3, [r7, #80]	; 0x50

        /*lint -e{928} suppress cast from pointer to pointer, since it is necessary  */
        packet_ptr -> nx_packet_prepend_ptr = (UCHAR *)word_ptr;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b9e:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	635a      	str	r2, [r3, #52]	; 0x34
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bae:	3b05      	subs	r3, #5
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	1ad2      	subs	r2, r2, r3
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	625a      	str	r2, [r3, #36]	; 0x24
    }
#endif

    /* Determine if the IP datagram is for this IP address or a broadcast IP on this
       network.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 8008bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bba:	691a      	ldr	r2, [r3, #16]
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	695b      	ldr	r3, [r3, #20]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d02f      	beq.n	8008c24 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for incoming IP address of zero.  Incoming IP address of zero should
           be received regardless of our current IP address.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 8008bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bc6:	691b      	ldr	r3, [r3, #16]
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d02b      	beq.n	8008c24 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for IP broadcast.  */
        (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 8008bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bce:	691a      	ldr	r2, [r3, #16]
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	401a      	ands	r2, r3
          if_ptr -> nx_interface_ip_network) &&
 8008bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd8:	69db      	ldr	r3, [r3, #28]
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d10a      	bne.n	8008bf4 <_nx_ipv4_packet_receive+0x2a4>
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 8008bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008be0:	691a      	ldr	r2, [r3, #16]
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	43db      	mvns	r3, r3
 8008be8:	401a      	ands	r2, r3
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 8008bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	43db      	mvns	r3, r3
          if_ptr -> nx_interface_ip_network) &&
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d017      	beq.n	8008c24 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for limited broadcast.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8008bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bf6:	691b      	ldr	r3, [r3, #16]
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 8008bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfc:	d012      	beq.n	8008c24 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for loopback address.  */
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8008bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c00:	691b      	ldr	r3, [r3, #16]
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 8008c02:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8008c06:	d303      	bcc.n	8008c10 <_nx_ipv4_packet_receive+0x2c0>
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 8008c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c0a:	691b      	ldr	r3, [r3, #16]
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	da09      	bge.n	8008c24 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for valid Multicast address.  */
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
 8008c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7fd ff69 	bl	8006af0 <_nx_igmp_multicast_check>
 8008c1e:	4603      	mov	r3, r0
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d076      	beq.n	8008d12 <_nx_ipv4_packet_receive+0x3c2>
    {

        /* Determine if this packet is fragmented.  If so, place it on the deferred processing
           queue.  The input packet will then be processed by an IP system thread.  */
        if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_FRAGMENT_MASK)
 8008c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d046      	beq.n	8008cbe <_nx_ipv4_packet_receive+0x36e>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive fragments count.  */
            ip_ptr -> nx_ip_total_fragments_received++;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c34:	1c5a      	adds	r2, r3, #1
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	669a      	str	r2, [r3, #104]	; 0x68
#ifdef NX_ENABLE_LOW_WATERMARK
            if (ip_ptr -> nx_ip_fragment_assembly &&
                (packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_available >=
                 packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_low_watermark))
#else
            if (ip_ptr -> nx_ip_fragment_assembly)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d033      	beq.n	8008cac <_nx_ipv4_packet_receive+0x35c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c44:	f3ef 8310 	mrs	r3, PRIMASK
 8008c48:	617b      	str	r3, [r7, #20]
    return(posture);
 8008c4a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008c4c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c4e:	b672      	cpsid	i
    return(int_posture);
 8008c50:	693b      	ldr	r3, [r7, #16]

                /* Yes, fragmenting is available.  Place the packet on the incoming
                   fragment queue.  */

                /* Disable interrupts.  */
                TX_DISABLE
 8008c52:	61bb      	str	r3, [r7, #24]

                /* Determine if the queue is empty.  */
                if (ip_ptr -> nx_ip_received_fragment_head)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00c      	beq.n	8008c78 <_nx_ipv4_packet_receive+0x328>
                {

                    /* Reassembly queue is not empty, add this packet to the end of
                       the queue.  */
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	61da      	str	r2, [r3, #28]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	61da      	str	r2, [r3, #28]
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 8008c76:	e00a      	b.n	8008c8e <_nx_ipv4_packet_receive+0x33e>
                else
                {

                    /* Reassembly queue is empty.  Just setup the head and tail pointers
                       to point to this packet.  */
                    ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                    packet_ptr -> nx_packet_queue_next =      NX_NULL;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	61da      	str	r2, [r3, #28]
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f383 8810 	msr	PRIMASK, r3
}
 8008c98:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
                /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	2102      	movs	r1, #2
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f003 f801 	bl	800bcac <_tx_event_flags_set>
                /* Fragmentation has not been enabled, toss the packet!  */
                _nx_packet_release(packet_ptr);
            }

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 8008caa:	e0b0      	b.n	8008e0e <_nx_ipv4_packet_receive+0x4be>
                ip_ptr -> nx_ip_receive_packets_dropped++;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	64da      	str	r2, [r3, #76]	; 0x4c
                _nx_packet_release(packet_ptr);
 8008cb6:	6838      	ldr	r0, [r7, #0]
 8008cb8:	f000 fc0e 	bl	80094d8 <_nx_packet_release>
            return;
 8008cbc:	e0a7      	b.n	8008e0e <_nx_ipv4_packet_receive+0x4be>
        }

        /* Determine what protocol the current IP datagram is.  */
        protocol =  (ip_header_ptr -> nx_ip_header_word_2 >> 16) & 0xFF;
 8008cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	0c1b      	lsrs	r3, r3, #16
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the IP header from the packet.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	f103 0214 	add.w	r2, r3, #20
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	609a      	str	r2, [r3, #8]

        /* Adjust the length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	f1a3 0214 	sub.w	r2, r3, #20
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

        /* Increment the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered++;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a1b      	ldr	r3, [r3, #32]
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	621a      	str	r2, [r3, #32]

        /* Increment the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	441a      	add	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	625a      	str	r2, [r3, #36]	; 0x24
#endif
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 8008cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7fe f9eb 	bl	80070d8 <_nx_ip_dispatch_process>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 8082 	beq.w	8008e0e <_nx_ipv4_packet_receive+0x4be>
        {
            _nx_packet_release(packet_ptr);
 8008d0a:	6838      	ldr	r0, [r7, #0]
 8008d0c:	f000 fbe4 	bl	80094d8 <_nx_packet_release>
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 8008d10:	e07d      	b.n	8008e0e <_nx_ipv4_packet_receive+0x4be>
    }
    /* Try to receive the DHCP message before release this packet.
       NetX should receive the unicast DHCP message when interface IP address is zero.  */

    /* Check if this IP interface has IP address.  */
    else if (if_ptr -> nx_interface_ip_address == 0)
 8008d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d15a      	bne.n	8008dd0 <_nx_ipv4_packet_receive+0x480>
    {

        /* Determine what protocol the current IP datagram is.  */
        protocol =  ip_header_ptr -> nx_ip_header_word_2 & NX_IP_PROTOCOL_MASK;
 8008d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d22:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check if this packet is UDP message.  */
        if (protocol == NX_IP_UDP)
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8008d2a:	d137      	bne.n	8008d9c <_nx_ipv4_packet_receive+0x44c>
        {

            /* Remove the IP header from the packet.  */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	f103 0214 	add.w	r2, r3, #20
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	609a      	str	r2, [r3, #8]

            /* Adjust the length.  */
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3c:	f1a3 0214 	sub.w	r2, r3, #20
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef NX_DISABLE_IP_INFO

            /* Increment the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered++;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a1b      	ldr	r3, [r3, #32]
 8008d48:	1c5a      	adds	r2, r3, #1
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	621a      	str	r2, [r3, #32]

            /* Increment the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	441a      	add	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	625a      	str	r2, [r3, #36]	; 0x24
#endif

            /* Pickup the pointer to the head of the UDP packet.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	623b      	str	r3, [r7, #32]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	ba1a      	rev	r2, r3
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	601a      	str	r2, [r3, #0]

            /* Pickup the destination UDP port.  */
            dest_port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	61fb      	str	r3, [r7, #28]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	ba1a      	rev	r2, r3
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	601a      	str	r2, [r3, #0]

            /* Check if this packet is DHCP message.  */
            if (dest_port == 68)
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	2b44      	cmp	r3, #68	; 0x44
 8008d82:	d10b      	bne.n	8008d9c <_nx_ipv4_packet_receive+0x44c>
            {
                if (ip_ptr -> nx_ip_udp_packet_receive)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d006      	beq.n	8008d9c <_nx_ipv4_packet_receive+0x44c>
                {

                    /* Yes, dispatch it to the appropriate UDP handler if present.  */
                    (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	4798      	blx	r3

                    return;
 8008d9a:	e038      	b.n	8008e0e <_nx_ipv4_packet_receive+0x4be>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Decrement the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered--;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a1b      	ldr	r3, [r3, #32]
 8008da0:	1e5a      	subs	r2, r3, #1
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	621a      	str	r2, [r3, #32]

        /* Decrement the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	1ad2      	subs	r2, r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008db8:	1c5a      	adds	r2, r3, #1
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 8008dc8:	6838      	ldr	r0, [r7, #0]
 8008dca:	f000 fb85 	bl	80094d8 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8008dce:	e01e      	b.n	8008e0e <_nx_ipv4_packet_receive+0x4be>
    }
    else if (ip_ptr -> nx_ip_forward_packet_process)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00b      	beq.n	8008df2 <_nx_ipv4_packet_receive+0x4a2>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packets forwarded counter.  */
        ip_ptr -> nx_ip_packets_forwarded++;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	629a      	str	r2, [r3, #40]	; 0x28
#endif

        /* The packet is not for this IP instance so call the
           forward IP packet processing routine.  */
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	4798      	blx	r3
 8008df0:	e00d      	b.n	8008e0e <_nx_ipv4_packet_receive+0x4be>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e00:	1c5a      	adds	r2, r3, #1
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 8008e06:	6838      	ldr	r0, [r7, #0]
 8008e08:	f000 fb66 	bl	80094d8 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8008e0c:	bf00      	nop
    }
}
 8008e0e:	3758      	adds	r7, #88	; 0x58
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <_nx_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                          ULONG packet_type, ULONG wait_option)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08c      	sub	sp, #48	; 0x30
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
 8008e20:	603b      	str	r3, [r7, #0]
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Make sure the packet_type does not go beyond nx_packet_data_end. */
    if (pool_ptr -> nx_packet_pool_payload_size < packet_type)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d901      	bls.n	8008e30 <_nx_packet_allocate+0x1c>
    {
        return(NX_INVALID_PARAMETERS);
 8008e2c:	234d      	movs	r3, #77	; 0x4d
 8008e2e:	e0b1      	b.n	8008f94 <_nx_packet_allocate+0x180>
    }

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e36:	f3ef 8310 	mrs	r3, PRIMASK
 8008e3a:	61fb      	str	r3, [r7, #28]
    return(posture);
 8008e3c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8008e3e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e40:	b672      	cpsid	i
    return(int_posture);
 8008e42:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_ALLOCATE, pool_ptr, 0, packet_type, pool_ptr -> nx_packet_pool_available, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Disable interrupts to get a packet from the pool.  */
    TX_DISABLE
 8008e44:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there is an available packet.  */
    if (pool_ptr -> nx_packet_pool_available)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d03d      	beq.n	8008eca <_nx_packet_allocate+0xb6>
    {

        /* Yes, a packet is available.  Decrement the available count.  */
        pool_ptr -> nx_packet_pool_available--;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	1e5a      	subs	r2, r3, #1
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	609a      	str	r2, [r3, #8]

        /* Pickup the current packet pointer.  */
        work_ptr =  pool_ptr -> nx_packet_pool_available_list;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	69db      	ldr	r3, [r3, #28]
 8008e5c:	623b      	str	r3, [r7, #32]

        /* Modify the available list to point at the next packet in the pool. */
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	69da      	ldr	r2, [r3, #28]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	61da      	str	r2, [r3, #28]

        /* Setup various fields for this packet.  */
        work_ptr -> nx_packet_queue_next =   NX_NULL;
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
        work_ptr -> nx_packet_next =         NX_NULL;
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	605a      	str	r2, [r3, #4]
        work_ptr -> nx_packet_last =         NX_NULL;
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	2200      	movs	r2, #0
 8008e76:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr -> nx_packet_length =       0;
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	625a      	str	r2, [r3, #36]	; 0x24
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	691a      	ldr	r2, [r3, #16]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	441a      	add	r2, r3
 8008e86:	6a3b      	ldr	r3, [r7, #32]
 8008e88:	609a      	str	r2, [r3, #8]
        work_ptr -> nx_packet_append_ptr =   work_ptr -> nx_packet_prepend_ptr;
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	689a      	ldr	r2, [r3, #8]
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	60da      	str	r2, [r3, #12]
        work_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	2200      	movs	r2, #0
 8008e96:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        work_ptr -> nx_packet_interface_capability_flag = 0;
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
        /* Set the TCP queue to the value that indicates it has been allocated.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8008ea4:	621a      	str	r2, [r3, #32]
        work_ptr -> nx_packet_ipsec_sa_ptr = NX_NULL;
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Initialize the IP version field */
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	2204      	movs	r2, #4
 8008eaa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#endif /* !NX_DISABLE_IPV4  */

        /* Initialize the IP identification flag.  */
        work_ptr -> nx_packet_identical_copy = NX_FALSE;
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Initialize the IP header length. */
        work_ptr -> nx_packet_ip_header_length = 0;
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
#ifdef NX_ENABLE_THREAD
        work_ptr -> nx_packet_type = 0;
#endif /* NX_ENABLE_THREAD  */

        /* Place the new packet pointer in the return destination.  */
        *packet_ptr =  work_ptr;
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	6a3a      	ldr	r2, [r7, #32]
 8008ec2:	601a      	str	r2, [r3, #0]

        /* Set status to success.  */
        status =  NX_SUCCESS;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ec8:	e05d      	b.n	8008f86 <_nx_packet_allocate+0x172>
    else
    {

#ifndef NX_DISABLE_PACKET_INFO
        /* Increment the packet pool empty request count.  */
        pool_ptr -> nx_packet_pool_empty_requests++;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	611a      	str	r2, [r3, #16]
#endif

        /* Determine if the request specifies suspension.  */
        if (wait_option)
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d053      	beq.n	8008f82 <_nx_packet_allocate+0x16e>

            /* Prepare for suspension of this thread.  */

#ifndef NX_DISABLE_PACKET_INFO
            /* Increment the packet pool empty request suspension count.  */
            pool_ptr -> nx_packet_pool_empty_suspensions++;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	615a      	str	r2, [r3, #20]
#endif

            /* Pickup thread pointer.  */
            thread_ptr =  _tx_thread_current_ptr;
 8008ee4:	4b2d      	ldr	r3, [pc, #180]	; (8008f9c <_nx_packet_allocate+0x188>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	4a2c      	ldr	r2, [pc, #176]	; (8008fa0 <_nx_packet_allocate+0x18c>)
 8008eee:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this pool control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (void *)pool_ptr;
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Save the return packet pointer address as well.  */
            thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	67da      	str	r2, [r3, #124]	; 0x7c

            /* Save the packet type (or prepend offset) so this can be added
               after a new packet becomes available.  */
            thread_ptr -> tx_thread_suspend_info =  packet_type;
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	679a      	str	r2, [r3, #120]	; 0x78

            /* Setup suspension list.  */
            if (pool_ptr -> nx_packet_pool_suspension_list)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d012      	beq.n	8008f30 <_nx_packet_allocate+0x11c>
            {

                /* This list is not NULL, add current thread to the end. */
                thread_ptr -> tx_thread_suspended_next =
                    pool_ptr -> nx_packet_pool_suspension_list;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =
                    (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_previous =
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	675a      	str	r2, [r3, #116]	; 0x74
                ((pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f24:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr;
                (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f2c:	675a      	str	r2, [r3, #116]	; 0x74
 8008f2e:	e008      	b.n	8008f42 <_nx_packet_allocate+0x12e>
            else
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f34:	62da      	str	r2, [r3, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_next =            thread_ptr;
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f3a:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =        thread_ptr;
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f40:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            pool_ptr -> nx_packet_pool_suspended_count++;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	220c      	movs	r2, #12
 8008f50:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	2201      	movs	r2, #1
 8008f56:	639a      	str	r2, [r3, #56]	; 0x38

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008f58:	4b12      	ldr	r3, [pc, #72]	; (8008fa4 <_nx_packet_allocate+0x190>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	4a11      	ldr	r2, [pc, #68]	; (8008fa4 <_nx_packet_allocate+0x190>)
 8008f60:	6013      	str	r3, [r2, #0]

            /* Save the timeout value.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	683a      	ldr	r2, [r7, #0]
 8008f66:	64da      	str	r2, [r3, #76]	; 0x4c
 8008f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f383 8810 	msr	PRIMASK, r3
}
 8008f72:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8008f74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f76:	f004 fb5f 	bl	800d638 <_tx_thread_system_suspend>
                NX_PACKET_DEBUG(__FILE__, __LINE__, *packet_ptr);
            }
#endif /* NX_ENABLE_PACKET_DEBUG_INFO */

            /* Return the completion status.  */
            return(thread_ptr -> tx_thread_suspend_status);
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f80:	e008      	b.n	8008f94 <_nx_packet_allocate+0x180>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  NX_NO_PACKET;
 8008f82:	2301      	movs	r3, #1
 8008f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f88:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f383 8810 	msr	PRIMASK, r3
}
 8008f90:	bf00      	nop

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_ALLOCATE, 0, *packet_ptr, 0, 0);

    /* Return completion status.  */
    return(status);
 8008f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3730      	adds	r7, #48	; 0x30
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	20014884 	.word	0x20014884
 8008fa0:	0800924d 	.word	0x0800924d
 8008fa4:	2001491c 	.word	0x2001491c

08008fa8 <_nx_packet_copy>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_copy(NX_PACKET *packet_ptr, NX_PACKET **new_packet_ptr,
                      NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08e      	sub	sp, #56	; 0x38
 8008fac:	af02      	add	r7, sp, #8
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	607a      	str	r2, [r7, #4]
 8008fb4:	603b      	str	r3, [r7, #0]
ULONG                  trace_timestamp;
#endif


    /* Default the return packet pointer to NULL.  */
    *new_packet_ptr =  NX_NULL;
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	601a      	str	r2, [r3, #0]

    /* Default the first packet to TRUE.  */
    first_packet = NX_TRUE;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_COPY, packet_ptr, 0, pool_ptr, wait_option, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Determine if there is anything to copy.  */
    if (packet_ptr -> nx_packet_length == 0)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d101      	bne.n	8008fcc <_nx_packet_copy+0x24>
    {

        /* Empty source packet, return an error.  */
        return(NX_INVALID_PACKET);
 8008fc8:	2312      	movs	r3, #18
 8008fca:	e079      	b.n	80090c0 <_nx_packet_copy+0x118>
    }

    /* Allocate a new packet from the default packet pool supplied.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 8008fcc:	f107 0114 	add.w	r1, r7, #20
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff ff1d 	bl	8008e14 <_nx_packet_allocate>
 8008fda:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the packet was not allocated.  */
    if (status != NX_SUCCESS)
 8008fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d001      	beq.n	8008fe6 <_nx_packet_copy+0x3e>
    {

        /* Return the error code from the packet allocate routine.  */
        return(status);
 8008fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe4:	e06c      	b.n	80090c0 <_nx_packet_copy+0x118>
    }

    /* Copy the packet interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized by _nx_packet_allocate. */
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008fec:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* FEATURE_NX_IPV6 */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

    /* Copy the packet interface capability. */
    work_ptr -> nx_packet_interface_capability_flag = packet_ptr -> nx_packet_interface_capability_flag;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008ff4:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef NX_IPSEC_ENABLE
    work_ptr -> nx_packet_ipsec_sa_ptr = packet_ptr -> nx_packet_ipsec_sa_ptr;
#endif /* NX_IPSEC_ENABLE */

    /* Save the source packet pointer.  */
    source_ptr =  packet_ptr;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	627b      	str	r3, [r7, #36]	; 0x24
    do
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check if it is the first packet.  */
        if (first_packet == NX_TRUE)
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d110      	bne.n	8009022 <_nx_packet_copy+0x7a>

            /* Yes, it is, copied the data beginning at data starting position.  */

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	68da      	ldr	r2, [r3, #12]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 800900c:	6978      	ldr	r0, [r7, #20]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6919      	ldr	r1, [r3, #16]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a3a      	ldr	r2, [r7, #32]
 800901a:	f000 f855 	bl	80090c8 <_nx_packet_data_append>
 800901e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009020:	e00f      	b.n	8009042 <_nx_packet_copy+0x9a>
        else
        {

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	68da      	ldr	r2, [r3, #12]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 800902e:	6978      	ldr	r0, [r7, #20]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6899      	ldr	r1, [r3, #8]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a3a      	ldr	r2, [r7, #32]
 800903c:	f000 f844 	bl	80090c8 <_nx_packet_data_append>
 8009040:	62f8      	str	r0, [r7, #44]	; 0x2c
        }

        /* Determine if there was an error in the data append.  */
        if (status != NX_SUCCESS)
 8009042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009044:	2b00      	cmp	r3, #0
 8009046:	d005      	beq.n	8009054 <_nx_packet_copy+0xac>
        {

            /* An error is present, release the new packet.  */
            _nx_packet_release(work_ptr);
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	4618      	mov	r0, r3
 800904c:	f000 fa44 	bl	80094d8 <_nx_packet_release>

            /* Return the error code from the packet data append service.  */
            return(status);
 8009050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009052:	e035      	b.n	80090c0 <_nx_packet_copy+0x118>
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the packet chain.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	60fb      	str	r3, [r7, #12]

        /* Set the first packet to FALSE.  */
        first_packet = NX_FALSE;
 800905a:	2300      	movs	r3, #0
 800905c:	62bb      	str	r3, [r7, #40]	; 0x28
    } while (packet_ptr);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1ca      	bne.n	8008ffa <_nx_packet_copy+0x52>
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Adjust the prepend pointer and data length.  */
    /*lint --e{946} --e{947} --e{732} suppress pointer subtraction, since it is necessary. */
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	61fb      	str	r3, [r7, #28]
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	6919      	ldr	r1, [r3, #16]
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	69fa      	ldr	r2, [r7, #28]
 8009078:	440a      	add	r2, r1
 800907a:	609a      	str	r2, [r3, #8]
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	69fa      	ldr	r2, [r7, #28]
 8009084:	1a8a      	subs	r2, r1, r2
 8009086:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the ip_header information. */
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 8009088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	61bb      	str	r3, [r7, #24]
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	6919      	ldr	r1, [r3, #16]
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	440a      	add	r2, r1
 800909e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Determine if the packet copy was successful.  */
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d005      	beq.n	80090b8 <_nx_packet_copy+0x110>
    {

        /* An error is present, release the new packet.  */
        _nx_packet_release(work_ptr);
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fa12 	bl	80094d8 <_nx_packet_release>

        /* Return an error code.  */
        return(NX_INVALID_PACKET);
 80090b4:	2312      	movs	r3, #18
 80090b6:	e003      	b.n	80090c0 <_nx_packet_copy+0x118>
    }
    else
    {

        /* Everything is okay, return the new packet pointer.  */
        *new_packet_ptr =  work_ptr;
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	601a      	str	r2, [r3, #0]

        /* Update the trace event with the status.  */
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_COPY, 0, work_ptr, 0, 0);

        /* Return success status.  */
        return(NX_SUCCESS);
 80090be:	2300      	movs	r3, #0
    }
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3730      	adds	r7, #48	; 0x30
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <_nx_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                             NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08c      	sub	sp, #48	; 0x30
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	603b      	str	r3, [r7, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
UINT       status;                 /* Return status              */
NX_PACKET *new_list_ptr;           /* Head of new list pointer   */
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 80090d6:	2300      	movs	r3, #0
 80090d8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_APPEND, packet_ptr, data_start, data_size, pool_ptr, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Calculate the number of bytes available at the end of the supplied packet.  */
    if (packet_ptr -> nx_packet_last)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d016      	beq.n	8009110 <_nx_packet_data_append+0x48>
    {

        /* More than one packet.  Walk the packet chain starting at the last packet
           to calculate the remaining bytes.  */
        available_bytes =  0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	627b      	str	r3, [r7, #36]	; 0x24
        work_ptr =  packet_ptr -> nx_packet_last;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	617b      	str	r3, [r7, #20]

            /* Calculate the available bytes in this packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	695a      	ldr	r2, [r3, #20]
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	4413      	add	r3, r2
 80090fc:	627b      	str	r3, [r7, #36]	; 0x24

            /* Remember the last packet.  */
            last_packet =  work_ptr;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Move to the next packet.   There typically won't be another packet, but just in
               case the logic is here for it!  */
            work_ptr =  work_ptr -> nx_packet_next;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	617b      	str	r3, [r7, #20]
        } while (work_ptr);
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1ee      	bne.n	80090ec <_nx_packet_data_append+0x24>
 800910e:	e005      	b.n	800911c <_nx_packet_data_append+0x54>
#endif /* NX_DISABLE_PACKET_CHAIN */
    {

        /* Just calculate the number of bytes available in the first packet.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	695a      	ldr	r2, [r3, #20]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Determine if any new packets are required to satisfy this request. */
    if (available_bytes < data_size)
 800911c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	429a      	cmp	r2, r3
 8009122:	d247      	bcs.n	80091b4 <_nx_packet_data_append+0xec>
    {

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Setup a temporary head pointer.  */
        new_list_ptr =  NX_NULL;
 8009124:	2300      	movs	r3, #0
 8009126:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Loop to pickup enough packets to complete the append request.  */
        while (available_bytes < data_size)
 8009128:	e033      	b.n	8009192 <_nx_packet_data_append+0xca>
        {

            /* Allocate a new packet.  */
            status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 800912a:	f107 0114 	add.w	r1, r7, #20
 800912e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009130:	2200      	movs	r2, #0
 8009132:	6838      	ldr	r0, [r7, #0]
 8009134:	f7ff fe6e 	bl	8008e14 <_nx_packet_allocate>
 8009138:	61b8      	str	r0, [r7, #24]

            /* Determine if an error is present.  */
            if (status)
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d007      	beq.n	8009150 <_nx_packet_data_append+0x88>
            {

                /* Yes, an error is present.   */

                /* First release any packets that have been allocated so far.  */
                if (new_list_ptr)
 8009140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <_nx_packet_data_append+0x84>
                {
                    _nx_packet_release(new_list_ptr);
 8009146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009148:	f000 f9c6 	bl	80094d8 <_nx_packet_release>
                }

                /* Return the error status to the caller of this service.  */
                return(status);
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	e078      	b.n	8009242 <_nx_packet_data_append+0x17a>

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, work_ptr);

            /* No error is present.  Link the new packet to the temporary list being built.  */
            if (new_list_ptr)
 8009150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009152:	2b00      	cmp	r3, #0
 8009154:	d012      	beq.n	800917c <_nx_packet_data_append+0xb4>
            {

                /* Determine if there is already more than one packet on the list.  */
                if (new_list_ptr -> nx_packet_last)
 8009156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d007      	beq.n	800916e <_nx_packet_data_append+0xa6>
                {

                    /* Yes, link up the last packet to the new packet and update the
                       last pointer.  */
                    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized in _nx_packet_allocate. */
                    (new_list_ptr -> nx_packet_last) -> nx_packet_next =  work_ptr;
 800915e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	605a      	str	r2, [r3, #4]
                    new_list_ptr -> nx_packet_last =  work_ptr;
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916a:	619a      	str	r2, [r3, #24]
 800916c:	e008      	b.n	8009180 <_nx_packet_data_append+0xb8>
                else
                {

                    /* Second packet allocated.  Just setup the last and next in the
                       head pointer.  */
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800916e:	697a      	ldr	r2, [r7, #20]
 8009170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009172:	619a      	str	r2, [r3, #24]
                    new_list_ptr -> nx_packet_next =  work_ptr;
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009178:	605a      	str	r2, [r3, #4]
 800917a:	e001      	b.n	8009180 <_nx_packet_data_append+0xb8>
            }
            else
            {

                /* Just setup the temporary list head.  */
                new_list_ptr =  work_ptr;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	62fb      	str	r3, [r7, #44]	; 0x2c
               is in the new packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            /*lint -e{613} suppress possible use of null pointer, since "work_ptr" was set in _nx_packet_allocate. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	695a      	ldr	r2, [r3, #20]
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 800918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918e:	4413      	add	r3, r2
 8009190:	627b      	str	r3, [r7, #36]	; 0x24
        while (available_bytes < data_size)
 8009192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	429a      	cmp	r2, r3
 8009198:	d3c7      	bcc.n	800912a <_nx_packet_data_append+0x62>
        }

        /* At this point, all the necessary packets have been allocated and are present
           on the temporary list.  We need to link this new list to the end of the supplied
           packet.  */
        if (last_packet)
 800919a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <_nx_packet_data_append+0xe0>
        {

            /* Already more than one packet.  Add the new packet list to the end.  */
            last_packet -> nx_packet_next =  new_list_ptr;
 80091a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091a4:	605a      	str	r2, [r3, #4]
 80091a6:	e002      	b.n	80091ae <_nx_packet_data_append+0xe6>
        }
        else
        {

            /* Link the new packet list to the head packet.  */
            packet_ptr -> nx_packet_next =  new_list_ptr;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear the last packet that was used to maintain the new list.  */
        /*lint -e{613} suppress possible use of null pointer, since "new_list_ptr" was set in previous loop. */
        new_list_ptr -> nx_packet_last =  NX_NULL;
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	2200      	movs	r2, #0
 80091b2:	619a      	str	r2, [r3, #24]
        return(NX_SIZE_ERROR);
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Setup the new data length in the packet.  */
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	441a      	add	r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Now copy the supplied data buffer at the end of the packet.  */
    source_ptr =  (UCHAR *)data_start;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	61fb      	str	r3, [r7, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
    if (packet_ptr -> nx_packet_last)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <_nx_packet_data_append+0x10c>
    {
        work_ptr =    packet_ptr -> nx_packet_last;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	617b      	str	r3, [r7, #20]
 80091d2:	e032      	b.n	800923a <_nx_packet_data_append+0x172>
    }
    else
    {
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr =    packet_ptr;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	617b      	str	r3, [r7, #20]
#ifndef NX_DISABLE_PACKET_CHAIN
    }
    while (data_size)
 80091d8:	e02f      	b.n	800923a <_nx_packet_data_append+0x172>
    {

        /* Determine the amount of memory to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	695a      	ldr	r2, [r3, #20]
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	461a      	mov	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d202      	bcs.n	80091f2 <_nx_packet_data_append+0x12a>
        {
            copy_size =  data_size;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	623b      	str	r3, [r7, #32]
 80091f0:	e005      	b.n	80091fe <_nx_packet_data_append+0x136>
        }
        else
        {

            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            copy_size =  (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	695a      	ldr	r2, [r3, #20]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	623b      	str	r3, [r7, #32]
#else
        copy_size = data_size;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Copy the data into the current packet buffer.  */
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size); /* Use case of memcpy is verified.  lgtm[cpp/banned-api-usage-required-any] */
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	6a3a      	ldr	r2, [r7, #32]
 8009204:	69f9      	ldr	r1, [r7, #28]
 8009206:	4618      	mov	r0, r3
 8009208:	f005 fdd3 	bl	800edb2 <memcpy>

        /* Adjust the remaining data size.  */
        data_size =  data_size - copy_size;
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6a3b      	ldr	r3, [r7, #32]
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	607b      	str	r3, [r7, #4]

        /* Update this packets append pointer.  */
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	68d9      	ldr	r1, [r3, #12]
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	6a3a      	ldr	r2, [r7, #32]
 800921c:	440a      	add	r2, r1
 800921e:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Any more data left to append?  */
        if (data_size)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d009      	beq.n	800923a <_nx_packet_data_append+0x172>
        {

            /* Yes, there is more to move.  Update the source pointer, move the work pointer
               to the next packet in the chain and update the last packet pointer.  */
            source_ptr =  source_ptr + copy_size;
 8009226:	69fa      	ldr	r2, [r7, #28]
 8009228:	6a3b      	ldr	r3, [r7, #32]
 800922a:	4413      	add	r3, r2
 800922c:	61fb      	str	r3, [r7, #28]
            work_ptr =  work_ptr -> nx_packet_next;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	617b      	str	r3, [r7, #20]
            packet_ptr -> nx_packet_last =  work_ptr;
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	619a      	str	r2, [r3, #24]
    while (data_size)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1cc      	bne.n	80091da <_nx_packet_data_append+0x112>

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Return successful status.  */
    return(NX_SUCCESS);
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3730      	adds	r7, #48	; 0x30
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <_nx_packet_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_packet_pool_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b088      	sub	sp, #32
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
NX_PACKET_POOL *pool_ptr;   /* Working packet pool pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to packet pool control block.  */
    pool_ptr =  (NX_PACKET_POOL *)thread_ptr -> tx_thread_suspend_control_block;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800925a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800925c:	f3ef 8310 	mrs	r3, PRIMASK
 8009260:	617b      	str	r3, [r7, #20]
    return(posture);
 8009262:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009264:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009266:	b672      	cpsid	i
    return(int_posture);
 8009268:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE
 800926a:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009270:	2b00      	cmp	r3, #0
 8009272:	d042      	beq.n	80092fa <_nx_packet_pool_cleanup+0xae>
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d03f      	beq.n	80092fa <_nx_packet_pool_cleanup+0xae>
        (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 800927e:	4a23      	ldr	r2, [pc, #140]	; (800930c <_nx_packet_pool_cleanup+0xc0>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d13a      	bne.n	80092fa <_nx_packet_pool_cleanup+0xae>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	669a      	str	r2, [r3, #104]	; 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	429a      	cmp	r2, r3
 8009292:	d103      	bne.n	800929c <_nx_packet_pool_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	2200      	movs	r2, #0
 8009298:	62da      	str	r2, [r3, #44]	; 0x2c
 800929a:	e012      	b.n	80092c2 <_nx_packet_pool_cleanup+0x76>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer if necessary.  */
            if (pool_ptr -> nx_packet_pool_suspension_list == thread_ptr)
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d103      	bne.n	80092ae <_nx_packet_pool_cleanup+0x62>
            {
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	62da      	str	r2, [r3, #44]	; 0x2c
            }

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80092b6:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80092c0:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c6:	1e5a      	subs	r2, r3, #1
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d0:	2b0c      	cmp	r3, #12
 80092d2:	d112      	bne.n	80092fa <_nx_packet_pool_cleanup+0xae>

            /* Thread still suspended on the packet pool.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80092dc:	4b0c      	ldr	r3, [pc, #48]	; (8009310 <_nx_packet_pool_cleanup+0xc4>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3301      	adds	r3, #1
 80092e2:	4a0b      	ldr	r2, [pc, #44]	; (8009310 <_nx_packet_pool_cleanup+0xc4>)
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f383 8810 	msr	PRIMASK, r3
}
 80092f0:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f004 f8a0 	bl	800d438 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 80092f8:	e005      	b.n	8009306 <_nx_packet_pool_cleanup+0xba>
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	f383 8810 	msr	PRIMASK, r3
}
 8009304:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009306:	3720      	adds	r7, #32
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	5041434b 	.word	0x5041434b
 8009310:	2001491c 	.word	0x2001491c

08009314 <_nx_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                             VOID *pool_start, ULONG pool_size)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b092      	sub	sp, #72	; 0x48
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	607a      	str	r2, [r7, #4]
 8009320:	603b      	str	r3, [r7, #0]
CHAR           *payload_address;       /* Address of the first payload*/
VOID           *rounded_pool_start;    /* Rounded stating address     */


    /* Save the original payload size.  */
    original_payload_size =  payload_size;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	3303      	adds	r3, #3
 800932a:	f023 0303 	bic.w	r3, r3, #3
 800932e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009334:	1ad2      	subs	r2, r2, r3
 8009336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009338:	4413      	add	r3, r2
 800933a:	f023 0303 	bic.w	r3, r3, #3
 800933e:	653b      	str	r3, [r7, #80]	; 0x50

    /* Set the pool starting address. */
    pool_start = rounded_pool_start;
 8009340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009342:	603b      	str	r3, [r7, #0]

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 8009344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009346:	333c      	adds	r3, #60	; 0x3c
 8009348:	633b      	str	r3, [r7, #48]	; 0x30

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	3303      	adds	r3, #3
 800934e:	f023 0303 	bic.w	r3, r3, #3
 8009352:	633b      	str	r3, [r7, #48]	; 0x30

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 8009354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800935c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4413      	add	r3, r2
 8009362:	3303      	adds	r3, #3
 8009364:	f023 0203 	bic.w	r2, r3, #3
 8009368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	607b      	str	r3, [r7, #4]

    /* Clear pool fields. */
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 800936e:	223c      	movs	r2, #60	; 0x3c
 8009370:	2100      	movs	r1, #0
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f005 fca2 	bl	800ecbc <memset>

    /* Setup the basic packet pool fields.  */
    pool_ptr -> nx_packet_pool_name =             name_ptr;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	605a      	str	r2, [r3, #4]
    pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	62da      	str	r2, [r3, #44]	; 0x2c
    pool_ptr -> nx_packet_pool_suspended_count =  0;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	631a      	str	r2, [r3, #48]	; 0x30
    pool_ptr -> nx_packet_pool_start =            (CHAR *)pool_start;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	621a      	str	r2, [r3, #32]
    pool_ptr -> nx_packet_pool_size =             pool_size;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009394:	625a      	str	r2, [r3, #36]	; 0x24
    pool_ptr -> nx_packet_pool_payload_size =     original_payload_size;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800939a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Calculate the end of the pool's memory area.  */
    end_of_pool =  ((CHAR *)pool_start) + pool_size;
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093a0:	4413      	add	r3, r2
 80093a2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Walk through the pool area, setting up the available packet list.  */
    packets =            0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	647b      	str	r3, [r7, #68]	; 0x44
    packet_ptr =         (CHAR *)rounded_pool_start;
 80093a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093aa:	643b      	str	r3, [r7, #64]	; 0x40
    next_packet_ptr =    packet_ptr + (payload_size + header_size);
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b0:	4413      	add	r3, r2
 80093b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093b4:	4413      	add	r3, r2
 80093b6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    while (next_packet_ptr <= end_of_pool)
 80093b8:	e023      	b.n	8009402 <_nx_packet_pool_create+0xee>
    {

        /* Yes, we have another packet.  Increment the packet count.  */
        packets++;
 80093ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093bc:	3301      	adds	r3, #1
 80093be:	647b      	str	r3, [r7, #68]	; 0x44

        /* Setup the link to the next packet.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  (NX_PACKET *)next_packet_ptr;
 80093c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093c4:	61da      	str	r2, [r3, #28]

        /* Remember that this packet pool is the owner.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_pool_owner =  pool_ptr;
 80093c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	601a      	str	r2, [r3, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Clear the next packet pointer.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 80093cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ce:	2200      	movs	r2, #0
 80093d0:	605a      	str	r2, [r3, #4]
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Mark the packet as free.  */
        /*lint -e{929} -e{923} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 80093d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093d4:	f04f 32ff 	mov.w	r2, #4294967295
 80093d8:	621a      	str	r2, [r3, #32]

        /* Setup the packet data pointers.  */
        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);
 80093da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093de:	441a      	add	r2, r3
 80093e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093e2:	611a      	str	r2, [r3, #16]

        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 80093e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e8:	4413      	add	r3, r2
 80093ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093ec:	441a      	add	r2, r3
 80093ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093f0:	615a      	str	r2, [r3, #20]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, (NX_PACKET *)packet_ptr);

        /* Advance to the next packet.  */
        packet_ptr =   next_packet_ptr;
 80093f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f4:	643b      	str	r3, [r7, #64]	; 0x40

        /* Update the next packet pointer.  */
        next_packet_ptr =  packet_ptr + (payload_size + header_size);
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fa:	4413      	add	r3, r2
 80093fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093fe:	4413      	add	r3, r2
 8009400:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (next_packet_ptr <= end_of_pool)
 8009402:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009406:	429a      	cmp	r2, r3
 8009408:	d9d7      	bls.n	80093ba <_nx_packet_pool_create+0xa6>
    }

    /* Backup to the last packet in the pool.  */
    packet_ptr =  packet_ptr - (payload_size + header_size);
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940e:	4413      	add	r3, r2
 8009410:	425b      	negs	r3, r3
 8009412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009414:	4413      	add	r3, r2
 8009416:	643b      	str	r3, [r7, #64]	; 0x40

    /* Set the last packet's forward pointer to NULL.  */
    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  NX_NULL;
 8009418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800941a:	2200      	movs	r2, #0
 800941c:	61da      	str	r2, [r3, #28]

    /* Save the remaining information in the pool control packet.  */
    pool_ptr -> nx_packet_pool_available =  packets;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009422:	609a      	str	r2, [r3, #8]
    pool_ptr -> nx_packet_pool_total =      packets;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009428:	60da      	str	r2, [r3, #12]

    /* Set the packet pool available list.  */
    pool_ptr -> nx_packet_pool_available_list =  (NX_PACKET *)pool_start;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	61da      	str	r2, [r3, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009430:	f3ef 8310 	mrs	r3, PRIMASK
 8009434:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009436:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009438:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800943a:	b672      	cpsid	i
    return(int_posture);
 800943c:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_POOL_CREATE, pool_ptr, payload_size, pool_start, pool_size, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts to place the packet pool on the created list.  */
    TX_DISABLE
 800943e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the packet pool ID to make it valid.  */
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4a19      	ldr	r2, [pc, #100]	; (80094a8 <_nx_packet_pool_create+0x194>)
 8009444:	601a      	str	r2, [r3, #0]

    /* Place the packet pool on the list of created packet pools.  First,
       check for an empty list.  */
    if (_nx_packet_pool_created_ptr)
 8009446:	4b19      	ldr	r3, [pc, #100]	; (80094ac <_nx_packet_pool_create+0x198>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d012      	beq.n	8009474 <_nx_packet_pool_create+0x160>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous;
 800944e:	4b17      	ldr	r3, [pc, #92]	; (80094ac <_nx_packet_pool_create+0x198>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009454:	623b      	str	r3, [r7, #32]

        /* Place the new packet pool in the list.  */
        _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 8009456:	4b15      	ldr	r3, [pc, #84]	; (80094ac <_nx_packet_pool_create+0x198>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	639a      	str	r2, [r3, #56]	; 0x38
        tail_ptr -> nx_packet_pool_created_next =  pool_ptr;
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup this packet pool's created links.  */
        pool_ptr -> nx_packet_pool_created_previous =  tail_ptr;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6a3a      	ldr	r2, [r7, #32]
 8009468:	639a      	str	r2, [r3, #56]	; 0x38
        pool_ptr -> nx_packet_pool_created_next =      _nx_packet_pool_created_ptr;
 800946a:	4b10      	ldr	r3, [pc, #64]	; (80094ac <_nx_packet_pool_create+0x198>)
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	635a      	str	r2, [r3, #52]	; 0x34
 8009472:	e008      	b.n	8009486 <_nx_packet_pool_create+0x172>
    }
    else
    {

        /* The created packet pool list is empty.  Add packet pool to empty list.  */
        _nx_packet_pool_created_ptr =                  pool_ptr;
 8009474:	4a0d      	ldr	r2, [pc, #52]	; (80094ac <_nx_packet_pool_create+0x198>)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6013      	str	r3, [r2, #0]
        pool_ptr -> nx_packet_pool_created_next =      pool_ptr;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	635a      	str	r2, [r3, #52]	; 0x34
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Increment the number of packet pools created.  */
    _nx_packet_pool_created_count++;
 8009486:	4b0a      	ldr	r3, [pc, #40]	; (80094b0 <_nx_packet_pool_create+0x19c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3301      	adds	r3, #1
 800948c:	4a08      	ldr	r2, [pc, #32]	; (80094b0 <_nx_packet_pool_create+0x19c>)
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f383 8810 	msr	PRIMASK, r3
}
 800949a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3748      	adds	r7, #72	; 0x48
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	5041434b 	.word	0x5041434b
 80094ac:	20014830 	.word	0x20014830
 80094b0:	20014834 	.word	0x20014834

080094b4 <_nx_packet_pool_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _nx_packet_pool_initialize(VOID)
{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0

    /* Initialize the head pointer of the created packet pools list and the
       number of packet pools created.  */
    _nx_packet_pool_created_ptr =        NX_NULL;
 80094b8:	4b05      	ldr	r3, [pc, #20]	; (80094d0 <_nx_packet_pool_initialize+0x1c>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	601a      	str	r2, [r3, #0]
    _nx_packet_pool_created_count =      0;
 80094be:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <_nx_packet_pool_initialize+0x20>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]
}
 80094c4:	bf00      	nop
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	20014830 	.word	0x20014830
 80094d4:	20014834 	.word	0x20014834

080094d8 <_nx_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_release(NX_PACKET *packet_ptr)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08a      	sub	sp, #40	; 0x28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to free all packets chained together, not assuming they are
       from the same pool.  */
    while (packet_ptr)
 80094e0:	e0a5      	b.n	800962e <_nx_packet_release+0x156>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check to see if the packet is releasable.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 80094ea:	d011      	beq.n	8009510 <_nx_packet_release+0x38>
        {

#ifndef NX_DISABLE_PACKET_INFO
            /* Pickup the pool pointer.  */
            pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	61fb      	str	r3, [r7, #28]

            /* Check for a good pool pointer...  error must be the packet!  */
            if ((pool_ptr) && (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d009      	beq.n	800950c <_nx_packet_release+0x34>
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a50      	ldr	r2, [pc, #320]	; (8009640 <_nx_packet_release+0x168>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d104      	bne.n	800950c <_nx_packet_release+0x34>
            {

                /* Increment the packet pool invalid release error count.  */
                pool_ptr -> nx_packet_pool_invalid_releases++;
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	1c5a      	adds	r2, r3, #1
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	619a      	str	r2, [r3, #24]
            }
#endif

            /* Return an error indicating the packet could not be released.  */
            return(NX_PTR_ERROR);
 800950c:	2307      	movs	r3, #7
 800950e:	e093      	b.n	8009638 <_nx_packet_release+0x160>
        }
        /* End of packet check.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Pickup the next packet. */
        next_packet =  packet_ptr -> nx_packet_next;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009516:	f3ef 8310 	mrs	r3, PRIMASK
 800951a:	617b      	str	r3, [r7, #20]
    return(posture);
 800951c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800951e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009520:	b672      	cpsid	i
    return(int_posture);
 8009522:	693b      	ldr	r3, [r7, #16]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Disable interrupts to put this packet back in the packet pool.  */
        TX_DISABLE
 8009524:	623b      	str	r3, [r7, #32]

        /* Pickup the pool pointer.  */
        pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	61fb      	str	r3, [r7, #28]

        /* Determine if there are any threads suspended on the block pool.  */
        thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009530:	61bb      	str	r3, [r7, #24]
        if (thread_ptr)
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d062      	beq.n	80095fe <_nx_packet_release+0x126>
        {

            /* Remove the suspended thread from the list.  */

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	429a      	cmp	r2, r3
 8009540:	d103      	bne.n	800954a <_nx_packet_release+0x72>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  NX_NULL;
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	2200      	movs	r2, #0
 8009546:	62da      	str	r2, [r3, #44]	; 0x2c
 8009548:	e00d      	b.n	8009566 <_nx_packet_release+0x8e>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 8009556:	69ba      	ldr	r2, [r7, #24]
 8009558:	6f52      	ldr	r2, [r2, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800955a:	675a      	str	r2, [r3, #116]	; 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                    thread_ptr -> tx_thread_suspended_next;
 8009560:	69ba      	ldr	r2, [r7, #24]
 8009562:	6f12      	ldr	r2, [r2, #112]	; 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009564:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            pool_ptr -> nx_packet_pool_suspended_count--;
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800956a:	1e5a      	subs	r2, r3, #1
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	631a      	str	r2, [r3, #48]	; 0x30

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	2200      	movs	r2, #0
 8009574:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009576:	4b33      	ldr	r3, [pc, #204]	; (8009644 <_nx_packet_release+0x16c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3301      	adds	r3, #1
 800957c:	4a31      	ldr	r2, [pc, #196]	; (8009644 <_nx_packet_release+0x16c>)
 800957e:	6013      	str	r3, [r2, #0]
 8009580:	6a3b      	ldr	r3, [r7, #32]
 8009582:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f383 8810 	msr	PRIMASK, r3
}
 800958a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to look just like a new packet.  */
            packet_ptr -> nx_packet_queue_next  =  NX_NULL;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
            packet_ptr -> nx_packet_next        =  NX_NULL;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	605a      	str	r2, [r3, #4]
            packet_ptr -> nx_packet_last        =  NX_NULL;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
            packet_ptr -> nx_packet_length      =  0;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	625a      	str	r2, [r3, #36]	; 0x24
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	691a      	ldr	r2, [r3, #16]
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095ac:	441a      	add	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	609a      	str	r2, [r3, #8]
            packet_ptr -> nx_packet_append_ptr  =  packet_ptr -> nx_packet_prepend_ptr;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	689a      	ldr	r2, [r3, #8]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	60da      	str	r2, [r3, #12]
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            packet_ptr -> nx_packet_interface_capability_flag = 0;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
            /* Set the TCP queue to the value that indicates it has been allocated.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80095cc:	621a      	str	r2, [r3, #32]
            /* Clear the ipsec state. */
            packet_ptr -> nx_packet_ipsec_state = 0;
#endif /* NX_IPSEC_ENABLE */

            /* Clear the IP version.  */
            packet_ptr -> nx_packet_ip_version  =  0;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            /* Clear the IP identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_FALSE;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

            /* Initialize the IP header length. */
            packet_ptr -> nx_packet_ip_header_length = 0;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	601a      	str	r2, [r3, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 80095f6:	69b8      	ldr	r0, [r7, #24]
 80095f8:	f003 ff1e 	bl	800d438 <_tx_thread_system_resume>
 80095fc:	e015      	b.n	800962a <_nx_packet_release+0x152>

            /* No thread is suspended for a memory block.  */

            /* Mark the packet as free.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f04f 32ff 	mov.w	r2, #4294967295
 8009604:	621a      	str	r2, [r3, #32]

            /* Put the packet back in the available list.  */
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	69da      	ldr	r2, [r3, #28]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	61da      	str	r2, [r3, #28]

            /* Adjust the head pointer.  */
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	61da      	str	r2, [r3, #28]

            /* Increment the count of available blocks.  */
            pool_ptr -> nx_packet_pool_available++;
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	1c5a      	adds	r2, r3, #1
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	609a      	str	r2, [r3, #8]
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f383 8810 	msr	PRIMASK, r3
}
 8009628:	bf00      	nop
            TX_RESTORE
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the list.  */
        packet_ptr =  next_packet;
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	607b      	str	r3, [r7, #4]
    while (packet_ptr)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	f47f af56 	bne.w	80094e2 <_nx_packet_release+0xa>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Return completion status.  */
    return(NX_SUCCESS);
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3728      	adds	r7, #40	; 0x28
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	5041434b 	.word	0x5041434b
 8009644:	2001491c 	.word	0x2001491c

08009648 <_nx_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_transmit_release(NX_PACKET *packet_ptr)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b088      	sub	sp, #32
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009650:	f3ef 8310 	mrs	r3, PRIMASK
 8009654:	617b      	str	r3, [r7, #20]
    return(posture);
 8009656:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009658:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800965a:	b672      	cpsid	i
    return(int_posture);
 800965c:	693b      	ldr	r3, [r7, #16]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_TRANSMIT_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 800965e:	61bb      	str	r3, [r7, #24]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the packet is a queued TCP data packet.  Such packets cannot be released
       immediately, since they may need to be resent.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a1b      	ldr	r3, [r3, #32]
 8009664:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8009668:	d025      	beq.n	80096b6 <_nx_packet_transmit_release+0x6e>
        (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_FREE)))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a1b      	ldr	r3, [r3, #32]
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 800966e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009672:	d020      	beq.n	80096b6 <_nx_packet_transmit_release+0x6e>
    {

        /* Yes, this is indeed a TCP packet.  Just mark this with the NX_DRIVER_TX_DONE
           value to let the TCP layer know it is no longer queued up.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f04f 32dd 	mov.w	r2, #3722304989	; 0xdddddddd
 800967a:	61da      	str	r2, [r3, #28]

        /* Remove the IP header and adjust the length.  */
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8009686:	441a      	add	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8009696:	1a9a      	subs	r2, r3, r2
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Reset the IP header length. */
        packet_ptr -> nx_packet_ip_header_length = 0;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f383 8810 	msr	PRIMASK, r3
}
 80096ae:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  NX_SUCCESS;
 80096b0:	2300      	movs	r3, #0
 80096b2:	61fb      	str	r3, [r7, #28]
 80096b4:	e009      	b.n	80096ca <_nx_packet_transmit_release+0x82>
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	f383 8810 	msr	PRIMASK, r3
}
 80096c0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual packet release function.  */
        status =  _nx_packet_release(packet_ptr);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7ff ff08 	bl	80094d8 <_nx_packet_release>
 80096c8:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80096ca:	69fb      	ldr	r3, [r7, #28]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3720      	adds	r7, #32
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <_nx_rarp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_rarp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b088      	sub	sp, #32
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80096de:	f3ef 8310 	mrs	r3, PRIMASK
 80096e2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80096e4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80096e6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80096e8:	b672      	cpsid	i
    return(int_posture);
 80096ea:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80096ec:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if RARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_rarp_queue_process)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 3704 	ldr.w	r3, [r3, #1796]	; 0x704
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d110      	bne.n	800971a <_nx_rarp_packet_deferred_receive+0x46>

        /* RARP is not enabled.  */

#ifndef NX_DISABLE_RARP_INFO
        /* Increment the RARP invalid messages count...  */
        ip_ptr -> nx_ip_rarp_invalid_messages++;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80096fe:	1c5a      	adds	r2, r3, #1
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f383 8810 	msr	PRIMASK, r3
}
 8009710:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since RARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8009712:	6838      	ldr	r0, [r7, #0]
 8009714:	f7ff fee0 	bl	80094d8 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8009718:	e02f      	b.n	800977a <_nx_rarp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the RARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_rarp_deferred_received_packet_head)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 8009720:	2b00      	cmp	r3, #0
 8009722:	d011      	beq.n	8009748 <_nx_rarp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the RARP deferred queue.  */
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	2200      	movs	r2, #0
 8009732:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f383 8810 	msr	PRIMASK, r3
}
 8009746:	e018      	b.n	800977a <_nx_rarp_packet_deferred_receive+0xa6>
    {

        /* Empty RARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the RARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_rarp_deferred_received_packet_head =  packet_ptr;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        packet_ptr -> nx_packet_queue_next =                  NX_NULL;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	2200      	movs	r2, #0
 800975c:	61da      	str	r2, [r3, #28]
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	f383 8810 	msr	PRIMASK, r3
}
 8009768:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the RARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8009770:	2200      	movs	r2, #0
 8009772:	2120      	movs	r1, #32
 8009774:	4618      	mov	r0, r3
 8009776:	f002 fa99 	bl	800bcac <_tx_event_flags_set>
    }
}
 800977a:	3720      	adds	r7, #32
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <_nx_system_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_system_initialize(VOID)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0

    /* Check whether or not system has been initialized? */
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 8009784:	4b38      	ldr	r3, [pc, #224]	; (8009868 <_nx_system_initialize+0xe8>)
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	4b38      	ldr	r3, [pc, #224]	; (800986c <_nx_system_initialize+0xec>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	431a      	orrs	r2, r3
 800978e:	4b38      	ldr	r3, [pc, #224]	; (8009870 <_nx_system_initialize+0xf0>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	431a      	orrs	r2, r3
        _nx_system_build_options_3 | _nx_system_build_options_4 | _nx_system_build_options_5)
 8009794:	4b37      	ldr	r3, [pc, #220]	; (8009874 <_nx_system_initialize+0xf4>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	431a      	orrs	r2, r3
 800979a:	4b37      	ldr	r3, [pc, #220]	; (8009878 <_nx_system_initialize+0xf8>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4313      	orrs	r3, r2
    if (_nx_system_build_options_1 | _nx_system_build_options_2 |
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d15e      	bne.n	8009862 <_nx_system_initialize+0xe2>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Call the packet pool initialization component for NetX.  */
    _nx_packet_pool_initialize();
 80097a4:	f7ff fe86 	bl	80094b4 <_nx_packet_pool_initialize>

    /* Call the IP component initialization.  */
    _nx_ip_initialize();
 80097a8:	f7fe f89e 	bl	80078e8 <_nx_ip_initialize>

    /* Call the TCP component initialization.  */
    /*lint -e{522} suppress lack of side-effects.  */
    _nx_tcp_initialize();
 80097ac:	f000 f866 	bl	800987c <_nx_tcp_initialize>

    /* Setup the build options variables.  */
    _nx_system_build_options_1 = 0
 80097b0:	4b2d      	ldr	r3, [pc, #180]	; (8009868 <_nx_system_initialize+0xe8>)
 80097b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097b6:	601a      	str	r2, [r3, #0]

    /* Add the retry shift value to the options.  */
#if (NX_TCP_RETRY_SHIFT > 0xF)
    _nx_system_build_options_1 |=  0xF;
#else
    _nx_system_build_options_1 |=  NX_TCP_RETRY_SHIFT;
 80097b8:	4b2b      	ldr	r3, [pc, #172]	; (8009868 <_nx_system_initialize+0xe8>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a2a      	ldr	r2, [pc, #168]	; (8009868 <_nx_system_initialize+0xe8>)
 80097be:	6013      	str	r3, [r2, #0]
#endif

#if (NX_IP_PERIODIC_RATE > 0xFFFFUL)
    _nx_system_build_options_2 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_2 =  ((ULONG)NX_IP_PERIODIC_RATE) << 16;
 80097c0:	4b2a      	ldr	r3, [pc, #168]	; (800986c <_nx_system_initialize+0xec>)
 80097c2:	f44f 02c8 	mov.w	r2, #6553600	; 0x640000
 80097c6:	601a      	str	r2, [r3, #0]
#endif

#if (NX_ARP_EXPIRATION_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_EXPIRATION_RATE) << 8;
 80097c8:	4b28      	ldr	r3, [pc, #160]	; (800986c <_nx_system_initialize+0xec>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a27      	ldr	r2, [pc, #156]	; (800986c <_nx_system_initialize+0xec>)
 80097ce:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_UPDATE_RATE > 0xFF)
    _nx_system_build_options_2 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_2 |=  ((ULONG)NX_ARP_UPDATE_RATE);
 80097d0:	4b26      	ldr	r3, [pc, #152]	; (800986c <_nx_system_initialize+0xec>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f043 030a 	orr.w	r3, r3, #10
 80097d8:	4a24      	ldr	r2, [pc, #144]	; (800986c <_nx_system_initialize+0xec>)
 80097da:	6013      	str	r3, [r2, #0]

    /* Setup third option word.  */
#if (NX_TCP_ACK_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_3 =  ((ULONG)NX_TCP_ACK_TIMER_RATE) << 24;
 80097dc:	4b24      	ldr	r3, [pc, #144]	; (8009870 <_nx_system_initialize+0xf0>)
 80097de:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
 80097e2:	601a      	str	r2, [r3, #0]
#endif
#if (NX_TCP_FAST_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_FAST_TIMER_RATE) << 16;
 80097e4:	4b22      	ldr	r3, [pc, #136]	; (8009870 <_nx_system_initialize+0xf0>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80097ec:	4a20      	ldr	r2, [pc, #128]	; (8009870 <_nx_system_initialize+0xf0>)
 80097ee:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_TRANSMIT_TIMER_RATE > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_TRANSMIT_TIMER_RATE) << 8;
 80097f0:	4b1f      	ldr	r3, [pc, #124]	; (8009870 <_nx_system_initialize+0xf0>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097f8:	4a1d      	ldr	r2, [pc, #116]	; (8009870 <_nx_system_initialize+0xf0>)
 80097fa:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRY > 0xFF)
    _nx_system_build_options_3 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_3 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRY);
 80097fc:	4b1c      	ldr	r3, [pc, #112]	; (8009870 <_nx_system_initialize+0xf0>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f043 034b 	orr.w	r3, r3, #75	; 0x4b
 8009804:	4a1a      	ldr	r2, [pc, #104]	; (8009870 <_nx_system_initialize+0xf0>)
 8009806:	6013      	str	r3, [r2, #0]

    /* Setup the fourth option word.  */
#if (NX_TCP_KEEPALIVE_INITIAL > 0xFFFFUL)
    _nx_system_build_options_4 =  ((ULONG)0xFFFF0000);
#else
    _nx_system_build_options_4 =  ((ULONG)NX_TCP_KEEPALIVE_INITIAL) << 16;
 8009808:	4b1a      	ldr	r3, [pc, #104]	; (8009874 <_nx_system_initialize+0xf4>)
 800980a:	f04f 52e1 	mov.w	r2, #471859200	; 0x1c200000
 800980e:	601a      	str	r2, [r3, #0]
#endif
#if (NX_ARP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_4 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAXIMUM_RETRIES) << 8;
 8009810:	4b18      	ldr	r3, [pc, #96]	; (8009874 <_nx_system_initialize+0xf4>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 8009818:	4a16      	ldr	r2, [pc, #88]	; (8009874 <_nx_system_initialize+0xf4>)
 800981a:	6013      	str	r3, [r2, #0]
#endif
#if (NX_ARP_MAX_QUEUE_DEPTH > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF) << 4;
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_ARP_MAX_QUEUE_DEPTH) << 4;
 800981c:	4b15      	ldr	r3, [pc, #84]	; (8009874 <_nx_system_initialize+0xf4>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009824:	4a13      	ldr	r2, [pc, #76]	; (8009874 <_nx_system_initialize+0xf4>)
 8009826:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_KEEPALIVE_RETRIES > 0xF)
    _nx_system_build_options_4 |=  ((ULONG)0xF);
#else
    _nx_system_build_options_4 |=  ((ULONG)NX_TCP_KEEPALIVE_RETRIES);
 8009828:	4b12      	ldr	r3, [pc, #72]	; (8009874 <_nx_system_initialize+0xf4>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f043 030a 	orr.w	r3, r3, #10
 8009830:	4a10      	ldr	r2, [pc, #64]	; (8009874 <_nx_system_initialize+0xf4>)
 8009832:	6013      	str	r3, [r2, #0]

    /* Setup the fifth option word.  */
#if (NX_MAX_MULTICAST_GROUPS > 0xFF)
    _nx_system_build_options_5 =  ((ULONG)0xFF000000);
#else
    _nx_system_build_options_5 =  ((ULONG)NX_MAX_MULTICAST_GROUPS) << 24;
 8009834:	4b10      	ldr	r3, [pc, #64]	; (8009878 <_nx_system_initialize+0xf8>)
 8009836:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800983a:	601a      	str	r2, [r3, #0]
#endif
#if (NX_MAX_LISTEN_REQUESTS > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 16;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_MAX_LISTEN_REQUESTS) << 16;
 800983c:	4b0e      	ldr	r3, [pc, #56]	; (8009878 <_nx_system_initialize+0xf8>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8009844:	4a0c      	ldr	r2, [pc, #48]	; (8009878 <_nx_system_initialize+0xf8>)
 8009846:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_RETRIES > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF) << 8;
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_RETRIES) << 8;
 8009848:	4b0b      	ldr	r3, [pc, #44]	; (8009878 <_nx_system_initialize+0xf8>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8009850:	4a09      	ldr	r2, [pc, #36]	; (8009878 <_nx_system_initialize+0xf8>)
 8009852:	6013      	str	r3, [r2, #0]
#endif
#if (NX_TCP_MAXIMUM_TX_QUEUE > 0xFF)
    _nx_system_build_options_5 |=  ((ULONG)0xFF);
#else
    _nx_system_build_options_5 |=  ((ULONG)NX_TCP_MAXIMUM_TX_QUEUE);
 8009854:	4b08      	ldr	r3, [pc, #32]	; (8009878 <_nx_system_initialize+0xf8>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f043 0314 	orr.w	r3, r3, #20
 800985c:	4a06      	ldr	r2, [pc, #24]	; (8009878 <_nx_system_initialize+0xf8>)
 800985e:	6013      	str	r3, [r2, #0]
 8009860:	e000      	b.n	8009864 <_nx_system_initialize+0xe4>
        return;
 8009862:	bf00      	nop
#endif
}
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	20014838 	.word	0x20014838
 800986c:	2001483c 	.word	0x2001483c
 8009870:	20014840 	.word	0x20014840
 8009874:	20014844 	.word	0x20014844
 8009878:	20014848 	.word	0x20014848

0800987c <_nx_tcp_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_tcp_initialize(VOID)
{
 800987c:	b480      	push	{r7}
 800987e:	af00      	add	r7, sp, #0
}
 8009880:	bf00      	nop
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
	...

0800988c <_nx_udp_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b08a      	sub	sp, #40	; 0x28
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800989a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800989c:	f3ef 8310 	mrs	r3, PRIMASK
 80098a0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80098a2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80098a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80098a6:	b672      	cpsid	i
    return(int_posture);
 80098a8:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 80098aa:	623b      	str	r3, [r7, #32]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d043      	beq.n	800993c <_nx_udp_bind_cleanup+0xb0>
 80098b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d040      	beq.n	800993c <_nx_udp_bind_cleanup+0xb0>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 80098be:	4a24      	ldr	r2, [pc, #144]	; (8009950 <_nx_udp_bind_cleanup+0xc4>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d13b      	bne.n	800993c <_nx_udp_bind_cleanup+0xb0>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	2200      	movs	r2, #0
 80098c8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	669a      	str	r2, [r3, #104]	; 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_udp_socket_bound_previous;
 80098d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d4:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d103      	bne.n	80098e8 <_nx_udp_bind_cleanup+0x5c>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	2200      	movs	r2, #0
 80098e4:	661a      	str	r2, [r3, #96]	; 0x60
 80098e6:	e00d      	b.n	8009904 <_nx_udp_bind_cleanup+0x78>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 80098f8:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009902:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009908:	1e5a      	subs	r2, r3, #1
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	665a      	str	r2, [r3, #100]	; 0x64

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009912:	2b0c      	cmp	r3, #12
 8009914:	d112      	bne.n	800993c <_nx_udp_bind_cleanup+0xb0>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2223      	movs	r2, #35	; 0x23
 800991a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800991e:	4b0d      	ldr	r3, [pc, #52]	; (8009954 <_nx_udp_bind_cleanup+0xc8>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3301      	adds	r3, #1
 8009924:	4a0b      	ldr	r2, [pc, #44]	; (8009954 <_nx_udp_bind_cleanup+0xc8>)
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	f383 8810 	msr	PRIMASK, r3
}
 8009932:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f003 fd7f 	bl	800d438 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800993a:	e005      	b.n	8009948 <_nx_udp_bind_cleanup+0xbc>
 800993c:	6a3b      	ldr	r3, [r7, #32]
 800993e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f383 8810 	msr	PRIMASK, r3
}
 8009946:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8009948:	3728      	adds	r7, #40	; 0x28
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	55445020 	.word	0x55445020
 8009954:	2001491c 	.word	0x2001491c

08009958 <_nx_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_enable(NX_IP *ip_ptr)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Set the UDP packet receive function in the IP structure to indicate
       we are ready to receive UDP packets.  */
    ip_ptr -> nx_ip_udp_packet_receive =  _nx_udp_packet_receive;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a05      	ldr	r2, [pc, #20]	; (8009978 <_nx_udp_enable+0x20>)
 8009964:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	08009a25 	.word	0x08009a25

0800997c <_nx_udp_free_port_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b08a      	sub	sp, #40	; 0x28
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_FREE_PORT_FIND, ip_ptr, port, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Save the original port.  */
    starting_port =  port;
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	61fb      	str	r3, [r7, #28]
    /* Loop through the UDP ports until a free entry is found.  */
    do
    {

        /* Calculate the hash index in the UDP port array of the associated IP instance.  */
        index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	0a1a      	lsrs	r2, r3, #8
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	4413      	add	r3, r2
 8009994:	f003 031f 	and.w	r3, r3, #31
 8009998:	61bb      	str	r3, [r7, #24]

        /* Obtain the IP mutex so we can figure out whether or not the port has already
           been bound to.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80099a0:	f04f 31ff 	mov.w	r1, #4294967295
 80099a4:	4618      	mov	r0, r3
 80099a6:	f002 fd19 	bl	800c3dc <_tx_mutex_get>

        /* Pickup the head of the UDP ports bound list.  */
        search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	69ba      	ldr	r2, [r7, #24]
 80099ae:	32e0      	adds	r2, #224	; 0xe0
 80099b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b4:	623b      	str	r3, [r7, #32]

        /* Set the bound flag to false.  */
        bound =  NX_FALSE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if we need to perform a list search.  */
        if (search_ptr)
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d010      	beq.n	80099e2 <_nx_udp_free_port_find+0x66>
        {

            /* Walk through the circular list of UDP sockets that are already
               bound.  */
            end_ptr =     search_ptr;
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	617b      	str	r3, [r7, #20]
            do
            {

                /* Determine if this entry is the same as the requested port.  */
                if (search_ptr -> nx_udp_socket_port == port)
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d102      	bne.n	80099d4 <_nx_udp_free_port_find+0x58>
                {

                    /* Set the bound flag.  */
                    bound =  NX_TRUE;
 80099ce:	2301      	movs	r3, #1
 80099d0:	627b      	str	r3, [r7, #36]	; 0x24

                    /* Get out of the loop.  */
                    break;
 80099d2:	e006      	b.n	80099e2 <_nx_udp_free_port_find+0x66>
                }

                /* Move to the next entry in the list.  */
                search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d8:	623b      	str	r3, [r7, #32]
            } while (search_ptr != end_ptr);
 80099da:	6a3a      	ldr	r2, [r7, #32]
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d1f0      	bne.n	80099c4 <_nx_udp_free_port_find+0x48>
            }
        }
#endif

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80099e8:	4618      	mov	r0, r3
 80099ea:	f002 ff6f 	bl	800c8cc <_tx_mutex_put>

        /* Determine if the port is available.  */
        if (!bound)
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d104      	bne.n	80099fe <_nx_udp_free_port_find+0x82>
        {

            /* Setup the return port number.  */
            *free_port_ptr =  port;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	601a      	str	r2, [r3, #0]

            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_FREE_PORT_FIND, 0, 0, port, 0);

            /* Return success.  */
            return(NX_SUCCESS);
 80099fa:	2300      	movs	r3, #0
 80099fc:	e00e      	b.n	8009a1c <_nx_udp_free_port_find+0xa0>
        }

        /* Move to the next port.  */
        port++;
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	3301      	adds	r3, #1
 8009a02:	60bb      	str	r3, [r7, #8]

        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a0a:	d302      	bcc.n	8009a12 <_nx_udp_free_port_find+0x96>
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 8009a0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009a10:	60bb      	str	r3, [r7, #8]
        }
    } while (starting_port != port);
 8009a12:	69fa      	ldr	r2, [r7, #28]
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d1b8      	bne.n	800998c <_nx_udp_free_port_find+0x10>

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
 8009a1a:	2345      	movs	r3, #69	; 0x45
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3728      	adds	r7, #40	; 0x28
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <_nx_udp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b094      	sub	sp, #80	; 0x50
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_UDP_INFO

    /* Increment the total UDP receive packets count.  */
    ip_ptr -> nx_ip_udp_packets_received++;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a34:	1c5a      	adds	r2, r3, #1
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_UDP_HEADER))
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	2b07      	cmp	r3, #7
 8009a42:	d80a      	bhi.n	8009a5a <_nx_udp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8009a52:	6838      	ldr	r0, [r7, #0]
 8009a54:	f7ff fd40 	bl	80094d8 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8009a58:	e1d4      	b.n	8009e04 <_nx_udp_packet_receive+0x3e0>
    }
#endif

    /* Pickup the pointer to the head of the UDP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8009a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	ba1a      	rev	r2, r3
 8009a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a68:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	ba1a      	rev	r2, r3
 8009a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a72:	605a      	str	r2, [r3, #4]

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK))
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	0c1b      	lsrs	r3, r3, #16
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d20a      	bcs.n	8009a98 <_nx_udp_packet_receive+0x74>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a88:	1c5a      	adds	r2, r3, #1
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 8009a90:	6838      	ldr	r0, [r7, #0]
 8009a92:	f7ff fd21 	bl	80094d8 <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 8009a96:	e1b5      	b.n	8009e04 <_nx_udp_packet_receive+0x3e0>
    /* Recompute the packet length in case TFC padding is present. */
    packet_ptr -> nx_packet_length = (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK);
#endif /* NX_IPSEC_ENABLE */

    /* Pickup the destination UDP port.  */
    port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 8009a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	647b      	str	r3, [r7, #68]	; 0x44

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8009aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aa2:	0a1a      	lsrs	r2, r3, #8
 8009aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f003 031f 	and.w	r3, r3, #31
 8009aac:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if the caller is a thread. If so, we should use the protection mutex
       to avoid having the port list examined while we are traversing it. If this routine
       is called from an ISR nothing needs to be done since bind/unbind are not allowed
       from ISRs.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8009aae:	4b8d      	ldr	r3, [pc, #564]	; (8009ce4 <_nx_udp_packet_receive+0x2c0>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d010      	beq.n	8009ad8 <_nx_udp_packet_receive+0xb4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009ab6:	f3ef 8305 	mrs	r3, IPSR
 8009aba:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 8009abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009abe:	4b8a      	ldr	r3, [pc, #552]	; (8009ce8 <_nx_udp_packet_receive+0x2c4>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d107      	bne.n	8009ad8 <_nx_udp_packet_receive+0xb4>
    {

        /* Get mutex protection.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009ace:	f04f 31ff 	mov.w	r1, #4294967295
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f002 fc82 	bl	800c3dc <_tx_mutex_get>
    }

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009adc:	32e0      	adds	r2, #224	; 0xe0
 8009ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae2:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Determine if there are any sockets bound on this port index.  */
    if (!socket_ptr)
 8009ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d13e      	bne.n	8009b68 <_nx_udp_packet_receive+0x144>
    {

#ifndef NX_DISABLE_IPV4
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009af0:	2b04      	cmp	r3, #4
 8009af2:	d114      	bne.n	8009b1e <_nx_udp_packet_receive+0xfa>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00f      	beq.n	8009b1e <_nx_udp_packet_receive+0xfa>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8009afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	ba1a      	rev	r2, r3
 8009b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b06:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	ba1a      	rev	r2, r3
 8009b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b10:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8009b12:	2300      	movs	r3, #0
 8009b14:	4a75      	ldr	r2, [pc, #468]	; (8009cec <_nx_udp_packet_receive+0x2c8>)
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7fc feb7 	bl	800688c <_nx_icmpv4_send_error_message>
#endif /* FEATURE_NX_IPV6 */

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

        /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
        if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8009b3a:	4b6a      	ldr	r3, [pc, #424]	; (8009ce4 <_nx_udp_packet_receive+0x2c0>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00e      	beq.n	8009b60 <_nx_udp_packet_receive+0x13c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009b42:	f3ef 8305 	mrs	r3, IPSR
 8009b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8009b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b4a:	4b67      	ldr	r3, [pc, #412]	; (8009ce8 <_nx_udp_packet_receive+0x2c4>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d105      	bne.n	8009b60 <_nx_udp_packet_receive+0x13c>
        {

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f002 feb6 	bl	800c8cc <_tx_mutex_put>
        }

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 8009b60:	6838      	ldr	r0, [r7, #0]
 8009b62:	f7ff fcb9 	bl	80094d8 <_nx_packet_release>

        /* Just return.  */
        return;
 8009b66:	e14d      	b.n	8009e04 <_nx_udp_packet_receive+0x3e0>
    /*  Loop to examine the list of bound ports on this index.  */
    do
    {

        /* Determine if the port has been found.  */
        if (socket_ptr -> nx_udp_socket_port == port)
 8009b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d119      	bne.n	8009ba6 <_nx_udp_packet_receive+0x182>
            /* Yes, we have a match.  */

#ifndef NX_DISABLE_UDP_INFO

            /* Increment the total number of packets received for this socket.  */
            socket_ptr -> nx_udp_socket_packets_received++;
 8009b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	1c5a      	adds	r2, r3, #1
 8009b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b7a:	619a      	str	r2, [r3, #24]

            /* Increment the total UDP receive bytes.  */
            ip_ptr -> nx_ip_udp_bytes_received +=          packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	4413      	add	r3, r2
 8009b88:	f1a3 0208 	sub.w	r2, r3, #8
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            socket_ptr -> nx_udp_socket_bytes_received +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 8009b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b94:	69da      	ldr	r2, [r3, #28]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f1a3 0208 	sub.w	r2, r3, #8
 8009ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ba2:	61da      	str	r2, [r3, #28]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_RECEIVE, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Get out of the search loop.  */
            break;
 8009ba4:	e00a      	b.n	8009bbc <_nx_udp_packet_receive+0x198>
        }
        else
        {

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_udp_socket_bound_next;
 8009ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009baa:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
    } while (socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bb0:	32e0      	adds	r2, #224	; 0xe0
 8009bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d1d5      	bne.n	8009b68 <_nx_udp_packet_receive+0x144>

    /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 8009bbc:	4b49      	ldr	r3, [pc, #292]	; (8009ce4 <_nx_udp_packet_receive+0x2c0>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00e      	beq.n	8009be2 <_nx_udp_packet_receive+0x1be>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009bc4:	f3ef 8305 	mrs	r3, IPSR
 8009bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8009bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bcc:	4b46      	ldr	r3, [pc, #280]	; (8009ce8 <_nx_udp_packet_receive+0x2c4>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d105      	bne.n	8009be2 <_nx_udp_packet_receive+0x1be>
    {

        /* Release mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f002 fe75 	bl	800c8cc <_tx_mutex_put>
    }

    /* Determine if a match was found.  */
    if (socket_ptr -> nx_udp_socket_port != port)
 8009be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d02b      	beq.n	8009c44 <_nx_udp_packet_receive+0x220>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c00:	1c5a      	adds	r2, r3, #1
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
#endif

#if !defined(NX_DISABLE_IPV4) && !defined(NX_DISABLE_ICMPV4_ERROR_MESSAGE)
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009c0e:	2b04      	cmp	r3, #4
 8009c10:	d114      	bne.n	8009c3c <_nx_udp_packet_receive+0x218>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 3370 	ldr.w	r3, [r3, #880]	; 0x370
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00f      	beq.n	8009c3c <_nx_udp_packet_receive+0x218>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 8009c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	ba1a      	rev	r2, r3
 8009c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c24:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8009c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	ba1a      	rev	r2, r3
 8009c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c2e:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 8009c30:	2300      	movs	r3, #0
 8009c32:	4a2e      	ldr	r2, [pc, #184]	; (8009cec <_nx_udp_packet_receive+0x2c8>)
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7fc fe28 	bl	800688c <_nx_icmpv4_send_error_message>
            }
        }
#endif /* FEATURE_NX_IPV6 && !NX_DISABLE_ICMPV6_ERROR_MESSAGE  */

        /* No socket structure bound to this port, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8009c3c:	6838      	ldr	r0, [r7, #0]
 8009c3e:	f7ff fc4b 	bl	80094d8 <_nx_packet_release>
        return;
 8009c42:	e0df      	b.n	8009e04 <_nx_udp_packet_receive+0x3e0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c44:	f3ef 8310 	mrs	r3, PRIMASK
 8009c48:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8009c4c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c4e:	b672      	cpsid	i
    return(int_posture);
 8009c50:	6a3b      	ldr	r3, [r7, #32]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8009c52:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if the socket is still valid.  */
    if (socket_ptr -> nx_udp_socket_id != NX_UDP_ID)
 8009c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a25      	ldr	r2, [pc, #148]	; (8009cf0 <_nx_udp_packet_receive+0x2cc>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d01c      	beq.n	8009c98 <_nx_udp_packet_receive+0x274>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c64:	1c5a      	adds	r2, r3, #1
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Increment the total UDP receive packets dropped count for this socket.  */
        socket_ptr -> nx_udp_socket_packets_dropped++;
 8009c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7e:	1c5a      	adds	r2, r3, #1
 8009c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c82:	625a      	str	r2, [r3, #36]	; 0x24
 8009c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c86:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	f383 8810 	msr	PRIMASK, r3
}
 8009c8e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 8009c90:	6838      	ldr	r0, [r7, #0]
 8009c92:	f7ff fc21 	bl	80094d8 <_nx_packet_release>

        /* Return to caller.  */
        return;
 8009c96:	e0b5      	b.n	8009e04 <_nx_udp_packet_receive+0x3e0>
    }

    /* Pickup the receive notify function.  */
    receive_callback =  socket_ptr -> nx_udp_receive_callback;
 8009c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if we need to update the UDP port head pointer.  This should
       only be done if the found socket pointer is not the head pointer and
       the mutex for this IP instance is available.  */
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ca2:	32e0      	adds	r2, #224	; 0xe0
 8009ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d00a      	beq.n	8009cc4 <_nx_udp_packet_receive+0x2a0>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d105      	bne.n	8009cc4 <_nx_udp_packet_receive+0x2a0>
    {

        /* Move the port head pointer to this socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cbc:	32e0      	adds	r2, #224	; 0xe0
 8009cbe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    /* Determine if there is thread waiting for a packet from this port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 8009cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cc8:	637b      	str	r3, [r7, #52]	; 0x34
    if (thread_ptr)
 8009cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d03e      	beq.n	8009d4e <_nx_udp_packet_receive+0x32a>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8009cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d10c      	bne.n	8009cf4 <_nx_udp_packet_receive+0x2d0>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 8009cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cdc:	2200      	movs	r2, #0
 8009cde:	659a      	str	r2, [r3, #88]	; 0x58
 8009ce0:	e016      	b.n	8009d10 <_nx_udp_packet_receive+0x2ec>
 8009ce2:	bf00      	nop
 8009ce4:	20014884 	.word	0x20014884
 8009ce8:	20000088 	.word	0x20000088
 8009cec:	03030000 	.word	0x03030000
 8009cf0:	55445020 	.word	0x55445020
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8009cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cfa:	659a      	str	r2, [r3, #88]	; 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 8009d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d02:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 8009d04:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 8009d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d0c:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 8009d0e:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 8009d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d14:	1e5a      	subs	r2, r3, #1
 8009d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d18:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8009d20:	4b3a      	ldr	r3, [pc, #232]	; (8009e0c <_nx_udp_packet_receive+0x3e8>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	3301      	adds	r3, #1
 8009d26:	4a39      	ldr	r2, [pc, #228]	; (8009e0c <_nx_udp_packet_receive+0x3e8>)
 8009d28:	6013      	str	r3, [r2, #0]

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 8009d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	601a      	str	r2, [r3, #0]
 8009d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d34:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	f383 8810 	msr	PRIMASK, r3
}
 8009d3c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 8009d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d40:	2200      	movs	r2, #0
 8009d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009d46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009d48:	f003 fb76 	bl	800d438 <_tx_thread_system_resume>
 8009d4c:	e054      	b.n	8009df8 <_nx_udp_packet_receive+0x3d4>
            return;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Place the packet at the end of the socket's receive queue.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 8009d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d03c      	beq.n	8009dd0 <_nx_udp_packet_receive+0x3ac>
        {

            /* Add the new packet to a nonempty list.  */
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 8009d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d5a:	683a      	ldr	r2, [r7, #0]
 8009d5c:	61da      	str	r2, [r3, #28]
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 8009d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	2200      	movs	r2, #0
 8009d68:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 8009d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d72:	63da      	str	r2, [r3, #60]	; 0x3c

            /* Determine if the maximum queue depth has been reached.  */
            if (socket_ptr -> nx_udp_socket_receive_count >
 8009d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                socket_ptr -> nx_udp_socket_queue_maximum)
 8009d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            if (socket_ptr -> nx_udp_socket_receive_count >
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d921      	bls.n	8009dc4 <_nx_udp_packet_receive+0x3a0>
            {

                /* We have exceeded the queue depth, so remove the first item
                   in the queue (which is the oldest).  */
                packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 8009d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d84:	603b      	str	r3, [r7, #0]
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	69da      	ldr	r2, [r3, #28]
 8009d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d8c:	645a      	str	r2, [r3, #68]	; 0x44

                /* Decrement the number of packets queued.  */
                socket_ptr -> nx_udp_socket_receive_count--;
 8009d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d92:	1e5a      	subs	r2, r3, #1
 8009d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d96:	63da      	str	r2, [r3, #60]	; 0x3c

#ifndef NX_DISABLE_UDP_INFO

                /* Increment the total UDP receive packets dropped count.  */
                ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d9e:	1c5a      	adds	r2, r3, #1
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                /* Increment the total UDP receive packets dropped count for this socket.  */
                socket_ptr -> nx_udp_socket_packets_dropped++;
 8009da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dae:	625a      	str	r2, [r3, #36]	; 0x24
 8009db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009db2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	f383 8810 	msr	PRIMASK, r3
}
 8009dba:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 8009dbc:	6838      	ldr	r0, [r7, #0]
 8009dbe:	f7ff fb8b 	bl	80094d8 <_nx_packet_release>
 8009dc2:	e019      	b.n	8009df8 <_nx_udp_packet_receive+0x3d4>
 8009dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dc6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	f383 8810 	msr	PRIMASK, r3
}
 8009dce:	e013      	b.n	8009df8 <_nx_udp_packet_receive+0x3d4>
        }
        else
        {

            /* Add the new packet to an empty list.  */
            socket_ptr -> nx_udp_socket_receive_head =  packet_ptr;
 8009dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	645a      	str	r2, [r3, #68]	; 0x44
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 8009dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	649a      	str	r2, [r3, #72]	; 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	2200      	movs	r2, #0
 8009de0:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 8009de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dea:	63da      	str	r2, [r3, #60]	; 0x3c
 8009dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f383 8810 	msr	PRIMASK, r3
}
 8009df6:	bf00      	nop
        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_UDP_RECEIVE_QUEUE, __LINE__, packet_ptr);
    }

    /* Determine if there is a socket receive notification function specified.  */
    if (receive_callback)
 8009df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <_nx_udp_packet_receive+0x3e0>
    {

        /* Yes, notification is requested.  Call the application's receive notification
           function for this socket.  */
        (receive_callback)(socket_ptr);
 8009dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e00:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009e02:	4798      	blx	r3
    }
}
 8009e04:	3750      	adds	r7, #80	; 0x50
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	2001491c 	.word	0x2001491c

08009e10 <_nx_udp_socket_bind>:
/*                                            corrected the random value, */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b092      	sub	sp, #72	; 0x48
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
#endif /* NX_NAT_ENABLE */
NX_IP         *ip_ptr;
TX_THREAD     *thread_ptr;
NX_UDP_SOCKET *search_ptr;
NX_UDP_SOCKET *end_ptr;
UINT           status = NX_SUCCESS;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	643b      	str	r3, [r7, #64]	; 0x40


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8009e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e28:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8009e30:	4618      	mov	r0, r3
 8009e32:	f002 fad3 	bl	800c3dc <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d103      	bne.n	8009e46 <_nx_udp_socket_bind+0x36>
        (socket_ptr -> nx_udp_socket_bind_in_progress))
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d007      	beq.n	8009e56 <_nx_udp_socket_bind+0x46>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e48:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f002 fd3d 	bl	800c8cc <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 8009e52:	2322      	movs	r3, #34	; 0x22
 8009e54:	e0f4      	b.n	800a040 <_nx_udp_socket_bind+0x230>
    }

    /* Determine if the port needs to be allocated.  */
    if (port == NX_ANY_PORT)
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d119      	bne.n	8009e90 <_nx_udp_socket_bind+0x80>
    {

        /* Call the find routine to allocate a UDP port.  */
        port = NX_SEARCH_PORT_START + (UINT)(((ULONG)NX_RAND()) % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 8009e5c:	f004 fce8 	bl	800e830 <rand>
 8009e60:	4603      	mov	r3, r0
 8009e62:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009e66:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8009e6a:	60bb      	str	r3, [r7, #8]
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f107 0208 	add.w	r2, r7, #8
 8009e72:	4619      	mov	r1, r3
 8009e74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009e76:	f7ff fd81 	bl	800997c <_nx_udp_free_port_find>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d007      	beq.n	8009e90 <_nx_udp_socket_bind+0x80>
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e82:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009e86:	4618      	mov	r0, r3
 8009e88:	f002 fd20 	bl	800c8cc <_tx_mutex_put>

            /* There was no free port, return an error code.  */
            return(NX_NO_FREE_PORTS);
 8009e8c:	2345      	movs	r3, #69	; 0x45
 8009e8e:	e0d7      	b.n	800a040 <_nx_udp_socket_bind+0x230>
        }
    }
#endif

    /* Save the port number in the UDP socket structure.  */
    socket_ptr -> nx_udp_socket_port =  port;
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	609a      	str	r2, [r3, #8]

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	0a1a      	lsrs	r2, r3, #8
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	f003 031f 	and.w	r3, r3, #31
 8009ea2:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Pickup the head of the UDP ports bound list.  */
    search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 8009ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ea8:	32e0      	adds	r2, #224	; 0xe0
 8009eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eae:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if we need to perform a list search.  */
    if (search_ptr)
 8009eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00f      	beq.n	8009ed6 <_nx_udp_socket_bind+0xc6>
    {

        /* Walk through the circular list of UDP sockets that are already
           bound.  */
        end_ptr = search_ptr;
 8009eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eb8:	637b      	str	r3, [r7, #52]	; 0x34
        do
        {

            /* Determine if this entry is the same as the requested port.  */
            if (search_ptr -> nx_udp_socket_port == port)
 8009eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ebc:	689a      	ldr	r2, [r3, #8]
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d007      	beq.n	8009ed4 <_nx_udp_socket_bind+0xc4>
                /* Yes, the port has already been allocated.  */
                break;
            }

            /* Move to the next entry in the list.  */
            search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 8009ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ec8:	647b      	str	r3, [r7, #68]	; 0x44
        } while (search_ptr != end_ptr);
 8009eca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d1f3      	bne.n	8009eba <_nx_udp_socket_bind+0xaa>
 8009ed2:	e000      	b.n	8009ed6 <_nx_udp_socket_bind+0xc6>
                break;
 8009ed4:	bf00      	nop
    }

    /* Now determine if the port is available.  */
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_udp_socket_port != port))
 8009ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d004      	beq.n	8009ee6 <_nx_udp_socket_bind+0xd6>
 8009edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ede:	689a      	ldr	r2, [r3, #8]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d042      	beq.n	8009f6c <_nx_udp_socket_bind+0x15c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8009eea:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8009eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8009eee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ef0:	b672      	cpsid	i
    return(int_posture);
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {

        /* Place this UDP socket structure on the list of bound ports.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8009ef4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if the list is NULL.  */
        if (search_ptr)
 8009ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d01e      	beq.n	8009f3a <_nx_udp_socket_bind+0x12a>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            socket_ptr -> nx_udp_socket_bound_next =       ip_ptr -> nx_ip_udp_port_table[index];
 8009efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f00:	32e0      	adds	r2, #224	; 0xe0
 8009f02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =   (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 8009f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f0e:	32e0      	adds	r2, #224	; 0xe0
 8009f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next = socket_ptr;
 8009f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f1e:	32e0      	adds	r2, #224	; 0xe0
 8009f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	64da      	str	r2, [r3, #76]	; 0x4c
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   socket_ptr;
 8009f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f2e:	32e0      	adds	r2, #224	; 0xe0
 8009f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	651a      	str	r2, [r3, #80]	; 0x50
 8009f38:	e00b      	b.n	8009f52 <_nx_udp_socket_bind+0x142>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            socket_ptr -> nx_udp_socket_bound_next =      socket_ptr;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	64da      	str	r2, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =  socket_ptr;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =       socket_ptr;
 8009f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f4a:	32e0      	adds	r2, #224	; 0xe0
 8009f4c:	68f9      	ldr	r1, [r7, #12]
 8009f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f54:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	f383 8810 	msr	PRIMASK, r3
}
 8009f5c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8009f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f60:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009f64:	4618      	mov	r0, r3
 8009f66:	f002 fcb1 	bl	800c8cc <_tx_mutex_put>
 8009f6a:	e068      	b.n	800a03e <_nx_udp_socket_bind+0x22e>
    }
    else if (wait_option)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d05d      	beq.n	800a02e <_nx_udp_socket_bind+0x21e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f72:	f3ef 8310 	mrs	r3, PRIMASK
 8009f76:	61fb      	str	r3, [r7, #28]
    return(posture);
 8009f78:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8009f7a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f7c:	b672      	cpsid	i
    return(int_posture);
 8009f7e:	69bb      	ldr	r3, [r7, #24]
    {

        /* Prepare for suspension of this thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8009f80:	633b      	str	r3, [r7, #48]	; 0x30

        /* Pickup thread pointer.  */
        thread_ptr =  _tx_thread_current_ptr;
 8009f82:	4b31      	ldr	r3, [pc, #196]	; (800a048 <_nx_udp_socket_bind+0x238>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Setup cleanup routine pointer.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 8009f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8a:	4a30      	ldr	r2, [pc, #192]	; (800a04c <_nx_udp_socket_bind+0x23c>)
 8009f8c:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup cleanup information, i.e. this socket control
           block.  */
        thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 8009f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Also remember the socket that has bound to the port, since the thread
           is going to be suspended on that socket.  */
        socket_ptr -> nx_udp_socket_bound_previous =  search_ptr;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the socket bind in progress flag (thread pointer).  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  thread_ptr;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f9e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Setup suspension list.  */
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 8009fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d012      	beq.n	8009fce <_nx_udp_socket_bind+0x1be>
        {

            /* This list is not NULL, add current thread to the end. */
            thread_ptr -> tx_thread_suspended_next =       search_ptr -> nx_udp_socket_bind_suspension_list;
 8009fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009faa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fae:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =  (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous;
 8009fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fb4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb8:	675a      	str	r2, [r3, #116]	; 0x74
            ((search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 8009fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fc2:	671a      	str	r2, [r3, #112]	; 0x70
            (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 8009fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fca:	675a      	str	r2, [r3, #116]	; 0x74
 8009fcc:	e008      	b.n	8009fe0 <_nx_udp_socket_bind+0x1d0>
        else
        {

            /* No other threads are suspended.  Setup the head pointer and
               just setup this threads pointers to itself.  */
            search_ptr -> nx_udp_socket_bind_suspension_list =         thread_ptr;
 8009fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fd2:	661a      	str	r2, [r3, #96]	; 0x60
            thread_ptr -> tx_thread_suspended_next =                   thread_ptr;
 8009fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fd8:	671a      	str	r2, [r3, #112]	; 0x70
            thread_ptr -> tx_thread_suspended_previous =               thread_ptr;
 8009fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fde:	675a      	str	r2, [r3, #116]	; 0x74
        }

        /* Increment the suspended thread count.  */
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 8009fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fe4:	1c5a      	adds	r2, r3, #1
 8009fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fe8:	665a      	str	r2, [r3, #100]	; 0x64

        /* Set the state to suspended.  */
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 8009fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fec:	220c      	movs	r2, #12
 8009fee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8009ff6:	4b16      	ldr	r3, [pc, #88]	; (800a050 <_nx_udp_socket_bind+0x240>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	4a14      	ldr	r2, [pc, #80]	; (800a050 <_nx_udp_socket_bind+0x240>)
 8009ffe:	6013      	str	r3, [r2, #0]

        /* Save the timeout value.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	64da      	str	r2, [r3, #76]	; 0x4c
 800a006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a008:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f383 8810 	msr	PRIMASK, r3
}
 800a010:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a014:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a018:	4618      	mov	r0, r3
 800a01a:	f002 fc57 	bl	800c8cc <_tx_mutex_put>

        /* Call actual thread suspension routine.  */
        _tx_thread_system_suspend(thread_ptr);
 800a01e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a020:	f003 fb0a 	bl	800d638 <_tx_thread_system_suspend>

        /* Return the completion status.  */
        status = thread_ptr -> tx_thread_suspend_status;
 800a024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a02a:	643b      	str	r3, [r7, #64]	; 0x40
 800a02c:	e007      	b.n	800a03e <_nx_udp_socket_bind+0x22e>
    }
    else
    {

        /* Release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a030:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a034:	4618      	mov	r0, r3
 800a036:	f002 fc49 	bl	800c8cc <_tx_mutex_put>

        /* Return the port unavailable error.  */
        status = NX_PORT_UNAVAILABLE;
 800a03a:	2323      	movs	r3, #35	; 0x23
 800a03c:	643b      	str	r3, [r7, #64]	; 0x40
        status = _nx_udp_socket_driver_bind(socket_ptr, port, wait_option);
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Return success to the caller.  */
    return(status);
 800a03e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 800a040:	4618      	mov	r0, r3
 800a042:	3748      	adds	r7, #72	; 0x48
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20014884 	.word	0x20014884
 800a04c:	0800988d 	.word	0x0800988d
 800a050:	2001491c 	.word	0x2001491c

0800a054 <_nx_udp_socket_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG queue_maximum)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08a      	sub	sp, #40	; 0x28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	603b      	str	r3, [r7, #0]

NX_UDP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 800a062:	2278      	movs	r2, #120	; 0x78
 800a064:	2100      	movs	r1, #0
 800a066:	68b8      	ldr	r0, [r7, #8]
 800a068:	f004 fe28 	bl	800ecbc <memset>

    /* Fill in the basic information in the new UDP socket structure.  */

    /* Remember the associated IP structure.  */
    socket_ptr -> nx_udp_socket_ip_ptr =  ip_ptr;
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	60da      	str	r2, [r3, #12]

    /* Save the UDP socket's name.  */
    socket_ptr -> nx_udp_socket_name =  name;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	605a      	str	r2, [r3, #4]

    /* Save the type of service input parameter.  */
    socket_ptr -> nx_udp_socket_type_of_service =  type_of_service;
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	635a      	str	r2, [r3, #52]	; 0x34

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a08c:	631a      	str	r2, [r3, #48]	; 0x30

    /* By default, have UDP checksum logic enabled.  To disable checksum logic, the
       application must call the nx_udp_checksum disable function for this UDP socket.  */
    socket_ptr -> nx_udp_socket_disable_checksum =  NX_FALSE;
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2200      	movs	r2, #0
 800a092:	639a      	str	r2, [r3, #56]	; 0x38

    /* Clear the socket bind in progress flag.  */
    socket_ptr -> nx_udp_socket_bind_in_progress =  NX_FALSE;
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	2200      	movs	r2, #0
 800a098:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set various list pointers to NULL.  */
    socket_ptr -> nx_udp_socket_bound_next =            NX_NULL;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2200      	movs	r2, #0
 800a09e:	64da      	str	r2, [r3, #76]	; 0x4c
    socket_ptr -> nx_udp_socket_bound_previous =        NX_NULL;
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	651a      	str	r2, [r3, #80]	; 0x50
    socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	661a      	str	r2, [r3, #96]	; 0x60
    socket_ptr -> nx_udp_socket_bind_suspended_count =  0;
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize the receive queue parameters.  */
    socket_ptr -> nx_udp_socket_receive_count =         0;
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	63da      	str	r2, [r3, #60]	; 0x3c
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0bc:	641a      	str	r2, [r3, #64]	; 0x40
    socket_ptr -> nx_udp_socket_receive_head =          NX_NULL;
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	645a      	str	r2, [r3, #68]	; 0x44
    socket_ptr -> nx_udp_socket_receive_tail =          NX_NULL;
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =             NX_NULL;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	671a      	str	r2, [r3, #112]	; 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, queue_maximum, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can add socket to IP structure.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a0d6:	f04f 31ff 	mov.w	r1, #4294967295
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f002 f97e 	bl	800c3dc <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a0e0:	f3ef 8310 	mrs	r3, PRIMASK
 800a0e4:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a0e6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a0e8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a0ea:	b672      	cpsid	i
    return(int_posture);
 800a0ec:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts while we link the new UDP socket to the IP structure.  */
    TX_DISABLE
 800a0ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Load the UDP ID field in the UDP control block.  */
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	4a1f      	ldr	r2, [pc, #124]	; (800a170 <_nx_udp_socket_create+0x11c>)
 800a0f4:	601a      	str	r2, [r3, #0]

    /* Place the new UDP control block on the list of created UDP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d015      	beq.n	800a12c <_nx_udp_socket_create+0xd8>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a108:	623b      	str	r3, [r7, #32]

        /* Place the new UDP socket control block in the list.  */
        (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous =  socket_ptr;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	66da      	str	r2, [r3, #108]	; 0x6c
        tail_ptr ->  nx_udp_socket_created_next =  socket_ptr;
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	669a      	str	r2, [r3, #104]	; 0x68

        /* Setup this UDP socket's created links.  */
        socket_ptr -> nx_udp_socket_created_previous =  tail_ptr;
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	6a3a      	ldr	r2, [r7, #32]
 800a11e:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      ip_ptr -> nx_ip_udp_created_sockets_ptr;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	669a      	str	r2, [r3, #104]	; 0x68
 800a12a:	e009      	b.n	800a140 <_nx_udp_socket_create+0xec>
    }
    else
    {

        /* The created UDP socket list is empty.  Add UDP socket control block to empty list.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =       socket_ptr;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        socket_ptr -> nx_udp_socket_created_previous =  socket_ptr;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	66da      	str	r2, [r3, #108]	; 0x6c
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	669a      	str	r2, [r3, #104]	; 0x68
    }

    /* Increment the created UDP socket counter.  */
    ip_ptr -> nx_ip_udp_created_sockets_count++;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a150:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f383 8810 	msr	PRIMASK, r3
}
 800a158:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a160:	4618      	mov	r0, r3
 800a162:	f002 fbb3 	bl	800c8cc <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3728      	adds	r7, #40	; 0x28
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	55445020 	.word	0x55445020

0800a174 <_nx_udp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b088      	sub	sp, #32
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	61fb      	str	r3, [r7, #28]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_DELETE, ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can process the socket delete request.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a188:	f04f 31ff 	mov.w	r1, #4294967295
 800a18c:	4618      	mov	r0, r3
 800a18e:	f002 f925 	bl	800c3dc <_tx_mutex_get>

    /* Determine if the socket is still bound to port.  */
    if (socket_ptr -> nx_udp_socket_bound_next)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a196:	2b00      	cmp	r3, #0
 800a198:	d007      	beq.n	800a1aa <_nx_udp_socket_delete+0x36>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f002 fb93 	bl	800c8cc <_tx_mutex_put>

        /* Return a still bound error code.  */
        return(NX_STILL_BOUND);
 800a1a6:	2342      	movs	r3, #66	; 0x42
 800a1a8:	e03f      	b.n	800a22a <_nx_udp_socket_delete+0xb6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a1aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a1ae:	617b      	str	r3, [r7, #20]
    return(posture);
 800a1b0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a1b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a1b4:	b672      	cpsid	i
    return(int_posture);
 800a1b6:	693b      	ldr	r3, [r7, #16]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800a1b8:	61bb      	str	r3, [r7, #24]

    /* Now, remove the UDP socket from the created socket list.  */

    /* Clear the socket ID to make it invalid.  */
    socket_ptr -> nx_udp_socket_id =  0;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	601a      	str	r2, [r3, #0]

    /* See if the socket is the only one on the list.  */
    if (socket_ptr == socket_ptr -> nx_udp_socket_created_next)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d104      	bne.n	800a1d4 <_nx_udp_socket_delete+0x60>
    {

        /* Only created socket, just set the created list to NULL.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =  NX_NULL;
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800a1d2:	e014      	b.n	800a1fe <_nx_udp_socket_delete+0x8a>
    }
    else
    {

        /* Link-up the neighbors.  */
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            socket_ptr -> nx_udp_socket_created_previous;
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 800a1dc:	66da      	str	r2, [r3, #108]	; 0x6c
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
            socket_ptr -> nx_udp_socket_created_next;
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	6e92      	ldr	r2, [r2, #104]	; 0x68
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 800a1e6:	669a      	str	r2, [r3, #104]	; 0x68

        /* See if we have to update the created list head pointer.  */
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d104      	bne.n	800a1fe <_nx_udp_socket_delete+0x8a>
        {

            /* Yes, move the head pointer to the next link. */
            ip_ptr -> nx_ip_udp_created_sockets_ptr =  socket_ptr -> nx_udp_socket_created_next;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        }
    }

    /* Decrease the created sockets count.  */
    ip_ptr -> nx_ip_udp_created_sockets_count--;
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a204:	1e5a      	subs	r2, r3, #1
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f383 8810 	msr	PRIMASK, r3
}
 800a216:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(socket_ptr);

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a21e:	4618      	mov	r0, r3
 800a220:	f002 fb54 	bl	800c8cc <_tx_mutex_put>

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800a224:	f003 f8ce 	bl	800d3c4 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3720      	adds	r7, #32
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <_nx_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                          ULONG ip_address, UINT port)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b088      	sub	sp, #32
 800a236:	af00      	add	r7, sp, #0
 800a238:	60f8      	str	r0, [r7, #12]
 800a23a:	60b9      	str	r1, [r7, #8]
 800a23c:	607a      	str	r2, [r7, #4]
 800a23e:	603b      	str	r3, [r7, #0]
UINT        status;

NXD_ADDRESS dual_ip_address;

    /* build up the IP Address structure. */
    dual_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 800a240:	2304      	movs	r3, #4
 800a242:	617b      	str	r3, [r7, #20]
    dual_ip_address.nxd_ip_address.v4 = ip_address;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	61bb      	str	r3, [r7, #24]

    /* Call the actual udp socket send routine. */
    status = _nxd_udp_socket_send(socket_ptr, packet_ptr, &dual_ip_address, port);
 800a248:	f107 0214 	add.w	r2, r7, #20
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	68b9      	ldr	r1, [r7, #8]
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 f969 	bl	800a528 <_nxd_udp_socket_send>
 800a256:	61f8      	str	r0, [r7, #28]

    return(status);
 800a258:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3720      	adds	r7, #32
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
	...

0800a264 <_nx_udp_socket_unbind>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b094      	sub	sp, #80	; 0x50
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
NX_PACKET     *packet_ptr;
NX_PACKET     *next_packet_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	647b      	str	r3, [r7, #68]	; 0x44
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_UNBIND, ip_ptr, socket_ptr, socket_ptr -> nx_udp_socket_port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a274:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a278:	f04f 31ff 	mov.w	r1, #4294967295
 800a27c:	4618      	mov	r0, r3
 800a27e:	f002 f8ad 	bl	800c3dc <_tx_mutex_get>

    /* Determine if the socket is bound to port.  */
    if (!socket_ptr -> nx_udp_socket_bound_next)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a286:	2b00      	cmp	r3, #0
 800a288:	d119      	bne.n	800a2be <_nx_udp_socket_unbind+0x5a>
    {

        /* Determine if there is a special condition for the socket not being in
           a bound condition...  i.e. the socket is in a pending-to-be-bound condition
           in a call from a different thread.  */
        if (socket_ptr -> nx_udp_socket_bind_in_progress)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00d      	beq.n	800a2ae <_nx_udp_socket_unbind+0x4a>
        {

            /* Execute the bind suspension cleanup routine.  */
            _nx_udp_bind_cleanup(socket_ptr -> nx_udp_socket_bind_in_progress NX_CLEANUP_ARGUMENT);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a296:	2100      	movs	r1, #0
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff faf7 	bl	800988c <_nx_udp_bind_cleanup>

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a29e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2a0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f002 fb11 	bl	800c8cc <_tx_mutex_put>

            /* Return success.  */
            return(NX_SUCCESS);
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	e135      	b.n	800a51a <_nx_udp_socket_unbind+0x2b6>
        }
        else
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a2ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2b0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f002 fb09 	bl	800c8cc <_tx_mutex_put>

            /* Return a not bound error code.  */
            return(NX_NOT_BOUND);
 800a2ba:	2324      	movs	r3, #36	; 0x24
 800a2bc:	e12d      	b.n	800a51a <_nx_udp_socket_unbind+0x2b6>

    /* Otherwise, the socket is bound.  We need to remove this socket from the
       port and check for any other UDP socket bind requests that are queued.  */

    /* Pickup the port number in the UDP socket structure.  */
    port =  socket_ptr -> nx_udp_socket_port;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	643b      	str	r3, [r7, #64]	; 0x40

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800a2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c6:	0a1a      	lsrs	r2, r3, #8
 800a2c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f003 031f 	and.w	r3, r3, #31
 800a2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a2d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a2da:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a2dc:	b672      	cpsid	i
    return(int_posture);
 800a2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
#ifdef NX_ENABLE_TCPIP_OFFLOAD
    _nx_udp_socket_driver_unbind(socket_ptr);
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Disable interrupts while we unlink the current socket.  */
    TX_DISABLE
 800a2e0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if this is the only socket bound on this port list.  */
    if (socket_ptr -> nx_udp_socket_bound_next == socket_ptr)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d109      	bne.n	800a300 <_nx_udp_socket_unbind+0x9c>
    {

        /* Yes, this is the only socket on the port list.  */

        /* Clear the list head pointer and the next pointer in the socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =   NX_NULL;
 800a2ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2f0:	32e0      	adds	r2, #224	; 0xe0
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	64da      	str	r2, [r3, #76]	; 0x4c
 800a2fe:	e01b      	b.n	800a338 <_nx_udp_socket_unbind+0xd4>
    {

        /* Relink the neighbors of this UDP socket.  */

        /* Update the links of the adjacent sockets.  */
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            socket_ptr -> nx_udp_socket_bound_previous;
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	6d12      	ldr	r2, [r2, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 800a308:	651a      	str	r2, [r3, #80]	; 0x50
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            socket_ptr -> nx_udp_socket_bound_next;
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800a312:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Determine if the head of the port list points to the socket being removed.
           If so, we need to move the head pointer.  */
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 800a314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a318:	32e0      	adds	r2, #224	; 0xe0
 800a31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	429a      	cmp	r2, r3
 800a322:	d106      	bne.n	800a332 <_nx_udp_socket_unbind+0xce>
        {

            /* Yes, we need to move the port list head pointer.  */
            ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr -> nx_udp_socket_bound_next;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a32a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a32c:	32e0      	adds	r2, #224	; 0xe0
 800a32e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        /* Clear the next pointer in the socket to indicate it is no longer bound.  */
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	64da      	str	r2, [r3, #76]	; 0x4c
 800a338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33e:	f383 8810 	msr	PRIMASK, r3
}
 800a342:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* The socket is off the bound list...  we need to check for queued packets and possible
       receive suspension.  We need to clean up either of these conditions.  */
    if (socket_ptr -> nx_udp_socket_receive_count)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d01b      	beq.n	800a384 <_nx_udp_socket_unbind+0x120>
    {

        /* Setup packet pointer.  */
        packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a350:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Clear the head and the tail pointers.  */
        socket_ptr -> nx_udp_socket_receive_head =  NX_NULL;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	645a      	str	r2, [r3, #68]	; 0x44
        socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	649a      	str	r2, [r3, #72]	; 0x48

        /* Loop to clear all the packets out.  */
        while (socket_ptr -> nx_udp_socket_receive_count)
 800a35e:	e00c      	b.n	800a37a <_nx_udp_socket_unbind+0x116>
        {

            /* Pickup the next queued packet.  */
            next_packet_ptr =  packet_ptr -> nx_packet_queue_next;
 800a360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a362:	69db      	ldr	r3, [r3, #28]
 800a364:	637b      	str	r3, [r7, #52]	; 0x34

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800a366:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a368:	f7ff f8b6 	bl	80094d8 <_nx_packet_release>

            /* Move to the next packet.  */
            packet_ptr =  next_packet_ptr;
 800a36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a36e:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a374:	1e5a      	subs	r2, r3, #1
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	63da      	str	r2, [r3, #60]	; 0x3c
        while (socket_ptr -> nx_udp_socket_receive_count)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1ee      	bne.n	800a360 <_nx_udp_socket_unbind+0xfc>
 800a382:	e035      	b.n	800a3f0 <_nx_udp_socket_unbind+0x18c>
        }
    }
    else if (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d031      	beq.n	800a3f0 <_nx_udp_socket_unbind+0x18c>
    {

        /* Clear out all threads suspended on this socket.  */

        /* Pickup the first suspended thread.  */
        thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a390:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Clear the thread receive suspension list.  */
        socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	659a      	str	r2, [r3, #88]	; 0x58

        /* Walk through the queue list to resume any and all threads suspended
           on this queue.  */
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800a398:	e026      	b.n	800a3e8 <_nx_udp_socket_unbind+0x184>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a39a:	f3ef 8310 	mrs	r3, PRIMASK
 800a39e:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a3a0:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a3a2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a3a4:	b672      	cpsid	i
    return(int_posture);
 800a3a6:	69bb      	ldr	r3, [r7, #24]
        {

            /* Lockout interrupts.  */
            TX_DISABLE
 800a3a8:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a3aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	669a      	str	r2, [r3, #104]	; 0x68

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800a3b0:	4b5c      	ldr	r3, [pc, #368]	; (800a524 <_nx_udp_socket_unbind+0x2c0>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	4a5b      	ldr	r2, [pc, #364]	; (800a524 <_nx_udp_socket_unbind+0x2c0>)
 800a3b8:	6013      	str	r3, [r2, #0]
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3bc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	f383 8810 	msr	PRIMASK, r3
}
 800a3c4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set the return status in the thread to NX_SOCKET_UNBOUND.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SOCKET_UNBOUND;
 800a3c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c8:	2226      	movs	r2, #38	; 0x26
 800a3ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800a3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d2:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800a3d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f003 f82d 	bl	800d438 <_tx_thread_system_resume>

            /* Decrease the suspended count.  */
            socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3e2:	1e5a      	subs	r2, r3, #1
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	65da      	str	r2, [r3, #92]	; 0x5c
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1d4      	bne.n	800a39a <_nx_udp_socket_unbind+0x136>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a3f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a3f4:	617b      	str	r3, [r7, #20]
    return(posture);
 800a3f6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a3f8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a3fa:	b672      	cpsid	i
    return(int_posture);
 800a3fc:	693b      	ldr	r3, [r7, #16]
        }
    }

    /* Disable interrupts again.  */
    TX_DISABLE
 800a3fe:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there are any threads suspended on trying to bind to the
       same port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_bind_suspension_list;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a404:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (thread_ptr)
 800a406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d079      	beq.n	800a500 <_nx_udp_socket_unbind+0x29c>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800a40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a40e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a412:	429a      	cmp	r2, r3
 800a414:	d103      	bne.n	800a41e <_nx_udp_socket_unbind+0x1ba>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	661a      	str	r2, [r3, #96]	; 0x60
 800a41c:	e00d      	b.n	800a43a <_nx_udp_socket_unbind+0x1d6>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800a41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a420:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	661a      	str	r2, [r3, #96]	; 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800a426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800a42a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a42c:	6f52      	ldr	r2, [r2, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800a42e:	675a      	str	r2, [r3, #116]	; 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
                thread_ptr -> tx_thread_suspended_next;
 800a434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a436:	6f12      	ldr	r2, [r2, #112]	; 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a438:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a43e:	1e5a      	subs	r2, r3, #1
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	665a      	str	r2, [r3, #100]	; 0x64

        /* Pickup the new socket structure to link to the port list.  */
        new_socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800a444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a448:	633b      	str	r3, [r7, #48]	; 0x30

        /* Clear the new socket's bind in progress flag.  */
        new_socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	2200      	movs	r2, #0
 800a44e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Inherit the suspension list from the previously bound socket.  */
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
            socket_ptr -> nx_udp_socket_bind_suspension_list;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6e1a      	ldr	r2, [r3, #96]	; 0x60
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
 800a454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a456:	661a      	str	r2, [r3, #96]	; 0x60
        socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Link the new socket to the bound list.  */
        if (ip_ptr -> nx_ip_udp_port_table[index])
 800a45e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a462:	32e0      	adds	r2, #224	; 0xe0
 800a464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d01e      	beq.n	800a4aa <_nx_udp_socket_unbind+0x246>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            new_socket_ptr -> nx_udp_socket_bound_next =
                ip_ptr -> nx_ip_udp_port_table[index];
 800a46c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a46e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a470:	32e0      	adds	r2, #224	; 0xe0
 800a472:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            new_socket_ptr -> nx_udp_socket_bound_next =
 800a476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a478:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =
                (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 800a47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a47c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a47e:	32e0      	adds	r2, #224	; 0xe0
 800a480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            new_socket_ptr -> nx_udp_socket_bound_previous =
 800a486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a488:	651a      	str	r2, [r3, #80]	; 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800a48a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a48c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a48e:	32e0      	adds	r2, #224	; 0xe0
 800a490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a498:	64da      	str	r2, [r3, #76]	; 0x4c
                new_socket_ptr;
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   new_socket_ptr;
 800a49a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a49c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a49e:	32e0      	adds	r2, #224	; 0xe0
 800a4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4a6:	651a      	str	r2, [r3, #80]	; 0x50
 800a4a8:	e00b      	b.n	800a4c2 <_nx_udp_socket_unbind+0x25e>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            new_socket_ptr -> nx_udp_socket_bound_next =      new_socket_ptr;
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4ae:	64da      	str	r2, [r3, #76]	; 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =  new_socket_ptr;
 800a4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4b4:	651a      	str	r2, [r3, #80]	; 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =           new_socket_ptr;
 800a4b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4ba:	32e0      	adds	r2, #224	; 0xe0
 800a4bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a4c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	669a      	str	r2, [r3, #104]	; 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800a4c8:	4b16      	ldr	r3, [pc, #88]	; (800a524 <_nx_udp_socket_unbind+0x2c0>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	4a15      	ldr	r2, [pc, #84]	; (800a524 <_nx_udp_socket_unbind+0x2c0>)
 800a4d0:	6013      	str	r3, [r2, #0]
 800a4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f383 8810 	msr	PRIMASK, r3
}
 800a4dc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800a4de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a4e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4e8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f002 f9ed 	bl	800c8cc <_tx_mutex_put>

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800a4f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a4f4:	f002 ffa0 	bl	800d438 <_tx_thread_system_resume>
        /* Return success to the caller.  */
        return(NX_SUCCESS);
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800a4f8:	f002 ff64 	bl	800d3c4 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	e00c      	b.n	800a51a <_nx_udp_socket_unbind+0x2b6>
 800a500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a502:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	f383 8810 	msr	PRIMASK, r3
}
 800a50a:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a50c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a50e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a512:	4618      	mov	r0, r3
 800a514:	f002 f9da 	bl	800c8cc <_tx_mutex_put>
        return(NX_SUCCESS);
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3750      	adds	r7, #80	; 0x50
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	2001491c 	.word	0x2001491c

0800a528 <_nxd_udp_socket_send>:
/**************************************************************************/
UINT  _nxd_udp_socket_send(NX_UDP_SOCKET *socket_ptr,
                           NX_PACKET     *packet_ptr,
                           NXD_ADDRESS   *ip_address,
                           UINT           port)
{
 800a528:	b590      	push	{r4, r7, lr}
 800a52a:	b097      	sub	sp, #92	; 0x5c
 800a52c:	af04      	add	r7, sp, #16
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

NX_IP         *ip_ptr;
NX_UDP_HEADER *udp_header_ptr;
ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800a536:	2300      	movs	r3, #0
 800a538:	647b      	str	r3, [r7, #68]	; 0x44
 800a53a:	2300      	movs	r3, #0
 800a53c:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef NX_DISABLE_IPV4
ULONG          next_hop_address = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	617b      	str	r3, [r7, #20]
#endif /* !NX_DISABLE_IPV4  */
#if !defined(NX_DISABLE_IPV4) || (defined(FEATURE_NX_IPV6) && defined(NX_ENABLE_INTERFACE_CAPABILITY))
NX_INTERFACE  *interface_ptr = NX_NULL;
 800a542:	2300      	movs	r3, #0
 800a544:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifdef TX_ENABLE_EVENT_TRACE
UINT           ip_address_log = 0;
#endif /* TX_ENABLE_EVENT_TRACE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT           compute_checksum = 1;
 800a546:	2301      	movs	r3, #1
 800a548:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a54a:	f3ef 8310 	mrs	r3, PRIMASK
 800a54e:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800a552:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a554:	b672      	cpsid	i
    return(int_posture);
 800a556:	6a3b      	ldr	r3, [r7, #32]
    /* Disable UDP TX checksum. */
    compute_checksum = 0;
#endif /* NX_DISABLE_UDP_TX_CHECKSUM */

    /* Lockout interrupts.  */
    TX_DISABLE
 800a558:	633b      	str	r3, [r7, #48]	; 0x30

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the socket is currently bound to a UDP port.  */
    if (!socket_ptr ->  nx_udp_socket_bound_next)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d107      	bne.n	800a572 <_nxd_udp_socket_send+0x4a>
 800a562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a564:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	f383 8810 	msr	PRIMASK, r3
}
 800a56c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
 800a56e:	2324      	movs	r3, #36	; 0x24
 800a570:	e0d3      	b.n	800a71a <_nxd_udp_socket_send+0x1f2>
    }

    /* Pickup the important information from the socket.  */

    /* Set up the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	f383 8810 	msr	PRIMASK, r3
}
 800a582:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_DISABLE_IPV4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b04      	cmp	r3, #4
 800a58a:	d118      	bne.n	800a5be <_nxd_udp_socket_send+0x96>
    {

        /* Look for a suitable interface. */
        _nx_ip_route_find(ip_ptr, ip_address -> nxd_ip_address.v4, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6859      	ldr	r1, [r3, #4]
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a596:	f107 0314 	add.w	r3, r7, #20
 800a59a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a59c:	f7fd fd7a 	bl	8008094 <_nx_ip_route_find>
                          &next_hop_address);

        /* Check the packet interface.  */
        if (!packet_ptr -> nx_packet_address.nx_packet_interface_ptr)
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d101      	bne.n	800a5ac <_nxd_udp_socket_send+0x84>
        {

            /* None found; return the error status. */
            return(NX_IP_ADDRESS_ERROR);
 800a5a8:	2321      	movs	r3, #33	; 0x21
 800a5aa:	e0b6      	b.n	800a71a <_nxd_udp_socket_send+0x1f2>
        }

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Fill in the IP src/dest address */
        ip_dest_addr = &ip_address -> nxd_ip_address.v4;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	643b      	str	r3, [r7, #64]	; 0x40
        ip_src_addr = &interface_ptr -> nx_interface_ip_address;
 800a5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ba:	3314      	adds	r3, #20
 800a5bc:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }
#endif /* NX_IPSEC_ENABLE */
        
    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	f1a3 0208 	sub.w	r2, r3, #8
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(ip_address -> nxd_ip_version);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 800a5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 800a5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ee:	441a      	add	r2, r3
 800a5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	1c5a      	adds	r2, r3, #1
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	695a      	ldr	r2, [r3, #20]
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a608:	441a      	add	r2, r3
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a612:	f103 0208 	add.w	r2, r3, #8
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the UDP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 =
        (((ULONG)socket_ptr -> nx_udp_socket_port) << NX_SHIFT_BY_16) | (ULONG)port;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	041a      	lsls	r2, r3, #16
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	431a      	orrs	r2, r3
    udp_header_ptr -> nx_udp_header_word_0 =
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a632:	041a      	lsls	r2, r3, #16
 800a634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a636:	605a      	str	r2, [r3, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_SEND, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
    swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800a638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	ba1a      	rev	r2, r3
 800a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a640:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	ba1a      	rev	r2, r3
 800a648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64a:	605a      	str	r2, [r3, #4]
    Note that with IPv6, UDP packet checksum is mandatory. However if the underly device
    driver is able to compute UDP checksum in hardware, let the driver handle the checksum
    computation.
    */

    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a650:	2b00      	cmp	r3, #0
 800a652:	d003      	beq.n	800a65c <_nxd_udp_socket_send+0x134>
        (ip_address -> nxd_ip_version == NX_IP_VERSION_V6))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800a658:	2b06      	cmp	r3, #6
 800a65a:	d136      	bne.n	800a6ca <_nxd_udp_socket_send+0x1a2>
    {
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 800a65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a660:	f003 0310 	and.w	r3, r3, #16
 800a664:	2b00      	cmp	r3, #0
 800a666:	d001      	beq.n	800a66c <_nxd_udp_socket_send+0x144>
        {
            compute_checksum = 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	63bb      	str	r3, [r7, #56]	; 0x38
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 800a66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d025      	beq.n	800a6be <_nxd_udp_socket_send+0x196>
        ULONG checksum;

            /* Yes, we need to compute the UDP checksum.  */
            checksum = _nx_ip_checksum_compute(packet_ptr,
                                               NX_PROTOCOL_UDP,
                                               (UINT)packet_ptr -> nx_packet_length,
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            checksum = _nx_ip_checksum_compute(packet_ptr,
 800a676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a67c:	2111      	movs	r1, #17
 800a67e:	68b8      	ldr	r0, [r7, #8]
 800a680:	f7fc faa1 	bl	8006bc6 <_nx_ip_checksum_compute>
 800a684:	4603      	mov	r3, r0
 800a686:	637b      	str	r3, [r7, #52]	; 0x34
                                               ip_src_addr,
                                               ip_dest_addr);
            checksum = ~checksum & NX_LOWER_16_MASK;
 800a688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68a:	43db      	mvns	r3, r3
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	637b      	str	r3, [r7, #52]	; 0x34

            /* If the computed checksum is zero, it will be transmitted as all ones. */
            /* RFC 768, page 2. */
            if (checksum == 0)
 800a690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a692:	2b00      	cmp	r3, #0
 800a694:	d102      	bne.n	800a69c <_nxd_udp_socket_send+0x174>
            {
                checksum = 0xFFFF;
 800a696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a69a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	ba1a      	rev	r2, r3
 800a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a4:	605a      	str	r2, [r3, #4]

            udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 800a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a8:	685a      	ldr	r2, [r3, #4]
 800a6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b0:	605a      	str	r2, [r3, #4]

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	ba1a      	rev	r2, r3
 800a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ba:	605a      	str	r2, [r3, #4]
 800a6bc:	e005      	b.n	800a6ca <_nxd_udp_socket_send+0x1a2>
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        else
        {
            /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c2:	f043 0210 	orr.w	r2, r3, #16
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	639a      	str	r2, [r3, #56]	; 0x38
        }
#endif
    }

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6cc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a6d0:	f04f 31ff 	mov.w	r1, #4294967295
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f001 fe81 	bl	800c3dc <_tx_mutex_get>
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

#ifndef NX_DISABLE_IPV4
    /* Send the UDP packet to the IPv4 component.  */
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b04      	cmp	r3, #4
 800a6e0:	d114      	bne.n	800a70c <_nxd_udp_socket_send+0x1e4>
    {

        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6858      	ldr	r0, [r3, #4]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
                           socket_ptr -> nx_udp_socket_type_of_service,
                           socket_ptr -> nx_udp_socket_time_to_live,
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a6f2:	6979      	ldr	r1, [r7, #20]
 800a6f4:	9103      	str	r1, [sp, #12]
 800a6f6:	9202      	str	r2, [sp, #8]
 800a6f8:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800a6fc:	9201      	str	r2, [sp, #4]
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	4623      	mov	r3, r4
 800a702:	4602      	mov	r2, r0
 800a704:	68b9      	ldr	r1, [r7, #8]
 800a706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a708:	f7fd fc4e 	bl	8007fa8 <_nx_ip_packet_send>
                             ip_dest_addr);
    }
#endif /* FEATURE_NX_IPV6 */

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800a712:	4618      	mov	r0, r3
 800a714:	f002 f8da 	bl	800c8cc <_tx_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	374c      	adds	r7, #76	; 0x4c
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd90      	pop	{r4, r7, pc}
	...

0800a724 <_nxe_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b088      	sub	sp, #32
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (arp_cache_memory == NX_NULL))
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d007      	beq.n	800a746 <_nxe_arp_enable+0x22>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a1c      	ldr	r2, [pc, #112]	; (800a7ac <_nxe_arp_enable+0x88>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d102      	bne.n	800a746 <_nxe_arp_enable+0x22>
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d101      	bne.n	800a74a <_nxe_arp_enable+0x26>
    {
        return(NX_PTR_ERROR);
 800a746:	2307      	movs	r3, #7
 800a748:	e02c      	b.n	800a7a4 <_nxe_arp_enable+0x80>
    }

    /* Check to see if ARP is already enabled.  */
    if (ip_ptr -> nx_ip_arp_allocate)
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	; 0x6e4
 800a750:	2b00      	cmp	r3, #0
 800a752:	d001      	beq.n	800a758 <_nxe_arp_enable+0x34>
    {
        return(NX_ALREADY_ENABLED);
 800a754:	2315      	movs	r3, #21
 800a756:	e025      	b.n	800a7a4 <_nxe_arp_enable+0x80>
    }

    /* Check for invalid ARP cache size.  */
    if (arp_cache_size < sizeof(NX_ARP))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b33      	cmp	r3, #51	; 0x33
 800a75c:	d801      	bhi.n	800a762 <_nxe_arp_enable+0x3e>
    {
        return(NX_SIZE_ERROR);
 800a75e:	2309      	movs	r3, #9
 800a760:	e020      	b.n	800a7a4 <_nxe_arp_enable+0x80>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a762:	f3ef 8305 	mrs	r3, IPSR
 800a766:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a768:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800a76a:	4b11      	ldr	r3, [pc, #68]	; (800a7b0 <_nxe_arp_enable+0x8c>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4313      	orrs	r3, r2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d009      	beq.n	800a788 <_nxe_arp_enable+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a774:	f3ef 8305 	mrs	r3, IPSR
 800a778:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	4b0c      	ldr	r3, [pc, #48]	; (800a7b0 <_nxe_arp_enable+0x8c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4313      	orrs	r3, r2
 800a782:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a786:	d304      	bcc.n	800a792 <_nxe_arp_enable+0x6e>
 800a788:	4b0a      	ldr	r3, [pc, #40]	; (800a7b4 <_nxe_arp_enable+0x90>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a0a      	ldr	r2, [pc, #40]	; (800a7b8 <_nxe_arp_enable+0x94>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d101      	bne.n	800a796 <_nxe_arp_enable+0x72>
 800a792:	2311      	movs	r3, #17
 800a794:	e006      	b.n	800a7a4 <_nxe_arp_enable+0x80>

    /* Call actual ARP enable function.  */
    status =  _nx_arp_enable(ip_ptr, arp_cache_memory, arp_cache_size);
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	68b9      	ldr	r1, [r7, #8]
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f7fb f810 	bl	80057c0 <_nx_arp_enable>
 800a7a0:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800a7a2:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3720      	adds	r7, #32
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	49502020 	.word	0x49502020
 800a7b0:	20000088 	.word	0x20000088
 800a7b4:	20014884 	.word	0x20014884
 800a7b8:	200149cc 	.word	0x200149cc

0800a7bc <_nxe_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_icmp_enable(NX_IP *ip_ptr)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b086      	sub	sp, #24
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d004      	beq.n	800a7d4 <_nxe_icmp_enable+0x18>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a17      	ldr	r2, [pc, #92]	; (800a82c <_nxe_icmp_enable+0x70>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d001      	beq.n	800a7d8 <_nxe_icmp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 800a7d4:	2307      	movs	r3, #7
 800a7d6:	e025      	b.n	800a824 <_nxe_icmp_enable+0x68>
    }

    /* Check to see if ICMP is enabled.  */
    if (ip_ptr -> nx_ip_icmp_packet_receive)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <_nxe_icmp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 800a7e2:	2315      	movs	r3, #21
 800a7e4:	e01e      	b.n	800a824 <_nxe_icmp_enable+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a7e6:	f3ef 8305 	mrs	r3, IPSR
 800a7ea:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a7ec:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800a7ee:	4b10      	ldr	r3, [pc, #64]	; (800a830 <_nxe_icmp_enable+0x74>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d009      	beq.n	800a80c <_nxe_icmp_enable+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a7f8:	f3ef 8305 	mrs	r3, IPSR
 800a7fc:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	4b0b      	ldr	r3, [pc, #44]	; (800a830 <_nxe_icmp_enable+0x74>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4313      	orrs	r3, r2
 800a806:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a80a:	d304      	bcc.n	800a816 <_nxe_icmp_enable+0x5a>
 800a80c:	4b09      	ldr	r3, [pc, #36]	; (800a834 <_nxe_icmp_enable+0x78>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a09      	ldr	r2, [pc, #36]	; (800a838 <_nxe_icmp_enable+0x7c>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d101      	bne.n	800a81a <_nxe_icmp_enable+0x5e>
 800a816:	2311      	movs	r3, #17
 800a818:	e004      	b.n	800a824 <_nxe_icmp_enable+0x68>

    /* Call actual ICMP enable function.  */
    status =  _nx_icmp_enable(ip_ptr);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7fb fdd4 	bl	80063c8 <_nx_icmp_enable>
 800a820:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800a822:	697b      	ldr	r3, [r7, #20]
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a824:	4618      	mov	r0, r3
 800a826:	3718      	adds	r7, #24
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	49502020 	.word	0x49502020
 800a830:	20000088 	.word	0x20000088
 800a834:	20014884 	.word	0x20014884
 800a838:	200149cc 	.word	0x200149cc

0800a83c <_nxe_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (ip_address == NX_NULL) || (network_mask == NX_NULL))
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00a      	beq.n	800a864 <_nxe_ip_address_get+0x28>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a18      	ldr	r2, [pc, #96]	; (800a8b4 <_nxe_ip_address_get+0x78>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d105      	bne.n	800a864 <_nxe_ip_address_get+0x28>
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d002      	beq.n	800a864 <_nxe_ip_address_get+0x28>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d101      	bne.n	800a868 <_nxe_ip_address_get+0x2c>
    {
        return(NX_PTR_ERROR);
 800a864:	2307      	movs	r3, #7
 800a866:	e020      	b.n	800a8aa <_nxe_ip_address_get+0x6e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a868:	f3ef 8305 	mrs	r3, IPSR
 800a86c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a86e:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800a870:	4b11      	ldr	r3, [pc, #68]	; (800a8b8 <_nxe_ip_address_get+0x7c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4313      	orrs	r3, r2
 800a876:	2b00      	cmp	r3, #0
 800a878:	d009      	beq.n	800a88e <_nxe_ip_address_get+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a87a:	f3ef 8305 	mrs	r3, IPSR
 800a87e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	4b0d      	ldr	r3, [pc, #52]	; (800a8b8 <_nxe_ip_address_get+0x7c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4313      	orrs	r3, r2
 800a888:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a88c:	d304      	bcc.n	800a898 <_nxe_ip_address_get+0x5c>
 800a88e:	4b0b      	ldr	r3, [pc, #44]	; (800a8bc <_nxe_ip_address_get+0x80>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a0b      	ldr	r2, [pc, #44]	; (800a8c0 <_nxe_ip_address_get+0x84>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d101      	bne.n	800a89c <_nxe_ip_address_get+0x60>
 800a898:	2311      	movs	r3, #17
 800a89a:	e006      	b.n	800a8aa <_nxe_ip_address_get+0x6e>

    /* Call actual IP address get function.  */
    status =  _nx_ip_address_get(ip_ptr, ip_address, network_mask);
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	68b9      	ldr	r1, [r7, #8]
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f7fc f95f 	bl	8006b64 <_nx_ip_address_get>
 800a8a6:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800a8a8:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3720      	adds	r7, #32
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	49502020 	.word	0x49502020
 800a8b8:	20000088 	.word	0x20000088
 800a8bc:	20014884 	.word	0x20014884
 800a8c0:	200149cc 	.word	0x200149cc

0800a8c4 <_nxe_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                     NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                     VOID *memory_ptr, ULONG memory_size, UINT priority, UINT ip_control_block_size)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b092      	sub	sp, #72	; 0x48
 800a8c8:	af06      	add	r7, sp, #24
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
 800a8d0:	603b      	str	r3, [r7, #0]

UINT       status;
UINT       old_threshold = 0;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	613b      	str	r3, [r7, #16]
UCHAR     *end_stack;
TX_THREAD *current_thread;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d011      	beq.n	800a900 <_nxe_ip_create+0x3c>
 800a8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00e      	beq.n	800a900 <_nxe_ip_create+0x3c>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e4:	681b      	ldr	r3, [r3, #0]
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800a8e6:	4a58      	ldr	r2, [pc, #352]	; (800aa48 <_nxe_ip_create+0x184>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d109      	bne.n	800a900 <_nxe_ip_create+0x3c>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800a8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d006      	beq.n	800a900 <_nxe_ip_create+0x3c>
 800a8f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d003      	beq.n	800a900 <_nxe_ip_create+0x3c>
        (memory_ptr == NX_NULL) || (ip_control_block_size != (UINT)sizeof(NX_IP)))
 800a8f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8fa:	f5b3 6ff9 	cmp.w	r3, #1992	; 0x7c8
 800a8fe:	d001      	beq.n	800a904 <_nxe_ip_create+0x40>
    {
        return(NX_PTR_ERROR);
 800a900:	2307      	movs	r3, #7
 800a902:	e09d      	b.n	800aa40 <_nxe_ip_create+0x17c>
    }

    /* Check for a memory size error.  */
    if (memory_size < TX_MINIMUM_STACK)
 800a904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a906:	2bc7      	cmp	r3, #199	; 0xc7
 800a908:	d801      	bhi.n	800a90e <_nxe_ip_create+0x4a>
    {
        return(NX_SIZE_ERROR);
 800a90a:	2309      	movs	r3, #9
 800a90c:	e098      	b.n	800aa40 <_nxe_ip_create+0x17c>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 800a90e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a910:	2b1f      	cmp	r3, #31
 800a912:	d901      	bls.n	800a918 <_nxe_ip_create+0x54>
    {
        return(NX_OPTION_ERROR);
 800a914:	230a      	movs	r3, #10
 800a916:	e093      	b.n	800aa40 <_nxe_ip_create+0x17c>
    }

    /* Calculate the end of the stack area.  */
    end_stack =  ((UCHAR *)memory_ptr) + (memory_size - 1);
 800a918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a91a:	3b01      	subs	r3, #1
 800a91c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a91e:	4413      	add	r3, r2
 800a920:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800a922:	f002 faef 	bl	800cf04 <_tx_thread_identify>
 800a926:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    if (current_thread)
 800a928:	6a3b      	ldr	r3, [r7, #32]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d006      	beq.n	800a93c <_nxe_ip_create+0x78>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800a92e:	f107 0310 	add.w	r3, r7, #16
 800a932:	461a      	mov	r2, r3
 800a934:	2100      	movs	r1, #0
 800a936:	6a38      	ldr	r0, [r7, #32]
 800a938:	f002 fb3e 	bl	800cfb8 <_tx_thread_preemption_change>
    }

    /* Loop to check for the IP instance already created.  */
    created_ip =     _nx_ip_created_ptr;
 800a93c:	4b43      	ldr	r3, [pc, #268]	; (800aa4c <_nxe_ip_create+0x188>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	62fb      	str	r3, [r7, #44]	; 0x2c
    created_count =  _nx_ip_created_count;
 800a942:	4b43      	ldr	r3, [pc, #268]	; (800aa50 <_nxe_ip_create+0x18c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	62bb      	str	r3, [r7, #40]	; 0x28
    while (created_count--)
 800a948:	e02b      	b.n	800a9a2 <_nxe_ip_create+0xde>
    {

        /* Is the new ip already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ip_ptr == created_ip) ||
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94e:	429a      	cmp	r2, r3
 800a950:	d017      	beq.n	800a982 <_nxe_ip_create+0xbe>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800a952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a954:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
        if ((ip_ptr == created_ip) ||
 800a958:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d305      	bcc.n	800a96a <_nxe_ip_create+0xa6>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800a95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a960:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a964:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a966:	429a      	cmp	r2, r3
 800a968:	d30b      	bcc.n	800a982 <_nxe_ip_create+0xbe>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800a96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800a970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a972:	429a      	cmp	r2, r3
 800a974:	d311      	bcc.n	800a99a <_nxe_ip_create+0xd6>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800a976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a978:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800a97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a97e:	429a      	cmp	r2, r3
 800a980:	d20b      	bcs.n	800a99a <_nxe_ip_create+0xd6>
        {

            /* Restore preemption.  */
            if (current_thread)
 800a982:	6a3b      	ldr	r3, [r7, #32]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d006      	beq.n	800a996 <_nxe_ip_create+0xd2>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	f107 0210 	add.w	r2, r7, #16
 800a98e:	4619      	mov	r1, r3
 800a990:	6a38      	ldr	r0, [r7, #32]
 800a992:	f002 fb11 	bl	800cfb8 <_tx_thread_preemption_change>
            }

            /* Duplicate ip created, return an error!  */
            return(NX_PTR_ERROR);
 800a996:	2307      	movs	r3, #7
 800a998:	e052      	b.n	800aa40 <_nxe_ip_create+0x17c>
        }

        /* Move to next entry.  */
        created_ip =  created_ip -> nx_ip_created_next;
 800a99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99c:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 800a9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (created_count--)
 800a9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a4:	1e5a      	subs	r2, r3, #1
 800a9a6:	62ba      	str	r2, [r7, #40]	; 0x28
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1ce      	bne.n	800a94a <_nxe_ip_create+0x86>
    }

    /* Restore preemption.  */
    if (current_thread)
 800a9ac:	6a3b      	ldr	r3, [r7, #32]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d006      	beq.n	800a9c0 <_nxe_ip_create+0xfc>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	f107 0210 	add.w	r2, r7, #16
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	6a38      	ldr	r0, [r7, #32]
 800a9bc:	f002 fafc 	bl	800cfb8 <_tx_thread_preemption_change>
    }

    /* Check for invalid IP address.  Note that Interface with DHCP enabled
       would start with 0.0.0.0.  Therefore the 0 IP address is allowed. */
    if ((ip_address != 0) &&
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d010      	beq.n	800a9e8 <_nxe_ip_create+0x124>
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800a9c6:	687b      	ldr	r3, [r7, #4]
    if ((ip_address != 0) &&
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	da0d      	bge.n	800a9e8 <_nxe_ip_create+0x124>
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800a9d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9d6:	d007      	beq.n	800a9e8 <_nxe_ip_create+0x124>
        ((ip_address & NX_IP_CLASS_C_MASK) != NX_IP_CLASS_C_TYPE))
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800a9de:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800a9e2:	d001      	beq.n	800a9e8 <_nxe_ip_create+0x124>
    {
        return(NX_IP_ADDRESS_ERROR);
 800a9e4:	2321      	movs	r3, #33	; 0x21
 800a9e6:	e02b      	b.n	800aa40 <_nxe_ip_create+0x17c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a9e8:	f3ef 8305 	mrs	r3, IPSR
 800a9ec:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a9ee:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800a9f0:	4b18      	ldr	r3, [pc, #96]	; (800aa54 <_nxe_ip_create+0x190>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d009      	beq.n	800aa0e <_nxe_ip_create+0x14a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a9fa:	f3ef 8305 	mrs	r3, IPSR
 800a9fe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	4b14      	ldr	r3, [pc, #80]	; (800aa54 <_nxe_ip_create+0x190>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800aa0c:	d304      	bcc.n	800aa18 <_nxe_ip_create+0x154>
 800aa0e:	4b12      	ldr	r3, [pc, #72]	; (800aa58 <_nxe_ip_create+0x194>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a12      	ldr	r2, [pc, #72]	; (800aa5c <_nxe_ip_create+0x198>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d101      	bne.n	800aa1c <_nxe_ip_create+0x158>
 800aa18:	2311      	movs	r3, #17
 800aa1a:	e011      	b.n	800aa40 <_nxe_ip_create+0x17c>

    /* Call actual IP instance create function.  */
    status =  _nx_ip_create(ip_ptr, name, ip_address, network_mask, default_pool, ip_link_driver,
 800aa1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa1e:	9304      	str	r3, [sp, #16]
 800aa20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa22:	9303      	str	r3, [sp, #12]
 800aa24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa26:	9302      	str	r3, [sp, #8]
 800aa28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa2a:	9301      	str	r3, [sp, #4]
 800aa2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	68b9      	ldr	r1, [r7, #8]
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f7fc f9b2 	bl	8006da0 <_nx_ip_create>
 800aa3c:	61f8      	str	r0, [r7, #28]
                            memory_ptr, memory_size, priority);

    /* Return completion status.  */
    return(status);
 800aa3e:	69fb      	ldr	r3, [r7, #28]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3730      	adds	r7, #48	; 0x30
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	5041434b 	.word	0x5041434b
 800aa4c:	20014828 	.word	0x20014828
 800aa50:	2001482c 	.word	0x2001482c
 800aa54:	20000088 	.word	0x20000088
 800aa58:	20014884 	.word	0x20014884
 800aa5c:	200149cc 	.word	0x200149cc

0800aa60 <_nxe_ip_driver_direct_command>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_driver_direct_command(NX_IP *ip_ptr, UINT command, ULONG *return_value_ptr)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b088      	sub	sp, #32
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]

UINT status;

    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (return_value_ptr == NX_NULL))
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d007      	beq.n	800aa82 <_nxe_ip_driver_direct_command+0x22>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a16      	ldr	r2, [pc, #88]	; (800aad0 <_nxe_ip_driver_direct_command+0x70>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d102      	bne.n	800aa82 <_nxe_ip_driver_direct_command+0x22>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d101      	bne.n	800aa86 <_nxe_ip_driver_direct_command+0x26>
    {
        return(NX_PTR_ERROR);
 800aa82:	2307      	movs	r3, #7
 800aa84:	e020      	b.n	800aac8 <_nxe_ip_driver_direct_command+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aa86:	f3ef 8305 	mrs	r3, IPSR
 800aa8a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800aa8c:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800aa8e:	4b11      	ldr	r3, [pc, #68]	; (800aad4 <_nxe_ip_driver_direct_command+0x74>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d009      	beq.n	800aaac <_nxe_ip_driver_direct_command+0x4c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aa98:	f3ef 8305 	mrs	r3, IPSR
 800aa9c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	4b0c      	ldr	r3, [pc, #48]	; (800aad4 <_nxe_ip_driver_direct_command+0x74>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800aaaa:	d304      	bcc.n	800aab6 <_nxe_ip_driver_direct_command+0x56>
 800aaac:	4b0a      	ldr	r3, [pc, #40]	; (800aad8 <_nxe_ip_driver_direct_command+0x78>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a0a      	ldr	r2, [pc, #40]	; (800aadc <_nxe_ip_driver_direct_command+0x7c>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d101      	bne.n	800aaba <_nxe_ip_driver_direct_command+0x5a>
 800aab6:	2311      	movs	r3, #17
 800aab8:	e006      	b.n	800aac8 <_nxe_ip_driver_direct_command+0x68>

    /* Call actual IP direct driver command function.  */
    status =  _nx_ip_driver_direct_command(ip_ptr, command, return_value_ptr);
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	68b9      	ldr	r1, [r7, #8]
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f7fc fbcb 	bl	800725a <_nx_ip_driver_direct_command>
 800aac4:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800aac6:	69fb      	ldr	r3, [r7, #28]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	49502020 	.word	0x49502020
 800aad4:	20000088 	.word	0x20000088
 800aad8:	20014884 	.word	0x20014884
 800aadc:	200149cc 	.word	0x200149cc

0800aae0 <_nxe_ip_interface_status_check>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_interface_status_check(NX_IP *ip_ptr, UINT interface_index, ULONG needed_status,
                                     ULONG *actual_status, ULONG wait_option)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b088      	sub	sp, #32
 800aae4:	af02      	add	r7, sp, #8
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
 800aaec:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (actual_status == NX_NULL))
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d007      	beq.n	800ab04 <_nxe_ip_interface_status_check+0x24>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a21      	ldr	r2, [pc, #132]	; (800ab80 <_nxe_ip_interface_status_check+0xa0>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d102      	bne.n	800ab04 <_nxe_ip_interface_status_check+0x24>
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <_nxe_ip_interface_status_check+0x28>
    {
        return(NX_PTR_ERROR);
 800ab04:	2307      	movs	r3, #7
 800ab06:	e037      	b.n	800ab78 <_nxe_ip_interface_status_check+0x98>
    }

    /* Check for invalid interface index. */
    if ((interface_index >= NX_MAX_PHYSICAL_INTERFACES) ||
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10b      	bne.n	800ab26 <_nxe_ip_interface_status_check+0x46>
        (ip_ptr -> nx_ip_interface[interface_index].nx_interface_valid) == 0)
 800ab0e:	68f9      	ldr	r1, [r7, #12]
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	4613      	mov	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	011b      	lsls	r3, r3, #4
 800ab1a:	440b      	add	r3, r1
 800ab1c:	f203 7324 	addw	r3, r3, #1828	; 0x724
 800ab20:	781b      	ldrb	r3, [r3, #0]
    if ((interface_index >= NX_MAX_PHYSICAL_INTERFACES) ||
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <_nxe_ip_interface_status_check+0x4a>
    {
        return(NX_INVALID_INTERFACE);
 800ab26:	234c      	movs	r3, #76	; 0x4c
 800ab28:	e026      	b.n	800ab78 <_nxe_ip_interface_status_check+0x98>
    }

    /* Check for valid options.  */
    if (needed_status &
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800ab30:	f023 0301 	bic.w	r3, r3, #1
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d001      	beq.n	800ab3c <_nxe_ip_interface_status_check+0x5c>
#ifndef NX_DISABLE_IPV4
          | (NX_IP_ADDRESS_RESOLVED | NX_IP_ARP_ENABLED | NX_IP_RARP_COMPLETE | NX_IP_IGMP_ENABLED)
#endif /* !NX_DISABLE_IPV4  */
         ))
    {
        return(NX_OPTION_ERROR);
 800ab38:	230a      	movs	r3, #10
 800ab3a:	e01d      	b.n	800ab78 <_nxe_ip_interface_status_check+0x98>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ab3c:	f3ef 8305 	mrs	r3, IPSR
 800ab40:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ab42:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800ab44:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <_nxe_ip_interface_status_check+0xa4>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d108      	bne.n	800ab60 <_nxe_ip_interface_status_check+0x80>
 800ab4e:	4b0e      	ldr	r3, [pc, #56]	; (800ab88 <_nxe_ip_interface_status_check+0xa8>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d004      	beq.n	800ab60 <_nxe_ip_interface_status_check+0x80>
 800ab56:	4b0c      	ldr	r3, [pc, #48]	; (800ab88 <_nxe_ip_interface_status_check+0xa8>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a0c      	ldr	r2, [pc, #48]	; (800ab8c <_nxe_ip_interface_status_check+0xac>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d101      	bne.n	800ab64 <_nxe_ip_interface_status_check+0x84>
 800ab60:	2311      	movs	r3, #17
 800ab62:	e009      	b.n	800ab78 <_nxe_ip_interface_status_check+0x98>

    /* Call actual IP interface status check function.  */
    status =  _nx_ip_interface_status_check(ip_ptr, interface_index, needed_status, actual_status, wait_option);
 800ab64:	6a3b      	ldr	r3, [r7, #32]
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	68b9      	ldr	r1, [r7, #8]
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	f7fc fecc 	bl	800790c <_nx_ip_interface_status_check>
 800ab74:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800ab76:	697b      	ldr	r3, [r7, #20]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3718      	adds	r7, #24
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	49502020 	.word	0x49502020
 800ab84:	20000088 	.word	0x20000088
 800ab88:	20014884 	.word	0x20014884
 800ab8c:	200149cc 	.word	0x200149cc

0800ab90 <_nxe_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                           ULONG packet_type, ULONG wait_option)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
 800ab9c:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (packet_ptr == NX_NULL))
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d007      	beq.n	800abb4 <_nxe_packet_allocate+0x24>
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a18      	ldr	r2, [pc, #96]	; (800ac0c <_nxe_packet_allocate+0x7c>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d102      	bne.n	800abb4 <_nxe_packet_allocate+0x24>
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <_nxe_packet_allocate+0x28>
    {
        return(NX_PTR_ERROR);
 800abb4:	2307      	movs	r3, #7
 800abb6:	e025      	b.n	800ac04 <_nxe_packet_allocate+0x74>
    }

    /* Check for an invalid packet type - for alignment purposes, it must be evenly divisible by the size
       of a ULONG.  */
    if (packet_type % sizeof(ULONG))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f003 0303 	and.w	r3, r3, #3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <_nxe_packet_allocate+0x36>
    {
        return(NX_OPTION_ERROR);
 800abc2:	230a      	movs	r3, #10
 800abc4:	e01e      	b.n	800ac04 <_nxe_packet_allocate+0x74>
    }

    /* Check for a thread caller if the wait option specifies suspension.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d013      	beq.n	800abf4 <_nxe_packet_allocate+0x64>
 800abcc:	4b10      	ldr	r3, [pc, #64]	; (800ac10 <_nxe_packet_allocate+0x80>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00d      	beq.n	800abf0 <_nxe_packet_allocate+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800abd4:	f3ef 8305 	mrs	r3, IPSR
 800abd8:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	4b0d      	ldr	r3, [pc, #52]	; (800ac14 <_nxe_packet_allocate+0x84>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d104      	bne.n	800abf0 <_nxe_packet_allocate+0x60>
 800abe6:	4b0a      	ldr	r3, [pc, #40]	; (800ac10 <_nxe_packet_allocate+0x80>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a0b      	ldr	r2, [pc, #44]	; (800ac18 <_nxe_packet_allocate+0x88>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d101      	bne.n	800abf4 <_nxe_packet_allocate+0x64>
 800abf0:	2311      	movs	r3, #17
 800abf2:	e007      	b.n	800ac04 <_nxe_packet_allocate+0x74>

    /* Call actual packet allocate function.  */
    status =  _nx_packet_allocate(pool_ptr,  packet_ptr, packet_type, wait_option);
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	68b9      	ldr	r1, [r7, #8]
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f7fe f90a 	bl	8008e14 <_nx_packet_allocate>
 800ac00:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800ac02:	697b      	ldr	r3, [r7, #20]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	5041434b 	.word	0x5041434b
 800ac10:	20014884 	.word	0x20014884
 800ac14:	20000088 	.word	0x20000088
 800ac18:	200149cc 	.word	0x200149cc

0800ac1c <_nxe_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                              NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b088      	sub	sp, #32
 800ac20:	af02      	add	r7, sp, #8
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) ||
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00a      	beq.n	800ac46 <_nxe_packet_data_append+0x2a>
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a22      	ldr	r2, [pc, #136]	; (800acc0 <_nxe_packet_data_append+0xa4>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d105      	bne.n	800ac46 <_nxe_packet_data_append+0x2a>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <_nxe_packet_data_append+0x2a>
        (packet_ptr == NX_NULL) || (data_start == NX_NULL))
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d101      	bne.n	800ac4a <_nxe_packet_data_append+0x2e>
    {
        return(NX_PTR_ERROR);
 800ac46:	2307      	movs	r3, #7
 800ac48:	e035      	b.n	800acb6 <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid size of data to append.  */
    if (!data_size)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d101      	bne.n	800ac54 <_nxe_packet_data_append+0x38>
    {
        return(NX_SIZE_ERROR);
 800ac50:	2309      	movs	r3, #9
 800ac52:	e030      	b.n	800acb6 <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	689a      	ldr	r2, [r3, #8]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d201      	bcs.n	800ac64 <_nxe_packet_data_append+0x48>
    {
        return(NX_UNDERFLOW);
 800ac60:	2302      	movs	r3, #2
 800ac62:	e028      	b.n	800acb6 <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	68da      	ldr	r2, [r3, #12]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	695b      	ldr	r3, [r3, #20]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d901      	bls.n	800ac74 <_nxe_packet_data_append+0x58>
    {
        return(NX_OVERFLOW);
 800ac70:	2303      	movs	r3, #3
 800ac72:	e020      	b.n	800acb6 <_nxe_packet_data_append+0x9a>
    }

    /* Check for appropriate caller.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 800ac74:	6a3b      	ldr	r3, [r7, #32]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d013      	beq.n	800aca2 <_nxe_packet_data_append+0x86>
 800ac7a:	4b12      	ldr	r3, [pc, #72]	; (800acc4 <_nxe_packet_data_append+0xa8>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00d      	beq.n	800ac9e <_nxe_packet_data_append+0x82>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ac82:	f3ef 8305 	mrs	r3, IPSR
 800ac86:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ac88:	693a      	ldr	r2, [r7, #16]
 800ac8a:	4b0f      	ldr	r3, [pc, #60]	; (800acc8 <_nxe_packet_data_append+0xac>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d104      	bne.n	800ac9e <_nxe_packet_data_append+0x82>
 800ac94:	4b0b      	ldr	r3, [pc, #44]	; (800acc4 <_nxe_packet_data_append+0xa8>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a0c      	ldr	r2, [pc, #48]	; (800accc <_nxe_packet_data_append+0xb0>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d101      	bne.n	800aca2 <_nxe_packet_data_append+0x86>
 800ac9e:	2311      	movs	r3, #17
 800aca0:	e009      	b.n	800acb6 <_nxe_packet_data_append+0x9a>

    /* Call actual packet data append function.  */
    status =  _nx_packet_data_append(packet_ptr, data_start, data_size, pool_ptr, wait_option);
 800aca2:	6a3b      	ldr	r3, [r7, #32]
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	68b9      	ldr	r1, [r7, #8]
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f7fe fa0b 	bl	80090c8 <_nx_packet_data_append>
 800acb2:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800acb4:	697b      	ldr	r3, [r7, #20]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3718      	adds	r7, #24
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	5041434b 	.word	0x5041434b
 800acc4:	20014884 	.word	0x20014884
 800acc8:	20000088 	.word	0x20000088
 800accc:	200149cc 	.word	0x200149cc

0800acd0 <_nxe_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                              VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b094      	sub	sp, #80	; 0x50
 800acd4:	af02      	add	r7, sp, #8
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
 800acdc:	603b      	str	r3, [r7, #0]

UINT            status;
ULONG           rounded_payload_size;
ULONG           rounded_pool_size;
ULONG           header_size;
UINT            old_threshold = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	613b      	str	r3, [r7, #16]
VOID           *rounded_pool_start;
TX_THREAD      *current_thread;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_start == NX_NULL) || (pool_control_block_size != (UINT)sizeof(NX_PACKET_POOL)))
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d005      	beq.n	800acf4 <_nxe_packet_pool_create+0x24>
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d002      	beq.n	800acf4 <_nxe_packet_pool_create+0x24>
 800acee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acf0:	2b3c      	cmp	r3, #60	; 0x3c
 800acf2:	d001      	beq.n	800acf8 <_nxe_packet_pool_create+0x28>
    {
        return(NX_PTR_ERROR);
 800acf4:	2307      	movs	r3, #7
 800acf6:	e0a7      	b.n	800ae48 <_nxe_packet_pool_create+0x178>
    }

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	3303      	adds	r3, #3
 800acfc:	f023 0303 	bic.w	r3, r3, #3
 800ad00:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad06:	1ad2      	subs	r2, r2, r3
 800ad08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad0a:	4413      	add	r3, r2
 800ad0c:	f023 0303 	bic.w	r3, r3, #3
 800ad10:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 800ad12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad14:	333c      	adds	r3, #60	; 0x3c
 800ad16:	637b      	str	r3, [r7, #52]	; 0x34

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800ad18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1a:	3303      	adds	r3, #3
 800ad1c:	f023 0303 	bic.w	r3, r3, #3
 800ad20:	637b      	str	r3, [r7, #52]	; 0x34

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 800ad22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad26:	1ad3      	subs	r3, r2, r3
 800ad28:	633b      	str	r3, [r7, #48]	; 0x30

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    rounded_payload_size =  (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800ad2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4413      	add	r3, r2
 800ad30:	3303      	adds	r3, #3
 800ad32:	f023 0203 	bic.w	r2, r3, #3
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check for an invalid pool and payload size.  */
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800ad3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad3e:	2b04      	cmp	r3, #4
 800ad40:	d908      	bls.n	800ad54 <_nxe_packet_pool_create+0x84>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d005      	beq.n	800ad54 <_nxe_packet_pool_create+0x84>
        ((rounded_payload_size + header_size) > rounded_pool_size))
 800ad48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4c:	4413      	add	r3, r2
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800ad4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d201      	bcs.n	800ad58 <_nxe_packet_pool_create+0x88>
    {
        return(NX_SIZE_ERROR);
 800ad54:	2309      	movs	r3, #9
 800ad56:	e077      	b.n	800ae48 <_nxe_packet_pool_create+0x178>
    }

    /* Calculate the end of the pool memory area.  */
    end_memory =  ((CHAR *)pool_start) + (pool_size - 1);
 800ad58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	683a      	ldr	r2, [r7, #0]
 800ad5e:	4413      	add	r3, r2
 800ad60:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800ad62:	f002 f8cf 	bl	800cf04 <_tx_thread_identify>
 800ad66:	6278      	str	r0, [r7, #36]	; 0x24

    /* Disable preemption temporarily.  */
    if (current_thread)
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d006      	beq.n	800ad7c <_nxe_packet_pool_create+0xac>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800ad6e:	f107 0310 	add.w	r3, r7, #16
 800ad72:	461a      	mov	r2, r3
 800ad74:	2100      	movs	r1, #0
 800ad76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad78:	f002 f91e 	bl	800cfb8 <_tx_thread_preemption_change>
    }

    /* Loop to check for the pool instance already created.  */
    created_pool =   _nx_packet_pool_created_ptr;
 800ad7c:	4b34      	ldr	r3, [pc, #208]	; (800ae50 <_nxe_packet_pool_create+0x180>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	647b      	str	r3, [r7, #68]	; 0x44
    created_count =  _nx_packet_pool_created_count;
 800ad82:	4b34      	ldr	r3, [pc, #208]	; (800ae54 <_nxe_packet_pool_create+0x184>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	643b      	str	r3, [r7, #64]	; 0x40
    while (created_count--)
 800ad88:	e02b      	b.n	800ade2 <_nxe_packet_pool_create+0x112>
    {

        /* Calculate the created pool's end of memory.  */
        created_end =  created_pool -> nx_packet_pool_start + (created_pool -> nx_packet_pool_size - 1);
 800ad8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad8c:	6a1a      	ldr	r2, [r3, #32]
 800ad8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad92:	3b01      	subs	r3, #1
 800ad94:	4413      	add	r3, r2
 800ad96:	61fb      	str	r3, [r7, #28]

        /* Is the new pool already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((pool_ptr == created_pool) ||
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d011      	beq.n	800adc4 <_nxe_packet_pool_create+0xf4>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800ada0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ada2:	6a1b      	ldr	r3, [r3, #32]
        if ((pool_ptr == created_pool) ||
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d303      	bcc.n	800adb2 <_nxe_packet_pool_create+0xe2>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d308      	bcc.n	800adc4 <_nxe_packet_pool_create+0xf4>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800adb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adb4:	6a1b      	ldr	r3, [r3, #32]
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800adb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adb8:	429a      	cmp	r2, r3
 800adba:	d30f      	bcc.n	800addc <_nxe_packet_pool_create+0x10c>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800adbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d20b      	bcs.n	800addc <_nxe_packet_pool_create+0x10c>
        {

            /* Restore preemption.  */
            if (current_thread)
 800adc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d006      	beq.n	800add8 <_nxe_packet_pool_create+0x108>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	f107 0210 	add.w	r2, r7, #16
 800add0:	4619      	mov	r1, r3
 800add2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800add4:	f002 f8f0 	bl	800cfb8 <_tx_thread_preemption_change>
            }

            /* Duplicate packet pool created, return an error!  */
            return(NX_PTR_ERROR);
 800add8:	2307      	movs	r3, #7
 800adda:	e035      	b.n	800ae48 <_nxe_packet_pool_create+0x178>
        }

        /* Move to next entry.  */
        created_pool =  created_pool -> nx_packet_pool_created_next;
 800addc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade0:	647b      	str	r3, [r7, #68]	; 0x44
    while (created_count--)
 800ade2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ade4:	1e5a      	subs	r2, r3, #1
 800ade6:	643a      	str	r2, [r7, #64]	; 0x40
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1ce      	bne.n	800ad8a <_nxe_packet_pool_create+0xba>
    }

    /* Restore preemption.  */
    if (current_thread)
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d006      	beq.n	800ae00 <_nxe_packet_pool_create+0x130>
    {
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	f107 0210 	add.w	r2, r7, #16
 800adf8:	4619      	mov	r1, r3
 800adfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adfc:	f002 f8dc 	bl	800cfb8 <_tx_thread_preemption_change>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ae00:	f3ef 8305 	mrs	r3, IPSR
 800ae04:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ae06:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800ae08:	4b13      	ldr	r3, [pc, #76]	; (800ae58 <_nxe_packet_pool_create+0x188>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d009      	beq.n	800ae26 <_nxe_packet_pool_create+0x156>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ae12:	f3ef 8305 	mrs	r3, IPSR
 800ae16:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ae18:	697a      	ldr	r2, [r7, #20]
 800ae1a:	4b0f      	ldr	r3, [pc, #60]	; (800ae58 <_nxe_packet_pool_create+0x188>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ae24:	d304      	bcc.n	800ae30 <_nxe_packet_pool_create+0x160>
 800ae26:	4b0d      	ldr	r3, [pc, #52]	; (800ae5c <_nxe_packet_pool_create+0x18c>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a0d      	ldr	r2, [pc, #52]	; (800ae60 <_nxe_packet_pool_create+0x190>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d101      	bne.n	800ae34 <_nxe_packet_pool_create+0x164>
 800ae30:	2311      	movs	r3, #17
 800ae32:	e009      	b.n	800ae48 <_nxe_packet_pool_create+0x178>

    /* Call actual packet pool create function.  */
    status =  _nx_packet_pool_create(pool_ptr, name_ptr, payload_size, pool_start, pool_size);
 800ae34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	68b9      	ldr	r1, [r7, #8]
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f7fe fa68 	bl	8009314 <_nx_packet_pool_create>
 800ae44:	6238      	str	r0, [r7, #32]

    /* Return completion status.  */
    return(status);
 800ae46:	6a3b      	ldr	r3, [r7, #32]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3748      	adds	r7, #72	; 0x48
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	20014830 	.word	0x20014830
 800ae54:	20014834 	.word	0x20014834
 800ae58:	20000088 	.word	0x20000088
 800ae5c:	20014884 	.word	0x20014884
 800ae60:	200149cc 	.word	0x200149cc

0800ae64 <_nxe_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_release(NX_PACKET **packet_ptr_ptr)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d009      	beq.n	800ae8c <_nxe_packet_release+0x28>
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d005      	beq.n	800ae8c <_nxe_packet_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800ae86:	4a12      	ldr	r2, [pc, #72]	; (800aed0 <_nxe_packet_release+0x6c>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d001      	beq.n	800ae90 <_nxe_packet_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800ae8c:	2307      	movs	r3, #7
 800ae8e:	e01a      	b.n	800aec6 <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	689a      	ldr	r2, [r3, #8]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d201      	bcs.n	800aea0 <_nxe_packet_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800ae9c:	2302      	movs	r3, #2
 800ae9e:	e012      	b.n	800aec6 <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	68da      	ldr	r2, [r3, #12]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	695b      	ldr	r3, [r3, #20]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d901      	bls.n	800aeb0 <_nxe_packet_release+0x4c>
    {
        return(NX_OVERFLOW);
 800aeac:	2303      	movs	r3, #3
 800aeae:	e00a      	b.n	800aec6 <_nxe_packet_release+0x62>
    }

    /* Call actual packet release function.  */
    status =  _nx_packet_release(packet_ptr);
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f7fe fb11 	bl	80094d8 <_nx_packet_release>
 800aeb6:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d102      	bne.n	800aec4 <_nxe_packet_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800aec4:	68bb      	ldr	r3, [r7, #8]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3710      	adds	r7, #16
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	5041434b 	.word	0x5041434b

0800aed4 <_nxe_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_transmit_release(NX_PACKET **packet_ptr_ptr)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d009      	beq.n	800aefc <_nxe_packet_transmit_release+0x28>
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d005      	beq.n	800aefc <_nxe_packet_transmit_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800aef6:	4a12      	ldr	r2, [pc, #72]	; (800af40 <_nxe_packet_transmit_release+0x6c>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d001      	beq.n	800af00 <_nxe_packet_transmit_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800aefc:	2307      	movs	r3, #7
 800aefe:	e01a      	b.n	800af36 <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	689a      	ldr	r2, [r3, #8]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d201      	bcs.n	800af10 <_nxe_packet_transmit_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800af0c:	2302      	movs	r3, #2
 800af0e:	e012      	b.n	800af36 <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	68da      	ldr	r2, [r3, #12]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	695b      	ldr	r3, [r3, #20]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d901      	bls.n	800af20 <_nxe_packet_transmit_release+0x4c>
    {
        return(NX_OVERFLOW);
 800af1c:	2303      	movs	r3, #3
 800af1e:	e00a      	b.n	800af36 <_nxe_packet_transmit_release+0x62>
    }

    /* Call actual packet transmit release function.  */
    status =  _nx_packet_transmit_release(packet_ptr);
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f7fe fb91 	bl	8009648 <_nx_packet_transmit_release>
 800af26:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d102      	bne.n	800af34 <_nxe_packet_transmit_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800af34:	68bb      	ldr	r3, [r7, #8]
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	5041434b 	.word	0x5041434b

0800af44 <_nxe_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_enable(NX_IP *ip_ptr)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d004      	beq.n	800af5c <_nxe_udp_enable+0x18>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a15      	ldr	r2, [pc, #84]	; (800afac <_nxe_udp_enable+0x68>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d001      	beq.n	800af60 <_nxe_udp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 800af5c:	2307      	movs	r3, #7
 800af5e:	e020      	b.n	800afa2 <_nxe_udp_enable+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (ip_ptr -> nx_ip_udp_packet_receive)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <_nxe_udp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 800af6a:	2315      	movs	r3, #21
 800af6c:	e019      	b.n	800afa2 <_nxe_udp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800af6e:	f3ef 8305 	mrs	r3, IPSR
 800af72:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800af74:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 800af76:	4b0e      	ldr	r3, [pc, #56]	; (800afb0 <_nxe_udp_enable+0x6c>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00b      	beq.n	800af98 <_nxe_udp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800af80:	f3ef 8305 	mrs	r3, IPSR
 800af84:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	4b09      	ldr	r3, [pc, #36]	; (800afb0 <_nxe_udp_enable+0x6c>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800af92:	d201      	bcs.n	800af98 <_nxe_udp_enable+0x54>
 800af94:	2311      	movs	r3, #17
 800af96:	e004      	b.n	800afa2 <_nxe_udp_enable+0x5e>

    /* Call actual UDP enable function.  */
    status =  _nx_udp_enable(ip_ptr);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7fe fcdd 	bl	8009958 <_nx_udp_enable>
 800af9e:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800afa0:	697b      	ldr	r3, [r7, #20]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3718      	adds	r7, #24
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	49502020 	.word	0x49502020
 800afb0:	20000088 	.word	0x20000088

0800afb4 <_nxe_udp_socket_bind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d004      	beq.n	800afd0 <_nxe_udp_socket_bind+0x1c>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a19      	ldr	r2, [pc, #100]	; (800b030 <_nxe_udp_socket_bind+0x7c>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d001      	beq.n	800afd4 <_nxe_udp_socket_bind+0x20>
    {
        return(NX_PTR_ERROR);
 800afd0:	2307      	movs	r3, #7
 800afd2:	e028      	b.n	800b026 <_nxe_udp_socket_bind+0x72>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <_nxe_udp_socket_bind+0x30>
    {
        return(NX_NOT_ENABLED);
 800afe0:	2314      	movs	r3, #20
 800afe2:	e020      	b.n	800b026 <_nxe_udp_socket_bind+0x72>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afea:	d301      	bcc.n	800aff0 <_nxe_udp_socket_bind+0x3c>
    {
        return(NX_INVALID_PORT);
 800afec:	2346      	movs	r3, #70	; 0x46
 800afee:	e01a      	b.n	800b026 <_nxe_udp_socket_bind+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aff0:	f3ef 8305 	mrs	r3, IPSR
 800aff4:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800aff6:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800aff8:	4b0e      	ldr	r3, [pc, #56]	; (800b034 <_nxe_udp_socket_bind+0x80>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4313      	orrs	r3, r2
 800affe:	2b00      	cmp	r3, #0
 800b000:	d108      	bne.n	800b014 <_nxe_udp_socket_bind+0x60>
 800b002:	4b0d      	ldr	r3, [pc, #52]	; (800b038 <_nxe_udp_socket_bind+0x84>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d004      	beq.n	800b014 <_nxe_udp_socket_bind+0x60>
 800b00a:	4b0b      	ldr	r3, [pc, #44]	; (800b038 <_nxe_udp_socket_bind+0x84>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a0b      	ldr	r2, [pc, #44]	; (800b03c <_nxe_udp_socket_bind+0x88>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d101      	bne.n	800b018 <_nxe_udp_socket_bind+0x64>
 800b014:	2311      	movs	r3, #17
 800b016:	e006      	b.n	800b026 <_nxe_udp_socket_bind+0x72>

    /* Call actual UDP socket bind function.  */
    status =  _nx_udp_socket_bind(socket_ptr, port, wait_option);
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	68b9      	ldr	r1, [r7, #8]
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f7fe fef7 	bl	8009e10 <_nx_udp_socket_bind>
 800b022:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800b024:	697b      	ldr	r3, [r7, #20]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3718      	adds	r7, #24
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	55445020 	.word	0x55445020
 800b034:	20000088 	.word	0x20000088
 800b038:	20014884 	.word	0x20014884
 800b03c:	200149cc 	.word	0x200149cc

0800b040 <_nxe_udp_socket_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                             ULONG type_of_service, ULONG fragment, UINT time_to_live,
                             ULONG queue_maximum, UINT udp_socket_size)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b08e      	sub	sp, #56	; 0x38
 800b044:	af04      	add	r7, sp, #16
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
 800b04c:	603b      	str	r3, [r7, #0]
NX_UDP_SOCKET *created_socket;
ULONG          created_count;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) ||
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00a      	beq.n	800b06a <_nxe_udp_socket_create+0x2a>
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a3f      	ldr	r2, [pc, #252]	; (800b158 <_nxe_udp_socket_create+0x118>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d105      	bne.n	800b06a <_nxe_udp_socket_create+0x2a>
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <_nxe_udp_socket_create+0x2a>
        (socket_ptr == NX_NULL) || (udp_socket_size != (UINT)sizeof(NX_UDP_SOCKET)))
 800b064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b066:	2b78      	cmp	r3, #120	; 0x78
 800b068:	d001      	beq.n	800b06e <_nxe_udp_socket_create+0x2e>
    {
        return(NX_PTR_ERROR);
 800b06a:	2307      	movs	r3, #7
 800b06c:	e06f      	b.n	800b14e <_nxe_udp_socket_create+0x10e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b06e:	f3ef 8305 	mrs	r3, IPSR
 800b072:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b074:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800b076:	4b39      	ldr	r3, [pc, #228]	; (800b15c <_nxe_udp_socket_create+0x11c>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d009      	beq.n	800b094 <_nxe_udp_socket_create+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b080:	f3ef 8305 	mrs	r3, IPSR
 800b084:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b086:	697a      	ldr	r2, [r7, #20]
 800b088:	4b34      	ldr	r3, [pc, #208]	; (800b15c <_nxe_udp_socket_create+0x11c>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800b092:	d304      	bcc.n	800b09e <_nxe_udp_socket_create+0x5e>
 800b094:	4b32      	ldr	r3, [pc, #200]	; (800b160 <_nxe_udp_socket_create+0x120>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a32      	ldr	r2, [pc, #200]	; (800b164 <_nxe_udp_socket_create+0x124>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d101      	bne.n	800b0a2 <_nxe_udp_socket_create+0x62>
 800b09e:	2311      	movs	r3, #17
 800b0a0:	e055      	b.n	800b14e <_nxe_udp_socket_create+0x10e>

    /* Get protection mutex.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b0a8:	f04f 31ff 	mov.w	r1, #4294967295
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f001 f995 	bl	800c3dc <_tx_mutex_get>

    /* Pickup created count and created socket pointer.  */
    created_count =   ip_ptr -> nx_ip_udp_created_sockets_count;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b0b8:	623b      	str	r3, [r7, #32]
    created_socket =  ip_ptr -> nx_ip_udp_created_sockets_ptr;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b0c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Loop to look for socket already created.  */
    while (created_count--)
 800b0c2:	e00e      	b.n	800b0e2 <_nxe_udp_socket_create+0xa2>
    {

        /* Compare the new socket with the already created socket.  */
        if (socket_ptr == created_socket)
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d107      	bne.n	800b0dc <_nxe_udp_socket_create+0x9c>
        {

            /* Error, socket already created!  */

            /* Release protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f001 fbfa 	bl	800c8cc <_tx_mutex_put>

            /* Return error.  */
            return(NX_PTR_ERROR);
 800b0d8:	2307      	movs	r3, #7
 800b0da:	e038      	b.n	800b14e <_nxe_udp_socket_create+0x10e>
        }

        /* Move to next created socket.  */
        created_socket =  created_socket -> nx_udp_socket_created_next;
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0e0:	627b      	str	r3, [r7, #36]	; 0x24
    while (created_count--)
 800b0e2:	6a3b      	ldr	r3, [r7, #32]
 800b0e4:	1e5a      	subs	r2, r3, #1
 800b0e6:	623a      	str	r2, [r7, #32]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1eb      	bne.n	800b0c4 <_nxe_udp_socket_create+0x84>
    }

    /* Release protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f001 fbea 	bl	800c8cc <_tx_mutex_put>

    /* Check to see if UDP is enabled.  */
    if (!ip_ptr -> nx_ip_udp_packet_receive)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <_nxe_udp_socket_create+0xc6>
    {
        return(NX_NOT_ENABLED);
 800b102:	2314      	movs	r3, #20
 800b104:	e023      	b.n	800b14e <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid type of service.  */
    if (type_of_service & ~(NX_IP_TOS_MASK))
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <_nxe_udp_socket_create+0xd4>
    {
        return(NX_OPTION_ERROR);
 800b110:	230a      	movs	r3, #10
 800b112:	e01c      	b.n	800b14e <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid fragment option.  */
    if ((fragment != NX_FRAGMENT_OKAY) &&
 800b114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b116:	2b00      	cmp	r3, #0
 800b118:	d005      	beq.n	800b126 <_nxe_udp_socket_create+0xe6>
 800b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b120:	d001      	beq.n	800b126 <_nxe_udp_socket_create+0xe6>
        (fragment != NX_DONT_FRAGMENT))
    {
        return(NX_OPTION_ERROR);
 800b122:	230a      	movs	r3, #10
 800b124:	e013      	b.n	800b14e <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid time to live option.  */
    if (((ULONG)time_to_live) > NX_IP_TIME_TO_LIVE_MASK)
 800b126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b128:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800b12c:	d901      	bls.n	800b132 <_nxe_udp_socket_create+0xf2>
    {
        return(NX_OPTION_ERROR);
 800b12e:	230a      	movs	r3, #10
 800b130:	e00d      	b.n	800b14e <_nxe_udp_socket_create+0x10e>
    }

    /* Call actual UDP socket create function.  */
    status =  _nx_udp_socket_create(ip_ptr, socket_ptr, name, type_of_service,
 800b132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b134:	9302      	str	r3, [sp, #8]
 800b136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b138:	9301      	str	r3, [sp, #4]
 800b13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	68b9      	ldr	r1, [r7, #8]
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f7fe ff85 	bl	800a054 <_nx_udp_socket_create>
 800b14a:	61f8      	str	r0, [r7, #28]
                                    fragment, time_to_live, queue_maximum);

    /* Return completion status.  */
    return(status);
 800b14c:	69fb      	ldr	r3, [r7, #28]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3728      	adds	r7, #40	; 0x28
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	49502020 	.word	0x49502020
 800b15c:	20000088 	.word	0x20000088
 800b160:	20014884 	.word	0x20014884
 800b164:	200149cc 	.word	0x200149cc

0800b168 <_nxe_udp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d004      	beq.n	800b180 <_nxe_udp_socket_delete+0x18>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a15      	ldr	r2, [pc, #84]	; (800b1d0 <_nxe_udp_socket_delete+0x68>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d001      	beq.n	800b184 <_nxe_udp_socket_delete+0x1c>
    {
        return(NX_PTR_ERROR);
 800b180:	2307      	movs	r3, #7
 800b182:	e020      	b.n	800b1c6 <_nxe_udp_socket_delete+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d101      	bne.n	800b194 <_nxe_udp_socket_delete+0x2c>
    {
        return(NX_NOT_ENABLED);
 800b190:	2314      	movs	r3, #20
 800b192:	e018      	b.n	800b1c6 <_nxe_udp_socket_delete+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b194:	f3ef 8305 	mrs	r3, IPSR
 800b198:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800b19a:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800b19c:	4b0d      	ldr	r3, [pc, #52]	; (800b1d4 <_nxe_udp_socket_delete+0x6c>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d108      	bne.n	800b1b8 <_nxe_udp_socket_delete+0x50>
 800b1a6:	4b0c      	ldr	r3, [pc, #48]	; (800b1d8 <_nxe_udp_socket_delete+0x70>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d004      	beq.n	800b1b8 <_nxe_udp_socket_delete+0x50>
 800b1ae:	4b0a      	ldr	r3, [pc, #40]	; (800b1d8 <_nxe_udp_socket_delete+0x70>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a0a      	ldr	r2, [pc, #40]	; (800b1dc <_nxe_udp_socket_delete+0x74>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d101      	bne.n	800b1bc <_nxe_udp_socket_delete+0x54>
 800b1b8:	2311      	movs	r3, #17
 800b1ba:	e004      	b.n	800b1c6 <_nxe_udp_socket_delete+0x5e>

    /* Call actual UDP socket delete function.  */
    status =  _nx_udp_socket_delete(socket_ptr);
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f7fe ffd9 	bl	800a174 <_nx_udp_socket_delete>
 800b1c2:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	55445020 	.word	0x55445020
 800b1d4:	20000088 	.word	0x20000088
 800b1d8:	20014884 	.word	0x20014884
 800b1dc:	200149cc 	.word	0x200149cc

0800b1e0 <_nxe_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr_ptr,
                           ULONG ip_address, UINT port)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b088      	sub	sp, #32
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	607a      	str	r2, [r7, #4]
 800b1ec:	603b      	str	r3, [r7, #0]
NX_PACKET *packet_ptr;
UINT       status;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	61fb      	str	r3, [r7, #28]

    /* Check for invalid input pointers.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID) ||
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00c      	beq.n	800b214 <_nxe_udp_socket_send+0x34>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a37      	ldr	r2, [pc, #220]	; (800b2dc <_nxe_udp_socket_send+0xfc>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d107      	bne.n	800b214 <_nxe_udp_socket_send+0x34>
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d004      	beq.n	800b214 <_nxe_udp_socket_send+0x34>
        (packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)))
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800b212:	d001      	beq.n	800b218 <_nxe_udp_socket_send+0x38>
    {

        return(NX_PTR_ERROR);
 800b214:	2307      	movs	r3, #7
 800b216:	e05d      	b.n	800b2d4 <_nxe_udp_socket_send+0xf4>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b220:	2b00      	cmp	r3, #0
 800b222:	d101      	bne.n	800b228 <_nxe_udp_socket_send+0x48>
    {
        return(NX_NOT_ENABLED);
 800b224:	2314      	movs	r3, #20
 800b226:	e055      	b.n	800b2d4 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for invalid IP address.  */
    if (ip_address == NX_NULL)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <_nxe_udp_socket_send+0x52>
    {
        return(NX_IP_ADDRESS_ERROR);
 800b22e:	2321      	movs	r3, #33	; 0x21
 800b230:	e050      	b.n	800b2d4 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b238:	d301      	bcc.n	800b23e <_nxe_udp_socket_send+0x5e>
    {
        return(NX_INVALID_PORT);
 800b23a:	2346      	movs	r3, #70	; 0x46
 800b23c:	e04a      	b.n	800b2d4 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((INT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_data_start) < (INT)(sizeof(NX_IPV4_HEADER) + sizeof(NX_UDP_HEADER)))
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	689a      	ldr	r2, [r3, #8]
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	2b1b      	cmp	r3, #27
 800b24a:	dc0d      	bgt.n	800b268 <_nxe_udp_socket_send+0x88>
    {

#ifndef NX_DISABLE_UDP_INFO
        /* Increment the total UDP invalid packet count.  */
        (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b254:	3201      	adds	r2, #1
 800b256:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Increment the total UDP invalid packet count for this socket.  */
        socket_ptr -> nx_udp_socket_invalid_packets++;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6a1b      	ldr	r3, [r3, #32]
 800b25e:	1c5a      	adds	r2, r3, #1
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	621a      	str	r2, [r3, #32]
#endif

        /* Return error code.  */
        return(NX_UNDERFLOW);
 800b264:	2302      	movs	r3, #2
 800b266:	e035      	b.n	800b2d4 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	68da      	ldr	r2, [r3, #12]
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	695b      	ldr	r3, [r3, #20]
 800b270:	429a      	cmp	r2, r3
 800b272:	d90d      	bls.n	800b290 <_nxe_udp_socket_send+0xb0>
    {

#ifndef NX_DISABLE_UDP_INFO
        /* Increment the total UDP invalid packet count.  */
        (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b27c:	3201      	adds	r2, #1
 800b27e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Increment the total UDP invalid packet count for this socket.  */
        socket_ptr -> nx_udp_socket_invalid_packets++;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6a1b      	ldr	r3, [r3, #32]
 800b286:	1c5a      	adds	r2, r3, #1
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	621a      	str	r2, [r3, #32]
#endif

        /* Return error code.  */
        return(NX_OVERFLOW);
 800b28c:	2303      	movs	r3, #3
 800b28e:	e021      	b.n	800b2d4 <_nxe_udp_socket_send+0xf4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b290:	f3ef 8305 	mrs	r3, IPSR
 800b294:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b296:	697a      	ldr	r2, [r7, #20]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800b298:	4b11      	ldr	r3, [pc, #68]	; (800b2e0 <_nxe_udp_socket_send+0x100>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d108      	bne.n	800b2b4 <_nxe_udp_socket_send+0xd4>
 800b2a2:	4b10      	ldr	r3, [pc, #64]	; (800b2e4 <_nxe_udp_socket_send+0x104>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d004      	beq.n	800b2b4 <_nxe_udp_socket_send+0xd4>
 800b2aa:	4b0e      	ldr	r3, [pc, #56]	; (800b2e4 <_nxe_udp_socket_send+0x104>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a0e      	ldr	r2, [pc, #56]	; (800b2e8 <_nxe_udp_socket_send+0x108>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d101      	bne.n	800b2b8 <_nxe_udp_socket_send+0xd8>
 800b2b4:	2311      	movs	r3, #17
 800b2b6:	e00d      	b.n	800b2d4 <_nxe_udp_socket_send+0xf4>

    /* Call actual UDP socket send function.  */
    status =  _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	69f9      	ldr	r1, [r7, #28]
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	f7fe ffb7 	bl	800a232 <_nx_udp_socket_send>
 800b2c4:	61b8      	str	r0, [r7, #24]

    /* Determine if the packet send was successful.  */
    if (status == NX_SUCCESS)
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d102      	bne.n	800b2d2 <_nxe_udp_socket_send+0xf2>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800b2d2:	69bb      	ldr	r3, [r7, #24]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3720      	adds	r7, #32
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	55445020 	.word	0x55445020
 800b2e0:	20000088 	.word	0x20000088
 800b2e4:	20014884 	.word	0x20014884
 800b2e8:	200149cc 	.word	0x200149cc

0800b2ec <_nxe_udp_socket_unbind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d004      	beq.n	800b304 <_nxe_udp_socket_unbind+0x18>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a15      	ldr	r2, [pc, #84]	; (800b354 <_nxe_udp_socket_unbind+0x68>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d001      	beq.n	800b308 <_nxe_udp_socket_unbind+0x1c>
    {
        return(NX_PTR_ERROR);
 800b304:	2307      	movs	r3, #7
 800b306:	e020      	b.n	800b34a <_nxe_udp_socket_unbind+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b310:	2b00      	cmp	r3, #0
 800b312:	d101      	bne.n	800b318 <_nxe_udp_socket_unbind+0x2c>
    {
        return(NX_NOT_ENABLED);
 800b314:	2314      	movs	r3, #20
 800b316:	e018      	b.n	800b34a <_nxe_udp_socket_unbind+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b318:	f3ef 8305 	mrs	r3, IPSR
 800b31c:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800b31e:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800b320:	4b0d      	ldr	r3, [pc, #52]	; (800b358 <_nxe_udp_socket_unbind+0x6c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4313      	orrs	r3, r2
 800b326:	2b00      	cmp	r3, #0
 800b328:	d108      	bne.n	800b33c <_nxe_udp_socket_unbind+0x50>
 800b32a:	4b0c      	ldr	r3, [pc, #48]	; (800b35c <_nxe_udp_socket_unbind+0x70>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d004      	beq.n	800b33c <_nxe_udp_socket_unbind+0x50>
 800b332:	4b0a      	ldr	r3, [pc, #40]	; (800b35c <_nxe_udp_socket_unbind+0x70>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a0a      	ldr	r2, [pc, #40]	; (800b360 <_nxe_udp_socket_unbind+0x74>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d101      	bne.n	800b340 <_nxe_udp_socket_unbind+0x54>
 800b33c:	2311      	movs	r3, #17
 800b33e:	e004      	b.n	800b34a <_nxe_udp_socket_unbind+0x5e>

    /* Call actual UDP socket unbind function.  */
    status =  _nx_udp_socket_unbind(socket_ptr);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7fe ff8f 	bl	800a264 <_nx_udp_socket_unbind>
 800b346:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800b348:	68fb      	ldr	r3, [r7, #12]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	55445020 	.word	0x55445020
 800b358:	20000088 	.word	0x20000088
 800b35c:	20014884 	.word	0x20014884
 800b360:	200149cc 	.word	0x200149cc

0800b364 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b096      	sub	sp, #88	; 0x58
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
 800b370:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	3303      	adds	r3, #3
 800b376:	f023 0303 	bic.w	r3, r3, #3
 800b37a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b37c:	f3ef 8310 	mrs	r3, PRIMASK
 800b380:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800b382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800b384:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800b386:	b672      	cpsid	i
    return(int_posture);
 800b388:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800b38a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b38c:	4b55      	ldr	r3, [pc, #340]	; (800b4e4 <_tx_byte_allocate+0x180>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800b392:	2300      	movs	r3, #0
 800b394:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b39a:	621a      	str	r2, [r3, #32]
 800b39c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b39e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a2:	f383 8810 	msr	PRIMASK, r3
}
 800b3a6:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800b3a8:	6879      	ldr	r1, [r7, #4]
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f000 f9b2 	bl	800b714 <_tx_byte_pool_search>
 800b3b0:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800b3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800b3ba:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3bc:	b672      	cpsid	i
    return(int_posture);
 800b3be:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800b3c0:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800b3c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d002      	beq.n	800b3ce <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3cc:	e006      	b.n	800b3dc <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6a1b      	ldr	r3, [r3, #32]
 800b3d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d101      	bne.n	800b3dc <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800b3dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d0d9      	beq.n	800b396 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3e6:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800b3e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d008      	beq.n	800b400 <_tx_byte_allocate+0x9c>
 800b3ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3f0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3f2:	6a3b      	ldr	r3, [r7, #32]
 800b3f4:	f383 8810 	msr	PRIMASK, r3
}
 800b3f8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	653b      	str	r3, [r7, #80]	; 0x50
 800b3fe:	e06c      	b.n	800b4da <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d061      	beq.n	800b4ca <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800b406:	4b38      	ldr	r3, [pc, #224]	; (800b4e8 <_tx_byte_allocate+0x184>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d007      	beq.n	800b41e <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800b40e:	2310      	movs	r3, #16
 800b410:	653b      	str	r3, [r7, #80]	; 0x50
 800b412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b414:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	f383 8810 	msr	PRIMASK, r3
}
 800b41c:	e05d      	b.n	800b4da <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800b41e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b420:	4a32      	ldr	r2, [pc, #200]	; (800b4ec <_tx_byte_allocate+0x188>)
 800b422:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800b424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800b42a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b42c:	68ba      	ldr	r2, [r7, #8]
 800b42e:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800b430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800b436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b438:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b43c:	1c5a      	adds	r2, r3, #1
 800b43e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b440:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b448:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44e:	1c5a      	adds	r2, r3, #1
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b456:	2b00      	cmp	r3, #0
 800b458:	d109      	bne.n	800b46e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b45e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800b460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b464:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800b466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b46a:	675a      	str	r2, [r3, #116]	; 0x74
 800b46c:	e011      	b.n	800b492 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b472:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b476:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b478:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b47a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b47c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b47e:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b484:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b48a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b48e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b490:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800b492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b494:	2209      	movs	r2, #9
 800b496:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b49a:	2201      	movs	r2, #1
 800b49c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b49e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b4a4:	4b10      	ldr	r3, [pc, #64]	; (800b4e8 <_tx_byte_allocate+0x184>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	4a0f      	ldr	r2, [pc, #60]	; (800b4e8 <_tx_byte_allocate+0x184>)
 800b4ac:	6013      	str	r3, [r2, #0]
 800b4ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4b0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	f383 8810 	msr	PRIMASK, r3
}
 800b4b8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800b4ba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b4bc:	f002 f8bc 	bl	800d638 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800b4c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4c6:	653b      	str	r3, [r7, #80]	; 0x50
 800b4c8:	e007      	b.n	800b4da <_tx_byte_allocate+0x176>
 800b4ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4cc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	f383 8810 	msr	PRIMASK, r3
}
 800b4d4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800b4d6:	2310      	movs	r3, #16
 800b4d8:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800b4da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3758      	adds	r7, #88	; 0x58
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	20014884 	.word	0x20014884
 800b4e8:	2001491c 	.word	0x2001491c
 800b4ec:	0800b4f1 	.word	0x0800b4f1

0800b4f0 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b08e      	sub	sp, #56	; 0x38
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4fa:	f3ef 8310 	mrs	r3, PRIMASK
 800b4fe:	623b      	str	r3, [r7, #32]
    return(posture);
 800b500:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b502:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b504:	b672      	cpsid	i
    return(int_posture);
 800b506:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800b508:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b50e:	4a33      	ldr	r2, [pc, #204]	; (800b5dc <_tx_byte_pool_cleanup+0xec>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d158      	bne.n	800b5c6 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d152      	bne.n	800b5c6 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b524:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d04c      	beq.n	800b5c6 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800b52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a2b      	ldr	r2, [pc, #172]	; (800b5e0 <_tx_byte_pool_cleanup+0xf0>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d147      	bne.n	800b5c6 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800b536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d043      	beq.n	800b5c6 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800b544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b548:	1e5a      	subs	r2, r3, #1
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b552:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b556:	2b00      	cmp	r3, #0
 800b558:	d103      	bne.n	800b562 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800b55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55c:	2200      	movs	r2, #0
 800b55e:	625a      	str	r2, [r3, #36]	; 0x24
 800b560:	e013      	b.n	800b58a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b566:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b56c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b572:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b578:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800b57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	429a      	cmp	r2, r3
 800b582:	d102      	bne.n	800b58a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800b584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b588:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58e:	2b09      	cmp	r3, #9
 800b590:	d119      	bne.n	800b5c6 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2210      	movs	r2, #16
 800b596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b59a:	4b12      	ldr	r3, [pc, #72]	; (800b5e4 <_tx_byte_pool_cleanup+0xf4>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	4a10      	ldr	r2, [pc, #64]	; (800b5e4 <_tx_byte_pool_cleanup+0xf4>)
 800b5a2:	6013      	str	r3, [r2, #0]
 800b5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5a6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	f383 8810 	msr	PRIMASK, r3
}
 800b5ae:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f001 ff41 	bl	800d438 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b5ba:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b5bc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b5be:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5c0:	b672      	cpsid	i
    return(int_posture);
 800b5c2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b5c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f383 8810 	msr	PRIMASK, r3
}
 800b5d0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b5d2:	bf00      	nop
 800b5d4:	3738      	adds	r7, #56	; 0x38
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	0800b4f1 	.word	0x0800b4f1
 800b5e0:	42595445 	.word	0x42595445
 800b5e4:	2001491c 	.word	0x2001491c

0800b5e8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b08e      	sub	sp, #56	; 0x38
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
 800b5f4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b5f6:	2234      	movs	r2, #52	; 0x34
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f003 fb5e 	bl	800ecbc <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	f023 0303 	bic.w	r3, r3, #3
 800b606:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	683a      	ldr	r2, [r7, #0]
 800b618:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	f1a3 0208 	sub.w	r2, r3, #8
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2202      	movs	r2, #2
 800b634:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b63a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	4413      	add	r3, r2
 800b640:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b644:	3b04      	subs	r3, #4
 800b646:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b64e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800b650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b654:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b658:	3b04      	subs	r3, #4
 800b65a:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b65e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800b66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b672:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b67a:	3304      	adds	r3, #4
 800b67c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b680:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b684:	4a1f      	ldr	r2, [pc, #124]	; (800b704 <_tx_byte_pool_create+0x11c>)
 800b686:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b68e:	f3ef 8310 	mrs	r3, PRIMASK
 800b692:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b694:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b696:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b698:	b672      	cpsid	i
    return(int_posture);
 800b69a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b69c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	4a19      	ldr	r2, [pc, #100]	; (800b708 <_tx_byte_pool_create+0x120>)
 800b6a2:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b6a4:	4b19      	ldr	r3, [pc, #100]	; (800b70c <_tx_byte_pool_create+0x124>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d109      	bne.n	800b6c0 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b6ac:	4a18      	ldr	r2, [pc, #96]	; (800b710 <_tx_byte_pool_create+0x128>)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	631a      	str	r2, [r3, #48]	; 0x30
 800b6be:	e011      	b.n	800b6e4 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b6c0:	4b13      	ldr	r3, [pc, #76]	; (800b710 <_tx_byte_pool_create+0x128>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b6c6:	6a3b      	ldr	r3, [r7, #32]
 800b6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ca:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b6cc:	6a3b      	ldr	r3, [r7, #32]
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	69fa      	ldr	r2, [r7, #28]
 800b6dc:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6a3a      	ldr	r2, [r7, #32]
 800b6e2:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b6e4:	4b09      	ldr	r3, [pc, #36]	; (800b70c <_tx_byte_pool_create+0x124>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	4a08      	ldr	r2, [pc, #32]	; (800b70c <_tx_byte_pool_create+0x124>)
 800b6ec:	6013      	str	r3, [r2, #0]
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	f383 8810 	msr	PRIMASK, r3
}
 800b6f8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3738      	adds	r7, #56	; 0x38
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	ffffeeee 	.word	0xffffeeee
 800b708:	42595445 	.word	0x42595445
 800b70c:	20014878 	.word	0x20014878
 800b710:	20014874 	.word	0x20014874

0800b714 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800b714:	b480      	push	{r7}
 800b716:	b097      	sub	sp, #92	; 0x5c
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800b71e:	2300      	movs	r3, #0
 800b720:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b722:	f3ef 8310 	mrs	r3, PRIMASK
 800b726:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800b728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800b72a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b72c:	b672      	cpsid	i
    return(int_posture);
 800b72e:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800b730:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	689a      	ldr	r2, [r3, #8]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	3b02      	subs	r3, #2
 800b73c:	00db      	lsls	r3, r3, #3
 800b73e:	4413      	add	r3, r2
 800b740:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b746:	429a      	cmp	r2, r3
 800b748:	d308      	bcc.n	800b75c <_tx_byte_pool_search+0x48>
 800b74a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b74c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	f383 8810 	msr	PRIMASK, r3
}
 800b754:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800b756:	2300      	movs	r3, #0
 800b758:	653b      	str	r3, [r7, #80]	; 0x50
 800b75a:	e0dd      	b.n	800b918 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800b75c:	4b72      	ldr	r3, [pc, #456]	; (800b928 <_tx_byte_pool_search+0x214>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b766:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	695b      	ldr	r3, [r3, #20]
 800b76c:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	3301      	adds	r3, #1
 800b774:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800b776:	2300      	movs	r3, #0
 800b778:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b77a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b77c:	3304      	adds	r3, #4
 800b77e:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b782:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a68      	ldr	r2, [pc, #416]	; (800b92c <_tx_byte_pool_search+0x218>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d143      	bne.n	800b816 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800b78e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b790:	2b00      	cmp	r3, #0
 800b792:	d104      	bne.n	800b79e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b798:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800b79a:	2301      	movs	r3, #1
 800b79c:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b79e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7a0:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800b7a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b7b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7b2:	3b08      	subs	r3, #8
 800b7b4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800b7b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d257      	bcs.n	800b86e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800b7be:	2300      	movs	r3, #0
 800b7c0:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ca:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a56      	ldr	r2, [pc, #344]	; (800b92c <_tx_byte_pool_search+0x218>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d113      	bne.n	800b7fe <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d8:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800b7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e0:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	1e5a      	subs	r2, r3, #1
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	695b      	ldr	r3, [r3, #20]
 800b7f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d114      	bne.n	800b820 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7fa:	615a      	str	r2, [r3, #20]
 800b7fc:	e010      	b.n	800b820 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b800:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800b802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800b808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d008      	beq.n	800b820 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800b80e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b810:	3b01      	subs	r3, #1
 800b812:	64bb      	str	r3, [r7, #72]	; 0x48
 800b814:	e004      	b.n	800b820 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b818:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800b820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b822:	2b00      	cmp	r3, #0
 800b824:	d002      	beq.n	800b82c <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800b826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b828:	3b01      	subs	r3, #1
 800b82a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b82c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b82e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	f383 8810 	msr	PRIMASK, r3
}
 800b836:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b838:	f3ef 8310 	mrs	r3, PRIMASK
 800b83c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b83e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b840:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b842:	b672      	cpsid	i
    return(int_posture);
 800b844:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800b846:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6a1b      	ldr	r3, [r3, #32]
 800b84c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b84e:	429a      	cmp	r2, r3
 800b850:	d009      	beq.n	800b866 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	3301      	adds	r3, #1
 800b85e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b864:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800b866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d186      	bne.n	800b77a <_tx_byte_pool_search+0x66>
 800b86c:	e000      	b.n	800b870 <_tx_byte_pool_search+0x15c>
                    break;
 800b86e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800b870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b872:	2b00      	cmp	r3, #0
 800b874:	d048      	beq.n	800b908 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800b876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	2b13      	cmp	r3, #19
 800b87e:	d91e      	bls.n	800b8be <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	3308      	adds	r3, #8
 800b884:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b886:	4413      	add	r3, r2
 800b888:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88c:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b88e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b890:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b898:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89c:	3304      	adds	r3, #4
 800b89e:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a2:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800b8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a6:	4a21      	ldr	r2, [pc, #132]	; (800b92c <_tx_byte_pool_search+0x218>)
 800b8a8:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800b8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8b8:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b8be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8c0:	3304      	adds	r3, #4
 800b8c2:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c6:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	689a      	ldr	r2, [r3, #8]
 800b8d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8d4:	1ad3      	subs	r3, r2, r3
 800b8d6:	f1a3 0208 	sub.w	r2, r3, #8
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	695b      	ldr	r3, [r3, #20]
 800b8e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d105      	bne.n	800b8f4 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b8e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ea:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800b8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	615a      	str	r2, [r3, #20]
 800b8f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8f6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f383 8810 	msr	PRIMASK, r3
}
 800b8fe:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b902:	3308      	adds	r3, #8
 800b904:	653b      	str	r3, [r7, #80]	; 0x50
 800b906:	e007      	b.n	800b918 <_tx_byte_pool_search+0x204>
 800b908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b90a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	f383 8810 	msr	PRIMASK, r3
}
 800b912:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800b914:	2300      	movs	r3, #0
 800b916:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800b918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	375c      	adds	r7, #92	; 0x5c
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	20014884 	.word	0x20014884
 800b92c:	ffffeeee 	.word	0xffffeeee

0800b930 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b08e      	sub	sp, #56	; 0x38
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b93a:	f3ef 8310 	mrs	r3, PRIMASK
 800b93e:	61fb      	str	r3, [r7, #28]
    return(posture);
 800b940:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800b942:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b944:	b672      	cpsid	i
    return(int_posture);
 800b946:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 800b948:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b94e:	4a38      	ldr	r2, [pc, #224]	; (800ba30 <_tx_event_flags_cleanup+0x100>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d162      	bne.n	800ba1a <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b95a:	683a      	ldr	r2, [r7, #0]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d15c      	bne.n	800ba1a <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b964:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800b966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d056      	beq.n	800ba1a <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800b96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a30      	ldr	r2, [pc, #192]	; (800ba34 <_tx_event_flags_cleanup+0x104>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d151      	bne.n	800ba1a <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800b976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d04d      	beq.n	800ba1a <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800b984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b986:	695b      	ldr	r3, [r3, #20]
 800b988:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800b98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98c:	691b      	ldr	r3, [r3, #16]
 800b98e:	62bb      	str	r3, [r7, #40]	; 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 800b990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b992:	2b00      	cmp	r3, #0
 800b994:	d020      	beq.n	800b9d8 <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800b996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b998:	3b01      	subs	r3, #1
 800b99a:	62fb      	str	r3, [r7, #44]	; 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800b99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9a0:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800b9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d103      	bne.n	800b9b0 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	611a      	str	r2, [r3, #16]
 800b9ae:	e016      	b.n	800b9de <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b4:	627b      	str	r3, [r7, #36]	; 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9ba:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9be:	6a3a      	ldr	r2, [r7, #32]
 800b9c0:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800b9c2:	6a3b      	ldr	r3, [r7, #32]
 800b9c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c6:	671a      	str	r2, [r3, #112]	; 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 800b9c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d106      	bne.n	800b9de <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800b9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9d4:	611a      	str	r2, [r3, #16]
 800b9d6:	e002      	b.n	800b9de <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800b9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9da:	2201      	movs	r2, #1
 800b9dc:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e2:	2b07      	cmp	r3, #7
 800b9e4:	d119      	bne.n	800ba1a <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2207      	movs	r2, #7
 800b9ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b9ee:	4b12      	ldr	r3, [pc, #72]	; (800ba38 <_tx_event_flags_cleanup+0x108>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	4a10      	ldr	r2, [pc, #64]	; (800ba38 <_tx_event_flags_cleanup+0x108>)
 800b9f6:	6013      	str	r3, [r2, #0]
 800b9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9fa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f383 8810 	msr	PRIMASK, r3
}
 800ba02:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f001 fd17 	bl	800d438 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba0a:	f3ef 8310 	mrs	r3, PRIMASK
 800ba0e:	617b      	str	r3, [r7, #20]
    return(posture);
 800ba10:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ba12:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba14:	b672      	cpsid	i
    return(int_posture);
 800ba16:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ba18:	637b      	str	r3, [r7, #52]	; 0x34
 800ba1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba1c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	f383 8810 	msr	PRIMASK, r3
}
 800ba24:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ba26:	bf00      	nop
 800ba28:	3738      	adds	r7, #56	; 0x38
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	0800b931 	.word	0x0800b931
 800ba34:	4456444e 	.word	0x4456444e
 800ba38:	2001491c 	.word	0x2001491c

0800ba3c <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b088      	sub	sp, #32
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800ba46:	2224      	movs	r2, #36	; 0x24
 800ba48:	2100      	movs	r1, #0
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f003 f936 	bl	800ecbc <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba56:	f3ef 8310 	mrs	r3, PRIMASK
 800ba5a:	613b      	str	r3, [r7, #16]
    return(posture);
 800ba5c:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ba5e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba60:	b672      	cpsid	i
    return(int_posture);
 800ba62:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800ba64:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a18      	ldr	r2, [pc, #96]	; (800bacc <_tx_event_flags_create+0x90>)
 800ba6a:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800ba6c:	4b18      	ldr	r3, [pc, #96]	; (800bad0 <_tx_event_flags_create+0x94>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d109      	bne.n	800ba88 <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800ba74:	4a17      	ldr	r2, [pc, #92]	; (800bad4 <_tx_event_flags_create+0x98>)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	61da      	str	r2, [r3, #28]
 800ba86:	e011      	b.n	800baac <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800ba88:	4b12      	ldr	r3, [pc, #72]	; (800bad4 <_tx_event_flags_create+0x98>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	69db      	ldr	r3, [r3, #28]
 800ba92:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	697a      	ldr	r2, [r7, #20]
 800baa4:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	69ba      	ldr	r2, [r7, #24]
 800baaa:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800baac:	4b08      	ldr	r3, [pc, #32]	; (800bad0 <_tx_event_flags_create+0x94>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	3301      	adds	r3, #1
 800bab2:	4a07      	ldr	r2, [pc, #28]	; (800bad0 <_tx_event_flags_create+0x94>)
 800bab4:	6013      	str	r3, [r2, #0]
 800bab6:	69fb      	ldr	r3, [r7, #28]
 800bab8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	f383 8810 	msr	PRIMASK, r3
}
 800bac0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3720      	adds	r7, #32
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	4456444e 	.word	0x4456444e
 800bad0:	20014860 	.word	0x20014860
 800bad4:	2001485c 	.word	0x2001485c

0800bad8 <_tx_event_flags_get>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b096      	sub	sp, #88	; 0x58
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
 800bae4:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bae6:	f3ef 8310 	mrs	r3, PRIMASK
 800baea:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800baec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800baee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800baf0:	b672      	cpsid	i
    return(int_posture);
 800baf2:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 800baf4:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Return the actual event flags and apply delayed clearing.  */
    *actual_flags_ptr =  current_flags & ~group_ptr -> tx_event_flags_group_delayed_clear;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6a1b      	ldr	r3, [r3, #32]
 800bb00:	43da      	mvns	r2, r3
 800bb02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb04:	401a      	ands	r2, r3
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	601a      	str	r2, [r3, #0]

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f003 0302 	and.w	r3, r3, #2
 800bb10:	643b      	str	r3, [r7, #64]	; 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6a1b      	ldr	r3, [r3, #32]
 800bb16:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800bb18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d004      	beq.n	800bb28 <_tx_event_flags_get+0x50>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800bb1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb20:	43db      	mvns	r3, r3
 800bb22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb24:	4013      	ands	r3, r2
 800bb26:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 800bb28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb2a:	2b02      	cmp	r3, #2
 800bb2c:	d10a      	bne.n	800bb44 <_tx_event_flags_get+0x6c>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800bb2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	4013      	ands	r3, r2
 800bb34:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800bb36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d006      	beq.n	800bb4c <_tx_event_flags_get+0x74>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 800bb3e:	2300      	movs	r3, #0
 800bb40:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb42:	e003      	b.n	800bb4c <_tx_event_flags_get+0x74>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800bb44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	4013      	ands	r3, r2
 800bb4a:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 800bb4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d026      	beq.n	800bba0 <_tx_event_flags_get+0xc8>
    {

        /* Yes, this request can be handled immediately.  */

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f003 0301 	and.w	r3, r3, #1
 800bb58:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 800bb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d11c      	bne.n	800bb9a <_tx_event_flags_get+0xc2>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 800bb60:	2300      	movs	r3, #0
 800bb62:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	695b      	ldr	r3, [r3, #20]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d005      	beq.n	800bb78 <_tx_event_flags_get+0xa0>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d101      	bne.n	800bb78 <_tx_event_flags_get+0xa0>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 800bb74:	2301      	movs	r3, #1
 800bb76:	647b      	str	r3, [r7, #68]	; 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 800bb78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d106      	bne.n	800bb8c <_tx_event_flags_get+0xb4>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6a1a      	ldr	r2, [r3, #32]
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	621a      	str	r2, [r3, #32]
 800bb8a:	e006      	b.n	800bb9a <_tx_event_flags_get+0xc2>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	689a      	ldr	r2, [r3, #8]
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	43db      	mvns	r3, r3
 800bb94:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	653b      	str	r3, [r7, #80]	; 0x50
 800bb9e:	e073      	b.n	800bc88 <_tx_event_flags_get+0x1b0>
#endif
    else
    {
        /* flags_satisfied is 0.  */
        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800bba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d06e      	beq.n	800bc84 <_tx_event_flags_get+0x1ac>
        {

            /* Determine if the preempt disable flag is non-zero OR the requested events is 0.  */
            if ((_tx_thread_preempt_disable != ((UINT) 0)) || (requested_flags == (UINT) 0))
 800bba6:	4b3e      	ldr	r3, [pc, #248]	; (800bca0 <_tx_event_flags_get+0x1c8>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d102      	bne.n	800bbb4 <_tx_event_flags_get+0xdc>
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d102      	bne.n	800bbba <_tx_event_flags_get+0xe2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point,
                   or if requested_flags is 0, return error completion.  */
                status =  TX_NO_EVENTS;
 800bbb4:	2307      	movs	r3, #7
 800bbb6:	653b      	str	r3, [r7, #80]	; 0x50
 800bbb8:	e066      	b.n	800bc88 <_tx_event_flags_get+0x1b0>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 800bbba:	4b3a      	ldr	r3, [pc, #232]	; (800bca4 <_tx_event_flags_get+0x1cc>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 800bbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc2:	4a39      	ldr	r2, [pc, #228]	; (800bca8 <_tx_event_flags_get+0x1d0>)
 800bbc4:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 800bbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800bbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bbe6:	1c5a      	adds	r2, r3, #1
 800bbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	695b      	ldr	r3, [r3, #20]
 800bbf2:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800bbf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d109      	bne.n	800bc0e <_tx_event_flags_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbfe:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 800bc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc04:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 800bc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc0a:	675a      	str	r2, [r3, #116]	; 0x74
 800bc0c:	e011      	b.n	800bc32 <_tx_event_flags_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	691b      	ldr	r3, [r3, #16]
 800bc12:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800bc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc18:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800bc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800bc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc24:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800bc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc2a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800bc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc30:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	695b      	ldr	r3, [r3, #20]
 800bc36:	1c5a      	adds	r2, r3, #1
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800bc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3e:	2207      	movs	r2, #7
 800bc40:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc44:	2201      	movs	r2, #1
 800bc46:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800bc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc4c:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800bc4e:	4b14      	ldr	r3, [pc, #80]	; (800bca0 <_tx_event_flags_get+0x1c8>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	3301      	adds	r3, #1
 800bc54:	4a12      	ldr	r2, [pc, #72]	; (800bca0 <_tx_event_flags_get+0x1c8>)
 800bc56:	6013      	str	r3, [r2, #0]
 800bc58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc5a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	f383 8810 	msr	PRIMASK, r3
}
 800bc62:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800bc64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc66:	f001 fce7 	bl	800d638 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc6a:	f3ef 8310 	mrs	r3, PRIMASK
 800bc6e:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bc70:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bc72:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc74:	b672      	cpsid	i
    return(int_posture);
 800bc76:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 800bc78:	657b      	str	r3, [r7, #84]	; 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800bc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc80:	653b      	str	r3, [r7, #80]	; 0x50
 800bc82:	e001      	b.n	800bc88 <_tx_event_flags_get+0x1b0>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 800bc84:	2307      	movs	r3, #7
 800bc86:	653b      	str	r3, [r7, #80]	; 0x50
 800bc88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc8a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	f383 8810 	msr	PRIMASK, r3
}
 800bc92:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800bc94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3758      	adds	r7, #88	; 0x58
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	2001491c 	.word	0x2001491c
 800bca4:	20014884 	.word	0x20014884
 800bca8:	0800b931 	.word	0x0800b931

0800bcac <_tx_event_flags_set>:
/*                                            check logic, resulting in   */
/*                                            version 6.1.11              */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b0a6      	sub	sp, #152	; 0x98
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcb8:	f3ef 8310 	mrs	r3, PRIMASK
 800bcbc:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800bcbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800bcc0:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800bcc2:	b672      	cpsid	i
    return(int_posture);
 800bcc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800bcc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f003 0302 	and.w	r3, r3, #2
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d023      	beq.n	800bd1c <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	695b      	ldr	r3, [r3, #20]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d005      	beq.n	800bcec <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	691b      	ldr	r3, [r3, #16]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d101      	bne.n	800bcec <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800bce8:	2301      	movs	r3, #1
 800bcea:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800bcec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d107      	bne.n	800bd02 <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6a1a      	ldr	r2, [r3, #32]
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	43db      	mvns	r3, r3
 800bcfa:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	621a      	str	r2, [r3, #32]
 800bd00:	e005      	b.n	800bd0e <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	689a      	ldr	r2, [r3, #8]
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	609a      	str	r2, [r3, #8]
 800bd0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bd12:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd16:	f383 8810 	msr	PRIMASK, r3
}
 800bd1a:	e1d2      	b.n	800c0c2 <_tx_event_flags_set+0x416>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	689a      	ldr	r2, [r3, #8]
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6a1b      	ldr	r3, [r3, #32]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d006      	beq.n	800bd3e <_tx_event_flags_set+0x92>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6a1a      	ldr	r2, [r3, #32]
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	43db      	mvns	r3, r3
 800bd38:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	677b      	str	r3, [r7, #116]	; 0x74

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	695b      	ldr	r3, [r3, #20]
 800bd46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	691b      	ldr	r3, [r3, #16]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f000 81a4 	beq.w	800c09c <_tx_event_flags_set+0x3f0>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 800bd54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d167      	bne.n	800be2c <_tx_event_flags_set+0x180>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800bd6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd70:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800bd72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd7a:	667b      	str	r3, [r7, #100]	; 0x64

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 800bd7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd7e:	f003 0302 	and.w	r3, r3, #2
 800bd82:	663b      	str	r3, [r7, #96]	; 0x60

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800bd84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd86:	2b02      	cmp	r3, #2
 800bd88:	d10a      	bne.n	800bda0 <_tx_event_flags_set+0xf4>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800bd8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bd8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd8e:	4013      	ands	r3, r2
 800bd90:	67bb      	str	r3, [r7, #120]	; 0x78

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800bd92:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bd94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d006      	beq.n	800bda8 <_tx_event_flags_set+0xfc>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	67bb      	str	r3, [r7, #120]	; 0x78
 800bd9e:	e003      	b.n	800bda8 <_tx_event_flags_set+0xfc>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800bda0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bda2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bda4:	4013      	ands	r3, r2
 800bda6:	67bb      	str	r3, [r7, #120]	; 0x78
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 800bda8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f000 817d 	beq.w	800c0aa <_tx_event_flags_set+0x3fe>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bdb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bdb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdb6:	65fb      	str	r3, [r7, #92]	; 0x5c
                    *suspend_info_ptr =  current_event_flags;
 800bdb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bdbc:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800bdbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdc0:	f003 0301 	and.w	r3, r3, #1
 800bdc4:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 800bdc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d106      	bne.n	800bdda <_tx_event_flags_set+0x12e>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	689a      	ldr	r2, [r3, #8]
 800bdd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdd2:	43db      	mvns	r3, r3
 800bdd4:	401a      	ands	r2, r3
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2200      	movs	r2, #0
 800bdde:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bde6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bdea:	2200      	movs	r2, #0
 800bdec:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bdee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800bdf8:	4ba7      	ldr	r3, [pc, #668]	; (800c098 <_tx_event_flags_set+0x3ec>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	4aa6      	ldr	r2, [pc, #664]	; (800c098 <_tx_event_flags_set+0x3ec>)
 800be00:	6013      	str	r3, [r2, #0]
 800be02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800be06:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0a:	f383 8810 	msr	PRIMASK, r3
}
 800be0e:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800be10:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800be14:	f001 fb10 	bl	800d438 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be18:	f3ef 8310 	mrs	r3, PRIMASK
 800be1c:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800be1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800be20:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800be22:	b672      	cpsid	i
    return(int_posture);
 800be24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800be26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800be2a:	e13e      	b.n	800c0aa <_tx_event_flags_set+0x3fe>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                thread_ptr =      suspended_list;
 800be34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2200      	movs	r2, #0
 800be40:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800be42:	2300      	movs	r3, #0
 800be44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                last_satisfied =  TX_NULL;
 800be48:	2300      	movs	r3, #0
 800be4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 800be54:	4b90      	ldr	r3, [pc, #576]	; (800c098 <_tx_event_flags_set+0x3ec>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	3301      	adds	r3, #1
 800be5a:	4a8f      	ldr	r2, [pc, #572]	; (800c098 <_tx_event_flags_set+0x3ec>)
 800be5c:	6013      	str	r3, [r2, #0]

                /* Since we have temporarily disabled preemption globally, set the preempt 
                   check flag to check for any preemption condition - including from 
                   unrelated ISR processing.  */
                preempt_check =  TX_TRUE;
 800be5e:	2301      	movs	r3, #1
 800be60:	677b      	str	r3, [r7, #116]	; 0x74
 800be62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800be66:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6a:	f383 8810 	msr	PRIMASK, r3
}
 800be6e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be70:	f3ef 8310 	mrs	r3, PRIMASK
 800be74:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800be76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800be78:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800be7a:	b672      	cpsid	i
    return(int_posture);
 800be7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800be7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00f      	beq.n	800beaa <_tx_event_flags_set+0x1fe>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2200      	movs	r2, #0
 800be8e:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800be90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	695b      	ldr	r3, [r3, #20]
 800be9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bea6:	4313      	orrs	r3, r2
 800bea8:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800beaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800beae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb0:	66fb      	str	r3, [r7, #108]	; 0x6c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800beb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800beb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beb8:	66bb      	str	r3, [r7, #104]	; 0x68

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800beba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bec2:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800bec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bec6:	f003 0302 	and.w	r3, r3, #2
 800beca:	663b      	str	r3, [r7, #96]	; 0x60

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800becc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d10a      	bne.n	800bee8 <_tx_event_flags_set+0x23c>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800bed2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bed6:	4013      	ands	r3, r2
 800bed8:	67bb      	str	r3, [r7, #120]	; 0x78

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800beda:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bedc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bede:	429a      	cmp	r2, r3
 800bee0:	d006      	beq.n	800bef0 <_tx_event_flags_set+0x244>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 800bee2:	2300      	movs	r3, #0
 800bee4:	67bb      	str	r3, [r7, #120]	; 0x78
 800bee6:	e003      	b.n	800bef0 <_tx_event_flags_set+0x244>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800bee8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800beea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800beec:	4013      	ands	r3, r2
 800beee:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800bef0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef6:	2b07      	cmp	r3, #7
 800bef8:	d001      	beq.n	800befe <_tx_event_flags_set+0x252>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800befa:	2301      	movs	r3, #1
 800befc:	67bb      	str	r3, [r7, #120]	; 0x78
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800befe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d069      	beq.n	800bfd8 <_tx_event_flags_set+0x32c>

                        /* Yes, this request can be handled now.  */

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800bf04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf0a:	2b07      	cmp	r3, #7
 800bf0c:	d11d      	bne.n	800bf4a <_tx_event_flags_set+0x29e>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800bf0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf14:	65fb      	str	r3, [r7, #92]	; 0x5c
                            *suspend_info_ptr =  current_event_flags;
 800bf16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf18:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bf1a:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800bf1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf1e:	f003 0301 	and.w	r3, r3, #1
 800bf22:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800bf24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d106      	bne.n	800bf38 <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	689a      	ldr	r2, [r3, #8]
 800bf2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf30:	43db      	mvns	r3, r3
 800bf32:	401a      	ands	r2, r3
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800bf38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bf40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf44:	2200      	movs	r2, #0
 800bf46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800bf4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf50:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d103      	bne.n	800bf60 <_tx_event_flags_set+0x2b4>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf5e:	e018      	b.n	800bf92 <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800bf60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf66:	657b      	str	r3, [r7, #84]	; 0x54
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800bf68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf6e:	653b      	str	r3, [r7, #80]	; 0x50
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800bf70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf74:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 800bf76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf7a:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 800bf7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bf80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d104      	bne.n	800bf92 <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 800bf88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	695b      	ldr	r3, [r3, #20]
 800bf96:	1e5a      	subs	r2, r3, #1
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 800bf9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d10c      	bne.n	800bfbe <_tx_event_flags_set+0x312>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 800bfa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bfa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            last_satisfied =  thread_ptr;
 800bfac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bfb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 800bfb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bfb8:	2200      	movs	r2, #0
 800bfba:	671a      	str	r2, [r3, #112]	; 0x70
 800bfbc:	e00c      	b.n	800bfd8 <_tx_event_flags_set+0x32c>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 800bfbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bfc2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800bfc6:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 800bfc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bfcc:	2200      	movs	r2, #0
 800bfce:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 800bfd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bfd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 800bfd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    /* Decrement the suspension count.  */
                    suspended_count--;
 800bfde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                } while (suspended_count != TX_NO_SUSPENSIONS);
 800bfe8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f47f af38 	bne.w	800be62 <_tx_event_flags_set+0x1b6>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bff8:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00a      	beq.n	800c018 <_tx_event_flags_set+0x36c>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	689a      	ldr	r2, [r3, #8]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6a1b      	ldr	r3, [r3, #32]
 800c00a:	43db      	mvns	r3, r3
 800c00c:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	621a      	str	r2, [r3, #32]
 800c018:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c01c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c020:	f383 8810 	msr	PRIMASK, r3
}
 800c024:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 800c026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c02a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800c02e:	e01f      	b.n	800c070 <_tx_event_flags_set+0x3c4>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c030:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c036:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c038:	f3ef 8310 	mrs	r3, PRIMASK
 800c03c:	623b      	str	r3, [r7, #32]
    return(posture);
 800c03e:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c040:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c042:	b672      	cpsid	i
    return(int_posture);
 800c044:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800c046:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 800c04a:	4b13      	ldr	r3, [pc, #76]	; (800c098 <_tx_event_flags_set+0x3ec>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	3301      	adds	r3, #1
 800c050:	4a11      	ldr	r2, [pc, #68]	; (800c098 <_tx_event_flags_set+0x3ec>)
 800c052:	6013      	str	r3, [r2, #0]
 800c054:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c058:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	f383 8810 	msr	PRIMASK, r3
}
 800c060:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800c062:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c066:	f001 f9e7 	bl	800d438 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 800c06a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c06c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                while(thread_ptr != TX_NULL)
 800c070:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1db      	bne.n	800c030 <_tx_event_flags_set+0x384>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c078:	f3ef 8310 	mrs	r3, PRIMASK
 800c07c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c07e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c080:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c082:	b672      	cpsid	i
    return(int_posture);
 800c084:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 800c086:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 800c08a:	4b03      	ldr	r3, [pc, #12]	; (800c098 <_tx_event_flags_set+0x3ec>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	3b01      	subs	r3, #1
 800c090:	4a01      	ldr	r2, [pc, #4]	; (800c098 <_tx_event_flags_set+0x3ec>)
 800c092:	6013      	str	r3, [r2, #0]
 800c094:	e009      	b.n	800c0aa <_tx_event_flags_set+0x3fe>
 800c096:	bf00      	nop
 800c098:	2001491c 	.word	0x2001491c
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	695b      	ldr	r3, [r3, #20]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d002      	beq.n	800c0aa <_tx_event_flags_set+0x3fe>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	60da      	str	r2, [r3, #12]
 800c0aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c0ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	f383 8810 	msr	PRIMASK, r3
}
 800c0b6:	bf00      	nop
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 800c0b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d101      	bne.n	800c0c2 <_tx_event_flags_set+0x416>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 800c0be:	f001 f981 	bl	800d3c4 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3798      	adds	r7, #152	; 0x98
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800c0d0:	f000 ff36 	bl	800cf40 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800c0d4:	f001 fcdc 	bl	800da90 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800c0d8:	4b12      	ldr	r3, [pc, #72]	; (800c124 <_tx_initialize_high_level+0x58>)
 800c0da:	2200      	movs	r2, #0
 800c0dc:	601a      	str	r2, [r3, #0]
 800c0de:	4b12      	ldr	r3, [pc, #72]	; (800c128 <_tx_initialize_high_level+0x5c>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800c0e4:	4b11      	ldr	r3, [pc, #68]	; (800c12c <_tx_initialize_high_level+0x60>)
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	601a      	str	r2, [r3, #0]
 800c0ea:	4b11      	ldr	r3, [pc, #68]	; (800c130 <_tx_initialize_high_level+0x64>)
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800c0f0:	4b10      	ldr	r3, [pc, #64]	; (800c134 <_tx_initialize_high_level+0x68>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	601a      	str	r2, [r3, #0]
 800c0f6:	4b10      	ldr	r3, [pc, #64]	; (800c138 <_tx_initialize_high_level+0x6c>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800c0fc:	4b0f      	ldr	r3, [pc, #60]	; (800c13c <_tx_initialize_high_level+0x70>)
 800c0fe:	2200      	movs	r2, #0
 800c100:	601a      	str	r2, [r3, #0]
 800c102:	4b0f      	ldr	r3, [pc, #60]	; (800c140 <_tx_initialize_high_level+0x74>)
 800c104:	2200      	movs	r2, #0
 800c106:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800c108:	4b0e      	ldr	r3, [pc, #56]	; (800c144 <_tx_initialize_high_level+0x78>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	601a      	str	r2, [r3, #0]
 800c10e:	4b0e      	ldr	r3, [pc, #56]	; (800c148 <_tx_initialize_high_level+0x7c>)
 800c110:	2200      	movs	r2, #0
 800c112:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800c114:	4b0d      	ldr	r3, [pc, #52]	; (800c14c <_tx_initialize_high_level+0x80>)
 800c116:	2200      	movs	r2, #0
 800c118:	601a      	str	r2, [r3, #0]
 800c11a:	4b0d      	ldr	r3, [pc, #52]	; (800c150 <_tx_initialize_high_level+0x84>)
 800c11c:	2200      	movs	r2, #0
 800c11e:	601a      	str	r2, [r3, #0]
#endif
}
 800c120:	bf00      	nop
 800c122:	bd80      	pop	{r7, pc}
 800c124:	2001484c 	.word	0x2001484c
 800c128:	20014850 	.word	0x20014850
 800c12c:	20014854 	.word	0x20014854
 800c130:	20014858 	.word	0x20014858
 800c134:	2001485c 	.word	0x2001485c
 800c138:	20014860 	.word	0x20014860
 800c13c:	2001486c 	.word	0x2001486c
 800c140:	20014870 	.word	0x20014870
 800c144:	20014874 	.word	0x20014874
 800c148:	20014878 	.word	0x20014878
 800c14c:	20014864 	.word	0x20014864
 800c150:	20014868 	.word	0x20014868

0800c154 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800c158:	4b10      	ldr	r3, [pc, #64]	; (800c19c <_tx_initialize_kernel_enter+0x48>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800c160:	d00c      	beq.n	800c17c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800c162:	4b0e      	ldr	r3, [pc, #56]	; (800c19c <_tx_initialize_kernel_enter+0x48>)
 800c164:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800c168:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800c16a:	f7f4 f88f 	bl	800028c <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800c16e:	f7ff ffad 	bl	800c0cc <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800c172:	4b0b      	ldr	r3, [pc, #44]	; (800c1a0 <_tx_initialize_kernel_enter+0x4c>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	3301      	adds	r3, #1
 800c178:	4a09      	ldr	r2, [pc, #36]	; (800c1a0 <_tx_initialize_kernel_enter+0x4c>)
 800c17a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800c17c:	4b07      	ldr	r3, [pc, #28]	; (800c19c <_tx_initialize_kernel_enter+0x48>)
 800c17e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800c182:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800c184:	4b07      	ldr	r3, [pc, #28]	; (800c1a4 <_tx_initialize_kernel_enter+0x50>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4618      	mov	r0, r3
 800c18a:	f7f4 f99d 	bl	80004c8 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800c18e:	4b03      	ldr	r3, [pc, #12]	; (800c19c <_tx_initialize_kernel_enter+0x48>)
 800c190:	2200      	movs	r2, #0
 800c192:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800c194:	f7f4 f8b6 	bl	8000304 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800c198:	bf00      	nop
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	20000088 	.word	0x20000088
 800c1a0:	2001491c 	.word	0x2001491c
 800c1a4:	2001487c 	.word	0x2001487c

0800c1a8 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b08e      	sub	sp, #56	; 0x38
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c1b2:	f3ef 8310 	mrs	r3, PRIMASK
 800c1b6:	623b      	str	r3, [r7, #32]
    return(posture);
 800c1b8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c1ba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c1bc:	b672      	cpsid	i
    return(int_posture);
 800c1be:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 800c1c0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1c6:	4a33      	ldr	r2, [pc, #204]	; (800c294 <_tx_mutex_cleanup+0xec>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d158      	bne.n	800c27e <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c1d2:	683a      	ldr	r2, [r7, #0]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d152      	bne.n	800c27e <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1dc:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 800c1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d04c      	beq.n	800c27e <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800c1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a2b      	ldr	r2, [pc, #172]	; (800c298 <_tx_mutex_cleanup+0xf0>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d147      	bne.n	800c27e <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800c1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f0:	69db      	ldr	r3, [r3, #28]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d043      	beq.n	800c27e <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fe:	69db      	ldr	r3, [r3, #28]
 800c200:	1e5a      	subs	r2, r3, #1
 800c202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c204:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800c206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d103      	bne.n	800c21a <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800c212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c214:	2200      	movs	r2, #0
 800c216:	619a      	str	r2, [r3, #24]
 800c218:	e013      	b.n	800c242 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c21e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c224:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c22a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c230:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800c232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c234:	699b      	ldr	r3, [r3, #24]
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d102      	bne.n	800c242 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800c23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c240:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c246:	2b0d      	cmp	r3, #13
 800c248:	d119      	bne.n	800c27e <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	221d      	movs	r2, #29
 800c24e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c252:	4b12      	ldr	r3, [pc, #72]	; (800c29c <_tx_mutex_cleanup+0xf4>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	3301      	adds	r3, #1
 800c258:	4a10      	ldr	r2, [pc, #64]	; (800c29c <_tx_mutex_cleanup+0xf4>)
 800c25a:	6013      	str	r3, [r2, #0]
 800c25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	f383 8810 	msr	PRIMASK, r3
}
 800c266:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f001 f8e5 	bl	800d438 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c26e:	f3ef 8310 	mrs	r3, PRIMASK
 800c272:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c274:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c276:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c278:	b672      	cpsid	i
    return(int_posture);
 800c27a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c27c:	637b      	str	r3, [r7, #52]	; 0x34
 800c27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c280:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f383 8810 	msr	PRIMASK, r3
}
 800c288:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c28a:	bf00      	nop
 800c28c:	3738      	adds	r7, #56	; 0x38
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	0800c1a9 	.word	0x0800c1a9
 800c298:	4d555445 	.word	0x4d555445
 800c29c:	2001491c 	.word	0x2001491c

0800c2a0 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b08a      	sub	sp, #40	; 0x28
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2a8:	f3ef 8310 	mrs	r3, PRIMASK
 800c2ac:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c2ae:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c2b0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c2b2:	b672      	cpsid	i
    return(int_posture);
 800c2b4:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800c2b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800c2b8:	4b1a      	ldr	r3, [pc, #104]	; (800c324 <_tx_mutex_thread_release+0x84>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	4a19      	ldr	r2, [pc, #100]	; (800c324 <_tx_mutex_thread_release+0x84>)
 800c2c0:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c2c8:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 800c2ca:	6a3b      	ldr	r3, [r7, #32]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d017      	beq.n	800c300 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800c2d0:	6a3b      	ldr	r3, [r7, #32]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	609a      	str	r2, [r3, #8]
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f383 8810 	msr	PRIMASK, r3
}
 800c2e0:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800c2e2:	6a38      	ldr	r0, [r7, #32]
 800c2e4:	f000 faf2 	bl	800c8cc <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2e8:	f3ef 8310 	mrs	r3, PRIMASK
 800c2ec:	617b      	str	r3, [r7, #20]
    return(posture);
 800c2ee:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c2f0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c2f2:	b672      	cpsid	i
    return(int_posture);
 800c2f4:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 800c2f6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c2fe:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 800c300:	6a3b      	ldr	r3, [r7, #32]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1dd      	bne.n	800c2c2 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800c306:	4b07      	ldr	r3, [pc, #28]	; (800c324 <_tx_mutex_thread_release+0x84>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	4a05      	ldr	r2, [pc, #20]	; (800c324 <_tx_mutex_thread_release+0x84>)
 800c30e:	6013      	str	r3, [r2, #0]
 800c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c312:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	f383 8810 	msr	PRIMASK, r3
}
 800c31a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 800c31c:	bf00      	nop
 800c31e:	3728      	adds	r7, #40	; 0x28
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	2001491c 	.word	0x2001491c

0800c328 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08a      	sub	sp, #40	; 0x28
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800c334:	2234      	movs	r2, #52	; 0x34
 800c336:	2100      	movs	r1, #0
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f002 fcbf 	bl	800ecbc <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c34a:	f3ef 8310 	mrs	r3, PRIMASK
 800c34e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c350:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c352:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c354:	b672      	cpsid	i
    return(int_posture);
 800c356:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 800c358:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	4a1a      	ldr	r2, [pc, #104]	; (800c3c8 <_tx_mutex_create+0xa0>)
 800c35e:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800c360:	4b1a      	ldr	r3, [pc, #104]	; (800c3cc <_tx_mutex_create+0xa4>)
 800c362:	4a1b      	ldr	r2, [pc, #108]	; (800c3d0 <_tx_mutex_create+0xa8>)
 800c364:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800c366:	4b1b      	ldr	r3, [pc, #108]	; (800c3d4 <_tx_mutex_create+0xac>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d109      	bne.n	800c382 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800c36e:	4a1a      	ldr	r2, [pc, #104]	; (800c3d8 <_tx_mutex_create+0xb0>)
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	625a      	str	r2, [r3, #36]	; 0x24
 800c380:	e011      	b.n	800c3a6 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800c382:	4b15      	ldr	r3, [pc, #84]	; (800c3d8 <_tx_mutex_create+0xb0>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800c388:	6a3b      	ldr	r3, [r7, #32]
 800c38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38c:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800c38e:	6a3b      	ldr	r3, [r7, #32]
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	68fa      	ldr	r2, [r7, #12]
 800c398:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	69fa      	ldr	r2, [r7, #28]
 800c39e:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	6a3a      	ldr	r2, [r7, #32]
 800c3a4:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800c3a6:	4b0b      	ldr	r3, [pc, #44]	; (800c3d4 <_tx_mutex_create+0xac>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	4a09      	ldr	r2, [pc, #36]	; (800c3d4 <_tx_mutex_create+0xac>)
 800c3ae:	6013      	str	r3, [r2, #0]
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	f383 8810 	msr	PRIMASK, r3
}
 800c3ba:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3728      	adds	r7, #40	; 0x28
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	4d555445 	.word	0x4d555445
 800c3cc:	20014920 	.word	0x20014920
 800c3d0:	0800c2a1 	.word	0x0800c2a1
 800c3d4:	20014868 	.word	0x20014868
 800c3d8:	20014864 	.word	0x20014864

0800c3dc <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b092      	sub	sp, #72	; 0x48
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c3e6:	f3ef 8310 	mrs	r3, PRIMASK
 800c3ea:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c3ee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c3f0:	b672      	cpsid	i
    return(int_posture);
 800c3f2:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800c3f4:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c3f6:	4b7a      	ldr	r3, [pc, #488]	; (800c5e0 <_tx_mutex_get+0x204>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d144      	bne.n	800c48e <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c40e:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800c410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c412:	2b00      	cmp	r3, #0
 800c414:	d032      	beq.n	800c47c <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d106      	bne.n	800c42c <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800c41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2220      	movs	r2, #32
 800c42a:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800c42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c42e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c432:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800c434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00f      	beq.n	800c45a <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800c43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c43e:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800c440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800c446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c450:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c456:	62da      	str	r2, [r3, #44]	; 0x2c
 800c458:	e009      	b.n	800c46e <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800c45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800c46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c470:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c474:	1c5a      	adds	r2, r3, #1
 800c476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c478:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800c47c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c47e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	f383 8810 	msr	PRIMASK, r3
}
 800c486:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800c488:	2300      	movs	r3, #0
 800c48a:	647b      	str	r3, [r7, #68]	; 0x44
 800c48c:	e0a2      	b.n	800c5d4 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c494:	429a      	cmp	r2, r3
 800c496:	d10d      	bne.n	800c4b4 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	1c5a      	adds	r2, r3, #1
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	609a      	str	r2, [r3, #8]
 800c4a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4a4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	f383 8810 	msr	PRIMASK, r3
}
 800c4ac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	647b      	str	r3, [r7, #68]	; 0x44
 800c4b2:	e08f      	b.n	800c5d4 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f000 8084 	beq.w	800c5c4 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800c4bc:	4b49      	ldr	r3, [pc, #292]	; (800c5e4 <_tx_mutex_get+0x208>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d008      	beq.n	800c4d6 <_tx_mutex_get+0xfa>
 800c4c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	f383 8810 	msr	PRIMASK, r3
}
 800c4ce:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800c4d0:	231d      	movs	r3, #29
 800c4d2:	647b      	str	r3, [r7, #68]	; 0x44
 800c4d4:	e07e      	b.n	800c5d4 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800c4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4de:	4a42      	ldr	r2, [pc, #264]	; (800c5e8 <_tx_mutex_get+0x20c>)
 800c4e0:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800c4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800c4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c4ee:	1c5a      	adds	r2, r3, #1
 800c4f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	69db      	ldr	r3, [r3, #28]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d109      	bne.n	800c512 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c502:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c506:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c508:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c50c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c50e:	675a      	str	r2, [r3, #116]	; 0x74
 800c510:	e011      	b.n	800c536 <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	699b      	ldr	r3, [r3, #24]
 800c516:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c51a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c51c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c522:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c528:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c52e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c532:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c534:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	69db      	ldr	r3, [r3, #28]
 800c53a:	1c5a      	adds	r2, r3, #1
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800c540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c542:	220d      	movs	r2, #13
 800c544:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c548:	2201      	movs	r2, #1
 800c54a:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c54e:	683a      	ldr	r2, [r7, #0]
 800c550:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800c552:	4b24      	ldr	r3, [pc, #144]	; (800c5e4 <_tx_mutex_get+0x208>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	3301      	adds	r3, #1
 800c558:	4a22      	ldr	r2, [pc, #136]	; (800c5e4 <_tx_mutex_get+0x208>)
 800c55a:	6013      	str	r3, [r2, #0]
 800c55c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c55e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	f383 8810 	msr	PRIMASK, r3
}
 800c566:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	691b      	ldr	r3, [r3, #16]
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d121      	bne.n	800c5b4 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c578:	429a      	cmp	r2, r3
 800c57a:	d903      	bls.n	800c584 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800c57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800c584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c58e:	429a      	cmp	r2, r3
 800c590:	d204      	bcs.n	800c59c <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800c592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c598:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800c59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d905      	bls.n	800c5b4 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800c5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5b0:	f000 f8ce 	bl	800c750 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800c5b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c5b6:	f001 f83f 	bl	800d638 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800c5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5c0:	647b      	str	r3, [r7, #68]	; 0x44
 800c5c2:	e007      	b.n	800c5d4 <_tx_mutex_get+0x1f8>
 800c5c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5c6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f383 8810 	msr	PRIMASK, r3
}
 800c5ce:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800c5d0:	231d      	movs	r3, #29
 800c5d2:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 800c5d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3748      	adds	r7, #72	; 0x48
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	20014884 	.word	0x20014884
 800c5e4:	2001491c 	.word	0x2001491c
 800c5e8:	0800c1a9 	.word	0x0800c1a9

0800c5ec <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b092      	sub	sp, #72	; 0x48
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c5f4:	f3ef 8310 	mrs	r3, PRIMASK
 800c5f8:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c5fc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c5fe:	b672      	cpsid	i
    return(int_posture);
 800c600:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800c602:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	69db      	ldr	r3, [r3, #28]
 800c608:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800c60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d805      	bhi.n	800c61c <_tx_mutex_prioritize+0x30>
 800c610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c612:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	f383 8810 	msr	PRIMASK, r3
}
 800c61a:	e092      	b.n	800c742 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800c61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61e:	2b02      	cmp	r3, #2
 800c620:	d114      	bne.n	800c64c <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	699b      	ldr	r3, [r3, #24]
 800c626:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800c628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c62c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800c62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c636:	429a      	cmp	r2, r3
 800c638:	d202      	bcs.n	800c640 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c63e:	619a      	str	r2, [r3, #24]
 800c640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c642:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c644:	69bb      	ldr	r3, [r7, #24]
 800c646:	f383 8810 	msr	PRIMASK, r3
}
 800c64a:	e07a      	b.n	800c742 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	699b      	ldr	r3, [r3, #24]
 800c650:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800c652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c654:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800c656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c65a:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800c65c:	4b3b      	ldr	r3, [pc, #236]	; (800c74c <_tx_mutex_prioritize+0x160>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	3301      	adds	r3, #1
 800c662:	4a3a      	ldr	r2, [pc, #232]	; (800c74c <_tx_mutex_prioritize+0x160>)
 800c664:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800c666:	2300      	movs	r3, #0
 800c668:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800c66a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c672:	429a      	cmp	r2, r3
 800c674:	d201      	bcs.n	800c67a <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800c676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c67a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c67c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f383 8810 	msr	PRIMASK, r3
}
 800c684:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c686:	f3ef 8310 	mrs	r3, PRIMASK
 800c68a:	617b      	str	r3, [r7, #20]
    return(posture);
 800c68c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c68e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c690:	b672      	cpsid	i
    return(int_posture);
 800c692:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800c694:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	699b      	ldr	r3, [r3, #24]
 800c69a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d002      	beq.n	800c6a6 <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	633b      	str	r3, [r7, #48]	; 0x30
 800c6a4:	e006      	b.n	800c6b4 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	69db      	ldr	r3, [r3, #28]
 800c6aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d001      	beq.n	800c6b4 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d103      	bne.n	800c6c2 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800c6ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6be:	643b      	str	r3, [r7, #64]	; 0x40
 800c6c0:	e00c      	b.n	800c6dc <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	699b      	ldr	r3, [r3, #24]
 800c6c6:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	69db      	ldr	r3, [r3, #28]
 800c6cc:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800c6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d0:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800c6d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6d6:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 800c6dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d1c2      	bne.n	800c66a <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800c6e4:	4b19      	ldr	r3, [pc, #100]	; (800c74c <_tx_mutex_prioritize+0x160>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	4a18      	ldr	r2, [pc, #96]	; (800c74c <_tx_mutex_prioritize+0x160>)
 800c6ec:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800c6ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d01d      	beq.n	800c732 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800c6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800c6fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c700:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800c702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c706:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800c708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c70c:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800c70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c712:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800c714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c718:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800c71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c71c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c71e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800c720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c722:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c724:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800c726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c728:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c72a:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c730:	619a      	str	r2, [r3, #24]
 800c732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c734:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	f383 8810 	msr	PRIMASK, r3
}
 800c73c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c73e:	f000 fe41 	bl	800d3c4 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800c742:	2300      	movs	r3, #0
#endif
}
 800c744:	4618      	mov	r0, r3
 800c746:	3748      	adds	r7, #72	; 0x48
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	2001491c 	.word	0x2001491c

0800c750 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b090      	sub	sp, #64	; 0x40
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c75a:	f3ef 8310 	mrs	r3, PRIMASK
 800c75e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c762:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c764:	b672      	cpsid	i
    return(int_posture);
 800c766:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800c768:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d017      	beq.n	800c7a2 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	683a      	ldr	r2, [r7, #0]
 800c776:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	429a      	cmp	r2, r3
 800c782:	d905      	bls.n	800c790 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	63da      	str	r2, [r3, #60]	; 0x3c
 800c78e:	e002      	b.n	800c796 <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	683a      	ldr	r2, [r7, #0]
 800c794:	63da      	str	r2, [r3, #60]	; 0x3c
 800c796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c798:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	f383 8810 	msr	PRIMASK, r3
}
 800c7a0:	e089      	b.n	800c8b6 <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800c7a2:	4b47      	ldr	r3, [pc, #284]	; (800c8c0 <_tx_mutex_priority_change+0x170>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ac:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800c7ae:	4b45      	ldr	r3, [pc, #276]	; (800c8c4 <_tx_mutex_priority_change+0x174>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	3302      	adds	r3, #2
 800c7b4:	4a43      	ldr	r2, [pc, #268]	; (800c8c4 <_tx_mutex_priority_change+0x174>)
 800c7b6:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	220e      	movs	r2, #14
 800c7bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	64da      	str	r2, [r3, #76]	; 0x4c
 800c7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7cc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	f383 8810 	msr	PRIMASK, r3
}
 800c7d4:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 ff2e 	bl	800d638 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c7dc:	f3ef 8310 	mrs	r3, PRIMASK
 800c7e0:	623b      	str	r3, [r7, #32]
    return(posture);
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c7e4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c7e6:	b672      	cpsid	i
    return(int_posture);
 800c7e8:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 800c7ea:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c7f8:	683a      	ldr	r2, [r7, #0]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d905      	bls.n	800c80a <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	63da      	str	r2, [r3, #60]	; 0x3c
 800c808:	e002      	b.n	800c810 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	683a      	ldr	r2, [r7, #0]
 800c80e:	63da      	str	r2, [r3, #60]	; 0x3c
 800c810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c812:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f383 8810 	msr	PRIMASK, r3
}
 800c81a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fe0b 	bl	800d438 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c822:	f3ef 8310 	mrs	r3, PRIMASK
 800c826:	617b      	str	r3, [r7, #20]
    return(posture);
 800c828:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c82a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c82c:	b672      	cpsid	i
    return(int_posture);
 800c82e:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800c830:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800c832:	4b23      	ldr	r3, [pc, #140]	; (800c8c0 <_tx_mutex_priority_change+0x170>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d034      	beq.n	800c8aa <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c844:	2b00      	cmp	r3, #0
 800c846:	d130      	bne.n	800c8aa <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c850:	429a      	cmp	r2, r3
 800c852:	d811      	bhi.n	800c878 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c858:	429a      	cmp	r2, r3
 800c85a:	d126      	bne.n	800c8aa <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800c85c:	4a18      	ldr	r2, [pc, #96]	; (800c8c0 <_tx_mutex_priority_change+0x170>)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800c862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	429a      	cmp	r2, r3
 800c868:	d21f      	bcs.n	800c8aa <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c86e:	4916      	ldr	r1, [pc, #88]	; (800c8c8 <_tx_mutex_priority_change+0x178>)
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c876:	e018      	b.n	800c8aa <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c880:	429a      	cmp	r2, r3
 800c882:	d212      	bcs.n	800c8aa <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d80c      	bhi.n	800c8aa <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800c890:	4a0b      	ldr	r2, [pc, #44]	; (800c8c0 <_tx_mutex_priority_change+0x170>)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800c896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d205      	bcs.n	800c8aa <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a2:	4909      	ldr	r1, [pc, #36]	; (800c8c8 <_tx_mutex_priority_change+0x178>)
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8ac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	f383 8810 	msr	PRIMASK, r3
}
 800c8b4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800c8b6:	bf00      	nop
 800c8b8:	3740      	adds	r7, #64	; 0x40
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	20014888 	.word	0x20014888
 800c8c4:	2001491c 	.word	0x2001491c
 800c8c8:	2001489c 	.word	0x2001489c

0800c8cc <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b0a6      	sub	sp, #152	; 0x98
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800c8d4:	2320      	movs	r3, #32
 800c8d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8da:	f3ef 8310 	mrs	r3, PRIMASK
 800c8de:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 800c8e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 800c8e2:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800c8e4:	b672      	cpsid	i
    return(int_posture);
 800c8e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800c8e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f000 81ff 	beq.w	800ccf4 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800c8fc:	4ba3      	ldr	r3, [pc, #652]	; (800cb8c <_tx_mutex_put+0x2c0>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c908:	429a      	cmp	r2, r3
 800c90a:	d00d      	beq.n	800c928 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800c90c:	4ba0      	ldr	r3, [pc, #640]	; (800cb90 <_tx_mutex_put+0x2c4>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d109      	bne.n	800c928 <_tx_mutex_put+0x5c>
 800c914:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c918:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c91a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c91c:	f383 8810 	msr	PRIMASK, r3
}
 800c920:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800c922:	231e      	movs	r3, #30
 800c924:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800c928:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c92c:	2b20      	cmp	r3, #32
 800c92e:	f040 81eb 	bne.w	800cd08 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	1e5a      	subs	r2, r3, #1
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d00a      	beq.n	800c95a <_tx_mutex_put+0x8e>
 800c944:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c948:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c94a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c94c:	f383 8810 	msr	PRIMASK, r3
}
 800c950:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800c952:	2300      	movs	r3, #0
 800c954:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c958:	e1d6      	b.n	800cd08 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800c95a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10a      	bne.n	800c976 <_tx_mutex_put+0xaa>
 800c960:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c964:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c968:	f383 8810 	msr	PRIMASK, r3
}
 800c96c:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800c96e:	2300      	movs	r3, #0
 800c970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c974:	e1c8      	b.n	800cd08 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800c976:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c978:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c97c:	1e5a      	subs	r2, r3, #1
 800c97e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c980:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800c984:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c986:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d104      	bne.n	800c998 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800c98e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c990:	2200      	movs	r2, #0
 800c992:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800c996:	e019      	b.n	800c9cc <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c99c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a4:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800c9a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c9aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c9ac:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800c9ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c9b4:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800c9b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c9b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d104      	bne.n	800c9cc <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800c9c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c9c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c9c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	699b      	ldr	r3, [r3, #24]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d110      	bne.n	800c9f6 <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10c      	bne.n	800c9f6 <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	60da      	str	r2, [r3, #12]
 800c9e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c9e6:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ea:	f383 8810 	msr	PRIMASK, r3
}
 800c9ee:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800c9f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c9fa:	2b20      	cmp	r3, #32
 800c9fc:	f040 8184 	bne.w	800cd08 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800ca00:	2300      	movs	r3, #0
 800ca02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800ca06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d155      	bne.n	800cac4 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ca18:	4b5d      	ldr	r3, [pc, #372]	; (800cb90 <_tx_mutex_put+0x2c4>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	4a5c      	ldr	r2, [pc, #368]	; (800cb90 <_tx_mutex_put+0x2c4>)
 800ca20:	6013      	str	r3, [r2, #0]
 800ca22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca26:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca2a:	f383 8810 	msr	PRIMASK, r3
}
 800ca2e:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800ca30:	2320      	movs	r3, #32
 800ca32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800ca36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ca3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800ca40:	e01f      	b.n	800ca82 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800ca42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d10b      	bne.n	800ca64 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800ca4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d904      	bls.n	800ca64 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800ca5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800ca64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800ca6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ca74:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d102      	bne.n	800ca82 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800ca82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1db      	bne.n	800ca42 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ca8a:	f3ef 8310 	mrs	r3, PRIMASK
 800ca8e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800ca90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800ca92:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800ca94:	b672      	cpsid	i
    return(int_posture);
 800ca96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ca98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800ca9c:	4b3c      	ldr	r3, [pc, #240]	; (800cb90 <_tx_mutex_put+0x2c4>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	3b01      	subs	r3, #1
 800caa2:	4a3b      	ldr	r2, [pc, #236]	; (800cb90 <_tx_mutex_put+0x2c4>)
 800caa4:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800caa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800caa8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800caac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800cab0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cab8:	429a      	cmp	r2, r3
 800caba:	d203      	bcs.n	800cac4 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 800cabc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cac0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	69db      	ldr	r3, [r3, #28]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d920      	bls.n	800cb0e <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	691b      	ldr	r3, [r3, #16]
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d11c      	bne.n	800cb0e <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800cad4:	4b2e      	ldr	r3, [pc, #184]	; (800cb90 <_tx_mutex_put+0x2c4>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	3301      	adds	r3, #1
 800cada:	4a2d      	ldr	r2, [pc, #180]	; (800cb90 <_tx_mutex_put+0x2c4>)
 800cadc:	6013      	str	r3, [r2, #0]
 800cade:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cae2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae6:	f383 8810 	msr	PRIMASK, r3
}
 800caea:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7ff fd7d 	bl	800c5ec <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800caf2:	f3ef 8310 	mrs	r3, PRIMASK
 800caf6:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800caf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800cafa:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800cafc:	b672      	cpsid	i
    return(int_posture);
 800cafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 800cb00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800cb04:	4b22      	ldr	r3, [pc, #136]	; (800cb90 <_tx_mutex_put+0x2c4>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	4a21      	ldr	r2, [pc, #132]	; (800cb90 <_tx_mutex_put+0x2c4>)
 800cb0c:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	699b      	ldr	r3, [r3, #24]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d13e      	bne.n	800cb94 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800cb16:	4b1e      	ldr	r3, [pc, #120]	; (800cb90 <_tx_mutex_put+0x2c4>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	4a1c      	ldr	r2, [pc, #112]	; (800cb90 <_tx_mutex_put+0x2c4>)
 800cb1e:	6013      	str	r3, [r2, #0]
 800cb20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cb24:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb28:	f383 8810 	msr	PRIMASK, r3
}
 800cb2c:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2220      	movs	r2, #32
 800cb32:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb3a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d006      	beq.n	800cb50 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	68db      	ldr	r3, [r3, #12]
 800cb46:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7ff fe00 	bl	800c750 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb50:	f3ef 8310 	mrs	r3, PRIMASK
 800cb54:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800cb58:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb5a:	b672      	cpsid	i
    return(int_posture);
 800cb5c:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800cb5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800cb62:	4b0b      	ldr	r3, [pc, #44]	; (800cb90 <_tx_mutex_put+0x2c4>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	3b01      	subs	r3, #1
 800cb68:	4a09      	ldr	r2, [pc, #36]	; (800cb90 <_tx_mutex_put+0x2c4>)
 800cb6a:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	60da      	str	r2, [r3, #12]
 800cb72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cb76:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7a:	f383 8810 	msr	PRIMASK, r3
}
 800cb7e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800cb80:	f000 fc20 	bl	800d3c4 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 800cb84:	2300      	movs	r3, #0
 800cb86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb8a:	e0bd      	b.n	800cd08 <_tx_mutex_put+0x43c>
 800cb8c:	20014884 	.word	0x20014884
 800cb90:	2001491c 	.word	0x2001491c
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	699b      	ldr	r3, [r3, #24]
 800cb98:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d10a      	bne.n	800cbb8 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800cbaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cbac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2220      	movs	r2, #32
 800cbb6:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800cbb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cbba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cbbe:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800cbc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d10a      	bne.n	800cbdc <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800cbc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	631a      	str	r2, [r3, #48]	; 0x30
 800cbda:	e016      	b.n	800cc0a <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800cbdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cbde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cbe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800cbe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbec:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800cbee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800cbf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cc00:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cc08:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800cc0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc0c:	1c5a      	adds	r2, r3, #1
 800cc0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc10:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cc1e:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	69db      	ldr	r3, [r3, #28]
 800cc24:	1e5a      	subs	r2, r3, #1
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	69db      	ldr	r3, [r3, #28]
 800cc2e:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800cc30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d103      	bne.n	800cc3e <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	619a      	str	r2, [r3, #24]
 800cc3c:	e00e      	b.n	800cc5c <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800cc3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc42:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc48:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800cc4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc4e:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800cc50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cc54:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800cc56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc5a:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800cc5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc5e:	2200      	movs	r2, #0
 800cc60:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800cc62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cc64:	2200      	movs	r2, #0
 800cc66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800cc6a:	4b2a      	ldr	r3, [pc, #168]	; (800cd14 <_tx_mutex_put+0x448>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	4a28      	ldr	r2, [pc, #160]	; (800cd14 <_tx_mutex_put+0x448>)
 800cc72:	6013      	str	r3, [r2, #0]
 800cc74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cc78:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	f383 8810 	msr	PRIMASK, r3
}
 800cc80:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	691b      	ldr	r3, [r3, #16]
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d12d      	bne.n	800cce6 <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	69db      	ldr	r3, [r3, #28]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d01c      	beq.n	800cccc <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f7ff fcaa 	bl	800c5ec <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc98:	f3ef 8310 	mrs	r3, PRIMASK
 800cc9c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800cc9e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800cca0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cca2:	b672      	cpsid	i
    return(int_posture);
 800cca4:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800cca6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	699b      	ldr	r3, [r3, #24]
 800ccae:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 800ccb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d003      	beq.n	800ccbe <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800ccb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	629a      	str	r2, [r3, #40]	; 0x28
 800ccbe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ccc2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	f383 8810 	msr	PRIMASK, r3
}
 800ccca:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 800cccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ccd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d005      	beq.n	800cce6 <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800ccda:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ccde:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800cce2:	f7ff fd35 	bl	800c750 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800cce6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800cce8:	f000 fba6 	bl	800d438 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800ccec:	2300      	movs	r3, #0
 800ccee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ccf2:	e009      	b.n	800cd08 <_tx_mutex_put+0x43c>
 800ccf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ccf8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f383 8810 	msr	PRIMASK, r3
}
 800cd00:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800cd02:	231e      	movs	r3, #30
 800cd04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 800cd08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3798      	adds	r7, #152	; 0x98
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	2001491c 	.word	0x2001491c

0800cd18 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b092      	sub	sp, #72	; 0x48
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800cd26:	2300      	movs	r3, #0
 800cd28:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800cd2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cd2c:	21ef      	movs	r1, #239	; 0xef
 800cd2e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cd30:	f001 ffc4 	bl	800ecbc <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800cd34:	22b0      	movs	r2, #176	; 0xb0
 800cd36:	2100      	movs	r1, #0
 800cd38:	68f8      	ldr	r0, [r7, #12]
 800cd3a:	f001 ffbf 	bl	800ecbc <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	68ba      	ldr	r2, [r7, #8]
 800cd42:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	683a      	ldr	r2, [r7, #0]
 800cd4e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd54:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cd5a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd60:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd6e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd74:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2220      	movs	r2, #32
 800cd7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800cd7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd80:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800cd82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd84:	3b01      	subs	r3, #1
 800cd86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd88:	4413      	add	r3, r2
 800cd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd90:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800cd92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d007      	beq.n	800cdaa <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2200      	movs	r2, #0
 800cda4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800cda8:	e006      	b.n	800cdb8 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdae:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdb4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2203      	movs	r2, #3
 800cdbc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	4a48      	ldr	r2, [pc, #288]	; (800cee4 <_tx_thread_create+0x1cc>)
 800cdc2:	655a      	str	r2, [r3, #84]	; 0x54
 800cdc4:	68fa      	ldr	r2, [r7, #12]
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800cdca:	4947      	ldr	r1, [pc, #284]	; (800cee8 <_tx_thread_create+0x1d0>)
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f7f3 faff 	bl	80003d0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cdd2:	f3ef 8310 	mrs	r3, PRIMASK
 800cdd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800cdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800cdda:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800cddc:	b672      	cpsid	i
    return(int_posture);
 800cdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800cde0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	4a41      	ldr	r2, [pc, #260]	; (800ceec <_tx_thread_create+0x1d4>)
 800cde6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800cde8:	4b41      	ldr	r3, [pc, #260]	; (800cef0 <_tx_thread_create+0x1d8>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d10b      	bne.n	800ce08 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800cdf0:	4a40      	ldr	r2, [pc, #256]	; (800cef4 <_tx_thread_create+0x1dc>)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	68fa      	ldr	r2, [r7, #12]
 800ce02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800ce06:	e016      	b.n	800ce36 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800ce08:	4b3a      	ldr	r3, [pc, #232]	; (800cef4 <_tx_thread_create+0x1dc>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800ce0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce14:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800ce16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce20:	68fa      	ldr	r2, [r7, #12]
 800ce22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800ce36:	4b2e      	ldr	r3, [pc, #184]	; (800cef0 <_tx_thread_create+0x1d8>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	4a2c      	ldr	r2, [pc, #176]	; (800cef0 <_tx_thread_create+0x1d8>)
 800ce3e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ce40:	4b2d      	ldr	r3, [pc, #180]	; (800cef8 <_tx_thread_create+0x1e0>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3301      	adds	r3, #1
 800ce46:	4a2c      	ldr	r2, [pc, #176]	; (800cef8 <_tx_thread_create+0x1e0>)
 800ce48:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800ce4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d129      	bne.n	800cea4 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce50:	f3ef 8305 	mrs	r3, IPSR
 800ce54:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800ce56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800ce58:	4b28      	ldr	r3, [pc, #160]	; (800cefc <_tx_thread_create+0x1e4>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ce62:	d30d      	bcc.n	800ce80 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800ce64:	4b26      	ldr	r3, [pc, #152]	; (800cf00 <_tx_thread_create+0x1e8>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800ce6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d009      	beq.n	800ce84 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800ce70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce74:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800ce76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce7c:	63da      	str	r2, [r3, #60]	; 0x3c
 800ce7e:	e001      	b.n	800ce84 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800ce80:	2300      	movs	r3, #0
 800ce82:	647b      	str	r3, [r7, #68]	; 0x44
 800ce84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce86:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce88:	6a3b      	ldr	r3, [r7, #32]
 800ce8a:	f383 8810 	msr	PRIMASK, r3
}
 800ce8e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	f000 fad1 	bl	800d438 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800ce96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d01e      	beq.n	800ceda <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800ce9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cea0:	63da      	str	r2, [r3, #60]	; 0x3c
 800cea2:	e01a      	b.n	800ceda <_tx_thread_create+0x1c2>
 800cea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	f383 8810 	msr	PRIMASK, r3
}
 800ceae:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ceb0:	f3ef 8310 	mrs	r3, PRIMASK
 800ceb4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ceb6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ceb8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ceba:	b672      	cpsid	i
    return(int_posture);
 800cebc:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800cebe:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800cec0:	4b0d      	ldr	r3, [pc, #52]	; (800cef8 <_tx_thread_create+0x1e0>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	3b01      	subs	r3, #1
 800cec6:	4a0c      	ldr	r2, [pc, #48]	; (800cef8 <_tx_thread_create+0x1e0>)
 800cec8:	6013      	str	r3, [r2, #0]
 800ceca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cecc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cece:	69fb      	ldr	r3, [r7, #28]
 800ced0:	f383 8810 	msr	PRIMASK, r3
}
 800ced4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ced6:	f000 fa75 	bl	800d3c4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3748      	adds	r7, #72	; 0x48
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	0800d90d 	.word	0x0800d90d
 800cee8:	0800d22d 	.word	0x0800d22d
 800ceec:	54485244 	.word	0x54485244
 800cef0:	20014890 	.word	0x20014890
 800cef4:	2001488c 	.word	0x2001488c
 800cef8:	2001491c 	.word	0x2001491c
 800cefc:	20000088 	.word	0x20000088
 800cf00:	20014888 	.word	0x20014888

0800cf04 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b087      	sub	sp, #28
 800cf08:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf0a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf0e:	60bb      	str	r3, [r7, #8]
    return(posture);
 800cf10:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 800cf12:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf14:	b672      	cpsid	i
    return(int_posture);
 800cf16:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800cf18:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cf1a:	4b08      	ldr	r3, [pc, #32]	; (800cf3c <_tx_thread_identify+0x38>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	613b      	str	r3, [r7, #16]
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f383 8810 	msr	PRIMASK, r3
}
 800cf2a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 800cf2c:	693b      	ldr	r3, [r7, #16]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	371c      	adds	r7, #28
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	20014884 	.word	0x20014884

0800cf40 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800cf44:	4b12      	ldr	r3, [pc, #72]	; (800cf90 <_tx_thread_initialize+0x50>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800cf4a:	4b12      	ldr	r3, [pc, #72]	; (800cf94 <_tx_thread_initialize+0x54>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	601a      	str	r2, [r3, #0]
 800cf50:	4b11      	ldr	r3, [pc, #68]	; (800cf98 <_tx_thread_initialize+0x58>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cf56:	4b11      	ldr	r3, [pc, #68]	; (800cf9c <_tx_thread_initialize+0x5c>)
 800cf58:	2220      	movs	r2, #32
 800cf5a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800cf5c:	2280      	movs	r2, #128	; 0x80
 800cf5e:	2100      	movs	r1, #0
 800cf60:	480f      	ldr	r0, [pc, #60]	; (800cfa0 <_tx_thread_initialize+0x60>)
 800cf62:	f001 feab 	bl	800ecbc <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800cf66:	4b0f      	ldr	r3, [pc, #60]	; (800cfa4 <_tx_thread_initialize+0x64>)
 800cf68:	2200      	movs	r2, #0
 800cf6a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800cf6c:	4b0e      	ldr	r3, [pc, #56]	; (800cfa8 <_tx_thread_initialize+0x68>)
 800cf6e:	2200      	movs	r2, #0
 800cf70:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800cf72:	4b0e      	ldr	r3, [pc, #56]	; (800cfac <_tx_thread_initialize+0x6c>)
 800cf74:	2200      	movs	r2, #0
 800cf76:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800cf78:	4b0d      	ldr	r3, [pc, #52]	; (800cfb0 <_tx_thread_initialize+0x70>)
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800cf7e:	4b0d      	ldr	r3, [pc, #52]	; (800cfb4 <_tx_thread_initialize+0x74>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800cf86:	4a0b      	ldr	r2, [pc, #44]	; (800cfb4 <_tx_thread_initialize+0x74>)
 800cf88:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800cf8a:	bf00      	nop
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	20014884 	.word	0x20014884
 800cf94:	20014888 	.word	0x20014888
 800cf98:	20014894 	.word	0x20014894
 800cf9c:	20014898 	.word	0x20014898
 800cfa0:	2001489c 	.word	0x2001489c
 800cfa4:	2001488c 	.word	0x2001488c
 800cfa8:	20014890 	.word	0x20014890
 800cfac:	2001491c 	.word	0x2001491c
 800cfb0:	20014920 	.word	0x20014920
 800cfb4:	20014924 	.word	0x20014924

0800cfb8 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b08c      	sub	sp, #48	; 0x30
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cfce:	68ba      	ldr	r2, [r7, #8]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d004      	beq.n	800cfde <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d001      	beq.n	800cfde <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 800cfda:	2300      	movs	r3, #0
 800cfdc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cfde:	f3ef 8310 	mrs	r3, PRIMASK
 800cfe2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800cfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800cfe6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cfe8:	b672      	cpsid	i
    return(int_posture);
 800cfea:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800cfec:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cff4:	68ba      	ldr	r2, [r7, #8]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d902      	bls.n	800d000 <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 800cffa:	2318      	movs	r3, #24
 800cffc:	62bb      	str	r3, [r7, #40]	; 0x28
 800cffe:	e03e      	b.n	800d07e <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	68ba      	ldr	r2, [r7, #8]
 800d00e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d203      	bcs.n	800d026 <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	68ba      	ldr	r2, [r7, #8]
 800d022:	63da      	str	r2, [r3, #60]	; 0x3c
 800d024:	e004      	b.n	800d030 <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d034:	4b17      	ldr	r3, [pc, #92]	; (800d094 <_tx_thread_preemption_change+0xdc>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d920      	bls.n	800d07e <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 800d03c:	4b15      	ldr	r3, [pc, #84]	; (800d094 <_tx_thread_preemption_change+0xdc>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	68ba      	ldr	r2, [r7, #8]
 800d042:	429a      	cmp	r2, r3
 800d044:	d91b      	bls.n	800d07e <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 800d046:	4b14      	ldr	r3, [pc, #80]	; (800d098 <_tx_thread_preemption_change+0xe0>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	68fa      	ldr	r2, [r7, #12]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d116      	bne.n	800d07e <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d050:	4b10      	ldr	r3, [pc, #64]	; (800d094 <_tx_thread_preemption_change+0xdc>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a11      	ldr	r2, [pc, #68]	; (800d09c <_tx_thread_preemption_change+0xe4>)
 800d056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d05a:	4a0f      	ldr	r2, [pc, #60]	; (800d098 <_tx_thread_preemption_change+0xe0>)
 800d05c:	6013      	str	r3, [r2, #0]
 800d05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d060:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f383 8810 	msr	PRIMASK, r3
}
 800d068:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 800d06a:	f000 f9ab 	bl	800d3c4 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d06e:	f3ef 8310 	mrs	r3, PRIMASK
 800d072:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d074:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d076:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d078:	b672      	cpsid	i
    return(int_posture);
 800d07a:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800d07c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d080:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	f383 8810 	msr	PRIMASK, r3
}
 800d088:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800d08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3730      	adds	r7, #48	; 0x30
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	20014898 	.word	0x20014898
 800d098:	20014888 	.word	0x20014888
 800d09c:	2001489c 	.word	0x2001489c

0800d0a0 <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b08b      	sub	sp, #44	; 0x2c
 800d0a4:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d0a6:	4b2b      	ldr	r3, [pc, #172]	; (800d154 <_tx_thread_relinquish+0xb4>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0ac:	f3ef 8310 	mrs	r3, PRIMASK
 800d0b0:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d0b2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d0b4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d0b6:	b672      	cpsid	i
    return(int_posture);
 800d0b8:	697b      	ldr	r3, [r7, #20]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 800d0ba:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0be:	69db      	ldr	r3, [r3, #28]
 800d0c0:	4a25      	ldr	r2, [pc, #148]	; (800d158 <_tx_thread_relinquish+0xb8>)
 800d0c2:	6013      	str	r3, [r2, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 800d0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c8:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0cc:	6a1b      	ldr	r3, [r3, #32]
 800d0ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d009      	beq.n	800d0e8 <_tx_thread_relinquish+0x48>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	6a1a      	ldr	r2, [r3, #32]
 800d0d8:	4920      	ldr	r1, [pc, #128]	; (800d15c <_tx_thread_relinquish+0xbc>)
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e2:	6a1b      	ldr	r3, [r3, #32]
 800d0e4:	4a1e      	ldr	r2, [pc, #120]	; (800d160 <_tx_thread_relinquish+0xc0>)
 800d0e6:	6013      	str	r3, [r2, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 800d0e8:	4b1e      	ldr	r3, [pc, #120]	; (800d164 <_tx_thread_relinquish+0xc4>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	69fa      	ldr	r2, [r7, #28]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d906      	bls.n	800d100 <_tx_thread_relinquish+0x60>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d0f2:	4b1c      	ldr	r3, [pc, #112]	; (800d164 <_tx_thread_relinquish+0xc4>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4a19      	ldr	r2, [pc, #100]	; (800d15c <_tx_thread_relinquish+0xbc>)
 800d0f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0fc:	4a18      	ldr	r2, [pc, #96]	; (800d160 <_tx_thread_relinquish+0xc0>)
 800d0fe:	6013      	str	r3, [r2, #0]
 800d100:	6a3b      	ldr	r3, [r7, #32]
 800d102:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	f383 8810 	msr	PRIMASK, r3
}
 800d10a:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 800d10c:	4b14      	ldr	r3, [pc, #80]	; (800d160 <_tx_thread_relinquish+0xc0>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d112:	429a      	cmp	r2, r3
 800d114:	d017      	beq.n	800d146 <_tx_thread_relinquish+0xa6>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d116:	4b14      	ldr	r3, [pc, #80]	; (800d168 <_tx_thread_relinquish+0xc8>)
 800d118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d11c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d11e:	f3ef 8305 	mrs	r3, IPSR
 800d122:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d124:	68fb      	ldr	r3, [r7, #12]
    if (_tx_ipsr_get() == 0)
 800d126:	2b00      	cmp	r3, #0
 800d128:	d10c      	bne.n	800d144 <_tx_thread_relinquish+0xa4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d12a:	f3ef 8310 	mrs	r3, PRIMASK
 800d12e:	60bb      	str	r3, [r7, #8]
    return(posture);
 800d130:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_interrupt_posture();
 800d132:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d134:	b662      	cpsie	i
}
 800d136:	bf00      	nop
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	f383 8810 	msr	PRIMASK, r3
}
 800d142:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800d144:	bf00      	nop

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 800d146:	bf00      	nop
 800d148:	372c      	adds	r7, #44	; 0x2c
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop
 800d154:	20014884 	.word	0x20014884
 800d158:	20014e88 	.word	0x20014e88
 800d15c:	2001489c 	.word	0x2001489c
 800d160:	20014888 	.word	0x20014888
 800d164:	20014898 	.word	0x20014898
 800d168:	e000ed04 	.word	0xe000ed04

0800d16c <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b08c      	sub	sp, #48	; 0x30
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 800d174:	2300      	movs	r3, #0
 800d176:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d178:	f3ef 8310 	mrs	r3, PRIMASK
 800d17c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d17e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d180:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d182:	b672      	cpsid	i
    return(int_posture);
 800d184:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d186:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d18c:	2b03      	cmp	r3, #3
 800d18e:	d12f      	bne.n	800d1f0 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d190:	f3ef 8305 	mrs	r3, IPSR
 800d194:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d196:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800d198:	4b21      	ldr	r3, [pc, #132]	; (800d220 <_tx_thread_resume+0xb4>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4313      	orrs	r3, r2
 800d19e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d1a2:	d30d      	bcc.n	800d1c0 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800d1a4:	4b1f      	ldr	r3, [pc, #124]	; (800d224 <_tx_thread_resume+0xb8>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800d1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d009      	beq.n	800d1c4 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800d1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b4:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800d1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1bc:	63da      	str	r2, [r3, #60]	; 0x3c
 800d1be:	e001      	b.n	800d1c4 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800d1c4:	4b18      	ldr	r3, [pc, #96]	; (800d228 <_tx_thread_resume+0xbc>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	4a17      	ldr	r2, [pc, #92]	; (800d228 <_tx_thread_resume+0xbc>)
 800d1cc:	6013      	str	r3, [r2, #0]
 800d1ce:	6a3b      	ldr	r3, [r7, #32]
 800d1d0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	f383 8810 	msr	PRIMASK, r3
}
 800d1d8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 f92c 	bl	800d438 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800d1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d002      	beq.n	800d1ec <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800d1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ea:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	e012      	b.n	800d216 <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d105      	bne.n	800d204 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 800d1fe:	2319      	movs	r3, #25
 800d200:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d202:	e001      	b.n	800d208 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 800d204:	2312      	movs	r3, #18
 800d206:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d208:	6a3b      	ldr	r3, [r7, #32]
 800d20a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f383 8810 	msr	PRIMASK, r3
}
 800d212:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 800d214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d216:	4618      	mov	r0, r3
 800d218:	3730      	adds	r7, #48	; 0x30
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	20000088 	.word	0x20000088
 800d224:	20014888 	.word	0x20014888
 800d228:	2001491c 	.word	0x2001491c

0800d22c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b088      	sub	sp, #32
 800d230:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d232:	4b21      	ldr	r3, [pc, #132]	; (800d2b8 <_tx_thread_shell_entry+0x8c>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d23c:	69fa      	ldr	r2, [r7, #28]
 800d23e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d240:	4610      	mov	r0, r2
 800d242:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800d244:	4b1d      	ldr	r3, [pc, #116]	; (800d2bc <_tx_thread_shell_entry+0x90>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d003      	beq.n	800d254 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800d24c:	4b1b      	ldr	r3, [pc, #108]	; (800d2bc <_tx_thread_shell_entry+0x90>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	69f8      	ldr	r0, [r7, #28]
 800d252:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d254:	f3ef 8310 	mrs	r3, PRIMASK
 800d258:	607b      	str	r3, [r7, #4]
    return(posture);
 800d25a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800d25c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d25e:	b672      	cpsid	i
    return(int_posture);
 800d260:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800d262:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	2201      	movs	r2, #1
 800d268:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	2201      	movs	r2, #1
 800d26e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	2200      	movs	r2, #0
 800d274:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d276:	4b12      	ldr	r3, [pc, #72]	; (800d2c0 <_tx_thread_shell_entry+0x94>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	3301      	adds	r3, #1
 800d27c:	4a10      	ldr	r2, [pc, #64]	; (800d2c0 <_tx_thread_shell_entry+0x94>)
 800d27e:	6013      	str	r3, [r2, #0]
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	f383 8810 	msr	PRIMASK, r3
}
 800d28a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800d28c:	f3ef 8314 	mrs	r3, CONTROL
 800d290:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800d292:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800d294:	617b      	str	r3, [r7, #20]
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	f023 0304 	bic.w	r3, r3, #4
 800d29c:	617b      	str	r3, [r7, #20]
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	f383 8814 	msr	CONTROL, r3
}
 800d2a8:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800d2aa:	69f8      	ldr	r0, [r7, #28]
 800d2ac:	f000 f9c4 	bl	800d638 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800d2b0:	bf00      	nop
 800d2b2:	3720      	adds	r7, #32
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	20014884 	.word	0x20014884
 800d2bc:	20014920 	.word	0x20014920
 800d2c0:	2001491c 	.word	0x2001491c

0800d2c4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b08e      	sub	sp, #56	; 0x38
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d2cc:	f3ef 8310 	mrs	r3, PRIMASK
 800d2d0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d2d4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d2d6:	b672      	cpsid	i
    return(int_posture);
 800d2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d2da:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d2dc:	4b35      	ldr	r3, [pc, #212]	; (800d3b4 <_tx_thread_sleep+0xf0>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800d2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d108      	bne.n	800d2fa <_tx_thread_sleep+0x36>
 800d2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d2ec:	6a3b      	ldr	r3, [r7, #32]
 800d2ee:	f383 8810 	msr	PRIMASK, r3
}
 800d2f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d2f4:	2313      	movs	r3, #19
 800d2f6:	637b      	str	r3, [r7, #52]	; 0x34
 800d2f8:	e056      	b.n	800d3a8 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d2fa:	f3ef 8305 	mrs	r3, IPSR
 800d2fe:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800d300:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d302:	4b2d      	ldr	r3, [pc, #180]	; (800d3b8 <_tx_thread_sleep+0xf4>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4313      	orrs	r3, r2
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d008      	beq.n	800d31e <_tx_thread_sleep+0x5a>
 800d30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	f383 8810 	msr	PRIMASK, r3
}
 800d316:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d318:	2313      	movs	r3, #19
 800d31a:	637b      	str	r3, [r7, #52]	; 0x34
 800d31c:	e044      	b.n	800d3a8 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800d31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d320:	4a26      	ldr	r2, [pc, #152]	; (800d3bc <_tx_thread_sleep+0xf8>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d108      	bne.n	800d338 <_tx_thread_sleep+0x74>
 800d326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d328:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	f383 8810 	msr	PRIMASK, r3
}
 800d330:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800d332:	2313      	movs	r3, #19
 800d334:	637b      	str	r3, [r7, #52]	; 0x34
 800d336:	e037      	b.n	800d3a8 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d108      	bne.n	800d350 <_tx_thread_sleep+0x8c>
 800d33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d340:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	f383 8810 	msr	PRIMASK, r3
}
 800d348:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800d34a:	2300      	movs	r3, #0
 800d34c:	637b      	str	r3, [r7, #52]	; 0x34
 800d34e:	e02b      	b.n	800d3a8 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800d350:	4b1b      	ldr	r3, [pc, #108]	; (800d3c0 <_tx_thread_sleep+0xfc>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d008      	beq.n	800d36a <_tx_thread_sleep+0xa6>
 800d358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f383 8810 	msr	PRIMASK, r3
}
 800d362:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800d364:	2313      	movs	r3, #19
 800d366:	637b      	str	r3, [r7, #52]	; 0x34
 800d368:	e01e      	b.n	800d3a8 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800d36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36c:	2204      	movs	r2, #4
 800d36e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d372:	2201      	movs	r2, #1
 800d374:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800d376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d378:	2200      	movs	r2, #0
 800d37a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800d37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d384:	4b0e      	ldr	r3, [pc, #56]	; (800d3c0 <_tx_thread_sleep+0xfc>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	3301      	adds	r3, #1
 800d38a:	4a0d      	ldr	r2, [pc, #52]	; (800d3c0 <_tx_thread_sleep+0xfc>)
 800d38c:	6013      	str	r3, [r2, #0]
 800d38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d390:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	f383 8810 	msr	PRIMASK, r3
}
 800d398:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800d39a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d39c:	f000 f94c 	bl	800d638 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800d3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3a6:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800d3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3738      	adds	r7, #56	; 0x38
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	20014884 	.word	0x20014884
 800d3b8:	20000088 	.word	0x20000088
 800d3bc:	200149cc 	.word	0x200149cc
 800d3c0:	2001491c 	.word	0x2001491c

0800d3c4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b089      	sub	sp, #36	; 0x24
 800d3c8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d3ca:	4b17      	ldr	r3, [pc, #92]	; (800d428 <_tx_thread_system_preempt_check+0x64>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d121      	bne.n	800d41a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800d3d6:	4b15      	ldr	r3, [pc, #84]	; (800d42c <_tx_thread_system_preempt_check+0x68>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800d3dc:	4b14      	ldr	r3, [pc, #80]	; (800d430 <_tx_thread_system_preempt_check+0x6c>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800d3e2:	69ba      	ldr	r2, [r7, #24]
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d017      	beq.n	800d41a <_tx_thread_system_preempt_check+0x56>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d3ea:	4b12      	ldr	r3, [pc, #72]	; (800d434 <_tx_thread_system_preempt_check+0x70>)
 800d3ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3f0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d3f2:	f3ef 8305 	mrs	r3, IPSR
 800d3f6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d3f8:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d10c      	bne.n	800d418 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d3fe:	f3ef 8310 	mrs	r3, PRIMASK
 800d402:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d404:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_interrupt_posture();
 800d406:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d408:	b662      	cpsie	i
}
 800d40a:	bf00      	nop
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f383 8810 	msr	PRIMASK, r3
}
 800d416:	bf00      	nop
}
 800d418:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800d41a:	bf00      	nop
 800d41c:	3724      	adds	r7, #36	; 0x24
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop
 800d428:	2001491c 	.word	0x2001491c
 800d42c:	20014884 	.word	0x20014884
 800d430:	20014888 	.word	0x20014888
 800d434:	e000ed04 	.word	0xe000ed04

0800d438 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b096      	sub	sp, #88	; 0x58
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d440:	f3ef 8310 	mrs	r3, PRIMASK
 800d444:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800d446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800d448:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800d44a:	b672      	cpsid	i
    return(int_posture);
 800d44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800d44e:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d454:	2b00      	cmp	r3, #0
 800d456:	d005      	beq.n	800d464 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	334c      	adds	r3, #76	; 0x4c
 800d45c:	4618      	mov	r0, r3
 800d45e:	f000 fbf5 	bl	800dc4c <_tx_timer_system_deactivate>
 800d462:	e002      	b.n	800d46a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d46a:	4b6c      	ldr	r3, [pc, #432]	; (800d61c <_tx_thread_system_resume+0x1e4>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	3b01      	subs	r3, #1
 800d470:	4a6a      	ldr	r2, [pc, #424]	; (800d61c <_tx_thread_system_resume+0x1e4>)
 800d472:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f040 8083 	bne.w	800d584 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d482:	2b00      	cmp	r3, #0
 800d484:	f000 8097 	beq.w	800d5b6 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d172      	bne.n	800d576 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2200      	movs	r2, #0
 800d494:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d49a:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800d49c:	4a60      	ldr	r2, [pc, #384]	; (800d620 <_tx_thread_system_resume+0x1e8>)
 800d49e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4a4:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800d4a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d154      	bne.n	800d556 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800d4ac:	495c      	ldr	r1, [pc, #368]	; (800d620 <_tx_thread_system_resume+0x1e8>)
 800d4ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d4ca:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800d4cc:	4b55      	ldr	r3, [pc, #340]	; (800d624 <_tx_thread_system_resume+0x1ec>)
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	4a53      	ldr	r2, [pc, #332]	; (800d624 <_tx_thread_system_resume+0x1ec>)
 800d4d6:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800d4d8:	4b53      	ldr	r3, [pc, #332]	; (800d628 <_tx_thread_system_resume+0x1f0>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d269      	bcs.n	800d5b6 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800d4e2:	4a51      	ldr	r2, [pc, #324]	; (800d628 <_tx_thread_system_resume+0x1f0>)
 800d4e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4e6:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800d4e8:	4b50      	ldr	r3, [pc, #320]	; (800d62c <_tx_thread_system_resume+0x1f4>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800d4ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d103      	bne.n	800d4fc <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d4f4:	4a4d      	ldr	r2, [pc, #308]	; (800d62c <_tx_thread_system_resume+0x1f4>)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6013      	str	r3, [r2, #0]
 800d4fa:	e05c      	b.n	800d5b6 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800d4fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d500:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d502:	429a      	cmp	r2, r3
 800d504:	d257      	bcs.n	800d5b6 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800d506:	4a49      	ldr	r2, [pc, #292]	; (800d62c <_tx_thread_system_resume+0x1f4>)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6013      	str	r3, [r2, #0]
 800d50c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d50e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d512:	f383 8810 	msr	PRIMASK, r3
}
 800d516:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d518:	4b40      	ldr	r3, [pc, #256]	; (800d61c <_tx_thread_system_resume+0x1e4>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800d51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d520:	2b00      	cmp	r3, #0
 800d522:	d174      	bne.n	800d60e <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d524:	4b42      	ldr	r3, [pc, #264]	; (800d630 <_tx_thread_system_resume+0x1f8>)
 800d526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d52a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d52c:	f3ef 8305 	mrs	r3, IPSR
 800d530:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800d532:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10c      	bne.n	800d552 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d538:	f3ef 8310 	mrs	r3, PRIMASK
 800d53c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800d53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800d540:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d542:	b662      	cpsie	i
}
 800d544:	bf00      	nop
 800d546:	6a3b      	ldr	r3, [r7, #32]
 800d548:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d54a:	69fb      	ldr	r3, [r7, #28]
 800d54c:	f383 8810 	msr	PRIMASK, r3
}
 800d550:	bf00      	nop
}
 800d552:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800d554:	e05b      	b.n	800d60e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800d556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d55a:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800d55c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800d562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d56c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d572:	621a      	str	r2, [r3, #32]
 800d574:	e01f      	b.n	800d5b6 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2200      	movs	r2, #0
 800d57a:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2203      	movs	r2, #3
 800d580:	631a      	str	r2, [r3, #48]	; 0x30
 800d582:	e018      	b.n	800d5b6 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d014      	beq.n	800d5b6 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d590:	2b02      	cmp	r3, #2
 800d592:	d010      	beq.n	800d5b6 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d106      	bne.n	800d5aa <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	631a      	str	r2, [r3, #48]	; 0x30
 800d5a8:	e005      	b.n	800d5b6 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2203      	movs	r2, #3
 800d5b4:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d5b6:	4b1f      	ldr	r3, [pc, #124]	; (800d634 <_tx_thread_system_resume+0x1fc>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5be:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	f383 8810 	msr	PRIMASK, r3
}
 800d5c6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d5c8:	4b18      	ldr	r3, [pc, #96]	; (800d62c <_tx_thread_system_resume+0x1f4>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d020      	beq.n	800d614 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d5d2:	4b12      	ldr	r3, [pc, #72]	; (800d61c <_tx_thread_system_resume+0x1e4>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800d5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d11a      	bne.n	800d614 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d5de:	4b14      	ldr	r3, [pc, #80]	; (800d630 <_tx_thread_system_resume+0x1f8>)
 800d5e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5e4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d5e6:	f3ef 8305 	mrs	r3, IPSR
 800d5ea:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d5ec:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d10f      	bne.n	800d612 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d5f2:	f3ef 8310 	mrs	r3, PRIMASK
 800d5f6:	613b      	str	r3, [r7, #16]
    return(posture);
 800d5f8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800d5fa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d5fc:	b662      	cpsie	i
}
 800d5fe:	bf00      	nop
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	f383 8810 	msr	PRIMASK, r3
}
 800d60a:	bf00      	nop
}
 800d60c:	e001      	b.n	800d612 <_tx_thread_system_resume+0x1da>
                                return;
 800d60e:	bf00      	nop
 800d610:	e000      	b.n	800d614 <_tx_thread_system_resume+0x1dc>
 800d612:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800d614:	3758      	adds	r7, #88	; 0x58
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	2001491c 	.word	0x2001491c
 800d620:	2001489c 	.word	0x2001489c
 800d624:	20014894 	.word	0x20014894
 800d628:	20014898 	.word	0x20014898
 800d62c:	20014888 	.word	0x20014888
 800d630:	e000ed04 	.word	0xe000ed04
 800d634:	20014884 	.word	0x20014884

0800d638 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b09e      	sub	sp, #120	; 0x78
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d640:	4b81      	ldr	r3, [pc, #516]	; (800d848 <_tx_thread_system_suspend+0x210>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d646:	f3ef 8310 	mrs	r3, PRIMASK
 800d64a:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800d64c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800d64e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800d650:	b672      	cpsid	i
    return(int_posture);
 800d652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d654:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d112      	bne.n	800d684 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d662:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800d664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d666:	2b00      	cmp	r3, #0
 800d668:	d008      	beq.n	800d67c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800d66a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d670:	d004      	beq.n	800d67c <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	334c      	adds	r3, #76	; 0x4c
 800d676:	4618      	mov	r0, r3
 800d678:	f000 fa86 	bl	800db88 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	69db      	ldr	r3, [r3, #28]
 800d680:	4a72      	ldr	r2, [pc, #456]	; (800d84c <_tx_thread_system_suspend+0x214>)
 800d682:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d684:	4b72      	ldr	r3, [pc, #456]	; (800d850 <_tx_thread_system_suspend+0x218>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	3b01      	subs	r3, #1
 800d68a:	4a71      	ldr	r2, [pc, #452]	; (800d850 <_tx_thread_system_suspend+0x218>)
 800d68c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d692:	2b01      	cmp	r3, #1
 800d694:	f040 80a6 	bne.w	800d7e4 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2200      	movs	r2, #0
 800d69c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a2:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6a1b      	ldr	r3, [r3, #32]
 800d6a8:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800d6aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d015      	beq.n	800d6de <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b6:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800d6b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6bc:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800d6be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d6c2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800d6c4:	4a63      	ldr	r2, [pc, #396]	; (800d854 <_tx_thread_system_suspend+0x21c>)
 800d6c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d157      	bne.n	800d782 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800d6d2:	4960      	ldr	r1, [pc, #384]	; (800d854 <_tx_thread_system_suspend+0x21c>)
 800d6d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d6d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d6dc:	e051      	b.n	800d782 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800d6de:	4a5d      	ldr	r2, [pc, #372]	; (800d854 <_tx_thread_system_suspend+0x21c>)
 800d6e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d6ec:	fa02 f303 	lsl.w	r3, r2, r3
 800d6f0:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800d6f2:	4b59      	ldr	r3, [pc, #356]	; (800d858 <_tx_thread_system_suspend+0x220>)
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6f8:	43db      	mvns	r3, r3
 800d6fa:	4013      	ands	r3, r2
 800d6fc:	4a56      	ldr	r2, [pc, #344]	; (800d858 <_tx_thread_system_suspend+0x220>)
 800d6fe:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800d700:	2300      	movs	r3, #0
 800d702:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800d704:	4b54      	ldr	r3, [pc, #336]	; (800d858 <_tx_thread_system_suspend+0x220>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800d70a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d12b      	bne.n	800d768 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d710:	4b52      	ldr	r3, [pc, #328]	; (800d85c <_tx_thread_system_suspend+0x224>)
 800d712:	2220      	movs	r2, #32
 800d714:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800d716:	4b52      	ldr	r3, [pc, #328]	; (800d860 <_tx_thread_system_suspend+0x228>)
 800d718:	2200      	movs	r2, #0
 800d71a:	601a      	str	r2, [r3, #0]
 800d71c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d71e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d722:	f383 8810 	msr	PRIMASK, r3
}
 800d726:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d728:	4b49      	ldr	r3, [pc, #292]	; (800d850 <_tx_thread_system_suspend+0x218>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800d72e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d730:	2b00      	cmp	r3, #0
 800d732:	f040 8081 	bne.w	800d838 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d736:	4b4b      	ldr	r3, [pc, #300]	; (800d864 <_tx_thread_system_suspend+0x22c>)
 800d738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d73c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d73e:	f3ef 8305 	mrs	r3, IPSR
 800d742:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800d744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800d746:	2b00      	cmp	r3, #0
 800d748:	d10c      	bne.n	800d764 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d74a:	f3ef 8310 	mrs	r3, PRIMASK
 800d74e:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800d750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800d752:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d754:	b662      	cpsie	i
}
 800d756:	bf00      	nop
 800d758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d75e:	f383 8810 	msr	PRIMASK, r3
}
 800d762:	bf00      	nop
}
 800d764:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800d766:	e067      	b.n	800d838 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800d768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d76a:	fa93 f3a3 	rbit	r3, r3
 800d76e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d772:	fab3 f383 	clz	r3, r3
 800d776:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800d778:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d77a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d77c:	4413      	add	r3, r2
 800d77e:	4a37      	ldr	r2, [pc, #220]	; (800d85c <_tx_thread_system_suspend+0x224>)
 800d780:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800d782:	4b37      	ldr	r3, [pc, #220]	; (800d860 <_tx_thread_system_suspend+0x228>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	429a      	cmp	r2, r3
 800d78a:	d12b      	bne.n	800d7e4 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d78c:	4b33      	ldr	r3, [pc, #204]	; (800d85c <_tx_thread_system_suspend+0x224>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a30      	ldr	r2, [pc, #192]	; (800d854 <_tx_thread_system_suspend+0x21c>)
 800d792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d796:	4a32      	ldr	r2, [pc, #200]	; (800d860 <_tx_thread_system_suspend+0x228>)
 800d798:	6013      	str	r3, [r2, #0]
 800d79a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d79c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a0:	f383 8810 	msr	PRIMASK, r3
}
 800d7a4:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d7a6:	4b2a      	ldr	r3, [pc, #168]	; (800d850 <_tx_thread_system_suspend+0x218>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800d7ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d144      	bne.n	800d83c <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d7b2:	4b2c      	ldr	r3, [pc, #176]	; (800d864 <_tx_thread_system_suspend+0x22c>)
 800d7b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7b8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d7ba:	f3ef 8305 	mrs	r3, IPSR
 800d7be:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800d7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d10c      	bne.n	800d7e0 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d7c6:	f3ef 8310 	mrs	r3, PRIMASK
 800d7ca:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800d7ce:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d7d0:	b662      	cpsie	i
}
 800d7d2:	bf00      	nop
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7d8:	6a3b      	ldr	r3, [r7, #32]
 800d7da:	f383 8810 	msr	PRIMASK, r3
}
 800d7de:	bf00      	nop
}
 800d7e0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800d7e2:	e02b      	b.n	800d83c <_tx_thread_system_suspend+0x204>
 800d7e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7e6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	f383 8810 	msr	PRIMASK, r3
}
 800d7ee:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d7f0:	4b1b      	ldr	r3, [pc, #108]	; (800d860 <_tx_thread_system_suspend+0x228>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d022      	beq.n	800d840 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d7fa:	4b15      	ldr	r3, [pc, #84]	; (800d850 <_tx_thread_system_suspend+0x218>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800d800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d802:	2b00      	cmp	r3, #0
 800d804:	d11c      	bne.n	800d840 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d806:	4b17      	ldr	r3, [pc, #92]	; (800d864 <_tx_thread_system_suspend+0x22c>)
 800d808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d80c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d80e:	f3ef 8305 	mrs	r3, IPSR
 800d812:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d814:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800d816:	2b00      	cmp	r3, #0
 800d818:	d10c      	bne.n	800d834 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d81a:	f3ef 8310 	mrs	r3, PRIMASK
 800d81e:	617b      	str	r3, [r7, #20]
    return(posture);
 800d820:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800d822:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d824:	b662      	cpsie	i
}
 800d826:	bf00      	nop
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f383 8810 	msr	PRIMASK, r3
}
 800d832:	bf00      	nop
}
 800d834:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800d836:	e003      	b.n	800d840 <_tx_thread_system_suspend+0x208>
                return;
 800d838:	bf00      	nop
 800d83a:	e002      	b.n	800d842 <_tx_thread_system_suspend+0x20a>
            return;
 800d83c:	bf00      	nop
 800d83e:	e000      	b.n	800d842 <_tx_thread_system_suspend+0x20a>
    return;
 800d840:	bf00      	nop
}
 800d842:	3778      	adds	r7, #120	; 0x78
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}
 800d848:	20014884 	.word	0x20014884
 800d84c:	20014e88 	.word	0x20014e88
 800d850:	2001491c 	.word	0x2001491c
 800d854:	2001489c 	.word	0x2001489c
 800d858:	20014894 	.word	0x20014894
 800d85c:	20014898 	.word	0x20014898
 800d860:	20014888 	.word	0x20014888
 800d864:	e000ed04 	.word	0xe000ed04

0800d868 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800d868:	b480      	push	{r7}
 800d86a:	b087      	sub	sp, #28
 800d86c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d86e:	4b21      	ldr	r3, [pc, #132]	; (800d8f4 <_tx_thread_time_slice+0x8c>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d874:	f3ef 8310 	mrs	r3, PRIMASK
 800d878:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d87a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800d87c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d87e:	b672      	cpsid	i
    return(int_posture);
 800d880:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800d882:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d884:	4b1c      	ldr	r3, [pc, #112]	; (800d8f8 <_tx_thread_time_slice+0x90>)
 800d886:	2200      	movs	r2, #0
 800d888:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d024      	beq.n	800d8da <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d894:	2b00      	cmp	r3, #0
 800d896:	d120      	bne.n	800d8da <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	69da      	ldr	r2, [r3, #28]
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	699b      	ldr	r3, [r3, #24]
 800d8a4:	4a15      	ldr	r2, [pc, #84]	; (800d8fc <_tx_thread_time_slice+0x94>)
 800d8a6:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	6a1b      	ldr	r3, [r3, #32]
 800d8ac:	697a      	ldr	r2, [r7, #20]
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d013      	beq.n	800d8da <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d10d      	bne.n	800d8da <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c2:	697a      	ldr	r2, [r7, #20]
 800d8c4:	6a12      	ldr	r2, [r2, #32]
 800d8c6:	490e      	ldr	r1, [pc, #56]	; (800d900 <_tx_thread_time_slice+0x98>)
 800d8c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d8cc:	4b0d      	ldr	r3, [pc, #52]	; (800d904 <_tx_thread_time_slice+0x9c>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a0b      	ldr	r2, [pc, #44]	; (800d900 <_tx_thread_time_slice+0x98>)
 800d8d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8d6:	4a0c      	ldr	r2, [pc, #48]	; (800d908 <_tx_thread_time_slice+0xa0>)
 800d8d8:	6013      	str	r3, [r2, #0]
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f383 8810 	msr	PRIMASK, r3
}
 800d8e4:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800d8e6:	bf00      	nop
 800d8e8:	371c      	adds	r7, #28
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	20014884 	.word	0x20014884
 800d8f8:	2001492c 	.word	0x2001492c
 800d8fc:	20014e88 	.word	0x20014e88
 800d900:	2001489c 	.word	0x2001489c
 800d904:	20014898 	.word	0x20014898
 800d908:	20014888 	.word	0x20014888

0800d90c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b08a      	sub	sp, #40	; 0x28
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d918:	f3ef 8310 	mrs	r3, PRIMASK
 800d91c:	617b      	str	r3, [r7, #20]
    return(posture);
 800d91e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d920:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d922:	b672      	cpsid	i
    return(int_posture);
 800d924:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800d926:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800d928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d92c:	2b04      	cmp	r3, #4
 800d92e:	d10e      	bne.n	800d94e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800d930:	4b13      	ldr	r3, [pc, #76]	; (800d980 <_tx_thread_timeout+0x74>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	3301      	adds	r3, #1
 800d936:	4a12      	ldr	r2, [pc, #72]	; (800d980 <_tx_thread_timeout+0x74>)
 800d938:	6013      	str	r3, [r2, #0]
 800d93a:	6a3b      	ldr	r3, [r7, #32]
 800d93c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f383 8810 	msr	PRIMASK, r3
}
 800d944:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d948:	f7ff fd76 	bl	800d438 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800d94c:	e013      	b.n	800d976 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800d94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d952:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d95a:	61bb      	str	r3, [r7, #24]
 800d95c:	6a3b      	ldr	r3, [r7, #32]
 800d95e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	f383 8810 	msr	PRIMASK, r3
}
 800d966:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d003      	beq.n	800d976 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	69b9      	ldr	r1, [r7, #24]
 800d972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d974:	4798      	blx	r3
}
 800d976:	bf00      	nop
 800d978:	3728      	adds	r7, #40	; 0x28
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	2001491c 	.word	0x2001491c

0800d984 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b08a      	sub	sp, #40	; 0x28
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]
 800d990:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800d992:	222c      	movs	r2, #44	; 0x2c
 800d994:	2100      	movs	r1, #0
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	f001 f990 	bl	800ecbc <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	68ba      	ldr	r2, [r7, #8]
 800d9a0:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9a6:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9ac:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	683a      	ldr	r2, [r7, #0]
 800d9b8:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d9ba:	f3ef 8310 	mrs	r3, PRIMASK
 800d9be:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d9c0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d9c2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d9c4:	b672      	cpsid	i
    return(int_posture);
 800d9c6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800d9c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	4a1c      	ldr	r2, [pc, #112]	; (800da40 <_tx_timer_create+0xbc>)
 800d9ce:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800d9d0:	4b1c      	ldr	r3, [pc, #112]	; (800da44 <_tx_timer_create+0xc0>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d109      	bne.n	800d9ec <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800d9d8:	4a1b      	ldr	r2, [pc, #108]	; (800da48 <_tx_timer_create+0xc4>)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	68fa      	ldr	r2, [r7, #12]
 800d9e2:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	68fa      	ldr	r2, [r7, #12]
 800d9e8:	629a      	str	r2, [r3, #40]	; 0x28
 800d9ea:	e011      	b.n	800da10 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800d9ec:	4b16      	ldr	r3, [pc, #88]	; (800da48 <_tx_timer_create+0xc4>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800d9f2:	6a3b      	ldr	r3, [r7, #32]
 800d9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9f6:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800d9f8:	6a3b      	ldr	r3, [r7, #32]
 800d9fa:	68fa      	ldr	r2, [r7, #12]
 800d9fc:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	68fa      	ldr	r2, [r7, #12]
 800da02:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	69fa      	ldr	r2, [r7, #28]
 800da08:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	6a3a      	ldr	r2, [r7, #32]
 800da0e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800da10:	4b0c      	ldr	r3, [pc, #48]	; (800da44 <_tx_timer_create+0xc0>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	3301      	adds	r3, #1
 800da16:	4a0b      	ldr	r2, [pc, #44]	; (800da44 <_tx_timer_create+0xc0>)
 800da18:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800da1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d104      	bne.n	800da2a <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	3308      	adds	r3, #8
 800da24:	4618      	mov	r0, r3
 800da26:	f000 f8af 	bl	800db88 <_tx_timer_system_activate>
 800da2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	f383 8810 	msr	PRIMASK, r3
}
 800da34:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800da36:	2300      	movs	r3, #0
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3728      	adds	r7, #40	; 0x28
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	4154494d 	.word	0x4154494d
 800da44:	200149c4 	.word	0x200149c4
 800da48:	200149c0 	.word	0x200149c0

0800da4c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da52:	f3ef 8310 	mrs	r3, PRIMASK
 800da56:	607b      	str	r3, [r7, #4]
    return(posture);
 800da58:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800da5a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800da5c:	b672      	cpsid	i
    return(int_posture);
 800da5e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800da60:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800da62:	4b09      	ldr	r3, [pc, #36]	; (800da88 <_tx_timer_expiration_process+0x3c>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	3301      	adds	r3, #1
 800da68:	4a07      	ldr	r2, [pc, #28]	; (800da88 <_tx_timer_expiration_process+0x3c>)
 800da6a:	6013      	str	r3, [r2, #0]
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	f383 8810 	msr	PRIMASK, r3
}
 800da76:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800da78:	4804      	ldr	r0, [pc, #16]	; (800da8c <_tx_timer_expiration_process+0x40>)
 800da7a:	f7ff fcdd 	bl	800d438 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800da7e:	bf00      	nop
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	2001491c 	.word	0x2001491c
 800da8c:	200149cc 	.word	0x200149cc

0800da90 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800da90:	b590      	push	{r4, r7, lr}
 800da92:	b089      	sub	sp, #36	; 0x24
 800da94:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800da96:	4b28      	ldr	r3, [pc, #160]	; (800db38 <_tx_timer_initialize+0xa8>)
 800da98:	2200      	movs	r2, #0
 800da9a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800da9c:	4b27      	ldr	r3, [pc, #156]	; (800db3c <_tx_timer_initialize+0xac>)
 800da9e:	2200      	movs	r2, #0
 800daa0:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800daa2:	4b27      	ldr	r3, [pc, #156]	; (800db40 <_tx_timer_initialize+0xb0>)
 800daa4:	2200      	movs	r2, #0
 800daa6:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800daa8:	4b26      	ldr	r3, [pc, #152]	; (800db44 <_tx_timer_initialize+0xb4>)
 800daaa:	2200      	movs	r2, #0
 800daac:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800daae:	4b26      	ldr	r3, [pc, #152]	; (800db48 <_tx_timer_initialize+0xb8>)
 800dab0:	2200      	movs	r2, #0
 800dab2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800dab4:	2280      	movs	r2, #128	; 0x80
 800dab6:	2100      	movs	r1, #0
 800dab8:	4824      	ldr	r0, [pc, #144]	; (800db4c <_tx_timer_initialize+0xbc>)
 800daba:	f001 f8ff 	bl	800ecbc <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800dabe:	4b24      	ldr	r3, [pc, #144]	; (800db50 <_tx_timer_initialize+0xc0>)
 800dac0:	4a22      	ldr	r2, [pc, #136]	; (800db4c <_tx_timer_initialize+0xbc>)
 800dac2:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800dac4:	4b23      	ldr	r3, [pc, #140]	; (800db54 <_tx_timer_initialize+0xc4>)
 800dac6:	4a21      	ldr	r2, [pc, #132]	; (800db4c <_tx_timer_initialize+0xbc>)
 800dac8:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800daca:	4b23      	ldr	r3, [pc, #140]	; (800db58 <_tx_timer_initialize+0xc8>)
 800dacc:	4a23      	ldr	r2, [pc, #140]	; (800db5c <_tx_timer_initialize+0xcc>)
 800dace:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800dad0:	4b21      	ldr	r3, [pc, #132]	; (800db58 <_tx_timer_initialize+0xc8>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	3304      	adds	r3, #4
 800dad6:	4a20      	ldr	r2, [pc, #128]	; (800db58 <_tx_timer_initialize+0xc8>)
 800dad8:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800dada:	4b21      	ldr	r3, [pc, #132]	; (800db60 <_tx_timer_initialize+0xd0>)
 800dadc:	4a21      	ldr	r2, [pc, #132]	; (800db64 <_tx_timer_initialize+0xd4>)
 800dade:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800dae0:	4b21      	ldr	r3, [pc, #132]	; (800db68 <_tx_timer_initialize+0xd8>)
 800dae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dae6:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800dae8:	4b20      	ldr	r3, [pc, #128]	; (800db6c <_tx_timer_initialize+0xdc>)
 800daea:	2200      	movs	r2, #0
 800daec:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800daee:	4b1c      	ldr	r3, [pc, #112]	; (800db60 <_tx_timer_initialize+0xd0>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4a1d      	ldr	r2, [pc, #116]	; (800db68 <_tx_timer_initialize+0xd8>)
 800daf4:	6812      	ldr	r2, [r2, #0]
 800daf6:	491d      	ldr	r1, [pc, #116]	; (800db6c <_tx_timer_initialize+0xdc>)
 800daf8:	6809      	ldr	r1, [r1, #0]
 800dafa:	481c      	ldr	r0, [pc, #112]	; (800db6c <_tx_timer_initialize+0xdc>)
 800dafc:	6800      	ldr	r0, [r0, #0]
 800dafe:	2400      	movs	r4, #0
 800db00:	9405      	str	r4, [sp, #20]
 800db02:	2400      	movs	r4, #0
 800db04:	9404      	str	r4, [sp, #16]
 800db06:	9003      	str	r0, [sp, #12]
 800db08:	9102      	str	r1, [sp, #8]
 800db0a:	9201      	str	r2, [sp, #4]
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	4b18      	ldr	r3, [pc, #96]	; (800db70 <_tx_timer_initialize+0xe0>)
 800db10:	4a18      	ldr	r2, [pc, #96]	; (800db74 <_tx_timer_initialize+0xe4>)
 800db12:	4919      	ldr	r1, [pc, #100]	; (800db78 <_tx_timer_initialize+0xe8>)
 800db14:	4819      	ldr	r0, [pc, #100]	; (800db7c <_tx_timer_initialize+0xec>)
 800db16:	f7ff f8ff 	bl	800cd18 <_tx_thread_create>
 800db1a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d1e5      	bne.n	800daee <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800db22:	4b17      	ldr	r3, [pc, #92]	; (800db80 <_tx_timer_initialize+0xf0>)
 800db24:	2200      	movs	r2, #0
 800db26:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800db28:	4b16      	ldr	r3, [pc, #88]	; (800db84 <_tx_timer_initialize+0xf4>)
 800db2a:	2200      	movs	r2, #0
 800db2c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800db2e:	bf00      	nop
 800db30:	370c      	adds	r7, #12
 800db32:	46bd      	mov	sp, r7
 800db34:	bd90      	pop	{r4, r7, pc}
 800db36:	bf00      	nop
 800db38:	20014928 	.word	0x20014928
 800db3c:	20014e88 	.word	0x20014e88
 800db40:	2001492c 	.word	0x2001492c
 800db44:	200149bc 	.word	0x200149bc
 800db48:	200149c8 	.word	0x200149c8
 800db4c:	20014930 	.word	0x20014930
 800db50:	200149b0 	.word	0x200149b0
 800db54:	200149b8 	.word	0x200149b8
 800db58:	200149b4 	.word	0x200149b4
 800db5c:	200149ac 	.word	0x200149ac
 800db60:	20014a7c 	.word	0x20014a7c
 800db64:	20014a88 	.word	0x20014a88
 800db68:	20014a80 	.word	0x20014a80
 800db6c:	20014a84 	.word	0x20014a84
 800db70:	4154494d 	.word	0x4154494d
 800db74:	0800dcbd 	.word	0x0800dcbd
 800db78:	0800f968 	.word	0x0800f968
 800db7c:	200149cc 	.word	0x200149cc
 800db80:	200149c0 	.word	0x200149c0
 800db84:	200149c4 	.word	0x200149c4

0800db88 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800db88:	b480      	push	{r7}
 800db8a:	b089      	sub	sp, #36	; 0x24
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d04a      	beq.n	800dc32 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dba2:	d046      	beq.n	800dc32 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	699b      	ldr	r3, [r3, #24]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d142      	bne.n	800dc32 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	2b20      	cmp	r3, #32
 800dbb0:	d902      	bls.n	800dbb8 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800dbb2:	231f      	movs	r3, #31
 800dbb4:	61bb      	str	r3, [r7, #24]
 800dbb6:	e002      	b.n	800dbbe <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800dbbe:	4b20      	ldr	r3, [pc, #128]	; (800dc40 <_tx_timer_system_activate+0xb8>)
 800dbc0:	681a      	ldr	r2, [r3, #0]
 800dbc2:	69bb      	ldr	r3, [r7, #24]
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	4413      	add	r3, r2
 800dbc8:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800dbca:	4b1e      	ldr	r3, [pc, #120]	; (800dc44 <_tx_timer_system_activate+0xbc>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	69fa      	ldr	r2, [r7, #28]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d30b      	bcc.n	800dbec <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800dbd4:	4b1b      	ldr	r3, [pc, #108]	; (800dc44 <_tx_timer_system_activate+0xbc>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	69fa      	ldr	r2, [r7, #28]
 800dbda:	1ad3      	subs	r3, r2, r3
 800dbdc:	109b      	asrs	r3, r3, #2
 800dbde:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800dbe0:	4b19      	ldr	r3, [pc, #100]	; (800dc48 <_tx_timer_system_activate+0xc0>)
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	009b      	lsls	r3, r3, #2
 800dbe8:	4413      	add	r3, r2
 800dbea:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d109      	bne.n	800dc08 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	e011      	b.n	800dc2c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	695b      	ldr	r3, [r3, #20]
 800dc12:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	687a      	ldr	r2, [r7, #4]
 800dc18:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	68fa      	ldr	r2, [r7, #12]
 800dc24:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	68ba      	ldr	r2, [r7, #8]
 800dc2a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	69fa      	ldr	r2, [r7, #28]
 800dc30:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800dc32:	bf00      	nop
 800dc34:	3724      	adds	r7, #36	; 0x24
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
 800dc3e:	bf00      	nop
 800dc40:	200149b8 	.word	0x200149b8
 800dc44:	200149b4 	.word	0x200149b4
 800dc48:	200149b0 	.word	0x200149b0

0800dc4c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b087      	sub	sp, #28
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	699b      	ldr	r3, [r3, #24]
 800dc58:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d026      	beq.n	800dcae <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d108      	bne.n	800dc80 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	687a      	ldr	r2, [r7, #4]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d117      	bne.n	800dca8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	601a      	str	r2, [r3, #0]
 800dc7e:	e013      	b.n	800dca8 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	695b      	ldr	r3, [r3, #20]
 800dc84:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	68fa      	ldr	r2, [r7, #12]
 800dc8a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	693a      	ldr	r2, [r7, #16]
 800dc90:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d105      	bne.n	800dca8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	697a      	ldr	r2, [r7, #20]
 800dca0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	693a      	ldr	r2, [r7, #16]
 800dca6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	619a      	str	r2, [r3, #24]
    }
}
 800dcae:	bf00      	nop
 800dcb0:	371c      	adds	r7, #28
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr
	...

0800dcbc <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b098      	sub	sp, #96	; 0x60
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	4a73      	ldr	r2, [pc, #460]	; (800de98 <_tx_timer_thread_entry+0x1dc>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	f040 80de 	bne.w	800de8e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dcd2:	f3ef 8310 	mrs	r3, PRIMASK
 800dcd6:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800dcd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800dcda:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800dcdc:	b672      	cpsid	i
    return(int_posture);
 800dcde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800dce0:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800dce2:	4b6e      	ldr	r3, [pc, #440]	; (800de9c <_tx_timer_thread_entry+0x1e0>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d003      	beq.n	800dcf8 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f107 020c 	add.w	r2, r7, #12
 800dcf6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800dcf8:	4b68      	ldr	r3, [pc, #416]	; (800de9c <_tx_timer_thread_entry+0x1e0>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800dd00:	4b66      	ldr	r3, [pc, #408]	; (800de9c <_tx_timer_thread_entry+0x1e0>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	3304      	adds	r3, #4
 800dd06:	4a65      	ldr	r2, [pc, #404]	; (800de9c <_tx_timer_thread_entry+0x1e0>)
 800dd08:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800dd0a:	4b64      	ldr	r3, [pc, #400]	; (800de9c <_tx_timer_thread_entry+0x1e0>)
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	4b64      	ldr	r3, [pc, #400]	; (800dea0 <_tx_timer_thread_entry+0x1e4>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d103      	bne.n	800dd1e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800dd16:	4b63      	ldr	r3, [pc, #396]	; (800dea4 <_tx_timer_thread_entry+0x1e8>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4a60      	ldr	r2, [pc, #384]	; (800de9c <_tx_timer_thread_entry+0x1e0>)
 800dd1c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800dd1e:	4b62      	ldr	r3, [pc, #392]	; (800dea8 <_tx_timer_thread_entry+0x1ec>)
 800dd20:	2200      	movs	r2, #0
 800dd22:	601a      	str	r2, [r3, #0]
 800dd24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd26:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2a:	f383 8810 	msr	PRIMASK, r3
}
 800dd2e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dd30:	f3ef 8310 	mrs	r3, PRIMASK
 800dd34:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800dd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800dd38:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800dd3a:	b672      	cpsid	i
    return(int_posture);
 800dd3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800dd3e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800dd40:	e07f      	b.n	800de42 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	691b      	ldr	r3, [r3, #16]
 800dd4a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800dd50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d102      	bne.n	800dd5e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	60fb      	str	r3, [r7, #12]
 800dd5c:	e00e      	b.n	800dd7c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800dd5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd60:	695b      	ldr	r3, [r3, #20]
 800dd62:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800dd64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd68:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800dd6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd6e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800dd70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd72:	f107 020c 	add.w	r2, r7, #12
 800dd76:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800dd78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd7a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800dd7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b20      	cmp	r3, #32
 800dd82:	d911      	bls.n	800dda8 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800dd84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800dd8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd8e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800dd90:	2300      	movs	r3, #0
 800dd92:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800dd94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd96:	f107 0208 	add.w	r2, r7, #8
 800dd9a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800dd9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dda0:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800dda2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda4:	60bb      	str	r3, [r7, #8]
 800dda6:	e01a      	b.n	800ddde <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800dda8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddaa:	689b      	ldr	r3, [r3, #8]
 800ddac:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800ddae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddb0:	68db      	ldr	r3, [r3, #12]
 800ddb2:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800ddb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddb6:	685a      	ldr	r2, [r3, #4]
 800ddb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddba:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800ddbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d009      	beq.n	800ddd8 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ddc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddc6:	f107 0208 	add.w	r2, r7, #8
 800ddca:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800ddcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ddd0:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800ddd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddd4:	60bb      	str	r3, [r7, #8]
 800ddd6:	e002      	b.n	800ddde <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800ddd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddda:	2200      	movs	r2, #0
 800dddc:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800ddde:	4a33      	ldr	r2, [pc, #204]	; (800deac <_tx_timer_thread_entry+0x1f0>)
 800dde0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dde2:	6013      	str	r3, [r2, #0]
 800dde4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dde6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddea:	f383 8810 	msr	PRIMASK, r3
}
 800ddee:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800ddf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d002      	beq.n	800ddfc <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800ddf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddf8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ddfa:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ddfc:	f3ef 8310 	mrs	r3, PRIMASK
 800de00:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800de02:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800de04:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800de06:	b672      	cpsid	i
    return(int_posture);
 800de08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800de0a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800de0c:	4b27      	ldr	r3, [pc, #156]	; (800deac <_tx_timer_thread_entry+0x1f0>)
 800de0e:	2200      	movs	r2, #0
 800de10:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de16:	429a      	cmp	r2, r3
 800de18:	d105      	bne.n	800de26 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800de1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de1c:	2200      	movs	r2, #0
 800de1e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800de20:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800de22:	f7ff feb1 	bl	800db88 <_tx_timer_system_activate>
 800de26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de28:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	f383 8810 	msr	PRIMASK, r3
}
 800de30:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800de32:	f3ef 8310 	mrs	r3, PRIMASK
 800de36:	623b      	str	r3, [r7, #32]
    return(posture);
 800de38:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800de3a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800de3c:	b672      	cpsid	i
    return(int_posture);
 800de3e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800de40:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2b00      	cmp	r3, #0
 800de46:	f47f af7c 	bne.w	800dd42 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800de4a:	4b17      	ldr	r3, [pc, #92]	; (800dea8 <_tx_timer_thread_entry+0x1ec>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d116      	bne.n	800de80 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800de52:	4b17      	ldr	r3, [pc, #92]	; (800deb0 <_tx_timer_thread_entry+0x1f4>)
 800de54:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800de56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de58:	2203      	movs	r2, #3
 800de5a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800de5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de5e:	2201      	movs	r2, #1
 800de60:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800de62:	4b14      	ldr	r3, [pc, #80]	; (800deb4 <_tx_timer_thread_entry+0x1f8>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	3301      	adds	r3, #1
 800de68:	4a12      	ldr	r2, [pc, #72]	; (800deb4 <_tx_timer_thread_entry+0x1f8>)
 800de6a:	6013      	str	r3, [r2, #0]
 800de6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de6e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	f383 8810 	msr	PRIMASK, r3
}
 800de76:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800de78:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800de7a:	f7ff fbdd 	bl	800d638 <_tx_thread_system_suspend>
 800de7e:	e728      	b.n	800dcd2 <_tx_timer_thread_entry+0x16>
 800de80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de82:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	f383 8810 	msr	PRIMASK, r3
}
 800de8a:	bf00      	nop
            TX_DISABLE
 800de8c:	e721      	b.n	800dcd2 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800de8e:	bf00      	nop
 800de90:	3760      	adds	r7, #96	; 0x60
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	4154494d 	.word	0x4154494d
 800de9c:	200149b8 	.word	0x200149b8
 800dea0:	200149b4 	.word	0x200149b4
 800dea4:	200149b0 	.word	0x200149b0
 800dea8:	200149bc 	.word	0x200149bc
 800deac:	200149c8 	.word	0x200149c8
 800deb0:	200149cc 	.word	0x200149cc
 800deb4:	2001491c 	.word	0x2001491c

0800deb8 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b08a      	sub	sp, #40	; 0x28
 800debc:	af00      	add	r7, sp, #0
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	60b9      	str	r1, [r7, #8]
 800dec2:	607a      	str	r2, [r7, #4]
 800dec4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800dec6:	2300      	movs	r3, #0
 800dec8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d102      	bne.n	800ded6 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800ded0:	2302      	movs	r3, #2
 800ded2:	627b      	str	r3, [r7, #36]	; 0x24
 800ded4:	e029      	b.n	800df2a <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4a2d      	ldr	r2, [pc, #180]	; (800df90 <_txe_byte_allocate+0xd8>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d002      	beq.n	800dee6 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800dee0:	2302      	movs	r3, #2
 800dee2:	627b      	str	r3, [r7, #36]	; 0x24
 800dee4:	e021      	b.n	800df2a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d102      	bne.n	800def2 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800deec:	2303      	movs	r3, #3
 800deee:	627b      	str	r3, [r7, #36]	; 0x24
 800def0:	e01b      	b.n	800df2a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d102      	bne.n	800defe <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800def8:	2305      	movs	r3, #5
 800defa:	627b      	str	r3, [r7, #36]	; 0x24
 800defc:	e015      	b.n	800df2a <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	69db      	ldr	r3, [r3, #28]
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	429a      	cmp	r2, r3
 800df06:	d902      	bls.n	800df0e <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800df08:	2305      	movs	r3, #5
 800df0a:	627b      	str	r3, [r7, #36]	; 0x24
 800df0c:	e00d      	b.n	800df2a <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00a      	beq.n	800df2a <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800df14:	f3ef 8305 	mrs	r3, IPSR
 800df18:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800df1a:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800df1c:	4b1d      	ldr	r3, [pc, #116]	; (800df94 <_txe_byte_allocate+0xdc>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4313      	orrs	r3, r2
 800df22:	2b00      	cmp	r3, #0
 800df24:	d001      	beq.n	800df2a <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800df26:	2304      	movs	r3, #4
 800df28:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800df2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d108      	bne.n	800df42 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800df30:	4b19      	ldr	r3, [pc, #100]	; (800df98 <_txe_byte_allocate+0xe0>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800df36:	6a3b      	ldr	r3, [r7, #32]
 800df38:	4a18      	ldr	r2, [pc, #96]	; (800df9c <_txe_byte_allocate+0xe4>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d101      	bne.n	800df42 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800df3e:	2313      	movs	r3, #19
 800df40:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800df42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df44:	2b00      	cmp	r3, #0
 800df46:	d114      	bne.n	800df72 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800df48:	f3ef 8305 	mrs	r3, IPSR
 800df4c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800df4e:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800df50:	4b10      	ldr	r3, [pc, #64]	; (800df94 <_txe_byte_allocate+0xdc>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4313      	orrs	r3, r2
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00b      	beq.n	800df72 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800df5a:	f3ef 8305 	mrs	r3, IPSR
 800df5e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800df60:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800df62:	4b0c      	ldr	r3, [pc, #48]	; (800df94 <_txe_byte_allocate+0xdc>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4313      	orrs	r3, r2
 800df68:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800df6c:	d201      	bcs.n	800df72 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800df6e:	2313      	movs	r3, #19
 800df70:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800df72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df74:	2b00      	cmp	r3, #0
 800df76:	d106      	bne.n	800df86 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	68b9      	ldr	r1, [r7, #8]
 800df7e:	68f8      	ldr	r0, [r7, #12]
 800df80:	f7fd f9f0 	bl	800b364 <_tx_byte_allocate>
 800df84:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800df86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3728      	adds	r7, #40	; 0x28
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	42595445 	.word	0x42595445
 800df94:	20000088 	.word	0x20000088
 800df98:	20014884 	.word	0x20014884
 800df9c:	200149cc 	.word	0x200149cc

0800dfa0 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b092      	sub	sp, #72	; 0x48
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
 800dfac:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d102      	bne.n	800dfbe <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800dfb8:	2302      	movs	r3, #2
 800dfba:	647b      	str	r3, [r7, #68]	; 0x44
 800dfbc:	e075      	b.n	800e0aa <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800dfbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfc0:	2b34      	cmp	r3, #52	; 0x34
 800dfc2:	d002      	beq.n	800dfca <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800dfc4:	2302      	movs	r3, #2
 800dfc6:	647b      	str	r3, [r7, #68]	; 0x44
 800dfc8:	e06f      	b.n	800e0aa <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dfca:	f3ef 8310 	mrs	r3, PRIMASK
 800dfce:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800dfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800dfd2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800dfd4:	b672      	cpsid	i
    return(int_posture);
 800dfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800dfd8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800dfda:	4b3b      	ldr	r3, [pc, #236]	; (800e0c8 <_txe_byte_pool_create+0x128>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	4a39      	ldr	r2, [pc, #228]	; (800e0c8 <_txe_byte_pool_create+0x128>)
 800dfe2:	6013      	str	r3, [r2, #0]
 800dfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfea:	f383 8810 	msr	PRIMASK, r3
}
 800dfee:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800dff0:	4b36      	ldr	r3, [pc, #216]	; (800e0cc <_txe_byte_pool_create+0x12c>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800dff6:	2300      	movs	r3, #0
 800dff8:	643b      	str	r3, [r7, #64]	; 0x40
 800dffa:	e009      	b.n	800e010 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800dffc:	68fa      	ldr	r2, [r7, #12]
 800dffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e000:	429a      	cmp	r2, r3
 800e002:	d00b      	beq.n	800e01c <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800e004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e008:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800e00a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e00c:	3301      	adds	r3, #1
 800e00e:	643b      	str	r3, [r7, #64]	; 0x40
 800e010:	4b2f      	ldr	r3, [pc, #188]	; (800e0d0 <_txe_byte_pool_create+0x130>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e016:	429a      	cmp	r2, r3
 800e018:	d3f0      	bcc.n	800dffc <_txe_byte_pool_create+0x5c>
 800e01a:	e000      	b.n	800e01e <_txe_byte_pool_create+0x7e>
                break;
 800e01c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e01e:	f3ef 8310 	mrs	r3, PRIMASK
 800e022:	623b      	str	r3, [r7, #32]
    return(posture);
 800e024:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800e026:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e028:	b672      	cpsid	i
    return(int_posture);
 800e02a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e02c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e02e:	4b26      	ldr	r3, [pc, #152]	; (800e0c8 <_txe_byte_pool_create+0x128>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	3b01      	subs	r3, #1
 800e034:	4a24      	ldr	r2, [pc, #144]	; (800e0c8 <_txe_byte_pool_create+0x128>)
 800e036:	6013      	str	r3, [r2, #0]
 800e038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03e:	f383 8810 	msr	PRIMASK, r3
}
 800e042:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e044:	f7ff f9be 	bl	800d3c4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800e048:	68fa      	ldr	r2, [r7, #12]
 800e04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d102      	bne.n	800e056 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800e050:	2302      	movs	r3, #2
 800e052:	647b      	str	r3, [r7, #68]	; 0x44
 800e054:	e029      	b.n	800e0aa <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d102      	bne.n	800e062 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800e05c:	2303      	movs	r3, #3
 800e05e:	647b      	str	r3, [r7, #68]	; 0x44
 800e060:	e023      	b.n	800e0aa <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	2b63      	cmp	r3, #99	; 0x63
 800e066:	d802      	bhi.n	800e06e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800e068:	2305      	movs	r3, #5
 800e06a:	647b      	str	r3, [r7, #68]	; 0x44
 800e06c:	e01d      	b.n	800e0aa <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800e06e:	4b19      	ldr	r3, [pc, #100]	; (800e0d4 <_txe_byte_pool_create+0x134>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800e074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e076:	4a18      	ldr	r2, [pc, #96]	; (800e0d8 <_txe_byte_pool_create+0x138>)
 800e078:	4293      	cmp	r3, r2
 800e07a:	d101      	bne.n	800e080 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e07c:	2313      	movs	r3, #19
 800e07e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e080:	f3ef 8305 	mrs	r3, IPSR
 800e084:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e086:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e088:	4b14      	ldr	r3, [pc, #80]	; (800e0dc <_txe_byte_pool_create+0x13c>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4313      	orrs	r3, r2
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00b      	beq.n	800e0aa <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e092:	f3ef 8305 	mrs	r3, IPSR
 800e096:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e098:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e09a:	4b10      	ldr	r3, [pc, #64]	; (800e0dc <_txe_byte_pool_create+0x13c>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e0a4:	d201      	bcs.n	800e0aa <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e0a6:	2313      	movs	r3, #19
 800e0a8:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e0aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d106      	bne.n	800e0be <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	68b9      	ldr	r1, [r7, #8]
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f7fd fa96 	bl	800b5e8 <_tx_byte_pool_create>
 800e0bc:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800e0be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3748      	adds	r7, #72	; 0x48
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	2001491c 	.word	0x2001491c
 800e0cc:	20014874 	.word	0x20014874
 800e0d0:	20014878 	.word	0x20014878
 800e0d4:	20014884 	.word	0x20014884
 800e0d8:	200149cc 	.word	0x200149cc
 800e0dc:	20000088 	.word	0x20000088

0800e0e0 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b09a      	sub	sp, #104	; 0x68
 800e0e4:	af06      	add	r7, sp, #24
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	607a      	str	r2, [r7, #4]
 800e0ec:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d102      	bne.n	800e0fe <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e0f8:	230e      	movs	r3, #14
 800e0fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e0fc:	e0bb      	b.n	800e276 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800e0fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e100:	2bb0      	cmp	r3, #176	; 0xb0
 800e102:	d002      	beq.n	800e10a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e104:	230e      	movs	r3, #14
 800e106:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e108:	e0b5      	b.n	800e276 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e10a:	f3ef 8310 	mrs	r3, PRIMASK
 800e10e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800e110:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800e112:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e114:	b672      	cpsid	i
    return(int_posture);
 800e116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800e118:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800e11a:	4b64      	ldr	r3, [pc, #400]	; (800e2ac <_txe_thread_create+0x1cc>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	3301      	adds	r3, #1
 800e120:	4a62      	ldr	r2, [pc, #392]	; (800e2ac <_txe_thread_create+0x1cc>)
 800e122:	6013      	str	r3, [r2, #0]
 800e124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e126:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12a:	f383 8810 	msr	PRIMASK, r3
}
 800e12e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800e130:	2300      	movs	r3, #0
 800e132:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800e134:	4b5e      	ldr	r3, [pc, #376]	; (800e2b0 <_txe_thread_create+0x1d0>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800e13a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e13c:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800e13e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e140:	3b01      	subs	r3, #1
 800e142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e144:	4413      	add	r3, r2
 800e146:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800e148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14a:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e14c:	2300      	movs	r3, #0
 800e14e:	647b      	str	r3, [r7, #68]	; 0x44
 800e150:	e02b      	b.n	800e1aa <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800e152:	68fa      	ldr	r2, [r7, #12]
 800e154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e156:	429a      	cmp	r2, r3
 800e158:	d101      	bne.n	800e15e <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800e15a:	2301      	movs	r3, #1
 800e15c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800e15e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e160:	2b01      	cmp	r3, #1
 800e162:	d028      	beq.n	800e1b6 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800e164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d308      	bcc.n	800e180 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800e16e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e170:	691b      	ldr	r3, [r3, #16]
 800e172:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e174:	429a      	cmp	r2, r3
 800e176:	d203      	bcs.n	800e180 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e178:	2300      	movs	r3, #0
 800e17a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e17c:	2301      	movs	r3, #1
 800e17e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800e180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e182:	68db      	ldr	r3, [r3, #12]
 800e184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e186:	429a      	cmp	r2, r3
 800e188:	d308      	bcc.n	800e19c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800e18a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e18c:	691b      	ldr	r3, [r3, #16]
 800e18e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e190:	429a      	cmp	r2, r3
 800e192:	d203      	bcs.n	800e19c <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800e194:	2300      	movs	r3, #0
 800e196:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800e198:	2301      	movs	r3, #1
 800e19a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800e19c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1a2:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800e1a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	647b      	str	r3, [r7, #68]	; 0x44
 800e1aa:	4b42      	ldr	r3, [pc, #264]	; (800e2b4 <_txe_thread_create+0x1d4>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d3ce      	bcc.n	800e152 <_txe_thread_create+0x72>
 800e1b4:	e000      	b.n	800e1b8 <_txe_thread_create+0xd8>
                break;
 800e1b6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e1b8:	f3ef 8310 	mrs	r3, PRIMASK
 800e1bc:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e1be:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e1c0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e1c2:	b672      	cpsid	i
    return(int_posture);
 800e1c4:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800e1c6:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800e1c8:	4b38      	ldr	r3, [pc, #224]	; (800e2ac <_txe_thread_create+0x1cc>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	3b01      	subs	r3, #1
 800e1ce:	4a37      	ldr	r2, [pc, #220]	; (800e2ac <_txe_thread_create+0x1cc>)
 800e1d0:	6013      	str	r3, [r2, #0]
 800e1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1d4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e1d6:	6a3b      	ldr	r3, [r7, #32]
 800e1d8:	f383 8810 	msr	PRIMASK, r3
}
 800e1dc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800e1de:	f7ff f8f1 	bl	800d3c4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800e1e2:	68fa      	ldr	r2, [r7, #12]
 800e1e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d102      	bne.n	800e1f0 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800e1ea:	230e      	movs	r3, #14
 800e1ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1ee:	e042      	b.n	800e276 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800e1f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d102      	bne.n	800e1fc <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e1f6:	2303      	movs	r3, #3
 800e1f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1fa:	e03c      	b.n	800e276 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d102      	bne.n	800e208 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800e202:	2303      	movs	r3, #3
 800e204:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e206:	e036      	b.n	800e276 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800e208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e20a:	2bc7      	cmp	r3, #199	; 0xc7
 800e20c:	d802      	bhi.n	800e214 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800e20e:	2305      	movs	r3, #5
 800e210:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e212:	e030      	b.n	800e276 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800e214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e216:	2b1f      	cmp	r3, #31
 800e218:	d902      	bls.n	800e220 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800e21a:	230f      	movs	r3, #15
 800e21c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e21e:	e02a      	b.n	800e276 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800e220:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e224:	429a      	cmp	r2, r3
 800e226:	d902      	bls.n	800e22e <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800e228:	2318      	movs	r3, #24
 800e22a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e22c:	e023      	b.n	800e276 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800e22e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e230:	2b01      	cmp	r3, #1
 800e232:	d902      	bls.n	800e23a <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800e234:	2310      	movs	r3, #16
 800e236:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e238:	e01d      	b.n	800e276 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800e23a:	4b1f      	ldr	r3, [pc, #124]	; (800e2b8 <_txe_thread_create+0x1d8>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800e240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e242:	4a1e      	ldr	r2, [pc, #120]	; (800e2bc <_txe_thread_create+0x1dc>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d101      	bne.n	800e24c <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800e248:	2313      	movs	r3, #19
 800e24a:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e24c:	f3ef 8305 	mrs	r3, IPSR
 800e250:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800e252:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e254:	4b1a      	ldr	r3, [pc, #104]	; (800e2c0 <_txe_thread_create+0x1e0>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4313      	orrs	r3, r2
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00b      	beq.n	800e276 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e25e:	f3ef 8305 	mrs	r3, IPSR
 800e262:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800e264:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800e266:	4b16      	ldr	r3, [pc, #88]	; (800e2c0 <_txe_thread_create+0x1e0>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4313      	orrs	r3, r2
 800e26c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800e270:	d201      	bcs.n	800e276 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800e272:	2313      	movs	r3, #19
 800e274:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800e276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d112      	bne.n	800e2a2 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800e27c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e27e:	9305      	str	r3, [sp, #20]
 800e280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e282:	9304      	str	r3, [sp, #16]
 800e284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e286:	9303      	str	r3, [sp, #12]
 800e288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e28a:	9302      	str	r3, [sp, #8]
 800e28c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e28e:	9301      	str	r3, [sp, #4]
 800e290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	68b9      	ldr	r1, [r7, #8]
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f7fe fd3c 	bl	800cd18 <_tx_thread_create>
 800e2a0:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800e2a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3750      	adds	r7, #80	; 0x50
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	2001491c 	.word	0x2001491c
 800e2b0:	2001488c 	.word	0x2001488c
 800e2b4:	20014890 	.word	0x20014890
 800e2b8:	20014884 	.word	0x20014884
 800e2bc:	200149cc 	.word	0x200149cc
 800e2c0:	20000088 	.word	0x20000088

0800e2c4 <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800e2ca:	4b0a      	ldr	r3, [pc, #40]	; (800e2f4 <_txe_thread_relinquish+0x30>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00a      	beq.n	800e2ec <_txe_thread_relinquish+0x28>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e2d6:	f3ef 8305 	mrs	r3, IPSR
 800e2da:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 800e2dc:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 800e2de:	4b06      	ldr	r3, [pc, #24]	; (800e2f8 <_txe_thread_relinquish+0x34>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d101      	bne.n	800e2ec <_txe_thread_relinquish+0x28>
        {

            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 800e2e8:	f7fe feda 	bl	800d0a0 <_tx_thread_relinquish>
        }
    }
}
 800e2ec:	bf00      	nop
 800e2ee:	3708      	adds	r7, #8
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	20014884 	.word	0x20014884
 800e2f8:	20000088 	.word	0x20000088

0800e2fc <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d102      	bne.n	800e310 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e30a:	230e      	movs	r3, #14
 800e30c:	60fb      	str	r3, [r7, #12]
 800e30e:	e00b      	b.n	800e328 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a07      	ldr	r2, [pc, #28]	; (800e334 <_txe_thread_resume+0x38>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d002      	beq.n	800e320 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800e31a:	230e      	movs	r3, #14
 800e31c:	60fb      	str	r3, [r7, #12]
 800e31e:	e003      	b.n	800e328 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f7fe ff23 	bl	800d16c <_tx_thread_resume>
 800e326:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800e328:	68fb      	ldr	r3, [r7, #12]
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	54485244 	.word	0x54485244

0800e338 <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b08e      	sub	sp, #56	; 0x38
 800e33c:	af08      	add	r7, sp, #32
 800e33e:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 800e340:	2300      	movs	r3, #0
 800e342:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	613b      	str	r3, [r7, #16]

   /* USER CODE BEGIN App_NetXDuo_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_NetXDuo_MEM_POOL */
  /* USER CODE BEGIN 0 */
  printf("Nx_UDP_Echo_Server application started...\n");
 800e348:	487a      	ldr	r0, [pc, #488]	; (800e534 <MX_NetXDuo_Init+0x1fc>)
 800e34a:	f000 fbd7 	bl	800eafc <puts>
  /* USER CODE END 0 */

  /* Initialize the NetXDuo system. */
  CHAR *pointer;
  nx_system_initialize();
 800e34e:	f7fb fa17 	bl	8009780 <_nx_system_initialize>

    /* Allocate the memory for packet_pool.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, NX_APP_PACKET_POOL_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800e352:	f107 010c 	add.w	r1, r7, #12
 800e356:	2300      	movs	r3, #0
 800e358:	f641 722c 	movw	r2, #7980	; 0x1f2c
 800e35c:	6938      	ldr	r0, [r7, #16]
 800e35e:	f7ff fdab 	bl	800deb8 <_txe_byte_allocate>
 800e362:	4603      	mov	r3, r0
 800e364:	2b00      	cmp	r3, #0
 800e366:	d001      	beq.n	800e36c <MX_NetXDuo_Init+0x34>
  {
    return TX_POOL_ERROR;
 800e368:	2302      	movs	r3, #2
 800e36a:	e0df      	b.n	800e52c <MX_NetXDuo_Init+0x1f4>
  }

  /* Create the Packet pool to be used for packet allocation,
   * If extra NX_PACKET are to be used the NX_APP_PACKET_POOL_SIZE should be increased
   */
  ret = nx_packet_pool_create(&NxAppPool, "NetXDuo App Pool", DEFAULT_PAYLOAD_SIZE, pointer, NX_APP_PACKET_POOL_SIZE);
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	223c      	movs	r2, #60	; 0x3c
 800e370:	9201      	str	r2, [sp, #4]
 800e372:	f641 722c 	movw	r2, #7980	; 0x1f2c
 800e376:	9200      	str	r2, [sp, #0]
 800e378:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e37c:	496e      	ldr	r1, [pc, #440]	; (800e538 <MX_NetXDuo_Init+0x200>)
 800e37e:	486f      	ldr	r0, [pc, #444]	; (800e53c <MX_NetXDuo_Init+0x204>)
 800e380:	f7fc fca6 	bl	800acd0 <_nxe_packet_pool_create>
 800e384:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d001      	beq.n	800e390 <MX_NetXDuo_Init+0x58>
  {
    return NX_POOL_ERROR;
 800e38c:	2306      	movs	r3, #6
 800e38e:	e0cd      	b.n	800e52c <MX_NetXDuo_Init+0x1f4>
  }

    /* Allocate the memory for Ip_Instance */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, Nx_IP_INSTANCE_THREAD_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800e390:	f107 010c 	add.w	r1, r7, #12
 800e394:	2300      	movs	r3, #0
 800e396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e39a:	6938      	ldr	r0, [r7, #16]
 800e39c:	f7ff fd8c 	bl	800deb8 <_txe_byte_allocate>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d001      	beq.n	800e3aa <MX_NetXDuo_Init+0x72>
  {
    return TX_POOL_ERROR;
 800e3a6:	2302      	movs	r3, #2
 800e3a8:	e0c0      	b.n	800e52c <MX_NetXDuo_Init+0x1f4>
  }

   /* Create the main NX_IP instance */
  ret = nx_ip_create(&NetXDuoEthIpInstance, "NetX Ip instance", NX_APP_DEFAULT_IP_ADDRESS, NX_APP_DEFAULT_NET_MASK, &NxAppPool, nx_stm32_eth_driver,
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f44f 62f9 	mov.w	r2, #1992	; 0x7c8
 800e3b0:	9205      	str	r2, [sp, #20]
 800e3b2:	220a      	movs	r2, #10
 800e3b4:	9204      	str	r2, [sp, #16]
 800e3b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e3ba:	9203      	str	r2, [sp, #12]
 800e3bc:	9302      	str	r3, [sp, #8]
 800e3be:	4b60      	ldr	r3, [pc, #384]	; (800e540 <MX_NetXDuo_Init+0x208>)
 800e3c0:	9301      	str	r3, [sp, #4]
 800e3c2:	4b5e      	ldr	r3, [pc, #376]	; (800e53c <MX_NetXDuo_Init+0x204>)
 800e3c4:	9300      	str	r3, [sp, #0]
 800e3c6:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800e3ca:	4a5e      	ldr	r2, [pc, #376]	; (800e544 <MX_NetXDuo_Init+0x20c>)
 800e3cc:	495e      	ldr	r1, [pc, #376]	; (800e548 <MX_NetXDuo_Init+0x210>)
 800e3ce:	485f      	ldr	r0, [pc, #380]	; (800e54c <MX_NetXDuo_Init+0x214>)
 800e3d0:	f7fc fa78 	bl	800a8c4 <_nxe_ip_create>
 800e3d4:	6178      	str	r0, [r7, #20]
                     pointer, Nx_IP_INSTANCE_THREAD_SIZE, NX_APP_INSTANCE_PRIORITY);

  if (ret != NX_SUCCESS)
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d001      	beq.n	800e3e0 <MX_NetXDuo_Init+0xa8>
  {
    return NX_NOT_SUCCESSFUL;
 800e3dc:	2343      	movs	r3, #67	; 0x43
 800e3de:	e0a5      	b.n	800e52c <MX_NetXDuo_Init+0x1f4>
  }

    /* Allocate the memory for ARP */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, DEFAULT_ARP_CACHE_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800e3e0:	f107 010c 	add.w	r1, r7, #12
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e3ea:	6938      	ldr	r0, [r7, #16]
 800e3ec:	f7ff fd64 	bl	800deb8 <_txe_byte_allocate>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d001      	beq.n	800e3fa <MX_NetXDuo_Init+0xc2>
  {
    return TX_POOL_ERROR;
 800e3f6:	2302      	movs	r3, #2
 800e3f8:	e098      	b.n	800e52c <MX_NetXDuo_Init+0x1f4>

  /* USER CODE BEGIN ARP_Protocol_Initialization */

  /* USER CODE END ARP_Protocol_Initialization */

  ret = nx_arp_enable(&NetXDuoEthIpInstance, (VOID *)pointer, DEFAULT_ARP_CACHE_SIZE);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e400:	4619      	mov	r1, r3
 800e402:	4852      	ldr	r0, [pc, #328]	; (800e54c <MX_NetXDuo_Init+0x214>)
 800e404:	f7fc f98e 	bl	800a724 <_nxe_arp_enable>
 800e408:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d001      	beq.n	800e414 <MX_NetXDuo_Init+0xdc>
  {
    return NX_NOT_SUCCESSFUL;
 800e410:	2343      	movs	r3, #67	; 0x43
 800e412:	e08b      	b.n	800e52c <MX_NetXDuo_Init+0x1f4>

  /* USER CODE BEGIN ICMP_Protocol_Initialization */

  /* USER CODE END ICMP_Protocol_Initialization */

  ret = nx_icmp_enable(&NetXDuoEthIpInstance);
 800e414:	484d      	ldr	r0, [pc, #308]	; (800e54c <MX_NetXDuo_Init+0x214>)
 800e416:	f7fc f9d1 	bl	800a7bc <_nxe_icmp_enable>
 800e41a:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <MX_NetXDuo_Init+0xee>
  {
    return NX_NOT_SUCCESSFUL;
 800e422:	2343      	movs	r3, #67	; 0x43
 800e424:	e082      	b.n	800e52c <MX_NetXDuo_Init+0x1f4>

  /* USER CODE BEGIN UDP_Protocol_Initialization */

  /* USER CODE END UDP_Protocol_Initialization */

  ret = nx_udp_enable(&NetXDuoEthIpInstance);
 800e426:	4849      	ldr	r0, [pc, #292]	; (800e54c <MX_NetXDuo_Init+0x214>)
 800e428:	f7fc fd8c 	bl	800af44 <_nxe_udp_enable>
 800e42c:	6178      	str	r0, [r7, #20]

  if (ret != NX_SUCCESS)
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d001      	beq.n	800e438 <MX_NetXDuo_Init+0x100>
  {
    return NX_NOT_SUCCESSFUL;
 800e434:	2343      	movs	r3, #67	; 0x43
 800e436:	e079      	b.n	800e52c <MX_NetXDuo_Init+0x1f4>
  }

   /* Allocate the memory for main thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, NX_APP_THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800e438:	f107 010c 	add.w	r1, r7, #12
 800e43c:	2300      	movs	r3, #0
 800e43e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e442:	6938      	ldr	r0, [r7, #16]
 800e444:	f7ff fd38 	bl	800deb8 <_txe_byte_allocate>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d001      	beq.n	800e452 <MX_NetXDuo_Init+0x11a>
  {
    return TX_POOL_ERROR;
 800e44e:	2302      	movs	r3, #2
 800e450:	e06c      	b.n	800e52c <MX_NetXDuo_Init+0x1f4>
  }

  /* Create the main thread */
  ret = tx_thread_create(&NxAppThread, "NetXDuo App thread", nx_app_thread_entry , 0, pointer, NX_APP_THREAD_STACK_SIZE,
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	22b0      	movs	r2, #176	; 0xb0
 800e456:	9206      	str	r2, [sp, #24]
 800e458:	2201      	movs	r2, #1
 800e45a:	9205      	str	r2, [sp, #20]
 800e45c:	2200      	movs	r2, #0
 800e45e:	9204      	str	r2, [sp, #16]
 800e460:	220a      	movs	r2, #10
 800e462:	9203      	str	r2, [sp, #12]
 800e464:	220a      	movs	r2, #10
 800e466:	9202      	str	r2, [sp, #8]
 800e468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e46c:	9201      	str	r2, [sp, #4]
 800e46e:	9300      	str	r3, [sp, #0]
 800e470:	2300      	movs	r3, #0
 800e472:	4a37      	ldr	r2, [pc, #220]	; (800e550 <MX_NetXDuo_Init+0x218>)
 800e474:	4937      	ldr	r1, [pc, #220]	; (800e554 <MX_NetXDuo_Init+0x21c>)
 800e476:	4838      	ldr	r0, [pc, #224]	; (800e558 <MX_NetXDuo_Init+0x220>)
 800e478:	f7ff fe32 	bl	800e0e0 <_txe_thread_create>
 800e47c:	6178      	str	r0, [r7, #20]
                         NX_APP_THREAD_PRIORITY, NX_APP_THREAD_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d001      	beq.n	800e488 <MX_NetXDuo_Init+0x150>
  {
    return TX_THREAD_ERROR;
 800e484:	230e      	movs	r3, #14
 800e486:	e051      	b.n	800e52c <MX_NetXDuo_Init+0x1f4>
  }

  /* USER CODE BEGIN MX_NetXDuo_Init */
  /* Allocate the app UDP thread entry pool. */
  ret = tx_byte_allocate(byte_pool, (VOID **) &pointer, 2 * DEFAULT_MEMORY_SIZE, TX_NO_WAIT);
 800e488:	f107 010c 	add.w	r1, r7, #12
 800e48c:	2300      	movs	r3, #0
 800e48e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e492:	6938      	ldr	r0, [r7, #16]
 800e494:	f7ff fd10 	bl	800deb8 <_txe_byte_allocate>
 800e498:	6178      	str	r0, [r7, #20]

  if (ret != TX_SUCCESS)
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d001      	beq.n	800e4a4 <MX_NetXDuo_Init+0x16c>
  {
    return TX_POOL_ERROR;
 800e4a0:	2302      	movs	r3, #2
 800e4a2:	e043      	b.n	800e52c <MX_NetXDuo_Init+0x1f4>
  }
  /* create the UDP server thread */
  ret = tx_thread_create(&AppUDPThread, "App UDP Thread", app_UDP_thread_entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	22b0      	movs	r2, #176	; 0xb0
 800e4a8:	9206      	str	r2, [sp, #24]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	9205      	str	r2, [sp, #20]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	9204      	str	r2, [sp, #16]
 800e4b2:	220a      	movs	r2, #10
 800e4b4:	9203      	str	r2, [sp, #12]
 800e4b6:	220a      	movs	r2, #10
 800e4b8:	9202      	str	r2, [sp, #8]
 800e4ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e4be:	9201      	str	r2, [sp, #4]
 800e4c0:	9300      	str	r3, [sp, #0]
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	4a25      	ldr	r2, [pc, #148]	; (800e55c <MX_NetXDuo_Init+0x224>)
 800e4c6:	4926      	ldr	r1, [pc, #152]	; (800e560 <MX_NetXDuo_Init+0x228>)
 800e4c8:	4826      	ldr	r0, [pc, #152]	; (800e564 <MX_NetXDuo_Init+0x22c>)
 800e4ca:	f7ff fe09 	bl	800e0e0 <_txe_thread_create>
 800e4ce:	6178      	str	r0, [r7, #20]
	  				     DEFAULT_PRIORITY, DEFAULT_PRIORITY, TX_NO_TIME_SLICE, TX_DONT_START);

  if (ret != TX_SUCCESS)
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d001      	beq.n	800e4da <MX_NetXDuo_Init+0x1a2>
  {
	return TX_THREAD_ERROR;
 800e4d6:	230e      	movs	r3, #14
 800e4d8:	e028      	b.n	800e52c <MX_NetXDuo_Init+0x1f4>
  }

  /* Allocate the memory for Link thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,2 *  DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800e4da:	f107 010c 	add.w	r1, r7, #12
 800e4de:	2300      	movs	r3, #0
 800e4e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e4e4:	6938      	ldr	r0, [r7, #16]
 800e4e6:	f7ff fce7 	bl	800deb8 <_txe_byte_allocate>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d001      	beq.n	800e4f4 <MX_NetXDuo_Init+0x1bc>
  {
	return TX_POOL_ERROR;
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	e01b      	b.n	800e52c <MX_NetXDuo_Init+0x1f4>
  }

  /* create the Link thread */
  ret = tx_thread_create(&AppLinkThread, "App Link Thread", app_link_thread_entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	22b0      	movs	r2, #176	; 0xb0
 800e4f8:	9206      	str	r2, [sp, #24]
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	9205      	str	r2, [sp, #20]
 800e4fe:	2200      	movs	r2, #0
 800e500:	9204      	str	r2, [sp, #16]
 800e502:	220b      	movs	r2, #11
 800e504:	9203      	str	r2, [sp, #12]
 800e506:	220b      	movs	r2, #11
 800e508:	9202      	str	r2, [sp, #8]
 800e50a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e50e:	9201      	str	r2, [sp, #4]
 800e510:	9300      	str	r3, [sp, #0]
 800e512:	2300      	movs	r3, #0
 800e514:	4a14      	ldr	r2, [pc, #80]	; (800e568 <MX_NetXDuo_Init+0x230>)
 800e516:	4915      	ldr	r1, [pc, #84]	; (800e56c <MX_NetXDuo_Init+0x234>)
 800e518:	4815      	ldr	r0, [pc, #84]	; (800e570 <MX_NetXDuo_Init+0x238>)
 800e51a:	f7ff fde1 	bl	800e0e0 <_txe_thread_create>
 800e51e:	6178      	str	r0, [r7, #20]
					     LINK_PRIORITY, LINK_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d001      	beq.n	800e52a <MX_NetXDuo_Init+0x1f2>
  {
	return TX_THREAD_ERROR;
 800e526:	230e      	movs	r3, #14
 800e528:	e000      	b.n	800e52c <MX_NetXDuo_Init+0x1f4>
  }

  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 800e52a:	697b      	ldr	r3, [r7, #20]
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3718      	adds	r7, #24
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}
 800e534:	0800f97c 	.word	0x0800f97c
 800e538:	0800f9a8 	.word	0x0800f9a8
 800e53c:	2001511c 	.word	0x2001511c
 800e540:	08004b75 	.word	0x08004b75
 800e544:	c0a80101 	.word	0xc0a80101
 800e548:	0800f9bc 	.word	0x0800f9bc
 800e54c:	20015158 	.word	0x20015158
 800e550:	0800e575 	.word	0x0800e575
 800e554:	0800f9d0 	.word	0x0800f9d0
 800e558:	2001506c 	.word	0x2001506c
 800e55c:	0800e5ed 	.word	0x0800e5ed
 800e560:	0800f9e4 	.word	0x0800f9e4
 800e564:	20014e8c 	.word	0x20014e8c
 800e568:	0800e795 	.word	0x0800e795
 800e56c:	0800f9f4 	.word	0x0800f9f4
 800e570:	20014f3c 	.word	0x20014f3c

0800e574 <nx_app_thread_entry>:
* @brief  Main thread entry.
* @param thread_input: ULONG user argument used by the thread entry
* @retval none
*/
static VOID nx_app_thread_entry (ULONG thread_input)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af02      	add	r7, sp, #8
 800e57a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Nx_App_Thread_Entry 0 */
  UINT ret = NX_SUCCESS;
 800e57c:	2300      	movs	r3, #0
 800e57e:	60fb      	str	r3, [r7, #12]

  /* get IP address */
  ret = nx_ip_address_get(&NetXDuoEthIpInstance, &IpAddress, &NetMask);
 800e580:	4a14      	ldr	r2, [pc, #80]	; (800e5d4 <nx_app_thread_entry+0x60>)
 800e582:	4915      	ldr	r1, [pc, #84]	; (800e5d8 <nx_app_thread_entry+0x64>)
 800e584:	4815      	ldr	r0, [pc, #84]	; (800e5dc <nx_app_thread_entry+0x68>)
 800e586:	f7fc f959 	bl	800a83c <_nxe_ip_address_get>
 800e58a:	60f8      	str	r0, [r7, #12]

  /* print the IP address */
  PRINT_IP_ADDRESS(IpAddress);
 800e58c:	4b12      	ldr	r3, [pc, #72]	; (800e5d8 <nx_app_thread_entry+0x64>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	0e19      	lsrs	r1, r3, #24
 800e592:	4b11      	ldr	r3, [pc, #68]	; (800e5d8 <nx_app_thread_entry+0x64>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	0c1b      	lsrs	r3, r3, #16
 800e598:	b2d8      	uxtb	r0, r3
 800e59a:	4b0f      	ldr	r3, [pc, #60]	; (800e5d8 <nx_app_thread_entry+0x64>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	0a1b      	lsrs	r3, r3, #8
 800e5a0:	b2db      	uxtb	r3, r3
 800e5a2:	4a0d      	ldr	r2, [pc, #52]	; (800e5d8 <nx_app_thread_entry+0x64>)
 800e5a4:	6812      	ldr	r2, [r2, #0]
 800e5a6:	b2d2      	uxtb	r2, r2
 800e5a8:	9201      	str	r2, [sp, #4]
 800e5aa:	9300      	str	r3, [sp, #0]
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	460a      	mov	r2, r1
 800e5b0:	490b      	ldr	r1, [pc, #44]	; (800e5e0 <nx_app_thread_entry+0x6c>)
 800e5b2:	480c      	ldr	r0, [pc, #48]	; (800e5e4 <nx_app_thread_entry+0x70>)
 800e5b4:	f000 fa3c 	bl	800ea30 <iprintf>

  if (ret != TX_SUCCESS)
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d001      	beq.n	800e5c2 <nx_app_thread_entry+0x4e>
  {
    Error_Handler();
 800e5be:	f7f2 f975 	bl	80008ac <Error_Handler>
  }

  /* Now the network is correctly initialized, start the UDP server thread */
  tx_thread_resume(&AppUDPThread);
 800e5c2:	4809      	ldr	r0, [pc, #36]	; (800e5e8 <nx_app_thread_entry+0x74>)
 800e5c4:	f7ff fe9a 	bl	800e2fc <_txe_thread_resume>

  /* this thread is not needed any more, we relinquish it */
  tx_thread_relinquish();
 800e5c8:	f7ff fe7c 	bl	800e2c4 <_txe_thread_relinquish>
  /* USER CODE END Nx_App_Thread_Entry 0 */

}
 800e5cc:	bf00      	nop
 800e5ce:	3710      	adds	r7, #16
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	20015068 	.word	0x20015068
 800e5d8:	20015064 	.word	0x20015064
 800e5dc:	20015158 	.word	0x20015158
 800e5e0:	0800fa04 	.word	0x0800fa04
 800e5e4:	0800fa10 	.word	0x0800fa10
 800e5e8:	20014e8c 	.word	0x20014e8c

0800e5ec <app_UDP_thread_entry>:
/* USER CODE BEGIN 1 */

static VOID app_UDP_thread_entry(ULONG thread_input)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800e5f2:	af04      	add	r7, sp, #16
 800e5f4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e5f8:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800e5fc:	6018      	str	r0, [r3, #0]
  UCHAR data_buffer[512];
  UINT bytes_read;
  NX_PACKET *server_packet;
  NX_PACKET *data_packet;

  UINT pkt_number = 0;	/* packet number */
 800e5fe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e602:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800e606:	2200      	movs	r2, #0
 800e608:	601a      	str	r2, [r3, #0]
  UINT offset = 0;
 800e60a:	2300      	movs	r3, #0
 800e60c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  UINT packet_size = 1472;  /* Maximum safe packet size for Ethernet without fragmentation */
 800e610:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
 800e614:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
  UINT header_size = sizeof(UINT);  /* Size of the packet number header */
 800e618:	2304      	movs	r3, #4
 800e61a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

  /* create the UDP socket */
  ret = nx_udp_socket_create(&NetXDuoEthIpInstance, &UDPSocket, "UDP Client Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, NX_IP_TIME_TO_LIVE, QUEUE_MAX_SIZE);
 800e61e:	2378      	movs	r3, #120	; 0x78
 800e620:	9303      	str	r3, [sp, #12]
 800e622:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e626:	9302      	str	r3, [sp, #8]
 800e628:	2380      	movs	r3, #128	; 0x80
 800e62a:	9301      	str	r3, [sp, #4]
 800e62c:	2300      	movs	r3, #0
 800e62e:	9300      	str	r3, [sp, #0]
 800e630:	2300      	movs	r3, #0
 800e632:	4a52      	ldr	r2, [pc, #328]	; (800e77c <app_UDP_thread_entry+0x190>)
 800e634:	4952      	ldr	r1, [pc, #328]	; (800e780 <app_UDP_thread_entry+0x194>)
 800e636:	4853      	ldr	r0, [pc, #332]	; (800e784 <app_UDP_thread_entry+0x198>)
 800e638:	f7fc fd02 	bl	800b040 <_nxe_udp_socket_create>
 800e63c:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
  if (ret != NX_SUCCESS)
 800e640:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800e644:	2b00      	cmp	r3, #0
 800e646:	d001      	beq.n	800e64c <app_UDP_thread_entry+0x60>
  {
    Error_Handler();
 800e648:	f7f2 f930 	bl	80008ac <Error_Handler>
  }

  /* bind UDP socket to the DEFAULT PORT */
  ret = nx_udp_socket_bind(&UDPSocket, DEFAULT_PORT, TX_WAIT_FOREVER);
 800e64c:	f04f 32ff 	mov.w	r2, #4294967295
 800e650:	f241 7170 	movw	r1, #6000	; 0x1770
 800e654:	484a      	ldr	r0, [pc, #296]	; (800e780 <app_UDP_thread_entry+0x194>)
 800e656:	f7fc fcad 	bl	800afb4 <_nxe_udp_socket_bind>
 800e65a:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
  if (ret != NX_SUCCESS)
 800e65e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800e662:	2b00      	cmp	r3, #0
 800e664:	d069      	beq.n	800e73a <app_UDP_thread_entry+0x14e>
  {
    Error_Handler();
 800e666:	f7f2 f921 	bl	80008ac <Error_Handler>
  }

  while (offset < MEMORY_SIZE)
 800e66a:	e066      	b.n	800e73a <app_UDP_thread_entry+0x14e>
  {
    TX_MEMSET(data_buffer, '\0', sizeof(data_buffer));
 800e66c:	f107 0314 	add.w	r3, r7, #20
 800e670:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e674:	2100      	movs	r1, #0
 800e676:	4618      	mov	r0, r3
 800e678:	f000 fb20 	bl	800ecbc <memset>

    /* create the packet to send over the UDP socket */
    ret = nx_packet_allocate(&NxAppPool, &data_packet, NX_UDP_PACKET, TX_WAIT_FOREVER);
 800e67c:	f107 0110 	add.w	r1, r7, #16
 800e680:	f04f 33ff 	mov.w	r3, #4294967295
 800e684:	222c      	movs	r2, #44	; 0x2c
 800e686:	4840      	ldr	r0, [pc, #256]	; (800e788 <app_UDP_thread_entry+0x19c>)
 800e688:	f7fc fa82 	bl	800ab90 <_nxe_packet_allocate>
 800e68c:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
    if (ret != NX_SUCCESS)
 800e690:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800e694:	2b00      	cmp	r3, #0
 800e696:	d001      	beq.n	800e69c <app_UDP_thread_entry+0xb0>
    {
      Error_Handler();
 800e698:	f7f2 f908 	bl	80008ac <Error_Handler>
    }

    /* Determine the size of the current packet */
    ULONG current_packet_size = (MEMORY_SIZE - offset) > (packet_size - header_size) ? (packet_size - header_size) : (MEMORY_SIZE - offset);
 800e69c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e6a0:	f5c3 4248 	rsb	r2, r3, #51200	; 0xc800
 800e6a4:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 800e6a8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800e6ac:	1acb      	subs	r3, r1, r3
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	bf28      	it	cs
 800e6b2:	4613      	movcs	r3, r2
 800e6b4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

    /* Append packet number to the packet */
    ret = nx_packet_data_append(data_packet, &pkt_number, header_size, &NxAppPool, TX_WAIT_FOREVER);
 800e6b8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e6bc:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800e6c0:	6818      	ldr	r0, [r3, #0]
 800e6c2:	f107 010c 	add.w	r1, r7, #12
 800e6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	4b2e      	ldr	r3, [pc, #184]	; (800e788 <app_UDP_thread_entry+0x19c>)
 800e6ce:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800e6d2:	f7fc faa3 	bl	800ac1c <_nxe_packet_data_append>
 800e6d6:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218

    /* Append data from the memory area to the packet */
    ret = nx_packet_data_append(data_packet, (VOID *)(memory_area + offset), current_packet_size, &NxAppPool, TX_WAIT_FOREVER);
 800e6da:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e6de:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800e6e2:	6818      	ldr	r0, [r3, #0]
 800e6e4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e6e8:	4a28      	ldr	r2, [pc, #160]	; (800e78c <app_UDP_thread_entry+0x1a0>)
 800e6ea:	1899      	adds	r1, r3, r2
 800e6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e6f0:	9300      	str	r3, [sp, #0]
 800e6f2:	4b25      	ldr	r3, [pc, #148]	; (800e788 <app_UDP_thread_entry+0x19c>)
 800e6f4:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800e6f8:	f7fc fa90 	bl	800ac1c <_nxe_packet_data_append>
 800e6fc:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
    if (ret != NX_SUCCESS)
 800e700:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800e704:	2b00      	cmp	r3, #0
 800e706:	d001      	beq.n	800e70c <app_UDP_thread_entry+0x120>
    {
      Error_Handler();
 800e708:	f7f2 f8d0 	bl	80008ac <Error_Handler>
    }

    /* Send the packet */
    ret = nx_udp_socket_send(&UDPSocket, data_packet, UDP_SERVER_ADDRESS, UDP_SERVER_PORT);
 800e70c:	f107 0110 	add.w	r1, r7, #16
 800e710:	f241 7370 	movw	r3, #6000	; 0x1770
 800e714:	4a1e      	ldr	r2, [pc, #120]	; (800e790 <app_UDP_thread_entry+0x1a4>)
 800e716:	481a      	ldr	r0, [pc, #104]	; (800e780 <app_UDP_thread_entry+0x194>)
 800e718:	f7fc fd62 	bl	800b1e0 <_nxe_udp_socket_send>
 800e71c:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
    if (ret != NX_SUCCESS)
 800e720:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800e724:	2b00      	cmp	r3, #0
 800e726:	d001      	beq.n	800e72c <app_UDP_thread_entry+0x140>
    {
      Error_Handler();
 800e728:	f7f2 f8c0 	bl	80008ac <Error_Handler>
    }

    /* Move the offset for the next packet */
    offset += current_packet_size;
 800e72c:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800e730:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800e734:	4413      	add	r3, r2
 800e736:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  while (offset < MEMORY_SIZE)
 800e73a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e73e:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 800e742:	d393      	bcc.n	800e66c <app_UDP_thread_entry+0x80>
  }

  /* unbind the socket and delete it */
  nx_udp_socket_unbind(&UDPSocket);
 800e744:	480e      	ldr	r0, [pc, #56]	; (800e780 <app_UDP_thread_entry+0x194>)
 800e746:	f7fc fdd1 	bl	800b2ec <_nxe_udp_socket_unbind>
  nx_udp_socket_delete(&UDPSocket);
 800e74a:	480d      	ldr	r0, [pc, #52]	; (800e780 <app_UDP_thread_entry+0x194>)
 800e74c:	f7fc fd0c 	bl	800b168 <_nxe_udp_socket_delete>

  if (offset >= MEMORY_SIZE)
 800e750:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e754:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 800e758:	d308      	bcc.n	800e76c <app_UDP_thread_entry+0x180>
  {
    HAL_PWR_DisableWakeUpPin(PWR_WKUP1);
 800e75a:	2001      	movs	r0, #1
 800e75c:	f7f4 fdfa 	bl	8003354 <HAL_PWR_DisableWakeUpPin>
    HAL_PWR_EnableWakeUpPin(PWR_WKUP1);
 800e760:	2001      	movs	r0, #1
 800e762:	f7f4 fde1 	bl	8003328 <HAL_PWR_EnableWakeUpPin>
    HAL_PWR_EnterSTANDBYMode();
 800e766:	f7f4 fe09 	bl	800337c <HAL_PWR_EnterSTANDBYMode>
  }
  else
  {
    Error_Handler();
  }
}
 800e76a:	e001      	b.n	800e770 <app_UDP_thread_entry+0x184>
    Error_Handler();
 800e76c:	f7f2 f89e 	bl	80008ac <Error_Handler>
}
 800e770:	bf00      	nop
 800e772:	f507 770a 	add.w	r7, r7, #552	; 0x228
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	0800fa2c 	.word	0x0800fa2c
 800e780:	20014fec 	.word	0x20014fec
 800e784:	20015158 	.word	0x20015158
 800e788:	2001511c 	.word	0x2001511c
 800e78c:	20007f14 	.word	0x20007f14
 800e790:	c0a80165 	.word	0xc0a80165

0800e794 <app_link_thread_entry>:
* @brief  Link thread entry
* @param thread_input: ULONG thread parameter
* @retval none
*/
static VOID app_link_thread_entry(ULONG thread_input)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b088      	sub	sp, #32
 800e798:	af02      	add	r7, sp, #8
 800e79a:	6078      	str	r0, [r7, #4]
  ULONG actual_status;
  UINT linkdown = 0, status;
 800e79c:	2300      	movs	r3, #0
 800e79e:	617b      	str	r3, [r7, #20]

  while(1)
  {
    /* Get Physical Link status. */
    status = nx_ip_interface_status_check(&NetXDuoEthIpInstance, 0, NX_IP_LINK_ENABLED,
 800e7a0:	f107 030c 	add.w	r3, r7, #12
 800e7a4:	220a      	movs	r2, #10
 800e7a6:	9200      	str	r2, [sp, #0]
 800e7a8:	2204      	movs	r2, #4
 800e7aa:	2100      	movs	r1, #0
 800e7ac:	481b      	ldr	r0, [pc, #108]	; (800e81c <app_link_thread_entry+0x88>)
 800e7ae:	f7fc f997 	bl	800aae0 <_nxe_ip_interface_status_check>
 800e7b2:	6138      	str	r0, [r7, #16]
                                      &actual_status, 10);

    if(status == NX_SUCCESS)
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d123      	bne.n	800e802 <app_link_thread_entry+0x6e>
    {
      if(linkdown == 1)
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	d128      	bne.n	800e812 <app_link_thread_entry+0x7e>
      {
        linkdown = 0;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	617b      	str	r3, [r7, #20]
        status = nx_ip_interface_status_check(&NetXDuoEthIpInstance, 0, NX_IP_ADDRESS_RESOLVED,
 800e7c4:	f107 030c 	add.w	r3, r7, #12
 800e7c8:	220a      	movs	r2, #10
 800e7ca:	9200      	str	r2, [sp, #0]
 800e7cc:	2202      	movs	r2, #2
 800e7ce:	2100      	movs	r1, #0
 800e7d0:	4812      	ldr	r0, [pc, #72]	; (800e81c <app_link_thread_entry+0x88>)
 800e7d2:	f7fc f985 	bl	800aae0 <_nxe_ip_interface_status_check>
 800e7d6:	6138      	str	r0, [r7, #16]
                                      &actual_status, 10);
        if(status == NX_SUCCESS)
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d106      	bne.n	800e7ec <app_link_thread_entry+0x58>
        {
          /* The network cable is connected again. */
          printf("The network cable is connected again.\n");
 800e7de:	4810      	ldr	r0, [pc, #64]	; (800e820 <app_link_thread_entry+0x8c>)
 800e7e0:	f000 f98c 	bl	800eafc <puts>
          /* Print UDP Echo Server is available again. */
          printf("UDP Echo Server is available again.\n");
 800e7e4:	480f      	ldr	r0, [pc, #60]	; (800e824 <app_link_thread_entry+0x90>)
 800e7e6:	f000 f989 	bl	800eafc <puts>
 800e7ea:	e012      	b.n	800e812 <app_link_thread_entry+0x7e>
        }
        else
        {
          /* The network cable is connected. */
          printf("The network cable is connected.\n");
 800e7ec:	480e      	ldr	r0, [pc, #56]	; (800e828 <app_link_thread_entry+0x94>)
 800e7ee:	f000 f985 	bl	800eafc <puts>
          /* Send command to Enable Nx driver. */
          nx_ip_driver_direct_command(&NetXDuoEthIpInstance, NX_LINK_ENABLE,
 800e7f2:	f107 030c 	add.w	r3, r7, #12
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	2102      	movs	r1, #2
 800e7fa:	4808      	ldr	r0, [pc, #32]	; (800e81c <app_link_thread_entry+0x88>)
 800e7fc:	f7fc f930 	bl	800aa60 <_nxe_ip_driver_direct_command>
 800e800:	e007      	b.n	800e812 <app_link_thread_entry+0x7e>
        }
      }
    }
    else
    {
      if(0 == linkdown)
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d104      	bne.n	800e812 <app_link_thread_entry+0x7e>
      {
        linkdown = 1;
 800e808:	2301      	movs	r3, #1
 800e80a:	617b      	str	r3, [r7, #20]
        /* The network cable is not connected. */
        printf("The network cable is not connected.\n");
 800e80c:	4807      	ldr	r0, [pc, #28]	; (800e82c <app_link_thread_entry+0x98>)
 800e80e:	f000 f975 	bl	800eafc <puts>
      }
    }

    tx_thread_sleep(NX_ETH_CABLE_CONNECTION_CHECK_PERIOD);
 800e812:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e816:	f7fe fd55 	bl	800d2c4 <_tx_thread_sleep>
    status = nx_ip_interface_status_check(&NetXDuoEthIpInstance, 0, NX_IP_LINK_ENABLED,
 800e81a:	e7c1      	b.n	800e7a0 <app_link_thread_entry+0xc>
 800e81c:	20015158 	.word	0x20015158
 800e820:	0800fa40 	.word	0x0800fa40
 800e824:	0800fa68 	.word	0x0800fa68
 800e828:	0800fa8c 	.word	0x0800fa8c
 800e82c:	0800faac 	.word	0x0800faac

0800e830 <rand>:
 800e830:	4b16      	ldr	r3, [pc, #88]	; (800e88c <rand+0x5c>)
 800e832:	b510      	push	{r4, lr}
 800e834:	681c      	ldr	r4, [r3, #0]
 800e836:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e838:	b9b3      	cbnz	r3, 800e868 <rand+0x38>
 800e83a:	2018      	movs	r0, #24
 800e83c:	f000 fb30 	bl	800eea0 <malloc>
 800e840:	4602      	mov	r2, r0
 800e842:	6320      	str	r0, [r4, #48]	; 0x30
 800e844:	b920      	cbnz	r0, 800e850 <rand+0x20>
 800e846:	4b12      	ldr	r3, [pc, #72]	; (800e890 <rand+0x60>)
 800e848:	2152      	movs	r1, #82	; 0x52
 800e84a:	4812      	ldr	r0, [pc, #72]	; (800e894 <rand+0x64>)
 800e84c:	f000 fabe 	bl	800edcc <__assert_func>
 800e850:	4911      	ldr	r1, [pc, #68]	; (800e898 <rand+0x68>)
 800e852:	4b12      	ldr	r3, [pc, #72]	; (800e89c <rand+0x6c>)
 800e854:	e9c0 1300 	strd	r1, r3, [r0]
 800e858:	4b11      	ldr	r3, [pc, #68]	; (800e8a0 <rand+0x70>)
 800e85a:	2100      	movs	r1, #0
 800e85c:	6083      	str	r3, [r0, #8]
 800e85e:	230b      	movs	r3, #11
 800e860:	8183      	strh	r3, [r0, #12]
 800e862:	2001      	movs	r0, #1
 800e864:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e868:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e86a:	480e      	ldr	r0, [pc, #56]	; (800e8a4 <rand+0x74>)
 800e86c:	690b      	ldr	r3, [r1, #16]
 800e86e:	694c      	ldr	r4, [r1, #20]
 800e870:	4a0d      	ldr	r2, [pc, #52]	; (800e8a8 <rand+0x78>)
 800e872:	4358      	muls	r0, r3
 800e874:	fb02 0004 	mla	r0, r2, r4, r0
 800e878:	fba3 3202 	umull	r3, r2, r3, r2
 800e87c:	3301      	adds	r3, #1
 800e87e:	eb40 0002 	adc.w	r0, r0, r2
 800e882:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e886:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e88a:	bd10      	pop	{r4, pc}
 800e88c:	200000e4 	.word	0x200000e4
 800e890:	0800fae8 	.word	0x0800fae8
 800e894:	0800faff 	.word	0x0800faff
 800e898:	abcd330e 	.word	0xabcd330e
 800e89c:	e66d1234 	.word	0xe66d1234
 800e8a0:	0005deec 	.word	0x0005deec
 800e8a4:	5851f42d 	.word	0x5851f42d
 800e8a8:	4c957f2d 	.word	0x4c957f2d

0800e8ac <std>:
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	b510      	push	{r4, lr}
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	6083      	str	r3, [r0, #8]
 800e8b4:	8181      	strh	r1, [r0, #12]
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	6643      	str	r3, [r0, #100]	; 0x64
 800e8ba:	81c2      	strh	r2, [r0, #14]
 800e8bc:	2208      	movs	r2, #8
 800e8be:	6183      	str	r3, [r0, #24]
 800e8c0:	e9c0 3300 	strd	r3, r3, [r0]
 800e8c4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8c8:	305c      	adds	r0, #92	; 0x5c
 800e8ca:	f000 f9f7 	bl	800ecbc <memset>
 800e8ce:	4b0d      	ldr	r3, [pc, #52]	; (800e904 <std+0x58>)
 800e8d0:	6224      	str	r4, [r4, #32]
 800e8d2:	6263      	str	r3, [r4, #36]	; 0x24
 800e8d4:	4b0c      	ldr	r3, [pc, #48]	; (800e908 <std+0x5c>)
 800e8d6:	62a3      	str	r3, [r4, #40]	; 0x28
 800e8d8:	4b0c      	ldr	r3, [pc, #48]	; (800e90c <std+0x60>)
 800e8da:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e8dc:	4b0c      	ldr	r3, [pc, #48]	; (800e910 <std+0x64>)
 800e8de:	6323      	str	r3, [r4, #48]	; 0x30
 800e8e0:	4b0c      	ldr	r3, [pc, #48]	; (800e914 <std+0x68>)
 800e8e2:	429c      	cmp	r4, r3
 800e8e4:	d006      	beq.n	800e8f4 <std+0x48>
 800e8e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e8ea:	4294      	cmp	r4, r2
 800e8ec:	d002      	beq.n	800e8f4 <std+0x48>
 800e8ee:	33d0      	adds	r3, #208	; 0xd0
 800e8f0:	429c      	cmp	r4, r3
 800e8f2:	d105      	bne.n	800e900 <std+0x54>
 800e8f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8fc:	f000 ba56 	b.w	800edac <__retarget_lock_init_recursive>
 800e900:	bd10      	pop	{r4, pc}
 800e902:	bf00      	nop
 800e904:	0800eb0d 	.word	0x0800eb0d
 800e908:	0800eb2f 	.word	0x0800eb2f
 800e90c:	0800eb67 	.word	0x0800eb67
 800e910:	0800eb8b 	.word	0x0800eb8b
 800e914:	20015920 	.word	0x20015920

0800e918 <stdio_exit_handler>:
 800e918:	4a02      	ldr	r2, [pc, #8]	; (800e924 <stdio_exit_handler+0xc>)
 800e91a:	4903      	ldr	r1, [pc, #12]	; (800e928 <stdio_exit_handler+0x10>)
 800e91c:	4803      	ldr	r0, [pc, #12]	; (800e92c <stdio_exit_handler+0x14>)
 800e91e:	f000 b869 	b.w	800e9f4 <_fwalk_sglue>
 800e922:	bf00      	nop
 800e924:	2000008c 	.word	0x2000008c
 800e928:	0800f6bd 	.word	0x0800f6bd
 800e92c:	20000098 	.word	0x20000098

0800e930 <cleanup_stdio>:
 800e930:	6841      	ldr	r1, [r0, #4]
 800e932:	4b0c      	ldr	r3, [pc, #48]	; (800e964 <cleanup_stdio+0x34>)
 800e934:	4299      	cmp	r1, r3
 800e936:	b510      	push	{r4, lr}
 800e938:	4604      	mov	r4, r0
 800e93a:	d001      	beq.n	800e940 <cleanup_stdio+0x10>
 800e93c:	f000 febe 	bl	800f6bc <_fflush_r>
 800e940:	68a1      	ldr	r1, [r4, #8]
 800e942:	4b09      	ldr	r3, [pc, #36]	; (800e968 <cleanup_stdio+0x38>)
 800e944:	4299      	cmp	r1, r3
 800e946:	d002      	beq.n	800e94e <cleanup_stdio+0x1e>
 800e948:	4620      	mov	r0, r4
 800e94a:	f000 feb7 	bl	800f6bc <_fflush_r>
 800e94e:	68e1      	ldr	r1, [r4, #12]
 800e950:	4b06      	ldr	r3, [pc, #24]	; (800e96c <cleanup_stdio+0x3c>)
 800e952:	4299      	cmp	r1, r3
 800e954:	d004      	beq.n	800e960 <cleanup_stdio+0x30>
 800e956:	4620      	mov	r0, r4
 800e958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e95c:	f000 beae 	b.w	800f6bc <_fflush_r>
 800e960:	bd10      	pop	{r4, pc}
 800e962:	bf00      	nop
 800e964:	20015920 	.word	0x20015920
 800e968:	20015988 	.word	0x20015988
 800e96c:	200159f0 	.word	0x200159f0

0800e970 <global_stdio_init.part.0>:
 800e970:	b510      	push	{r4, lr}
 800e972:	4b0b      	ldr	r3, [pc, #44]	; (800e9a0 <global_stdio_init.part.0+0x30>)
 800e974:	2104      	movs	r1, #4
 800e976:	4c0b      	ldr	r4, [pc, #44]	; (800e9a4 <global_stdio_init.part.0+0x34>)
 800e978:	4a0b      	ldr	r2, [pc, #44]	; (800e9a8 <global_stdio_init.part.0+0x38>)
 800e97a:	4620      	mov	r0, r4
 800e97c:	601a      	str	r2, [r3, #0]
 800e97e:	2200      	movs	r2, #0
 800e980:	f7ff ff94 	bl	800e8ac <std>
 800e984:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e988:	2201      	movs	r2, #1
 800e98a:	2109      	movs	r1, #9
 800e98c:	f7ff ff8e 	bl	800e8ac <std>
 800e990:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e994:	2202      	movs	r2, #2
 800e996:	2112      	movs	r1, #18
 800e998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e99c:	f7ff bf86 	b.w	800e8ac <std>
 800e9a0:	20015a58 	.word	0x20015a58
 800e9a4:	20015920 	.word	0x20015920
 800e9a8:	0800e919 	.word	0x0800e919

0800e9ac <__sfp_lock_acquire>:
 800e9ac:	4801      	ldr	r0, [pc, #4]	; (800e9b4 <__sfp_lock_acquire+0x8>)
 800e9ae:	f000 b9fe 	b.w	800edae <__retarget_lock_acquire_recursive>
 800e9b2:	bf00      	nop
 800e9b4:	20015a61 	.word	0x20015a61

0800e9b8 <__sfp_lock_release>:
 800e9b8:	4801      	ldr	r0, [pc, #4]	; (800e9c0 <__sfp_lock_release+0x8>)
 800e9ba:	f000 b9f9 	b.w	800edb0 <__retarget_lock_release_recursive>
 800e9be:	bf00      	nop
 800e9c0:	20015a61 	.word	0x20015a61

0800e9c4 <__sinit>:
 800e9c4:	b510      	push	{r4, lr}
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	f7ff fff0 	bl	800e9ac <__sfp_lock_acquire>
 800e9cc:	6a23      	ldr	r3, [r4, #32]
 800e9ce:	b11b      	cbz	r3, 800e9d8 <__sinit+0x14>
 800e9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9d4:	f7ff bff0 	b.w	800e9b8 <__sfp_lock_release>
 800e9d8:	4b04      	ldr	r3, [pc, #16]	; (800e9ec <__sinit+0x28>)
 800e9da:	6223      	str	r3, [r4, #32]
 800e9dc:	4b04      	ldr	r3, [pc, #16]	; (800e9f0 <__sinit+0x2c>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d1f5      	bne.n	800e9d0 <__sinit+0xc>
 800e9e4:	f7ff ffc4 	bl	800e970 <global_stdio_init.part.0>
 800e9e8:	e7f2      	b.n	800e9d0 <__sinit+0xc>
 800e9ea:	bf00      	nop
 800e9ec:	0800e931 	.word	0x0800e931
 800e9f0:	20015a58 	.word	0x20015a58

0800e9f4 <_fwalk_sglue>:
 800e9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9f8:	4607      	mov	r7, r0
 800e9fa:	4688      	mov	r8, r1
 800e9fc:	4614      	mov	r4, r2
 800e9fe:	2600      	movs	r6, #0
 800ea00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea04:	f1b9 0901 	subs.w	r9, r9, #1
 800ea08:	d505      	bpl.n	800ea16 <_fwalk_sglue+0x22>
 800ea0a:	6824      	ldr	r4, [r4, #0]
 800ea0c:	2c00      	cmp	r4, #0
 800ea0e:	d1f7      	bne.n	800ea00 <_fwalk_sglue+0xc>
 800ea10:	4630      	mov	r0, r6
 800ea12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea16:	89ab      	ldrh	r3, [r5, #12]
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d907      	bls.n	800ea2c <_fwalk_sglue+0x38>
 800ea1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea20:	3301      	adds	r3, #1
 800ea22:	d003      	beq.n	800ea2c <_fwalk_sglue+0x38>
 800ea24:	4629      	mov	r1, r5
 800ea26:	4638      	mov	r0, r7
 800ea28:	47c0      	blx	r8
 800ea2a:	4306      	orrs	r6, r0
 800ea2c:	3568      	adds	r5, #104	; 0x68
 800ea2e:	e7e9      	b.n	800ea04 <_fwalk_sglue+0x10>

0800ea30 <iprintf>:
 800ea30:	b40f      	push	{r0, r1, r2, r3}
 800ea32:	b507      	push	{r0, r1, r2, lr}
 800ea34:	4906      	ldr	r1, [pc, #24]	; (800ea50 <iprintf+0x20>)
 800ea36:	ab04      	add	r3, sp, #16
 800ea38:	6808      	ldr	r0, [r1, #0]
 800ea3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea3e:	6881      	ldr	r1, [r0, #8]
 800ea40:	9301      	str	r3, [sp, #4]
 800ea42:	f000 fb0b 	bl	800f05c <_vfiprintf_r>
 800ea46:	b003      	add	sp, #12
 800ea48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea4c:	b004      	add	sp, #16
 800ea4e:	4770      	bx	lr
 800ea50:	200000e4 	.word	0x200000e4

0800ea54 <_puts_r>:
 800ea54:	6a03      	ldr	r3, [r0, #32]
 800ea56:	b570      	push	{r4, r5, r6, lr}
 800ea58:	4605      	mov	r5, r0
 800ea5a:	460e      	mov	r6, r1
 800ea5c:	6884      	ldr	r4, [r0, #8]
 800ea5e:	b90b      	cbnz	r3, 800ea64 <_puts_r+0x10>
 800ea60:	f7ff ffb0 	bl	800e9c4 <__sinit>
 800ea64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea66:	07db      	lsls	r3, r3, #31
 800ea68:	d405      	bmi.n	800ea76 <_puts_r+0x22>
 800ea6a:	89a3      	ldrh	r3, [r4, #12]
 800ea6c:	0598      	lsls	r0, r3, #22
 800ea6e:	d402      	bmi.n	800ea76 <_puts_r+0x22>
 800ea70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea72:	f000 f99c 	bl	800edae <__retarget_lock_acquire_recursive>
 800ea76:	89a3      	ldrh	r3, [r4, #12]
 800ea78:	0719      	lsls	r1, r3, #28
 800ea7a:	d513      	bpl.n	800eaa4 <_puts_r+0x50>
 800ea7c:	6923      	ldr	r3, [r4, #16]
 800ea7e:	b18b      	cbz	r3, 800eaa4 <_puts_r+0x50>
 800ea80:	3e01      	subs	r6, #1
 800ea82:	68a3      	ldr	r3, [r4, #8]
 800ea84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	60a3      	str	r3, [r4, #8]
 800ea8c:	b9e9      	cbnz	r1, 800eaca <_puts_r+0x76>
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	da2e      	bge.n	800eaf0 <_puts_r+0x9c>
 800ea92:	4622      	mov	r2, r4
 800ea94:	210a      	movs	r1, #10
 800ea96:	4628      	mov	r0, r5
 800ea98:	f000 f87b 	bl	800eb92 <__swbuf_r>
 800ea9c:	3001      	adds	r0, #1
 800ea9e:	d007      	beq.n	800eab0 <_puts_r+0x5c>
 800eaa0:	250a      	movs	r5, #10
 800eaa2:	e007      	b.n	800eab4 <_puts_r+0x60>
 800eaa4:	4621      	mov	r1, r4
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	f000 f8b0 	bl	800ec0c <__swsetup_r>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	d0e7      	beq.n	800ea80 <_puts_r+0x2c>
 800eab0:	f04f 35ff 	mov.w	r5, #4294967295
 800eab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eab6:	07da      	lsls	r2, r3, #31
 800eab8:	d405      	bmi.n	800eac6 <_puts_r+0x72>
 800eaba:	89a3      	ldrh	r3, [r4, #12]
 800eabc:	059b      	lsls	r3, r3, #22
 800eabe:	d402      	bmi.n	800eac6 <_puts_r+0x72>
 800eac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eac2:	f000 f975 	bl	800edb0 <__retarget_lock_release_recursive>
 800eac6:	4628      	mov	r0, r5
 800eac8:	bd70      	pop	{r4, r5, r6, pc}
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	da04      	bge.n	800ead8 <_puts_r+0x84>
 800eace:	69a2      	ldr	r2, [r4, #24]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	dc06      	bgt.n	800eae2 <_puts_r+0x8e>
 800ead4:	290a      	cmp	r1, #10
 800ead6:	d004      	beq.n	800eae2 <_puts_r+0x8e>
 800ead8:	6823      	ldr	r3, [r4, #0]
 800eada:	1c5a      	adds	r2, r3, #1
 800eadc:	6022      	str	r2, [r4, #0]
 800eade:	7019      	strb	r1, [r3, #0]
 800eae0:	e7cf      	b.n	800ea82 <_puts_r+0x2e>
 800eae2:	4622      	mov	r2, r4
 800eae4:	4628      	mov	r0, r5
 800eae6:	f000 f854 	bl	800eb92 <__swbuf_r>
 800eaea:	3001      	adds	r0, #1
 800eaec:	d1c9      	bne.n	800ea82 <_puts_r+0x2e>
 800eaee:	e7df      	b.n	800eab0 <_puts_r+0x5c>
 800eaf0:	6823      	ldr	r3, [r4, #0]
 800eaf2:	250a      	movs	r5, #10
 800eaf4:	1c5a      	adds	r2, r3, #1
 800eaf6:	6022      	str	r2, [r4, #0]
 800eaf8:	701d      	strb	r5, [r3, #0]
 800eafa:	e7db      	b.n	800eab4 <_puts_r+0x60>

0800eafc <puts>:
 800eafc:	4b02      	ldr	r3, [pc, #8]	; (800eb08 <puts+0xc>)
 800eafe:	4601      	mov	r1, r0
 800eb00:	6818      	ldr	r0, [r3, #0]
 800eb02:	f7ff bfa7 	b.w	800ea54 <_puts_r>
 800eb06:	bf00      	nop
 800eb08:	200000e4 	.word	0x200000e4

0800eb0c <__sread>:
 800eb0c:	b510      	push	{r4, lr}
 800eb0e:	460c      	mov	r4, r1
 800eb10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb14:	f000 f8fc 	bl	800ed10 <_read_r>
 800eb18:	2800      	cmp	r0, #0
 800eb1a:	bfab      	itete	ge
 800eb1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb1e:	89a3      	ldrhlt	r3, [r4, #12]
 800eb20:	181b      	addge	r3, r3, r0
 800eb22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb26:	bfac      	ite	ge
 800eb28:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb2a:	81a3      	strhlt	r3, [r4, #12]
 800eb2c:	bd10      	pop	{r4, pc}

0800eb2e <__swrite>:
 800eb2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb32:	461f      	mov	r7, r3
 800eb34:	898b      	ldrh	r3, [r1, #12]
 800eb36:	4605      	mov	r5, r0
 800eb38:	460c      	mov	r4, r1
 800eb3a:	05db      	lsls	r3, r3, #23
 800eb3c:	4616      	mov	r6, r2
 800eb3e:	d505      	bpl.n	800eb4c <__swrite+0x1e>
 800eb40:	2302      	movs	r3, #2
 800eb42:	2200      	movs	r2, #0
 800eb44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb48:	f000 f8d0 	bl	800ecec <_lseek_r>
 800eb4c:	89a3      	ldrh	r3, [r4, #12]
 800eb4e:	4632      	mov	r2, r6
 800eb50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb54:	4628      	mov	r0, r5
 800eb56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb5a:	81a3      	strh	r3, [r4, #12]
 800eb5c:	463b      	mov	r3, r7
 800eb5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb62:	f000 b8e7 	b.w	800ed34 <_write_r>

0800eb66 <__sseek>:
 800eb66:	b510      	push	{r4, lr}
 800eb68:	460c      	mov	r4, r1
 800eb6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb6e:	f000 f8bd 	bl	800ecec <_lseek_r>
 800eb72:	1c43      	adds	r3, r0, #1
 800eb74:	89a3      	ldrh	r3, [r4, #12]
 800eb76:	bf15      	itete	ne
 800eb78:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb82:	81a3      	strheq	r3, [r4, #12]
 800eb84:	bf18      	it	ne
 800eb86:	81a3      	strhne	r3, [r4, #12]
 800eb88:	bd10      	pop	{r4, pc}

0800eb8a <__sclose>:
 800eb8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb8e:	f000 b89d 	b.w	800eccc <_close_r>

0800eb92 <__swbuf_r>:
 800eb92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb94:	460e      	mov	r6, r1
 800eb96:	4614      	mov	r4, r2
 800eb98:	4605      	mov	r5, r0
 800eb9a:	b118      	cbz	r0, 800eba4 <__swbuf_r+0x12>
 800eb9c:	6a03      	ldr	r3, [r0, #32]
 800eb9e:	b90b      	cbnz	r3, 800eba4 <__swbuf_r+0x12>
 800eba0:	f7ff ff10 	bl	800e9c4 <__sinit>
 800eba4:	69a3      	ldr	r3, [r4, #24]
 800eba6:	60a3      	str	r3, [r4, #8]
 800eba8:	89a3      	ldrh	r3, [r4, #12]
 800ebaa:	071a      	lsls	r2, r3, #28
 800ebac:	d525      	bpl.n	800ebfa <__swbuf_r+0x68>
 800ebae:	6923      	ldr	r3, [r4, #16]
 800ebb0:	b31b      	cbz	r3, 800ebfa <__swbuf_r+0x68>
 800ebb2:	6823      	ldr	r3, [r4, #0]
 800ebb4:	b2f6      	uxtb	r6, r6
 800ebb6:	6922      	ldr	r2, [r4, #16]
 800ebb8:	4637      	mov	r7, r6
 800ebba:	1a98      	subs	r0, r3, r2
 800ebbc:	6963      	ldr	r3, [r4, #20]
 800ebbe:	4283      	cmp	r3, r0
 800ebc0:	dc04      	bgt.n	800ebcc <__swbuf_r+0x3a>
 800ebc2:	4621      	mov	r1, r4
 800ebc4:	4628      	mov	r0, r5
 800ebc6:	f000 fd79 	bl	800f6bc <_fflush_r>
 800ebca:	b9e0      	cbnz	r0, 800ec06 <__swbuf_r+0x74>
 800ebcc:	68a3      	ldr	r3, [r4, #8]
 800ebce:	3b01      	subs	r3, #1
 800ebd0:	60a3      	str	r3, [r4, #8]
 800ebd2:	6823      	ldr	r3, [r4, #0]
 800ebd4:	1c5a      	adds	r2, r3, #1
 800ebd6:	6022      	str	r2, [r4, #0]
 800ebd8:	701e      	strb	r6, [r3, #0]
 800ebda:	1c43      	adds	r3, r0, #1
 800ebdc:	6962      	ldr	r2, [r4, #20]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d004      	beq.n	800ebec <__swbuf_r+0x5a>
 800ebe2:	89a3      	ldrh	r3, [r4, #12]
 800ebe4:	07db      	lsls	r3, r3, #31
 800ebe6:	d506      	bpl.n	800ebf6 <__swbuf_r+0x64>
 800ebe8:	2e0a      	cmp	r6, #10
 800ebea:	d104      	bne.n	800ebf6 <__swbuf_r+0x64>
 800ebec:	4621      	mov	r1, r4
 800ebee:	4628      	mov	r0, r5
 800ebf0:	f000 fd64 	bl	800f6bc <_fflush_r>
 800ebf4:	b938      	cbnz	r0, 800ec06 <__swbuf_r+0x74>
 800ebf6:	4638      	mov	r0, r7
 800ebf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebfa:	4621      	mov	r1, r4
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	f000 f805 	bl	800ec0c <__swsetup_r>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	d0d5      	beq.n	800ebb2 <__swbuf_r+0x20>
 800ec06:	f04f 37ff 	mov.w	r7, #4294967295
 800ec0a:	e7f4      	b.n	800ebf6 <__swbuf_r+0x64>

0800ec0c <__swsetup_r>:
 800ec0c:	b538      	push	{r3, r4, r5, lr}
 800ec0e:	4b2a      	ldr	r3, [pc, #168]	; (800ecb8 <__swsetup_r+0xac>)
 800ec10:	4605      	mov	r5, r0
 800ec12:	460c      	mov	r4, r1
 800ec14:	6818      	ldr	r0, [r3, #0]
 800ec16:	b118      	cbz	r0, 800ec20 <__swsetup_r+0x14>
 800ec18:	6a03      	ldr	r3, [r0, #32]
 800ec1a:	b90b      	cbnz	r3, 800ec20 <__swsetup_r+0x14>
 800ec1c:	f7ff fed2 	bl	800e9c4 <__sinit>
 800ec20:	89a3      	ldrh	r3, [r4, #12]
 800ec22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec26:	0718      	lsls	r0, r3, #28
 800ec28:	d422      	bmi.n	800ec70 <__swsetup_r+0x64>
 800ec2a:	06d9      	lsls	r1, r3, #27
 800ec2c:	d407      	bmi.n	800ec3e <__swsetup_r+0x32>
 800ec2e:	2309      	movs	r3, #9
 800ec30:	602b      	str	r3, [r5, #0]
 800ec32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ec36:	f04f 30ff 	mov.w	r0, #4294967295
 800ec3a:	81a3      	strh	r3, [r4, #12]
 800ec3c:	e034      	b.n	800eca8 <__swsetup_r+0x9c>
 800ec3e:	0758      	lsls	r0, r3, #29
 800ec40:	d512      	bpl.n	800ec68 <__swsetup_r+0x5c>
 800ec42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec44:	b141      	cbz	r1, 800ec58 <__swsetup_r+0x4c>
 800ec46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec4a:	4299      	cmp	r1, r3
 800ec4c:	d002      	beq.n	800ec54 <__swsetup_r+0x48>
 800ec4e:	4628      	mov	r0, r5
 800ec50:	f000 f8da 	bl	800ee08 <_free_r>
 800ec54:	2300      	movs	r3, #0
 800ec56:	6363      	str	r3, [r4, #52]	; 0x34
 800ec58:	89a3      	ldrh	r3, [r4, #12]
 800ec5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec5e:	81a3      	strh	r3, [r4, #12]
 800ec60:	2300      	movs	r3, #0
 800ec62:	6063      	str	r3, [r4, #4]
 800ec64:	6923      	ldr	r3, [r4, #16]
 800ec66:	6023      	str	r3, [r4, #0]
 800ec68:	89a3      	ldrh	r3, [r4, #12]
 800ec6a:	f043 0308 	orr.w	r3, r3, #8
 800ec6e:	81a3      	strh	r3, [r4, #12]
 800ec70:	6923      	ldr	r3, [r4, #16]
 800ec72:	b94b      	cbnz	r3, 800ec88 <__swsetup_r+0x7c>
 800ec74:	89a3      	ldrh	r3, [r4, #12]
 800ec76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec7e:	d003      	beq.n	800ec88 <__swsetup_r+0x7c>
 800ec80:	4621      	mov	r1, r4
 800ec82:	4628      	mov	r0, r5
 800ec84:	f000 fd79 	bl	800f77a <__smakebuf_r>
 800ec88:	89a0      	ldrh	r0, [r4, #12]
 800ec8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec8e:	f010 0301 	ands.w	r3, r0, #1
 800ec92:	d00a      	beq.n	800ecaa <__swsetup_r+0x9e>
 800ec94:	2300      	movs	r3, #0
 800ec96:	60a3      	str	r3, [r4, #8]
 800ec98:	6963      	ldr	r3, [r4, #20]
 800ec9a:	425b      	negs	r3, r3
 800ec9c:	61a3      	str	r3, [r4, #24]
 800ec9e:	6923      	ldr	r3, [r4, #16]
 800eca0:	b943      	cbnz	r3, 800ecb4 <__swsetup_r+0xa8>
 800eca2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eca6:	d1c4      	bne.n	800ec32 <__swsetup_r+0x26>
 800eca8:	bd38      	pop	{r3, r4, r5, pc}
 800ecaa:	0781      	lsls	r1, r0, #30
 800ecac:	bf58      	it	pl
 800ecae:	6963      	ldrpl	r3, [r4, #20]
 800ecb0:	60a3      	str	r3, [r4, #8]
 800ecb2:	e7f4      	b.n	800ec9e <__swsetup_r+0x92>
 800ecb4:	2000      	movs	r0, #0
 800ecb6:	e7f7      	b.n	800eca8 <__swsetup_r+0x9c>
 800ecb8:	200000e4 	.word	0x200000e4

0800ecbc <memset>:
 800ecbc:	4402      	add	r2, r0
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d100      	bne.n	800ecc6 <memset+0xa>
 800ecc4:	4770      	bx	lr
 800ecc6:	f803 1b01 	strb.w	r1, [r3], #1
 800ecca:	e7f9      	b.n	800ecc0 <memset+0x4>

0800eccc <_close_r>:
 800eccc:	b538      	push	{r3, r4, r5, lr}
 800ecce:	2300      	movs	r3, #0
 800ecd0:	4d05      	ldr	r5, [pc, #20]	; (800ece8 <_close_r+0x1c>)
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	4608      	mov	r0, r1
 800ecd6:	602b      	str	r3, [r5, #0]
 800ecd8:	f7f1 ffd7 	bl	8000c8a <_close>
 800ecdc:	1c43      	adds	r3, r0, #1
 800ecde:	d102      	bne.n	800ece6 <_close_r+0x1a>
 800ece0:	682b      	ldr	r3, [r5, #0]
 800ece2:	b103      	cbz	r3, 800ece6 <_close_r+0x1a>
 800ece4:	6023      	str	r3, [r4, #0]
 800ece6:	bd38      	pop	{r3, r4, r5, pc}
 800ece8:	20015a5c 	.word	0x20015a5c

0800ecec <_lseek_r>:
 800ecec:	b538      	push	{r3, r4, r5, lr}
 800ecee:	4604      	mov	r4, r0
 800ecf0:	4d06      	ldr	r5, [pc, #24]	; (800ed0c <_lseek_r+0x20>)
 800ecf2:	4608      	mov	r0, r1
 800ecf4:	4611      	mov	r1, r2
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	602a      	str	r2, [r5, #0]
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	f7f1 ffec 	bl	8000cd8 <_lseek>
 800ed00:	1c43      	adds	r3, r0, #1
 800ed02:	d102      	bne.n	800ed0a <_lseek_r+0x1e>
 800ed04:	682b      	ldr	r3, [r5, #0]
 800ed06:	b103      	cbz	r3, 800ed0a <_lseek_r+0x1e>
 800ed08:	6023      	str	r3, [r4, #0]
 800ed0a:	bd38      	pop	{r3, r4, r5, pc}
 800ed0c:	20015a5c 	.word	0x20015a5c

0800ed10 <_read_r>:
 800ed10:	b538      	push	{r3, r4, r5, lr}
 800ed12:	4604      	mov	r4, r0
 800ed14:	4d06      	ldr	r5, [pc, #24]	; (800ed30 <_read_r+0x20>)
 800ed16:	4608      	mov	r0, r1
 800ed18:	4611      	mov	r1, r2
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	602a      	str	r2, [r5, #0]
 800ed1e:	461a      	mov	r2, r3
 800ed20:	f7f1 ff7a 	bl	8000c18 <_read>
 800ed24:	1c43      	adds	r3, r0, #1
 800ed26:	d102      	bne.n	800ed2e <_read_r+0x1e>
 800ed28:	682b      	ldr	r3, [r5, #0]
 800ed2a:	b103      	cbz	r3, 800ed2e <_read_r+0x1e>
 800ed2c:	6023      	str	r3, [r4, #0]
 800ed2e:	bd38      	pop	{r3, r4, r5, pc}
 800ed30:	20015a5c 	.word	0x20015a5c

0800ed34 <_write_r>:
 800ed34:	b538      	push	{r3, r4, r5, lr}
 800ed36:	4604      	mov	r4, r0
 800ed38:	4d06      	ldr	r5, [pc, #24]	; (800ed54 <_write_r+0x20>)
 800ed3a:	4608      	mov	r0, r1
 800ed3c:	4611      	mov	r1, r2
 800ed3e:	2200      	movs	r2, #0
 800ed40:	602a      	str	r2, [r5, #0]
 800ed42:	461a      	mov	r2, r3
 800ed44:	f7f1 ff85 	bl	8000c52 <_write>
 800ed48:	1c43      	adds	r3, r0, #1
 800ed4a:	d102      	bne.n	800ed52 <_write_r+0x1e>
 800ed4c:	682b      	ldr	r3, [r5, #0]
 800ed4e:	b103      	cbz	r3, 800ed52 <_write_r+0x1e>
 800ed50:	6023      	str	r3, [r4, #0]
 800ed52:	bd38      	pop	{r3, r4, r5, pc}
 800ed54:	20015a5c 	.word	0x20015a5c

0800ed58 <__errno>:
 800ed58:	4b01      	ldr	r3, [pc, #4]	; (800ed60 <__errno+0x8>)
 800ed5a:	6818      	ldr	r0, [r3, #0]
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop
 800ed60:	200000e4 	.word	0x200000e4

0800ed64 <__libc_init_array>:
 800ed64:	b570      	push	{r4, r5, r6, lr}
 800ed66:	4d0d      	ldr	r5, [pc, #52]	; (800ed9c <__libc_init_array+0x38>)
 800ed68:	2600      	movs	r6, #0
 800ed6a:	4c0d      	ldr	r4, [pc, #52]	; (800eda0 <__libc_init_array+0x3c>)
 800ed6c:	1b64      	subs	r4, r4, r5
 800ed6e:	10a4      	asrs	r4, r4, #2
 800ed70:	42a6      	cmp	r6, r4
 800ed72:	d109      	bne.n	800ed88 <__libc_init_array+0x24>
 800ed74:	4d0b      	ldr	r5, [pc, #44]	; (800eda4 <__libc_init_array+0x40>)
 800ed76:	2600      	movs	r6, #0
 800ed78:	4c0b      	ldr	r4, [pc, #44]	; (800eda8 <__libc_init_array+0x44>)
 800ed7a:	f000 fdc7 	bl	800f90c <_init>
 800ed7e:	1b64      	subs	r4, r4, r5
 800ed80:	10a4      	asrs	r4, r4, #2
 800ed82:	42a6      	cmp	r6, r4
 800ed84:	d105      	bne.n	800ed92 <__libc_init_array+0x2e>
 800ed86:	bd70      	pop	{r4, r5, r6, pc}
 800ed88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed8c:	3601      	adds	r6, #1
 800ed8e:	4798      	blx	r3
 800ed90:	e7ee      	b.n	800ed70 <__libc_init_array+0xc>
 800ed92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed96:	3601      	adds	r6, #1
 800ed98:	4798      	blx	r3
 800ed9a:	e7f2      	b.n	800ed82 <__libc_init_array+0x1e>
 800ed9c:	0800fbc8 	.word	0x0800fbc8
 800eda0:	0800fbc8 	.word	0x0800fbc8
 800eda4:	0800fbc8 	.word	0x0800fbc8
 800eda8:	0800fbcc 	.word	0x0800fbcc

0800edac <__retarget_lock_init_recursive>:
 800edac:	4770      	bx	lr

0800edae <__retarget_lock_acquire_recursive>:
 800edae:	4770      	bx	lr

0800edb0 <__retarget_lock_release_recursive>:
 800edb0:	4770      	bx	lr

0800edb2 <memcpy>:
 800edb2:	440a      	add	r2, r1
 800edb4:	1e43      	subs	r3, r0, #1
 800edb6:	4291      	cmp	r1, r2
 800edb8:	d100      	bne.n	800edbc <memcpy+0xa>
 800edba:	4770      	bx	lr
 800edbc:	b510      	push	{r4, lr}
 800edbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edc2:	4291      	cmp	r1, r2
 800edc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edc8:	d1f9      	bne.n	800edbe <memcpy+0xc>
 800edca:	bd10      	pop	{r4, pc}

0800edcc <__assert_func>:
 800edcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800edce:	4614      	mov	r4, r2
 800edd0:	461a      	mov	r2, r3
 800edd2:	4b09      	ldr	r3, [pc, #36]	; (800edf8 <__assert_func+0x2c>)
 800edd4:	4605      	mov	r5, r0
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	68d8      	ldr	r0, [r3, #12]
 800edda:	b14c      	cbz	r4, 800edf0 <__assert_func+0x24>
 800eddc:	4b07      	ldr	r3, [pc, #28]	; (800edfc <__assert_func+0x30>)
 800edde:	9100      	str	r1, [sp, #0]
 800ede0:	4907      	ldr	r1, [pc, #28]	; (800ee00 <__assert_func+0x34>)
 800ede2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ede6:	462b      	mov	r3, r5
 800ede8:	f000 fc90 	bl	800f70c <fiprintf>
 800edec:	f000 fd42 	bl	800f874 <abort>
 800edf0:	4b04      	ldr	r3, [pc, #16]	; (800ee04 <__assert_func+0x38>)
 800edf2:	461c      	mov	r4, r3
 800edf4:	e7f3      	b.n	800edde <__assert_func+0x12>
 800edf6:	bf00      	nop
 800edf8:	200000e4 	.word	0x200000e4
 800edfc:	0800fb57 	.word	0x0800fb57
 800ee00:	0800fb64 	.word	0x0800fb64
 800ee04:	0800fb92 	.word	0x0800fb92

0800ee08 <_free_r>:
 800ee08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee0a:	2900      	cmp	r1, #0
 800ee0c:	d043      	beq.n	800ee96 <_free_r+0x8e>
 800ee0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee12:	1f0c      	subs	r4, r1, #4
 800ee14:	9001      	str	r0, [sp, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	bfb8      	it	lt
 800ee1a:	18e4      	addlt	r4, r4, r3
 800ee1c:	f000 f8e8 	bl	800eff0 <__malloc_lock>
 800ee20:	4a1e      	ldr	r2, [pc, #120]	; (800ee9c <_free_r+0x94>)
 800ee22:	9801      	ldr	r0, [sp, #4]
 800ee24:	6813      	ldr	r3, [r2, #0]
 800ee26:	b933      	cbnz	r3, 800ee36 <_free_r+0x2e>
 800ee28:	6063      	str	r3, [r4, #4]
 800ee2a:	6014      	str	r4, [r2, #0]
 800ee2c:	b003      	add	sp, #12
 800ee2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee32:	f000 b8e3 	b.w	800effc <__malloc_unlock>
 800ee36:	42a3      	cmp	r3, r4
 800ee38:	d908      	bls.n	800ee4c <_free_r+0x44>
 800ee3a:	6825      	ldr	r5, [r4, #0]
 800ee3c:	1961      	adds	r1, r4, r5
 800ee3e:	428b      	cmp	r3, r1
 800ee40:	bf01      	itttt	eq
 800ee42:	6819      	ldreq	r1, [r3, #0]
 800ee44:	685b      	ldreq	r3, [r3, #4]
 800ee46:	1949      	addeq	r1, r1, r5
 800ee48:	6021      	streq	r1, [r4, #0]
 800ee4a:	e7ed      	b.n	800ee28 <_free_r+0x20>
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	b10b      	cbz	r3, 800ee56 <_free_r+0x4e>
 800ee52:	42a3      	cmp	r3, r4
 800ee54:	d9fa      	bls.n	800ee4c <_free_r+0x44>
 800ee56:	6811      	ldr	r1, [r2, #0]
 800ee58:	1855      	adds	r5, r2, r1
 800ee5a:	42a5      	cmp	r5, r4
 800ee5c:	d10b      	bne.n	800ee76 <_free_r+0x6e>
 800ee5e:	6824      	ldr	r4, [r4, #0]
 800ee60:	4421      	add	r1, r4
 800ee62:	1854      	adds	r4, r2, r1
 800ee64:	6011      	str	r1, [r2, #0]
 800ee66:	42a3      	cmp	r3, r4
 800ee68:	d1e0      	bne.n	800ee2c <_free_r+0x24>
 800ee6a:	681c      	ldr	r4, [r3, #0]
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	440c      	add	r4, r1
 800ee70:	6053      	str	r3, [r2, #4]
 800ee72:	6014      	str	r4, [r2, #0]
 800ee74:	e7da      	b.n	800ee2c <_free_r+0x24>
 800ee76:	d902      	bls.n	800ee7e <_free_r+0x76>
 800ee78:	230c      	movs	r3, #12
 800ee7a:	6003      	str	r3, [r0, #0]
 800ee7c:	e7d6      	b.n	800ee2c <_free_r+0x24>
 800ee7e:	6825      	ldr	r5, [r4, #0]
 800ee80:	1961      	adds	r1, r4, r5
 800ee82:	428b      	cmp	r3, r1
 800ee84:	bf02      	ittt	eq
 800ee86:	6819      	ldreq	r1, [r3, #0]
 800ee88:	685b      	ldreq	r3, [r3, #4]
 800ee8a:	1949      	addeq	r1, r1, r5
 800ee8c:	6063      	str	r3, [r4, #4]
 800ee8e:	bf08      	it	eq
 800ee90:	6021      	streq	r1, [r4, #0]
 800ee92:	6054      	str	r4, [r2, #4]
 800ee94:	e7ca      	b.n	800ee2c <_free_r+0x24>
 800ee96:	b003      	add	sp, #12
 800ee98:	bd30      	pop	{r4, r5, pc}
 800ee9a:	bf00      	nop
 800ee9c:	20015a64 	.word	0x20015a64

0800eea0 <malloc>:
 800eea0:	4b02      	ldr	r3, [pc, #8]	; (800eeac <malloc+0xc>)
 800eea2:	4601      	mov	r1, r0
 800eea4:	6818      	ldr	r0, [r3, #0]
 800eea6:	f000 b823 	b.w	800eef0 <_malloc_r>
 800eeaa:	bf00      	nop
 800eeac:	200000e4 	.word	0x200000e4

0800eeb0 <sbrk_aligned>:
 800eeb0:	b570      	push	{r4, r5, r6, lr}
 800eeb2:	4e0e      	ldr	r6, [pc, #56]	; (800eeec <sbrk_aligned+0x3c>)
 800eeb4:	460c      	mov	r4, r1
 800eeb6:	4605      	mov	r5, r0
 800eeb8:	6831      	ldr	r1, [r6, #0]
 800eeba:	b911      	cbnz	r1, 800eec2 <sbrk_aligned+0x12>
 800eebc:	f000 fcbc 	bl	800f838 <_sbrk_r>
 800eec0:	6030      	str	r0, [r6, #0]
 800eec2:	4621      	mov	r1, r4
 800eec4:	4628      	mov	r0, r5
 800eec6:	f000 fcb7 	bl	800f838 <_sbrk_r>
 800eeca:	1c43      	adds	r3, r0, #1
 800eecc:	d00a      	beq.n	800eee4 <sbrk_aligned+0x34>
 800eece:	1cc4      	adds	r4, r0, #3
 800eed0:	f024 0403 	bic.w	r4, r4, #3
 800eed4:	42a0      	cmp	r0, r4
 800eed6:	d007      	beq.n	800eee8 <sbrk_aligned+0x38>
 800eed8:	1a21      	subs	r1, r4, r0
 800eeda:	4628      	mov	r0, r5
 800eedc:	f000 fcac 	bl	800f838 <_sbrk_r>
 800eee0:	3001      	adds	r0, #1
 800eee2:	d101      	bne.n	800eee8 <sbrk_aligned+0x38>
 800eee4:	f04f 34ff 	mov.w	r4, #4294967295
 800eee8:	4620      	mov	r0, r4
 800eeea:	bd70      	pop	{r4, r5, r6, pc}
 800eeec:	20015a68 	.word	0x20015a68

0800eef0 <_malloc_r>:
 800eef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eef4:	1ccd      	adds	r5, r1, #3
 800eef6:	4607      	mov	r7, r0
 800eef8:	f025 0503 	bic.w	r5, r5, #3
 800eefc:	3508      	adds	r5, #8
 800eefe:	2d0c      	cmp	r5, #12
 800ef00:	bf38      	it	cc
 800ef02:	250c      	movcc	r5, #12
 800ef04:	2d00      	cmp	r5, #0
 800ef06:	db01      	blt.n	800ef0c <_malloc_r+0x1c>
 800ef08:	42a9      	cmp	r1, r5
 800ef0a:	d905      	bls.n	800ef18 <_malloc_r+0x28>
 800ef0c:	230c      	movs	r3, #12
 800ef0e:	2600      	movs	r6, #0
 800ef10:	603b      	str	r3, [r7, #0]
 800ef12:	4630      	mov	r0, r6
 800ef14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800efec <_malloc_r+0xfc>
 800ef1c:	f000 f868 	bl	800eff0 <__malloc_lock>
 800ef20:	f8d8 3000 	ldr.w	r3, [r8]
 800ef24:	461c      	mov	r4, r3
 800ef26:	bb5c      	cbnz	r4, 800ef80 <_malloc_r+0x90>
 800ef28:	4629      	mov	r1, r5
 800ef2a:	4638      	mov	r0, r7
 800ef2c:	f7ff ffc0 	bl	800eeb0 <sbrk_aligned>
 800ef30:	1c43      	adds	r3, r0, #1
 800ef32:	4604      	mov	r4, r0
 800ef34:	d155      	bne.n	800efe2 <_malloc_r+0xf2>
 800ef36:	f8d8 4000 	ldr.w	r4, [r8]
 800ef3a:	4626      	mov	r6, r4
 800ef3c:	2e00      	cmp	r6, #0
 800ef3e:	d145      	bne.n	800efcc <_malloc_r+0xdc>
 800ef40:	2c00      	cmp	r4, #0
 800ef42:	d048      	beq.n	800efd6 <_malloc_r+0xe6>
 800ef44:	6823      	ldr	r3, [r4, #0]
 800ef46:	4631      	mov	r1, r6
 800ef48:	4638      	mov	r0, r7
 800ef4a:	eb04 0903 	add.w	r9, r4, r3
 800ef4e:	f000 fc73 	bl	800f838 <_sbrk_r>
 800ef52:	4581      	cmp	r9, r0
 800ef54:	d13f      	bne.n	800efd6 <_malloc_r+0xe6>
 800ef56:	6821      	ldr	r1, [r4, #0]
 800ef58:	4638      	mov	r0, r7
 800ef5a:	1a6d      	subs	r5, r5, r1
 800ef5c:	4629      	mov	r1, r5
 800ef5e:	f7ff ffa7 	bl	800eeb0 <sbrk_aligned>
 800ef62:	3001      	adds	r0, #1
 800ef64:	d037      	beq.n	800efd6 <_malloc_r+0xe6>
 800ef66:	6823      	ldr	r3, [r4, #0]
 800ef68:	442b      	add	r3, r5
 800ef6a:	6023      	str	r3, [r4, #0]
 800ef6c:	f8d8 3000 	ldr.w	r3, [r8]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d038      	beq.n	800efe6 <_malloc_r+0xf6>
 800ef74:	685a      	ldr	r2, [r3, #4]
 800ef76:	42a2      	cmp	r2, r4
 800ef78:	d12b      	bne.n	800efd2 <_malloc_r+0xe2>
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	605a      	str	r2, [r3, #4]
 800ef7e:	e00f      	b.n	800efa0 <_malloc_r+0xb0>
 800ef80:	6822      	ldr	r2, [r4, #0]
 800ef82:	1b52      	subs	r2, r2, r5
 800ef84:	d41f      	bmi.n	800efc6 <_malloc_r+0xd6>
 800ef86:	2a0b      	cmp	r2, #11
 800ef88:	d917      	bls.n	800efba <_malloc_r+0xca>
 800ef8a:	1961      	adds	r1, r4, r5
 800ef8c:	42a3      	cmp	r3, r4
 800ef8e:	6025      	str	r5, [r4, #0]
 800ef90:	bf18      	it	ne
 800ef92:	6059      	strne	r1, [r3, #4]
 800ef94:	6863      	ldr	r3, [r4, #4]
 800ef96:	bf08      	it	eq
 800ef98:	f8c8 1000 	streq.w	r1, [r8]
 800ef9c:	5162      	str	r2, [r4, r5]
 800ef9e:	604b      	str	r3, [r1, #4]
 800efa0:	f104 060b 	add.w	r6, r4, #11
 800efa4:	4638      	mov	r0, r7
 800efa6:	f000 f829 	bl	800effc <__malloc_unlock>
 800efaa:	1d23      	adds	r3, r4, #4
 800efac:	f026 0607 	bic.w	r6, r6, #7
 800efb0:	1af2      	subs	r2, r6, r3
 800efb2:	d0ae      	beq.n	800ef12 <_malloc_r+0x22>
 800efb4:	1b9b      	subs	r3, r3, r6
 800efb6:	50a3      	str	r3, [r4, r2]
 800efb8:	e7ab      	b.n	800ef12 <_malloc_r+0x22>
 800efba:	42a3      	cmp	r3, r4
 800efbc:	6862      	ldr	r2, [r4, #4]
 800efbe:	d1dd      	bne.n	800ef7c <_malloc_r+0x8c>
 800efc0:	f8c8 2000 	str.w	r2, [r8]
 800efc4:	e7ec      	b.n	800efa0 <_malloc_r+0xb0>
 800efc6:	4623      	mov	r3, r4
 800efc8:	6864      	ldr	r4, [r4, #4]
 800efca:	e7ac      	b.n	800ef26 <_malloc_r+0x36>
 800efcc:	4634      	mov	r4, r6
 800efce:	6876      	ldr	r6, [r6, #4]
 800efd0:	e7b4      	b.n	800ef3c <_malloc_r+0x4c>
 800efd2:	4613      	mov	r3, r2
 800efd4:	e7cc      	b.n	800ef70 <_malloc_r+0x80>
 800efd6:	230c      	movs	r3, #12
 800efd8:	4638      	mov	r0, r7
 800efda:	603b      	str	r3, [r7, #0]
 800efdc:	f000 f80e 	bl	800effc <__malloc_unlock>
 800efe0:	e797      	b.n	800ef12 <_malloc_r+0x22>
 800efe2:	6025      	str	r5, [r4, #0]
 800efe4:	e7dc      	b.n	800efa0 <_malloc_r+0xb0>
 800efe6:	605b      	str	r3, [r3, #4]
 800efe8:	deff      	udf	#255	; 0xff
 800efea:	bf00      	nop
 800efec:	20015a64 	.word	0x20015a64

0800eff0 <__malloc_lock>:
 800eff0:	4801      	ldr	r0, [pc, #4]	; (800eff8 <__malloc_lock+0x8>)
 800eff2:	f7ff bedc 	b.w	800edae <__retarget_lock_acquire_recursive>
 800eff6:	bf00      	nop
 800eff8:	20015a60 	.word	0x20015a60

0800effc <__malloc_unlock>:
 800effc:	4801      	ldr	r0, [pc, #4]	; (800f004 <__malloc_unlock+0x8>)
 800effe:	f7ff bed7 	b.w	800edb0 <__retarget_lock_release_recursive>
 800f002:	bf00      	nop
 800f004:	20015a60 	.word	0x20015a60

0800f008 <__sfputc_r>:
 800f008:	6893      	ldr	r3, [r2, #8]
 800f00a:	3b01      	subs	r3, #1
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	6093      	str	r3, [r2, #8]
 800f010:	b410      	push	{r4}
 800f012:	da08      	bge.n	800f026 <__sfputc_r+0x1e>
 800f014:	6994      	ldr	r4, [r2, #24]
 800f016:	42a3      	cmp	r3, r4
 800f018:	db01      	blt.n	800f01e <__sfputc_r+0x16>
 800f01a:	290a      	cmp	r1, #10
 800f01c:	d103      	bne.n	800f026 <__sfputc_r+0x1e>
 800f01e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f022:	f7ff bdb6 	b.w	800eb92 <__swbuf_r>
 800f026:	6813      	ldr	r3, [r2, #0]
 800f028:	1c58      	adds	r0, r3, #1
 800f02a:	6010      	str	r0, [r2, #0]
 800f02c:	4608      	mov	r0, r1
 800f02e:	7019      	strb	r1, [r3, #0]
 800f030:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f034:	4770      	bx	lr

0800f036 <__sfputs_r>:
 800f036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f038:	4606      	mov	r6, r0
 800f03a:	460f      	mov	r7, r1
 800f03c:	4614      	mov	r4, r2
 800f03e:	18d5      	adds	r5, r2, r3
 800f040:	42ac      	cmp	r4, r5
 800f042:	d101      	bne.n	800f048 <__sfputs_r+0x12>
 800f044:	2000      	movs	r0, #0
 800f046:	e007      	b.n	800f058 <__sfputs_r+0x22>
 800f048:	463a      	mov	r2, r7
 800f04a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f04e:	4630      	mov	r0, r6
 800f050:	f7ff ffda 	bl	800f008 <__sfputc_r>
 800f054:	1c43      	adds	r3, r0, #1
 800f056:	d1f3      	bne.n	800f040 <__sfputs_r+0xa>
 800f058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f05c <_vfiprintf_r>:
 800f05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f060:	460d      	mov	r5, r1
 800f062:	b09d      	sub	sp, #116	; 0x74
 800f064:	4614      	mov	r4, r2
 800f066:	4698      	mov	r8, r3
 800f068:	4606      	mov	r6, r0
 800f06a:	b118      	cbz	r0, 800f074 <_vfiprintf_r+0x18>
 800f06c:	6a03      	ldr	r3, [r0, #32]
 800f06e:	b90b      	cbnz	r3, 800f074 <_vfiprintf_r+0x18>
 800f070:	f7ff fca8 	bl	800e9c4 <__sinit>
 800f074:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f076:	07d9      	lsls	r1, r3, #31
 800f078:	d405      	bmi.n	800f086 <_vfiprintf_r+0x2a>
 800f07a:	89ab      	ldrh	r3, [r5, #12]
 800f07c:	059a      	lsls	r2, r3, #22
 800f07e:	d402      	bmi.n	800f086 <_vfiprintf_r+0x2a>
 800f080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f082:	f7ff fe94 	bl	800edae <__retarget_lock_acquire_recursive>
 800f086:	89ab      	ldrh	r3, [r5, #12]
 800f088:	071b      	lsls	r3, r3, #28
 800f08a:	d501      	bpl.n	800f090 <_vfiprintf_r+0x34>
 800f08c:	692b      	ldr	r3, [r5, #16]
 800f08e:	b99b      	cbnz	r3, 800f0b8 <_vfiprintf_r+0x5c>
 800f090:	4629      	mov	r1, r5
 800f092:	4630      	mov	r0, r6
 800f094:	f7ff fdba 	bl	800ec0c <__swsetup_r>
 800f098:	b170      	cbz	r0, 800f0b8 <_vfiprintf_r+0x5c>
 800f09a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f09c:	07dc      	lsls	r4, r3, #31
 800f09e:	d504      	bpl.n	800f0aa <_vfiprintf_r+0x4e>
 800f0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0a4:	b01d      	add	sp, #116	; 0x74
 800f0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0aa:	89ab      	ldrh	r3, [r5, #12]
 800f0ac:	0598      	lsls	r0, r3, #22
 800f0ae:	d4f7      	bmi.n	800f0a0 <_vfiprintf_r+0x44>
 800f0b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0b2:	f7ff fe7d 	bl	800edb0 <__retarget_lock_release_recursive>
 800f0b6:	e7f3      	b.n	800f0a0 <_vfiprintf_r+0x44>
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0be:	f04f 0901 	mov.w	r9, #1
 800f0c2:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800f27c <_vfiprintf_r+0x220>
 800f0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f0c8:	2320      	movs	r3, #32
 800f0ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0ce:	2330      	movs	r3, #48	; 0x30
 800f0d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0d4:	4623      	mov	r3, r4
 800f0d6:	469a      	mov	sl, r3
 800f0d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0dc:	b10a      	cbz	r2, 800f0e2 <_vfiprintf_r+0x86>
 800f0de:	2a25      	cmp	r2, #37	; 0x25
 800f0e0:	d1f9      	bne.n	800f0d6 <_vfiprintf_r+0x7a>
 800f0e2:	ebba 0b04 	subs.w	fp, sl, r4
 800f0e6:	d00b      	beq.n	800f100 <_vfiprintf_r+0xa4>
 800f0e8:	465b      	mov	r3, fp
 800f0ea:	4622      	mov	r2, r4
 800f0ec:	4629      	mov	r1, r5
 800f0ee:	4630      	mov	r0, r6
 800f0f0:	f7ff ffa1 	bl	800f036 <__sfputs_r>
 800f0f4:	3001      	adds	r0, #1
 800f0f6:	f000 80a9 	beq.w	800f24c <_vfiprintf_r+0x1f0>
 800f0fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0fc:	445a      	add	r2, fp
 800f0fe:	9209      	str	r2, [sp, #36]	; 0x24
 800f100:	f89a 3000 	ldrb.w	r3, [sl]
 800f104:	2b00      	cmp	r3, #0
 800f106:	f000 80a1 	beq.w	800f24c <_vfiprintf_r+0x1f0>
 800f10a:	2300      	movs	r3, #0
 800f10c:	f04f 32ff 	mov.w	r2, #4294967295
 800f110:	f10a 0a01 	add.w	sl, sl, #1
 800f114:	9304      	str	r3, [sp, #16]
 800f116:	9307      	str	r3, [sp, #28]
 800f118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f11c:	931a      	str	r3, [sp, #104]	; 0x68
 800f11e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f122:	4654      	mov	r4, sl
 800f124:	2205      	movs	r2, #5
 800f126:	4855      	ldr	r0, [pc, #340]	; (800f27c <_vfiprintf_r+0x220>)
 800f128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f12c:	f000 fb94 	bl	800f858 <memchr>
 800f130:	9a04      	ldr	r2, [sp, #16]
 800f132:	b9d8      	cbnz	r0, 800f16c <_vfiprintf_r+0x110>
 800f134:	06d1      	lsls	r1, r2, #27
 800f136:	bf44      	itt	mi
 800f138:	2320      	movmi	r3, #32
 800f13a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f13e:	0713      	lsls	r3, r2, #28
 800f140:	bf44      	itt	mi
 800f142:	232b      	movmi	r3, #43	; 0x2b
 800f144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f148:	f89a 3000 	ldrb.w	r3, [sl]
 800f14c:	2b2a      	cmp	r3, #42	; 0x2a
 800f14e:	d015      	beq.n	800f17c <_vfiprintf_r+0x120>
 800f150:	9a07      	ldr	r2, [sp, #28]
 800f152:	4654      	mov	r4, sl
 800f154:	2000      	movs	r0, #0
 800f156:	f04f 0c0a 	mov.w	ip, #10
 800f15a:	4621      	mov	r1, r4
 800f15c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f160:	3b30      	subs	r3, #48	; 0x30
 800f162:	2b09      	cmp	r3, #9
 800f164:	d94d      	bls.n	800f202 <_vfiprintf_r+0x1a6>
 800f166:	b1b0      	cbz	r0, 800f196 <_vfiprintf_r+0x13a>
 800f168:	9207      	str	r2, [sp, #28]
 800f16a:	e014      	b.n	800f196 <_vfiprintf_r+0x13a>
 800f16c:	eba0 0308 	sub.w	r3, r0, r8
 800f170:	46a2      	mov	sl, r4
 800f172:	fa09 f303 	lsl.w	r3, r9, r3
 800f176:	4313      	orrs	r3, r2
 800f178:	9304      	str	r3, [sp, #16]
 800f17a:	e7d2      	b.n	800f122 <_vfiprintf_r+0xc6>
 800f17c:	9b03      	ldr	r3, [sp, #12]
 800f17e:	1d19      	adds	r1, r3, #4
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	2b00      	cmp	r3, #0
 800f184:	9103      	str	r1, [sp, #12]
 800f186:	bfbb      	ittet	lt
 800f188:	425b      	neglt	r3, r3
 800f18a:	f042 0202 	orrlt.w	r2, r2, #2
 800f18e:	9307      	strge	r3, [sp, #28]
 800f190:	9307      	strlt	r3, [sp, #28]
 800f192:	bfb8      	it	lt
 800f194:	9204      	strlt	r2, [sp, #16]
 800f196:	7823      	ldrb	r3, [r4, #0]
 800f198:	2b2e      	cmp	r3, #46	; 0x2e
 800f19a:	d10c      	bne.n	800f1b6 <_vfiprintf_r+0x15a>
 800f19c:	7863      	ldrb	r3, [r4, #1]
 800f19e:	2b2a      	cmp	r3, #42	; 0x2a
 800f1a0:	d134      	bne.n	800f20c <_vfiprintf_r+0x1b0>
 800f1a2:	9b03      	ldr	r3, [sp, #12]
 800f1a4:	3402      	adds	r4, #2
 800f1a6:	1d1a      	adds	r2, r3, #4
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	9203      	str	r2, [sp, #12]
 800f1ae:	bfb8      	it	lt
 800f1b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1b4:	9305      	str	r3, [sp, #20]
 800f1b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f28c <_vfiprintf_r+0x230>
 800f1ba:	2203      	movs	r2, #3
 800f1bc:	7821      	ldrb	r1, [r4, #0]
 800f1be:	4650      	mov	r0, sl
 800f1c0:	f000 fb4a 	bl	800f858 <memchr>
 800f1c4:	b138      	cbz	r0, 800f1d6 <_vfiprintf_r+0x17a>
 800f1c6:	eba0 000a 	sub.w	r0, r0, sl
 800f1ca:	2240      	movs	r2, #64	; 0x40
 800f1cc:	9b04      	ldr	r3, [sp, #16]
 800f1ce:	3401      	adds	r4, #1
 800f1d0:	4082      	lsls	r2, r0
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	9304      	str	r3, [sp, #16]
 800f1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1da:	2206      	movs	r2, #6
 800f1dc:	4828      	ldr	r0, [pc, #160]	; (800f280 <_vfiprintf_r+0x224>)
 800f1de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1e2:	f000 fb39 	bl	800f858 <memchr>
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	d03f      	beq.n	800f26a <_vfiprintf_r+0x20e>
 800f1ea:	4b26      	ldr	r3, [pc, #152]	; (800f284 <_vfiprintf_r+0x228>)
 800f1ec:	bb1b      	cbnz	r3, 800f236 <_vfiprintf_r+0x1da>
 800f1ee:	9b03      	ldr	r3, [sp, #12]
 800f1f0:	3307      	adds	r3, #7
 800f1f2:	f023 0307 	bic.w	r3, r3, #7
 800f1f6:	3308      	adds	r3, #8
 800f1f8:	9303      	str	r3, [sp, #12]
 800f1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1fc:	443b      	add	r3, r7
 800f1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800f200:	e768      	b.n	800f0d4 <_vfiprintf_r+0x78>
 800f202:	fb0c 3202 	mla	r2, ip, r2, r3
 800f206:	460c      	mov	r4, r1
 800f208:	2001      	movs	r0, #1
 800f20a:	e7a6      	b.n	800f15a <_vfiprintf_r+0xfe>
 800f20c:	2300      	movs	r3, #0
 800f20e:	3401      	adds	r4, #1
 800f210:	f04f 0c0a 	mov.w	ip, #10
 800f214:	4619      	mov	r1, r3
 800f216:	9305      	str	r3, [sp, #20]
 800f218:	4620      	mov	r0, r4
 800f21a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f21e:	3a30      	subs	r2, #48	; 0x30
 800f220:	2a09      	cmp	r2, #9
 800f222:	d903      	bls.n	800f22c <_vfiprintf_r+0x1d0>
 800f224:	2b00      	cmp	r3, #0
 800f226:	d0c6      	beq.n	800f1b6 <_vfiprintf_r+0x15a>
 800f228:	9105      	str	r1, [sp, #20]
 800f22a:	e7c4      	b.n	800f1b6 <_vfiprintf_r+0x15a>
 800f22c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f230:	4604      	mov	r4, r0
 800f232:	2301      	movs	r3, #1
 800f234:	e7f0      	b.n	800f218 <_vfiprintf_r+0x1bc>
 800f236:	ab03      	add	r3, sp, #12
 800f238:	462a      	mov	r2, r5
 800f23a:	a904      	add	r1, sp, #16
 800f23c:	4630      	mov	r0, r6
 800f23e:	9300      	str	r3, [sp, #0]
 800f240:	4b11      	ldr	r3, [pc, #68]	; (800f288 <_vfiprintf_r+0x22c>)
 800f242:	f3af 8000 	nop.w
 800f246:	4607      	mov	r7, r0
 800f248:	1c78      	adds	r0, r7, #1
 800f24a:	d1d6      	bne.n	800f1fa <_vfiprintf_r+0x19e>
 800f24c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f24e:	07d9      	lsls	r1, r3, #31
 800f250:	d405      	bmi.n	800f25e <_vfiprintf_r+0x202>
 800f252:	89ab      	ldrh	r3, [r5, #12]
 800f254:	059a      	lsls	r2, r3, #22
 800f256:	d402      	bmi.n	800f25e <_vfiprintf_r+0x202>
 800f258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f25a:	f7ff fda9 	bl	800edb0 <__retarget_lock_release_recursive>
 800f25e:	89ab      	ldrh	r3, [r5, #12]
 800f260:	065b      	lsls	r3, r3, #25
 800f262:	f53f af1d 	bmi.w	800f0a0 <_vfiprintf_r+0x44>
 800f266:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f268:	e71c      	b.n	800f0a4 <_vfiprintf_r+0x48>
 800f26a:	ab03      	add	r3, sp, #12
 800f26c:	462a      	mov	r2, r5
 800f26e:	a904      	add	r1, sp, #16
 800f270:	4630      	mov	r0, r6
 800f272:	9300      	str	r3, [sp, #0]
 800f274:	4b04      	ldr	r3, [pc, #16]	; (800f288 <_vfiprintf_r+0x22c>)
 800f276:	f000 f87d 	bl	800f374 <_printf_i>
 800f27a:	e7e4      	b.n	800f246 <_vfiprintf_r+0x1ea>
 800f27c:	0800fb93 	.word	0x0800fb93
 800f280:	0800fb9d 	.word	0x0800fb9d
 800f284:	00000000 	.word	0x00000000
 800f288:	0800f037 	.word	0x0800f037
 800f28c:	0800fb99 	.word	0x0800fb99

0800f290 <_printf_common>:
 800f290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f294:	4616      	mov	r6, r2
 800f296:	4699      	mov	r9, r3
 800f298:	688a      	ldr	r2, [r1, #8]
 800f29a:	4607      	mov	r7, r0
 800f29c:	690b      	ldr	r3, [r1, #16]
 800f29e:	460c      	mov	r4, r1
 800f2a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	bfb8      	it	lt
 800f2a8:	4613      	movlt	r3, r2
 800f2aa:	6033      	str	r3, [r6, #0]
 800f2ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f2b0:	b10a      	cbz	r2, 800f2b6 <_printf_common+0x26>
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	6033      	str	r3, [r6, #0]
 800f2b6:	6823      	ldr	r3, [r4, #0]
 800f2b8:	0699      	lsls	r1, r3, #26
 800f2ba:	bf42      	ittt	mi
 800f2bc:	6833      	ldrmi	r3, [r6, #0]
 800f2be:	3302      	addmi	r3, #2
 800f2c0:	6033      	strmi	r3, [r6, #0]
 800f2c2:	6825      	ldr	r5, [r4, #0]
 800f2c4:	f015 0506 	ands.w	r5, r5, #6
 800f2c8:	d106      	bne.n	800f2d8 <_printf_common+0x48>
 800f2ca:	f104 0a19 	add.w	sl, r4, #25
 800f2ce:	68e3      	ldr	r3, [r4, #12]
 800f2d0:	6832      	ldr	r2, [r6, #0]
 800f2d2:	1a9b      	subs	r3, r3, r2
 800f2d4:	42ab      	cmp	r3, r5
 800f2d6:	dc2b      	bgt.n	800f330 <_printf_common+0xa0>
 800f2d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f2dc:	1e13      	subs	r3, r2, #0
 800f2de:	6822      	ldr	r2, [r4, #0]
 800f2e0:	bf18      	it	ne
 800f2e2:	2301      	movne	r3, #1
 800f2e4:	0692      	lsls	r2, r2, #26
 800f2e6:	d430      	bmi.n	800f34a <_printf_common+0xba>
 800f2e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f2ec:	4649      	mov	r1, r9
 800f2ee:	4638      	mov	r0, r7
 800f2f0:	47c0      	blx	r8
 800f2f2:	3001      	adds	r0, #1
 800f2f4:	d023      	beq.n	800f33e <_printf_common+0xae>
 800f2f6:	6823      	ldr	r3, [r4, #0]
 800f2f8:	341a      	adds	r4, #26
 800f2fa:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800f2fe:	f003 0306 	and.w	r3, r3, #6
 800f302:	2b04      	cmp	r3, #4
 800f304:	bf0a      	itet	eq
 800f306:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800f30a:	2500      	movne	r5, #0
 800f30c:	6833      	ldreq	r3, [r6, #0]
 800f30e:	f04f 0600 	mov.w	r6, #0
 800f312:	bf08      	it	eq
 800f314:	1aed      	subeq	r5, r5, r3
 800f316:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f31a:	bf08      	it	eq
 800f31c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f320:	4293      	cmp	r3, r2
 800f322:	bfc4      	itt	gt
 800f324:	1a9b      	subgt	r3, r3, r2
 800f326:	18ed      	addgt	r5, r5, r3
 800f328:	42b5      	cmp	r5, r6
 800f32a:	d11a      	bne.n	800f362 <_printf_common+0xd2>
 800f32c:	2000      	movs	r0, #0
 800f32e:	e008      	b.n	800f342 <_printf_common+0xb2>
 800f330:	2301      	movs	r3, #1
 800f332:	4652      	mov	r2, sl
 800f334:	4649      	mov	r1, r9
 800f336:	4638      	mov	r0, r7
 800f338:	47c0      	blx	r8
 800f33a:	3001      	adds	r0, #1
 800f33c:	d103      	bne.n	800f346 <_printf_common+0xb6>
 800f33e:	f04f 30ff 	mov.w	r0, #4294967295
 800f342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f346:	3501      	adds	r5, #1
 800f348:	e7c1      	b.n	800f2ce <_printf_common+0x3e>
 800f34a:	18e1      	adds	r1, r4, r3
 800f34c:	1c5a      	adds	r2, r3, #1
 800f34e:	2030      	movs	r0, #48	; 0x30
 800f350:	3302      	adds	r3, #2
 800f352:	4422      	add	r2, r4
 800f354:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f358:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f35c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f360:	e7c2      	b.n	800f2e8 <_printf_common+0x58>
 800f362:	2301      	movs	r3, #1
 800f364:	4622      	mov	r2, r4
 800f366:	4649      	mov	r1, r9
 800f368:	4638      	mov	r0, r7
 800f36a:	47c0      	blx	r8
 800f36c:	3001      	adds	r0, #1
 800f36e:	d0e6      	beq.n	800f33e <_printf_common+0xae>
 800f370:	3601      	adds	r6, #1
 800f372:	e7d9      	b.n	800f328 <_printf_common+0x98>

0800f374 <_printf_i>:
 800f374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f378:	7e0f      	ldrb	r7, [r1, #24]
 800f37a:	4691      	mov	r9, r2
 800f37c:	4680      	mov	r8, r0
 800f37e:	460c      	mov	r4, r1
 800f380:	2f78      	cmp	r7, #120	; 0x78
 800f382:	469a      	mov	sl, r3
 800f384:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f386:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f38a:	d807      	bhi.n	800f39c <_printf_i+0x28>
 800f38c:	2f62      	cmp	r7, #98	; 0x62
 800f38e:	d80a      	bhi.n	800f3a6 <_printf_i+0x32>
 800f390:	2f00      	cmp	r7, #0
 800f392:	f000 80d3 	beq.w	800f53c <_printf_i+0x1c8>
 800f396:	2f58      	cmp	r7, #88	; 0x58
 800f398:	f000 80bf 	beq.w	800f51a <_printf_i+0x1a6>
 800f39c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f3a4:	e03a      	b.n	800f41c <_printf_i+0xa8>
 800f3a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f3aa:	2b15      	cmp	r3, #21
 800f3ac:	d8f6      	bhi.n	800f39c <_printf_i+0x28>
 800f3ae:	a101      	add	r1, pc, #4	; (adr r1, 800f3b4 <_printf_i+0x40>)
 800f3b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3b4:	0800f40d 	.word	0x0800f40d
 800f3b8:	0800f421 	.word	0x0800f421
 800f3bc:	0800f39d 	.word	0x0800f39d
 800f3c0:	0800f39d 	.word	0x0800f39d
 800f3c4:	0800f39d 	.word	0x0800f39d
 800f3c8:	0800f39d 	.word	0x0800f39d
 800f3cc:	0800f421 	.word	0x0800f421
 800f3d0:	0800f39d 	.word	0x0800f39d
 800f3d4:	0800f39d 	.word	0x0800f39d
 800f3d8:	0800f39d 	.word	0x0800f39d
 800f3dc:	0800f39d 	.word	0x0800f39d
 800f3e0:	0800f523 	.word	0x0800f523
 800f3e4:	0800f44d 	.word	0x0800f44d
 800f3e8:	0800f4df 	.word	0x0800f4df
 800f3ec:	0800f39d 	.word	0x0800f39d
 800f3f0:	0800f39d 	.word	0x0800f39d
 800f3f4:	0800f545 	.word	0x0800f545
 800f3f8:	0800f39d 	.word	0x0800f39d
 800f3fc:	0800f44d 	.word	0x0800f44d
 800f400:	0800f39d 	.word	0x0800f39d
 800f404:	0800f39d 	.word	0x0800f39d
 800f408:	0800f4e7 	.word	0x0800f4e7
 800f40c:	682b      	ldr	r3, [r5, #0]
 800f40e:	1d1a      	adds	r2, r3, #4
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	602a      	str	r2, [r5, #0]
 800f414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f41c:	2301      	movs	r3, #1
 800f41e:	e09e      	b.n	800f55e <_printf_i+0x1ea>
 800f420:	6820      	ldr	r0, [r4, #0]
 800f422:	682b      	ldr	r3, [r5, #0]
 800f424:	0607      	lsls	r7, r0, #24
 800f426:	f103 0104 	add.w	r1, r3, #4
 800f42a:	6029      	str	r1, [r5, #0]
 800f42c:	d501      	bpl.n	800f432 <_printf_i+0xbe>
 800f42e:	681e      	ldr	r6, [r3, #0]
 800f430:	e003      	b.n	800f43a <_printf_i+0xc6>
 800f432:	0646      	lsls	r6, r0, #25
 800f434:	d5fb      	bpl.n	800f42e <_printf_i+0xba>
 800f436:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f43a:	2e00      	cmp	r6, #0
 800f43c:	da03      	bge.n	800f446 <_printf_i+0xd2>
 800f43e:	232d      	movs	r3, #45	; 0x2d
 800f440:	4276      	negs	r6, r6
 800f442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f446:	4859      	ldr	r0, [pc, #356]	; (800f5ac <_printf_i+0x238>)
 800f448:	230a      	movs	r3, #10
 800f44a:	e012      	b.n	800f472 <_printf_i+0xfe>
 800f44c:	682b      	ldr	r3, [r5, #0]
 800f44e:	6820      	ldr	r0, [r4, #0]
 800f450:	1d19      	adds	r1, r3, #4
 800f452:	6029      	str	r1, [r5, #0]
 800f454:	0605      	lsls	r5, r0, #24
 800f456:	d501      	bpl.n	800f45c <_printf_i+0xe8>
 800f458:	681e      	ldr	r6, [r3, #0]
 800f45a:	e002      	b.n	800f462 <_printf_i+0xee>
 800f45c:	0641      	lsls	r1, r0, #25
 800f45e:	d5fb      	bpl.n	800f458 <_printf_i+0xe4>
 800f460:	881e      	ldrh	r6, [r3, #0]
 800f462:	2f6f      	cmp	r7, #111	; 0x6f
 800f464:	4851      	ldr	r0, [pc, #324]	; (800f5ac <_printf_i+0x238>)
 800f466:	bf0c      	ite	eq
 800f468:	2308      	moveq	r3, #8
 800f46a:	230a      	movne	r3, #10
 800f46c:	2100      	movs	r1, #0
 800f46e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f472:	6865      	ldr	r5, [r4, #4]
 800f474:	2d00      	cmp	r5, #0
 800f476:	60a5      	str	r5, [r4, #8]
 800f478:	bfa2      	ittt	ge
 800f47a:	6821      	ldrge	r1, [r4, #0]
 800f47c:	f021 0104 	bicge.w	r1, r1, #4
 800f480:	6021      	strge	r1, [r4, #0]
 800f482:	b90e      	cbnz	r6, 800f488 <_printf_i+0x114>
 800f484:	2d00      	cmp	r5, #0
 800f486:	d04a      	beq.n	800f51e <_printf_i+0x1aa>
 800f488:	4615      	mov	r5, r2
 800f48a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f48e:	fb03 6711 	mls	r7, r3, r1, r6
 800f492:	5dc7      	ldrb	r7, [r0, r7]
 800f494:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f498:	4637      	mov	r7, r6
 800f49a:	460e      	mov	r6, r1
 800f49c:	42bb      	cmp	r3, r7
 800f49e:	d9f4      	bls.n	800f48a <_printf_i+0x116>
 800f4a0:	2b08      	cmp	r3, #8
 800f4a2:	d10b      	bne.n	800f4bc <_printf_i+0x148>
 800f4a4:	6823      	ldr	r3, [r4, #0]
 800f4a6:	07de      	lsls	r6, r3, #31
 800f4a8:	d508      	bpl.n	800f4bc <_printf_i+0x148>
 800f4aa:	6923      	ldr	r3, [r4, #16]
 800f4ac:	6861      	ldr	r1, [r4, #4]
 800f4ae:	4299      	cmp	r1, r3
 800f4b0:	bfde      	ittt	le
 800f4b2:	2330      	movle	r3, #48	; 0x30
 800f4b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f4b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f4bc:	1b52      	subs	r2, r2, r5
 800f4be:	6122      	str	r2, [r4, #16]
 800f4c0:	464b      	mov	r3, r9
 800f4c2:	aa03      	add	r2, sp, #12
 800f4c4:	4621      	mov	r1, r4
 800f4c6:	4640      	mov	r0, r8
 800f4c8:	f8cd a000 	str.w	sl, [sp]
 800f4cc:	f7ff fee0 	bl	800f290 <_printf_common>
 800f4d0:	3001      	adds	r0, #1
 800f4d2:	d149      	bne.n	800f568 <_printf_i+0x1f4>
 800f4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d8:	b004      	add	sp, #16
 800f4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4de:	6823      	ldr	r3, [r4, #0]
 800f4e0:	f043 0320 	orr.w	r3, r3, #32
 800f4e4:	6023      	str	r3, [r4, #0]
 800f4e6:	2778      	movs	r7, #120	; 0x78
 800f4e8:	4831      	ldr	r0, [pc, #196]	; (800f5b0 <_printf_i+0x23c>)
 800f4ea:	6823      	ldr	r3, [r4, #0]
 800f4ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f4f0:	061f      	lsls	r7, r3, #24
 800f4f2:	6829      	ldr	r1, [r5, #0]
 800f4f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f4f8:	d402      	bmi.n	800f500 <_printf_i+0x18c>
 800f4fa:	065f      	lsls	r7, r3, #25
 800f4fc:	bf48      	it	mi
 800f4fe:	b2b6      	uxthmi	r6, r6
 800f500:	07df      	lsls	r7, r3, #31
 800f502:	6029      	str	r1, [r5, #0]
 800f504:	bf44      	itt	mi
 800f506:	f043 0320 	orrmi.w	r3, r3, #32
 800f50a:	6023      	strmi	r3, [r4, #0]
 800f50c:	b91e      	cbnz	r6, 800f516 <_printf_i+0x1a2>
 800f50e:	6823      	ldr	r3, [r4, #0]
 800f510:	f023 0320 	bic.w	r3, r3, #32
 800f514:	6023      	str	r3, [r4, #0]
 800f516:	2310      	movs	r3, #16
 800f518:	e7a8      	b.n	800f46c <_printf_i+0xf8>
 800f51a:	4824      	ldr	r0, [pc, #144]	; (800f5ac <_printf_i+0x238>)
 800f51c:	e7e5      	b.n	800f4ea <_printf_i+0x176>
 800f51e:	4615      	mov	r5, r2
 800f520:	e7be      	b.n	800f4a0 <_printf_i+0x12c>
 800f522:	682b      	ldr	r3, [r5, #0]
 800f524:	6826      	ldr	r6, [r4, #0]
 800f526:	1d18      	adds	r0, r3, #4
 800f528:	6961      	ldr	r1, [r4, #20]
 800f52a:	6028      	str	r0, [r5, #0]
 800f52c:	0635      	lsls	r5, r6, #24
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	d501      	bpl.n	800f536 <_printf_i+0x1c2>
 800f532:	6019      	str	r1, [r3, #0]
 800f534:	e002      	b.n	800f53c <_printf_i+0x1c8>
 800f536:	0670      	lsls	r0, r6, #25
 800f538:	d5fb      	bpl.n	800f532 <_printf_i+0x1be>
 800f53a:	8019      	strh	r1, [r3, #0]
 800f53c:	2300      	movs	r3, #0
 800f53e:	4615      	mov	r5, r2
 800f540:	6123      	str	r3, [r4, #16]
 800f542:	e7bd      	b.n	800f4c0 <_printf_i+0x14c>
 800f544:	682b      	ldr	r3, [r5, #0]
 800f546:	2100      	movs	r1, #0
 800f548:	1d1a      	adds	r2, r3, #4
 800f54a:	602a      	str	r2, [r5, #0]
 800f54c:	681d      	ldr	r5, [r3, #0]
 800f54e:	6862      	ldr	r2, [r4, #4]
 800f550:	4628      	mov	r0, r5
 800f552:	f000 f981 	bl	800f858 <memchr>
 800f556:	b108      	cbz	r0, 800f55c <_printf_i+0x1e8>
 800f558:	1b40      	subs	r0, r0, r5
 800f55a:	6060      	str	r0, [r4, #4]
 800f55c:	6863      	ldr	r3, [r4, #4]
 800f55e:	6123      	str	r3, [r4, #16]
 800f560:	2300      	movs	r3, #0
 800f562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f566:	e7ab      	b.n	800f4c0 <_printf_i+0x14c>
 800f568:	6923      	ldr	r3, [r4, #16]
 800f56a:	462a      	mov	r2, r5
 800f56c:	4649      	mov	r1, r9
 800f56e:	4640      	mov	r0, r8
 800f570:	47d0      	blx	sl
 800f572:	3001      	adds	r0, #1
 800f574:	d0ae      	beq.n	800f4d4 <_printf_i+0x160>
 800f576:	6823      	ldr	r3, [r4, #0]
 800f578:	079b      	lsls	r3, r3, #30
 800f57a:	d413      	bmi.n	800f5a4 <_printf_i+0x230>
 800f57c:	68e0      	ldr	r0, [r4, #12]
 800f57e:	9b03      	ldr	r3, [sp, #12]
 800f580:	4298      	cmp	r0, r3
 800f582:	bfb8      	it	lt
 800f584:	4618      	movlt	r0, r3
 800f586:	e7a7      	b.n	800f4d8 <_printf_i+0x164>
 800f588:	2301      	movs	r3, #1
 800f58a:	4632      	mov	r2, r6
 800f58c:	4649      	mov	r1, r9
 800f58e:	4640      	mov	r0, r8
 800f590:	47d0      	blx	sl
 800f592:	3001      	adds	r0, #1
 800f594:	d09e      	beq.n	800f4d4 <_printf_i+0x160>
 800f596:	3501      	adds	r5, #1
 800f598:	68e3      	ldr	r3, [r4, #12]
 800f59a:	9903      	ldr	r1, [sp, #12]
 800f59c:	1a5b      	subs	r3, r3, r1
 800f59e:	42ab      	cmp	r3, r5
 800f5a0:	dcf2      	bgt.n	800f588 <_printf_i+0x214>
 800f5a2:	e7eb      	b.n	800f57c <_printf_i+0x208>
 800f5a4:	2500      	movs	r5, #0
 800f5a6:	f104 0619 	add.w	r6, r4, #25
 800f5aa:	e7f5      	b.n	800f598 <_printf_i+0x224>
 800f5ac:	0800fba4 	.word	0x0800fba4
 800f5b0:	0800fbb5 	.word	0x0800fbb5

0800f5b4 <__sflush_r>:
 800f5b4:	898a      	ldrh	r2, [r1, #12]
 800f5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ba:	4605      	mov	r5, r0
 800f5bc:	0710      	lsls	r0, r2, #28
 800f5be:	460c      	mov	r4, r1
 800f5c0:	d458      	bmi.n	800f674 <__sflush_r+0xc0>
 800f5c2:	684b      	ldr	r3, [r1, #4]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	dc05      	bgt.n	800f5d4 <__sflush_r+0x20>
 800f5c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	dc02      	bgt.n	800f5d4 <__sflush_r+0x20>
 800f5ce:	2000      	movs	r0, #0
 800f5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5d6:	2e00      	cmp	r6, #0
 800f5d8:	d0f9      	beq.n	800f5ce <__sflush_r+0x1a>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f5e0:	682f      	ldr	r7, [r5, #0]
 800f5e2:	6a21      	ldr	r1, [r4, #32]
 800f5e4:	602b      	str	r3, [r5, #0]
 800f5e6:	d032      	beq.n	800f64e <__sflush_r+0x9a>
 800f5e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f5ea:	89a3      	ldrh	r3, [r4, #12]
 800f5ec:	075a      	lsls	r2, r3, #29
 800f5ee:	d505      	bpl.n	800f5fc <__sflush_r+0x48>
 800f5f0:	6863      	ldr	r3, [r4, #4]
 800f5f2:	1ac0      	subs	r0, r0, r3
 800f5f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f5f6:	b10b      	cbz	r3, 800f5fc <__sflush_r+0x48>
 800f5f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f5fa:	1ac0      	subs	r0, r0, r3
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	4602      	mov	r2, r0
 800f600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f602:	4628      	mov	r0, r5
 800f604:	6a21      	ldr	r1, [r4, #32]
 800f606:	47b0      	blx	r6
 800f608:	1c43      	adds	r3, r0, #1
 800f60a:	89a3      	ldrh	r3, [r4, #12]
 800f60c:	d106      	bne.n	800f61c <__sflush_r+0x68>
 800f60e:	6829      	ldr	r1, [r5, #0]
 800f610:	291d      	cmp	r1, #29
 800f612:	d82b      	bhi.n	800f66c <__sflush_r+0xb8>
 800f614:	4a28      	ldr	r2, [pc, #160]	; (800f6b8 <__sflush_r+0x104>)
 800f616:	410a      	asrs	r2, r1
 800f618:	07d6      	lsls	r6, r2, #31
 800f61a:	d427      	bmi.n	800f66c <__sflush_r+0xb8>
 800f61c:	2200      	movs	r2, #0
 800f61e:	04d9      	lsls	r1, r3, #19
 800f620:	6062      	str	r2, [r4, #4]
 800f622:	6922      	ldr	r2, [r4, #16]
 800f624:	6022      	str	r2, [r4, #0]
 800f626:	d504      	bpl.n	800f632 <__sflush_r+0x7e>
 800f628:	1c42      	adds	r2, r0, #1
 800f62a:	d101      	bne.n	800f630 <__sflush_r+0x7c>
 800f62c:	682b      	ldr	r3, [r5, #0]
 800f62e:	b903      	cbnz	r3, 800f632 <__sflush_r+0x7e>
 800f630:	6560      	str	r0, [r4, #84]	; 0x54
 800f632:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f634:	602f      	str	r7, [r5, #0]
 800f636:	2900      	cmp	r1, #0
 800f638:	d0c9      	beq.n	800f5ce <__sflush_r+0x1a>
 800f63a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f63e:	4299      	cmp	r1, r3
 800f640:	d002      	beq.n	800f648 <__sflush_r+0x94>
 800f642:	4628      	mov	r0, r5
 800f644:	f7ff fbe0 	bl	800ee08 <_free_r>
 800f648:	2000      	movs	r0, #0
 800f64a:	6360      	str	r0, [r4, #52]	; 0x34
 800f64c:	e7c0      	b.n	800f5d0 <__sflush_r+0x1c>
 800f64e:	2301      	movs	r3, #1
 800f650:	4628      	mov	r0, r5
 800f652:	47b0      	blx	r6
 800f654:	1c41      	adds	r1, r0, #1
 800f656:	d1c8      	bne.n	800f5ea <__sflush_r+0x36>
 800f658:	682b      	ldr	r3, [r5, #0]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d0c5      	beq.n	800f5ea <__sflush_r+0x36>
 800f65e:	2b1d      	cmp	r3, #29
 800f660:	d001      	beq.n	800f666 <__sflush_r+0xb2>
 800f662:	2b16      	cmp	r3, #22
 800f664:	d101      	bne.n	800f66a <__sflush_r+0xb6>
 800f666:	602f      	str	r7, [r5, #0]
 800f668:	e7b1      	b.n	800f5ce <__sflush_r+0x1a>
 800f66a:	89a3      	ldrh	r3, [r4, #12]
 800f66c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f670:	81a3      	strh	r3, [r4, #12]
 800f672:	e7ad      	b.n	800f5d0 <__sflush_r+0x1c>
 800f674:	690f      	ldr	r7, [r1, #16]
 800f676:	2f00      	cmp	r7, #0
 800f678:	d0a9      	beq.n	800f5ce <__sflush_r+0x1a>
 800f67a:	0793      	lsls	r3, r2, #30
 800f67c:	680e      	ldr	r6, [r1, #0]
 800f67e:	600f      	str	r7, [r1, #0]
 800f680:	bf0c      	ite	eq
 800f682:	694b      	ldreq	r3, [r1, #20]
 800f684:	2300      	movne	r3, #0
 800f686:	eba6 0807 	sub.w	r8, r6, r7
 800f68a:	608b      	str	r3, [r1, #8]
 800f68c:	f1b8 0f00 	cmp.w	r8, #0
 800f690:	dd9d      	ble.n	800f5ce <__sflush_r+0x1a>
 800f692:	4643      	mov	r3, r8
 800f694:	463a      	mov	r2, r7
 800f696:	6a21      	ldr	r1, [r4, #32]
 800f698:	4628      	mov	r0, r5
 800f69a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f69c:	47b0      	blx	r6
 800f69e:	2800      	cmp	r0, #0
 800f6a0:	dc06      	bgt.n	800f6b0 <__sflush_r+0xfc>
 800f6a2:	89a3      	ldrh	r3, [r4, #12]
 800f6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6ac:	81a3      	strh	r3, [r4, #12]
 800f6ae:	e78f      	b.n	800f5d0 <__sflush_r+0x1c>
 800f6b0:	4407      	add	r7, r0
 800f6b2:	eba8 0800 	sub.w	r8, r8, r0
 800f6b6:	e7e9      	b.n	800f68c <__sflush_r+0xd8>
 800f6b8:	dfbffffe 	.word	0xdfbffffe

0800f6bc <_fflush_r>:
 800f6bc:	b538      	push	{r3, r4, r5, lr}
 800f6be:	690b      	ldr	r3, [r1, #16]
 800f6c0:	4605      	mov	r5, r0
 800f6c2:	460c      	mov	r4, r1
 800f6c4:	b913      	cbnz	r3, 800f6cc <_fflush_r+0x10>
 800f6c6:	2500      	movs	r5, #0
 800f6c8:	4628      	mov	r0, r5
 800f6ca:	bd38      	pop	{r3, r4, r5, pc}
 800f6cc:	b118      	cbz	r0, 800f6d6 <_fflush_r+0x1a>
 800f6ce:	6a03      	ldr	r3, [r0, #32]
 800f6d0:	b90b      	cbnz	r3, 800f6d6 <_fflush_r+0x1a>
 800f6d2:	f7ff f977 	bl	800e9c4 <__sinit>
 800f6d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d0f3      	beq.n	800f6c6 <_fflush_r+0xa>
 800f6de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f6e0:	07d0      	lsls	r0, r2, #31
 800f6e2:	d404      	bmi.n	800f6ee <_fflush_r+0x32>
 800f6e4:	0599      	lsls	r1, r3, #22
 800f6e6:	d402      	bmi.n	800f6ee <_fflush_r+0x32>
 800f6e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6ea:	f7ff fb60 	bl	800edae <__retarget_lock_acquire_recursive>
 800f6ee:	4628      	mov	r0, r5
 800f6f0:	4621      	mov	r1, r4
 800f6f2:	f7ff ff5f 	bl	800f5b4 <__sflush_r>
 800f6f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6f8:	4605      	mov	r5, r0
 800f6fa:	07da      	lsls	r2, r3, #31
 800f6fc:	d4e4      	bmi.n	800f6c8 <_fflush_r+0xc>
 800f6fe:	89a3      	ldrh	r3, [r4, #12]
 800f700:	059b      	lsls	r3, r3, #22
 800f702:	d4e1      	bmi.n	800f6c8 <_fflush_r+0xc>
 800f704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f706:	f7ff fb53 	bl	800edb0 <__retarget_lock_release_recursive>
 800f70a:	e7dd      	b.n	800f6c8 <_fflush_r+0xc>

0800f70c <fiprintf>:
 800f70c:	b40e      	push	{r1, r2, r3}
 800f70e:	b503      	push	{r0, r1, lr}
 800f710:	ab03      	add	r3, sp, #12
 800f712:	4601      	mov	r1, r0
 800f714:	4805      	ldr	r0, [pc, #20]	; (800f72c <fiprintf+0x20>)
 800f716:	f853 2b04 	ldr.w	r2, [r3], #4
 800f71a:	6800      	ldr	r0, [r0, #0]
 800f71c:	9301      	str	r3, [sp, #4]
 800f71e:	f7ff fc9d 	bl	800f05c <_vfiprintf_r>
 800f722:	b002      	add	sp, #8
 800f724:	f85d eb04 	ldr.w	lr, [sp], #4
 800f728:	b003      	add	sp, #12
 800f72a:	4770      	bx	lr
 800f72c:	200000e4 	.word	0x200000e4

0800f730 <__swhatbuf_r>:
 800f730:	b570      	push	{r4, r5, r6, lr}
 800f732:	460c      	mov	r4, r1
 800f734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f738:	b096      	sub	sp, #88	; 0x58
 800f73a:	4615      	mov	r5, r2
 800f73c:	2900      	cmp	r1, #0
 800f73e:	461e      	mov	r6, r3
 800f740:	da0c      	bge.n	800f75c <__swhatbuf_r+0x2c>
 800f742:	89a3      	ldrh	r3, [r4, #12]
 800f744:	2100      	movs	r1, #0
 800f746:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f74a:	bf0c      	ite	eq
 800f74c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f750:	2340      	movne	r3, #64	; 0x40
 800f752:	2000      	movs	r0, #0
 800f754:	6031      	str	r1, [r6, #0]
 800f756:	602b      	str	r3, [r5, #0]
 800f758:	b016      	add	sp, #88	; 0x58
 800f75a:	bd70      	pop	{r4, r5, r6, pc}
 800f75c:	466a      	mov	r2, sp
 800f75e:	f000 f849 	bl	800f7f4 <_fstat_r>
 800f762:	2800      	cmp	r0, #0
 800f764:	dbed      	blt.n	800f742 <__swhatbuf_r+0x12>
 800f766:	9901      	ldr	r1, [sp, #4]
 800f768:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f76c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f770:	4259      	negs	r1, r3
 800f772:	4159      	adcs	r1, r3
 800f774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f778:	e7eb      	b.n	800f752 <__swhatbuf_r+0x22>

0800f77a <__smakebuf_r>:
 800f77a:	898b      	ldrh	r3, [r1, #12]
 800f77c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f77e:	079d      	lsls	r5, r3, #30
 800f780:	4606      	mov	r6, r0
 800f782:	460c      	mov	r4, r1
 800f784:	d507      	bpl.n	800f796 <__smakebuf_r+0x1c>
 800f786:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f78a:	6023      	str	r3, [r4, #0]
 800f78c:	6123      	str	r3, [r4, #16]
 800f78e:	2301      	movs	r3, #1
 800f790:	6163      	str	r3, [r4, #20]
 800f792:	b002      	add	sp, #8
 800f794:	bd70      	pop	{r4, r5, r6, pc}
 800f796:	ab01      	add	r3, sp, #4
 800f798:	466a      	mov	r2, sp
 800f79a:	f7ff ffc9 	bl	800f730 <__swhatbuf_r>
 800f79e:	9900      	ldr	r1, [sp, #0]
 800f7a0:	4605      	mov	r5, r0
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	f7ff fba4 	bl	800eef0 <_malloc_r>
 800f7a8:	b948      	cbnz	r0, 800f7be <__smakebuf_r+0x44>
 800f7aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7ae:	059a      	lsls	r2, r3, #22
 800f7b0:	d4ef      	bmi.n	800f792 <__smakebuf_r+0x18>
 800f7b2:	f023 0303 	bic.w	r3, r3, #3
 800f7b6:	f043 0302 	orr.w	r3, r3, #2
 800f7ba:	81a3      	strh	r3, [r4, #12]
 800f7bc:	e7e3      	b.n	800f786 <__smakebuf_r+0xc>
 800f7be:	89a3      	ldrh	r3, [r4, #12]
 800f7c0:	6020      	str	r0, [r4, #0]
 800f7c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7c6:	6120      	str	r0, [r4, #16]
 800f7c8:	81a3      	strh	r3, [r4, #12]
 800f7ca:	9b00      	ldr	r3, [sp, #0]
 800f7cc:	6163      	str	r3, [r4, #20]
 800f7ce:	9b01      	ldr	r3, [sp, #4]
 800f7d0:	b15b      	cbz	r3, 800f7ea <__smakebuf_r+0x70>
 800f7d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7d6:	4630      	mov	r0, r6
 800f7d8:	f000 f81e 	bl	800f818 <_isatty_r>
 800f7dc:	b128      	cbz	r0, 800f7ea <__smakebuf_r+0x70>
 800f7de:	89a3      	ldrh	r3, [r4, #12]
 800f7e0:	f023 0303 	bic.w	r3, r3, #3
 800f7e4:	f043 0301 	orr.w	r3, r3, #1
 800f7e8:	81a3      	strh	r3, [r4, #12]
 800f7ea:	89a3      	ldrh	r3, [r4, #12]
 800f7ec:	431d      	orrs	r5, r3
 800f7ee:	81a5      	strh	r5, [r4, #12]
 800f7f0:	e7cf      	b.n	800f792 <__smakebuf_r+0x18>
	...

0800f7f4 <_fstat_r>:
 800f7f4:	b538      	push	{r3, r4, r5, lr}
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	4d06      	ldr	r5, [pc, #24]	; (800f814 <_fstat_r+0x20>)
 800f7fa:	4604      	mov	r4, r0
 800f7fc:	4608      	mov	r0, r1
 800f7fe:	4611      	mov	r1, r2
 800f800:	602b      	str	r3, [r5, #0]
 800f802:	f7f1 fa4e 	bl	8000ca2 <_fstat>
 800f806:	1c43      	adds	r3, r0, #1
 800f808:	d102      	bne.n	800f810 <_fstat_r+0x1c>
 800f80a:	682b      	ldr	r3, [r5, #0]
 800f80c:	b103      	cbz	r3, 800f810 <_fstat_r+0x1c>
 800f80e:	6023      	str	r3, [r4, #0]
 800f810:	bd38      	pop	{r3, r4, r5, pc}
 800f812:	bf00      	nop
 800f814:	20015a5c 	.word	0x20015a5c

0800f818 <_isatty_r>:
 800f818:	b538      	push	{r3, r4, r5, lr}
 800f81a:	2300      	movs	r3, #0
 800f81c:	4d05      	ldr	r5, [pc, #20]	; (800f834 <_isatty_r+0x1c>)
 800f81e:	4604      	mov	r4, r0
 800f820:	4608      	mov	r0, r1
 800f822:	602b      	str	r3, [r5, #0]
 800f824:	f7f1 fa4d 	bl	8000cc2 <_isatty>
 800f828:	1c43      	adds	r3, r0, #1
 800f82a:	d102      	bne.n	800f832 <_isatty_r+0x1a>
 800f82c:	682b      	ldr	r3, [r5, #0]
 800f82e:	b103      	cbz	r3, 800f832 <_isatty_r+0x1a>
 800f830:	6023      	str	r3, [r4, #0]
 800f832:	bd38      	pop	{r3, r4, r5, pc}
 800f834:	20015a5c 	.word	0x20015a5c

0800f838 <_sbrk_r>:
 800f838:	b538      	push	{r3, r4, r5, lr}
 800f83a:	2300      	movs	r3, #0
 800f83c:	4d05      	ldr	r5, [pc, #20]	; (800f854 <_sbrk_r+0x1c>)
 800f83e:	4604      	mov	r4, r0
 800f840:	4608      	mov	r0, r1
 800f842:	602b      	str	r3, [r5, #0]
 800f844:	f7f1 fa56 	bl	8000cf4 <_sbrk>
 800f848:	1c43      	adds	r3, r0, #1
 800f84a:	d102      	bne.n	800f852 <_sbrk_r+0x1a>
 800f84c:	682b      	ldr	r3, [r5, #0]
 800f84e:	b103      	cbz	r3, 800f852 <_sbrk_r+0x1a>
 800f850:	6023      	str	r3, [r4, #0]
 800f852:	bd38      	pop	{r3, r4, r5, pc}
 800f854:	20015a5c 	.word	0x20015a5c

0800f858 <memchr>:
 800f858:	b2c9      	uxtb	r1, r1
 800f85a:	4402      	add	r2, r0
 800f85c:	b510      	push	{r4, lr}
 800f85e:	4290      	cmp	r0, r2
 800f860:	4603      	mov	r3, r0
 800f862:	d101      	bne.n	800f868 <memchr+0x10>
 800f864:	2300      	movs	r3, #0
 800f866:	e003      	b.n	800f870 <memchr+0x18>
 800f868:	781c      	ldrb	r4, [r3, #0]
 800f86a:	3001      	adds	r0, #1
 800f86c:	428c      	cmp	r4, r1
 800f86e:	d1f6      	bne.n	800f85e <memchr+0x6>
 800f870:	4618      	mov	r0, r3
 800f872:	bd10      	pop	{r4, pc}

0800f874 <abort>:
 800f874:	2006      	movs	r0, #6
 800f876:	b508      	push	{r3, lr}
 800f878:	f000 f82c 	bl	800f8d4 <raise>
 800f87c:	2001      	movs	r0, #1
 800f87e:	f7f1 f9c1 	bl	8000c04 <_exit>

0800f882 <_raise_r>:
 800f882:	291f      	cmp	r1, #31
 800f884:	b538      	push	{r3, r4, r5, lr}
 800f886:	4604      	mov	r4, r0
 800f888:	460d      	mov	r5, r1
 800f88a:	d904      	bls.n	800f896 <_raise_r+0x14>
 800f88c:	2316      	movs	r3, #22
 800f88e:	6003      	str	r3, [r0, #0]
 800f890:	f04f 30ff 	mov.w	r0, #4294967295
 800f894:	bd38      	pop	{r3, r4, r5, pc}
 800f896:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f898:	b112      	cbz	r2, 800f8a0 <_raise_r+0x1e>
 800f89a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f89e:	b94b      	cbnz	r3, 800f8b4 <_raise_r+0x32>
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	f000 f831 	bl	800f908 <_getpid_r>
 800f8a6:	462a      	mov	r2, r5
 800f8a8:	4601      	mov	r1, r0
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8b0:	f000 b818 	b.w	800f8e4 <_kill_r>
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d00a      	beq.n	800f8ce <_raise_r+0x4c>
 800f8b8:	1c59      	adds	r1, r3, #1
 800f8ba:	d103      	bne.n	800f8c4 <_raise_r+0x42>
 800f8bc:	2316      	movs	r3, #22
 800f8be:	6003      	str	r3, [r0, #0]
 800f8c0:	2001      	movs	r0, #1
 800f8c2:	e7e7      	b.n	800f894 <_raise_r+0x12>
 800f8c4:	2400      	movs	r4, #0
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f8cc:	4798      	blx	r3
 800f8ce:	2000      	movs	r0, #0
 800f8d0:	e7e0      	b.n	800f894 <_raise_r+0x12>
	...

0800f8d4 <raise>:
 800f8d4:	4b02      	ldr	r3, [pc, #8]	; (800f8e0 <raise+0xc>)
 800f8d6:	4601      	mov	r1, r0
 800f8d8:	6818      	ldr	r0, [r3, #0]
 800f8da:	f7ff bfd2 	b.w	800f882 <_raise_r>
 800f8de:	bf00      	nop
 800f8e0:	200000e4 	.word	0x200000e4

0800f8e4 <_kill_r>:
 800f8e4:	b538      	push	{r3, r4, r5, lr}
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	4d06      	ldr	r5, [pc, #24]	; (800f904 <_kill_r+0x20>)
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	4608      	mov	r0, r1
 800f8ee:	4611      	mov	r1, r2
 800f8f0:	602b      	str	r3, [r5, #0]
 800f8f2:	f7f1 f977 	bl	8000be4 <_kill>
 800f8f6:	1c43      	adds	r3, r0, #1
 800f8f8:	d102      	bne.n	800f900 <_kill_r+0x1c>
 800f8fa:	682b      	ldr	r3, [r5, #0]
 800f8fc:	b103      	cbz	r3, 800f900 <_kill_r+0x1c>
 800f8fe:	6023      	str	r3, [r4, #0]
 800f900:	bd38      	pop	{r3, r4, r5, pc}
 800f902:	bf00      	nop
 800f904:	20015a5c 	.word	0x20015a5c

0800f908 <_getpid_r>:
 800f908:	f7f1 b964 	b.w	8000bd4 <_getpid>

0800f90c <_init>:
 800f90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f90e:	bf00      	nop
 800f910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f912:	bc08      	pop	{r3}
 800f914:	469e      	mov	lr, r3
 800f916:	4770      	bx	lr

0800f918 <_fini>:
 800f918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f91a:	bf00      	nop
 800f91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f91e:	bc08      	pop	{r3}
 800f920:	469e      	mov	lr, r3
 800f922:	4770      	bx	lr
